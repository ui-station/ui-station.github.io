{"pageProps":{"posts":[{"title":"게임 산업의 현황  우리는 재미를 희생하고 있다","description":"","date":"2024-05-18 16:00","slug":"2024-05-18-TheLandscapeofGamingHaveWeSacrificedFunforPower","content":"\n## 게임\n\n<img src=\"/assets/img/2024-05-18-TheLandscapeofGamingHaveWeSacrificedFunforPower_0.png\" />\n\n지난 주말에는 다가오는 플레이스테이션 5 Pro와 그 사양에 관한 정보들이 유출되었습니다. 지금까지 하드웨어 측면에서는 유망한 모습을 보이고 있으며, 여기에 몇 가지 세부 정보가 있습니다:\n\n- PS5보다 45% 빠른 렌더링\n- 2–3배의 레이 트레이싱 (어떤 경우에는 4배)\n- 33.5 테라플롭\n- PSSR (플레이스테이션 스펙트럴 슈퍼 리졸루션 업스케일링) 업스케일링/안티앨리어싱 솔루션\n- 미래 SDK 버전에서 8K 해상도 지원 예정\n- 맞춤형 머신 러닝 아키텍처\n- 8비트 연산의 300 TOPS / 16비트 부동 소수점의 67 TFLOPS를 지원하는 AI 가속기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러나 이러한 유출물에 대한 토론이 진행될수록, 게이밍 커뮤니티는 언제나 대화에 끼어든 주제로 회귀했습니다: 그래픽입니다. 계속해서 모든 전형적인 용어들이 던져지기 시작했고, “레이 트레이싱,” “해상도 향상,” “4K 업스케일링” 등이 있죠. 결국 모든 것이 마무리될 때, 나는 자신에게 묻지 않을 수 없었습니다. “게임은 게임 자체가 아닌 다른 모든 것에 대해 언제부터 됐을까?”\n\n그때 깨달았습니다. 연산 능력과 그래픽 주변의 대화 뿐만 아니라, 우리가 더 이상 언급하지 않는 것들도 게임의 의미를 왜곡시켰다는 것을요. 그래서 최근에 나는 게임이 어떻게 즐거웠는지 상기시키기 위해 몇몇 옛 콘솔을 꺼내들었습니다. Nintendo 64, Sega Genesis, 그리고 PlayStation 2를 번갈아가며 사용한 뒤 현재 세대로 돌아가보니 빈틈을 느꼈고, 그것이 왜 그런지 탐구하고 싶어졌습니다.\n\n![이미지](/assets/img/2024-05-18-TheLandscapeofGamingHaveWeSacrificedFunforPower_1.png)\n\n# 그래픽 대 게임플레이\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n내 기억 속 여행의 첫 절반에서는 닌텐도 64와 세가 제네시스에서 시작했어요. 페이퍼 마리오, Destruction Derby, Virtua Fighter, Virtua Cop이 어릴 적에 가장 좋아했던 게임들 중 일부였어요. 그중에서도 페이퍼 마리오가 가장 잘 나이 들었다고 말할 수밖에 없어요. 다른 게임들도 그래픽적으로 매력적이었지만, 이틀에 처음 틀어본 것은 분명히 충격적인 경험이었어요.\n\n사실, 처음 이 게임들을 플레이할 때, 어린 시절에 어떻게 이 나사구멍 모양의 화면들이 내 주의를 끈 것이었는지 혼란스러웠던 기억이 떠올랐어요. 하지만, 이 게임들이 만들어진 시대에 있어서는 최고 수준이었습니다. 그리고 아마도 비디오 게임을 처음 탐험했던 어린이로서, 우리는 매우 즐거움을 느꼈던 것 같아요. 모든 게 새로운 경험이라서 각 게임은 지난 것과 다르게 느껴졌어요.\n\n하지만 지금 봤을 때, 우리는 게임이 영화적 경험으로 발전하는 기술을 마스터하고 있지만, 내면의 어린이에게 매력을 주었던 것에 대한 개선은 없는 것 같아요. 세계는 아름답게 보이고 호쾌한 이야기를 전달할 수 있지만, 조종기의 다른 끝에 있는 플레이어가 재미를 느끼지 못한다면, 무슨 의미가 있을까요? 저는 현대의 대부분의 게임이 단지 플레이어를 다음 컷씬으로 이끌어주는 역할만 하고 중간에 하는 일이 별로 없는 것 같다고 말할 수도 있겠어요.\n\n게임은 일상에서 벗어나는 수단으로 기능해야 하지만, 어떤 식으로 우리는 인생의 현실주의를 포착하고 아이러니하게도 그 또러자지 않은 면도 담아냈어요. 이상하게 들릴지 모르지만, 나는 90년대와 2000년 초반의 타이틀들에서 현대 기술에 의해 향상된 것보다 더 많은 재생 가치를 발견했어요. 오늘날 수백만 달러를 벌어온 AAA 개발자들이 과거의 낮은 해상도와 낡은 게임플레이 메커니즘을 향찰할 때 사람들이 뭔가를 갖게 되는 것을 어떻게 다루는 것인지에 대해 무엇을 말해줄까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![The Landscape of Gaming: Have We Sacrificed Fun for Power](/assets/img/2024-05-18-TheLandscapeofGamingHaveWeSacrificedFunforPower_2.png)\n\n# DLC vs Cheat Codes\n\n게임의 다른 요소 중 우리가 이제 거의 인정하지 않는 것은 치트 코드입니다. 제가 가장 먼저 기억하는 것 중 하나는 할아버지와 할머니와 함께 가게에 갈 때마다 노트북과 펜을 가져가는 것이었습니다. 각 여행은 내가 갖고 있는 게임을 위한 치트를 전담하는 특별한 페이지가 있는 잡지를 찾을 기회였죠. 시간이 흘러감에 따라, 잡지에서 멀어져 SuperCheats, CheatPlanet과 같은 웹사이트, 그리고 GameShark나 Action Replay와 같은 기기로 나아갔습니다.\n\n안타깝게도, 위, 위, 아래, 아래, 왼쪽, 오른쪽, 왼쪽, 오른쪽, B, A, start를 계속 누르는 시절은 사라졌습니다. 대신, 지금 우리가 가지고 있는 것은 DLC와 마이크로트랜잭션 형태의 기업적인 탐욕입니다. 이는 좋지 않은 게임 플레이 문제를 더 악화시킵니다. 게임을 완전히 개발하는 수고를 왜 해야 하나요? 완성된 게임과 동일한 가격으로 누락된 부분을 플레이어들에게 요금을 부과할 수도 있잖아요. 캐릭터 팩에 19.99달러, 확장에 39.99달러, 심지어 시즌 패스에 59.99달러를 지불할 수 있습니다. 사람들은 이러한 관행에 익숙해졌으니, 왜 안 하겠습니까?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결과적으로 게임 산업은 사람들이 최소한의 것을 전달하기 위해 지불할 의사가 있는 점을 이용했습니다. 비록 사기는 아닌 것 같아요, 전체적으로 말이죠. 치트 코드는 원래 개발자들이 디버깅과 플레이 테스트를 더 쉽게 할 수 있도록 고안된 방법이었어요. 그 시절에는 개발자 키트도 조금 더 비쌌기 때문에, 무한한 돈, 무한한 체력, 그리고 비밀 게임 내 도구와 같은 것들은 보통 그냥 남아 있는 코드였어요.\n\n지금은 개발 과정이 더 효율적으로 진행되고 있기 때문에 치트 코드를 포함할 이유가 사실상 없습니다. 그럼에도 불구하고, 숨겨진 개발자 코드의 자유로움에서 그것을 유료로 판매하는 상품으로 재패키징하는 과정을 보면 정말 실망스럽습니다. DLC를 통해 기업들이 얼마나 많은 수익을 올리든, 여전히 혁신적인 것을 제공하지 못하는 점은 더 나쁘다고 할 수 있겠네요.\n\n# 싱글 플레이어 vs 온라인 멀티플레이어\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마침내, 싱글 플레이어와 멀티플레이어 게임이 어떤식으로 서로 경쟁하는지에 대한 대화를 가졌어요. 기술이 발전함에 따라, 우리는 전 세계 사람들과 연결할 수 있는 능력도 향상되었죠. 레트로 게임 세션을 마무리하면서, 나는 혼자서 게임을 하는 시절을 생각해봤어요. 어릴 적에는 친구가 많지 않아서 자주 혼자 편안함을 찾아야 했지만, 선택할 게임 옵션으로 인해 어렸을 때 지루할 틈이 없다는 것을 말할 수 있어요.\n\n소닉 어드벤처 2, 킹덤 하츠, 파이널 판타지 X, 제트 리: 라이즈 투 아너, 혹은 콜로서스의 그림자와 같은 게임들, 항상 플레이할 게 있었죠. 하지만 이 게임들을 특별하게 만든 것은 다른 사람들이 내 옆에 없어도 즐길 수 있다는 것이죠. 이들 세계는 나 혼자서도 공유하고 완전히 감상할 수 있는 점이 매력적이었습니다.\n\n그러나 이러한 몰입 수준은 온라인 연결성이 더 많아지면서 뒷전을 밟고 있어요. 이제, 상황은 조금 달라졌는데, 당신은 혼자 게임을 하거나 가장 친한 친구들과 분할 화면 옆에 있는 것이 아닙니다. 온라인으로 연결되어, 전 세계 랭킹리스트와 게임하며, 특정 타입의 파티가 필요할 때도 있죠.\n\n이제 대부분의 게임은 공유 경험을 만들고 우리를 더 많은 사람들과 연결시키기 위해 만들어집니다. 기존의 싱글 플레이어 콘텐츠가 채워지기 어려운 것이 현실이 되고 있어요. 현재 언제든 연결될 수 있는 수십 명이나 수백 명의 플레이어들이 새로운 엔터테인먼트가 되었습니다. 그 결과, 우리는 게이머들 사이에 독선적이고 운동장에서 하지 말아야 할 행동들이 급증하고 있는 것을 보게 되었는데, 이는 게임이 탈출 수단으로서의 역할을 한층 더 약화시키고 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n게임 산업에서 변화가 일어나고 있다는 것은 의심할 여지가 없지만, 그겪는 변화가 좋은 방향으로 나아가고 있는지에 대해서는 말할 수 없어요. 기술은 한 가지 방향으로만 발전하고 있고, 개발자들이 뿌리로 돌아가지 않는다면 게임의 품질이 더욱 떨어질 것이라고 보고 있어요. 개인적으로, 우리는 지금 당장에는 콘솔의 유틸리티를 극대화할 필요가 없는 지점에 도달했다고 생각해요. 우리는 최신 하드웨어의 성능에 대한 대화를 줄이고, 게임 자체가 제공할 수 있는 즐거움에 초점을 맞추어야 한다고 봐요.\n\n이에 대해 다른 사람들의 의견을 듣고 싶어요. 콘솔의 유틸리티에 집중하는 것이 게임의 즐거움을 빼앗았다고 생각하시나요? 그래픽 최적화를 할 필요가 없다고 생각하시나요? DLC 개념에 대한 여러분의 의견은 무엇인가요? 온라인 게임이 싱글 플레이어 게임에 부정적인 영향을 미치고 있다고 생각하시나요?\n\n이에 대한 대화를 계속 이어가고 싶으시다면, 이 글에 댓글을 남겨주세요. 또는, 게임, 기술 및 DCU 관련 모든 것에 대한 저의 의견을 얻고 싶다면 'Keith Price' 채널을 구독해주세요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 참고 자료\n\nKamil S. (2018년 7월 14일). 슈퍼 닌텐도 엔터테인먼트 시스템 - 컨트롤러. https://unsplash.com/photos/selective-focus-photography-of-snes-controller-13W6AqIKV_I 에서 확인\n\nOnur Binay. (2021년 12월 31일). 노트북에서 비디오 게임을 하는 사람. https://unsplash.com/photos/a-person-playing-a-video-game-on-a-laptop-auf3GwpVaOM 에서 확인\n\nSean Do. (2018년 8월 16일). 컴퓨터를 사용하여 fps 게임을 하는 사람. https://unsplash.com/photos/person-using-computer-playing-fps-game-EHLd2utEf68 에서 확인\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTom Henderson. (2024년 3월 17일). EXCLUSIVE — 더 많은 플레이스테이션 5 프로 사양 상세 내용. https://insider-gaming.com/playstation-5-pro-more-specs/에서 확인하실 수 있습니다.\n\nVitalii Khodzinskyi. (2023년 5월 3일). 비디오 게임 컨트롤러의 근접 촬영. https://unsplash.com/photos/a-close-up-of-a-video-game-controller-FXlVXYTU-0s에서 확인하실 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-TheLandscapeofGamingHaveWeSacrificedFunforPower_0.png"},"coverImage":"/assets/img/2024-05-18-TheLandscapeofGamingHaveWeSacrificedFunforPower_0.png","tag":["Tech"],"readingTime":8},{"title":"당신의 첫 번째 플랫포머 게임을 Godot에서 만들어보세요","description":"","date":"2024-05-18 15:58","slug":"2024-05-18-MakeyourfirstPlatformergameinGodot","content":"\n# 소개\n\n안녕하세요! 이 블로그는 Godot을 사용하여 간단한 플랫포머 게임을 만드는 방법을 소개하고 있어요! Godot은 사용자 친화적 인터페이스와 포괄적인 게임 개발 기능으로 유명한 견고한 게임 엔진이에요. 그러나 게임 개발에 뛰어들기는 쉽지 않아요. 특히 초보자에게는 물 속에서 숨 쉬는 것 같은 느낌일지도 모르죠. 하지만 걱정 마세요! 이 여행을 시작하며 Godot의 기본원리를 탐구하고, 작동 방식을 이해하며, 플레이어 캐릭터, 게임 세계를 만들고 플레이어를 도전할 제약 조건을 구현해볼 거에요. 함께 게임을 만들며 배움을 즐겁게 만들어봐요!\n\n# Godot 재정리\n\nGodot은 직관적인 인터페이스를 제공해 환경을 설계하고, 플레이어 캐릭터를 만들고, 애니메이션을 구현할 수 있는 다재다능한 게임 엔진이에요. Godot은 파이썬과 유사한 스크립팅 언어인 Gdscript를 사용해 새로운 이용자들에게 접근하기 쉽게 해줘요. Godot에서는 모든 요소가 노드로 표현돼요. 플레이어 캐릭터든, 오디오 소스든, 게임 개체든, 모두 씬 내에 구성된 노드들이에요. 게다가 씬들은 서로 중첩하여 복잡한 레벨 디자인과 상호 작용을 할 수 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희 게임은 세 가지 필수 구성 요소로 구성되어 있습니다:\n\n- 플레이어 → 우리의 주요 캐릭터를 대표합니다.\n- 세계 → 플레이어가 이동하고 상호 작용하는 곳\n- 킬존 → 플레이어 이동을 제한하는 도전적인 영역\n\n누군가가 도약하는 것을 막는 것처럼, 우리 게임의 제한은 흥미와 도전을 더합니다. 예를 들어, 우리는 플레이어가 공허로 떨어졌을 때 플레이어의 죽음과 리스폰을 어떻게 처리할지 살펴볼 것입니다. 아래 인포그래픽은 장면, 노드 및 중첩 기능에 대한 시각적 개요를 제공합니다.\n\n<img src=\"/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_0.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 미리보기\n\n![이미지](https://miro.medium.com/v2/resize:fit:1400/1*CwIotC0mkJa6RKpamFXY2w.gif)\n\n# 설정\n\n우선적으로, 여기서 Godot을 다운로드합니다. 이 프로젝트에 사용된 에셋은 Kenney의 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGodot을 시작하고 +새로 만들기 버튼을 클릭하고 프로젝트 이름을 입력합니다. 그런 다음 폴더 만들기를 클릭하고 프로젝트 경로를 지정합니다. 마지막으로 만들기 및 편집 버튼을 클릭합니다.\n\n![이미지](/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_1.png)\n\nFileSystem에 assets, scripts 및 scenes라는 3개의 폴더를 생성합니다. 이제 Kenney에서 다운로드한 에셋을 assets 폴더로 드래그 앤 드롭할 수 있습니다.\n\n![이미지](/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 플레이어 씬 만들기\n\n플레이어를 배치할 게임 환경이 필요합니다. 게임 씬을 구축하기 위해 새 노드 만들기 아래에 있는 2D 씬 옵션을 선택하고 game으로 이름을 바꿉니다. 파일을 scenes 폴더에 저장하세요.\n\n이제 플레이어 씬을 만들어 봅시다. 이를 위해 + 아이콘을 클릭하여 새 씬을 생성합니다. 플레이어의 루트 노드는 CharacterBody2D가 될 것입니다. 새 노드를 추가하려면 Cmd(Ctrl)+A를 누르고 CharacterBody2D를 검색하세요. 이는 스크립트에 의해 이동되는 캐릭터용으로 특별화된 2D 물리 바디입니다.\n\n![이미지](/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_4.png\" />\n\n이제 플레이어에 그래픽을 추가해야 합니다. 이를 위해 Cmd(Ctrl)+A를 눌러 AnimatedSprite2D를 검색한 후 생성을 클릭하세요. 비디오의 단계에 따라 애니메이션된 플레이어를 씬에 추가하세요. 가로 및 세로 타일은 타일맵의 크기에 따라 조정되어야 함을 유의하세요.\n\n그 후에 CharacterBody2D에 노드에 모양이 없어 다른 노드와 충돌하거나 상호작용할 수 없으며 노드에 노란색 경고 표시가 나타납니다. 이를 해결하기 위해 물리 노드를 추가하여 물리 엔진이 작동할 수 있는 노드를 추가해야 합니다. 새 노드를 추가하려면 Cmd(Ctrl)+A를 눌러 CollisionShape2D를 검색하세요. 인스펙터에서 모양 버튼을 클릭하여 모양을 정의하고 캐릭터에 적합한 모양을 선택하세요. 저는 캡슐 모양을 사용합니다. 필요에 따라 크기를 조정하고 씬을 저장하세요.\n\n<img src=\"/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_5.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 플레이어를 게임에 넣으려면 플레이어 씬을 게임 씬으로 끌어다 놓기만 하면 됩니다. 제어하고 표시되는 내용을 보려면 카메라를 추가해야 합니다. 이를 위해 Cmd(Ctrl)+A를 누르고 카메라를 검색하세요. 생성을 클릭하고 게임에서 보이고 싶은 영역을 조정하세요.\n\n![이미지](/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_6.png)\n\n변경 사항을 저장하고 실행 버튼을 클릭하여 게임을 시작하고 캐릭터를 볼 수 있습니다.\n\n![이미지](/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_7.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n플레이어가 이동하지 않네요 :(\n이 문제를 해결하려면 플레이어 노드를 열고 필터 막대 옆에있는 Attach new script 버튼을 클릭하세요. 기본 템플릿을 선택한 상태로 유지한 채, 경로에서 스크립트 폴더를 선택하고 생성을 클릭하세요.\n\n기본 템플릿을 사용하면 플레이어가 화살표 키와 스페이스바를 사용하여 좌우로 이동하고 점프할 수 있게됩니다. 캐릭터 속도와 점프 속도는 스크립트 내에서 이 값을 변경하여 조절할 수 있습니다.\n\n이제 게임을 재시작하세요!\n\n캐릭터가 바로 떨어진 것이 보이나요? 이는 플레이어가 서 있을 땅이 없기 때문입니다! 플레이어는 이제 준비가 되었으니, 세계를 생성해봅시다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 월드 씬 만들기\n\n이제 플레이어가 서 있을 실제 지면을 만들고 있기 때문에 타일맵을 사용합니다. 배경은 간단히 배경 이미지를 씬으로 드래그 앤 드롭하여 추가합니다. 비디오를 따라가며 세계를 만들어 보세요.\n\n카메라가 플레이어를 따라가도록 만드려면, 카메라2D 노드를 플레이어 노드로 드래그하기만 하면 됩니다. 게임의 가장 아래 부분에서 카메라 중앙까지의 거리를 측정하고, 해당 수치를 카메라 인스펙터의 하한 제한에 추가하여 카메라가 아래쪽으로 빈 공간을 표시하지 않도록 합니다.\n\n# 킬존 만들기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n킬존을 생성하려면, 인스펙터에서 캐릭터의 충돌 레이어를 1에서 2로 변경합니다. 이렇게 하면 캐릭터가 새 레이어에 배치되어 킬존 영역을 캐릭터에게만 할당할 수 있습니다.\n\n![킬존 만들기](/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_8.png)\n\n킬존을 만드는 방법은 비디오를 따라하면 됩니다. 주요 단계는 킬존이라는 Area2D 씬을 만들고, 이를 게임에 추가한 다음, worldBoundary와 충돌 모양을 만들어 캐릭터가 경계를 넘어서면 캐릭터를 죽이는 부분입니다. 경계는 작아 보이지만 무한히 이어집니다. 죽이고 다시 생성하는 부분은 스크립트에서 처리됩니다.\n\n킬존에 사용된 스크립트:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 마무리\n\n축하해요! 우리는 Godot을 사용하여 게임 개발의 흥미로운 세계로 첫 걸음을 내딛었어요. 간단한 플랫포머를 만들면서 노드, 씬 그리고 GDScript로 스크립팅하는 기본 개념을 다뤘어요.\n\n기억해요, 게임 개발은 코딩만큼 반복과 배움의 과정이에요. 게임 개발의 세계는 광활하고 다채롭고, 각 프로젝트를 통해 뛰어남에 한 걸음 가까워져요. 이 블로그가 유익하게 느껴졌으면 좋겠어요. 언제든지 피드백과 제안을 기다리고 있어요.\n\n즐거운 코딩하시고, 여러분의 게임이 만드는 과정이 플레이하는 것만큼 즐거워지길 바래요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 참고 자료\n\nGodot 문서\nBrackeys Godot 초보자 튜토리얼\n","ogImage":{"url":"/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_0.png"},"coverImage":"/assets/img/2024-05-18-MakeyourfirstPlatformergameinGodot_0.png","tag":["Tech"],"readingTime":8},{"title":"내부 데이터 제품을 데이터 엔지니어로서 고려하는 방법","description":"","date":"2024-05-18 15:56","slug":"2024-05-18-HowtothinkaboutInternalDataProductsasaDataEngineer","content":"\n# 나에 대해\n\n안녕하세요! 저는 휴고 루입니다. 런던에서 M&A 업무를 시작으로 JUUL로 이직하여 데이터 엔지니어링에 빠져들었습니다. 잠시 금융 분야로 돌아온 후, 런던 소재 핀테크 기업 Codat에서 데이터 부서를 이끌었습니다. 지금은 Orchestra의 CEO입니다. Orchestra는 데이터 팀이 데이터를 안정적이고 효율적으로 프로덕션 환경에 배포할 수 있도록 도와주는 데이터 릴리스 파이프라인 도구입니다. 🚀\n\n우리의 Substack와 내부 블로그도 꼭 확인해주세요! ⭐️\n\n# 소개\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재는 데이터 팀 인원의 급격한 감소와 데이터에서 가치 추출 능력의 감소 때문에 Data Products이 현재 핫한 주제입니다. 데이터를 제품으로 생각하거나 \"데이터를 제품처럼 취급하기\"는 데이터를 이해하고 관리하며 데이터 엔지니어링 팀이 비즈니스를 위해 생산하는 Data Products의 속도와 수용을 향상시키는 인기있는 접근 방식입니다.\n\n이 기사에서는 데이터 엔지니어로써 내부 데이터 제품을 어떻게 생각해야 하는지에 대해 알아볼 것입니다. 데이터 제품에 관한 몇 가지 일반적인 질문에 답하고, 여러분이 처음 데이터 제품을 만드는 것에 대해 어떻게 생각하는지 보여줄 것입니다.\n\n# 데이터 제품이란?\n\n다양한 강연, 소셜 미디어 게시물, 블로그 게시물 및 사고 리더십 자료들을 제외하고 데이터 제품은 본질적으로 간단한 개념입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아이디어는 이중으로 이루어져 있어요. 첫 번째는 데이터에 제품 관리 원칙을 적용하는 것입니다. 작업 방식이 있습니다. 아래에 나열된 아이디어의 예시는 다음과 같아요:\n\n- 왜부터 시작하기\n- 문제를 이해하기\n- 열심히 집중하기\n- 팀에 권한 부여하기\n- 불확실성 수용하기\n- 입력, 출력, 결과 및 학습 균형 맞추기\n- 반복, 반복, 반복\n\n위의 원칙들을 보면, 이것들은 전형적인 데이터 엔지니어 직무 설명에서 보는 것과 매우 다릅니다 (우리가 고민하는 이유가 분명합니다).\n\n두 번째 아이디어는 데이터를 다른 사람에게 제공하는 서비스로 보는 대신에 제품으로 취급하는 것입니다. 이것은 Moody's나 Factset과 같은 기업에게는 훨씬 더 많은 의미를 갖게 됩니다. 그들의 시장은 데이터를 판매하는 것이기 때문에 이것은 훨씬 더 명확합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n거의 모든 기업이 데이터 기업이 되고 있다는 말에 흥분을 느낄 수 있지만, 대부분의 경우에는 현실적이지 않거나 지속할 수 없는 것입니다. 따라서 더 큰 데이터 제품 흥행은 내부 데이터 제품에 집중되어 있거나 비즈니스의 다른 이해 관계자들을 위해 데이터 엔지니어링 팀이 하는 일에 대해 생각하는 것입니다.\n\n이에 대해 중점을 두게 될 것입니다.\n\n# 내부 데이터 제품의 측면\n\n## 제품으로서의 데이터를 고려하기 전에\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 데이터 팀은 서비스 데스크로 운영되며 요청을 수락합니다.\n- 데이터 팀이 제공하는 것: 테이블, 대시보드, 가끔 예측 모델\n- 데이터 팀이 하지 않는 것: 비즈니스와 논의하는 일\n\n## 데이터를 제품으로 보고나서\n\n- 데이터 팀은 이해관계자들과 적 pressing한 비즈니스 문제를 해결하기 위해 미리 소통합니다.\n- 데이터 팀은 비즈니스 이해관계자와 함께 끝단 요구사항을 이루고자 하는 시각에서 이해합니다(데이터 테이블? 대시보드? 다른 것? 조합?).\n- 데이터 팀은 데이터 자산 이상을 만들어내며, 내부 마케팅 활동에 참여하고, 교육 세션을 운영하며, 문서 작성하고, 경보를 활성화하며, 설명 영상을 제작합니다 등.\n- 데이터 팀은 데이터 제품의 성능을 모니터링하고 이를 우선순위 설정에 활용합니다.\n\n이것이 잠재적으로 흥미로운 데이터 제품의 \"작업 방식\" 변화입니다. 자원소모가 더 많을 수 있지만, 더 적으면 더 나은 것이고, 자가 서비스 분석이 신화라면, 이 접근 방식은 많은 데이터 팀에게 더 나은 옵션일 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 데이터 제품 예시\n\n이것을 예시로 살펴봅시다.\n\n내부 소프트웨어 제품의 사용량을 보여주는 대시보드가 데이터 제품의 한 예입니다.\n\n- 최종 사용자: 제품 팀\n- 문제: 로드맵 결정을 위한 사용량 트렌드 이해 및 오류 디버깅\n- 해결책: 관련 정보가 담긴 대시보드, 그러나 특정 오류에 대한 관련 이해 관계자에 대한 자동 슬랙 알림도 함께 제공. 누가 무엇을 제어하는지에 관한 Confluence 문서화\n- 추가 기능: 전송된 알림 수, 대시보드 사용량, 및 파이프라인 비용 추적\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n오케스트라에서는 \"데이터 제품이란 무엇을 의미하는가\"에 대한 의미에서, 우리가 이 중 하나를 가지고 있으며, 바로 위에 설명된 것과 똑같습니다.\n\n우리에게는 대시보드가 있습니다:\n\n![대시보드 이미지](/assets/img/2024-05-18-HowtothinkaboutInternalDataProductsasaDataEngineer_0.png)\n\n의사 결정이 필요할 때 이해관계자들을 알리기 위한 알림이 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`<img src=\"/assets/img/2024-05-18-HowtothinkaboutInternalDataProductsasaDataEngineer_1.png\" />`\n\n내부 데이터 제품에 대한 생각 방식으로써 데이터 엔지니어링자로서 어떻게 고려해야 하는지에 대한 내용입니다.\n\n그리고 데이터 제품의 사용은 면밀히 모니터링됩니다:\n\n`<img src=\"/assets/img/2024-05-18-HowtothinkaboutInternalDataProductsasaDataEngineer_2.png\" />`\n\n이러한 기능 집합과 서비스 데스크 스타일 메인에서 변경되는 프로세스는 데이터 제품 주도 접근 방식과 표준 데이터 기능 접근 방식의 차이입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 데이터 제품을 만드는 방법은 무엇인가요?\n\n뭐든 많은 일처럼 보이죠? 결국 아무도와 대화하지 않고 문서화되지 않은 테이블을 작성하는 것이 위의 모든 것보다 훨씬 빠를 것입니다!\n\n하지만 시작할 때는 덜이 더 좋습니다. 데이터 제품 후보를 고를 때 사용하는 기준은 다음과 같습니다.\n\n## 고가치\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n고가치 사용 사례를 선택하세요. 이상적으로 첫 번째 데이터 제품은 중요한 사람에게 중요한 기능을 제공하거나 중요한 문제를 해결해야 합니다. 초기 단계부터 데이터 제품의 가치를 증명하는 데 중요합니다.\n\n## 간편함\n\n구현하기 쉬운 파이프라인을 선택해 보세요. 이곳에서 하지 말아야 할 좋지 않은 예는 마케팅 프로젝트입니다. 마케팅 데이터는 알려진 바와 같이 복잡하며 다양한 곳에서 가져옵니다. 마케팅 ROI를 계산하는 것은 간단하지 않습니다.\n\n더 나은 예는 간단한 제품 사용 대시보드나 영업팀을 위한 지능형 분석이 될 수 있습니다. 후자의 예에서는 일반적으로 소수의 소스에서 데이터를 추출하여 내부 데이터 제품을 구축하는 원형 과정을 단순화할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 격리\n\n이것은 단순성과 얽혀 있지만, 매우 목표를 정확히 설정하거나 독립적인 사용 사례를 선택하면 데이터 제품을 다른 파이프라인과 독립적으로 제공할 수 있습니다. 이렇게 하면 종속성이 적어지므로 속도가 높아집니다. 예를 들어, 특정하지만 중요한 데이터가 될 수 있습니다.\n\n## 친숙함\n\n이상적으로는, 사람들이 익숙한 파이프라인을 선택해야 합니다. 이렇게 하면 결과물에 대한 이해도가 높으며 기대하는 이해 관계자가 무엇을 기대하는지에 대한 확신이 생깁니다. 이렇게 하면 더 빨리 제공할 수 있습니다(무엇을 제공하는지 알기 때문에)만 일반적인 가치를 빠르게 추가할 수도 있습니다(가치 있는 것으로 이미 알고 있는 것을 보강하게 됩니다). 다른 한편으로는, 완전히 새로운 일을 하지 않도록 노력해보세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 참여 독려\n\n비즈니스 다른 곳에서 어떤 지지를 받고 있는 것을 선택하는 것이 좋습니다. 데이터 제품의 수용률을 향상시키는 것 뿐만 아니라 더 접근 가능한 소스로부터 피드백을 수집하는 데도 도움이 됩니다. \"데이터 제품을 공개하자\" 라는 것이 마침내 실망스러운 피드백만 받아들이고 대상 시청자로부터 신뢰를 잃는 것을 원하지 않을 것입니다.\n\n## 생성적 인공지능 및 AI 제품에 대한 참고\n\n생성적 인공지능이 이 구조에 매우 잘 맞는 것을 알 수 있을 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAI Chatbot와 같은 제품은 데이터 파이프라인을 통해 활성화됩니다. 비구조적 데이터를 수집하고 Generative AI를 사용하여 정리한 다음 이를 임베딩으로 변환할 수 있습니다.\n\n이러한 임베딩은 ChatBot에서 사용됩니다.\n\n전체적으로 Generative AI 제품은 데이터 파이프라인과 Chatbot으로 구성됩니다. 이 경우 사용량 모니터링은 ChatBot이 상호 작용하는 정도를 확인해야 하기 때문에 조금 더 복잡하지만 데이터 파이프라인의 비용 요소를 모니터링하는 것은 거의 동일합니다!\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기사에서는 데이터 제품 주변에 왜 관심이 쏠렸는지와 그 의미에 대해 논의했습니다. 모든 기업이 데이터 기업으로 발전하는 것이 아니라 데이터 팀이 비즈니스 이해관계자를 위해 어떻게 일하는지에 초점을 맞추었습니다.\n\n우리는 데이터 제품을 만드는 것이 현재의 작업 방식에서 벗어난 것으로 보인다는 것을 알았습니다. 이는 좀 더 서비스 중심적인 방식입니다. 데이터 제품 마인드셋으로 전환하는 것은 \"문제 해결 티켓을 완료하기\"에 더 많은 노력이 필요하지만, 이는 더 나은 최종 제품을 만들어내며 데이터로부터 더 큰 가치를 창출할 수 있게 됩니다.\n\n마지막으로, 갈등을 선택하는 것이 중요하며 단순함, 참여, 격리 정도 및 친숙함과 같은 요소가 데이터 제품의 성공에 영향을 줄 수 있다는 것을 알게 되었습니다.\n\n더 자세히 이야기하거나 생각을 나누고 싶다면 언제든지 알려주세요! DM은 열려 있어요 🌲\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 오케스트라에 대해 더 알아보기\n\n오케스트라는 데이터를 최대한 인간적으로 가치를 뽑아내는 플랫폼입니다. 또한 다양한 사용 사례와 솔루션에 대한 해결책을 제공하는 기능이 풍부한 조정 도구입니다. [우리의 문서](https://example.com)를 확인해보세요. 그리고 우리의 통합을 확인해보세요 - 우리가 관리하기 때문에 여러분은 파이프라인을 즉시 시작할 수 있습니다. 저희는 오케스트라 팀과 게스트 작가들이 함께 쓴 [블로그](https://example.com)와 조금 더 심도 있는 내용을 다룬 [화이트페이퍼](https://example.com)도 갖추고 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-HowtothinkaboutInternalDataProductsasaDataEngineer_0.png"},"coverImage":"/assets/img/2024-05-18-HowtothinkaboutInternalDataProductsasaDataEngineer_0.png","tag":["Tech"],"readingTime":9},{"title":"폐기 포맷되지 않은 혐오 이메일이 인기 있는 Nodejs 프로젝트에 충분했다","description":"","date":"2024-05-18 15:55","slug":"2024-05-18-DecommissionedAnUnformattedHateEmailWasEnoughtForAPopularNodejsProject","content":"\n![Image](/assets/img/2024-05-18-DecommissionedAnUnformattedHateEmailWasEnoughtForAPopularNodejsProject_0.png)\n\n# 시간이 부족하며 사용되지 않는 이유와 엄청난 이메일이 LDAPjs의 주요 관리자를 폐지하게 했습니다. 사람들은 언제 코드를 서식 지정하는 법을 배울까요?\n\n제임스 서머스는 여러 중요한 프로젝트를 유지하는 데 있어 Node.js 광 범주 커뮤니티에서 가장 존경받는 인물 중 한 명입니다.\n\n여러분이 확실히 알고 있는 이 프로젝트들 중 하나인 Fastify, 가벼운 Node.js 웹 서버 또는 Pino, 빠른 JSON 로거 외에도 PL/JSON의 핵심 관리자로 활동했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그는 미국 Clayton State University에서 수학 학사 학위를 받았어요.\n\n2019년 8월부터는 다른 Node.js 보석인 LDAPjs를 유지하고 있어요.\n\nLDAP는 통신 프로토콜이에요.\n\n서버 또는 프린터와 같은 장치를 발견하고 연결하기 위해 많은 조직에서 널리 사용되는 표준이에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nLDAPjs는 Node.js를 위한 프로토콜 구현체입니다. 이를 통해 JavaScript 개발자들은 LDAP를 쉽게 활용하여 서비스를 구축할 수 있습니다.\n\nLDAPjs를 사용하는 회사 및 프로젝트로는 시게이트, Tracktr, Infiscal, Homarr, OpenSign, 아마존 등이 있습니다.\n\n이 목록은 일부이며 더 많은 회사와 프로젝트가 있습니다.\n\n이 프로젝트는 성공적이고 폭넓게 사용되는 오픈 소스 프로젝트로, 1.6천 개의 스타, 402 개의 포크 및 68명의 기여자가 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n오늘은 아쉽게도 제임스 서머스가 프로젝트를 아카이브하기로 결정했어요. 이는 해당 상태에서 새로운 기여를 받지 않지만 여전히 온라인에서 이용 가능한 것을 의미합니다.\n\n아마도 오래되었거나 전혀 사용되지 않았을 것이라고 생각했어요. 하지만 실제로 사용 중이며 활발히 개발되고 있어요. 최신 버전은 2023년 12월에 나온 것으로 오랜 기간 동안 안정적으로 운영되는 프로젝트에게 자연스럽죠.\n\n그렇다면 무슨 일이 있었을까요?\n\n프로젝트의 공식 페이지에 가면 프로젝트 폐지의 이유를 확인할 수 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것들은 세 가지 주요 문제로 요약됩니다:\n\n- 핵심 유지관리자가 시간이 부족합니다.\n- 그는 더 이상 사용하지 않을 위치에 있습니다.\n- 혐오 메일을 받았습니다.\n\n첫 두 가지 포인트는 먼저 논의할 가치가 있습니다. 제임스는 이 프로젝트를 자신의 회사에서 필요할 때 개발했습니다. 하지만 그는 그것이 필요하지 않는 다른 회사로 이직했기 때문에 더 이상 발전시키는 목적이 없습니다.\n\n이해할 만한 상황입니다. 그는 어떤 기능은 완성하는 데 전체 근무 주를 소요할 것이라고 적었습니다. 이는 그가 감당할 수 없는 시간이라고 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그것도 물론 합리적이에요. 교육을 받은 전문가가 어떤 대가도 받지 않는 프로젝트에 시간을 투자하는 이유가 뭐죠?\n\n기업을 위해 오픈 소스 프로젝트를 유지하고 있는 것보다 더 재미있는 여가 활동이 많이 있어요.\n\n놀랍기는 한데, 이 회사들이 LDAPjs 개발자가 이용하는 프로젝트에 시간을 할애할 수 있도록 돈을 지불하지 않았다는 점이에요.\n\n프로젝트에 대한 안타까운 순간이기는 하지만, 모든 다른 프로젝트들과 마찬가지로 James와 다른 기여자들이 몇 년 동안 프로젝트에 기여한 노고를 감사히 여기는 좋은 순간이기도 해요. 우리는 James와 세계 곳곳의 수백 명의 개발자들이 많은 오픈 소스 프로젝트를 봉사하는 것을 기억해야 해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n주목받는 개발자들은 종종 오픈 소스 프로젝트에서 무료로 일하면서 헤드라인까지 이르지 않습니다. 하지만 그들은 이것을 의미 있는 일로 생각하기 때문입니다.\n\n안타깝게도, 모든 사람이 이를 알고 인정하려고 하거나 예의범절을 유지하려고 하는 것은 아닙니다.\n\n제임스는 LDAPjs 프로젝트를 사용하는 데 문제가 있어 한 사람에 의해 공격당했습니다. 이메일은 모든 기준을 크게 넘어서기 때문에 인용하지 않겠습니다.\n\n제임스에게는 그 이메일이 충분했습니다. 그는 해당 이메일을 언급하여 프로젝트의 해지 원인 중 하나로 언급했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이해하기 쉽네요. 그는 몇 년 동안 많은 도구로 넓은 커뮤니티와 회사를 지원하기 위해 열심히 일해왔어요. 그는 보상도 받지 않고 인정받지도 않았어요. 결국 그저 악플 이메일을 받게 되었어요.\n\n기술적으로 가장 엄청난 점은 그가 코드를 서식을 맞추는 데 신경쓰지 않았다는 것이죠:\n\n![디렉토리](/assets/img/2024-05-18-DecommissionedAnUnformattedHateEmailWasEnoughtForAPopularNodejsProject_1.png)\n\n그 이메일의 엄청난 부분보다 더 많은 이야기를 하는군요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그게 우리가 정말 알아야 할 모든 정보에요. LDAPjs가 폐지되었지만, 제임스는 새로운 담당자나 조직이 프로젝트를 안정적이고 안전한 방식으로 이어갈 수 있는지 올바르게 검증할 수 있다면 프로젝트를 좋은 손에 맡길 준비가 되어 있다고 말했어요.\n\n그리고 온라인 상태인 프로젝트는 여전히 사용할 수 있고 또한 포크를 개발할 수도 있어요.\n\n이는 LDAPjs 사용자들이 안전하다는 뜻이지만, 중요한 오픈 소스 프로젝트가 이러한 중요한 기여자를 잃지 않았으면 하는 바람도 있어요.\n\n내가 사용하는 프로젝트의 유지 보수자들에게 인정의 이메일을 보내볼까 생각 중이에요. 그들에게 하루를 만들어줄 수 있을 거에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.\n","ogImage":{"url":"/assets/img/2024-05-18-DecommissionedAnUnformattedHateEmailWasEnoughtForAPopularNodejsProject_0.png"},"coverImage":"/assets/img/2024-05-18-DecommissionedAnUnformattedHateEmailWasEnoughtForAPopularNodejsProject_0.png","tag":["Tech"],"readingTime":6},{"title":"프로처럼 코딩하는 데 도움이 되는 유용한 C NET 코드 스니펫 10가지","description":"","date":"2024-05-18 15:54","slug":"2024-05-18-10UsefulCNETSnippetsToCodeLikeaPro","content":"\n<img src=\"/assets/img/2024-05-18-10UsefulCNETSnippetsToCodeLikeaPro_0.png\" />\n\n소프트웨어 개발의 끊임없는 세계에서 C#과 .NET 프레임워크는 견고하고 확장 가능한 응용 프로그램을 만들기 위한 기둥으로 자리 잡고 있습니다. 다양한 기능과 직관적인 구문을 갖춘 C#/NET을 마스터하면 프로젝트를 혁신할 수 있습니다. 이 기사에서는 코딩 스킬을 한 단계 올리게 해줄 10가지 선별된 코드 스니펫을 소개합니다. 이를 통해 효율적이고 우아한 코드의 아름다움에 매료될 수 있습니다.\n\n## 1. 읽기 전용 컬렉션\n\n불변 컬렉션은 스레드 안전 작업 및 데이터 무결성을 보장하는 데 필수적입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```csharp\nvar originalList = new List<string> { \"Alice\", \"Bob\", \"Charlie\" };\nvar readOnlyCollection = originalList.AsReadOnly();\n\n// readOnlyCollection은 이제 변경할 수 없습니다.\n```\n\n## 2. 응답성 있는 앱을 위한 Async/Await\n\n사용자 인터페이스 반응성을 유지하고 작업을 블로킹하지 않으려면 async/await를 사용하세요.\n\n```csharp\npublic async Task<string> FetchDataAsync(string url)\n{\n    using (var httpClient = new HttpClient())\n    {\n        var response = await httpClient.GetStringAsync(url);\n        return response;\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 3. LINQ 쿼리\n\nLINQ 쿼리를 사용하여 데이터를 쉽게 조작하여 가독성과 간결함을 향상시킬 수 있습니다.\n\n```js\nvar scores = new int[] { 97, 92, 81, 60 };\n\nvar highScores = from score in scores\n                 where score > 80\n                 select score;\n\n// highScores에는 이제 97, 92, 81이 포함됩니다.\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n널 참조 예외를 피하기 위해 안전한 널 체크를 위해 널 조건부 연산자를 사용하세요.\n\n```js\nstring[] array = null;\nvar length = array?.Length ?? 0;\n\n// 예외를 던지지 않고 length가 0이 됩니다.\n```\n\n## 5. 튜플 해체\n\n튜플과 해체를 사용하여 여러 값을 반환하여 메서드 출력을 간소화하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```cs\npublic (int, string) GetPerson()\n{\n    return (1, \"John Doe\");\n}\n\nvar (id, name) = GetPerson();\n```\n\n## 6. 가벼운 데이터 구조를 위한 ValueTuple\n\n전체 클래스나 구조체를 정의하지 않고 임시 데이터 구조를 만들기 위한 ValueTuple을 활용하세요.\n\n```cs\nvar person = (Id: 1, Name: \"Jane Doe\");\n\nConsole.WriteLine($\"{person.Name}는 ID가 {person.Id}입니다.\");\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 7. 패턴 매칭\n\n타입과 값 확인 시 더 표현적인 구문을 위해 패턴 매칭을 활용해 보세요.\n\n```js\nobject obj = 123;\n\nif (obj is int i)\n{\n    Console.WriteLine($\"정수: {i}\");\n}\n```\n\n## 8. 확장 메서드\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기존 클래스의 기능을 향상시키는 방법은 소스 코드를 수정하지 않고 해당 클래스를 사용하는 것입니다.\n\n```js\npublic static class StringExtensions\n{\n    public static string Quote(this string str)\n    {\n        return $\"\\\"{str}\\\"\";\n    }\n}\n\nvar myString = \"Hello, world!\";\nConsole.WriteLine(myString.Quote());\n```\n\n## 9. Using 선언\n\n새로운 using 선언을 사용하여 가역 개체의 관리를 간소화하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nvar streamReader = new StreamReader(\"file.txt\");\nvar content = streamReader.ReadToEnd();\n\n// StreamReader가 자동으로 여기서 폐기됩니다.\n```\n\n## 10. 동적 LINQ to SQL\n\n동적 LINQ를 사용하면 데이터베이스에 대해 유연한 쿼리를 작성할 수 있어서 애플리케이션의 요구 사항이 변화할 때 적응할 수 있습니다.\n\n```js\nusing (var context = new DataContext())\n{\n    var query = context.People.Where(\"City == @0 and Age > @1\", \"Seattle\", 25);\n    foreach (var person in query)\n    {\n        Console.WriteLine(person.Name);\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 코드 조각들을 매일의 코딩 작업에 통합하면 코드의 효율성과 명확성을 향상할 뿐만 아니라 강력하고 확장 가능한 응용 프로그램을 만들기 위해 C# 및 .NET의 모든 잠재력을 발휘할 수 있습니다. 이러한 코드 조각들은 .NET 프로그래밍의 광활한 세계를 탐험하는 데 사용되며, 생산하는 각 줄 코드가 품질과 전문성에 대한 당신의 헌신을 반영하도록 보장합니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/0*fFApY4bO4FauRKYf.gif)\n\n👏 이 내용이 도움이 되었다면, 버튼을 길게 누르면 여러 번 클랩할 수 있습니다. 또한, 의견과 제안을 남겨주시면 이 주제에 대해 계속 토론할 수 있도록 모바일합니다.\n\n읽어 주셔서 감사합니다.\n","ogImage":{"url":"/assets/img/2024-05-18-10UsefulCNETSnippetsToCodeLikeaPro_0.png"},"coverImage":"/assets/img/2024-05-18-10UsefulCNETSnippetsToCodeLikeaPro_0.png","tag":["Tech"],"readingTime":6},{"title":"파이다닉Pydantic 전문가를 위한 Validator 재사용과 가져오기","description":"","date":"2024-05-18 15:52","slug":"2024-05-18-PydanticforExpertsReusingImportingValidators","content":"\n## 파이썬 모델들 사이에서 검증을 재사용하고 가져오는 고급 기술들.\n\n## 축하드려요 🎉\n\n만약 이 글을 읽고 계신다면, 여러분은 아마 파이썬 기술을 향상시키고 몇 가지 고급 pydantic 기능들을 배우고 싶을 것입니다.\n\n![이미지](/assets/img/2024-05-18-PydanticforExpertsReusingImportingValidators_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 배경\n\n일반적으로 스키마 강제가 데이터베이스 레이어에서 이루어졌습니다 — 델타나 아이스버그와 같은 오픈 테이블 형식의 프레임워크도 스키마를 강제할 수 있습니다.\n\nPydantic은 스키마 강제에 대한 새로운 사고 방식을 소개합니다 — 정책 및 조작으로써 사용됩니다. 다시 말해, 스키마는 다양한 입력에서 변환될 수 있다고 가정하면, 이러한 모든 시도에 실패하면, 해당 객체는 유효하지 않습니다. 이는 꽤 멋진 패러다임이며, 더 많은 데이터 도구가 이를 따르기를 원합니다.\n\n## Pydantic은 스키마 강제를 위해 3가지 방법을 제공합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 엄격 모드:\n  객체에 대해 강제 변환을 수행하지 않습니다 → 예: '\"number\": \"123\"'은 실패할 것입니다, 왜냐하면 \"123\"은 숫자가 아니라 문자열이기 때문입니다.\n- 관대 모드:\n  \"합리적 형식\"에서 예상 형식으로 변환을 수행합니다. 예를 들어 위의 예시는 성공할 것입니다 → 대체: 정수 필드의 부울 값은 0 또는 1로 변환됩니다.\n- 사용자 정의 유효성 검사기:\n  내부적인 pydantic 유효성 검사 전후에 사용자 정의 유효성 검사 논리를 수행할 수 있습니다. 예를 들어, float(`inf`)를 999_999_999으로 대체할 수 있습니다. 참고: 사용자 정의 유효성 검사기는 엄격 모드 또는 관대 모드와 함께 작동합니다.\n\n사용자 정의 유효성 검사기에 관한 ↓\n\n## pydantic 철학은 간단합니다:\n\n- 데이터는 예상된 유형을 갖습니다.\n- 데이터는 다양한 입력 형식으로부터 예상된 유형으로 변환되어야 합니다.\n- 일반적 (또는 \"합리적\") 변환은 기본 동작입니다 (관대 모드와 함께).\n- 사용자 지정 변환은 사용자 정의 동작을 처리하기 위해 구현될 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 소개\n\nPydantic의 유효성 검사 도구는 데이터 작업 시 강력한 도구입니다. 유효성 검사 도구를 재사용하면서 코드를 DRY 상태로 유지하는 것은 중요한 기술입니다. 이 문서에서는 유효성 검사 도구를 재사용하는 여러 방법에 대해 논의할 것입니다.\n\n# 문제 명시:\n\n제목 형식이어야 하는 필드가 있다고 가정해 봅시다. 이러한 제약 조건을 필드 수준에서 다음과 같이 강제할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom pydantic import field_validator, BaseModel\n\n\nclass Model(BaseModel):\n    first_name: str = \"Samuel\"\n\n    @field_validator('first_name')\n    def must_be_title_case(cls, v: str) -> str:\n        if v != v.title():\n            raise ValueError(\"must be title cased\")\n        return v\n```\n\n여러 필드를 유효성 검사하는 것도 매우 간단합니다:\n\n```python\nfrom pydantic import field_validator, BaseModel\n\nclass Model(BaseModel):\n    first_name: str = \"Samuel\"\n    last_name: str = \"Colvin\"\n\n    @field_validator('first_name', 'last_name')\n    def must_be_title_case(cls, v: str) -> str:\n```\n\n그러나 여러 모델에서 여러 필드에 걸쳐 이 유효성 검사기를 공유하려면 어떻게 해야 할까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 솔루션 개요:\n\n밸리데이터를 재사용하는 여러 기술이 있습니다:\n\n- 재사용 가능한 밸리데이터\n- 주석이 달린 밸리데이터\n- 클래스 메서드\n\n# 옵션 1. 모델 간에 재사용할 수 있는 하나의 유효성 검사 함수 정의하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이는 프로젝트 내에서 유효성 검사기를 가져와 재사용할 수 있도록 가능하게 합니다.\n\n```python\nfrom pydantic import field_validator, BaseModel\n\n\ndef must_be_title_case(v: str) -> str:\n    \"\"\"프로젝트 전체에서 사용할 수 있는 유효성 검사기\"\"\"\n    if v != v.title():\n        raise ValueError(\"첫 글자는 대문자로 입력되어야 합니다\")\n    return v\n\n\nclass Model1(BaseModel):\n    first_name: str = \"Samuel\"\n    last_name: str = \"Colvin\"\n\n    validate_fields = field_validator(\"first_name\", \"last_name\")(must_be_title_case)\n\n\nclass Model2(Model1):\n    \"\"\"Model1에서 필드를 상속받음\"\"\"\n    organization: str = \"Pydantic\"\n\n    validate_fields = field_validator(\"organization\")(must_be_title_case)\n```\n\n원하는 경우 자식 클래스에서만 필드 유효성 검사를 정의할 수 있습니다:\n\n```python\nclass Model1(BaseModel):\n    first_name: str = \"Samuel\"\n    last_name: str = \"Colvin\"\n\nclass Model2(Model1):\n    \"\"\"Model1에서 필드를 상속받음\"\"\"\n    organization: str = \"Pydantic\"\n\n    validate_fields = field_validator(\"first_name\", \"last_name\", \"organization\")(must_be_title_case)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 더 많은 예시를 보여드리겠습니다:\n\n```js\nfrom pydantic import BaseModel, field_validator, ValidationError\n\n\ndef must_be_title_case(v: str) -> str:\n    \"\"\"이것은 전체에서 사용할 수 있는 유효성 검사기입니다.\"\"\"\n    if v != v.title():\n        raise ValueError(\"첫 글자가 대문자이어야 합니다.\")\n    return v\n\n\nclass Model1(BaseModel):\n    first_name: str = \"Samuel\"\n    last_name: str = \"Colvin\"\n\n    # 자식에게 유효성 검사기가 전달되지 않는 문제를 피하기 위해 데코레이터로 정의됨\n    @field_validator('first_name', 'last_name')\n    @classmethod\n    def wrap_must_be_title_case(cls, v):\n        return must_be_title_case(v)\n\n\ndef cannot_contain_letter_L(v):\n    \"\"\"임의의 규칙입니다.\"\"\"\n    if 'L' in v.upper():\n        raise ValueError\n    return v\n\nclass Model2(Model1):\n    \"\"\"Model1로부터 필드를 상속받습니다.\"\"\"\n    organization: str = \"Pydantic\"\n\n    validate_fields = field_validator(\"organization\", \"last_name\")(cannot_contain_letter_L)\n\n\nfor v in [\n    \"colvin\",  # 부모의 유효성 검사에 실패할 것이며, 첫 글자가 대문자여야 합니다.\n    \"Colvin\"   # 자식의 유효성 검사에 실패할 것이며, L을 포함해서는 안 됩니다.\n]:\n  try:\n\n    m = Model2(last_name=\"colvin\")\n  except ValidationError as e:\n    print(e)\n```\n\n여기서 유효성 검사기들은 정의된 순서대로 실행됩니다. 즉, 부모의 유효성 검사기가 먼저 실행되고, 자식의 유효성 검사기가 나중에 실행됩니다. 부모의 유효성 검사에서 실패하면 자식의 유효성 검사기는 실행되지 않습니다.\n\n# 옵션 2. Annotated Validator로 유효성 검사 정의하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것은 재사용 가능한 유효성 검사된 \"타입\"을 정의할 수 있게 해줍니다. 매우 높은 유연성을 제공합니다.\n\n```js\nfrom typing_extensions import Annotated\n\nfrom pydantic import BaseModel, ValidationError, field_validator\nfrom pydantic.functional_validators import AfterValidator\n\n\n# 이전과 같은 함수\ndef must_be_title_case(v: str) -> str:\n    \"\"\"전체에서 사용할 유효성 검사기\"\"\"\n    if v != v.title():\n        raise ValueError(\"제목이어야 함\")\n    return v\n\n\n# Annotated (유효성 검사된) 타입 정의:\nMySpecialString = Annotated[str, AfterValidator(must_be_title_case)]\n\n\n# 이제 모델에서 사용자 정의 타입을 사용합니다.\nclass Model1(BaseModel):\n    first_name: MySpecialString = \"Samuel\"\n    last_name: MySpecialString = \"Colvin\"\n\n\nclass Model2(Model1):\n    organization: MySpecialString = \"Pydantic\"\n```\n\n여기에서 어노테이션된 타입에서 무슨 일이 일어나는지 간단히 설명해 드리겠습니다:\n\n- 기본 타입은 문자열입니다.\n- Pydantic은 입력 값을 문자열로 변환하려고 할 것입니다. 이것이 \"핵심 유효성 검사\" 단계로 간주됩니다.\n- Pydantic의 유효성 검사 후, 우리의 유효성 검사기 함수를 실행할 것입니다 (AfterValidator로 선언됨) — 이것이 성공하면 반환된 값이 설정됩니다.\n- 대신 어노테이션에서 BeforeValidator를 선언하여 값을 변환하기 전에 함수를 실행할 수도 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 사용자 정의 유형 가져오기:\n\n일반적인 디자인 원칙으로, 내가 주로 지지하는 것은 사용자 정의 유형을 자체 서브모듈에 만드는 것입니다. 내가 설계했다면 다음과 같은 디렉토리 구조가 될 수 있습니다:\n\n```js\nproject-root\n|\n├── models\n│   ├── base.py       <---- 프로젝트당 사용자 정의 기본 클래스를 사용하는 편입니다\n|   |\n│   ├── custom_types  <---- 사용자 정의 유형이 이곳에 위치합니다\n│   │   └── strings.py\n│   │\n│   ├── request_models\n│   │   └── people.py\n│   │\n│   ├── response_models\n│   │   └── people.py\n│   │\n│   └── interfaces\n│       └── aws.py\n|\n└── main.py  <---- models에서 필요한 것을 가져옵니다\n```\n\nrequest_models.people에 사용자 정의 유형이 필요한 경우, 다음과 같이 코드를 작성할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom models.base import MyCustomBaseClass\nfrom models.custom_types.strings import MyCustomString\n\n\nclass PersonRequestModel(MyCustomBaseClass):\n    first_name: MyCustomString\n    ...\n```\n\n위에서 보듯이 주석이 달린 유형 내에 포함된 유효성 검사기를 가져오는 것은 정말 쉽고 관심사의 청결한 분리를 강제할 수 있습니다.\n\n마찬가지로 유효성 검사기에 대한 동일한 구분된 서브모듈을 만들 수 있지만, 그들이 어떻게 구성되어야 하는지 및 어떤 종류여야 하는지가 덜 명확해집니다.\n\n# 옵션 3. 주석이 달린 유형 상속하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특별한 유형 MySpecialString을 상속하고 유효성 검사기를 추가하려면 다음과 같이 할 수 있습니다:\n\n```js\ndef cannot_contain_letter_L(v):\n    if 'L' in v.upper():\n        raise ValueError\n    return v\n\n\nMySpecialString2 = Annotated[\n  MySpecialString, AfterValidator(cannot_contain_letter_L)\n]\n\n\nclass Model1(BaseModel):\n    first_name: MySpecialString2 = \"Samuel\"\n    last_name: MySpecialString2 = \"Colvin\"\n```\n\n상속 수준에 따라 검증 순서가 실행되며 루트부터 시작합니다. 동작의 추가 설명은 위의 테스트 케이스를 참고하세요.\n\n특히, 기존 동작을 추가해야 할 대규모 pydantic 모델 코드베이스와 상호 작용할 때 이 기능이 매우 유용합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 옵션 4. 상속된 모델 유효성 검사기(Class validators)를 사용하여 필드를 서로 비교하십시오.\n\n이전 방법들은 여러 필드를 개별적으로 유효성을 검사하는 방법을 보여줍니다. 그렇다면 2개의 값을 비교하려면 어떻게 해야 할까요?\n\n여러 필드를 비교하는 가장 좋은 방법은 model_validator(즉, v1에서 root_validator)를 사용하는겁니다:\n\n```js\nclass ValidatorBase(BaseModel):\n    \"\"\"재사용되는 유효성 검사기를 선언하는 데 사용되는 기본 클래스\"\"\"\n\n    @model_validator(mode=\"after\")\n    def validate_fields(self):\n        if self.organization == self.last_name:\n            raise ValueError()\n        return self\n\n\nclass Model1(ValidatorBase):\n    first_name: str = \"Samuel\"\n    last_name: str = \"Colvin\"\n    organization: str = \"Pydantic\"\n\ntry:\n  m = Model1(last_name=\"Pydantic\", organization=\"Pydantic\")\nexcept ValidationError as e:\n  print(e)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n해당 유효성 검사를 재사용하는 것은 ValidatorBase를 상속받는 것만으로 간단합니다.\n\n## 상속받은 클래스 유효성 검사 가져오기\n\n위와 유사하게, 기본 클래스를 중앙 위치에 구성하고 필요할 때 가져올 수 있습니다. 실행 방법이 명확하기 때문에 더 이상 자세히 설명하지 않겠습니다.\n\n# 옵션 5. 일반 모델 유효성 검사의 매핑 및 사적 속성을 통한 적용\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n또 다른 디자인 접근 방식은 일반적인 모델 유효성 검사자의 매핑을 만들어 키워드를 통해 모델에 할당하는 것입니다.\n\n```js\n# 사용자 정의 규칙 생성\ndef rule_1(self):\n    if self.organization == self.last_name:\n        raise ValueError()\n    return self\n\ndef rule_2(self):\n    ...\n    return self\n\nVALIDATOR_MAPPING = {\n    \"rule_1\": rule_1,\n    \"rule_2\": rule_2\n}\n\nclass ValidationBase(BaseModel):\n    \"\"\"모델 유효성 검사를 강제하는 기본 클래스\"\"\"\n    ...\n\n    @model_validator(mode=\"after\")\n    def validate_fields(self):\n        for rule in self._rules:\n            # validators가 값을 변경할 경우 self를 변경합니다.\n            self = VALIDATOR_MAPPING[rule](self)\n\n        return self\n\nclass Model1(ValidationBase):\n    # 또는 집합 내에서 규칙을 함수로 저장할 수 있습니다.\n    _rules = {'rule_1', 'rule_2'}\n\n    first_name: str = \"Samuel\"\n    last_name: str = \"Colvin\"\n    organization: str = \"Pydantic\"\n```\n\n이 방식에는 암시적인 면이 많이 있습니다. 모델이 모든 예상 필드를 가지고 있지 않으면 별도의 유효성 검사자에서 실패합니다. (이 경우 getattr을 사용하여 문제를 해결할 수 있습니다) 더 나아가 매핑을 통해 유효성 검사자를 적용하면 성능 저하와 함께 검증이 순차적으로 실행되어 동일한 모델에 대한 여러 유효성 오류가 발생하지 않습니다. 모델 유효성 검사를 필드 유효성 검사와 분리하는 솔루션을 구현하는 것이 더 바람직하지만 항상 가능한 것은 아닙니다.\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터 작업 시 Validator는 중요한 도구입니다. Pydantic은 사용자 정의 검증을 구현하는 여러 방법을 제공합니다. 이 기사에서는 사용자 지정 Validator를 다시 정의하지 않고 동일한 검증 논리를 구현하는 방법을 몇 가지 살펴보았습니다.\n\n# 전문가를 위한 Pydantic 시리즈:\n\n- 이 Pydantic V2의 획기적인 기능들을 보기 전까지 다른 코드 줄을 작성하지 마세요.\n  V2에서 소개된 몇 가지 기능에 대한 개요.\n- 전문가를 위한 Pydantic: Pydantic V2에서의 판별 된 연합\n  모델 선택을 구별하다.\n\n## 참고:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Pydantic 문서\n- 이 게시물을 영감을 준 스택 오버플로우 질문: Pydantic 모델의 여러 필드를 유효성 검사하는 방법은?\n- Pandera 문서\n\n마지막으로 여러분에게 질문이 하나 있습니다:\n다음에 대해 어떤 내용을 작성해 드리면 좋을까요? 아래에 댓글을 남겨주세요.\n","ogImage":{"url":"/assets/img/2024-05-18-PydanticforExpertsReusingImportingValidators_0.png"},"coverImage":"/assets/img/2024-05-18-PydanticforExpertsReusingImportingValidators_0.png","tag":["Tech"],"readingTime":14},{"title":"기술 부채Tech Debt란 정확히 무엇인가요","description":"","date":"2024-05-18 15:51","slug":"2024-05-18-Whatexactlyistechdebt","content":"\n저는 팀들이 기술 부채에 대해 이야기하는 것을 많이 듣고 온 경험이 있어요. 몇몇 팀은 이를 어떻게 관리해야 하는지 이해하고 있었고, 다른 팀 몇몇은 이로 인해 손실을 겪었어요. 그리고 어떤 기업은 실제로 처리되지 않은 기술 부채로 크게 실패했었죠.\n\n![technical debt](/assets/img/2024-05-18-Whatexactlyistechdebt_0.png)\n\n그렇다면 기술 부채란 무엇일까요?\n\n부채 비유는 관련이 있는 것이에요. 처음으로 이 비유를 만든 엔지니어가 더 설명했던 내용에 대해 알아보죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기술적 부채가 발생하는 방법에 대해 언급해볼게요. 그 전에 기술적 부채의 원인과 성격에 대한 일반적인 오해를 이해하는 것이 중요합니다.\n\n# 신화 1: \"기술적 부채\" == 나쁜 코드\n\n어째서 \"나쁜 코드\"일까요? 좋은 코드는 아마 깔끔한 코드일 것이고, 그것은 미래에 특정 결정을 내리도록 강요하지 않는 코드라고 할 수 있습니다. 옵션을 남겨두는 코드라고 할 수 있겠네요. 나쁜 코드는 옵션을 남겨두지 않고, 그렇지 않았을 것 같은 구현 제약을 강요합니다.\n\n\"나쁜 코드\"를 \"나쁜 개발자\"에서 거의 볼 수 없어요. 적어도 프로젝트의 제품에서는요. (그것이 코드 리뷰가 필요한 이유죠.) 내가 보는 \"나쁜 코드\" 대부분은 제약 조건 하에서 일하는 좋은 개발자에서 나옵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 신화 2: 기술 부채가 틀렸다\n\n기술 부채는 재정적 부채와 마찬가지로 \"틀린\" 게 아닙니다. 아니요, 이상적이지는 않습니다. 필요한 것이 모든 현금이라면 좋겠지만, 제품을 만들 때 유효한 도구입니다.\n\n## 신화 3: 만드는 순간, 무료다\n\n이 오해는 소프트웨어가 건설과 같다는 믿음에서 비롯된 것 같아요. 건설에서 (및 이 비유에서) 작업은 순서대로 발생합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 건축가는 건물을 설계하고 계획을 제작하여 전달합니다.\n- 작업자들은 기초를 다지고 벽을 세우며 전기 및 배관을 설치하고 가구를 추가합니다.\n- 입주자들이 들어와 행복한 삶을 삽니다. 문제가 발생하면 유지 보수팀에 연락할 겁니다.\n\n이건 이해하기 쉬운 비유예요. 하지만 소프트웨어에는 적용되지 않아요.\n\n잘못된 건설 비유에서는 대부분의 비용이 처음에 발생합니다. 유지 보수 비용은 대개 이름만 언급하거나 우연히 한 번 발생한 것으로 간주됩니다.\n\n정원 관리 비유에서, 기능을 구축하는 것은 (작물을 심는 것과 같이) 장기적인 작업의 단계 중 하나에 불과합니다. 정원이 커질수록 더 많은 유지 보수가 필요합니다. 이것은 레이아웃을 변경하기 위해 다시 심기(refactoring), 정원을 확장하고 새로운 작물을 심는 작업(새로운 기능 추가 - 이 또한 유지 보수가 필요합니다) 외의 작업입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n소프트웨어 총 비용의 90%는 유지보수와 관련이 있습니다. 몇 년 동안 이 지표를 알고 있었지만, 그것에 대해 생각하면 여전히 놀라워요.\n\n# 어떻게 이 꼴을 타게 되었을까요?\n\n하지만 정작 기술 부채는 어디서 유래하며, 피할 수 있을까요?\n\n기술 부채의 또 다른 정의는 아마 이럴 것입니다: 현재 프로젝트의 위치와 우리가 그 동안 얻은 지식을 토대로 프로젝트를 깨끗한 상태에서 시작했다면 어디에 있을지의 차이입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기술 부채는 두 가지 소스에서 나옵니다:\n\n- 트레이드오프에 대한 결정(무모한 대책 vs 신중한 대책)\n- 디자인 및 구현에 대한 결정을 내릴 때의 지식(또는 그 부족)\n\n이상적으로는 제약 조건을 충족시키기 위해 타협하지 않고 충분한 지식을 바탕으로 결정을 내리는 것이 좋습니다. 하지만 현실적으로는 전체 프로그램을 어떻게 구현해야 하는지 완전히 이해하지 못한 채 프로젝트를 시작할 것입니다. 또한 이해관계자의 마감 기한이나 비용 제한과 같은 제약 조건을 바탕으로 트레이드오프를 해야할 필요가 있습니다.\n\n기술 부채를 피하는 방법에 대한 교훈이 여기에 있습니다. 다음 게시물에서 자세히 다루겠습니다. 하지만 \"기술 부채를 피할 수 있을까?\"에 대한 간단한 답은 \"네, 하지만 부채는 적이 아닌 도구입니다.\"\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 기술적 부채 측정\n\n\"얼마나 많은 기술 부채가 있는가?\" 모든 기술 부채가 있다고 말할 수 있을까요? 이렇게 추상적인 개념을 정량화할 수 있을까요?\n\n음,아뇨. 당신은 기술 부채를 신뢰할 수 없습니다. 엔지니어에게 특정 기능을 구현하거나 제품의 특정 부분을 수정할 것을 요청하면, 그들은 아마도 기술 부채를 갚을 필요가 있는 견적을 제시해야 할 것입니다. 그러나 시간이 흘러가면서 이것을 추적할 수는 없습니다.\n\n기술 부채와 높은 상관 관계를 가지는 다른 측정 항목이 있습니다. (a) 정량화 가능하며, (b) 기술적 부채와 높은 상관 관계를 가지는 요소가 있습니다: 유지보수 부하.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유지보수 부담은 프로젝트의 연령과 구축 방법에 따라 달라집니다. 이는 지속적으로 개발자의 노력으로 측정됩니다.\n\n제가 확실하게 말하고 싶은 것은, 유지보수 부담 ≠ 기술 부채입니다. 그러나 시스템 내에 얼마나 많은 기술 부채가 존재하는지를 나타내는 좋은 근사치 메트릭스입니다. 시스템이 붕괴되지 않도록 유지하기 위해 엔지니어를 추가로 필요로 한다면 기술 부채가 많은 것일 수 있습니다. 12명의 사람으로 10억 달러 가치의 회사를 창업할 수 있다면, 기술 부채를 잘 다루고 있는 것일 겁니다.\n\n많은 것들처럼, 제 생각 중 많은 부분은 다른 우수한 산업 지도자들에 의해 영감을 받았습니다. 이 게시물은 특히 Mozilla의 스태프 엔지니어인 Chelsea Troy와 Meta의 CTO인 Andrew Bosworth에 의해 영감을 받았습니다. (Mozilla의 블로그에는 엔지니어들을 위한 훌륭한 자료가 가득합니다.)\n","ogImage":{"url":"/assets/img/2024-05-18-Whatexactlyistechdebt_0.png"},"coverImage":"/assets/img/2024-05-18-Whatexactlyistechdebt_0.png","tag":["Tech"],"readingTime":5},{"title":"안녕하세요 안드로이드에서 핸들러, 루퍼, 그리고 메시지 대기열 이해하기 코드 예제와 실용적인 가이드","description":"","date":"2024-05-18 15:50","slug":"2024-05-18-UnderstandingHandlersLoopersandMessageQueuesinAndroidAPracticalGuidewithCodeExamples","content":"\n# 소개\n\nAndroid 개발에서 백그라운드 작업 및 스레드 간 통신을 효과적으로 관리하는 것은 원활하고 응답성 있는 애플리케이션을 만드는 데 중요합니다. 스레딩 복잡성은 압도적일 수 있지만, Android는 Handlers, Loopers 및 Message Queues와 같은 강력한 도구를 제공하여 이러한 작업을 단순화합니다. 이 기사는 이러한 구성 요소를 푸는 것과 실제 코드 예제로 그 상호 작용과 실용적인 응용을 설명합니다. Android 개발에 처음이거나 지식을 갱신하려는 경우, 이 안내서는 프로젝트에서 이 도구들을 효과적으로 활용하는 데 필요한 통찰력을 제공할 것입니다.\n\n# Handlers:\n\nAndroid의 영역에서 Handler는 스레드의 메시지 큐와 상호 작용하는 주요 구성 요소 중 하나입니다. 그것은 메시지를 예약하거나 실행될 일꾼을 미래에 어떤 시점에 실행할 수 있도록 스레드에 연결된 게이트웨이 역할을 합니다. Handlers는 특히 사용자 인터페이스와 상호 작용해야 하는 작업에 유용합니다. 이러한 작업은 애플리케이션의 주 스레드에서 실행되어야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nHandler는 하나의 스레드 내에서 복잡한 스레딩 작업을 관리하여 작업이 순차적으로 수행되도록 보장하여 경합 조건이나 스레드 간 간섭과 같은 일반적인 동시성 문제를 피할 수 있습니다. Handler는 Android 애플리케이션에 쉽게 통합되어 사용하기 쉽고, 스레드의 MessageQueue에 연결된 Message 및 Runnable 객체를 보내고 처리하는 간단한 방법을 제공합니다.\n\n네트워크 호출 후 사용자 인터페이스를 업데이트해야 하는 Android 애플리케이션을 고려해보세요. 메인 스레드에서 실행되는 Runnable을 게시하는 Handler를 사용할 수 있습니다:\n\n![Handler 예시 이미지](/assets/img/2024-05-18-UnderstandingHandlersLoopersandMessageQueuesinAndroidAPracticalGuidewithCodeExamples_0.png \"Handler 예시 이미지\")\n\n# 루퍼(Loopers):\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루퍼는 안드로이드 스레드의 라이프 사이클에서 중요한 역할을 합니다. 루퍼는 스레드를 유지하고 메시지를 순환하며 도착하는대로 처리하여 처리기에 전달합니다. 루퍼는 스레드에 부착되어 해당 메시지 큐를 순환하며 메시지를 처리하는 데 사용됩니다. 이로써 루퍼는 스레드가 수명 동안 메시지를 순차적으로 처리해야 하는 경우에 중요합니다.\n\n다음은 백그라운드 스레드에서 루퍼를 설정하여 작업을 순차적으로 처리하는 방법입니다:\n\n![image](/assets/img/2024-05-18-UnderstandingHandlersLoopersandMessageQueuesinAndroidAPracticalGuidewithCodeExamples_1.png)\n\n이 예제는 루퍼와 핸들러를 사용하여 작업을 순차적으로 처리하는 백그라운드 스레드를 생성하는 방법을 보여줍니다. 루퍼의 loop() 호출은 스레드를 유지하고 루퍼가 중지될 때까지 메시지를 처리합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 메시지 대기열\n\n메시지 대기열은 메시지와 실행 가능한 작업을 저장하는 스레드의 중요한 부분입니다. Looper가 있는 각 스레드마다 자체 메시지 대기열이 있으며, 스케줄링에 따라 작업을 정렬하고 실행 순서를 관리합니다.\n\n여러 구성 요소 간의 작업을 조정하기 위해 Handler와 함께 메시지 대기열을 사용하는 방법은 다음과 같습니다:\n\n![이미지](/assets/img/2024-05-18-UnderstandingHandlersLoopersandMessageQueuesinAndroidAPracticalGuidewithCodeExamples_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 간단한 예제에서는 메시지가 핸들러로 보내지며, 메시지 큐에서 받은 순서대로 순차적으로 처리됩니다. 이 메커니즘은 작업 실행을 관리하는 데 중요하며, 메시지가 수신된 순서대로 처리되도록 제어 순서를 유지합니다.\n\n## 결론\n\n핸들러, 루퍼 및 메시지 큐를 이해하고 활용하는 것은 견고한 안드로이드 애플리케이션을 개발하는 데 기본적입니다. 이러한 구성 요소는 복잡한 스레딩 시나리오를 관리하기 위해 함께 작동하여 원활한 작동과 응답성을 보장합니다. 이러한 도구를 프로젝트에서 실험하면 응용 프로그램의 성능과 사용자 경험을 크게 향상시킬 수 있습니다.\n\n## 독려하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 가이드를 활용하여 여러분의 프로젝트에서 예제를 시도해보세요. 안드로이드의 쓰레딩 메커니즘에 대해 더 깊게 이야기하기 위해 의견을 공유하거나 질문을 하세요!\n\n#AndroidDev #Kotlin #MobileDevelopment #Programming #SoftwareEngineering #AndroidApps #Threading #Concurrency #Tech #Coding\n","ogImage":{"url":"/assets/img/2024-05-18-UnderstandingHandlersLoopersandMessageQueuesinAndroidAPracticalGuidewithCodeExamples_0.png"},"coverImage":"/assets/img/2024-05-18-UnderstandingHandlersLoopersandMessageQueuesinAndroidAPracticalGuidewithCodeExamples_0.png","tag":["Tech"],"readingTime":4},{"title":"안녕하세요 안드로이드 스튜디오에서 기본 계산기 앱을 만들어 보는 방법을 알려드리겠습니다 함께 즐겁게 코딩해봐요 ","description":"","date":"2024-05-18 15:49","slug":"2024-05-18-CreateaBasicCalculatorAppinAndroidStudio","content":"\n<img src=\"/assets/img/2024-05-18-CreateaBasicCalculatorAppinAndroidStudio_0.png\" />\n\n계산기 앱을 만드는 것은 초보 Android 개발자에게 기본적인 연습입니다. 이 튜토리얼에서는 Android Studio에서 Java를 사용하여 기본 계산기 앱을 만드는 과정을 안내하겠습니다. 코드와 XML 레이아웃을 단계별로 다루어 각 구성 요소의 목적과 기능을 설명할 것입니다.\n\n필수 준비물: 시작하기 전에 Android Studio가 시스템에 설치되어 있고 설정되어 있는지 확인하세요.\n\n단계 1: 프로젝트 설정\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 안드로이드 스튜디오를 실행하고 적절한 이름과 패키지로 새로운 안드로이드 프로젝트를 생성하세요.\n- 프로젝트에 적합한 형태 요소와 최소 API 레벨을 선택하세요.\n\n### 단계 2: XML 레이아웃\n\n- activity_main.xml 레이아웃 파일을 열어주세요.\n- UI 요소를 정의하세요: 두 개의 EditText 뷰(숫자 입력 용), 각 작업(더하기, 빼기, 곱하기, 나누기, 제곱근)에 대한 버튼, 그리고 결과를 표시할 TextView를 추가해주세요.\n\nactivity_main.xml\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\"\n    tools:context=\".MainActivity\">\n\n    <EditText\n        android:id=\"@+id/num1EditText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"48dp\"\n        android:layout_marginTop=\"44dp\"\n        android:hint=\"Enter number 1\"\n        android:inputType=\"numberDecimal\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <EditText\n        android:id=\"@+id/num2EditText\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"48dp\"\n        android:layout_marginTop=\"12dp\"\n        android:hint=\"Enter number 2\"\n        android:inputType=\"numberDecimal\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.47\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/num1EditText\" />\n\n    <Button\n        android:id=\"@+id/addButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"+\"\n        android:textSize=\"16sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/num2EditText\" />\n\n    <Button\n        android:id=\"@+id/subtractButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"-\"\n        android:textSize=\"16sp\"\n        app:layout_constraintEnd_toStartOf=\"@+id/multiplyButton\"\n        app:layout_constraintStart_toEndOf=\"@+id/addButton\"\n        app:layout_constraintTop_toBottomOf=\"@+id/num2EditText\" />\n\n    <Button\n        android:id=\"@+id/multiplyButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"x\"\n        android:textSize=\"16sp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/num2EditText\" />\n\n    <Button\n        android:id=\"@+id/divideButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:text=\"/\"\n        android:textSize=\"16sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/addButton\" />\n\n    <Button\n        android:id=\"@+id/sqrtButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"20dp\"\n        android:layout_marginEnd=\"140dp\"\n        android:text=\"Sqrt\"\n        android:textSize=\"16sp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/subtractButton\" />\n\n    <TextView\n        android:id=\"@+id/resultTextView\"\n        android:layout_width=\"84dp\"\n        android:layout_height=\"41dp\"\n        android:layout_marginStart=\"4dp\"\n        android:layout_marginTop=\"40dp\"\n        android:text=\"Result: \"\n        android:textSize=\"18sp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/divideButton\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n```java\npackage com.example.simplecalculator;\n\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.example.simplecalculator.R;\n\nimport java.text.DecimalFormat;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private EditText num1EditText, num2EditText;\n    private TextView resultTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        num1EditText = findViewById(R.id.num1EditText);\n        num2EditText = findViewById(R.id.num2EditText);\n        resultTextView = findViewById(R.id.resultTextView);\n\n        Button addButton = findViewById(R.id.addButton);\n        addButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                performCalculation('+');\n            }\n        });\n\n        Button subtractButton = findViewById(R.id.subtractButton);\n        subtractButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                performCalculation('-');\n            }\n        });\n\n        Button multiplyButton = findViewById(R.id.multiplyButton);\n        multiplyButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                performCalculation('*');\n            }\n        });\n\n        Button divideButton = findViewById(R.id.divideButton);\n        divideButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                performCalculation('/');\n            }\n        });\n\n        Button sqrtButton = findViewById(R.id.sqrtButton);\n        sqrtButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                calculateSquareRoot();\n            }\n        });\n    }\n\n    private void performCalculation(char operator) {\n        String num1Str = num1EditText.getText().toString();\n        String num2Str = num2EditText.getText().toString();\n\n        if (num1Str.isEmpty() || num2Str.isEmpty()) {\n            Toast.makeText(this, \"Please enter both numbers\", Toast.LENGTH_SHORT).show();\n            return;\n        }\n\n        double num1 = Double.parseDouble(num1Str);\n        double num2 = Double.parseDouble(num2Str);\n        double result = 0;\n\n        switch (operator) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                if (num2 != 0) {\n                    result = num1 / num2;\n                } else {\n                    Toast.makeText(this, \"Cannot divide by zero\", Toast.LENGTH_SHORT).show();\n                    return;\n                }\n                break;\n        }\n\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        resultTextView.setText(\"Result: \" + df.format(result));\n    }\n\n    private void calculateSquareRoot() {\n        String num1Str = num1EditText.getText().toString();\n\n        if (num1Str.isEmpty()) {\n            Toast.makeText(this, \"Please enter a number\", Toast.LENGTH_SHORT).show();\n            return;\n        }\n\n        double num = Double.parseDouble(num1Str);\n        double sqrtResult = Math.sqrt(num);\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        resultTextView.setText(\"Square Root: \" + df.format(sqrtResult));\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ncalculateSquareRoot 메소드는 첫 번째 EditText 뷰에서 입력 숫자를 가져와 Math.sqrt 함수를 사용하여 제곱근을 계산하고 결과를 TextView에 소수점 둘째 자리까지 표시합니다.\n\n결과:\n\n![output](/assets/img/2024-05-18-CreateaBasicCalculatorAppinAndroidStudio_1.png)\n\n요약: 이 튜토리얼에서는 Java와 Android Studio를 사용하여 간단한 계산기 앱을 만드는 방법을 배웠습니다. XML 레이아웃 디자인, UI 요소 초기화 및 계산 로직을 위한 Java 코드를 다루었으며, 숫자의 제곱근을 계산하는 기능을 추가했습니다. 이 앱을 개발함으로써 Android 앱 개발과 사용자 인터페이스 상호 작용에 대한 기본적인 이해를 얻을 수 있습니다. 앱의 기능을 더 추가하고 기능을 향상시키기 위해 더 많은 기능을 탐험해보세요.\n","ogImage":{"url":"/assets/img/2024-05-18-CreateaBasicCalculatorAppinAndroidStudio_0.png"},"coverImage":"/assets/img/2024-05-18-CreateaBasicCalculatorAppinAndroidStudio_0.png","tag":["Tech"],"readingTime":10},{"title":"휴대폰 앱 개발 시 피해야 할 일반적인 실수들","description":"","date":"2024-05-18 15:48","slug":"2024-05-18-TopCommonMistakestoAvoidinMobileAppDevelopment","content":"\n### 모바일 앱 개발이 빠르게 진화하는 세계에서는 함정의 잠재력이 매우 큽니다. 이러한 일반적인 실수를 이해하고 피하는 것은 개발 프로세스를 최적화하고 사용자 참여를 향상시키며 궁극적으로 성공적인 디지털 제품을 얻을 수 있습니다.\n\n**나쁜 사용자 인터페이스 디자인**\n\n모바일 앱을 개발할 때 고려해야 하는 가장 중요한 측면 중 하나는 사용자 인터페이스 (UI)입니다. 혼잡하거나 직관적이지 않은 UI는 기능이 견고하더라도 사용자들을 떨어뜨릴 수 있습니다. 디자인에서 간결함과 명확성을 보장하고 사용자 기대에 부합하며 반응형 디자인을 구현하는 것은 당신의 앱을 사용자 친화적으로 만드는 중요한 단계입니다.\n\n**불충분한 사용자 조사**\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자 연구를 철저히 건너뛰면 참사가 될 수 있습니다. 타깃 대상 청중의 Bed, 선호도 및 고통 포인트를 이해하면 앱 디자인과 기능을 안내할 수 있습니다. 사용자 데이터 및 피드백을 계속 수집하기 위해 분석을 통합하는 것도 앱 개발을 올바른 방향으로 이끌 수 있습니다.\n\n## 플랫폼 차이 무시하기\n\n많은 개발자들이 하는 일 중 하나는 iOS 및 Android 플랫폼을 상호 교환 가능하게 처리하는 것입니다. 각 플랫폼에는 Material Design(안드로이드) 및 Human Interface Guidelines(iOS)와 같은 고유한 세부 사항과 디자인 가이드라인이 있습니다. 앱을 이러한 구체적인 환경에 맞게 맞추면 사용자 경험을 크게 향상시킬 수 있습니다.\n\n## 앱 성능 최적화를 방치하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n느린 앱이나 버그가 많은 앱은 사용자들을 짜증나게 할 수 있고 높은 삭제율을 초래할 수 있습니다. 다양한 기기에서 앱을 정기적으로 테스트하고 코드, 이미지 및 기타 리소스를 최적화하여 로드 시간을 최소화하고 성능을 향상시키는 것이 중요합니다. 배터리 수명, 로드 시간 및 응답 시간과 같은 요소를 고려해야 합니다.\n\n## 보안 조치를 과소평가\n\n데이터 유출과 개인정보 보호에 대한 논의가 늘어나면서, 보안은 최우선 과제여야 합니다. 앱이 견고한 보안 프로토콜을 갖추고 안전한 데이터 전송을 보장하며 GDPR 또는 CCPA와 같은 법적 기준을 준수하는 것은 사용자와 비즈니스 평판을 보호할 수 있습니다.\n\n## 수익 전략이 미흡할 때\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n효과적인 수익 모델을 개발하는 것은 앱의 재정적 성공에 매우 중요하지만 종종 간과되곤 합니다. 광고, 인앱 구매 또는 구독 모델 중 어떤 것을 선택하더라도 사용자 경험과 시장 기대에 부합하는 전략이어야 합니다.\n\n## 테스트 부족\n\n충분한 테스트를 하지 않으면 버그와 사용자의 불만족을 야기할 수 있습니다. 베타 테스트와 사용자 테스트 세션을 포함한 포괄적인 테스트는 문제가 심각해지기 전에 발견하고 앱 품질을 확보하는 데 도움이 될 수 있습니다.\n\n## 피드백과 분석 무시\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n앱을 출시하는 것은 단순히 시작에 불과합니다. 사용자가 앱과 상호작용하는 방식을 계속 분석하고 그들의 피드백을 듣는 것은 지속적인 개선에 반드시 필요한 요소입니다. 이용자들의 참여와 행동 분석을 추적하는 도구를 활용하면 앱을 크게 개선할 수 있는 통찰력을 얻을 수 있습니다.\n\n## 결론\n\n모바일 앱 개발에서 흔히 범하는 실수를 피함으로써 개발 과정이 원활해지고 사용자와 공감하는 성공적인 앱을 만들 가능성을 향상시킬 수 있습니다. 사용자 중심의 디자인, 반응형 기능, 그리고 개발 과정 전반에 걸쳐 전략적인 계획을 중시함으로써 경쟁적인 디지털 시장에서 앱이 더 큰 성공을 이룰 수 있도록 준비할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-TopCommonMistakestoAvoidinMobileAppDevelopment_0.png"},"coverImage":"/assets/img/2024-05-18-TopCommonMistakestoAvoidinMobileAppDevelopment_0.png","tag":["Tech"],"readingTime":3}],"page":"106","totalPageCount":116,"totalPageGroupCount":6,"lastPageGroup":16,"currentPageGroup":5},"__N_SSG":true}