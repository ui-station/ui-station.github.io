{"pageProps":{"post":{"title":"SwiftUI에서 접을 수 있는 섹션을 사용한 리스트 만드는 방법","description":"","date":"2024-06-30 19:21","slug":"2024-06-30-SwiftUIlistwithcollapsiblesections","content":"\n\n리스트는 많은 데이터를 보여주는 좋은 방법입니다. 섹션은 이를 그룹화하는 데 유용합니다. 변수, 프로그래밍, 그리고 접을 수 있는 섹션을 어떻게 만들 수 있을까요?\n\n리스트를 그룹화하는 한 가지 방법은 사이드바를 가지고 다양한 섹션을 숨기고 보여주는 것입니다. 이는 앱에서 유용한 리스트만 보여주기 위해 당신과 사용자가 도움이 됩니다.\n\n# 간단한 방법\n\niOS14에서는 섹션 상태 변수를 위한 optional binding parameter를 도입했습니다. 이것은 .liststyle sidebar와 함께 사용되어 자동으로 섹션을 숨기고 보여줍니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\n@State private var isExpandedAllSeas: Bool = true\n....\n\nVStack {\n    List {\n       Section(\n           isExpanded: $isExpandedAllSeas,\n           content: {\n              ForEach(allSea) { sea in\n                  HStack {\n                     Image(systemName: \"water.waves\")\n                     Text(sea.name)\n               }\n       }\n       .onDelete(perform: allSeaDelete)\n       .onMove(perform: allSeaMove)\n       },\n       header: {\n           Text(\"All seas\")\n       })\n                 \n    }\n    .listStyle(.sidebar)\r\n```\n\n상태 변수의 초기 설정을 통해 접히거나 펼쳐진 섹션으로 시작할 수 있습니다.\n\n# 더 어려운 방법\n\n만약 이차원 데이터 배열을 가지고 있고 섹션의 수가 다른 경우에는 어떻게 하면 될까요?\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n부울(bool) 타입의 상태 변수를 사용하는 것으로는 문제를 해결할 수 없어요. 이렇게 하면 모든 섹션이 닫혀 있거나 열려 있게 됩니다.\n\n`isExpanded`가 예상하는 타입인 `Binding<Bool>`이 필요합니다. 따라서 값에 대한 getter 및 setter 속성을 주의 깊게 처리해야 합니다.\n\n예를 들어 몇 개의 해양을 나타내는 이차원 데이터로 시작해볼까요? 대양 지역(OceanRegion) 예시입니다.\n\n```js\n@State private var oceanRegions: [OceanRegion] = [\n        OceanRegion(name: \"태평양\",\n                    seas: [Sea(name: \"오스트랄라시안 지중해\"),\n                           Sea(name: \"필리핀 해\"),\n                           Sea(name: \"코랄 해\"),\n                           Sea(name: \"남중국해\")]),\n        OceanRegion(name: \"대서양\",\n                    seas: [Sea(name: \"미국 지중해\"),\n                           Sea(name: \"사르가소 해\"),\n                           Sea(name: \"카리브 해\")]),\n        OceanRegion(name: \"인도양\",\n                    seas: [Sea(name: \"벵갈만\")])\n ]\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러면 약간 다른 상태 변수가 필요합니다.\n\n```js\n@State private var isExpanded: Set<String> = []\n```\n\n확장된 섹션의 모든 해양 지역 이름이 포함된 문자열 집합을 사용하고 있습니다. 이제 OceanRegions에서 섹션과 각 섹션마다 일부 Seas가 있는 List를 구성할 수 있습니다.\n\n```js\nVStack {\n    List {\n        ForEach(oceanRegions) { region in\n            Section(\n                isExpanded: Binding<Bool> (\n                    get: {\n                        return isExpanded.contains(region.name)\n                    },\n                    set: { isExpanding in\n                        if isExpanding {\n                            isExpanded.insert(region.name)\n                        } else {\n                            isExpanded.remove(region.name)\n                        }\n                    }\n                ),\n                content: {\n                    ForEach(region.seas) { sea in\n                        Text(sea.name)\n                    }.onDelete(perform: { indexSet in\n                        delete(indexSet: indexSet, region: region.id)\n                    })\n                },\n                header: {\n                    Text(region.name)\n                }\n            )\n        }\n    }\n    .listStyle(.sidebar)\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희는 섹션의 축소 상태가 변경될 때 지역 이름을 삽입하고 제거해야 하기 때문에 State 변수인 isExpanded를 직접 사용할 수 없습니다.\n그래서 이를 위해 isExpanded가 기대하는 Bool 유형의 제네릭 Binding을 사용하고 있습니다.\n\n```js\nisExpanded: Binding<Bool> (...)\n```\n\n이제 getter와 setter 로직이 필요합니다. 이겁니다. 섹션의 region.name을 사용합니다. 이유는 그겁니다. region.name이 고유하기 때문입니다. 물론 더 복잡한 시나리오에서는 uuid를 사용할 수도 있습니다.\ngetter는 boolean을 반환하며, 이 boolean은 State 변수에서 나왔기 때문에 Binding`Bool`입니다.\n반면에 setter는 섹션이 확장되면 region.name을 String으로 Set에 추가하고, 섹션이 축소되면 region.name을 제거합니다.\n\n```js\nisExpanded: Binding<Bool> (\n               get: {\n                   return isExpanded.contains(region.name)\n               },\n               set: { isExpanding in\n                   if isExpanding {\n                       isExpanded.insert(region.name)\n                   } else {\n                       isExpanded.remove(region.name)\n                   }\n               }\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 설정으로 모든 섹션이 처음에 접혀 있는 상태인 하나의 공개된 포인트가 있습니다. 초기 상태 isExpanded가 빈 Set이기 때문입니다.\n\n```js\n@State private var isExpanded: Set<String> = []\n```\n\n필요한 모든 데이터가 준비되어 있고, 우리는 이것을 고유한 init 함수와 연결하기만 하면 됩니다.\n\n```js\n// @State private var isExpanded: Set<String> = []\n@State private var isExpanded: Set<String>\ninit() {\n        _isExpanded = State(initialValue: Set(oceanRegions.map { $0.name }))\n    }\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n초기 isExpanded 상태를 채우려면 oceanRegions 배열에서 데이터를 매핑해야 합니다.\n\n그리고 이렇게 하면 oceanRegions 배열의 모든 섹션이 확장된 상태로 표시됩니다.\n\n<img src=\"/assets/img/2024-06-30-SwiftUIlistwithcollapsiblesections_0.png\" />","ogImage":{"url":"/assets/img/2024-06-30-SwiftUIlistwithcollapsiblesections_0.png"},"coverImage":"/assets/img/2024-06-30-SwiftUIlistwithcollapsiblesections_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>리스트는 많은 데이터를 보여주는 좋은 방법입니다. 섹션은 이를 그룹화하는 데 유용합니다. 변수, 프로그래밍, 그리고 접을 수 있는 섹션을 어떻게 만들 수 있을까요?</p>\n<p>리스트를 그룹화하는 한 가지 방법은 사이드바를 가지고 다양한 섹션을 숨기고 보여주는 것입니다. 이는 앱에서 유용한 리스트만 보여주기 위해 당신과 사용자가 도움이 됩니다.</p>\n<h1>간단한 방법</h1>\n<p>iOS14에서는 섹션 상태 변수를 위한 optional binding parameter를 도입했습니다. 이것은 .liststyle sidebar와 함께 사용되어 자동으로 섹션을 숨기고 보여줍니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> isExpandedAllSeas: <span class=\"hljs-type\">Bool</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-operator\">....</span>\n\n<span class=\"hljs-type\">VStack</span> {\n    <span class=\"hljs-type\">List</span> {\n       <span class=\"hljs-type\">Section</span>(\n           isExpanded: <span class=\"hljs-variable\">$isExpandedAllSeas</span>,\n           content: {\n              <span class=\"hljs-type\">ForEach</span>(allSea) { sea <span class=\"hljs-keyword\">in</span>\n                  <span class=\"hljs-type\">HStack</span> {\n                     <span class=\"hljs-type\">Image</span>(systemName: <span class=\"hljs-string\">\"water.waves\"</span>)\n                     <span class=\"hljs-type\">Text</span>(sea.name)\n               }\n       }\n       .onDelete(perform: allSeaDelete)\n       .onMove(perform: allSeaMove)\n       },\n       header: {\n           <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"All seas\"</span>)\n       })\n                 \n    }\n    .listStyle(.sidebar)\n</code></pre>\n<p>상태 변수의 초기 설정을 통해 접히거나 펼쳐진 섹션으로 시작할 수 있습니다.</p>\n<h1>더 어려운 방법</h1>\n<p>만약 이차원 데이터 배열을 가지고 있고 섹션의 수가 다른 경우에는 어떻게 하면 될까요?</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>부울(bool) 타입의 상태 변수를 사용하는 것으로는 문제를 해결할 수 없어요. 이렇게 하면 모든 섹션이 닫혀 있거나 열려 있게 됩니다.</p>\n<p><code>isExpanded</code>가 예상하는 타입인 <code>Binding&#x3C;Bool></code>이 필요합니다. 따라서 값에 대한 getter 및 setter 속성을 주의 깊게 처리해야 합니다.</p>\n<p>예를 들어 몇 개의 해양을 나타내는 이차원 데이터로 시작해볼까요? 대양 지역(OceanRegion) 예시입니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">oceanRegions</span>: [<span class=\"hljs-title class_\">OceanRegion</span>] = [\n        <span class=\"hljs-title class_\">OceanRegion</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"태평양\"</span>,\n                    <span class=\"hljs-attr\">seas</span>: [<span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"오스트랄라시안 지중해\"</span>),\n                           <span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"필리핀 해\"</span>),\n                           <span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"코랄 해\"</span>),\n                           <span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"남중국해\"</span>)]),\n        <span class=\"hljs-title class_\">OceanRegion</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"대서양\"</span>,\n                    <span class=\"hljs-attr\">seas</span>: [<span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"미국 지중해\"</span>),\n                           <span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"사르가소 해\"</span>),\n                           <span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"카리브 해\"</span>)]),\n        <span class=\"hljs-title class_\">OceanRegion</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"인도양\"</span>,\n                    <span class=\"hljs-attr\">seas</span>: [<span class=\"hljs-title class_\">Sea</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"벵갈만\"</span>)])\n ]\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그러면 약간 다른 상태 변수가 필요합니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">isExpanded</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">String</span>> = []\n</code></pre>\n<p>확장된 섹션의 모든 해양 지역 이름이 포함된 문자열 집합을 사용하고 있습니다. 이제 OceanRegions에서 섹션과 각 섹션마다 일부 Seas가 있는 List를 구성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">VStack</span> {\n    <span class=\"hljs-title class_\">List</span> {\n        <span class=\"hljs-title class_\">ForEach</span>(oceanRegions) { region <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-title class_\">Section</span>(\n                <span class=\"hljs-attr\">isExpanded</span>: <span class=\"hljs-title class_\">Binding</span>&#x3C;<span class=\"hljs-title class_\">Bool</span>> (\n                    <span class=\"hljs-attr\">get</span>: {\n                        <span class=\"hljs-keyword\">return</span> isExpanded.<span class=\"hljs-title function_\">contains</span>(region.<span class=\"hljs-property\">name</span>)\n                    },\n                    <span class=\"hljs-attr\">set</span>: { isExpanding <span class=\"hljs-keyword\">in</span>\n                        <span class=\"hljs-keyword\">if</span> isExpanding {\n                            isExpanded.<span class=\"hljs-title function_\">insert</span>(region.<span class=\"hljs-property\">name</span>)\n                        } <span class=\"hljs-keyword\">else</span> {\n                            isExpanded.<span class=\"hljs-title function_\">remove</span>(region.<span class=\"hljs-property\">name</span>)\n                        }\n                    }\n                ),\n                <span class=\"hljs-attr\">content</span>: {\n                    <span class=\"hljs-title class_\">ForEach</span>(region.<span class=\"hljs-property\">seas</span>) { sea <span class=\"hljs-keyword\">in</span>\n                        <span class=\"hljs-title class_\">Text</span>(sea.<span class=\"hljs-property\">name</span>)\n                    }.<span class=\"hljs-title function_\">onDelete</span>(<span class=\"hljs-attr\">perform</span>: { indexSet <span class=\"hljs-keyword\">in</span>\n                        <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-attr\">indexSet</span>: indexSet, <span class=\"hljs-attr\">region</span>: region.<span class=\"hljs-property\">id</span>)\n                    })\n                },\n                <span class=\"hljs-attr\">header</span>: {\n                    <span class=\"hljs-title class_\">Text</span>(region.<span class=\"hljs-property\">name</span>)\n                }\n            )\n        }\n    }\n    .<span class=\"hljs-title function_\">listStyle</span>(.<span class=\"hljs-property\">sidebar</span>)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>저희는 섹션의 축소 상태가 변경될 때 지역 이름을 삽입하고 제거해야 하기 때문에 State 변수인 isExpanded를 직접 사용할 수 없습니다.\n그래서 이를 위해 isExpanded가 기대하는 Bool 유형의 제네릭 Binding을 사용하고 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">isExpanded</span>: <span class=\"hljs-title class_\">Binding</span>&#x3C;<span class=\"hljs-title class_\">Bool</span>> (...)\n</code></pre>\n<p>이제 getter와 setter 로직이 필요합니다. 이겁니다. 섹션의 region.name을 사용합니다. 이유는 그겁니다. region.name이 고유하기 때문입니다. 물론 더 복잡한 시나리오에서는 uuid를 사용할 수도 있습니다.\ngetter는 boolean을 반환하며, 이 boolean은 State 변수에서 나왔기 때문에 Binding<code>Bool</code>입니다.\n반면에 setter는 섹션이 확장되면 region.name을 String으로 Set에 추가하고, 섹션이 축소되면 region.name을 제거합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">isExpanded</span>: <span class=\"hljs-title class_\">Binding</span>&#x3C;<span class=\"hljs-title class_\">Bool</span>> (\n               <span class=\"hljs-attr\">get</span>: {\n                   <span class=\"hljs-keyword\">return</span> isExpanded.<span class=\"hljs-title function_\">contains</span>(region.<span class=\"hljs-property\">name</span>)\n               },\n               <span class=\"hljs-attr\">set</span>: { isExpanding <span class=\"hljs-keyword\">in</span>\n                   <span class=\"hljs-keyword\">if</span> isExpanding {\n                       isExpanded.<span class=\"hljs-title function_\">insert</span>(region.<span class=\"hljs-property\">name</span>)\n                   } <span class=\"hljs-keyword\">else</span> {\n                       isExpanded.<span class=\"hljs-title function_\">remove</span>(region.<span class=\"hljs-property\">name</span>)\n                   }\n               }\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 설정으로 모든 섹션이 처음에 접혀 있는 상태인 하나의 공개된 포인트가 있습니다. 초기 상태 isExpanded가 빈 Set이기 때문입니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">isExpanded</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">String</span>> = []\n</code></pre>\n<p>필요한 모든 데이터가 준비되어 있고, 우리는 이것을 고유한 init 함수와 연결하기만 하면 됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// @State private var isExpanded: Set&#x3C;String> = []</span>\n@<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">isExpanded</span>: <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">String</span>>\n<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) {\n        _isExpanded = <span class=\"hljs-title class_\">State</span>(<span class=\"hljs-attr\">initialValue</span>: <span class=\"hljs-title class_\">Set</span>(oceanRegions.<span class=\"hljs-property\">map</span> { $0.<span class=\"hljs-property\">name</span> }))\n    }\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>초기 isExpanded 상태를 채우려면 oceanRegions 배열에서 데이터를 매핑해야 합니다.</p>\n<p>그리고 이렇게 하면 oceanRegions 배열의 모든 섹션이 확장된 상태로 표시됩니다.</p>\n<img src=\"/assets/img/2024-06-30-SwiftUIlistwithcollapsiblesections_0.png\">\n</body>\n</html>\n"},"__N_SSG":true}