{"pageProps":{"post":{"title":"제트팩 콤포즈에서 멋진 3D 테두리를 만드는 방법","description":"","date":"2024-06-19 10:31","slug":"2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose","content":"\n환영합니다! 👋\n\n이 기사에서는 Jetpack Compose용 놀라운 3D 테두리 수정자를 만들어보겠습니다. 이 수정자는 어떤 모양의 뷰에도 적용할 수 있습니다. 게다가, 이 수정자를 사용하여 아름다운 검색 바를 만들어볼 것입니다.\n\n자세히 알아보시죠! 🚀\n\n![image](/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Convex Border\n\nModifier를 위한 주요 convexBorder 확장 기능을 정의하는 것부터 시작해봅시다. 이 기능은 최종적으로 윤곽선을 그립니다.\n\n## ConvexStyle\n\n이전에 윤곽 효과의 스타일을 나타내는 ConvexStyle 데이터 클래스를 만들어서 명확성을 높입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\ndata class ConvexStyle(\n    val blur: Dp = 3.dp,\n    val offset: Dp = 2.dp,\n    val glareColor: Color = Color.White.copy(0.64f),\n    val shadowColor: Color = Color.Black.copy(0.64f)\n)\n```\n\n## 함수\n\n이제 함수를 정의하기 위해 모든 준비가 되었습니다:\n\n```kotlin\nfun Modifier.convexBorder(\n    color: Color,\n    shape: Shape,\n    strokeWidth: Dp = 8.dp,\n    convexStyle: ConvexStyle = ConvexStyle()\n)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n⭐ color ➜ 테두리의 색상입니다.\n\n⭐ shape ➜ 테두리의 모양입니다.\n\n⭐ strokeWidth ➜ 테두리 선의 너비입니다.\n\n⭐ convexStyle ➜ 테두리에 적용된 볼록 효과의 스타일입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 구현\n\n자, 이제 우리는 구현을 진행할 수 있어요.\n\n## 그림자와 반짝임 그리기\n\nconvexBorder 함수를 구현하기 전에, 볼록한 효과를 만들기 위해 그림자를 그리는 지원 함수 drawConvexBorderShadow를 정의해야 해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nfun DrawScope.drawConvexBorderShadow(\n    outline: Outline,\n    strokeWidth: Dp,\n    blur: Dp,\n    offsetX: Dp,\n    offsetY: Dp,\n    shadowColor: Color\n) = drawIntoCanvas { canvas ->\n    // Paint 객체를 생성하고 설정합니다\n    val shadowPaint = Paint().apply {\n        this.style = PaintingStyle.Stroke\n        this.color = shadowColor\n        this.strokeWidth = strokeWidth.toPx()\n    }\n\n    // 변환 전 현재 레이어 저장\n    canvas.saveLayer(size.toRect(), shadowPaint)\n\n    val halfStrokeWidth = strokeWidth.toPx() / 2\n    // 테두리가 경계 내에 맞도록 캔버스 이동\n    canvas.translate(halfStrokeWidth, halfStrokeWidth)\n    // 그림자 외곽선 그리기\n    canvas.drawOutline(outline, shadowPaint)\n\n    // 그림자에 대한 혼합 모드 및 흐림 효과 적용\n    shadowPaint.asFrameworkPaint().apply {\n        xfermode = PorterDuffXfermode(PorterDuff.Mode.DST_OUT)\n        maskFilter = BlurMaskFilter(blur.toPx(), BlurMaskFilter.Blur.NORMAL)\n    }\n    // 클리핑용 색상 설정\n    shadowPaint.color = Color.Black\n\n    // 캔버스 이동 및 그림자 클리핑 외곽선 그리기\n    canvas.translate(offsetX.toPx(), offsetY.toPx())\n    canvas.drawOutline(outline, shadowPaint)\n    // 캔버스를 원래 상태로 복원\n    canvas.restore()\n}\n```\n\n이 함수가 어떻게 작동하는지 더 잘 이해하려면 아래 이미지를 확인해보세요 👇\n\n<img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_1.png\" />\n\n## convexBorder 구현\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 drawConvexBorderShadow 함수를 사용하여 볼록한 테두리를 그리는 주요 함수를 정의할 수 있습니다.\n\n여기에 코드 예시가 있습니다 👇\n\n```kotlin\nfun Modifier.convexBorder(\n    /* 매개변수... */\n) = this.drawWithContent {\n    // 캔버스 경계 내에 맞도록 크기 조정\n    val adjustedSize = Size(size.width - strokeWidth.toPx(), size.height - strokeWidth.toPx())\n    // 모양과 조정된 크기에 기반한 윤곽 생성\n    val outline = shape.createOutline(adjustedSize, layoutDirection, this)\n\n    // 컴포저 내의 원본 콘텐츠 그리기\n    drawContent()\n\n    // 테두리를 캔버스에 맞게 이동\n    translate(halfStrokeWidth, halfStrokeWidth) {\n        // 주요 테두리 윤곽 그리기\n        drawOutline(\n            outline = outline,\n            color = color,\n            style = Stroke(width = strokeWidth.toPx())\n        )\n    }\n\n    with(convexStyle) {\n        // 그림자 윤곽 그리기\n        drawConvexBorderShadow(outline, strokeWidth, blur, -offset, -offset, shadowColor)\n        // 눈부심 윤곽 그리기\n        drawConvexBorderShadow(outline, strokeWidth, blur, offset, offset, glareColor)\n    }\n}\n```\n\n이 코드가 어떻게 작동하는지 확인해보세요👇\n\n<img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_2.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n축하드려요🥳! 성공적으로 만들었네요👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있어요🧑‍💻. 이제 이 기능을 활용해 아름다운 사용자 정의 검색 바를 만드는 방법을 알아보겠어요.\n\n## 광고\n\n외국어를 배우고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면, 여정을 쉽고 편리하게 만들어줄 이 어플을 확인해보시기를 강력히 추천해요!\n\n<img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_3.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 실용적인 예제 💁\n\n자, 오늘의 기사에서 실용적인 부분으로 들어가 봅시다.\n\n커스텀 스타일이 적용된 TextField를 작성하기 위해 BasicTextField의 decorationBox 매개변수를 활용할 수 있습니다.\n\n```js\n// 텍스트 입력을 보관할 가변 상태\nvar text by remember { mutableStateOf(\"\") }\n\nBasicTextField(\n    value = text,\n    onValueChange = { text = it },\n    singleLine = true,\n    keyboardOptions = KeyboardOptions(\n        capitalization = KeyboardCapitalization.Sentences,\n        imeAction = ImeAction.Search\n    ),\n    textStyle = LocalTextStyle.current.copy(\n        fontSize = 16.sp,\n        fontWeight = FontWeight.Medium\n    ),\n    decorationBox = { innerTextField ->\n        Row(\n            modifier = Modifier\n                .size(350.dp, 60.dp)\n                // 배경 색상과 모양 설정\n                .background(Color(0xFF7F2DBF), CircleShape)\n                // 동일한 색상과 모양으로 볼록한 테두리 적용\n                .convexBorder(Color(0xFF7F2DBF), CircleShape)\n                .padding(horizontal = 20.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            // 검색 아이콘 추가\n            Icon(\n                imageVector = Icons.Rounded.Search,\n                contentDescription = null\n            )\n            Box {\n                // 입력 텍스트가 비어 있을 때 플레이스홀더 텍스트 표시\n                if (text.isEmpty()) {\n                    Text(\n                        text = \"검색...\",\n                        style = LocalTextStyle.current.copy(color = Color(0xFF242424))\n                    )\n                }\n                // 실제 텍스트 필드 표시\n                innerTextField()\n            }\n        }\n    }\n)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 결과 😍\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*d8g4XiPZ6-d3y-3aTig-9Q.gif)\n\n아래 내용도 맘에 드실지도요 👇\n\n이 글을 읽어 주셔서 감사합니다! ❤️ 즐겁고 유익한 시간이 되셨기를 바랍니다. 좋아하신다면 박수 👏를 눌러주세요. Kappdev를 팔로우하시면 더 많은 흥미로운 글을 만나보실 수 있습니다 😊\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n행복한 코딩하세요!\n\n![이미지](/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_4.png)\n","ogImage":{"url":"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_0.png"},"coverImage":"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>환영합니다! 👋</p>\n<p>이 기사에서는 Jetpack Compose용 놀라운 3D 테두리 수정자를 만들어보겠습니다. 이 수정자는 어떤 모양의 뷰에도 적용할 수 있습니다. 게다가, 이 수정자를 사용하여 아름다운 검색 바를 만들어볼 것입니다.</p>\n<p>자세히 알아보시죠! 🚀</p>\n<p><img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_0.png\" alt=\"image\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Convex Border</h1>\n<p>Modifier를 위한 주요 convexBorder 확장 기능을 정의하는 것부터 시작해봅시다. 이 기능은 최종적으로 윤곽선을 그립니다.</p>\n<h2>ConvexStyle</h2>\n<p>이전에 윤곽 효과의 스타일을 나타내는 ConvexStyle 데이터 클래스를 만들어서 명확성을 높입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConvexStyle</span>(\n    <span class=\"hljs-keyword\">val</span> blur: Dp = <span class=\"hljs-number\">3.</span>dp,\n    <span class=\"hljs-keyword\">val</span> offset: Dp = <span class=\"hljs-number\">2.</span>dp,\n    <span class=\"hljs-keyword\">val</span> glareColor: Color = Color.White.copy(<span class=\"hljs-number\">0.64f</span>),\n    <span class=\"hljs-keyword\">val</span> shadowColor: Color = Color.Black.copy(<span class=\"hljs-number\">0.64f</span>)\n)\n</code></pre>\n<h2>함수</h2>\n<p>이제 함수를 정의하기 위해 모든 준비가 되었습니다:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> Modifier.<span class=\"hljs-title\">convexBorder</span><span class=\"hljs-params\">(\n    color: <span class=\"hljs-type\">Color</span>,\n    shape: <span class=\"hljs-type\">Shape</span>,\n    strokeWidth: <span class=\"hljs-type\">Dp</span> = <span class=\"hljs-number\">8.</span>dp,\n    convexStyle: <span class=\"hljs-type\">ConvexStyle</span> = ConvexStyle()</span></span>\n)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>⭐ color ➜ 테두리의 색상입니다.</p>\n<p>⭐ shape ➜ 테두리의 모양입니다.</p>\n<p>⭐ strokeWidth ➜ 테두리 선의 너비입니다.</p>\n<p>⭐ convexStyle ➜ 테두리에 적용된 볼록 효과의 스타일입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>구현</h1>\n<p>자, 이제 우리는 구현을 진행할 수 있어요.</p>\n<h2>그림자와 반짝임 그리기</h2>\n<p>convexBorder 함수를 구현하기 전에, 볼록한 효과를 만들기 위해 그림자를 그리는 지원 함수 drawConvexBorderShadow를 정의해야 해요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> DrawScope.<span class=\"hljs-title\">drawConvexBorderShadow</span><span class=\"hljs-params\">(\n    outline: <span class=\"hljs-type\">Outline</span>,\n    strokeWidth: <span class=\"hljs-type\">Dp</span>,\n    blur: <span class=\"hljs-type\">Dp</span>,\n    offsetX: <span class=\"hljs-type\">Dp</span>,\n    offsetY: <span class=\"hljs-type\">Dp</span>,\n    shadowColor: <span class=\"hljs-type\">Color</span>\n)</span></span> = drawIntoCanvas { canvas ->\n    <span class=\"hljs-comment\">// Paint 객체를 생성하고 설정합니다</span>\n    <span class=\"hljs-keyword\">val</span> shadowPaint = Paint().apply {\n        <span class=\"hljs-keyword\">this</span>.style = PaintingStyle.Stroke\n        <span class=\"hljs-keyword\">this</span>.color = shadowColor\n        <span class=\"hljs-keyword\">this</span>.strokeWidth = strokeWidth.toPx()\n    }\n\n    <span class=\"hljs-comment\">// 변환 전 현재 레이어 저장</span>\n    canvas.saveLayer(size.toRect(), shadowPaint)\n\n    <span class=\"hljs-keyword\">val</span> halfStrokeWidth = strokeWidth.toPx() / <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-comment\">// 테두리가 경계 내에 맞도록 캔버스 이동</span>\n    canvas.translate(halfStrokeWidth, halfStrokeWidth)\n    <span class=\"hljs-comment\">// 그림자 외곽선 그리기</span>\n    canvas.drawOutline(outline, shadowPaint)\n\n    <span class=\"hljs-comment\">// 그림자에 대한 혼합 모드 및 흐림 효과 적용</span>\n    shadowPaint.asFrameworkPaint().apply {\n        xfermode = PorterDuffXfermode(PorterDuff.Mode.DST_OUT)\n        maskFilter = BlurMaskFilter(blur.toPx(), BlurMaskFilter.Blur.NORMAL)\n    }\n    <span class=\"hljs-comment\">// 클리핑용 색상 설정</span>\n    shadowPaint.color = Color.Black\n\n    <span class=\"hljs-comment\">// 캔버스 이동 및 그림자 클리핑 외곽선 그리기</span>\n    canvas.translate(offsetX.toPx(), offsetY.toPx())\n    canvas.drawOutline(outline, shadowPaint)\n    <span class=\"hljs-comment\">// 캔버스를 원래 상태로 복원</span>\n    canvas.restore()\n}\n</code></pre>\n<p>이 함수가 어떻게 작동하는지 더 잘 이해하려면 아래 이미지를 확인해보세요 👇</p>\n<img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_1.png\">\n<h2>convexBorder 구현</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 drawConvexBorderShadow 함수를 사용하여 볼록한 테두리를 그리는 주요 함수를 정의할 수 있습니다.</p>\n<p>여기에 코드 예시가 있습니다 👇</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> Modifier.<span class=\"hljs-title\">convexBorder</span><span class=\"hljs-params\">(\n    <span class=\"hljs-comment\">/* 매개변수... */</span>\n)</span></span> = <span class=\"hljs-keyword\">this</span>.drawWithContent {\n    <span class=\"hljs-comment\">// 캔버스 경계 내에 맞도록 크기 조정</span>\n    <span class=\"hljs-keyword\">val</span> adjustedSize = Size(size.width - strokeWidth.toPx(), size.height - strokeWidth.toPx())\n    <span class=\"hljs-comment\">// 모양과 조정된 크기에 기반한 윤곽 생성</span>\n    <span class=\"hljs-keyword\">val</span> outline = shape.createOutline(adjustedSize, layoutDirection, <span class=\"hljs-keyword\">this</span>)\n\n    <span class=\"hljs-comment\">// 컴포저 내의 원본 콘텐츠 그리기</span>\n    drawContent()\n\n    <span class=\"hljs-comment\">// 테두리를 캔버스에 맞게 이동</span>\n    translate(halfStrokeWidth, halfStrokeWidth) {\n        <span class=\"hljs-comment\">// 주요 테두리 윤곽 그리기</span>\n        drawOutline(\n            outline = outline,\n            color = color,\n            style = Stroke(width = strokeWidth.toPx())\n        )\n    }\n\n    with(convexStyle) {\n        <span class=\"hljs-comment\">// 그림자 윤곽 그리기</span>\n        drawConvexBorderShadow(outline, strokeWidth, blur, -offset, -offset, shadowColor)\n        <span class=\"hljs-comment\">// 눈부심 윤곽 그리기</span>\n        drawConvexBorderShadow(outline, strokeWidth, blur, offset, offset, glareColor)\n    }\n}\n</code></pre>\n<p>이 코드가 어떻게 작동하는지 확인해보세요👇</p>\n<img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_2.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>축하드려요🥳! 성공적으로 만들었네요👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있어요🧑‍💻. 이제 이 기능을 활용해 아름다운 사용자 정의 검색 바를 만드는 방법을 알아보겠어요.</p>\n<h2>광고</h2>\n<p>외국어를 배우고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면, 여정을 쉽고 편리하게 만들어줄 이 어플을 확인해보시기를 강력히 추천해요!</p>\n<img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_3.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>실용적인 예제 💁</h1>\n<p>자, 오늘의 기사에서 실용적인 부분으로 들어가 봅시다.</p>\n<p>커스텀 스타일이 적용된 TextField를 작성하기 위해 BasicTextField의 decorationBox 매개변수를 활용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 텍스트 입력을 보관할 가변 상태</span>\n<span class=\"hljs-keyword\">var</span> text by remember { <span class=\"hljs-title function_\">mutableStateOf</span>(<span class=\"hljs-string\">\"\"</span>) }\n\n<span class=\"hljs-title class_\">BasicTextField</span>(\n    value = text,\n    onValueChange = { text = it },\n    singleLine = <span class=\"hljs-literal\">true</span>,\n    keyboardOptions = <span class=\"hljs-title class_\">KeyboardOptions</span>(\n        capitalization = <span class=\"hljs-title class_\">KeyboardCapitalization</span>.<span class=\"hljs-property\">Sentences</span>,\n        imeAction = <span class=\"hljs-title class_\">ImeAction</span>.<span class=\"hljs-property\">Search</span>\n    ),\n    textStyle = <span class=\"hljs-title class_\">LocalTextStyle</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">copy</span>(\n        fontSize = <span class=\"hljs-number\">16.</span>sp,\n        fontWeight = <span class=\"hljs-title class_\">FontWeight</span>.<span class=\"hljs-property\">Medium</span>\n    ),\n    decorationBox = { innerTextField ->\n        <span class=\"hljs-title class_\">Row</span>(\n            modifier = <span class=\"hljs-title class_\">Modifier</span>\n                .<span class=\"hljs-title function_\">size</span>(<span class=\"hljs-number\">350.</span>dp, <span class=\"hljs-number\">60.</span>dp)\n                <span class=\"hljs-comment\">// 배경 색상과 모양 설정</span>\n                .<span class=\"hljs-title function_\">background</span>(<span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFF7F2DBF</span>), <span class=\"hljs-title class_\">CircleShape</span>)\n                <span class=\"hljs-comment\">// 동일한 색상과 모양으로 볼록한 테두리 적용</span>\n                .<span class=\"hljs-title function_\">convexBorder</span>(<span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFF7F2DBF</span>), <span class=\"hljs-title class_\">CircleShape</span>)\n                .<span class=\"hljs-title function_\">padding</span>(horizontal = <span class=\"hljs-number\">20.</span>dp),\n            verticalAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterVertically</span>,\n            horizontalArrangement = <span class=\"hljs-title class_\">Arrangement</span>.<span class=\"hljs-title function_\">spacedBy</span>(<span class=\"hljs-number\">8.</span>dp)\n        ) {\n            <span class=\"hljs-comment\">// 검색 아이콘 추가</span>\n            <span class=\"hljs-title class_\">Icon</span>(\n                imageVector = <span class=\"hljs-title class_\">Icons</span>.<span class=\"hljs-property\">Rounded</span>.<span class=\"hljs-property\">Search</span>,\n                contentDescription = <span class=\"hljs-literal\">null</span>\n            )\n            <span class=\"hljs-title class_\">Box</span> {\n                <span class=\"hljs-comment\">// 입력 텍스트가 비어 있을 때 플레이스홀더 텍스트 표시</span>\n                <span class=\"hljs-keyword\">if</span> (text.<span class=\"hljs-title function_\">isEmpty</span>()) {\n                    <span class=\"hljs-title class_\">Text</span>(\n                        text = <span class=\"hljs-string\">\"검색...\"</span>,\n                        style = <span class=\"hljs-title class_\">LocalTextStyle</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">copy</span>(color = <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0xFF242424</span>))\n                    )\n                }\n                <span class=\"hljs-comment\">// 실제 텍스트 필드 표시</span>\n                <span class=\"hljs-title function_\">innerTextField</span>()\n            }\n        }\n    }\n)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>결과 😍</h2>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1400/1*d8g4XiPZ6-d3y-3aTig-9Q.gif\" alt=\"image\"></p>\n<p>아래 내용도 맘에 드실지도요 👇</p>\n<p>이 글을 읽어 주셔서 감사합니다! ❤️ 즐겁고 유익한 시간이 되셨기를 바랍니다. 좋아하신다면 박수 👏를 눌러주세요. Kappdev를 팔로우하시면 더 많은 흥미로운 글을 만나보실 수 있습니다 😊</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>행복한 코딩하세요!</p>\n<p><img src=\"/assets/img/2024-06-19-HowtoCreateaStunning3DBorderinJetpackCompose_4.png\" alt=\"이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}