{"pageProps":{"post":{"title":"React에서 상태 및 스크롤 위치를 유지하는 방법","description":"","date":"2024-06-30 22:40","slug":"2024-06-30-HowtomaintainstateandscrollpositioninReact","content":"\n\n가끔 뉴스 목록에서 뉴스 세부 페이지로 전환한 후 다시 돌아오면 상태와 스크롤 위치가 손실될 수 있습니다. 이를 방지하기 위해 페이지 간 이동 시 react-router-dom을 사용하여 값을 전달할 수 있습니다.\n\n따라서 세부 페이지로 이동할 때 다음과 같이 상태 및 스크롤 위치를 전달하세요.\n\n```js\nnavigate('/userDetails', {state: {userLists: data, scrollPosition, userInfo: info}})\n```\n\n`div` 요소에서 스크롤 이벤트를 캡처하고 값을 업데이트하는 방법:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n function handleScroll(event) {\n    setScrollPosition(event.target.scrollTop)\n }\n\n<div style={{overflowY: \"scroll\",height: '100vh'}} ref={scrollRef} onScroll={handleScroll}>\n```\n\n유저가 뒤로 돌아갈 때, 상태를 다시 뉴스 페이지로 변경하세요:\n\n```js\nnavigate('/news', { state: location.state })\n```\n\n뉴스 컴포넌트에서 아래와 같이 데이터에 접근하고 업데이트하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nuseEffect(()=> {\n   if(location.state){\n      const {userLists,scrollPosition} = location.state;  \n      setData(userLists)\n      scrollRef.current.style.backgroundColor = 'red'\n      setTimeout(() => {\n        scrollRef.current.scrollTop = scrollPosition\n      }, (10));\n   }else{\n      getDataFromApi();\n   }\n},[])\n```\n\n기억하세요, setTimeout 내부의 코드는 잠시 지난 후에 실행되며 스크롤 위치를 조정하기 전에 DOM이 안정화됩니다.\n\n그리고 다음은 이 기능을 적용하는 방법의 예시입니다.\n\n```js\nimport './App.css';\nimport { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter, Route, Routes, useLocation, useNavigate } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n     <Routes>\n       <Route path=\"/news\" element={<UserLists />}/>\n       <Route path=\"/userDetails\" element={<UserDetails />}/>\n     </Routes>\n    </BrowserRouter>\n  );\n}\n\nconst UserLists = () => {\n  const [data,setData] = useState([]);\n  const [scrollPosition,setScrollPosition] = useState();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const scrollRef = useRef();\n\n  useEffect(()=> {\n    if(location.state){\n      const {userLists,scrollPosition} = location.state;  \n      setData(userLists)\n      scrollRef.current.style.backgroundColor = 'red'\n      setTimeout(() => {\n        scrollRef.current.scrollTop = scrollPosition\n      }, (10));\n    }else{\n      getDataFromApi();\n    }\n  },[])\n\n\n  const getDataFromApi = async () => {\n    try{\n      const res = await axios.get('https://reqres.in/api/users');\n      setData(res.data.data);\n    }catch(err){\n      console.log(\"error\",err)\n    }     \n  }\n\n  const handleScroll = (event) => {\n    setScrollPosition(event.target.scrollTop)\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{overflowY: \"scroll\",height: '100vh'}} ref={scrollRef} onScroll={handleScroll}>\n        {data.map((info) => {\n          return (\n            <div\n              style={{backgroundColor: \"orange\"}}\n              onClick={() => {\n                navigate('/userDetails',{state: {userLists: data,scrollPosition,userInfo: info}})\n              }\n            >\n              <h2>{info.email}</h2>\n              <h2>{info.first_name}</h2>\n              <h2>{info.last_name}</h2>\n              <img src={info.avatar} />\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst UserDetails = () => {\n  const [userInfo,setUserInfo] = useState();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(()=> {\n    if(location.state){\n      const {userInfo} = location.state;\n      setUserInfo(userInfo)\n    }\n  })\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          navigate('/news',{state: location.state})\n        }\n      >\n        Go back to user lists\n      </button>\n      <div\n        style={{backgroundColor: \"skyblue\"}}\n      >\n        <h2>{userInfo?.email}</h2>\n        <h2>{userInfo?.first_name}</h2>\n        <h2>{userInfo?.last_name}</h2>\n        <img src={userInfo?.avatar} />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그게 전부에요...\n\n위의 방법은 사용자가 브라우저의 뒤로 가기 버튼을 누를 때 작동하지 않습니다. 이러한 경우에 작동하려면 로컬 스토리지에 상태와 스크롤 위치를 저장하고, 첫 렌더링 중에 useEffect에서 사용해야 합니다.\n\n질문이 있으시면 응답 섹션에서 물어봐 주세요.","ogImage":{"url":"/assets/img/2024-06-30-HowtomaintainstateandscrollpositioninReact_0.png"},"coverImage":"/assets/img/2024-06-30-HowtomaintainstateandscrollpositioninReact_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>가끔 뉴스 목록에서 뉴스 세부 페이지로 전환한 후 다시 돌아오면 상태와 스크롤 위치가 손실될 수 있습니다. 이를 방지하기 위해 페이지 간 이동 시 react-router-dom을 사용하여 값을 전달할 수 있습니다.</p>\n<p>따라서 세부 페이지로 이동할 때 다음과 같이 상태 및 스크롤 위치를 전달하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">navigate</span>(<span class=\"hljs-string\">'/userDetails'</span>, {<span class=\"hljs-attr\">state</span>: {<span class=\"hljs-attr\">userLists</span>: data, scrollPosition, <span class=\"hljs-attr\">userInfo</span>: info}})\n</code></pre>\n<p><code>div</code> 요소에서 스크롤 이벤트를 캡처하고 값을 업데이트하는 방법:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">handleScroll</span>(<span class=\"hljs-params\">event</span>) {\n    <span class=\"hljs-title function_\">setScrollPosition</span>(event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">scrollTop</span>)\n }\n\n&#x3C;div style={{<span class=\"hljs-attr\">overflowY</span>: <span class=\"hljs-string\">\"scroll\"</span>,<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">'100vh'</span>}} ref={scrollRef} onScroll={handleScroll}>\n</code></pre>\n<p>유저가 뒤로 돌아갈 때, 상태를 다시 뉴스 페이지로 변경하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">navigate</span>(<span class=\"hljs-string\">'/news'</span>, { <span class=\"hljs-attr\">state</span>: location.<span class=\"hljs-property\">state</span> })\n</code></pre>\n<p>뉴스 컴포넌트에서 아래와 같이 데이터에 접근하고 업데이트하세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">()=></span> {\n   <span class=\"hljs-keyword\">if</span>(location.<span class=\"hljs-property\">state</span>){\n      <span class=\"hljs-keyword\">const</span> {userLists,scrollPosition} = location.<span class=\"hljs-property\">state</span>;  \n      <span class=\"hljs-title function_\">setData</span>(userLists)\n      scrollRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">'red'</span>\n      <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n        scrollRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">scrollTop</span> = scrollPosition\n      }, (<span class=\"hljs-number\">10</span>));\n   }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-title function_\">getDataFromApi</span>();\n   }\n},[])\n</code></pre>\n<p>기억하세요, setTimeout 내부의 코드는 잠시 지난 후에 실행되며 스크롤 위치를 조정하기 전에 DOM이 안정화됩니다.</p>\n<p>그리고 다음은 이 기능을 적용하는 방법의 예시입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./App.css'</span>;\n<span class=\"hljs-keyword\">import</span> { useEffect, useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BrowserRouter</span>, <span class=\"hljs-title class_\">Route</span>, <span class=\"hljs-title class_\">Routes</span>, useLocation, useNavigate } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">BrowserRouter</span>></span>\n     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Routes</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/news\"</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">UserLists</span> /></span>}/>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Route</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"/userDetails\"</span> <span class=\"hljs-attr\">element</span>=<span class=\"hljs-string\">{</span>&#x3C;<span class=\"hljs-attr\">UserDetails</span> /></span>}/>\n     <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Routes</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">BrowserRouter</span>></span></span>\n  );\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserLists</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [data,setData] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [scrollPosition,setScrollPosition] = <span class=\"hljs-title function_\">useState</span>();\n  <span class=\"hljs-keyword\">const</span> navigate = <span class=\"hljs-title function_\">useNavigate</span>();\n  <span class=\"hljs-keyword\">const</span> location = <span class=\"hljs-title function_\">useLocation</span>();\n  <span class=\"hljs-keyword\">const</span> scrollRef = <span class=\"hljs-title function_\">useRef</span>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">()=></span> {\n    <span class=\"hljs-keyword\">if</span>(location.<span class=\"hljs-property\">state</span>){\n      <span class=\"hljs-keyword\">const</span> {userLists,scrollPosition} = location.<span class=\"hljs-property\">state</span>;  \n      <span class=\"hljs-title function_\">setData</span>(userLists)\n      scrollRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = <span class=\"hljs-string\">'red'</span>\n      <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n        scrollRef.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">scrollTop</span> = scrollPosition\n      }, (<span class=\"hljs-number\">10</span>));\n    }<span class=\"hljs-keyword\">else</span>{\n      <span class=\"hljs-title function_\">getDataFromApi</span>();\n    }\n  },[])\n\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getDataFromApi</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">try</span>{\n      <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'https://reqres.in/api/users'</span>);\n      <span class=\"hljs-title function_\">setData</span>(res.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">data</span>);\n    }<span class=\"hljs-keyword\">catch</span>(err){\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"error\"</span>,err)\n    }     \n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleScroll</span> = (<span class=\"hljs-params\">event</span>) => {\n    <span class=\"hljs-title function_\">setScrollPosition</span>(event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">scrollTop</span>)\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{overflowY:</span> \"<span class=\"hljs-attr\">scroll</span>\",<span class=\"hljs-attr\">height:</span> '<span class=\"hljs-attr\">100vh</span>'}} <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{scrollRef}</span> <span class=\"hljs-attr\">onScroll</span>=<span class=\"hljs-string\">{handleScroll}</span>></span>\n        {data.map((info) => {\n          return (\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n              <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{backgroundColor:</span> \"<span class=\"hljs-attr\">orange</span>\"}}\n              <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> {\n                navigate('/userDetails',{state: {userLists: data,scrollPosition,userInfo: info}})\n              }\n            >\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{info.email}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{info.first_name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{info.last_name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{info.avatar}</span> /></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n          )\n        })}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">UserDetails</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [userInfo,setUserInfo] = <span class=\"hljs-title function_\">useState</span>();\n  <span class=\"hljs-keyword\">const</span> navigate = <span class=\"hljs-title function_\">useNavigate</span>();\n  <span class=\"hljs-keyword\">const</span> location = <span class=\"hljs-title function_\">useLocation</span>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">()=></span> {\n    <span class=\"hljs-keyword\">if</span>(location.<span class=\"hljs-property\">state</span>){\n      <span class=\"hljs-keyword\">const</span> {userInfo} = location.<span class=\"hljs-property\">state</span>;\n      <span class=\"hljs-title function_\">setUserInfo</span>(userInfo)\n    }\n  })\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> {\n          navigate('/news',{state: location.state})\n        }\n      >\n        Go back to user lists\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{backgroundColor:</span> \"<span class=\"hljs-attr\">skyblue</span>\"}}\n      ></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{userInfo?.email}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{userInfo?.first_name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>{userInfo?.last_name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{userInfo?.avatar}</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그게 전부에요...</p>\n<p>위의 방법은 사용자가 브라우저의 뒤로 가기 버튼을 누를 때 작동하지 않습니다. 이러한 경우에 작동하려면 로컬 스토리지에 상태와 스크롤 위치를 저장하고, 첫 렌더링 중에 useEffect에서 사용해야 합니다.</p>\n<p>질문이 있으시면 응답 섹션에서 물어봐 주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}