{"pageProps":{"post":{"title":"간단한 JavaScript 로거 사용 방법","description":"","date":"2024-06-30 22:31","slug":"2024-06-30-SimpleJavascriptLogger","content":"\n\n# 다시 한번, Java 프로그래머가 JavaScript에서 일하며 Java 로거를 그리워하는 이야기 :-)\n\n![이미지](/assets/img/2024-06-30-SimpleJavascriptLogger_0.png)\n\nJavaScript와 React에 대한 사랑이 커짐에 따라, 내 React 애플리케이션에 간단한 로거가 필요하다는 필요성이 커지고 있습니다. 몇 가지 로거를 시도해봤지만, 간단한 Java 스타일의 로거에 대한 취향이 강하기 때문에 TypeScript로 나만의 간단한 Logger 클래스를 작성하게 되었고, 현재 개인 프로젝트에서 사용하고 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래에 `logger.ts` 파일을 찾으실 수 있어요. 마음껏 사용하고 수정해 보세요 :)\n\n# 내가 Logger를 좋아하는 이유:\n\n- 커스터마이징 가능한 로그 레벨: 각 모듈에 대해 나만의 로그 레벨을 추가할 수 있어요.\n- 조절 가능한 로깅 디테일: 얼마나 많은 정보를 로깅할 지 결정할 수 있어요. 기본적으로 info 수준의 정보를 로깅하며, 필요에 따라 로그 레벨을 높일 수 있어요.\n- 전문화된 Logger: 서로 다른 모듈에 대해 특별한 로거를 추가하기 쉬워요.\n- 확장성: 현재의 Logger를 수정하거나 확장해서 로그를 서버로 전송할 수 있어요.\n\n```js\nimport {useMemo} from \"react\";\n\nexport enum LogLeveL {\n  ERROR = 100,\n  WARN = 200,\n  INFO = 400,\n  AUTH = 401,\n  MIDDLE_LAYER = 402,\n  DEBUG = 800\n}\n\nexport const GLOBAL_LEVEL = LogLeveL.INFO;\n\nexport class Logger {\n  protected readonly prefix: string;\n\n  constructor(prefix: string, protected readonly currentLevel: LogLeveL = GLOBAL_LEVEL) {\n    this.prefix = prefix.replaceAll(\"/\", \".\");\n  }\n\n  info(...messages: any[]) {\n    this._log(LogLeveL.INFO, ...messages);\n  }\n\n  warn(...messages: any[]) {\n    this._log(LogLeveL.WARN, ...messages);\n  }\n\n  debug(...messages: any[]) {\n    this._log(LogLeveL.DEBUG, ...messages);\n  }\n\n  error(...messages: any[]) {\n    this._log(LogLeveL.ERROR, ...messages);\n  }\n\n  protected _log(level: LogLeveL, ...messages: any[]) {\n    if (level <= GLOBAL_LEVEL)\n      console.info(`[${LogLeveL[level]}][${this.prefix}]`, ...messages);\n  }\n\n  log(...messages: any[]) {\n    this._log(this.currentLevel, ...messages);\n  }\n}\n\nexport class AuthLogger extends Logger {\n\n  constructor(prefix: string) {\n    super(prefix, LogLeveL.AUTH);\n  }\n\n  auth(...messages: any[]) {\n    this._log(LogLeveL.AUTH, ...messages);\n  }\n}\n\n\nexport function useLogger(name: string) {\n  return useMemo(() => {\n    return new Logger(name);\n  }, [name]);\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 사용 예시, 사용 방법:\n\n```js\ntype AuthComponentProps = {}\nconst logger: AuthLogger = new AuthLogger(\"app/page/AuthComponent\");\nconst AuthComponent = (props: AuthComponentProps) => {\n  useEffect(() => {\n    // 인증 로거입니다.\n    logger.auth(\"인증 호출을 수행 중입니다.\");// 즉 인증 로그 레벨 호출만 기록합니다.\n    logger.info(\"이것은 정보 메시지입니다.\");\n    logger.warn(\"이것은 경고 메시지입니다.\");\n    logger.error(\"이것은 오류 메시지입니다.\");\n    logger.debug(\"이것은 디버그 메시지입니다.\");\n  }, []);\n  return (\n    <div>\n      로그인 컴포넌트입니다.<br/>\n      사용자: ____<br/>\n      비밀번호: ____<br/>\n    </div>\n  );\n};\n\n// 로그 레벨을 변경하려면 GLOBAL_LEVEL 변수의 값을 조정하십시오.\n```\n\n# 주요 기능\n\n- 사용자 정의 로그 레벨: LogLeveL 열거형을 사용하면 필요에 따라 다양한 로그 레벨을 지정할 수 있습니다.\n- 전역 로그 레벨: GLOBAL_LEVEL 상수는 전역 로그 레벨을 결정하여 로그의 상세 수준을 제어할 수 있습니다.\n- Logger 클래스: Logger 클래스는 다른 수준의 메시지를 기록하는 방법을 제공하며 (info, warn, debug, error), 적절한 로그 레벨인 경우 메시지를 콘솔에 출력하기 위해 _log 메서드를 사용합니다.\n- 전문 로거: AuthLogger 클래스는 Logger를 확장하여 인증 관련 메시지를 기록하는 auth 메서드를 추가합니다.\n- React 훅: useLogger 훅은 useMemo를 사용하여 새로운 Logger 인스턴스를 만들어 컴포넌트 당 로거가 한 번만 생성되도록 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당신의 프로젝트에서 이 로거를 자유롭게 사용해보세요. 즐거운 코딩하세요!\n\n수정사항을 제안하거나 피드백을 주시면 감사하겠습니다.","ogImage":{"url":"/assets/img/2024-06-30-SimpleJavascriptLogger_0.png"},"coverImage":"/assets/img/2024-06-30-SimpleJavascriptLogger_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>다시 한번, Java 프로그래머가 JavaScript에서 일하며 Java 로거를 그리워하는 이야기 :-)</h1>\n<p><img src=\"/assets/img/2024-06-30-SimpleJavascriptLogger_0.png\" alt=\"이미지\"></p>\n<p>JavaScript와 React에 대한 사랑이 커짐에 따라, 내 React 애플리케이션에 간단한 로거가 필요하다는 필요성이 커지고 있습니다. 몇 가지 로거를 시도해봤지만, 간단한 Java 스타일의 로거에 대한 취향이 강하기 때문에 TypeScript로 나만의 간단한 Logger 클래스를 작성하게 되었고, 현재 개인 프로젝트에서 사용하고 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래에 <code>logger.ts</code> 파일을 찾으실 수 있어요. 마음껏 사용하고 수정해 보세요 :)</p>\n<h1>내가 Logger를 좋아하는 이유:</h1>\n<ul>\n<li>커스터마이징 가능한 로그 레벨: 각 모듈에 대해 나만의 로그 레벨을 추가할 수 있어요.</li>\n<li>조절 가능한 로깅 디테일: 얼마나 많은 정보를 로깅할 지 결정할 수 있어요. 기본적으로 info 수준의 정보를 로깅하며, 필요에 따라 로그 레벨을 높일 수 있어요.</li>\n<li>전문화된 Logger: 서로 다른 모듈에 대해 특별한 로거를 추가하기 쉬워요.</li>\n<li>확장성: 현재의 Logger를 수정하거나 확장해서 로그를 서버로 전송할 수 있어요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {useMemo} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> enum <span class=\"hljs-title class_\">LogLeveL</span> {\n  <span class=\"hljs-variable constant_\">ERROR</span> = <span class=\"hljs-number\">100</span>,\n  <span class=\"hljs-variable constant_\">WARN</span> = <span class=\"hljs-number\">200</span>,\n  <span class=\"hljs-variable constant_\">INFO</span> = <span class=\"hljs-number\">400</span>,\n  <span class=\"hljs-variable constant_\">AUTH</span> = <span class=\"hljs-number\">401</span>,\n  <span class=\"hljs-variable constant_\">MIDDLE_LAYER</span> = <span class=\"hljs-number\">402</span>,\n  <span class=\"hljs-variable constant_\">DEBUG</span> = <span class=\"hljs-number\">800</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">GLOBAL_LEVEL</span> = <span class=\"hljs-title class_\">LogLeveL</span>.<span class=\"hljs-property\">INFO</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span> {\n  protected readonly <span class=\"hljs-attr\">prefix</span>: string;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">prefix: string, protected readonly currentLevel: LogLeveL = GLOBAL_LEVEL</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">prefix</span> = prefix.<span class=\"hljs-title function_\">replaceAll</span>(<span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\".\"</span>);\n  }\n\n  <span class=\"hljs-title function_\">info</span>(<span class=\"hljs-params\">...messages: any[]</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_log</span>(<span class=\"hljs-title class_\">LogLeveL</span>.<span class=\"hljs-property\">INFO</span>, ...messages);\n  }\n\n  <span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-params\">...messages: any[]</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_log</span>(<span class=\"hljs-title class_\">LogLeveL</span>.<span class=\"hljs-property\">WARN</span>, ...messages);\n  }\n\n  <span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-params\">...messages: any[]</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_log</span>(<span class=\"hljs-title class_\">LogLeveL</span>.<span class=\"hljs-property\">DEBUG</span>, ...messages);\n  }\n\n  <span class=\"hljs-title function_\">error</span>(<span class=\"hljs-params\">...messages: any[]</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_log</span>(<span class=\"hljs-title class_\">LogLeveL</span>.<span class=\"hljs-property\">ERROR</span>, ...messages);\n  }\n\n  protected <span class=\"hljs-title function_\">_log</span>(<span class=\"hljs-params\">level: LogLeveL, ...messages: any[]</span>) {\n    <span class=\"hljs-keyword\">if</span> (level &#x3C;= <span class=\"hljs-variable constant_\">GLOBAL_LEVEL</span>)\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">`[<span class=\"hljs-subst\">${LogLeveL[level]}</span>][<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.prefix}</span>]`</span>, ...messages);\n  }\n\n  <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-params\">...messages: any[]</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">currentLevel</span>, ...messages);\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthLogger</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Logger</span> {\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">prefix: string</span>) {\n    <span class=\"hljs-variable language_\">super</span>(prefix, <span class=\"hljs-title class_\">LogLeveL</span>.<span class=\"hljs-property\">AUTH</span>);\n  }\n\n  <span class=\"hljs-title function_\">auth</span>(<span class=\"hljs-params\">...messages: any[]</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_log</span>(<span class=\"hljs-title class_\">LogLeveL</span>.<span class=\"hljs-property\">AUTH</span>, ...messages);\n  }\n}\n\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useLogger</span>(<span class=\"hljs-params\">name: string</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">useMemo</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Logger</span>(name);\n  }, [name]);\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>사용 예시, 사용 방법:</h1>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">AuthComponentProps</span> = {}\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">logger</span>: <span class=\"hljs-title class_\">AuthLogger</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AuthLogger</span>(<span class=\"hljs-string\">\"app/page/AuthComponent\"</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">AuthComponent</span> = (<span class=\"hljs-params\">props: AuthComponentProps</span>) => {\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// 인증 로거입니다.</span>\n    logger.<span class=\"hljs-title function_\">auth</span>(<span class=\"hljs-string\">\"인증 호출을 수행 중입니다.\"</span>);<span class=\"hljs-comment\">// 즉 인증 로그 레벨 호출만 기록합니다.</span>\n    logger.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">\"이것은 정보 메시지입니다.\"</span>);\n    logger.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">\"이것은 경고 메시지입니다.\"</span>);\n    logger.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">\"이것은 오류 메시지입니다.\"</span>);\n    logger.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">\"이것은 디버그 메시지입니다.\"</span>);\n  }, []);\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n      로그인 컴포넌트입니다.<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span>/></span>\n      사용자: ____<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span>/></span>\n      비밀번호: ____<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span>/></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n\n<span class=\"hljs-comment\">// 로그 레벨을 변경하려면 GLOBAL_LEVEL 변수의 값을 조정하십시오.</span>\n</code></pre>\n<h1>주요 기능</h1>\n<ul>\n<li>사용자 정의 로그 레벨: LogLeveL 열거형을 사용하면 필요에 따라 다양한 로그 레벨을 지정할 수 있습니다.</li>\n<li>전역 로그 레벨: GLOBAL_LEVEL 상수는 전역 로그 레벨을 결정하여 로그의 상세 수준을 제어할 수 있습니다.</li>\n<li>Logger 클래스: Logger 클래스는 다른 수준의 메시지를 기록하는 방법을 제공하며 (info, warn, debug, error), 적절한 로그 레벨인 경우 메시지를 콘솔에 출력하기 위해 _log 메서드를 사용합니다.</li>\n<li>전문 로거: AuthLogger 클래스는 Logger를 확장하여 인증 관련 메시지를 기록하는 auth 메서드를 추가합니다.</li>\n<li>React 훅: useLogger 훅은 useMemo를 사용하여 새로운 Logger 인스턴스를 만들어 컴포넌트 당 로거가 한 번만 생성되도록 합니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>당신의 프로젝트에서 이 로거를 자유롭게 사용해보세요. 즐거운 코딩하세요!</p>\n<p>수정사항을 제안하거나 피드백을 주시면 감사하겠습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}