{"pageProps":{"post":{"title":"RSpec 매처와 기대 설정 방법","description":"","date":"2024-06-23 20:48","slug":"2024-06-23-RSpecMatchersandExpectations","content":"\n![이미지](/assets/img/2024-06-23-RSpecMatchersandExpectations_0.png)\n\n버그가 없는 코드를 작성하는 것은 끝이 없는 전투입니다. 가장 경험 많은 개발자라도 모든 예외 상황과 잠재적인 문제를 잡는 데 어려움을 겪습니다. 그러나 올바른 도구와 기술을 활용하면 소프트웨어의 신뢰성을 크게 향상시킬 수 있습니다.\n\n# RSpec Expectations 탐색\n\nRSpec의 expectations는 Ruby 웹 어플리케이션을 테스트하는 강력한 도구입니다. 전통적인 어설션과 달리 expectations는 조합성, 자동 부정, 가독성 향상 및 더 유용한 에러 메시지를 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 기대하는 요소\n\n기대는 세 가지 주요 부분으로 구성됩니다:\n\n- Subject: 일반적으로 루비 클래스의 인스턴스인 테스트 대상 객체입니다.\n- Matcher: 예상되는 동작을 지정하고 통과/실패 논리를 제공하는 객체입니다.\n- 사용자 정의 실패 메시지(선택 사항): 기대가 실패할 때 추가적인 문맥을 제공하기 위한 사용자 정의 메시지입니다.\n\n여기 예시가 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 주제\n\nsubject = Course.new(name: \"루비 입문\")\n\n# 매처 및 사용자 정의 실패 메시지를 사용한 예상\n\nexpect(subject.name).to eq(\"루비 입문\"), \"과정 이름이 일치해야 함\"\n\n# 매처 구성\n\n다양한 방법으로 매처를 조합하여 복잡한 동작을 정밀하게 지정할 수 있습니다:\n\n- 다른 매처에 매처 전달하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nexpect(subject.lessons).to start_with(an_object_having_attributes(title: \"Ruby Basics\"))\n```\n\n2. Embedding matchers in Arrays and Hashes:\n\n```js\nexpected_student = {\n  name: \"John Doe\",\n  enrolled_courses: an_object_having_attributes(name: a_string_starting_with(\"Introduction\"))\n}\nexpect(subject.students).to include(expected_student)\n```\n\n3. Combining matchers with logical operators:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nexpect(subject.grading_system).to be_present & match(/letter|numeric/)\n```\n\n## 전통적인 단언문보다 RSpec의 장점\n\n전통적인 단언문과는 달리, RSpec의 기대치는 다음과 같은 장점을 제공합니다:\n\n- 개선된 가독성: 구문은 자연어에 더 가깝기 때문에 테스트를 읽고 이해하기 쉽습니다.\n- 결합성: 매처를 결합하여 더 복잡한 단언문을 만들 수 있으며 명확성을 잃지 않습니다.\n- 더 나은 오류 메시지: 테스트가 실패할 때 RSpec은 디버깅을 더 쉽게 만드는 자세한 메시지를 제공합니다.\n- 자동 부정: .not_to 또는 .to_not를 사용하면 부정이 더 직관적이며 테스트의 표현력을 향상시킵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 생성된 예제 설명\n\nMatchers는 자체적으로 설명을 제공하여 RSpec이 예제에 대한 가독성있는 설명을 생성할 수 있게 합니다. 이는 중복을 줄이고 테스트를 미래를 대비하여 더 견고하게 만드는 데 도움이 될 수 있습니다.\n\n```js\nRSpec.describe Course, \"#enrolled_students\" do\n  subject { Course.new(name: \"Introduction to Ruby\") }\n\n  it { is_expected.to have_attributes(enrolled_students: be_empty) }\n  it { should_not have_attributes(enrolled_students: include(an_object_having_attributes(name: \"John Doe\"))) }\nend\n```\n\n출력은 다음과 같이 표시됩니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCourse#enrolled_students\nshould have attributes enrolled_students: []\nshould not have attributes enrolled_students: [#<name: \"John Doe\">]\n\nWhile generated descriptions are convenient, use them judiciously. They can be misleading if your setup code changes, and one-liner specs can sometimes\nbe harder to read and maintain.\n\n# Exploring RSpec’s Matchers for Your App\n\nRSpec offers a wide range of built-in matchers to help you write expressive and robust tests.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 기본 일치자\n\n이러한 일치자는 문자열, 숫자 및 부울과 같은 기본 데이터 유형을 처리합니다. 예를 들어, 학생의 이름이 특정 값과 일치하는지 테스트하려면:\n\n```js\nstudent = Student.new(name: \"John Doe\")\nexpect(student.name).to eq(\"John Doe\")\n```\n\n# 컬렉션 일치자\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRSpec은 배열이나 해시와 같은 컬렉션과 함께 작업하는 여러 매처를 제공합니다. 특정 요소가 컬렉션에 포함되어 있는지 확인하려면 include를 사용할 수 있습니다:\n\n```js\nenrolled_courses = [\n  { name: \"Ruby Basics\", credits: 3 },\n  { name: \"Web Development\", credits: 5 }\n]\n\nexpect(enrolled_courses).to include(\n  an_object_having_attributes(name: \"Ruby Basics\")\n)\n```\n\nmatch 매처는 깊게 중첩된 데이터 구조에 유용하며, 배열 요소나 해시 값에 대해 어떤 수준에서든 매처를 대체할 수 있습니다.\n\n# 블록 매처\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n가끔은 코드 블록의 동작을 테스트해야 할 때가 있습니다. 예를 들어, 예외가 발생하는지 확인하거나 메소드가 블록에 제어를 양보하는지 확인하는 것입니다. 이런 시나리오에는 RSpec의 블록 매처들이 유용합니다.\n\n```js\nexpect { course.enroll(nil) }.to raise_error(ArgumentError)\n\nexpect { |block| course.lessons.each(&block) }.to yield_successive_args(\n  [\"Lesson 1\", 1],\n  [\"Lesson 2\", 2]\n)\n```\n\n# 조합된 매처들\n\nRSpec의 장점 중 하나는 매처들을 조합할 수 있다는 것입니다. 이를 통해 복잡한 동작을 정확하게 지정할 수 있습니다. 논리 연산자를 사용하여 매처를 결합하거나, 하나의 매처를 다른 매처로 전달하거나, 매처를 데이터 구조 안에 포함시킬 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nexpect(course.lessons).to all(\n  have_attributes(duration: a_value_between(30, 90))\n    .and(start_with(\"Lesson\"))\n)\n```\n\n# 간단한 설명\n\nRSpec expectations은 조합성, 가독성 및 자세한 오류 메시지를 제공합니다. 복잡한 조건을 정확하게 지정하기 위해 matcher composition을 사용하세요.\n\n기본 데이터 유형의 경우 등가성 및 진실성 matcher를 사용하세요. include, match 및 contain_exactly로 컬렉션을 확인하세요. 예외와 블록 matcher를 사용하여 코드 동작을 테스트하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일치자를 중첩하여 배치하거나 데이터 구조에 삽입하여 논리 연산자를 사용하여 작성하세요. 엄격한 동등성보다는 유연한 일치자를 선택하세요. 가독성을 높이기 위해 별칭 및 사용자 정의 메시지를 사용하세요.\n","ogImage":{"url":"/assets/img/2024-06-23-RSpecMatchersandExpectations_0.png"},"coverImage":"/assets/img/2024-06-23-RSpecMatchersandExpectations_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-RSpecMatchersandExpectations_0.png\" alt=\"이미지\"></p>\n<p>버그가 없는 코드를 작성하는 것은 끝이 없는 전투입니다. 가장 경험 많은 개발자라도 모든 예외 상황과 잠재적인 문제를 잡는 데 어려움을 겪습니다. 그러나 올바른 도구와 기술을 활용하면 소프트웨어의 신뢰성을 크게 향상시킬 수 있습니다.</p>\n<h1>RSpec Expectations 탐색</h1>\n<p>RSpec의 expectations는 Ruby 웹 어플리케이션을 테스트하는 강력한 도구입니다. 전통적인 어설션과 달리 expectations는 조합성, 자동 부정, 가독성 향상 및 더 유용한 에러 메시지를 제공합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>기대하는 요소</h1>\n<p>기대는 세 가지 주요 부분으로 구성됩니다:</p>\n<ul>\n<li>Subject: 일반적으로 루비 클래스의 인스턴스인 테스트 대상 객체입니다.</li>\n<li>Matcher: 예상되는 동작을 지정하고 통과/실패 논리를 제공하는 객체입니다.</li>\n<li>사용자 정의 실패 메시지(선택 사항): 기대가 실패할 때 추가적인 문맥을 제공하기 위한 사용자 정의 메시지입니다.</li>\n</ul>\n<p>여기 예시가 있습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>주제</h1>\n<p>subject = Course.new(name: \"루비 입문\")</p>\n<h1>매처 및 사용자 정의 실패 메시지를 사용한 예상</h1>\n<p>expect(subject.name).to eq(\"루비 입문\"), \"과정 이름이 일치해야 함\"</p>\n<h1>매처 구성</h1>\n<p>다양한 방법으로 매처를 조합하여 복잡한 동작을 정밀하게 지정할 수 있습니다:</p>\n<ul>\n<li>다른 매처에 매처 전달하기:</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">expect</span>(subject.<span class=\"hljs-property\">lessons</span>).<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">start_with</span>(<span class=\"hljs-title function_\">an_object_having_attributes</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"Ruby Basics\"</span>))\n</code></pre>\n<ol start=\"2\">\n<li>Embedding matchers in Arrays and Hashes:</li>\n</ol>\n<pre><code class=\"hljs language-js\">expected_student = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>,\n  <span class=\"hljs-attr\">enrolled_courses</span>: <span class=\"hljs-title function_\">an_object_having_attributes</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-title function_\">a_string_starting_with</span>(<span class=\"hljs-string\">\"Introduction\"</span>))\n}\n<span class=\"hljs-title function_\">expect</span>(subject.<span class=\"hljs-property\">students</span>).<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">include</span>(expected_student)\n</code></pre>\n<ol start=\"3\">\n<li>Combining matchers with logical operators:</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">expect</span>(subject.<span class=\"hljs-property\">grading_system</span>).<span class=\"hljs-property\">to</span> be_present &#x26; <span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/letter|numeric/</span>)\n</code></pre>\n<h2>전통적인 단언문보다 RSpec의 장점</h2>\n<p>전통적인 단언문과는 달리, RSpec의 기대치는 다음과 같은 장점을 제공합니다:</p>\n<ul>\n<li>개선된 가독성: 구문은 자연어에 더 가깝기 때문에 테스트를 읽고 이해하기 쉽습니다.</li>\n<li>결합성: 매처를 결합하여 더 복잡한 단언문을 만들 수 있으며 명확성을 잃지 않습니다.</li>\n<li>더 나은 오류 메시지: 테스트가 실패할 때 RSpec은 디버깅을 더 쉽게 만드는 자세한 메시지를 제공합니다.</li>\n<li>자동 부정: .not_to 또는 .to_not를 사용하면 부정이 더 직관적이며 테스트의 표현력을 향상시킵니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>생성된 예제 설명</h1>\n<p>Matchers는 자체적으로 설명을 제공하여 RSpec이 예제에 대한 가독성있는 설명을 생성할 수 있게 합니다. 이는 중복을 줄이고 테스트를 미래를 대비하여 더 견고하게 만드는 데 도움이 될 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">RSpec</span>.<span class=\"hljs-property\">describe</span> <span class=\"hljs-title class_\">Course</span>, <span class=\"hljs-string\">\"#enrolled_students\"</span> <span class=\"hljs-keyword\">do</span>\n  subject { <span class=\"hljs-title class_\">Course</span>.<span class=\"hljs-title function_\">new</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Introduction to Ruby\"</span>) }\n\n  it { is_expected.<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">have_attributes</span>(<span class=\"hljs-attr\">enrolled_students</span>: be_empty) }\n  it { should_not <span class=\"hljs-title function_\">have_attributes</span>(<span class=\"hljs-attr\">enrolled_students</span>: <span class=\"hljs-title function_\">include</span>(<span class=\"hljs-title function_\">an_object_having_attributes</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>))) }\nend\n</code></pre>\n<p>출력은 다음과 같이 표시됩니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Course#enrolled_students\nshould have attributes enrolled_students: []\nshould not have attributes enrolled_students: [#&#x3C;name: \"John Doe\">]</p>\n<p>While generated descriptions are convenient, use them judiciously. They can be misleading if your setup code changes, and one-liner specs can sometimes\nbe harder to read and maintain.</p>\n<h1>Exploring RSpec’s Matchers for Your App</h1>\n<p>RSpec offers a wide range of built-in matchers to help you write expressive and robust tests.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>기본 일치자</h1>\n<p>이러한 일치자는 문자열, 숫자 및 부울과 같은 기본 데이터 유형을 처리합니다. 예를 들어, 학생의 이름이 특정 값과 일치하는지 테스트하려면:</p>\n<pre><code class=\"hljs language-js\">student = <span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-title function_\">new</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"John Doe\"</span>)\n<span class=\"hljs-title function_\">expect</span>(student.<span class=\"hljs-property\">name</span>).<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">eq</span>(<span class=\"hljs-string\">\"John Doe\"</span>)\n</code></pre>\n<h1>컬렉션 일치자</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>RSpec은 배열이나 해시와 같은 컬렉션과 함께 작업하는 여러 매처를 제공합니다. 특정 요소가 컬렉션에 포함되어 있는지 확인하려면 include를 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">enrolled_courses = [\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Ruby Basics\"</span>, <span class=\"hljs-attr\">credits</span>: <span class=\"hljs-number\">3</span> },\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Web Development\"</span>, <span class=\"hljs-attr\">credits</span>: <span class=\"hljs-number\">5</span> }\n]\n\n<span class=\"hljs-title function_\">expect</span>(enrolled_courses).<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">include</span>(\n  <span class=\"hljs-title function_\">an_object_having_attributes</span>(<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Ruby Basics\"</span>)\n)\n</code></pre>\n<p>match 매처는 깊게 중첩된 데이터 구조에 유용하며, 배열 요소나 해시 값에 대해 어떤 수준에서든 매처를 대체할 수 있습니다.</p>\n<h1>블록 매처</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>가끔은 코드 블록의 동작을 테스트해야 할 때가 있습니다. 예를 들어, 예외가 발생하는지 확인하거나 메소드가 블록에 제어를 양보하는지 확인하는 것입니다. 이런 시나리오에는 RSpec의 블록 매처들이 유용합니다.</p>\n<pre><code class=\"hljs language-js\">expect { course.<span class=\"hljs-title function_\">enroll</span>(nil) }.<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">raise_error</span>(<span class=\"hljs-title class_\">ArgumentError</span>)\n\nexpect { |block| course.<span class=\"hljs-property\">lessons</span>.<span class=\"hljs-title function_\">each</span>(&#x26;block) }.<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">yield_successive_args</span>(\n  [<span class=\"hljs-string\">\"Lesson 1\"</span>, <span class=\"hljs-number\">1</span>],\n  [<span class=\"hljs-string\">\"Lesson 2\"</span>, <span class=\"hljs-number\">2</span>]\n)\n</code></pre>\n<h1>조합된 매처들</h1>\n<p>RSpec의 장점 중 하나는 매처들을 조합할 수 있다는 것입니다. 이를 통해 복잡한 동작을 정확하게 지정할 수 있습니다. 논리 연산자를 사용하여 매처를 결합하거나, 하나의 매처를 다른 매처로 전달하거나, 매처를 데이터 구조 안에 포함시킬 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">expect</span>(course.<span class=\"hljs-property\">lessons</span>).<span class=\"hljs-property\">to</span> <span class=\"hljs-title function_\">all</span>(\n  <span class=\"hljs-title function_\">have_attributes</span>(<span class=\"hljs-attr\">duration</span>: <span class=\"hljs-title function_\">a_value_between</span>(<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">90</span>))\n    .<span class=\"hljs-title function_\">and</span>(<span class=\"hljs-title function_\">start_with</span>(<span class=\"hljs-string\">\"Lesson\"</span>))\n)\n</code></pre>\n<h1>간단한 설명</h1>\n<p>RSpec expectations은 조합성, 가독성 및 자세한 오류 메시지를 제공합니다. 복잡한 조건을 정확하게 지정하기 위해 matcher composition을 사용하세요.</p>\n<p>기본 데이터 유형의 경우 등가성 및 진실성 matcher를 사용하세요. include, match 및 contain_exactly로 컬렉션을 확인하세요. 예외와 블록 matcher를 사용하여 코드 동작을 테스트하세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>일치자를 중첩하여 배치하거나 데이터 구조에 삽입하여 논리 연산자를 사용하여 작성하세요. 엄격한 동등성보다는 유연한 일치자를 선택하세요. 가독성을 높이기 위해 별칭 및 사용자 정의 메시지를 사용하세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}