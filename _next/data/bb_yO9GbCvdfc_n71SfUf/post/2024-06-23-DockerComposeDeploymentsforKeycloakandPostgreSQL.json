{"pageProps":{"post":{"title":"Keycloak 및 PostgreSQL을 Docker Compose로 배포하는 방법","description":"","date":"2024-06-23 22:47","slug":"2024-06-23-DockerComposeDeploymentsforKeycloakandPostgreSQL","content":"\n# 키클로크란 무엇인가요?\n\n![이미지](/assets/img/2024-06-23-DockerComposeDeploymentsforKeycloakandPostgreSQL_0.png)\n\n## 중앙 집중식 사용자 관리\n\n키클로크를 사용하면 사용자 관리를 한곳에서 중앙 집중화할 수 있어 여러 애플리케이션과 서비스 간에 사용자, 역할 및 권한을 쉽게 관리할 수 있습니다. 사용자 페더레이션을 지원하여 기존 사용자 디렉터리(예: LDAP 또는 Active Directory)와 통합할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단일 로그인(SSO) 및 단일 로그아웃\n\nKeycloak의 가장 중요한 기능 중 하나는 단일 로그인(SSO)을 지원한다는 점입니다. SSO를 통해 사용자는 한 번 로그인하면 각각의 애플리케이션에서 다시 로그인해야 할 필요 없이 여러 애플리케이션에 접근할 수 있습니다. 비슷하게, 단일 로그아웃 기능을 사용하면 사용자는 모든 애플리케이션에서 동시에 로그아웃할 수 있습니다.\n\n## 소셜 로그인\n\nKeycloak은 소셜 로그인 기능을 지원하며, 사용자들이 Google, Facebook, Twitter 등의 소셜 미디어 계정을 사용하여 로그인할 수 있습니다. 이 기능은 등록 및 로그인 절차를 간소화하여 사용자 경험을 향상시킵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 다중 인증 (MFA)\n\n보안을 강화하기 위해 Keycloak은 다중 인증(MFA)을 지원합니다. 이는 사용자가 응용 프로그램에 액세스하려면 두 개 이상의 인증 요소를 제공해야 하도록하여 추가 보안 계층을 추가합니다.\n\n## OpenID Connect (OIDC) 및 SAML\n\nKeycloak은 OpenID Connect (OIDC) 및 SAML 2.0과 같은 현대 프로토콜을 구현하여 인증 및 승인을 처리하여 다양한 응용 프로그램과 호환성이 있고 다재다능합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 사용자화 가능한 테마\n\nKeycloak에서 제공하는 로그인 페이지의 외관과 느낌은 귀하의 브랜딩 요구 사항에 따라 사용자화할 수 있습니다. Keycloak은 테마 사용자화를 허용하여 로그인, 등록 및 계정 관리 페이지의 외관을 변경할 수 있습니다.\n\n## 관리 콘솔\n\nKeycloak은 렘(Realms), 사용자, 역할 및 권한을 관리하기 위한 쉽게 사용할 수 있는 웹 기반 관리 콘솔이 제공됩니다. Keycloak에서 렘은 사용자, 자격 증명, 역할 및 그룹을 관리하는 공간입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 보안\n\nKeycloak은 SSL/TLS, 비밀번호 정책, 브루트 포스 탐지 등을 포함한 견고한 보안 기능을 기본 제공합니다. 또한 사용자 자격 증명을 안전하게 저장할 수 있습니다.\n\n## API 액세스 관리\n\nKeycloak을 사용하면 토큰(JWT 토큰 또는 SAML 어설션)을 사용하여 애플리케이션 API를 안전하게 보호할 수 있습니다. 보호해야 하는 리소스 및 해당 리소스에 액세스 할 수 있는 역할 또는 클라이언트를 쉽게 정의할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 확장성 및 고가용성\n\nKeycloak은 확장 가능하게 설계되어 있으며 고가용성 구성으로 배포할 수 있어 사용자와 애플리케이션에 항상 인증 서비스를 제공할 수 있습니다.\n\n# 도커로 설정하기\n\ndocker-compose.yml 파일\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\nversion: \"3.7\"\n\nservices:\n  postgres:\n    image: postgres:16.2\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    networks:\n      - keycloak_network\n\n  keycloak:\n    image: quay.io/keycloak/keycloak:23.0.6\n    command: start\n    environment:\n      KC_HOSTNAME: localhost\n      KC_HOSTNAME_PORT: 8080\n      KC_HOSTNAME_STRICT_BACKCHANNEL: false\n      KC_HTTP_ENABLED: true\n      KC_HOSTNAME_STRICT_HTTPS: false\n      KC_HEALTH_ENABLED: true\n      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}\n      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}\n      KC_DB: postgres\n      KC_DB_URL: jdbc:postgresql://postgres/${POSTGRES_DB}\n      KC_DB_USERNAME: ${POSTGRES_USER}\n      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}\n    ports:\n      - 8080:8080\n    restart: always\n    depends_on:\n      - postgres\n    networks:\n      - keycloak_network\n\nvolumes:\n  postgres_data:\n    driver: local\n\nnetworks:\n  keycloak_network:\n    driver: bridge\n```\n\n.env file\n\n```yaml\nPOSTGRES_DB=keycloak_db\nPOSTGRES_USER=keycloak_db_user\nPOSTGRES_PASSWORD=keycloak_db_user_password\nKEYCLOAK_ADMIN=admin\nKEYCLOAK_ADMIN_PASSWORD=password\n```\n\n# Services\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPostgreSQL Service (postgres):\n\n- **이미지**: PostgreSQL 서버를 실행하기 위해 Docker 이미지 postgres:16.2를 사용합니다.\n- **볼륨**: 데이터베이스 데이터의 지속적인 저장을 위해 컨테이너 내부의 /var/lib/postgresql/data에 대한 postgres_data라는 볼륨을 매핑합니다.\n- **환경 변수**: 환경 변수로 지정된 이름(POSTGRES_DB), 사용자(POSTGRES_USER), 비밀번호(POSTGRES_PASSWORD)로 데이터베이스를 구성합니다.\n- **네트워크**: Keycloak 서비스와의 통신을 위해 keycloak_network라는 사용자 정의 네트워크에 연결합니다.\n\nKeycloak Service (keycloak):\n\n- **이미지**: Keycloak 서버를 실행하기 위해 quay.io/keycloak/keycloak:23.0.6을 활용합니다.\n- **명령어**: Keycloak을 실행하기 위해 start를 지정합니다.\n- **환경 변수**: 호스트명(KC_HOSTNAME), 포트(KC_HOSTNAME_PORT), HTTP 구성(KC_HTTP_ENABLED, KC_HOSTNAME_STRICT_HTTPS), 헬스 체크(KC_HEALTH_ENABLED), 관리자 자격 증명(KEYCLOAK_ADMIN, KEYCLOAK_ADMIN_PASSWORD), 데이터베이스 연결 세부 정보(KC_DB, KC_DB_URL, KC_DB_USERNAME, KC_DB_PASSWORD) 등 다양한 설정을 구성합니다.\n- **포트**: 호스트의 포트 8080을 웹 접근을 위해 Keycloak 컨테이너의 포트 8080에 매핑하여 노출합니다.\n- **재시작 정책**: 수동으로 중지할 때까지 항상 다시 시작되도록 구성합니다.\n- **의존성**: Postgres 서비스에 종속성을 선언하여 먼저 시작되도록 합니다.\n- **네트워크**: keycloak_network에도 연결됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 볼륨\n\n- postgres_data: 기본 로컬 스토리지 드라이버를 사용하여 컨테이너를 다시 시작할 때도 지속적으로 PostgreSQL 데이터를 저장하는 명명된 볼륨입니다.\n\n# 네트워크\n\n- keycloak_network: 브릿지 드라이버를 사용하는 사용자 정의 네트워크로, Keycloak과 PostgreSQL 컨테이너 간의 통신을 원활하게 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 환경 변수\n\n데이터베이스 구성 (POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD) 및 Keycloak 관리자 자격 증명 (KEYCLOAK_ADMIN, KEYCLOAK_ADMIN_PASSWORD)의 값을 지정하는 변수입니다. 서비스가 안전하게 통신하고 작동하는 데 필수적입니다.\n\n# 요약\n\n이 Docker Compose 파일은 인증 시스템을 제공하는 Keycloak와 PostgreSQL을 설정합니다. 데이터 저장을 위한 인증 시스템을 제공합니다. 액세스를 위한 환경 변수 및 서비스 구성을 지정하며 서비스 간 통신을 위한 사용자 지정 네트워크가 포함되어 있습니다. 개발에 이상적이며 응용 프로그램 인증 관리를 위한 기반을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 소스 코드\n\n전체 코드 및 더 많은 예제는 GitHub 저장소를 확인하세요: ForgeContainer\n","ogImage":{"url":"/assets/img/2024-06-23-DockerComposeDeploymentsforKeycloakandPostgreSQL_0.png"},"coverImage":"/assets/img/2024-06-23-DockerComposeDeploymentsforKeycloakandPostgreSQL_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>키클로크란 무엇인가요?</h1>\n<p><img src=\"/assets/img/2024-06-23-DockerComposeDeploymentsforKeycloakandPostgreSQL_0.png\" alt=\"이미지\"></p>\n<h2>중앙 집중식 사용자 관리</h2>\n<p>키클로크를 사용하면 사용자 관리를 한곳에서 중앙 집중화할 수 있어 여러 애플리케이션과 서비스 간에 사용자, 역할 및 권한을 쉽게 관리할 수 있습니다. 사용자 페더레이션을 지원하여 기존 사용자 디렉터리(예: LDAP 또는 Active Directory)와 통합할 수 있습니다.</p>\n<p></p>\n<h2>단일 로그인(SSO) 및 단일 로그아웃</h2>\n<p>Keycloak의 가장 중요한 기능 중 하나는 단일 로그인(SSO)을 지원한다는 점입니다. SSO를 통해 사용자는 한 번 로그인하면 각각의 애플리케이션에서 다시 로그인해야 할 필요 없이 여러 애플리케이션에 접근할 수 있습니다. 비슷하게, 단일 로그아웃 기능을 사용하면 사용자는 모든 애플리케이션에서 동시에 로그아웃할 수 있습니다.</p>\n<h2>소셜 로그인</h2>\n<p>Keycloak은 소셜 로그인 기능을 지원하며, 사용자들이 Google, Facebook, Twitter 등의 소셜 미디어 계정을 사용하여 로그인할 수 있습니다. 이 기능은 등록 및 로그인 절차를 간소화하여 사용자 경험을 향상시킵니다.</p>\n<p></p>\n<h2>다중 인증 (MFA)</h2>\n<p>보안을 강화하기 위해 Keycloak은 다중 인증(MFA)을 지원합니다. 이는 사용자가 응용 프로그램에 액세스하려면 두 개 이상의 인증 요소를 제공해야 하도록하여 추가 보안 계층을 추가합니다.</p>\n<h2>OpenID Connect (OIDC) 및 SAML</h2>\n<p>Keycloak은 OpenID Connect (OIDC) 및 SAML 2.0과 같은 현대 프로토콜을 구현하여 인증 및 승인을 처리하여 다양한 응용 프로그램과 호환성이 있고 다재다능합니다.</p>\n<p></p>\n<h2>사용자화 가능한 테마</h2>\n<p>Keycloak에서 제공하는 로그인 페이지의 외관과 느낌은 귀하의 브랜딩 요구 사항에 따라 사용자화할 수 있습니다. Keycloak은 테마 사용자화를 허용하여 로그인, 등록 및 계정 관리 페이지의 외관을 변경할 수 있습니다.</p>\n<h2>관리 콘솔</h2>\n<p>Keycloak은 렘(Realms), 사용자, 역할 및 권한을 관리하기 위한 쉽게 사용할 수 있는 웹 기반 관리 콘솔이 제공됩니다. Keycloak에서 렘은 사용자, 자격 증명, 역할 및 그룹을 관리하는 공간입니다.</p>\n<p></p>\n<h2>보안</h2>\n<p>Keycloak은 SSL/TLS, 비밀번호 정책, 브루트 포스 탐지 등을 포함한 견고한 보안 기능을 기본 제공합니다. 또한 사용자 자격 증명을 안전하게 저장할 수 있습니다.</p>\n<h2>API 액세스 관리</h2>\n<p>Keycloak을 사용하면 토큰(JWT 토큰 또는 SAML 어설션)을 사용하여 애플리케이션 API를 안전하게 보호할 수 있습니다. 보호해야 하는 리소스 및 해당 리소스에 액세스 할 수 있는 역할 또는 클라이언트를 쉽게 정의할 수 있습니다.</p>\n<p></p>\n<h2>확장성 및 고가용성</h2>\n<p>Keycloak은 확장 가능하게 설계되어 있으며 고가용성 구성으로 배포할 수 있어 사용자와 애플리케이션에 항상 인증 서비스를 제공할 수 있습니다.</p>\n<h1>도커로 설정하기</h1>\n<p>docker-compose.yml 파일</p>\n<p></p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3.7\"</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">postgres:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">postgres:16.2</span>\n    <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">postgres_data:/var/lib/postgresql/data</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-attr\">POSTGRES_DB:</span> <span class=\"hljs-string\">${POSTGRES_DB}</span>\n      <span class=\"hljs-attr\">POSTGRES_USER:</span> <span class=\"hljs-string\">${POSTGRES_USER}</span>\n      <span class=\"hljs-attr\">POSTGRES_PASSWORD:</span> <span class=\"hljs-string\">${POSTGRES_PASSWORD}</span>\n    <span class=\"hljs-attr\">networks:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">keycloak_network</span>\n\n  <span class=\"hljs-attr\">keycloak:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/keycloak/keycloak:23.0.6</span>\n    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">start</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-attr\">KC_HOSTNAME:</span> <span class=\"hljs-string\">localhost</span>\n      <span class=\"hljs-attr\">KC_HOSTNAME_PORT:</span> <span class=\"hljs-number\">8080</span>\n      <span class=\"hljs-attr\">KC_HOSTNAME_STRICT_BACKCHANNEL:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">KC_HTTP_ENABLED:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">KC_HOSTNAME_STRICT_HTTPS:</span> <span class=\"hljs-literal\">false</span>\n      <span class=\"hljs-attr\">KC_HEALTH_ENABLED:</span> <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-attr\">KEYCLOAK_ADMIN:</span> <span class=\"hljs-string\">${KEYCLOAK_ADMIN}</span>\n      <span class=\"hljs-attr\">KEYCLOAK_ADMIN_PASSWORD:</span> <span class=\"hljs-string\">${KEYCLOAK_ADMIN_PASSWORD}</span>\n      <span class=\"hljs-attr\">KC_DB:</span> <span class=\"hljs-string\">postgres</span>\n      <span class=\"hljs-attr\">KC_DB_URL:</span> <span class=\"hljs-string\">jdbc:postgresql://postgres/${POSTGRES_DB}</span>\n      <span class=\"hljs-attr\">KC_DB_USERNAME:</span> <span class=\"hljs-string\">${POSTGRES_USER}</span>\n      <span class=\"hljs-attr\">KC_DB_PASSWORD:</span> <span class=\"hljs-string\">${POSTGRES_PASSWORD}</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">8080</span><span class=\"hljs-string\">:8080</span>\n    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-attr\">depends_on:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">postgres</span>\n    <span class=\"hljs-attr\">networks:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">keycloak_network</span>\n\n<span class=\"hljs-attr\">volumes:</span>\n  <span class=\"hljs-attr\">postgres_data:</span>\n    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">local</span>\n\n<span class=\"hljs-attr\">networks:</span>\n  <span class=\"hljs-attr\">keycloak_network:</span>\n    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">bridge</span>\n</code></pre>\n<p>.env file</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">POSTGRES_DB=keycloak_db</span>\n<span class=\"hljs-string\">POSTGRES_USER=keycloak_db_user</span>\n<span class=\"hljs-string\">POSTGRES_PASSWORD=keycloak_db_user_password</span>\n<span class=\"hljs-string\">KEYCLOAK_ADMIN=admin</span>\n<span class=\"hljs-string\">KEYCLOAK_ADMIN_PASSWORD=password</span>\n</code></pre>\n<h1>Services</h1>\n<p></p>\n<p>PostgreSQL Service (postgres):</p>\n<ul>\n<li><strong>이미지</strong>: PostgreSQL 서버를 실행하기 위해 Docker 이미지 postgres:16.2를 사용합니다.</li>\n<li><strong>볼륨</strong>: 데이터베이스 데이터의 지속적인 저장을 위해 컨테이너 내부의 /var/lib/postgresql/data에 대한 postgres_data라는 볼륨을 매핑합니다.</li>\n<li><strong>환경 변수</strong>: 환경 변수로 지정된 이름(POSTGRES_DB), 사용자(POSTGRES_USER), 비밀번호(POSTGRES_PASSWORD)로 데이터베이스를 구성합니다.</li>\n<li><strong>네트워크</strong>: Keycloak 서비스와의 통신을 위해 keycloak_network라는 사용자 정의 네트워크에 연결합니다.</li>\n</ul>\n<p>Keycloak Service (keycloak):</p>\n<ul>\n<li><strong>이미지</strong>: Keycloak 서버를 실행하기 위해 quay.io/keycloak/keycloak:23.0.6을 활용합니다.</li>\n<li><strong>명령어</strong>: Keycloak을 실행하기 위해 start를 지정합니다.</li>\n<li><strong>환경 변수</strong>: 호스트명(KC_HOSTNAME), 포트(KC_HOSTNAME_PORT), HTTP 구성(KC_HTTP_ENABLED, KC_HOSTNAME_STRICT_HTTPS), 헬스 체크(KC_HEALTH_ENABLED), 관리자 자격 증명(KEYCLOAK_ADMIN, KEYCLOAK_ADMIN_PASSWORD), 데이터베이스 연결 세부 정보(KC_DB, KC_DB_URL, KC_DB_USERNAME, KC_DB_PASSWORD) 등 다양한 설정을 구성합니다.</li>\n<li><strong>포트</strong>: 호스트의 포트 8080을 웹 접근을 위해 Keycloak 컨테이너의 포트 8080에 매핑하여 노출합니다.</li>\n<li><strong>재시작 정책</strong>: 수동으로 중지할 때까지 항상 다시 시작되도록 구성합니다.</li>\n<li><strong>의존성</strong>: Postgres 서비스에 종속성을 선언하여 먼저 시작되도록 합니다.</li>\n<li><strong>네트워크</strong>: keycloak_network에도 연결됩니다.</li>\n</ul>\n<p></p>\n<h1>볼륨</h1>\n<ul>\n<li>postgres_data: 기본 로컬 스토리지 드라이버를 사용하여 컨테이너를 다시 시작할 때도 지속적으로 PostgreSQL 데이터를 저장하는 명명된 볼륨입니다.</li>\n</ul>\n<h1>네트워크</h1>\n<ul>\n<li>keycloak_network: 브릿지 드라이버를 사용하는 사용자 정의 네트워크로, Keycloak과 PostgreSQL 컨테이너 간의 통신을 원활하게 합니다.</li>\n</ul>\n<p></p>\n<h1>환경 변수</h1>\n<p>데이터베이스 구성 (POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD) 및 Keycloak 관리자 자격 증명 (KEYCLOAK_ADMIN, KEYCLOAK_ADMIN_PASSWORD)의 값을 지정하는 변수입니다. 서비스가 안전하게 통신하고 작동하는 데 필수적입니다.</p>\n<h1>요약</h1>\n<p>이 Docker Compose 파일은 인증 시스템을 제공하는 Keycloak와 PostgreSQL을 설정합니다. 데이터 저장을 위한 인증 시스템을 제공합니다. 액세스를 위한 환경 변수 및 서비스 구성을 지정하며 서비스 간 통신을 위한 사용자 지정 네트워크가 포함되어 있습니다. 개발에 이상적이며 응용 프로그램 인증 관리를 위한 기반을 제공합니다.</p>\n<p></p>\n<h1>소스 코드</h1>\n<p>전체 코드 및 더 많은 예제는 GitHub 저장소를 확인하세요: ForgeContainer</p>\n</body>\n</html>\n"},"__N_SSG":true}