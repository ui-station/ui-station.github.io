{"pageProps":{"post":{"title":"젯팩 콤포즈로 귀여운 3D 라디오 버튼을 만드는 방법","description":"","date":"2024-06-19 10:35","slug":"2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose","content":"\n환영합니다 👋\n\n이 글에서는 젯팩 컴포즈로 귀여운 3D 라디오 버튼을 만들어, 5분만에 앱의 외관을 개선해볼 거에요.\n\n코드를 살펴봐요! 🔎\n\n![이미지](/assets/img/2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 상수 정의\n\n나중에 사용할 상수를 정의하여 여정을 시작해보겠습니다.\n\n```js\n// 라디오 버튼 애니메이션 지속 시간\nprivate const val RadioAnimationDuration = 100\n\n// 그림자 효과에 대한 오프셋 및 흐림 반경\nprivate val RadioShadowOffset = 1.dp\nprivate val RadioShadowBlur = 2.dp\n\n// 그림자 및 빛효과에 대한 색상\nprivate val RadioShadowColor = Color.Black.copy(0.54f)\nprivate val RadioGlareColor = Color.White.copy(0.64f)\n\n// 라디오 버튼 및 그의 점에 대한 크기 상수\nprivate val RadioButtonDotSize = 12.dp\nprivate val RadioStrokeWidth = 3.dp\nprivate val RadioButtonSize = 22.dp\n```\n\n# 다양한 상태를 위한 색상 정의\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 단계는 라디오 버튼이 다양한 상태(선택됨, 선택되지 않음, 활성화됨, 비활성화됨)에서 사용하는 색상을 정의하는 것입니다. 이러한 색상을 관리하는 ConvexRadioButtonColors 클래스를 만들 것입니다.\n\n```kotlin\nclass ConvexRadioButtonColors(\n    private val selectedColor: Color,\n    private val unselectedColor: Color,\n    private val disabledSelectedColor: Color,\n    private val disabledUnselectedColor: Color\n) {\n    @Composable\n    fun radioColorAsState(enabled: Boolean, selected: Boolean): State<Color> {\n        // 현재 상태를 기반으로 대상 색상을 결정합니다\n        val target = when {\n            enabled && selected -> selectedColor\n            enabled && !selected -> unselectedColor\n            !enabled && selected -> disabledSelectedColor\n            else -> disabledUnselectedColor\n        }\n        // 활성화됐을 때 색상을 애니메이션화하고, 그렇지 않으면 업데이트된 상태를 직접 반환합니다\n        return if (enabled) {\n            animateColorAsState(target, tween(durationMillis = RadioAnimationDuration))\n        } else {\n            rememberUpdatedState(target)\n        }\n    }\n}\n```\n\n이 클래스는 라디오 버튼의 다양한 상태를 나타내는 네 가지 색상을 매개변수로 사용하며, 현재 라디오 버튼 상태에 기반하여 적절한 색상을 반환하는 radioColorAsState 컴포저블 함수를 제공합니다.\n\n# 기본 색상 제공하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로, 라디오 버튼의 기본 색상 값을 제공하는 ConvexRadioButtonDefaults 객체를 생성할 것입니다.\n\n```js\nobject ConvexRadioButtonDefaults {\n    @Composable\n    fun colors(\n        selectedColor: Color = MaterialTheme.colorScheme.primary,\n        unselectedColor: Color = MaterialTheme.colorScheme.onSurfaceVariant,\n        disabledSelectedColor: Color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = DisabledAlpha),\n        disabledUnselectedColor: Color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = DisabledAlpha)\n    ): ConvexRadioButtonColors = ConvexRadioButtonColors(selectedColor, unselectedColor, disabledSelectedColor, disabledUnselectedColor)\n}\n```\n\n이 객체는 기본 또는 지정된 색상으로 ConvexRadioButtonColors 인스턴스를 반환하는 Composable 함수 colors를 제공합니다. 이러한 기본값은 현재 material theme의 색상 체계를 기반으로 합니다.\n\n# Convex Radio Button 정의하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 주요 ConvexRadioButton composable 함수를 선언하고 그 매개변수들을 살펴볼 수 있습니다.\n\n```js\n@Composable\nfun ConvexRadioButton(\n    selected: Boolean,\n    modifier: Modifier = Modifier,\n    enabled: Boolean = true,\n    colors: ConvexRadioButtonColors = ConvexRadioButtonDefaults.colors(),\n    interactionSource: MutableInteractionSource = remember { MutableInteractionSource() },\n    onClick: () -> Unit\n)\n```\n\n💎 selected ➜ 라디오 버튼이 선택되었는지 여부를 나타냅니다.\n\n💎 modifier ➜ 이 라디오 버튼에 적용할 Modifier입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n💎 enabled ➜ 라디오 버튼이 사용자 상호 작용을 위해 활성화되는지 여부를 나타냅니다.\n\n💎 colors ➜ 라디오 버튼의 다른 상태에 대한 색상을 정의하는 ConvexRadioButtonColors의 인스턴스입니다.\n\n💎 interactionSource ➜ 사용자 상호 작용 이벤트를 처리하는 상호 작용 소스입니다.\n\n💎 onClick ➜ 라디오 버튼이 클릭될 때 호출되는 람다 함수입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Convex Radio Button 구현\n\n우리는 가장 흥미로운 부분, Convex 라디오 버튼을 만드는 과정에 진입하고 있어요.\n\n## 준비\n\n이 기능을 구현하기 위해 innerShadow 및 convexBorder 수정자를 활용해야 합니다. 자세한 설명은 아래 제공된 관련 기사를 참조하거나👇 또는 InnerShadow Gist, ConvexBorder Gist에서 코드를 가져오세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 구현\n\n자, 코드로 들어가 봅시다 👀\n\n```js\n@Composable\nfun ConvexRadioButton(\n    /* 매개변수... */\n) {\n    // 선택된 상태에 따라 도트의 크기를 애니메이션화합니다\n    val dotSize = animateDpAsState(\n        targetValue = if (selected) RadioButtonDotSize else 0.dp,\n        animationSpec = tween(durationMillis = RadioAnimationDuration)\n    )\n    // 현재 상태에 맞는 색상을 가져옵니다\n    val radioColor = colors.radioColorAsState(enabled, selected)\n\n    // 선택 및 클릭 상호작용을 처리하는 Modifier\n    val selectableModifier = Modifier.selectable(\n        selected = selected,\n        onClick = onClick,\n        enabled = enabled,\n        role = Role.RadioButton,\n        interactionSource = interactionSource,\n        indication = rememberRipple(bounded = false, radius = RadioButtonSize)\n    )\n\n    // 오목한 테두리를 적용하는 Modifier\n    // 이것은 외부 원 또는 선택되지 않은 상태를 나타냅니다\n    val convexBorderModifier = Modifier.convexBorder(\n        color = radioColor.value,\n        shape = CircleShape,\n        strokeWidth = RadioStrokeWidth,\n        convexStyle = ConvexStyle(RadioShadowBlur, RadioShadowOffset, RadioGlareColor, RadioShadowColor)\n    )\n\n    // 라디오 버튼의 주요 컨테이너\n    Box(\n        modifier\n            .minimumInteractiveComponentSize() // 최소 터치 대상 크기를 보장합니다\n            .then(selectableModifier) // 선택 가능한 동작 추가\n            .size(RadioButtonSize) // 라디오 버튼의 크기를 설정합니다\n            .then(convexBorderModifier), // 오목한 테두리 적용\n        contentAlignment = Alignment.Center\n    ) {\n        // 크기가 0 이상인 경우 내부 점을 조건부로 표시합니다\n        if (dotSize.value > 0.dp) {\n            Box(\n                modifier = Modifier\n                    .size(dotSize.value)\n                    .background(radioColor.value, CircleShape)\n                    // 두 개의 내부 그림자를 활용해 오목한 효과를 생성합니다\n                    .innerShadow(CircleShape, RadioShadowColor, RadioShadowBlur, -RadioShadowOffset, -RadioShadowOffset)\n                    .innerShadow(CircleShape, RadioGlareColor, RadioShadowBlur, RadioShadowOffset, RadioShadowOffset)\n            )\n        }\n    }\n}\n```\n\n축하해요🥳! 성공적으로 만들어냈어요👏. 전체 코드 구현은 GitHub Gist에서 확인할 수 있습니다🧑‍💻. 이제 어떻게 활용할 수 있는지 살펴보도록 하죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 광고\n\n외국어를 배우고 있고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면, 여러분의 학습을 쉽고 편리하게 만들어 줄 이 어플을 꼭 확인해 보시기를 강력히 추천합니다!\n\n<img src=\"/assets/img/2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose_1.png\" />\n\n# 실용적인 예시 💁\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n알겠어요, 결제 옵션을 선택하기 위한 간단한 예제를 만들어 봅시다.\n\n먼저, 필요한 옵션들을 나타내기 위해 enum 클래스 PaymentOption을 만들어주세요:\n\n```js\nenum class PaymentOption(val displayName: String) {\n    CreditCard(\"신용 카드\"),\n    PayPal(\"PayPal\"),\n    BankTransfer(\"은행 송금\"),\n}\n```\n\n다음으로, 현재 선택된 옵션을 저장하기 위한 상태 변수가 필요합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nvar selectedOption by remember { mutableStateOf(PaymentOption.CreditCard) }\n```\n\n마지막으로, 모든 가능한 옵션을 열에 넣어주세요:\n\n```js\nColumn {\n    PaymentOption.entries.forEach { option ->\n        Row(verticalAlignment = Alignment.CenterVertically) {\n            ConvexRadioButton(\n                selected = (option == selectedOption),\n                onClick = { selectedOption = option }\n            )\n            Text(option.displayName)\n        }\n    }\n}\n```\n\n## 결과:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image](https://miro.medium.com/v2/resize:fit:826/1*5IdpszpbEX4LHPABjORO-g.gif)\n\nYou might also like 👇\n\nThank you for reading this article! ❤️ I hope you’ve found it enjoyable and valuable. Feel free to show your appreciation by hitting the clap 👏 if you liked it and follow Kappdev for more exciting articles 😊\n\nHappy coding!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose_2.png)\n","ogImage":{"url":"/assets/img/2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose_0.png"},"coverImage":"/assets/img/2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>환영합니다 👋</p>\n<p>이 글에서는 젯팩 컴포즈로 귀여운 3D 라디오 버튼을 만들어, 5분만에 앱의 외관을 개선해볼 거에요.</p>\n<p>코드를 살펴봐요! 🔎</p>\n<p><img src=\"/assets/img/2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose_0.png\" alt=\"이미지\"></p>\n<p></p>\n<h1>상수 정의</h1>\n<p>나중에 사용할 상수를 정의하여 여정을 시작해보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 라디오 버튼 애니메이션 지속 시간</span>\nprivate <span class=\"hljs-keyword\">const</span> val <span class=\"hljs-title class_\">RadioAnimationDuration</span> = <span class=\"hljs-number\">100</span>\n\n<span class=\"hljs-comment\">// 그림자 효과에 대한 오프셋 및 흐림 반경</span>\nprivate val <span class=\"hljs-title class_\">RadioShadowOffset</span> = <span class=\"hljs-number\">1.</span>dp\nprivate val <span class=\"hljs-title class_\">RadioShadowBlur</span> = <span class=\"hljs-number\">2.</span>dp\n\n<span class=\"hljs-comment\">// 그림자 및 빛효과에 대한 색상</span>\nprivate val <span class=\"hljs-title class_\">RadioShadowColor</span> = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Black</span>.<span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-number\">0.</span>54f)\nprivate val <span class=\"hljs-title class_\">RadioGlareColor</span> = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">White</span>.<span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-number\">0.</span>64f)\n\n<span class=\"hljs-comment\">// 라디오 버튼 및 그의 점에 대한 크기 상수</span>\nprivate val <span class=\"hljs-title class_\">RadioButtonDotSize</span> = <span class=\"hljs-number\">12.</span>dp\nprivate val <span class=\"hljs-title class_\">RadioStrokeWidth</span> = <span class=\"hljs-number\">3.</span>dp\nprivate val <span class=\"hljs-title class_\">RadioButtonSize</span> = <span class=\"hljs-number\">22.</span>dp\n</code></pre>\n<h1>다양한 상태를 위한 색상 정의</h1>\n<p></p>\n<p>다음 단계는 라디오 버튼이 다양한 상태(선택됨, 선택되지 않음, 활성화됨, 비활성화됨)에서 사용하는 색상을 정의하는 것입니다. 이러한 색상을 관리하는 ConvexRadioButtonColors 클래스를 만들 것입니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConvexRadioButtonColors</span>(\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> selectedColor: Color,\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> unselectedColor: Color,\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> disabledSelectedColor: Color,\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> disabledUnselectedColor: Color\n) {\n    <span class=\"hljs-meta\">@Composable</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">radioColorAsState</span><span class=\"hljs-params\">(enabled: <span class=\"hljs-type\">Boolean</span>, selected: <span class=\"hljs-type\">Boolean</span>)</span></span>: State&#x3C;Color> {\n        <span class=\"hljs-comment\">// 현재 상태를 기반으로 대상 색상을 결정합니다</span>\n        <span class=\"hljs-keyword\">val</span> target = <span class=\"hljs-keyword\">when</span> {\n            enabled &#x26;&#x26; selected -> selectedColor\n            enabled &#x26;&#x26; !selected -> unselectedColor\n            !enabled &#x26;&#x26; selected -> disabledSelectedColor\n            <span class=\"hljs-keyword\">else</span> -> disabledUnselectedColor\n        }\n        <span class=\"hljs-comment\">// 활성화됐을 때 색상을 애니메이션화하고, 그렇지 않으면 업데이트된 상태를 직접 반환합니다</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> (enabled) {\n            animateColorAsState(target, tween(durationMillis = RadioAnimationDuration))\n        } <span class=\"hljs-keyword\">else</span> {\n            rememberUpdatedState(target)\n        }\n    }\n}\n</code></pre>\n<p>이 클래스는 라디오 버튼의 다양한 상태를 나타내는 네 가지 색상을 매개변수로 사용하며, 현재 라디오 버튼 상태에 기반하여 적절한 색상을 반환하는 radioColorAsState 컴포저블 함수를 제공합니다.</p>\n<h1>기본 색상 제공하기</h1>\n<p></p>\n<p>다음으로, 라디오 버튼의 기본 색상 값을 제공하는 ConvexRadioButtonDefaults 객체를 생성할 것입니다.</p>\n<pre><code class=\"hljs language-js\">object <span class=\"hljs-title class_\">ConvexRadioButtonDefaults</span> {\n    @<span class=\"hljs-title class_\">Composable</span>\n    fun <span class=\"hljs-title function_\">colors</span>(\n        <span class=\"hljs-attr\">selectedColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">primary</span>,\n        <span class=\"hljs-attr\">unselectedColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">onSurfaceVariant</span>,\n        <span class=\"hljs-attr\">disabledSelectedColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">onSurfaceVariant</span>.<span class=\"hljs-title function_\">copy</span>(alpha = <span class=\"hljs-title class_\">DisabledAlpha</span>),\n        <span class=\"hljs-attr\">disabledUnselectedColor</span>: <span class=\"hljs-title class_\">Color</span> = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">onSurfaceVariant</span>.<span class=\"hljs-title function_\">copy</span>(alpha = <span class=\"hljs-title class_\">DisabledAlpha</span>)\n    ): <span class=\"hljs-title class_\">ConvexRadioButtonColors</span> = <span class=\"hljs-title class_\">ConvexRadioButtonColors</span>(selectedColor, unselectedColor, disabledSelectedColor, disabledUnselectedColor)\n}\n</code></pre>\n<p>이 객체는 기본 또는 지정된 색상으로 ConvexRadioButtonColors 인스턴스를 반환하는 Composable 함수 colors를 제공합니다. 이러한 기본값은 현재 material theme의 색상 체계를 기반으로 합니다.</p>\n<h1>Convex Radio Button 정의하기</h1>\n<p></p>\n<p>이제 주요 ConvexRadioButton composable 함수를 선언하고 그 매개변수들을 살펴볼 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">ConvexRadioButton</span>(\n    <span class=\"hljs-attr\">selected</span>: <span class=\"hljs-title class_\">Boolean</span>,\n    <span class=\"hljs-attr\">modifier</span>: <span class=\"hljs-title class_\">Modifier</span> = <span class=\"hljs-title class_\">Modifier</span>,\n    <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">colors</span>: <span class=\"hljs-title class_\">ConvexRadioButtonColors</span> = <span class=\"hljs-title class_\">ConvexRadioButtonDefaults</span>.<span class=\"hljs-title function_\">colors</span>(),\n    <span class=\"hljs-attr\">interactionSource</span>: <span class=\"hljs-title class_\">MutableInteractionSource</span> = remember { <span class=\"hljs-title class_\">MutableInteractionSource</span>() },\n    <span class=\"hljs-attr\">onClick</span>: () -> <span class=\"hljs-title class_\">Unit</span>\n)\n</code></pre>\n<p>💎 selected ➜ 라디오 버튼이 선택되었는지 여부를 나타냅니다.</p>\n<p>💎 modifier ➜ 이 라디오 버튼에 적용할 Modifier입니다.</p>\n<p></p>\n<p>💎 enabled ➜ 라디오 버튼이 사용자 상호 작용을 위해 활성화되는지 여부를 나타냅니다.</p>\n<p>💎 colors ➜ 라디오 버튼의 다른 상태에 대한 색상을 정의하는 ConvexRadioButtonColors의 인스턴스입니다.</p>\n<p>💎 interactionSource ➜ 사용자 상호 작용 이벤트를 처리하는 상호 작용 소스입니다.</p>\n<p>💎 onClick ➜ 라디오 버튼이 클릭될 때 호출되는 람다 함수입니다.</p>\n<p></p>\n<h1>Convex Radio Button 구현</h1>\n<p>우리는 가장 흥미로운 부분, Convex 라디오 버튼을 만드는 과정에 진입하고 있어요.</p>\n<h2>준비</h2>\n<p>이 기능을 구현하기 위해 innerShadow 및 convexBorder 수정자를 활용해야 합니다. 자세한 설명은 아래 제공된 관련 기사를 참조하거나👇 또는 InnerShadow Gist, ConvexBorder Gist에서 코드를 가져오세요.</p>\n<p></p>\n<h2>구현</h2>\n<p>자, 코드로 들어가 봅시다 👀</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">ConvexRadioButton</span>(\n    <span class=\"hljs-comment\">/* 매개변수... */</span>\n) {\n    <span class=\"hljs-comment\">// 선택된 상태에 따라 도트의 크기를 애니메이션화합니다</span>\n    val dotSize = <span class=\"hljs-title function_\">animateDpAsState</span>(\n        targetValue = <span class=\"hljs-keyword\">if</span> (selected) <span class=\"hljs-title class_\">RadioButtonDotSize</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0.</span>dp,\n        animationSpec = <span class=\"hljs-title function_\">tween</span>(durationMillis = <span class=\"hljs-title class_\">RadioAnimationDuration</span>)\n    )\n    <span class=\"hljs-comment\">// 현재 상태에 맞는 색상을 가져옵니다</span>\n    val radioColor = colors.<span class=\"hljs-title function_\">radioColorAsState</span>(enabled, selected)\n\n    <span class=\"hljs-comment\">// 선택 및 클릭 상호작용을 처리하는 Modifier</span>\n    val selectableModifier = <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">selectable</span>(\n        selected = selected,\n        onClick = onClick,\n        enabled = enabled,\n        role = <span class=\"hljs-title class_\">Role</span>.<span class=\"hljs-property\">RadioButton</span>,\n        interactionSource = interactionSource,\n        indication = <span class=\"hljs-title function_\">rememberRipple</span>(bounded = <span class=\"hljs-literal\">false</span>, radius = <span class=\"hljs-title class_\">RadioButtonSize</span>)\n    )\n\n    <span class=\"hljs-comment\">// 오목한 테두리를 적용하는 Modifier</span>\n    <span class=\"hljs-comment\">// 이것은 외부 원 또는 선택되지 않은 상태를 나타냅니다</span>\n    val convexBorderModifier = <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">convexBorder</span>(\n        color = radioColor.<span class=\"hljs-property\">value</span>,\n        shape = <span class=\"hljs-title class_\">CircleShape</span>,\n        strokeWidth = <span class=\"hljs-title class_\">RadioStrokeWidth</span>,\n        convexStyle = <span class=\"hljs-title class_\">ConvexStyle</span>(<span class=\"hljs-title class_\">RadioShadowBlur</span>, <span class=\"hljs-title class_\">RadioShadowOffset</span>, <span class=\"hljs-title class_\">RadioGlareColor</span>, <span class=\"hljs-title class_\">RadioShadowColor</span>)\n    )\n\n    <span class=\"hljs-comment\">// 라디오 버튼의 주요 컨테이너</span>\n    <span class=\"hljs-title class_\">Box</span>(\n        modifier\n            .<span class=\"hljs-title function_\">minimumInteractiveComponentSize</span>() <span class=\"hljs-comment\">// 최소 터치 대상 크기를 보장합니다</span>\n            .<span class=\"hljs-title function_\">then</span>(selectableModifier) <span class=\"hljs-comment\">// 선택 가능한 동작 추가</span>\n            .<span class=\"hljs-title function_\">size</span>(<span class=\"hljs-title class_\">RadioButtonSize</span>) <span class=\"hljs-comment\">// 라디오 버튼의 크기를 설정합니다</span>\n            .<span class=\"hljs-title function_\">then</span>(convexBorderModifier), <span class=\"hljs-comment\">// 오목한 테두리 적용</span>\n        contentAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">Center</span>\n    ) {\n        <span class=\"hljs-comment\">// 크기가 0 이상인 경우 내부 점을 조건부로 표시합니다</span>\n        <span class=\"hljs-keyword\">if</span> (dotSize.<span class=\"hljs-property\">value</span> > <span class=\"hljs-number\">0.</span>dp) {\n            <span class=\"hljs-title class_\">Box</span>(\n                modifier = <span class=\"hljs-title class_\">Modifier</span>\n                    .<span class=\"hljs-title function_\">size</span>(dotSize.<span class=\"hljs-property\">value</span>)\n                    .<span class=\"hljs-title function_\">background</span>(radioColor.<span class=\"hljs-property\">value</span>, <span class=\"hljs-title class_\">CircleShape</span>)\n                    <span class=\"hljs-comment\">// 두 개의 내부 그림자를 활용해 오목한 효과를 생성합니다</span>\n                    .<span class=\"hljs-title function_\">innerShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, <span class=\"hljs-title class_\">RadioShadowColor</span>, <span class=\"hljs-title class_\">RadioShadowBlur</span>, -<span class=\"hljs-title class_\">RadioShadowOffset</span>, -<span class=\"hljs-title class_\">RadioShadowOffset</span>)\n                    .<span class=\"hljs-title function_\">innerShadow</span>(<span class=\"hljs-title class_\">CircleShape</span>, <span class=\"hljs-title class_\">RadioGlareColor</span>, <span class=\"hljs-title class_\">RadioShadowBlur</span>, <span class=\"hljs-title class_\">RadioShadowOffset</span>, <span class=\"hljs-title class_\">RadioShadowOffset</span>)\n            )\n        }\n    }\n}\n</code></pre>\n<p>축하해요🥳! 성공적으로 만들어냈어요👏. 전체 코드 구현은 GitHub Gist에서 확인할 수 있습니다🧑‍💻. 이제 어떻게 활용할 수 있는지 살펴보도록 하죠.</p>\n<p></p>\n<h2>광고</h2>\n<p>외국어를 배우고 있고 새로운 어휘에 어려움을 겪고 계신가요? 그렇다면, 여러분의 학습을 쉽고 편리하게 만들어 줄 이 어플을 꼭 확인해 보시기를 강력히 추천합니다!</p>\n<h1>실용적인 예시 💁</h1>\n<p></p>\n<p>알겠어요, 결제 옵션을 선택하기 위한 간단한 예제를 만들어 봅시다.</p>\n<p>먼저, 필요한 옵션들을 나타내기 위해 enum 클래스 PaymentOption을 만들어주세요:</p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaymentOption</span>(val <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-title class_\">String</span>) {\n    <span class=\"hljs-title class_\">CreditCard</span>(<span class=\"hljs-string\">\"신용 카드\"</span>),\n    <span class=\"hljs-title class_\">PayPal</span>(<span class=\"hljs-string\">\"PayPal\"</span>),\n    <span class=\"hljs-title class_\">BankTransfer</span>(<span class=\"hljs-string\">\"은행 송금\"</span>),\n}\n</code></pre>\n<p>다음으로, 현재 선택된 옵션을 저장하기 위한 상태 변수가 필요합니다:</p>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> selectedOption by remember { <span class=\"hljs-title function_\">mutableStateOf</span>(<span class=\"hljs-title class_\">PaymentOption</span>.<span class=\"hljs-property\">CreditCard</span>) }\n</code></pre>\n<p>마지막으로, 모든 가능한 옵션을 열에 넣어주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Column</span> {\n    <span class=\"hljs-title class_\">PaymentOption</span>.<span class=\"hljs-property\">entries</span>.<span class=\"hljs-property\">forEach</span> { option ->\n        <span class=\"hljs-title class_\">Row</span>(verticalAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterVertically</span>) {\n            <span class=\"hljs-title class_\">ConvexRadioButton</span>(\n                selected = (option == selectedOption),\n                onClick = { selectedOption = option }\n            )\n            <span class=\"hljs-title class_\">Text</span>(option.<span class=\"hljs-property\">displayName</span>)\n        }\n    }\n}\n</code></pre>\n<h2>결과:</h2>\n<p></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:826/1*5IdpszpbEX4LHPABjORO-g.gif\" alt=\"Image\"></p>\n<p>You might also like 👇</p>\n<p>Thank you for reading this article! ❤️ I hope you’ve found it enjoyable and valuable. Feel free to show your appreciation by hitting the clap 👏 if you liked it and follow Kappdev for more exciting articles 😊</p>\n<p>Happy coding!</p>\n<p></p>\n<p><img src=\"/assets/img/2024-06-19-HowtoCreateaCute3DRadioButtoninJetpackCompose_2.png\" alt=\"image\"></p>\n</body>\n</html>\n"},"__N_SSG":true}