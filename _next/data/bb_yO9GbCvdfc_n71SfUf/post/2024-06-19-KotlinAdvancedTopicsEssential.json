{"pageProps":{"post":{"title":"코틀린 고급 주제 필수","description":"","date":"2024-06-19 13:48","slug":"2024-06-19-KotlinAdvancedTopicsEssential","content":"\nKotlin Multiplatform (KMP)의 공식 릴리스와 안드로이드와의 통합으로 Kotlin은 엄청난 인기를 얻고 있습니다. Kotlin의 매력은 다양성에 있습니다. 개발자들이 단일 언어를 습득하고 백엔드, 프론트엔드(Android, iOS 및 웹)를 포함한 여러 플랫폼에서 활용할 수 있습니다. Kotlin이 계속 성장함에 따라 개발자들은 필수적이고 고급 주제를 탐색하여 기술을 향상시킬 수 있어야 합니다. 이를 통해 예외적인 코딩 표준을 유지하고 산업에서 앞서 나갈 수 있습니다.\n\n![img](/assets/img/2024-06-19-KotlinAdvancedTopicsEssential_0.png)\n\n### 위임\n\nKotlin에서의 위임은 객체가 일부 책임을 다른 객체에 위임할 수 있도록 하는 디자인 패턴입니다. Kotlin은 by 키워드를 사용하여 위임에 대한 내장 지원을 제공합니다. Kotlin에서는 클래스 위임과 속성 위임 두 가지 주요 위임 유형이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 속성 위임\n\nlazy 위임은 속성이 처음 액세스 될 때만 초기화됩니다. 이는 비용이 많이 드는 객체 초기화나 프로그램 실행 중에만 필요한 속성에 유용합니다. 이를 통해 리소스 사용을 최적화하고 응용 프로그램 성능을 향상시킬 수 있습니다. 기본적으로 lazy 초기화는 스레드 안전합니다.\n\n```js\nval myName: String by lazy {\n    println(\"계산됨\")\n    \"내 이름\"\n}\n```\n\n## 클래스 위임\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클래스 위임은 한 클래스가 다른 클래스로 메서드 구현을 위임할 수 있게 합니다. 이는 합성을 위해 유용하며 상속 없이 다른 클래스의 동작을 통합할 수 있도록 합니다. 인터페이스 구현 또는 기능을 다른 클래스로 위임함으로써 코드 중복을 피할 수 있습니다.\n\n```kotlin\n    interface Weather {\n        fun currentWeather()\n    }\n\n    class Summer : Weather {\n        override fun currentWeather() {\n            println(\"Current weather is ${javaClass.simpleName}\")\n        }\n    }\n\n    class HolidayPlans(weather: Weather) : Weather by weather {\n    }\n```\n\n# 확장 함수\n\nKotlin의 확장 함수를 사용하면 코드의 재사용성을 높이기 위해 우리만의 유틸리티 함수를 작성할 수 있습니다. 내부적으로 확장 함수는 컴파일 시점에 클래스에 대해 정적으로 해결되며 해당 클래스의 공개 멤버에 액세스할 수 있도록 합니다(소스 코드를 수정하지 않고).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nval EMAIL_ADDRESS_PATTERN = Pattern.compile(\n        \"[a-zA-Z0-9\\\\+\\\\.\\\\_\\\\%\\\\-\\\\+]{1,256}\\\\@[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}(\\\\.[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,25})+\"\n    )\n\n    private fun String.isEmail() =\n        EMAIL_ADDRESS_PATTERN.matcher(this).matches()\n\n    fun verifyCredential(emailId: String) {\n        println(emailId.isEmail())\n    }\n```\n\n# 고차 함수\n\n고차 함수를 사용하면 함수를 인수로 사용하거나 함수를 반환하거나 둘 다를 할 수 있습니다. 이를 통해 추상 코드를 생성하고 특정 상황에서 함수 구현을 선언하고 다른 상황에서 실행할 수 있습니다. 이를 통해 강력한 추상화와 더 깨끗하고 모듈화된 코드를 작성할 수 있습니다.\n\n## 기본 고차 함수\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nfun calculate(a: Int, b: Int, operator: (Int, Int) -> Int) {\n  operator(a, b)\n}\n\nfun main() {\n    val sum = calculate(5, 3) { a, b -> a + b }\n    println(\"합계: $sum\") // 합계: 8\n    val product = calculate(5, 3) { a, b -> a * b }\n    println(\"곱셈: $product\") // 곱셈: 15\n}\n```\n\n## 함수 반환\n\n```kotlin\nfun operation(op: String): (Int, Int) -> Int {\n    return when (op) {\n        \"add\" -> { a, b -> a + b }\n        \"multiply\" -> { a, b -> a * b }\n        else -> { _, _ -> 0 }\n    }\n}\n\nfun main() {\n    val addOperation = operation(\"add\")\n    println(\"덧셈: ${addOperation(2, 3)}\") // 덧셈: 5\n    val multiplyOperation = operation(\"multiply\")\n    println(\"곱셈: ${multiplyOperation(2, 3)}\") // 곱셈: 6\n}\n```\n\n- inline: 컴파일러에게 함수의 바이트코드를 호출 지점에 직접 넣도록 요청합니다. 함수 호출 및 람다 생성의 오버헤드를 줄여 성능을 향상시킬 수 있습니다.\n- noinline: 인라인 함수 내 람다 매개변수를 인라인화하지 못하게 합니다. 람다를 저장하거나 전달해야 할 때 유용합니다.\n- crossinline: 인라인 함수 내 람다의 비지역 반환을 방지합니다. 람다가 둘러싸는 함수로부터 반환하지 못하도록하여 람다의 예측 가능한 동작을 보장합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Sealed Class / Interface\n\nSealed 클래스는 자바 세계의 enum의 고급 버전으로 볼 수 있습니다. 코틀린에서 sealed class와 sealed interface를 모두 선언할 수 있습니다. Sealed 클래스와 sealed interface는 Kotlin에서 제한된 계층 구조를 모델링하는 유용한 도구입니다. 두 가지 중에서 선택하는 것은 상태와 동작을 공유해야 하는지(Sealed class 사용) 또는 동작에 대한 계약을 정의해야 하는지에 따라 다릅니다(Sealed interface 사용).\n\n```js\nsealed interface Polygon {\n    data class Circle(val radius: Double) : Polygon\n    data class Square(val side: Double) : Polygon\n    data object NotAShape : Polygon\n}\n```\n\n```js\nsealed class Shape(area: Double) {\n    data class Circle(val radius: Double) : Shape(3.14* radius* radius)\n    data class Square(val side: Double) : Shape(side * side)\n    data object NotAShape : Shape(0.0)\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 제네릭\n\n제네릭은 Kotlin에서 선언된 클래스, 인터페이스 및 함수에 타입 매개변수를 사용할 수 있는 강력한 도구입니다. 이를 통해 다양한 데이터 유형을 허용하고 타입 안전성을 유지하면서 유연하고 재사용 가능한 코드를 작성할 수 있습니다.\n\n## 제네릭 클래스\n\n```js\nclass Machine<T>(val type: T)\n\nfun main() {\n    val machine1 = Machine(12)\n    val machine2 = Machine(\"optimus\")\n    println(machine1.type) // 12\n    println(machine2.type) // optimus\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 일반 함수들\n\n일반 함수들은 타입 매개변수를 가진 함수들입니다. 이를 통해 우리는 타입 안전성을 희생하지 않고 다른 타입들에 대해 동작하는 함수를 작성할 수 있습니다.\n\n```kotlin\nfun <T> singletonList(item: T): List<T> {\n    return listOf(item)\n}\n\nfun main() {\n    val intList = singletonList(5)\n    println(intList) // [5]\n}\n```\n\n## Variance\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n분산이란 일반적인 유형 간의 서브타이핑 관계를 정의합니다.\n\n- 불변성은 요소를 소비하고 생성할 수 있습니다. `T` 타입의 `Invariant` 클래스입니다.\n\n```kotlin\nclass Invariant<T>(var value: T)\nval intInvariant = Invariant<Int>(12)\n// var anyInvariant : Invariant<Any> = intInvariant // 컴파일 오류\n```\n\n- 공산성은 요소를 생성만 할 수 있습니다. `T`의 슈퍼 클래스는 `T`를 대체할 수 있지만 서브타입은 아닙니다. `out T`입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nclass Contravariant<out T>(private val value: T) {\n    fun get(): T {\n        return value\n    }\n}\n\nfun main() {\n    val intContravariant = Contravariant<Int>(12)\n    val anyContravariant: Contravariant<Any> = intContravariant\n    // val doubleContravariant : Contravariant<Double> = intContravariant // Compilation error\n}\n```\n\n- Contravariance can only consume elements. The subclasses of T can replace it but not the superclass. `in T`\n\n```kotlin\nclass Contravariant<in T> {\n    fun put(item: T) { println(item) }\n}\n\nfun main() {\n    val numberContravariant = Contravariant<Number>()\n    val doubleContravariant: Contravariant<Double> = numberContravariant\n    // val anyContravariant: Contravariant<Any> = numberContravariant  // Compilation error\n}\n```\n\n# 코루틴\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코루틴은 가볍고(쓰레드보다 훨씬 가볍습니다). 블로킹하지 않고, 어느 스레드도 차단하지 않지만 코드 실행을 일시 중단하고 다시 시작합니다. 디스패처(dispatchers)와 스코프(scopes)에 따라 코루틴이 널리 분류됩니다.\n\n## 코루틴 스코프\n\n- GlobalScope 어떤 특정 라이프사이클에 바인딩되지 않은 최상위 코루틴을 시작하는 글로벌 스코프\n- lifecycleScope 액티비티나 프래그먼트의 수명주기에 바인딩된 스코프\n- viewModelScope ViewModel 수명주기에 바인딩된 스코프\n\n```js\nGlobalScope.launch {\n    // 오래 실행되는 작업\n}\nlifecycleScope.launch {\n    // 코루틴 코드\n}\nviewModelScope.launch {\n    // 코루틴 코드\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Coroutine Dispatchers\n\n- `dispatchers.Main`은 주 (UI) 스레드에서 실행됩니다.\n- `dispatchers.IO`는 네트워크 또는 데이터베이스 작업에 사용됩니다.\n- `dispatchers.Default`는 CPU 집약적인 작업에 사용됩니다 (비트맵 작업).\n- `dispatchers.Unconfined`는 호출자 스레드에서 실행되지만 처음 일시 중지 지점까지만 실행됩니다.\n\n## Builders\n\n- `launch`는 새로운 코루틴을 시작하고 결과를 반환하지 않습니다. Fire-and-forget 방식입니다.\n- `async`는 새로운 코루틴을 시작하고 향후 결과를 나타내는 Deferred를 반환합니다. 결과를 얻으려면 `await`를 사용하세요.\n- `runBlocking`은 해당 블록이 완료될 때까지 현재 스레드를 차단합니다. 주로 메인 함수 및 테스트에서 사용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nCoroutineScope(Dispatchers.Main).launch {\n    // 코루틴 코드\n}\n\nval deferred = CoroutineScope(Dispatchers.Default).async {\n    // 비동기 작업\n    \"결과\"\n}\nrunBlocking {\n    val result = deferred.await()\n    println(result)\n}\n\nrunBlocking {\n    // 코루틴이 완료될 때까지 블록됨\n}\n```\n","ogImage":{"url":"/assets/img/2024-06-19-KotlinAdvancedTopicsEssential_0.png"},"coverImage":"/assets/img/2024-06-19-KotlinAdvancedTopicsEssential_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Kotlin Multiplatform (KMP)의 공식 릴리스와 안드로이드와의 통합으로 Kotlin은 엄청난 인기를 얻고 있습니다. Kotlin의 매력은 다양성에 있습니다. 개발자들이 단일 언어를 습득하고 백엔드, 프론트엔드(Android, iOS 및 웹)를 포함한 여러 플랫폼에서 활용할 수 있습니다. Kotlin이 계속 성장함에 따라 개발자들은 필수적이고 고급 주제를 탐색하여 기술을 향상시킬 수 있어야 합니다. 이를 통해 예외적인 코딩 표준을 유지하고 산업에서 앞서 나갈 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-19-KotlinAdvancedTopicsEssential_0.png\" alt=\"img\"></p>\n<h3>위임</h3>\n<p>Kotlin에서의 위임은 객체가 일부 책임을 다른 객체에 위임할 수 있도록 하는 디자인 패턴입니다. Kotlin은 by 키워드를 사용하여 위임에 대한 내장 지원을 제공합니다. Kotlin에서는 클래스 위임과 속성 위임 두 가지 주요 위임 유형이 있습니다.</p>\n<p></p>\n<h2>속성 위임</h2>\n<p>lazy 위임은 속성이 처음 액세스 될 때만 초기화됩니다. 이는 비용이 많이 드는 객체 초기화나 프로그램 실행 중에만 필요한 속성에 유용합니다. 이를 통해 리소스 사용을 최적화하고 응용 프로그램 성능을 향상시킬 수 있습니다. 기본적으로 lazy 초기화는 스레드 안전합니다.</p>\n<pre><code class=\"hljs language-js\">val <span class=\"hljs-attr\">myName</span>: <span class=\"hljs-title class_\">String</span> by lazy {\n    <span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"계산됨\"</span>)\n    <span class=\"hljs-string\">\"내 이름\"</span>\n}\n</code></pre>\n<h2>클래스 위임</h2>\n<p></p>\n<p>클래스 위임은 한 클래스가 다른 클래스로 메서드 구현을 위임할 수 있게 합니다. 이는 합성을 위해 유용하며 상속 없이 다른 클래스의 동작을 통합할 수 있도록 합니다. 인터페이스 구현 또는 기능을 다른 클래스로 위임함으로써 코드 중복을 피할 수 있습니다.</p>\n<pre><code class=\"hljs language-kotlin\">    <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Weather</span> {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">currentWeather</span><span class=\"hljs-params\">()</span></span>\n    }\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Summer</span> : <span class=\"hljs-type\">Weather</span> {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">currentWeather</span><span class=\"hljs-params\">()</span></span> {\n            println(<span class=\"hljs-string\">\"Current weather is <span class=\"hljs-subst\">${javaClass.simpleName}</span>\"</span>)\n        }\n    }\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HolidayPlans</span>(weather: Weather) : Weather <span class=\"hljs-keyword\">by</span> weather {\n    }\n</code></pre>\n<h1>확장 함수</h1>\n<p>Kotlin의 확장 함수를 사용하면 코드의 재사용성을 높이기 위해 우리만의 유틸리티 함수를 작성할 수 있습니다. 내부적으로 확장 함수는 컴파일 시점에 클래스에 대해 정적으로 해결되며 해당 클래스의 공개 멤버에 액세스할 수 있도록 합니다(소스 코드를 수정하지 않고).</p>\n<p></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> EMAIL_ADDRESS_PATTERN = Pattern.compile(\n        <span class=\"hljs-string\">\"[a-zA-Z0-9\\\\+\\\\.\\\\_\\\\%\\\\-\\\\+]{1,256}\\\\@[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}(\\\\.[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,25})+\"</span>\n    )\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> String.<span class=\"hljs-title\">isEmail</span><span class=\"hljs-params\">()</span></span> =\n        EMAIL_ADDRESS_PATTERN.matcher(<span class=\"hljs-keyword\">this</span>).matches()\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">verifyCredential</span><span class=\"hljs-params\">(emailId: <span class=\"hljs-type\">String</span>)</span></span> {\n        println(emailId.isEmail())\n    }\n</code></pre>\n<h1>고차 함수</h1>\n<p>고차 함수를 사용하면 함수를 인수로 사용하거나 함수를 반환하거나 둘 다를 할 수 있습니다. 이를 통해 추상 코드를 생성하고 특정 상황에서 함수 구현을 선언하고 다른 상황에서 실행할 수 있습니다. 이를 통해 강력한 추상화와 더 깨끗하고 모듈화된 코드를 작성할 수 있습니다.</p>\n<h2>기본 고차 함수</h2>\n<p></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">calculate</span><span class=\"hljs-params\">(a: <span class=\"hljs-type\">Int</span>, b: <span class=\"hljs-type\">Int</span>, <span class=\"hljs-keyword\">operator</span>: (<span class=\"hljs-type\">Int</span>, <span class=\"hljs-type\">Int</span>) -> <span class=\"hljs-type\">Int</span>)</span></span> {\n  <span class=\"hljs-keyword\">operator</span>(a, b)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> sum = calculate(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>) { a, b -> a + b }\n    println(<span class=\"hljs-string\">\"합계: <span class=\"hljs-variable\">$sum</span>\"</span>) <span class=\"hljs-comment\">// 합계: 8</span>\n    <span class=\"hljs-keyword\">val</span> product = calculate(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>) { a, b -> a * b }\n    println(<span class=\"hljs-string\">\"곱셈: <span class=\"hljs-variable\">$product</span>\"</span>) <span class=\"hljs-comment\">// 곱셈: 15</span>\n}\n</code></pre>\n<h2>함수 반환</h2>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">operation</span><span class=\"hljs-params\">(op: <span class=\"hljs-type\">String</span>)</span></span>: (<span class=\"hljs-built_in\">Int</span>, <span class=\"hljs-built_in\">Int</span>) -> <span class=\"hljs-built_in\">Int</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">when</span> (op) {\n        <span class=\"hljs-string\">\"add\"</span> -> { a, b -> a + b }\n        <span class=\"hljs-string\">\"multiply\"</span> -> { a, b -> a * b }\n        <span class=\"hljs-keyword\">else</span> -> { _, _ -> <span class=\"hljs-number\">0</span> }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> addOperation = operation(<span class=\"hljs-string\">\"add\"</span>)\n    println(<span class=\"hljs-string\">\"덧셈: <span class=\"hljs-subst\">${addOperation(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)}</span>\"</span>) <span class=\"hljs-comment\">// 덧셈: 5</span>\n    <span class=\"hljs-keyword\">val</span> multiplyOperation = operation(<span class=\"hljs-string\">\"multiply\"</span>)\n    println(<span class=\"hljs-string\">\"곱셈: <span class=\"hljs-subst\">${multiplyOperation(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)}</span>\"</span>) <span class=\"hljs-comment\">// 곱셈: 6</span>\n}\n</code></pre>\n<ul>\n<li>inline: 컴파일러에게 함수의 바이트코드를 호출 지점에 직접 넣도록 요청합니다. 함수 호출 및 람다 생성의 오버헤드를 줄여 성능을 향상시킬 수 있습니다.</li>\n<li>noinline: 인라인 함수 내 람다 매개변수를 인라인화하지 못하게 합니다. 람다를 저장하거나 전달해야 할 때 유용합니다.</li>\n<li>crossinline: 인라인 함수 내 람다의 비지역 반환을 방지합니다. 람다가 둘러싸는 함수로부터 반환하지 못하도록하여 람다의 예측 가능한 동작을 보장합니다.</li>\n</ul>\n<p></p>\n<h1>Sealed Class / Interface</h1>\n<p>Sealed 클래스는 자바 세계의 enum의 고급 버전으로 볼 수 있습니다. 코틀린에서 sealed class와 sealed interface를 모두 선언할 수 있습니다. Sealed 클래스와 sealed interface는 Kotlin에서 제한된 계층 구조를 모델링하는 유용한 도구입니다. 두 가지 중에서 선택하는 것은 상태와 동작을 공유해야 하는지(Sealed class 사용) 또는 동작에 대한 계약을 정의해야 하는지에 따라 다릅니다(Sealed interface 사용).</p>\n<pre><code class=\"hljs language-js\">sealed interface <span class=\"hljs-title class_\">Polygon</span> {\n    data <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span>(val <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-title class_\">Double</span>) : <span class=\"hljs-title class_\">Polygon</span>\n    data <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span>(val <span class=\"hljs-attr\">side</span>: <span class=\"hljs-title class_\">Double</span>) : <span class=\"hljs-title class_\">Polygon</span>\n    data object <span class=\"hljs-title class_\">NotAShape</span> : <span class=\"hljs-title class_\">Polygon</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">sealed <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Shape</span>(<span class=\"hljs-attr\">area</span>: <span class=\"hljs-title class_\">Double</span>) {\n    data <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span>(val <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-title class_\">Double</span>) : <span class=\"hljs-title class_\">Shape</span>(<span class=\"hljs-number\">3.14</span>* radius* radius)\n    data <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span>(val <span class=\"hljs-attr\">side</span>: <span class=\"hljs-title class_\">Double</span>) : <span class=\"hljs-title class_\">Shape</span>(side * side)\n    data object <span class=\"hljs-title class_\">NotAShape</span> : <span class=\"hljs-title class_\">Shape</span>(<span class=\"hljs-number\">0.0</span>)\n}\n</code></pre>\n<p></p>\n<h1>제네릭</h1>\n<p>제네릭은 Kotlin에서 선언된 클래스, 인터페이스 및 함수에 타입 매개변수를 사용할 수 있는 강력한 도구입니다. 이를 통해 다양한 데이터 유형을 허용하고 타입 안전성을 유지하면서 유연하고 재사용 가능한 코드를 작성할 수 있습니다.</p>\n<h2>제네릭 클래스</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Machine</span>&#x3C;T>(val <span class=\"hljs-attr\">type</span>: T)\n\nfun <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n    val machine1 = <span class=\"hljs-title class_\">Machine</span>(<span class=\"hljs-number\">12</span>)\n    val machine2 = <span class=\"hljs-title class_\">Machine</span>(<span class=\"hljs-string\">\"optimus\"</span>)\n    <span class=\"hljs-title function_\">println</span>(machine1.<span class=\"hljs-property\">type</span>) <span class=\"hljs-comment\">// 12</span>\n    <span class=\"hljs-title function_\">println</span>(machine2.<span class=\"hljs-property\">type</span>) <span class=\"hljs-comment\">// optimus</span>\n}\n</code></pre>\n<p></p>\n<h2>일반 함수들</h2>\n<p>일반 함수들은 타입 매개변수를 가진 함수들입니다. 이를 통해 우리는 타입 안전성을 희생하지 않고 다른 타입들에 대해 동작하는 함수를 작성할 수 있습니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&#x3C;T></span> <span class=\"hljs-title\">singletonList</span><span class=\"hljs-params\">(item: <span class=\"hljs-type\">T</span>)</span></span>: List&#x3C;T> {\n    <span class=\"hljs-keyword\">return</span> listOf(item)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> intList = singletonList(<span class=\"hljs-number\">5</span>)\n    println(intList) <span class=\"hljs-comment\">// [5]</span>\n}\n</code></pre>\n<h2>Variance</h2>\n<p></p>\n<p>분산이란 일반적인 유형 간의 서브타이핑 관계를 정의합니다.</p>\n<ul>\n<li>불변성은 요소를 소비하고 생성할 수 있습니다. <code>T</code> 타입의 <code>Invariant</code> 클래스입니다.</li>\n</ul>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Invariant</span>&#x3C;<span class=\"hljs-type\">T</span>>(<span class=\"hljs-keyword\">var</span> value: T)\n<span class=\"hljs-keyword\">val</span> intInvariant = Invariant&#x3C;<span class=\"hljs-built_in\">Int</span>>(<span class=\"hljs-number\">12</span>)\n<span class=\"hljs-comment\">// var anyInvariant : Invariant&#x3C;Any> = intInvariant // 컴파일 오류</span>\n</code></pre>\n<ul>\n<li>공산성은 요소를 생성만 할 수 있습니다. <code>T</code>의 슈퍼 클래스는 <code>T</code>를 대체할 수 있지만 서브타입은 아닙니다. <code>out T</code>입니다.</li>\n</ul>\n<p></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Contravariant</span>&#x3C;<span class=\"hljs-type\">out T</span>>(<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> value: T) {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">()</span></span>: T {\n        <span class=\"hljs-keyword\">return</span> value\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> intContravariant = Contravariant&#x3C;<span class=\"hljs-built_in\">Int</span>>(<span class=\"hljs-number\">12</span>)\n    <span class=\"hljs-keyword\">val</span> anyContravariant: Contravariant&#x3C;Any> = intContravariant\n    <span class=\"hljs-comment\">// val doubleContravariant : Contravariant&#x3C;Double> = intContravariant // Compilation error</span>\n}\n</code></pre>\n<ul>\n<li>Contravariance can only consume elements. The subclasses of T can replace it but not the superclass. <code>in T</code></li>\n</ul>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Contravariant</span>&#x3C;<span class=\"hljs-type\">in T</span>> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">put</span><span class=\"hljs-params\">(item: <span class=\"hljs-type\">T</span>)</span></span> { println(item) }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> numberContravariant = Contravariant&#x3C;Number>()\n    <span class=\"hljs-keyword\">val</span> doubleContravariant: Contravariant&#x3C;<span class=\"hljs-built_in\">Double</span>> = numberContravariant\n    <span class=\"hljs-comment\">// val anyContravariant: Contravariant&#x3C;Any> = numberContravariant  // Compilation error</span>\n}\n</code></pre>\n<h1>코루틴</h1>\n<p></p>\n<p>코루틴은 가볍고(쓰레드보다 훨씬 가볍습니다). 블로킹하지 않고, 어느 스레드도 차단하지 않지만 코드 실행을 일시 중단하고 다시 시작합니다. 디스패처(dispatchers)와 스코프(scopes)에 따라 코루틴이 널리 분류됩니다.</p>\n<h2>코루틴 스코프</h2>\n<ul>\n<li>GlobalScope 어떤 특정 라이프사이클에 바인딩되지 않은 최상위 코루틴을 시작하는 글로벌 스코프</li>\n<li>lifecycleScope 액티비티나 프래그먼트의 수명주기에 바인딩된 스코프</li>\n<li>viewModelScope ViewModel 수명주기에 바인딩된 스코프</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">GlobalScope</span>.<span class=\"hljs-property\">launch</span> {\n    <span class=\"hljs-comment\">// 오래 실행되는 작업</span>\n}\nlifecycleScope.<span class=\"hljs-property\">launch</span> {\n    <span class=\"hljs-comment\">// 코루틴 코드</span>\n}\nviewModelScope.<span class=\"hljs-property\">launch</span> {\n    <span class=\"hljs-comment\">// 코루틴 코드</span>\n}\n</code></pre>\n<p></p>\n<h2>Coroutine Dispatchers</h2>\n<ul>\n<li><code>dispatchers.Main</code>은 주 (UI) 스레드에서 실행됩니다.</li>\n<li><code>dispatchers.IO</code>는 네트워크 또는 데이터베이스 작업에 사용됩니다.</li>\n<li><code>dispatchers.Default</code>는 CPU 집약적인 작업에 사용됩니다 (비트맵 작업).</li>\n<li><code>dispatchers.Unconfined</code>는 호출자 스레드에서 실행되지만 처음 일시 중지 지점까지만 실행됩니다.</li>\n</ul>\n<h2>Builders</h2>\n<ul>\n<li><code>launch</code>는 새로운 코루틴을 시작하고 결과를 반환하지 않습니다. Fire-and-forget 방식입니다.</li>\n<li><code>async</code>는 새로운 코루틴을 시작하고 향후 결과를 나타내는 Deferred를 반환합니다. 결과를 얻으려면 <code>await</code>를 사용하세요.</li>\n<li><code>runBlocking</code>은 해당 블록이 완료될 때까지 현재 스레드를 차단합니다. 주로 메인 함수 및 테스트에서 사용됩니다.</li>\n</ul>\n<p></p>\n<pre><code class=\"hljs language-kotlin\">CoroutineScope(Dispatchers.Main).launch {\n    <span class=\"hljs-comment\">// 코루틴 코드</span>\n}\n\n<span class=\"hljs-keyword\">val</span> deferred = CoroutineScope(Dispatchers.Default).async {\n    <span class=\"hljs-comment\">// 비동기 작업</span>\n    <span class=\"hljs-string\">\"결과\"</span>\n}\nrunBlocking {\n    <span class=\"hljs-keyword\">val</span> result = deferred.await()\n    println(result)\n}\n\nrunBlocking {\n    <span class=\"hljs-comment\">// 코루틴이 완료될 때까지 블록됨</span>\n}\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}