{"pageProps":{"post":{"title":"FastAPI와 MongoDB 소개 첫 걸음부터 시작하기","description":"","date":"2024-06-23 22:46","slug":"2024-06-23-IntrotoFastAPIandMongoDB","content":"\n이 튜토리얼에서는 FastAPI에 의존하는 간단한 파이썬 애플리케이션을 구축하는 방법을 배울 수 있습니다. 이 애플리케이션은 MongoDB로 요청을 보내는 기능을 갖추고 있습니다.\n\n프로그램이 모든 장치에서 실행될 수 있도록 하기 위해, 이 튜토리얼은 보편적인 접근 방식을 취하며 Docker Compose를 사용하여 코드를 실행합니다.\n\n또한 보안과 확장성에 대한 내용에 대해서는 이 PoC에서는 중점을 두지 않았음을 알려드립니다. 해당 정보에 대해서는 FastAPI 보안 문서를 확인하는 것이 좋습니다.\n\n## 사전 요구 사항\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n친구야, 기기에 다음 소프트웨어가 있는지 확인해주세요.\n\n- Git\n- Docker Desktop\n- Python\n- MongoDB Compass 또는 Mongosh\n\n## PoC 실행 방법\n\n저장소를 복제(clone)하기 전에, 모든 선행 요구 사항이 충족되었는지 확인하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ngit clone https://github.com/raduul/FastMongo.git\n```\n\nDocker Desktop을 켜고, 데이터가 유지될 볼륨을 구성하세요.\n\n```js\nDocker Desktop > Settings > Resources > File Sharing > 원하는 위치 선택\n```\n\n애플리케이션을 실행한 후, 복제한 저장소로 이동해서 다음 명령어를 실행하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndocker compose -f deployment/docker-compose-fastapi.yaml up --build\n```\n\n로컬에서 실행 중인 MongoDB에 샘플 데이터를 보내려면 Swagger UI(localhost:8000/docs)에 액세스하십시오.\n\n‘send_data’를 열어서 “Try it out”을 선택한 후 “Execute”를 선택하여 데이터를 데이터베이스로 보내세요.\n\n<img src=\"/assets/img/2024-06-23-IntrotoFastAPIandMongoDB_0.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이후에는 \"실행\" 버튼 아래에 요청 상태가 표시됩니다. 상태 코드 200은 데이터가 성공적으로 추가되었음을 나타냅니다!\n\n![이미지](/assets/img/2024-06-23-IntrotoFastAPIandMongoDB_1.png)\n\n데이터가 성공적으로 추가되면 MongoDB Compass로 이동하여 추가된 데이터가 있는 데이터베이스 및 컬렉션에 액세스하십시오.\n연결 문자열은 다음과 같습니다:\n\n```js\nmongodb://root:example@localhost:27017/fast-api?authSource=admin\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-IntrotoFastAPIandMongoDB_2.png\" />\n\n이제 데이터를 MongoDB에 성공적으로 보냈습니다. 코드를 실험하고 MongoDB 데이터베이스에 추가 경로와 컬렉션을 생성해보세요. 축하합니다 🥳🎊\n\n## 코드 소개\n\n이 애플리케이션을 실행하는 데 필요한 코드는 매우 간단합니다! 세 개의 그룹으로 구성되어 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- FastAPI — 데이터를 전송하는 API Endpoint를 구축하는 데 사용됩니다.\n- MongoDB — FastAPI에서 전송된 데이터를 저장하는 데 사용됩니다.\n- Docker Compose — FastAPI 및 MongoDB의 컨테이너화된 이미지를 실행하는 데 사용됩니다.\n\n## FastAPI\n\n이 코드는 여러 개의 파이썬 파일로 구성되어 있지만, 가장 중요한 두 개는 다음과 같습니다:\n\n- 먼저 MongoDB 데이터베이스에 연결이 설정됩니다: (database.py)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport logging\nfrom motor.motor_asyncio import AsyncIOMotorClient\nimport os\n\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\nclient: AsyncIOMotorClient = None\n\ndef startup_db_client():\n    global client\n    try:\n        mongo_uri = os.getenv('MONGO_URL')\n        client = AsyncIOMotorClient(mongo_uri)\n        logging.info(\"Connected to MongoDB successfully.\")\n    except Exception as e:\n        logging.error(f\"Failed to connect to MongoDB: {e}\")\n    return client['fast-api']\n\ndef shutdown_db_client():\n    client.close()\n    logging.info(\"MongoDB connection closed.\")\n\ndef get_database():\n    return startup_db_client()\n```\n\n둘째로, 연결이 설정되면 데이터를 보낼 때 유추합니다 (main.py)\n\n```js\nfrom fastapi import FastAPI, Depends\nfrom database import startup_db_client, shutdown_db_client, get_database\n\napp = FastAPI()\n\napp.add_event_handler(\"startup\", startup_db_client)\napp.add_event_handler(\"shutdown\", shutdown_db_client)\n\n@app.post(\"/send_data\")\nasync def insert_sample_data(sample_data: dict, db=Depends(get_database)):\n    try:\n        collection = db['sample-users']\n        result = await collection.insert_one(sample_data)\n        return {\"id of inserted record\": str(result.inserted_id)}\n    except Exception as e:\n        return {\"error\": str(e)}\n```\n\n## MongoDB\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nMongoDB 구성은 PoC를 이해하기 쉽게 만들기 위해 간단하게 유지되었습니다. 따라서 구성은 순전히 기본 설정입니다. MongoDB의 두 가지 주요 파일은 \"deployment/docker-compose-fastapi.yaml\" 및 \"deployment/init-mongo.js\"입니다.\n\n- docker-compose-fastapi.yaml — MongoDB를 위한 기본 배포 구성이 포함되어 있습니다.\n- deployment/init-mongo.js — Docker Compose에 의해 MongoDB가 배포될 때 PoC를 위해 생성될 스키마에 대한 정보가 포함되어 있습니다.\n\n## Docker Compose\n\nDocker Compose은 이 PoC에서 사용되는 이미지 중 두 개를 실행하는 데 사용됩니다. 구성은 \"deployment/docker-compose-fastapi.yaml\"에서 찾을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- fastapi 서비스는 루트에 위치한 Dockerfile을 참조하며 FastAPI 앱을 빌드하고 빌드된 후에 실행하는 방법에 대한 구성을 포함합니다.\n- mongo 서비스는 MongoDB 이미지를 참조합니다. \"docker compose down\" 후에도 데이터가 유지되도록 보장하기 위해 볼륨이 생성되어 데이터를 보관합니다. 사용 중인 특정 이미지는 OS/ARCH Amd64 및 Arm64와 호환됩니다.\n\nLinkedIn에서 언제든지 연락 주세요.\n","ogImage":{"url":"/assets/img/2024-06-23-IntrotoFastAPIandMongoDB_0.png"},"coverImage":"/assets/img/2024-06-23-IntrotoFastAPIandMongoDB_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 튜토리얼에서는 FastAPI에 의존하는 간단한 파이썬 애플리케이션을 구축하는 방법을 배울 수 있습니다. 이 애플리케이션은 MongoDB로 요청을 보내는 기능을 갖추고 있습니다.</p>\n<p>프로그램이 모든 장치에서 실행될 수 있도록 하기 위해, 이 튜토리얼은 보편적인 접근 방식을 취하며 Docker Compose를 사용하여 코드를 실행합니다.</p>\n<p>또한 보안과 확장성에 대한 내용에 대해서는 이 PoC에서는 중점을 두지 않았음을 알려드립니다. 해당 정보에 대해서는 FastAPI 보안 문서를 확인하는 것이 좋습니다.</p>\n<h2>사전 요구 사항</h2>\n<p></p>\n<p>친구야, 기기에 다음 소프트웨어가 있는지 확인해주세요.</p>\n<ul>\n<li>Git</li>\n<li>Docker Desktop</li>\n<li>Python</li>\n<li>MongoDB Compass 또는 Mongosh</li>\n</ul>\n<h2>PoC 실행 방법</h2>\n<p>저장소를 복제(clone)하기 전에, 모든 선행 요구 사항이 충족되었는지 확인하세요.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">git clone <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//github.com/raduul/FastMongo.git</span>\n</code></pre>\n<p>Docker Desktop을 켜고, 데이터가 유지될 볼륨을 구성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Docker</span> <span class=\"hljs-title class_\">Desktop</span> > <span class=\"hljs-title class_\">Settings</span> > <span class=\"hljs-title class_\">Resources</span> > <span class=\"hljs-title class_\">File</span> <span class=\"hljs-title class_\">Sharing</span> > 원하는 위치 선택\n</code></pre>\n<p>애플리케이션을 실행한 후, 복제한 저장소로 이동해서 다음 명령어를 실행하세요:</p>\n<p></p>\n<pre><code class=\"hljs language-js\">docker compose -f deployment/docker-compose-fastapi.<span class=\"hljs-property\">yaml</span> up --build\n</code></pre>\n<p>로컬에서 실행 중인 MongoDB에 샘플 데이터를 보내려면 Swagger UI(localhost:8000/docs)에 액세스하십시오.</p>\n<p>‘send_data’를 열어서 “Try it out”을 선택한 후 “Execute”를 선택하여 데이터를 데이터베이스로 보내세요.</p>\n<p></p>\n<p>이후에는 \"실행\" 버튼 아래에 요청 상태가 표시됩니다. 상태 코드 200은 데이터가 성공적으로 추가되었음을 나타냅니다!</p>\n<p><img src=\"/assets/img/2024-06-23-IntrotoFastAPIandMongoDB_1.png\" alt=\"이미지\"></p>\n<p>데이터가 성공적으로 추가되면 MongoDB Compass로 이동하여 추가된 데이터가 있는 데이터베이스 및 컬렉션에 액세스하십시오.\n연결 문자열은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">mongodb</span>:<span class=\"hljs-comment\">//root:example@localhost:27017/fast-api?authSource=admin</span>\n</code></pre>\n<p></p>\n<p>이제 데이터를 MongoDB에 성공적으로 보냈습니다. 코드를 실험하고 MongoDB 데이터베이스에 추가 경로와 컬렉션을 생성해보세요. 축하합니다 🥳🎊</p>\n<h2>코드 소개</h2>\n<p>이 애플리케이션을 실행하는 데 필요한 코드는 매우 간단합니다! 세 개의 그룹으로 구성되어 있습니다.</p>\n<p></p>\n<ul>\n<li>FastAPI — 데이터를 전송하는 API Endpoint를 구축하는 데 사용됩니다.</li>\n<li>MongoDB — FastAPI에서 전송된 데이터를 저장하는 데 사용됩니다.</li>\n<li>Docker Compose — FastAPI 및 MongoDB의 컨테이너화된 이미지를 실행하는 데 사용됩니다.</li>\n</ul>\n<h2>FastAPI</h2>\n<p>이 코드는 여러 개의 파이썬 파일로 구성되어 있지만, 가장 중요한 두 개는 다음과 같습니다:</p>\n<ul>\n<li>먼저 MongoDB 데이터베이스에 연결이 설정됩니다: (database.py)</li>\n</ul>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> logging\n<span class=\"hljs-keyword\">from</span> motor.<span class=\"hljs-property\">motor_asyncio</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AsyncIOMotorClient</span>\n<span class=\"hljs-keyword\">import</span> os\n\nlogging.<span class=\"hljs-title function_\">basicConfig</span>(level=logging.<span class=\"hljs-property\">INFO</span>, format=<span class=\"hljs-string\">'%(asctime)s - %(levelname)s - %(message)s'</span>)\n\n<span class=\"hljs-attr\">client</span>: <span class=\"hljs-title class_\">AsyncIOMotorClient</span> = <span class=\"hljs-title class_\">None</span>\n\ndef <span class=\"hljs-title function_\">startup_db_client</span>():\n    <span class=\"hljs-variable language_\">global</span> client\n    <span class=\"hljs-attr\">try</span>:\n        mongo_uri = os.<span class=\"hljs-title function_\">getenv</span>(<span class=\"hljs-string\">'MONGO_URL'</span>)\n        client = <span class=\"hljs-title class_\">AsyncIOMotorClient</span>(mongo_uri)\n        logging.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">\"Connected to MongoDB successfully.\"</span>)\n    except <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n        logging.<span class=\"hljs-title function_\">error</span>(f<span class=\"hljs-string\">\"Failed to connect to MongoDB: {e}\"</span>)\n    <span class=\"hljs-keyword\">return</span> client[<span class=\"hljs-string\">'fast-api'</span>]\n\ndef <span class=\"hljs-title function_\">shutdown_db_client</span>():\n    client.<span class=\"hljs-title function_\">close</span>()\n    logging.<span class=\"hljs-title function_\">info</span>(<span class=\"hljs-string\">\"MongoDB connection closed.\"</span>)\n\ndef <span class=\"hljs-title function_\">get_database</span>():\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">startup_db_client</span>()\n</code></pre>\n<p>둘째로, 연결이 설정되면 데이터를 보낼 때 유추합니다 (main.py)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">FastAPI</span>, <span class=\"hljs-title class_\">Depends</span>\n<span class=\"hljs-keyword\">from</span> database <span class=\"hljs-keyword\">import</span> startup_db_client, shutdown_db_client, get_database\n\napp = <span class=\"hljs-title class_\">FastAPI</span>()\n\napp.<span class=\"hljs-title function_\">add_event_handler</span>(<span class=\"hljs-string\">\"startup\"</span>, startup_db_client)\napp.<span class=\"hljs-title function_\">add_event_handler</span>(<span class=\"hljs-string\">\"shutdown\"</span>, shutdown_db_client)\n\n@app.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">\"/send_data\"</span>)\n<span class=\"hljs-keyword\">async</span> def <span class=\"hljs-title function_\">insert_sample_data</span>(<span class=\"hljs-attr\">sample_data</span>: dict, db=<span class=\"hljs-title class_\">Depends</span>(get_database)):\n    <span class=\"hljs-attr\">try</span>:\n        collection = db[<span class=\"hljs-string\">'sample-users'</span>]\n        result = <span class=\"hljs-keyword\">await</span> collection.<span class=\"hljs-title function_\">insert_one</span>(sample_data)\n        <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"id of inserted record\"</span>: <span class=\"hljs-title function_\">str</span>(result.<span class=\"hljs-property\">inserted_id</span>)}\n    except <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n        <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"error\"</span>: <span class=\"hljs-title function_\">str</span>(e)}\n</code></pre>\n<h2>MongoDB</h2>\n<p></p>\n<p>MongoDB 구성은 PoC를 이해하기 쉽게 만들기 위해 간단하게 유지되었습니다. 따라서 구성은 순전히 기본 설정입니다. MongoDB의 두 가지 주요 파일은 \"deployment/docker-compose-fastapi.yaml\" 및 \"deployment/init-mongo.js\"입니다.</p>\n<ul>\n<li>docker-compose-fastapi.yaml — MongoDB를 위한 기본 배포 구성이 포함되어 있습니다.</li>\n<li>deployment/init-mongo.js — Docker Compose에 의해 MongoDB가 배포될 때 PoC를 위해 생성될 스키마에 대한 정보가 포함되어 있습니다.</li>\n</ul>\n<h2>Docker Compose</h2>\n<p>Docker Compose은 이 PoC에서 사용되는 이미지 중 두 개를 실행하는 데 사용됩니다. 구성은 \"deployment/docker-compose-fastapi.yaml\"에서 찾을 수 있습니다.</p>\n<p></p>\n<ul>\n<li>fastapi 서비스는 루트에 위치한 Dockerfile을 참조하며 FastAPI 앱을 빌드하고 빌드된 후에 실행하는 방법에 대한 구성을 포함합니다.</li>\n<li>mongo 서비스는 MongoDB 이미지를 참조합니다. \"docker compose down\" 후에도 데이터가 유지되도록 보장하기 위해 볼륨이 생성되어 데이터를 보관합니다. 사용 중인 특정 이미지는 OS/ARCH Amd64 및 Arm64와 호환됩니다.</li>\n</ul>\n<p>LinkedIn에서 언제든지 연락 주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}