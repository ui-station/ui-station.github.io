{"pageProps":{"post":{"title":"iOS에서 Swift를 사용하여 견고한 네트워크 계층 구축하기","description":"","date":"2024-06-19 10:56","slug":"2024-06-19-BuildingaRobustNetworkLayeriniOSUsingSwift","content":"\n![이미지](/assets/img/2024-06-19-BuildingaRobustNetworkLayeriniOSUsingSwift_0.png)\n\n현대 iOS 개발에서 API 호출 및 데이터 검색을 효율적이고 안전하게 처리하기 위해 잘 구조화된 네트워크 레이어를 갖는 것이 중요합니다. 이 기사에서는 제공된 코드를 기반으로 Swift로 견고한 네트워크 레이어를 만드는 방법을 안내합니다.\n\n# 개요\n\n우리의 네트워크 레이어는 여러 중요한 구성 요소로 구성됩니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- NetworkError: 다양한 종류의 네트워크 오류를 처리하기 위한 포괄적 인템.\n- NetworkRequest: 네트워크 요청에 필요한 속성과 메소드를 정의하는 프로토콜.\n- NetworkManager: 네트워크 요청 수행, 응답 해석 및 파일 다운로드 처리를 담당하는 싱글톤 클래스입니다.\n\n또한 이러한 구성 요소를 예시 API 호출 및 파일 다운로드와 함께 사용하는 방법을 보여줄 것입니다.\n\n# 단계 1: 네트워크 오류 정의하기\n\n다양한 네트워크 관련 오류를 깨끗하고 조직된 방식으로 처리하는 데 도움이 되는 NetworkError 열거형을 정의하는 것부터 시작해보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport Foundation\n\nenum NetworkError: Error {\n    case badURL\n    case requestFailed(Error)\n    case invalidResponse\n    case dataNotFound\n    case decodingFailed(Error)\n    case encodingFailed(Error)\n    case notFound\n    case internalServerError\n    case unknownError(statusCode: Int)\n}\n\nstruct DecodingError: Error {\n    let message: String\n}\n```\n\n설명:\n\nNetworkError Enum: 이 Enum은 발생할 수 있는 가능한 네트워크 관련 오류를 나열하여 오류 처리를 더 쉽게 할 수 있게 합니다.\n\n- badURL: 유효하지 않은 URL을 나타냄.\n- requestFailed: 네트워크 요청 실패를 나타내며 원래 오류를 저장함.\n- invalidResponse: 받은 응답이 유효하지 않음을 나타냄.\n- dataNotFound: 응답에서 기대하는 데이터를 찾을 수 없음을 나타냄.\n- decodingFailed: 응답 데이터를 기대하는 타입으로 디코딩하는 데 실패함을 나타냄.\n- encodingFailed: 요청 매개변수 인코딩 실패를 나타냄.\n- notFound: 404 오류를 나타냄.\n- internalServerError: 500 오류를 나타냄.\n- unknownError: 연결된 상태 코드와 함께 알 수 없는 오류를 나타냄.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n표 태그를 Markdown 형식으로 변경하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n네트워크 요청 프로토콜: 모든 네트워크 요청이 따라야 하는 구조를 정의합니다.\n\n- url: 엔드포인트 URL입니다.\n- method: HTTP 메서드(GET, POST 등)입니다.\n- headers: 요청에 필요한 헤더입니다.\n- parameters: 인코딩 가능 프로토콜을 준수하는 요청 매개변수입니다.\n\nHTTPMethod Enum: 요청에 사용되는 다양한 HTTP 메서드를 나타냅니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nHTTPHeader Enum: 일반적인 HTTP 헤더 필드를 나타냅니다.\n\nContentType Enum: HTTP 헤더의 일반적인 콘텐츠 유형을 나타냅니다.\n\n# 단계 3: URLRequest 생성을 위해 NetworkRequest 확장\n\nNetworkRequest 프로토콜을 확장하여 URLRequest 객체를 생성하는 메서드를 포함시킵니다. 이 확장은 HTTP 헤더 및 매개변수 설정을 처리합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\nextension NetworkRequest {\n    func urlRequest() throws -> URLRequest {\n        guard let url = url else {\n            throw NetworkError.badURL\n        }\n\n        var request = URLRequest(url: url)\n        request.httpMethod = method.rawValue\n\n        if let headers = headers {\n            for (key, value) in headers {\n                request.setValue(value, forHTTPHeaderField: key.rawValue)\n            }\n        }\n\n        if let parameters = parameters {\n            if method == .get {\n                var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false)\n                let parameterData = try JSONEncoder().encode(parameters)\n                let parameterDictionary = try JSONSerialization.jsonObject(with: parameterData, options: []) as? [String: Any]\n                urlComponents?.queryItems = parameterDictionary?.map { URLQueryItem(name: $0.key, value: \"\\($0.value)\") }\n                request.url = urlComponents?.url\n            } else {\n                do {\n                    let jsonData = try JSONEncoder().encode(parameters)\n                    request.httpBody = jsonData\n                } catch {\n                    throw NetworkError.encodingFailed(error)\n                }\n            }\n        }\n\n        return request\n    }\n}\n```\n\n해설:\n\nURLRequest 생성 메소드: NetworkRequest를 URLRequest 객체로 변환합니다.\n\n- 유효한 URL을 확인하고, 그렇지 않으면 badURL 오류를 발생시킵니다.\n- HTTP 메소드 설정합니다.\n- 제공된 헤더를 설정합니다.\n- 매개변수를 인코딩하고 설정합니다:\n  - GET 요청의 경우, 매개변수를 쿼리 항목으로 추가합니다.\n  - 다른 메소드의 경우, 매개변수를 JSON으로 인코딩하고 요청 본문으로 설정합니다.\n- 인코딩에 실패하면 encodingFailed 오류를 발생시킵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 4: NetworkManager 구현\n\nNetworkManager는 네트워크 요청을 수행하고 응답을 처리하는 싱글톤 클래스입니다. 이 클래스는 역 호환성을 위해 async/await 및 completion handlers를 모두 지원합니다.\n\n# Async/Await 구현\n\n```js\nimport Foundation\nimport UIKit\n\nclass NetworkManager {\n    static let shared = NetworkManager()\n    private let urlSession = URLSession.shared\n\n    private init() {}\n\n    func perform<T: Decodable>(_ request: NetworkRequest, decodeTo type: T.Type) async throws -> T {\n        if #available(iOS 15.0, *) {\n            let urlRequest = try request.urlRequest()\n            let (data, response) = try await urlSession.data(for: urlRequest)\n            try processResponse(response: response)\n            return try decodeData(data: data, type: T.self)\n        } else {\n            return try await withCheckedThrowingContinuation { continuation in\n                perform(request, decodeTo: type) { result in\n                    switch result {\n                    case .success(let data):\n                        continuation.resume(returning: data)\n                    case .failure(let error):\n                        continuation.resume(throwing: error)\n                    }\n                }\n            }\n        }\n    }\n\n    private func decodeData<T: Decodable>(data: Data, type: T.Type) throws -> T {\n        do {\n            let decodedObject = try JSONDecoder().decode(T.self, from: data)\n            return decodedObject\n        } catch let decodingError {\n            throw NetworkError.decodingFailed(decodingError)\n        }\n    }\n\n    private func processResponse(response: URLResponse?) throws {\n        guard let httpResponse = response as? HTTPURLResponse else {\n            throw NetworkError.invalidResponse\n        }\n\n        switch httpResponse.statusCode {\n        case 200...299:\n            return\n        case 404:\n            throw NetworkError.notFound\n        case 500:\n            throw NetworkError.internalServerError\n        default:\n            throw NetworkError.unknownError(statusCode: httpResponse.statusCode)\n        }\n    }\n\n    func downloadFile(from url: URL) async throws -> URL {\n        if #available(iOS 15.0, *) {\n            let (localURL, response) = try await urlSession.download(from: url)\n            try processResponse(response: response)\n            return localURL\n        } else {\n            return try await withCheckedThrowingContinuation { continuation in\n                downloadFile(from: url) { result in\n                    switch result {\n                    case .success(let localURL):\n                        continuation.resume(returning: localURL)\n                    case .failure(let error):\n                        continuation.resume(throwing: error)\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n설명:\n\nNetworkManager Singleton: 네트워크 요청을 수행하기 위한 단일 인스턴스를 제공합니다.\n\n- shared: 싱글톤 인스턴스입니다.\n- urlSession: 네트워크 작업을 위한 공유 URLSession 인스턴스입니다.\n- init(): 여러 인스턴스 생성을 방지하기 위한 비공개 이니셜라이저입니다.\n\nperform 메서드:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- iOS 15.0 이상인 경우:\n  - NetworkRequest에서 URLRequest를 생성합니다.\n  - 요청을 비동기적으로 처리합니다.\n  - 응답을 처리합니다.\n  - 응답 데이터를 지정된 유형으로 디코딩합니다.\n- 이전 iOS 버전의 경우:\n  - 완료 핸들러를 사용하여 요청을 처리하는 데 continuation을 사용합니다.\n\ndecodeData 메서드: 데이터를 지정된 유형으로 디코딩하고 디코딩에 실패하면 decodingFailed 오류를 throw합니다.\n\nprocessResponse 메서드: HTTP 응답을 유효성 검사하고 상태 코드에 따라 적절한 오류를 throw합니다.\n\ndownloadFile 메서드: 지정된 URL에서 파일을 다운로드하며 역호환성을 위해 async/await 및 완료 핸들러를 모두 지원합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 완료 핸들러 구현\n\n오래된 iOS 버전을 위해 완료 핸들러를 사용하여 네트워크 요청을 구현합니다.\n\n```swift\nextension NetworkManager {\n    private func perform<T: Decodable>(_ request: NetworkRequest, decodeTo type: T.Type, completion: @escaping (Result<T, NetworkError>) -> Void) {\n        do {\n            let urlRequest = try request.urlRequest()\n            urlSession.dataTask(with: urlRequest) { data, response, error in\n                if let error = error {\n                    completion(.failure(.requestFailed(error)))\n                    return\n                }\n\n                guard let data = data else {\n                    completion(.failure(.dataNotFound))\n                    return\n                }\n\n                do {\n                    try self.processResponse(response: response)\n                    let decodedObject = try self.decodeData(data: data, type: T.self)\n                    completion(.success(decodedObject))\n                } catch {\n                    completion(.failure(error as? NetworkError ?? .invalidResponse))\n                }\n            }.resume()\n        } catch {\n            completion(.failure(error as? NetworkError ?? .invalidResponse))\n        }\n    }\n\n    private func downloadFile(from url: URL, completion: @escaping (Result<URL, NetworkError>) -> Void) {\n        urlSession.downloadTask(with: url) { localURL, response, error in\n            if let error = error {\n                completion(.failure(.requestFailed(error)))\n                return\n            }\n\n            guard let localURL = localURL else {\n                completion(.failure(.dataNotFound))\n                return\n            }\n\n            do {\n                try self.processResponse(response: response)\n                completion(.success(localURL))\n            } catch {\n                completion(.failure(error as? NetworkError ?? .invalidResponse))\n            }\n        }.resume()\n    }\n}\n```\n\n설명:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n완료 핸들러를 사용하여 perform 메소드:\n\n- URLRequest를 생성하고 URLSession.dataTask를 사용하여 요청을 수행합니다.\n- 오류를 처리하고 응답 유효성을 확인합니다.\n- 응답 데이터를 디코딩하고 결과로 완료 핸들러를 호출합니다.\n\n완료 핸들러를 사용하여 downloadFile 메소드:\n\n- URLSession.downloadTask를 사용하여 파일을 다운로드합니다.\n- 오류를 처리하고 응답 유효성을 확인합니다.\n- 다운로드된 파일의 로컬 URL로 완료 핸들러를 호출합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 5: 이미지 다운로드 및 캐싱\n\n이미지 다운로드를 처리하고 선택적으로 캐싱하는 NetworkManager를 확장합니다.\n\n```js\nextension NetworkManager {\n    func downloadImage(from url: URL, cacheEnabled: Bool = true) async -> Result<UIImage, NetworkError> {\n        do {\n            if cacheEnabled, let cachedImage = try getCachedImage(for: url) {\n                return .success(cachedImage)\n            }\n\n            let localURL = try await NetworkManager.shared.downloadFile(from: url)\n            let imageData = try Data(contentsOf: localURL)\n            if let image = UIImage(data: imageData) {\n                if cacheEnabled {\n                    cacheImage(imageData, for: url)\n                }\n                return .success(image)\n            } else {\n                return .failure(.decodingFailed(DecodingError(message: \"Failed to decode image data\")))\n            }\n        } catch {\n            return .failure(error as? NetworkError ?? .invalidResponse)\n        }\n    }\n\n    private func cacheImage(_ imageData: Data, for url: URL) {\n        let cachedResponse = CachedURLResponse(response: HTTPURLResponse(url: url, statusCode: 200, httpVersion: nil, headerFields: nil)!, data: imageData)\n        URLCache.shared.storeCachedResponse(cachedResponse, for: URLRequest(url: url))\n        checkAndClearCache()\n    }\n\n    private func checkAndClearCache() {\n        let cacheSize = URLCache.shared.currentDiskUsage\n        let cacheLimit: Int = 100 * 1024 * 1024 // 100 MB\n        if cacheSize > cacheLimit {\n            URLCache.shared.removeAllCachedResponses()\n        }\n    }\n\n    private func getCachedImage(for url: URL) throws -> UIImage? {\n        if let cachedResponse = URLCache.shared.cachedResponse(for: URLRequest(url: url)),\n           let image = UIImage(data: cachedResponse.data) {\n            return image\n        }\n        return nil\n    }\n}\n```\n\n설명:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 친절한 톤으로 번역한 내용입니다.\n\ndownloadImage 메서드: URL에서 이미지를 다운로드하며 선택적으로 캐싱합니다.\n\n- 캐싱이 활성화된 경우 먼저 캐시를 확인합니다.\n- async/await 또는 이전 iOS 버전을 위한 완료 핸들러를 사용하여 다운로드를 수행합니다.\n- 응답을 처리하고 이미지 데이터를 디코딩합니다.\n- 캐싱이 활성화된 경우 이미지를 캐시에 저장합니다.\n\ncacheImage 메서드: 이미지를 캐시에 저장합니다.\n\nloadImageFromCache 메서드: 캐시에서 이미지를 로드합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 예시 사용법\n\n# API 호출 요청\n\n```js\nstruct ExampleAPIRequest: NetworkRequest {\n    var url: URL? {\n        return URL(string: \"https://api.example.com/data\")\n    }\n    var method: HTTPMethod {\n        return .get\n    }\n    var headers: [HTTPHeader: String]? {\n        return [.contentType: ContentType.json.rawValue]\n    }\n    var parameters: Encodable? {\n        return ExampleParameters(param1: \"value1\", param2: \"value2\")\n    }\n}\n\nstruct ExampleParameters: Encodable {\n    let param1: String\n    let param2: String\n}\n\nstruct ExampleData: Decodable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchExampleData() async {\n    let request = ExampleAPIRequest()\n\n    if #available(iOS 15.0, *) {\n        do {\n            let data: ExampleData = try await NetworkManager.shared.perform(request, decodeTo: ExampleData.self)\n            print(\"데이터 가져오기 성공: \\(data)\")\n        } catch {\n            print(\"데이터 가져오기 실패: \\(error)\")\n        }\n    } else {\n        NetworkManager.shared.perform(request, decodeTo: ExampleData.self) { result in\n            switch result {\n            case .success(let data):\n                print(\"데이터 가져오기 성공: \\(data)\")\n            case .failure(let error):\n                print(\"데이터 가져오기 실패: \\(error)\")\n            }\n        }\n    }\n}\n```\n\n설명:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`ExampleAPIRequest Struct`: 네트워크 요청을 나타내며 `NetworkRequest` 프로토콜을 준수하는 구조체입니다.\n\n- URL, HTTP 메서드, 헤더 및 매개변수를 지정합니다.\n\n`ExampleParameters Struct`: `Encodable`을 준수하는 요청 매개변수를 나타내는 구조체입니다.\n\n`ExampleData Struct`: `Decodable`을 준수하는 응답 데이터를 나타내는 구조체입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`table` 태그를 Markdown 형식으로 변경해주세요.\n\nfetchExampleData 함수: async/await를 활용하여 요청을 수행하고 응답을 처리하는 방법을 보여줍니다.\n\n# 이미지 다운로드\n\n```js\nimport SwiftUI\n\nstruct HomeView: View {\n    @State private var image: UIImage? = nil\n\n    var body: some View {\n        VStack {\n            if let image = image {\n                Image(uiImage: image)\n                    .resizable()\n                    .aspectRatio(contentMode: .fit)\n                    .frame(width: 200, height: 200)\n            } else {\n                ProgressView()\n            }\n        }\n        .onAppear {\n            let imageURL = URL(string: \"https://picsum.photos/200/200\")!\n            Task {\n                let result = await NetworkManager.shared.downloadImage(from: imageURL, cacheEnabled: false)\n                switch result {\n                case .success(let success):\n                    self.image = success\n                case .failure(_):\n                    self.image = nil\n                }\n            }\n        }\n    }\n}\n\nstruct HomeView_Previews: PreviewProvider {\n    static var previews: some View {\n        HomeView()\n    }\n}\n```\n\n설명:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nHomeView Struct는 URL에서 다운로드된 이미지를 표시하는 SwiftUI 뷰입니다.\n\n- 이미지 상태를 관리하기 위해 @State를 사용합니다.\n- 이미지를 로드하는 동안 ProgressView를 표시합니다.\n- appear될 때 async/await를 사용하여 이미지를 다운로드합니다.\n- 다운로드 결과를 처리합니다.\n\n# 파일 다운로드\n\n```js\nimport Foundation\n\nfunc downloadExampleFile() async {\n    let fileURL = URL(string: \"https://example.com/file.zip\")!\n\n    if #available(iOS 15.0, *) {\n        do {\n            let localURL = try await NetworkManager.shared.downloadFile(from: fileURL)\n            print(\"다운로드한 파일 경로: \\(localURL)\")\n        } catch {\n            print(\"파일 다운로드 실패: \\(error)\")\n        }\n    } else {\n        NetworkManager.shared.downloadFile(from: fileURL) { result in\n            switch result {\n            case .success(let localURL):\n                print(\"다운로드한 파일 경로: \\(localURL)\")\n            case .failure(let error):\n                print(\"파일 다운로드 실패: \\(error)\")\n            }\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n설명:\n\ndownloadExampleFile 함수: async/await를 사용하여 파일을 다운로드하는 방법을 보여줍니다.\n\n- 이전 iOS 버전을 위한 async/await 및 완료 핸들러를 모두 지원합니다.\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이러한 네트워크 계층이 구현되면 iOS 애플리케이션이 API 요청을 처리하고 응답을 처리하며 파일 다운로드를 관리하는 데 더 잘 준비될 것입니다. 이 구조화된 접근 방식은 코드베이스를 더 깔끔하게 만들 뿐만 아니라 유지 보수가 용이하고 확장성이 뛰어난 장점을 제공합니다.\n","ogImage":{"url":"/assets/img/2024-06-19-BuildingaRobustNetworkLayeriniOSUsingSwift_0.png"},"coverImage":"/assets/img/2024-06-19-BuildingaRobustNetworkLayeriniOSUsingSwift_0.png","tag":["Tech"],"readingTime":21},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-BuildingaRobustNetworkLayeriniOSUsingSwift_0.png\" alt=\"이미지\"></p>\n<p>현대 iOS 개발에서 API 호출 및 데이터 검색을 효율적이고 안전하게 처리하기 위해 잘 구조화된 네트워크 레이어를 갖는 것이 중요합니다. 이 기사에서는 제공된 코드를 기반으로 Swift로 견고한 네트워크 레이어를 만드는 방법을 안내합니다.</p>\n<h1>개요</h1>\n<p>우리의 네트워크 레이어는 여러 중요한 구성 요소로 구성됩니다:</p>\n<p></p>\n<ul>\n<li>NetworkError: 다양한 종류의 네트워크 오류를 처리하기 위한 포괄적 인템.</li>\n<li>NetworkRequest: 네트워크 요청에 필요한 속성과 메소드를 정의하는 프로토콜.</li>\n<li>NetworkManager: 네트워크 요청 수행, 응답 해석 및 파일 다운로드 처리를 담당하는 싱글톤 클래스입니다.</li>\n</ul>\n<p>또한 이러한 구성 요소를 예시 API 호출 및 파일 다운로드와 함께 사용하는 방법을 보여줄 것입니다.</p>\n<h1>단계 1: 네트워크 오류 정의하기</h1>\n<p>다양한 네트워크 관련 오류를 깨끗하고 조직된 방식으로 처리하는 데 도움이 되는 NetworkError 열거형을 정의하는 것부터 시작해보겠습니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Foundation</span>\n\nenum <span class=\"hljs-title class_\">NetworkError</span>: <span class=\"hljs-title class_\">Error</span> {\n    <span class=\"hljs-keyword\">case</span> badURL\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">requestFailed</span>(<span class=\"hljs-title class_\">Error</span>)\n    <span class=\"hljs-keyword\">case</span> invalidResponse\n    <span class=\"hljs-keyword\">case</span> dataNotFound\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">decodingFailed</span>(<span class=\"hljs-title class_\">Error</span>)\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">encodingFailed</span>(<span class=\"hljs-title class_\">Error</span>)\n    <span class=\"hljs-keyword\">case</span> notFound\n    <span class=\"hljs-keyword\">case</span> internalServerError\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">unknownError</span>(<span class=\"hljs-attr\">statusCode</span>: <span class=\"hljs-title class_\">Int</span>)\n}\n\nstruct <span class=\"hljs-title class_\">DecodingError</span>: <span class=\"hljs-title class_\">Error</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>\n}\n</code></pre>\n<p>설명:</p>\n<p>NetworkError Enum: 이 Enum은 발생할 수 있는 가능한 네트워크 관련 오류를 나열하여 오류 처리를 더 쉽게 할 수 있게 합니다.</p>\n<ul>\n<li>badURL: 유효하지 않은 URL을 나타냄.</li>\n<li>requestFailed: 네트워크 요청 실패를 나타내며 원래 오류를 저장함.</li>\n<li>invalidResponse: 받은 응답이 유효하지 않음을 나타냄.</li>\n<li>dataNotFound: 응답에서 기대하는 데이터를 찾을 수 없음을 나타냄.</li>\n<li>decodingFailed: 응답 데이터를 기대하는 타입으로 디코딩하는 데 실패함을 나타냄.</li>\n<li>encodingFailed: 요청 매개변수 인코딩 실패를 나타냄.</li>\n<li>notFound: 404 오류를 나타냄.</li>\n<li>internalServerError: 500 오류를 나타냄.</li>\n<li>unknownError: 연결된 상태 코드와 함께 알 수 없는 오류를 나타냄.</li>\n</ul>\n<p></p>\n<p>표 태그를 Markdown 형식으로 변경하세요.</p>\n<p></p>\n<p>네트워크 요청 프로토콜: 모든 네트워크 요청이 따라야 하는 구조를 정의합니다.</p>\n<ul>\n<li>url: 엔드포인트 URL입니다.</li>\n<li>method: HTTP 메서드(GET, POST 등)입니다.</li>\n<li>headers: 요청에 필요한 헤더입니다.</li>\n<li>parameters: 인코딩 가능 프로토콜을 준수하는 요청 매개변수입니다.</li>\n</ul>\n<p>HTTPMethod Enum: 요청에 사용되는 다양한 HTTP 메서드를 나타냅니다.</p>\n<p></p>\n<p>HTTPHeader Enum: 일반적인 HTTP 헤더 필드를 나타냅니다.</p>\n<p>ContentType Enum: HTTP 헤더의 일반적인 콘텐츠 유형을 나타냅니다.</p>\n<h1>단계 3: URLRequest 생성을 위해 NetworkRequest 확장</h1>\n<p>NetworkRequest 프로토콜을 확장하여 URLRequest 객체를 생성하는 메서드를 포함시킵니다. 이 확장은 HTTP 헤더 및 매개변수 설정을 처리합니다.</p>\n<p></p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">NetworkRequest</span> {\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">urlRequest</span>() <span class=\"hljs-keyword\">throws</span> -> <span class=\"hljs-type\">URLRequest</span> {\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> url <span class=\"hljs-operator\">=</span> url <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-type\">NetworkError</span>.badURL\n        }\n\n        <span class=\"hljs-keyword\">var</span> request <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">URLRequest</span>(url: url)\n        request.httpMethod <span class=\"hljs-operator\">=</span> method.rawValue\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> headers <span class=\"hljs-operator\">=</span> headers {\n            <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> headers {\n                request.setValue(value, forHTTPHeaderField: key.rawValue)\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> parameters <span class=\"hljs-operator\">=</span> parameters {\n            <span class=\"hljs-keyword\">if</span> method <span class=\"hljs-operator\">==</span> .get {\n                <span class=\"hljs-keyword\">var</span> urlComponents <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">URLComponents</span>(url: url, resolvingAgainstBaseURL: <span class=\"hljs-literal\">false</span>)\n                <span class=\"hljs-keyword\">let</span> parameterData <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-type\">JSONEncoder</span>().encode(parameters)\n                <span class=\"hljs-keyword\">let</span> parameterDictionary <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-type\">JSONSerialization</span>.jsonObject(with: parameterData, options: []) <span class=\"hljs-keyword\">as?</span> [<span class=\"hljs-type\">String</span>: <span class=\"hljs-keyword\">Any</span>]\n                urlComponents<span class=\"hljs-operator\">?</span>.queryItems <span class=\"hljs-operator\">=</span> parameterDictionary<span class=\"hljs-operator\">?</span>.map { <span class=\"hljs-type\">URLQueryItem</span>(name: <span class=\"hljs-variable\">$0</span>.key, value: <span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\(<span class=\"hljs-variable\">$0</span>.value)</span>\"</span>) }\n                request.url <span class=\"hljs-operator\">=</span> urlComponents<span class=\"hljs-operator\">?</span>.url\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">do</span> {\n                    <span class=\"hljs-keyword\">let</span> jsonData <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-type\">JSONEncoder</span>().encode(parameters)\n                    request.httpBody <span class=\"hljs-operator\">=</span> jsonData\n                } <span class=\"hljs-keyword\">catch</span> {\n                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-type\">NetworkError</span>.encodingFailed(error)\n                }\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> request\n    }\n}\n</code></pre>\n<p>해설:</p>\n<p>URLRequest 생성 메소드: NetworkRequest를 URLRequest 객체로 변환합니다.</p>\n<ul>\n<li>유효한 URL을 확인하고, 그렇지 않으면 badURL 오류를 발생시킵니다.</li>\n<li>HTTP 메소드 설정합니다.</li>\n<li>제공된 헤더를 설정합니다.</li>\n<li>매개변수를 인코딩하고 설정합니다:\n<ul>\n<li>GET 요청의 경우, 매개변수를 쿼리 항목으로 추가합니다.</li>\n<li>다른 메소드의 경우, 매개변수를 JSON으로 인코딩하고 요청 본문으로 설정합니다.</li>\n</ul>\n</li>\n<li>인코딩에 실패하면 encodingFailed 오류를 발생시킵니다.</li>\n</ul>\n<p></p>\n<h1>단계 4: NetworkManager 구현</h1>\n<p>NetworkManager는 네트워크 요청을 수행하고 응답을 처리하는 싱글톤 클래스입니다. 이 클래스는 역 호환성을 위해 async/await 및 completion handlers를 모두 지원합니다.</p>\n<h1>Async/Await 구현</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Foundation</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">UIKit</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NetworkManager</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> shared = <span class=\"hljs-title class_\">NetworkManager</span>()\n    private <span class=\"hljs-keyword\">let</span> urlSession = <span class=\"hljs-title class_\">URLSession</span>.<span class=\"hljs-property\">shared</span>\n\n    private <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) {}\n\n    func perform&#x3C;<span class=\"hljs-attr\">T</span>: <span class=\"hljs-title class_\">Decodable</span>>(_ <span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">NetworkRequest</span>, decodeTo <span class=\"hljs-attr\">type</span>: T.<span class=\"hljs-property\">Type</span>) <span class=\"hljs-keyword\">async</span> throws -> T {\n        <span class=\"hljs-keyword\">if</span> #<span class=\"hljs-title function_\">available</span>(<span class=\"hljs-params\">iOS <span class=\"hljs-number\">15.0</span>, *</span>) {\n            <span class=\"hljs-keyword\">let</span> urlRequest = <span class=\"hljs-keyword\">try</span> request.<span class=\"hljs-title function_\">urlRequest</span>()\n            <span class=\"hljs-keyword\">let</span> (data, response) = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> urlSession.<span class=\"hljs-title function_\">data</span>(<span class=\"hljs-attr\">for</span>: urlRequest)\n            <span class=\"hljs-keyword\">try</span> <span class=\"hljs-title function_\">processResponse</span>(<span class=\"hljs-attr\">response</span>: response)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-title function_\">decodeData</span>(<span class=\"hljs-attr\">data</span>: data, <span class=\"hljs-attr\">type</span>: T.<span class=\"hljs-property\">self</span>)\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> withCheckedThrowingContinuation { continuation <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-title function_\">perform</span>(<span class=\"hljs-params\">request, decodeTo: type</span>) { result <span class=\"hljs-keyword\">in</span>\n                    <span class=\"hljs-keyword\">switch</span> result {\n                    <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-keyword\">let</span> data):\n                        continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">returning</span>: data)\n                    <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">failure</span>(<span class=\"hljs-keyword\">let</span> error):\n                        continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">throwing</span>: error)\n                    }\n                }\n            }\n        }\n    }\n\n    private func decodeData&#x3C;<span class=\"hljs-attr\">T</span>: <span class=\"hljs-title class_\">Decodable</span>>(<span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">Data</span>, <span class=\"hljs-attr\">type</span>: T.<span class=\"hljs-property\">Type</span>) throws -> T {\n        <span class=\"hljs-keyword\">do</span> {\n            <span class=\"hljs-keyword\">let</span> decodedObject = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-title class_\">JSON</span>Decoder().<span class=\"hljs-title function_\">decode</span>(T.<span class=\"hljs-property\">self</span>, <span class=\"hljs-attr\">from</span>: data)\n            <span class=\"hljs-keyword\">return</span> decodedObject\n        } <span class=\"hljs-keyword\">catch</span> <span class=\"hljs-keyword\">let</span> decodingError {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">NetworkError</span>.<span class=\"hljs-title function_\">decodingFailed</span>(decodingError)\n        }\n    }\n\n    private func <span class=\"hljs-title function_\">processResponse</span>(<span class=\"hljs-attr\">response</span>: <span class=\"hljs-title class_\">URLResponse</span>?) throws {\n        guard <span class=\"hljs-keyword\">let</span> httpResponse = response <span class=\"hljs-keyword\">as</span>? <span class=\"hljs-title class_\">HTTPURLResponse</span> <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">NetworkError</span>.<span class=\"hljs-property\">invalidResponse</span>\n        }\n\n        <span class=\"hljs-keyword\">switch</span> httpResponse.<span class=\"hljs-property\">statusCode</span> {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">200.</span>.<span class=\"hljs-number\">.299</span>:\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">404</span>:\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">NetworkError</span>.<span class=\"hljs-property\">notFound</span>\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">500</span>:\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">NetworkError</span>.<span class=\"hljs-property\">internalServerError</span>\n        <span class=\"hljs-attr\">default</span>:\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">NetworkError</span>.<span class=\"hljs-title function_\">unknownError</span>(<span class=\"hljs-attr\">statusCode</span>: httpResponse.<span class=\"hljs-property\">statusCode</span>)\n        }\n    }\n\n    func <span class=\"hljs-title function_\">downloadFile</span>(<span class=\"hljs-keyword\">from</span> <span class=\"hljs-attr\">url</span>: <span class=\"hljs-variable constant_\">URL</span>) <span class=\"hljs-keyword\">async</span> throws -> <span class=\"hljs-variable constant_\">URL</span> {\n        <span class=\"hljs-keyword\">if</span> #<span class=\"hljs-title function_\">available</span>(<span class=\"hljs-params\">iOS <span class=\"hljs-number\">15.0</span>, *</span>) {\n            <span class=\"hljs-keyword\">let</span> (localURL, response) = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> urlSession.<span class=\"hljs-title function_\">download</span>(<span class=\"hljs-attr\">from</span>: url)\n            <span class=\"hljs-keyword\">try</span> <span class=\"hljs-title function_\">processResponse</span>(<span class=\"hljs-attr\">response</span>: response)\n            <span class=\"hljs-keyword\">return</span> localURL\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> withCheckedThrowingContinuation { continuation <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-title function_\">downloadFile</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>: url</span>) { result <span class=\"hljs-keyword\">in</span>\n                    <span class=\"hljs-keyword\">switch</span> result {\n                    <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-keyword\">let</span> localURL):\n                        continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">returning</span>: localURL)\n                    <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">failure</span>(<span class=\"hljs-keyword\">let</span> error):\n                        continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">throwing</span>: error)\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p></p>\n<p>설명:</p>\n<p>NetworkManager Singleton: 네트워크 요청을 수행하기 위한 단일 인스턴스를 제공합니다.</p>\n<ul>\n<li>shared: 싱글톤 인스턴스입니다.</li>\n<li>urlSession: 네트워크 작업을 위한 공유 URLSession 인스턴스입니다.</li>\n<li>init(): 여러 인스턴스 생성을 방지하기 위한 비공개 이니셜라이저입니다.</li>\n</ul>\n<p>perform 메서드:</p>\n<p></p>\n<ul>\n<li>iOS 15.0 이상인 경우:\n<ul>\n<li>NetworkRequest에서 URLRequest를 생성합니다.</li>\n<li>요청을 비동기적으로 처리합니다.</li>\n<li>응답을 처리합니다.</li>\n<li>응답 데이터를 지정된 유형으로 디코딩합니다.</li>\n</ul>\n</li>\n<li>이전 iOS 버전의 경우:\n<ul>\n<li>완료 핸들러를 사용하여 요청을 처리하는 데 continuation을 사용합니다.</li>\n</ul>\n</li>\n</ul>\n<p>decodeData 메서드: 데이터를 지정된 유형으로 디코딩하고 디코딩에 실패하면 decodingFailed 오류를 throw합니다.</p>\n<p>processResponse 메서드: HTTP 응답을 유효성 검사하고 상태 코드에 따라 적절한 오류를 throw합니다.</p>\n<p>downloadFile 메서드: 지정된 URL에서 파일을 다운로드하며 역호환성을 위해 async/await 및 완료 핸들러를 모두 지원합니다.</p>\n<p></p>\n<h1>완료 핸들러 구현</h1>\n<p>오래된 iOS 버전을 위해 완료 핸들러를 사용하여 네트워크 요청을 구현합니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">NetworkManager</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">perform</span>&#x3C;<span class=\"hljs-type\">T</span>: <span class=\"hljs-type\">Decodable</span>>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">request</span>: <span class=\"hljs-type\">NetworkRequest</span>, <span class=\"hljs-params\">decodeTo</span> <span class=\"hljs-params\">type</span>: <span class=\"hljs-type\">T</span>.<span class=\"hljs-keyword\">Type</span>, <span class=\"hljs-params\">completion</span>: <span class=\"hljs-keyword\">@escaping</span> (<span class=\"hljs-type\">Result</span>&#x3C;<span class=\"hljs-type\">T</span>, <span class=\"hljs-type\">NetworkError</span>>) -> <span class=\"hljs-type\">Void</span>) {\n        <span class=\"hljs-keyword\">do</span> {\n            <span class=\"hljs-keyword\">let</span> urlRequest <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">try</span> request.urlRequest()\n            urlSession.dataTask(with: urlRequest) { data, response, error <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> error <span class=\"hljs-operator\">=</span> error {\n                    completion(.failure(.requestFailed(error)))\n                    <span class=\"hljs-keyword\">return</span>\n                }\n\n                <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> data <span class=\"hljs-operator\">=</span> data <span class=\"hljs-keyword\">else</span> {\n                    completion(.failure(.dataNotFound))\n                    <span class=\"hljs-keyword\">return</span>\n                }\n\n                <span class=\"hljs-keyword\">do</span> {\n                    <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">self</span>.processResponse(response: response)\n                    <span class=\"hljs-keyword\">let</span> decodedObject <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">self</span>.decodeData(data: data, type: <span class=\"hljs-type\">T</span>.<span class=\"hljs-keyword\">self</span>)\n                    completion(.success(decodedObject))\n                } <span class=\"hljs-keyword\">catch</span> {\n                    completion(.failure(error <span class=\"hljs-keyword\">as?</span> <span class=\"hljs-type\">NetworkError</span> <span class=\"hljs-operator\">??</span> .invalidResponse))\n                }\n            }.resume()\n        } <span class=\"hljs-keyword\">catch</span> {\n            completion(.failure(error <span class=\"hljs-keyword\">as?</span> <span class=\"hljs-type\">NetworkError</span> <span class=\"hljs-operator\">??</span> .invalidResponse))\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">downloadFile</span>(<span class=\"hljs-params\">from</span> <span class=\"hljs-params\">url</span>: <span class=\"hljs-type\">URL</span>, <span class=\"hljs-params\">completion</span>: <span class=\"hljs-keyword\">@escaping</span> (<span class=\"hljs-type\">Result</span>&#x3C;<span class=\"hljs-type\">URL</span>, <span class=\"hljs-type\">NetworkError</span>>) -> <span class=\"hljs-type\">Void</span>) {\n        urlSession.downloadTask(with: url) { localURL, response, error <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> error <span class=\"hljs-operator\">=</span> error {\n                completion(.failure(.requestFailed(error)))\n                <span class=\"hljs-keyword\">return</span>\n            }\n\n            <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> localURL <span class=\"hljs-operator\">=</span> localURL <span class=\"hljs-keyword\">else</span> {\n                completion(.failure(.dataNotFound))\n                <span class=\"hljs-keyword\">return</span>\n            }\n\n            <span class=\"hljs-keyword\">do</span> {\n                <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">self</span>.processResponse(response: response)\n                completion(.success(localURL))\n            } <span class=\"hljs-keyword\">catch</span> {\n                completion(.failure(error <span class=\"hljs-keyword\">as?</span> <span class=\"hljs-type\">NetworkError</span> <span class=\"hljs-operator\">??</span> .invalidResponse))\n            }\n        }.resume()\n    }\n}\n</code></pre>\n<p>설명:</p>\n<p></p>\n<p>완료 핸들러를 사용하여 perform 메소드:</p>\n<ul>\n<li>URLRequest를 생성하고 URLSession.dataTask를 사용하여 요청을 수행합니다.</li>\n<li>오류를 처리하고 응답 유효성을 확인합니다.</li>\n<li>응답 데이터를 디코딩하고 결과로 완료 핸들러를 호출합니다.</li>\n</ul>\n<p>완료 핸들러를 사용하여 downloadFile 메소드:</p>\n<ul>\n<li>URLSession.downloadTask를 사용하여 파일을 다운로드합니다.</li>\n<li>오류를 처리하고 응답 유효성을 확인합니다.</li>\n<li>다운로드된 파일의 로컬 URL로 완료 핸들러를 호출합니다.</li>\n</ul>\n<p></p>\n<h1>단계 5: 이미지 다운로드 및 캐싱</h1>\n<p>이미지 다운로드를 처리하고 선택적으로 캐싱하는 NetworkManager를 확장합니다.</p>\n<pre><code class=\"hljs language-js\">extension <span class=\"hljs-title class_\">NetworkManager</span> {\n    func <span class=\"hljs-title function_\">downloadImage</span>(<span class=\"hljs-keyword\">from</span> <span class=\"hljs-attr\">url</span>: <span class=\"hljs-variable constant_\">URL</span>, <span class=\"hljs-attr\">cacheEnabled</span>: <span class=\"hljs-title class_\">Bool</span> = <span class=\"hljs-literal\">true</span>) <span class=\"hljs-keyword\">async</span> -> <span class=\"hljs-title class_\">Result</span>&#x3C;<span class=\"hljs-title class_\">UIImage</span>, <span class=\"hljs-title class_\">NetworkError</span>> {\n        <span class=\"hljs-keyword\">do</span> {\n            <span class=\"hljs-keyword\">if</span> cacheEnabled, <span class=\"hljs-keyword\">let</span> cachedImage = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-title function_\">getCachedImage</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">for</span>: url</span>) {\n                <span class=\"hljs-keyword\">return</span> .<span class=\"hljs-title function_\">success</span>(cachedImage)\n            }\n\n            <span class=\"hljs-keyword\">let</span> localURL = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NetworkManager</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">downloadFile</span>(<span class=\"hljs-attr\">from</span>: url)\n            <span class=\"hljs-keyword\">let</span> imageData = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-title class_\">Data</span>(<span class=\"hljs-attr\">contentsOf</span>: localURL)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> image = <span class=\"hljs-title class_\">UIImage</span>(<span class=\"hljs-attr\">data</span>: imageData) {\n                <span class=\"hljs-keyword\">if</span> cacheEnabled {\n                    <span class=\"hljs-title function_\">cacheImage</span>(imageData, <span class=\"hljs-attr\">for</span>: url)\n                }\n                <span class=\"hljs-keyword\">return</span> .<span class=\"hljs-title function_\">success</span>(image)\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> .<span class=\"hljs-title function_\">failure</span>(.<span class=\"hljs-title function_\">decodingFailed</span>(<span class=\"hljs-title class_\">DecodingError</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"Failed to decode image data\"</span>)))\n            }\n        } <span class=\"hljs-keyword\">catch</span> {\n            <span class=\"hljs-keyword\">return</span> .<span class=\"hljs-title function_\">failure</span>(error <span class=\"hljs-keyword\">as</span>? <span class=\"hljs-title class_\">NetworkError</span> ?? .<span class=\"hljs-property\">invalidResponse</span>)\n        }\n    }\n\n    private func <span class=\"hljs-title function_\">cacheImage</span>(<span class=\"hljs-params\">_ imageData: Data, <span class=\"hljs-keyword\">for</span> url: URL</span>) {\n        <span class=\"hljs-keyword\">let</span> cachedResponse = <span class=\"hljs-title class_\">CachedURLResponse</span>(<span class=\"hljs-attr\">response</span>: <span class=\"hljs-title class_\">HTTPURLResponse</span>(<span class=\"hljs-attr\">url</span>: url, <span class=\"hljs-attr\">statusCode</span>: <span class=\"hljs-number\">200</span>, <span class=\"hljs-attr\">httpVersion</span>: nil, <span class=\"hljs-attr\">headerFields</span>: nil)!, <span class=\"hljs-attr\">data</span>: imageData)\n        <span class=\"hljs-title class_\">URLCache</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">storeCachedResponse</span>(cachedResponse, <span class=\"hljs-attr\">for</span>: <span class=\"hljs-title class_\">URLRequest</span>(<span class=\"hljs-attr\">url</span>: url))\n        <span class=\"hljs-title function_\">checkAndClearCache</span>()\n    }\n\n    private func <span class=\"hljs-title function_\">checkAndClearCache</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">let</span> cacheSize = <span class=\"hljs-title class_\">URLCache</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-property\">currentDiskUsage</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">cacheLimit</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">100</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">// 100 MB</span>\n        <span class=\"hljs-keyword\">if</span> cacheSize > cacheLimit {\n            <span class=\"hljs-title class_\">URLCache</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">removeAllCachedResponses</span>()\n        }\n    }\n\n    private func <span class=\"hljs-title function_\">getCachedImage</span>(<span class=\"hljs-keyword\">for</span> <span class=\"hljs-attr\">url</span>: <span class=\"hljs-variable constant_\">URL</span>) throws -> <span class=\"hljs-title class_\">UIImage</span>? {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> cachedResponse = <span class=\"hljs-title class_\">URLCache</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">cachedResponse</span>(<span class=\"hljs-attr\">for</span>: <span class=\"hljs-title class_\">URLRequest</span>(<span class=\"hljs-attr\">url</span>: url)),\n           <span class=\"hljs-keyword\">let</span> image = <span class=\"hljs-title class_\">UIImage</span>(<span class=\"hljs-attr\">data</span>: cachedResponse.<span class=\"hljs-property\">data</span>) {\n            <span class=\"hljs-keyword\">return</span> image\n        }\n        <span class=\"hljs-keyword\">return</span> nil\n    }\n}\n</code></pre>\n<p>설명:</p>\n<p></p>\n<p>다음은 친절한 톤으로 번역한 내용입니다.</p>\n<p>downloadImage 메서드: URL에서 이미지를 다운로드하며 선택적으로 캐싱합니다.</p>\n<ul>\n<li>캐싱이 활성화된 경우 먼저 캐시를 확인합니다.</li>\n<li>async/await 또는 이전 iOS 버전을 위한 완료 핸들러를 사용하여 다운로드를 수행합니다.</li>\n<li>응답을 처리하고 이미지 데이터를 디코딩합니다.</li>\n<li>캐싱이 활성화된 경우 이미지를 캐시에 저장합니다.</li>\n</ul>\n<p>cacheImage 메서드: 이미지를 캐시에 저장합니다.</p>\n<p>loadImageFromCache 메서드: 캐시에서 이미지를 로드합니다.</p>\n<p></p>\n<h1>예시 사용법</h1>\n<h1>API 호출 요청</h1>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">ExampleAPIRequest</span>: <span class=\"hljs-title class_\">NetworkRequest</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">url</span>: <span class=\"hljs-variable constant_\">URL</span>? {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-attr\">string</span>: <span class=\"hljs-string\">\"https://api.example.com/data\"</span>)\n    }\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">method</span>: <span class=\"hljs-title class_\">HTTPMethod</span> {\n        <span class=\"hljs-keyword\">return</span> .<span class=\"hljs-property\">get</span>\n    }\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">headers</span>: [<span class=\"hljs-title class_\">HTTPHeader</span>: <span class=\"hljs-title class_\">String</span>]? {\n        <span class=\"hljs-keyword\">return</span> [.<span class=\"hljs-property\">contentType</span>: <span class=\"hljs-title class_\">ContentType</span>.<span class=\"hljs-property\">json</span>.<span class=\"hljs-property\">rawValue</span>]\n    }\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">parameters</span>: <span class=\"hljs-title class_\">Encodable</span>? {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">ExampleParameters</span>(<span class=\"hljs-attr\">param1</span>: <span class=\"hljs-string\">\"value1\"</span>, <span class=\"hljs-attr\">param2</span>: <span class=\"hljs-string\">\"value2\"</span>)\n    }\n}\n\nstruct <span class=\"hljs-title class_\">ExampleParameters</span>: <span class=\"hljs-title class_\">Encodable</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">param1</span>: <span class=\"hljs-title class_\">String</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">param2</span>: <span class=\"hljs-title class_\">String</span>\n}\n\nstruct <span class=\"hljs-title class_\">ExampleData</span>: <span class=\"hljs-title class_\">Decodable</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">Int</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-title class_\">String</span>\n}\n\nfunc <span class=\"hljs-title function_\">fetchExampleData</span>() <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-title class_\">ExampleAPIRequest</span>()\n\n    <span class=\"hljs-keyword\">if</span> #<span class=\"hljs-title function_\">available</span>(<span class=\"hljs-params\">iOS <span class=\"hljs-number\">15.0</span>, *</span>) {\n        <span class=\"hljs-keyword\">do</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">data</span>: <span class=\"hljs-title class_\">ExampleData</span> = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NetworkManager</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">perform</span>(request, <span class=\"hljs-attr\">decodeTo</span>: <span class=\"hljs-title class_\">ExampleData</span>.<span class=\"hljs-property\">self</span>)\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"데이터 가져오기 성공: \\(data)\"</span>)\n        } <span class=\"hljs-keyword\">catch</span> {\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"데이터 가져오기 실패: \\(error)\"</span>)\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title class_\">NetworkManager</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">perform</span>(<span class=\"hljs-params\">request, decodeTo: ExampleData.self</span>) { result <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">switch</span> result {\n            <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-keyword\">let</span> data):\n                <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"데이터 가져오기 성공: \\(data)\"</span>)\n            <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">failure</span>(<span class=\"hljs-keyword\">let</span> error):\n                <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"데이터 가져오기 실패: \\(error)\"</span>)\n            }\n        }\n    }\n}\n</code></pre>\n<p>설명:</p>\n<p></p>\n<p><code>ExampleAPIRequest Struct</code>: 네트워크 요청을 나타내며 <code>NetworkRequest</code> 프로토콜을 준수하는 구조체입니다.</p>\n<ul>\n<li>URL, HTTP 메서드, 헤더 및 매개변수를 지정합니다.</li>\n</ul>\n<p><code>ExampleParameters Struct</code>: <code>Encodable</code>을 준수하는 요청 매개변수를 나타내는 구조체입니다.</p>\n<p><code>ExampleData Struct</code>: <code>Decodable</code>을 준수하는 응답 데이터를 나타내는 구조체입니다.</p>\n<p></p>\n<p><code>table</code> 태그를 Markdown 형식으로 변경해주세요.</p>\n<p>fetchExampleData 함수: async/await를 활용하여 요청을 수행하고 응답을 처리하는 방법을 보여줍니다.</p>\n<h1>이미지 다운로드</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SwiftUI</span>\n\nstruct <span class=\"hljs-title class_\">HomeView</span>: <span class=\"hljs-title class_\">View</span> {\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">image</span>: <span class=\"hljs-title class_\">UIImage</span>? = nil\n\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">VStack</span> {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> image = image {\n                <span class=\"hljs-title class_\">Image</span>(<span class=\"hljs-attr\">uiImage</span>: image)\n                    .<span class=\"hljs-title function_\">resizable</span>()\n                    .<span class=\"hljs-title function_\">aspectRatio</span>(<span class=\"hljs-attr\">contentMode</span>: .<span class=\"hljs-property\">fit</span>)\n                    .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">200</span>, <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">200</span>)\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-title class_\">ProgressView</span>()\n            }\n        }\n        .<span class=\"hljs-property\">onAppear</span> {\n            <span class=\"hljs-keyword\">let</span> imageURL = <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-attr\">string</span>: <span class=\"hljs-string\">\"https://picsum.photos/200/200\"</span>)!\n            <span class=\"hljs-title class_\">Task</span> {\n                <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NetworkManager</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">downloadImage</span>(<span class=\"hljs-attr\">from</span>: imageURL, <span class=\"hljs-attr\">cacheEnabled</span>: <span class=\"hljs-literal\">false</span>)\n                <span class=\"hljs-keyword\">switch</span> result {\n                <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-keyword\">let</span> success):\n                    self.<span class=\"hljs-property\">image</span> = success\n                <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">failure</span>(_):\n                    self.<span class=\"hljs-property\">image</span> = nil\n                }\n            }\n        }\n    }\n}\n\nstruct <span class=\"hljs-title class_\">HomeView</span><span class=\"hljs-attr\">_Previews</span>: <span class=\"hljs-title class_\">PreviewProvider</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">previews</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">HomeView</span>()\n    }\n}\n</code></pre>\n<p>설명:</p>\n<p></p>\n<p>HomeView Struct는 URL에서 다운로드된 이미지를 표시하는 SwiftUI 뷰입니다.</p>\n<ul>\n<li>이미지 상태를 관리하기 위해 @State를 사용합니다.</li>\n<li>이미지를 로드하는 동안 ProgressView를 표시합니다.</li>\n<li>appear될 때 async/await를 사용하여 이미지를 다운로드합니다.</li>\n<li>다운로드 결과를 처리합니다.</li>\n</ul>\n<h1>파일 다운로드</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Foundation</span>\n\nfunc <span class=\"hljs-title function_\">downloadExampleFile</span>() <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-keyword\">let</span> fileURL = <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-attr\">string</span>: <span class=\"hljs-string\">\"https://example.com/file.zip\"</span>)!\n\n    <span class=\"hljs-keyword\">if</span> #<span class=\"hljs-title function_\">available</span>(<span class=\"hljs-params\">iOS <span class=\"hljs-number\">15.0</span>, *</span>) {\n        <span class=\"hljs-keyword\">do</span> {\n            <span class=\"hljs-keyword\">let</span> localURL = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NetworkManager</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">downloadFile</span>(<span class=\"hljs-attr\">from</span>: fileURL)\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"다운로드한 파일 경로: \\(localURL)\"</span>)\n        } <span class=\"hljs-keyword\">catch</span> {\n            <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"파일 다운로드 실패: \\(error)\"</span>)\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title class_\">NetworkManager</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-title function_\">downloadFile</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>: fileURL</span>) { result <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">switch</span> result {\n            <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-keyword\">let</span> localURL):\n                <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"다운로드한 파일 경로: \\(localURL)\"</span>)\n            <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">failure</span>(<span class=\"hljs-keyword\">let</span> error):\n                <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"파일 다운로드 실패: \\(error)\"</span>)\n            }\n        }\n    }\n}\n</code></pre>\n<p></p>\n<p>설명:</p>\n<p>downloadExampleFile 함수: async/await를 사용하여 파일을 다운로드하는 방법을 보여줍니다.</p>\n<ul>\n<li>이전 iOS 버전을 위한 async/await 및 완료 핸들러를 모두 지원합니다.</li>\n</ul>\n<h1>결론</h1>\n<p></p>\n<p>이러한 네트워크 계층이 구현되면 iOS 애플리케이션이 API 요청을 처리하고 응답을 처리하며 파일 다운로드를 관리하는 데 더 잘 준비될 것입니다. 이 구조화된 접근 방식은 코드베이스를 더 깔끔하게 만들 뿐만 아니라 유지 보수가 용이하고 확장성이 뛰어난 장점을 제공합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}