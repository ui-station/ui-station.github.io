{"pageProps":{"post":{"title":"Ruby on Rails로 OCR 시스템 구축하는 방법","description":"","date":"2024-06-22 22:27","slug":"2024-06-22-HowIbuiltanOCRSystemwithRails","content":"\n친구와의 대화 중에 이 아이디어가 떠올랐어요. 친구가 문서를 스캔하고 분석해야 할 일이 많다는데, 시간을 내기가 어려워한다는 걸 언급했더라구요. 그 일이 어려운 작업으로 들리고, 스트레스를 받고 있다는 걸 알 수 있었어요. 그래서 \"어쩌면 해결책을 찾을 수도 있겠네요\" 라고 말했죠. 그 순간, Ruby와 RTesseract를 사용하여 작은 스크립트를 만들기로 결심했어요. 이 스크립트는 그의 문서 스캔을 도와주는 것뿐만 아니라 이미지에서 텍스트를 추출하기 위한 OCR 작업도 수행했답니다. 이 작업은 상당히 유용했고, 다른 사람들도 이 아이디어의 더 강력한 버전에서 혜택을 받을 수 있을 거라 생각했어요. 그래서 이렇게 Rails 어플리케이션이 탄생했죠.\n\n![OCR 시스템을 Rails로 어떻게 만들었는지](/assets/img/2024-06-22-HowIbuiltanOCRSystemwithRails_0.png)\n\n# 사용할 도구\n\n## 이 프로젝트에서 사용할 도구는 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 루비 온 레일즈: 난 올드 스쿨이라서.\n- Active Storage: 빠르니까.\n- Tailwind CSS: 요즘 누가 안 하는가?\n- Tesseract OCR: 마술사처럼 사진을 단어로 바꿔주지.\n- RTesseract: 우리 앱과 친구되게 만들어 주는 루비 젬이야.\n\n# 단계 1: 재료 준비하기\n\n먼저 레일즈 앱이 필요해. 하나 만들기 위해 다음 명령어를 실행해봐\n\n```js\nrails new ocr\ncd ocr\nrails active_storage:install\nrails db:migrate\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로, Tailwind가 필요합니다.\n\n```js\nbundle add tailwindcss-rails\nrails tailwindcss:install\n```\n\n이걸로 대부분의 작업이 끝날 거예요. 더 자세히 알고 싶다면, Tailwind의 문서를 살펴보세요.\n\n# 단계 2: 모델 생성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모델을 생성하여 파일 첨부 기능이 포함된 모델을 만들어봅시다. 예시를 위해 Document 모델을 생성해보겠습니다:\n원하시는 다른 열을 포함시킬 수 있습니다. 저는 제목 열만을 포함하겠습니다.\n\n```js\nrails generate model Document title:string\nrails db:migrate\n```\n\n# 단계 3: 모델 업데이트\n\n파일 첨부를 다루기 위해 Active Storage를 사용할 것입니다. 이를 통해 모델에 파일을 쉽게 첨부할 수 있습니다. Document 모델을 수정하여 파일 첨부를 포함하도록 해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 단계별로 설명해 드리겠습니다:\n\n- 모델 생성: 이미 제목 속성이 있는 문서 모델을 생성했습니다.\n- Active Storage 관계 추가: 문서 모델을 업데이트하여 하나의 첨부 파일이 있다는 것을 나타냅니다. 이는 Active Storage가 제공하는 has_one_attached 메서드를 사용하여 수행됩니다.\n- 모델 정의: app/models/document.rb에 있는 문서 모델 파일을 열고 다음 코드를 추가하세요:\n\n```ruby\nclass Document < ApplicationRecord\n  has_one_attached :file\nend\n```\n\n- has_one_attached :file: 이 코드는 Rails에게 각 문서 인스턴스가 첨부 파일을 하나 가질 수 있다고 알려줍니다. Active Storage가 첨부를 우리 대신 관리하며, 메타데이터는 데이터베이스에, 실제 파일은 구성된 저장 서비스(로컬 디스크, Amazon S3 등)에 저장됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리 모델에 has_one_attached :file를 추가함으로써, 이제 생성할 컴포넌트가 또 하나 생겼습니다: 컨트롤러.\n\n# 단계 4: 컨트롤러 생성\n\n이제 모델을 설정했으니, 문서를 관리하고 파일 업로드를 처리하는 컨트롤러를 생성할 때입니다.\n\n```js\nrails generate controller Documents\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로, 문서를 업로드하고 표시하는 데 필요한 작업을 정의하겠습니다. app/controllers/documents_controller.rb에 위치한 DocumentsController 파일을 열어 다음 코드로 업데이트하세요:\n\n```js\nclass DocumentsController < ApplicationController\n  def new\n    @document = Document.new\n  end\n\n  def create\n    @document = Document.new(document_params)\n    if @document.save\n      redirect_to @document, notice: '문서가 성공적으로 업로드되었습니다.'\n    else\n      render :new\n    end\n  end\n\n  def show\n    @document = Document.find(params[:id])\n  end\n\n  private\n\n  def document_params\n    params.require(:document).permit(:title, :file)\n  end\nend\n```\n\n- new 액션: 이 액션은 새 Document 객체를 초기화합니다. 이것은 당신의 걸작을 위한 빈 캔버스를 설정하는 것과 같습니다. 여기서 미래의 OCR을 위해 파일을 업로드할 것입니다.\n- create 액션: 이 액션은 새 문서를 생성하는 작업을 처리합니다. 폼 (제목 및 파일)에서 매개변수를 가져와 새 Document 객체를 만들고 저장을 시도합니다. 저장에 성공하면 문서의 표시 페이지로 이동하여 성공 메시지가 표시됩니다. 실패한 경우 새 문서 양식을 다시 렌더링하여 실수를 수정할 수 있습니다. 이 액션에서 또한 파일 업로드를 처리합니다.\n- show 액션: 이 액션은 ID로 문서를 찾아서 표시합니다. 여기에서 마법이 일어날 것이지만, 현재는 파일을 표시만 합니다.\n\n# 단계 5: 뷰 생성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로 뷰를 생성할 차례에요.\n\n아래 내용을 app/views/documents/new.html.erb에 추가해주세요:\n\n```js\n<!-- app/views/documents/new.html.erb -->\n<div class=\"min-h-screen bg-gray-100 flex items-center justify-center\">\n  <div class=\"bg-white p-8 rounded-lg shadow-md w-full max-w-md\">\n    <h2 class=\"text-2xl font-bold mb-6 text-center\">새 문서 업로드</h2>\n\n    <%= form_with model: @document, local: true, class: \"space-y-6\" do |form| %>\n      <% if @document.errors.any? %>\n        <div class=\"bg-red-100 text-red-700 p-4 rounded-lg\">\n          <h3 class=\"font-bold\">제출 과정에 오류가 있습니다:</h3>\n          <ul class=\"list-disc list-inside\">\n            <% @document.errors.full_messages.each do |message| %>\n              <li><%= message %></li>\n            <% end %>\n          </ul>\n        </div>\n      <% end %>\n\n      <div class=\"space-y-2\">\n        <%= form.label :title, class: \"block font-medium text-gray-700\" %>\n        <%= form.text_field :title, class: \"block w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" %>\n      </div>\n\n      <div class=\"space-y-2\">\n        <%= form.label :file, class: \"block font-medium text-gray-700\" %>\n        <%= form.file_field :file, class: \"block w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" %>\n      </div>\n\n      <div>\n        <%= form.submit \"문서 업로드\", class: \"w-full bg-blue-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\" %>\n      </div>\n    <% end %>\n  </div>\n</div>\n```\n\n그리고 app/views/documents/show.html.erb에 다음 내용을 추가해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<p>\n  <strong>Title:</strong>\n  <%= @document.title %>\n</p>\n\n<p>\n  <strong>File:</strong>\n  <%= link_to @document.file.filename.to_s, rails_blob_path(@document.file, disposition: \"attachment\") %>\n</p>\n\n# Step 6: 라우트 추가\n\n이 부분은 Rails가 대부분 처리하기 때문에 작은 단계입니다. config/routes.rb에 다음을 추가해보세요:\n\n```ruby\nRails.application.routes.draw do\n  resources :documents, only: [:new, :create, :show]\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 7: 스토리지 서비스 구성하기\n\n기본적으로 Active Storage는 파일을 저장하기위해 로컬 디스크를 사용합니다. config/storage.yml에서 Amazon S3, Google Cloud Storage 및 Microsoft Azure Blob Storage와 같은 다른 스토리지 서비스를 구성할 수 있습니다.\n\nActive Storage를 사용하면 구성 파일을 업데이트하여 이러한 스토리지 서비스 간에 쉽게 전환할 수 있습니다. 이 유연성을 통해 필요에 가장 적합한 스토리지 솔루션을 선택하고 애플리케이션이 성장함에 따라 확장할 수 있습니다.\n\n여기 우리 앱에서 사용할 구성입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n지금 이 작업을 해보세요. 터미널에 가서 앱을 시작해보세요.\n\n./bin/dev\n\n다음과 같은 내용이 나와야 합니다:\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<table> 태그를 Markdown 형식으로 변경하십시오.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당신의 Gemfile에 Gem을 추가해보세요.\n\n```js\ngem 'rtesseract'\n```\n\n# 단계 9: OCR 메소드 구현하기\n\n문서 모델에 OCR을 수행하는 메소드를 만들어보세요. 아래와 같이 할 수 있어요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```rb\nclass Document < ApplicationRecord\n  has_one_attached :file\n\n  def perform_ocr\n    return unless file.attached?\n\n    file_path = ActiveStorage::Blob.service.send(:path_for, file.key)\n    image = RTesseract.new(file_path)\n    image.to_s\n  end\nend\n```\n\n# 단계 10: 컨트롤러 업데이트하여 OCR 사용\n\nOCR 수행을 위한 액션을 포함하도록 DocumentsController를 수정합니다:\n\n```rb\nclass DocumentsController < ApplicationController\n  def new\n    @document = Document.new\n  end\n\n  def create\n    @document = Document.new(document_params)\n    if @document.save\n      redirect_to @document, notice: '문서가 성공적으로 업로드되었습니다.'\n    else\n      render :new\n    end\n  end\n\n  def show\n    @document = Document.find(params[:id])\n    @ocr_text = @document.perform_ocr\n  end\n\n  private\n\n  def document_params\n    params.require(:document).permit(:title, :file)\n  end\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 11: OCR 텍스트 표시를 위한 뷰 업데이트\n\nshow.html.erb 뷰를 수정하여 OCR 텍스트를 표시합니다:\n\n```js\n<p>\n  <strong>제목:</strong>\n  <%= @document.title %>\n</p>\n\n<p>\n  <strong>파일:</strong>\n  <%= link_to @document.file.filename.to_s, rails_blob_path(@document.file, disposition: \"attachment\") %>\n</p>\n\n<% if @ocr_text.present? %>\n  <p>\n    <strong>OCR 텍스트:</strong>\n    <pre><%= @ocr_text %></pre>\n  </p>\n<% end %>\n```\n\n# 단계 12: Tesseract가 설치되었는지 확인하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시스템에 Tesseract OCR이 설치되어 있는지 확인해주세요. 다음 명령어를 사용하여 운영 체제에 맞게 설치할 수 있습니다:\n\n```js\nmacOS:\nbrew install tesseract\n\nUbuntu:\nsudo apt-get install tesseract-ocr\n```\n\n앱을 실행한 후에는 다음과 같은 결과가 나타납니다:\n\n![OCR 결과](/assets/img/2024-06-22-HowIbuiltanOCRSystemwithRails_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n텍스트에는 개선할 여지가 많이 있어요. 댓글로 의겢나 생각을 알려주세요.\n\n또한, 제 Github에서 전체 소스 코드를 확인하세요: https://github.com/luizcg/ocr\n","ogImage":{"url":"/assets/img/2024-06-22-HowIbuiltanOCRSystemwithRails_0.png"},"coverImage":"/assets/img/2024-06-22-HowIbuiltanOCRSystemwithRails_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>친구와의 대화 중에 이 아이디어가 떠올랐어요. 친구가 문서를 스캔하고 분석해야 할 일이 많다는데, 시간을 내기가 어려워한다는 걸 언급했더라구요. 그 일이 어려운 작업으로 들리고, 스트레스를 받고 있다는 걸 알 수 있었어요. 그래서 \"어쩌면 해결책을 찾을 수도 있겠네요\" 라고 말했죠. 그 순간, Ruby와 RTesseract를 사용하여 작은 스크립트를 만들기로 결심했어요. 이 스크립트는 그의 문서 스캔을 도와주는 것뿐만 아니라 이미지에서 텍스트를 추출하기 위한 OCR 작업도 수행했답니다. 이 작업은 상당히 유용했고, 다른 사람들도 이 아이디어의 더 강력한 버전에서 혜택을 받을 수 있을 거라 생각했어요. 그래서 이렇게 Rails 어플리케이션이 탄생했죠.</p>\n<p><img src=\"/assets/img/2024-06-22-HowIbuiltanOCRSystemwithRails_0.png\" alt=\"OCR 시스템을 Rails로 어떻게 만들었는지\"></p>\n<h1>사용할 도구</h1>\n<h2>이 프로젝트에서 사용할 도구는 다음과 같습니다:</h2>\n<p></p>\n<ul>\n<li>루비 온 레일즈: 난 올드 스쿨이라서.</li>\n<li>Active Storage: 빠르니까.</li>\n<li>Tailwind CSS: 요즘 누가 안 하는가?</li>\n<li>Tesseract OCR: 마술사처럼 사진을 단어로 바꿔주지.</li>\n<li>RTesseract: 우리 앱과 친구되게 만들어 주는 루비 젬이야.</li>\n</ul>\n<h1>단계 1: 재료 준비하기</h1>\n<p>먼저 레일즈 앱이 필요해. 하나 만들기 위해 다음 명령어를 실행해봐</p>\n<pre><code class=\"hljs language-js\">rails <span class=\"hljs-keyword\">new</span> ocr\ncd ocr\nrails <span class=\"hljs-attr\">active_storage</span>:install\nrails <span class=\"hljs-attr\">db</span>:migrate\n</code></pre>\n<p></p>\n<p>다음으로, Tailwind가 필요합니다.</p>\n<pre><code class=\"hljs language-js\">bundle add tailwindcss-rails\nrails <span class=\"hljs-attr\">tailwindcss</span>:install\n</code></pre>\n<p>이걸로 대부분의 작업이 끝날 거예요. 더 자세히 알고 싶다면, Tailwind의 문서를 살펴보세요.</p>\n<h1>단계 2: 모델 생성하기</h1>\n<p></p>\n<p>모델을 생성하여 파일 첨부 기능이 포함된 모델을 만들어봅시다. 예시를 위해 Document 모델을 생성해보겠습니다:\n원하시는 다른 열을 포함시킬 수 있습니다. 저는 제목 열만을 포함하겠습니다.</p>\n<pre><code class=\"hljs language-js\">rails generate model <span class=\"hljs-title class_\">Document</span> <span class=\"hljs-attr\">title</span>:string\nrails <span class=\"hljs-attr\">db</span>:migrate\n</code></pre>\n<h1>단계 3: 모델 업데이트</h1>\n<p>파일 첨부를 다루기 위해 Active Storage를 사용할 것입니다. 이를 통해 모델에 파일을 쉽게 첨부할 수 있습니다. Document 모델을 수정하여 파일 첨부를 포함하도록 해야 합니다.</p>\n<p></p>\n<p>다음은 단계별로 설명해 드리겠습니다:</p>\n<ul>\n<li>모델 생성: 이미 제목 속성이 있는 문서 모델을 생성했습니다.</li>\n<li>Active Storage 관계 추가: 문서 모델을 업데이트하여 하나의 첨부 파일이 있다는 것을 나타냅니다. 이는 Active Storage가 제공하는 has_one_attached 메서드를 사용하여 수행됩니다.</li>\n<li>모델 정의: app/models/document.rb에 있는 문서 모델 파일을 열고 다음 코드를 추가하세요:</li>\n</ul>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Document</span> &#x3C; <span class=\"hljs-title class_ inherited__\">ApplicationRecord</span>\n  has_one_attached <span class=\"hljs-symbol\">:file</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<ul>\n<li>has_one_attached :file: 이 코드는 Rails에게 각 문서 인스턴스가 첨부 파일을 하나 가질 수 있다고 알려줍니다. Active Storage가 첨부를 우리 대신 관리하며, 메타데이터는 데이터베이스에, 실제 파일은 구성된 저장 서비스(로컬 디스크, Amazon S3 등)에 저장됩니다.</li>\n</ul>\n<p></p>\n<p>우리 모델에 has_one_attached :file를 추가함으로써, 이제 생성할 컴포넌트가 또 하나 생겼습니다: 컨트롤러.</p>\n<h1>단계 4: 컨트롤러 생성</h1>\n<p>이제 모델을 설정했으니, 문서를 관리하고 파일 업로드를 처리하는 컨트롤러를 생성할 때입니다.</p>\n<pre><code class=\"hljs language-js\">rails generate controller <span class=\"hljs-title class_\">Documents</span>\n</code></pre>\n<p></p>\n<p>다음으로, 문서를 업로드하고 표시하는 데 필요한 작업을 정의하겠습니다. app/controllers/documents_controller.rb에 위치한 DocumentsController 파일을 열어 다음 코드로 업데이트하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DocumentsController</span> &#x3C; <span class=\"hljs-title class_\">ApplicationController</span>\n  def <span class=\"hljs-keyword\">new</span>\n    @<span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title class_\">Document</span>.<span class=\"hljs-property\">new</span>\n  end\n\n  def create\n    @<span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title class_\">Document</span>.<span class=\"hljs-title function_\">new</span>(document_params)\n    <span class=\"hljs-keyword\">if</span> @<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">save</span>\n      redirect_to @<span class=\"hljs-variable language_\">document</span>, <span class=\"hljs-attr\">notice</span>: <span class=\"hljs-string\">'문서가 성공적으로 업로드되었습니다.'</span>\n    <span class=\"hljs-keyword\">else</span>\n      render :<span class=\"hljs-keyword\">new</span>\n    end\n  end\n\n  def show\n    @<span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title class_\">Document</span>.<span class=\"hljs-title function_\">find</span>(params[:id])\n  end\n\n  private\n\n  def document_params\n    params.<span class=\"hljs-built_in\">require</span>(:<span class=\"hljs-variable language_\">document</span>).<span class=\"hljs-title function_\">permit</span>(:title, :file)\n  end\nend\n</code></pre>\n<ul>\n<li>new 액션: 이 액션은 새 Document 객체를 초기화합니다. 이것은 당신의 걸작을 위한 빈 캔버스를 설정하는 것과 같습니다. 여기서 미래의 OCR을 위해 파일을 업로드할 것입니다.</li>\n<li>create 액션: 이 액션은 새 문서를 생성하는 작업을 처리합니다. 폼 (제목 및 파일)에서 매개변수를 가져와 새 Document 객체를 만들고 저장을 시도합니다. 저장에 성공하면 문서의 표시 페이지로 이동하여 성공 메시지가 표시됩니다. 실패한 경우 새 문서 양식을 다시 렌더링하여 실수를 수정할 수 있습니다. 이 액션에서 또한 파일 업로드를 처리합니다.</li>\n<li>show 액션: 이 액션은 ID로 문서를 찾아서 표시합니다. 여기에서 마법이 일어날 것이지만, 현재는 파일을 표시만 합니다.</li>\n</ul>\n<h1>단계 5: 뷰 생성</h1>\n<p></p>\n<p>다음으로 뷰를 생성할 차례에요.</p>\n<p>아래 내용을 app/views/documents/new.html.erb에 추가해주세요:</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- app/views/documents/<span class=\"hljs-keyword\">new</span>.<span class=\"hljs-property\">html</span>.<span class=\"hljs-property\">erb</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"min-h-screen bg-gray-100 flex items-center justify-center\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-white p-8 rounded-lg shadow-md w-full max-w-md\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"text-2xl font-bold mb-6 text-center\"</span>></span>새 문서 업로드<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n\n    &#x3C;%= form_with model: @document, local: true, class: \"space-y-6\" do |form| %>\n      &#x3C;% if @document.errors.any? %>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bg-red-100 text-red-700 p-4 rounded-lg\"</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"font-bold\"</span>></span>제출 과정에 오류가 있습니다:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"list-disc list-inside\"</span>></span>\n            &#x3C;% @document.errors.full_messages.each do |message| %>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>&#x3C;%= message %><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n            &#x3C;% end %>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      &#x3C;% end %>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"space-y-2\"</span>></span>\n        &#x3C;%= form.label :title, class: \"block font-medium text-gray-700\" %>\n        &#x3C;%= form.text_field :title, class: \"block w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" %>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"space-y-2\"</span>></span>\n        &#x3C;%= form.label :file, class: \"block font-medium text-gray-700\" %>\n        &#x3C;%= form.file_field :file, class: \"block w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" %>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n        &#x3C;%= form.submit \"문서 업로드\", class: \"w-full bg-blue-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\" %>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    &#x3C;% end %>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n</code></pre>\n<p>그리고 app/views/documents/show.html.erb에 다음 내용을 추가해주세요.</p>\n<p></p>\n<h1>Step 6: 라우트 추가</h1>\n<p>이 부분은 Rails가 대부분 처리하기 때문에 작은 단계입니다. config/routes.rb에 다음을 추가해보세요:</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-title class_\">Rails</span>.application.routes.draw <span class=\"hljs-keyword\">do</span>\n  resources <span class=\"hljs-symbol\">:documents</span>, <span class=\"hljs-symbol\">only:</span> [<span class=\"hljs-symbol\">:new</span>, <span class=\"hljs-symbol\">:create</span>, <span class=\"hljs-symbol\">:show</span>]\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p></p>\n<h1>단계 7: 스토리지 서비스 구성하기</h1>\n<p>기본적으로 Active Storage는 파일을 저장하기위해 로컬 디스크를 사용합니다. config/storage.yml에서 Amazon S3, Google Cloud Storage 및 Microsoft Azure Blob Storage와 같은 다른 스토리지 서비스를 구성할 수 있습니다.</p>\n<p>Active Storage를 사용하면 구성 파일을 업데이트하여 이러한 스토리지 서비스 간에 쉽게 전환할 수 있습니다. 이 유연성을 통해 필요에 가장 적합한 스토리지 솔루션을 선택하고 애플리케이션이 성장함에 따라 확장할 수 있습니다.</p>\n<p>여기 우리 앱에서 사용할 구성입니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">지금 이 작업을 해보세요. 터미널에 가서 앱을 시작해보세요.\n\n./bin/dev\n\n다음과 같은 내용이 나와야 합니다:\n</code></pre>\n<p></p>\n<p></p>\n<p>당신의 Gemfile에 Gem을 추가해보세요.</p>\n<pre><code class=\"hljs language-js\">gem <span class=\"hljs-string\">'rtesseract'</span>\n</code></pre>\n<h1>단계 9: OCR 메소드 구현하기</h1>\n<p>문서 모델에 OCR을 수행하는 메소드를 만들어보세요. 아래와 같이 할 수 있어요!</p>\n<p></p>\n<pre><code class=\"hljs language-rb\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Document</span> &#x3C; <span class=\"hljs-title class_ inherited__\">ApplicationRecord</span>\n  has_one_attached <span class=\"hljs-symbol\">:file</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">perform_ocr</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">unless</span> file.attached?\n\n    file_path = <span class=\"hljs-title class_\">ActiveStorage</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:Blob</span>.service.send(<span class=\"hljs-symbol\">:path_for</span>, file.key)\n    image = <span class=\"hljs-title class_\">RTesseract</span>.new(file_path)\n    image.to_s\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h1>단계 10: 컨트롤러 업데이트하여 OCR 사용</h1>\n<p>OCR 수행을 위한 액션을 포함하도록 DocumentsController를 수정합니다:</p>\n<pre><code class=\"hljs language-rb\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DocumentsController</span> &#x3C; <span class=\"hljs-title class_ inherited__\">ApplicationController</span>\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">new</span>\n    <span class=\"hljs-variable\">@document</span> = <span class=\"hljs-title class_\">Document</span>.new\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create</span>\n    <span class=\"hljs-variable\">@document</span> = <span class=\"hljs-title class_\">Document</span>.new(document_params)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@document</span>.save\n      redirect_to <span class=\"hljs-variable\">@document</span>, <span class=\"hljs-symbol\">notice:</span> <span class=\"hljs-string\">'문서가 성공적으로 업로드되었습니다.'</span>\n    <span class=\"hljs-keyword\">else</span>\n      render <span class=\"hljs-symbol\">:new</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>\n    <span class=\"hljs-variable\">@document</span> = <span class=\"hljs-title class_\">Document</span>.find(params[<span class=\"hljs-symbol\">:id</span>])\n    <span class=\"hljs-variable\">@ocr_text</span> = <span class=\"hljs-variable\">@document</span>.perform_ocr\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">private</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">document_params</span>\n    params.<span class=\"hljs-keyword\">require</span>(<span class=\"hljs-symbol\">:document</span>).permit(<span class=\"hljs-symbol\">:title</span>, <span class=\"hljs-symbol\">:file</span>)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p></p>\n<h1>단계 11: OCR 텍스트 표시를 위한 뷰 업데이트</h1>\n<p>show.html.erb 뷰를 수정하여 OCR 텍스트를 표시합니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;p>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>제목:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span></span>\n  &#x3C;%= @<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> %>\n&#x3C;/p>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>파일:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span>\n  &#x3C;%= link_to @document.file.filename.to_s, rails_blob_path(@document.file, disposition: \"attachment\") %>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n\n&#x3C;% <span class=\"hljs-keyword\">if</span> @ocr_text.<span class=\"hljs-property\">present</span>? %>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">strong</span>></span>OCR 텍스트:<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">strong</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">pre</span>></span>&#x3C;%= @ocr_text %><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">pre</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n&#x3C;% end %>\n</code></pre>\n<h1>단계 12: Tesseract가 설치되었는지 확인하기</h1>\n<p></p>\n<p>시스템에 Tesseract OCR이 설치되어 있는지 확인해주세요. 다음 명령어를 사용하여 운영 체제에 맞게 설치할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">macOS</span>:\nbrew install tesseract\n\n<span class=\"hljs-title class_\">Ubuntu</span>:\nsudo apt-get install tesseract-ocr\n</code></pre>\n<p>앱을 실행한 후에는 다음과 같은 결과가 나타납니다:</p>\n<p><img src=\"/assets/img/2024-06-22-HowIbuiltanOCRSystemwithRails_2.png\" alt=\"OCR 결과\"></p>\n<p></p>\n<p>텍스트에는 개선할 여지가 많이 있어요. 댓글로 의겢나 생각을 알려주세요.</p>\n<p>또한, 제 Github에서 전체 소스 코드를 확인하세요: <a href=\"https://github.com/luizcg/ocr\" rel=\"nofollow\" target=\"_blank\">https://github.com/luizcg/ocr</a></p>\n</body>\n</html>\n"},"__N_SSG":true}