{"pageProps":{"post":{"title":"모든 안드로이드 개발자가 알아야 할 ObjectAnimator로 애니메이션 구현하는 방법","description":"","date":"2024-06-23 21:04","slug":"2024-06-23-EveryAndroiddevelopershouldknowaboutObjectAnimatortouseanimationsinyourApps","content":"\n마크다운 형식으로 테이블 태그를 변경해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 목적: 객체의 속성을 시간에 따라 애니메이션화합니다.\n- 상속: ValueAnimator로부터 상속받으며 그 기능을 확장하여 속성을 직접 애니메이션화합니다.\n\n2. 속성 애니메이션 vs. 뷰 애니메이션:\n\n- 속성 애니메이션: 뷰 속성뿐만 아니라 모든 객체의 속성을 애니메이션화합니다.\n- 뷰 애니메이션: 위치, 크기, 회전 등과 같은 특정 뷰 속성에 대해 제한됩니다.\n\n# 기본 사용법\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- ObjectAnimator를 만드는 방법:\n- 방법: 정적 메서드를 사용하여 인스턴스를 생성합니다.\n- 예시:\n\n```js\nObjectAnimator animator = ObjectAnimator.ofFloat(targetView, \"translationX\", 0f, 100f);\nanimator.setDuration(1000);  // 1초\nanimator.start();\n```\n\n2. 애니메이트할 공통 속성:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- alpha: 화면을 서서히 사라지게 합니다.\n- translationX, translationY: 화면을 X 또는 Y 축을 따라 이동시킵니다.\n- rotation, rotationX, rotationY: 피벗 지점을 중심으로 화면을 회전시킵니다.\n- scaleX, scaleY: X 또는 Y 방향으로 화면의 크기를 조절합니다.\n\n# 고급 사용법\n\n- AnimatorSet:\n\n- 목적: 여러 애니메이션을 함께 또는 순차적으로 실행합니다.\n- 예시:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nObjectAnimator scaleX = ObjectAnimator.ofFloat(targetView, \"scaleX\", 1f, 1.5f);\nObjectAnimator scaleY = ObjectAnimator.ofFloat(targetView, \"scaleY\", 1f, 1.5f);\nAnimatorSet animatorSet = new AnimatorSet();\nanimatorSet.playTogether(scaleX, scaleY);\nanimatorSet.setDuration(1000);\nanimatorSet.start();\n```\n\n2. PropertyValuesHolder:\n\n- 목적: 하나의 애니메이터로 개체의 여러 속성을 동시에 애니메이션화합니다.\n- 예시:\n\n```js\nPropertyValuesHolder pvhX = PropertyValuesHolder.ofFloat(\"scaleX\", 1f, 1.5f);\nPropertyValuesHolder pvhY = PropertyValuesHolder.ofFloat(\"scaleY\", 1f, 1.5f);\nObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(targetView, pvhX, pvhY);\nanimator.setDuration(1000);\nanimator.start();\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3. AnimatorListener:\n\n- 목적: 애니메이션 이벤트에 대응합니다.\n- 구현:\n\n```js\nPropertyValuesHolder pvhX = PropertyValuesHolder.ofFloat(\"scaleX\", 1f, 1.5f);\nPropertyValuesHolder pvhY = PropertyValuesHolder.ofFloat(\"scaleY\", 1f, 1.5f);\nObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(targetView, pvhX, pvhY);\nanimator.setDuration(1000);\nanimator.start();\n```\n\n4. Interpolator:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 목적: 애니메이션의 변화율을 제어합니다.\n- 일반적으로 사용되는 보간기: LinearInterpolator, AccelerateInterpolator, DecelerateInterpolator, BounceInterpolator.\n- 예시:\n\n```js\nanimator.setInterpolator(new BounceInterpolator());\n```\n\n5. 키프레임:\n\n- 목적: 애니메이션 타임라인에서 특정 지점을 정의합니다.\n- 예시:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nKeyframe kf0 = Keyframe.ofFloat(0f, 0f);\nKeyframe kf1 = Keyframe.ofFloat(0.5f, 200f);\nKeyframe kf2 = Keyframe.ofFloat(1f, 0f);\nPropertyValuesHolder pvh = PropertyValuesHolder.ofKeyframe(\"translationX\", kf0, kf1, kf2);\nObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(targetView, pvh);\nanimator.setDuration(2000);\nanimator.start();\n```\n\n## Pratical Examples\n\n- Fading a View:\n\n```js\nObjectAnimator fadeOut = ObjectAnimator.ofFloat(targetView, \"alpha\", 1f, 0f);\nfadeOut.setDuration(2000);\nfadeOut.start();\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 바운스 애니메이션:\n\n```js\nObjectAnimator bounceAnim = ObjectAnimator.ofFloat(targetView, \"translationY\", 0f, 300f);\nbounceAnim.setInterpolator(new BounceInterpolator());\nbounceAnim.setDuration(2000);\nbounceAnim.start();\n```\n\n3. 연속 애니메이션:\n\n```js\nObjectAnimator moveRight = ObjectAnimator.ofFloat(targetView, \"translationX\", 0f, 300f);\nObjectAnimator moveDown = ObjectAnimator.ofFloat(targetView, \"translationY\", 0f, 300f);\nAnimatorSet set = new AnimatorSet();\nset.playSequentially(moveRight, moveDown);\nset.setDuration(2000);\nset.start();\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 최선의 실첀법\n\n- 레이아웃 패스 최소화하기:\n\n- onDraw와 같이 자주 호출되는 메서드에서 애니메이션을 생성하거나 시작하는 것을 피하세요.\n\n2. 애니메이터를 재사용하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n가능한 경우 ObjectAnimator 인스턴스를 재사용하여 성능을 향상시킵니다.\n\n3. 하드웨어 가속화:\n\n- 애니메이션을 부드럽게 실행하기 위해 하드웨어 가속화를 활용하세요.\n\n4. 테스트:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 서로 다른 기기와 화면 크기에서 애니메이션을 테스트하여 일관된 동작을 보장하세요.\n\n5. 사용자 정의 속성:\n\n- PropertyValuesHolder 및 사용자 정의 속성 세터/게터를 사용하여 일반적이지 않은 속성을 애니메이션화하세요.\n\nObjectAnimator를 이해하고 효과적으로 활용함으로써 Android 애플리케이션의 사용자 경험을 향상시키는 매혹적이고 순조로운 애니메이션을 만들 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-EveryAndroiddevelopershouldknowaboutObjectAnimatortouseanimationsinyourApps_0.png"},"coverImage":"/assets/img/2024-06-23-EveryAndroiddevelopershouldknowaboutObjectAnimatortouseanimationsinyourApps_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>마크다운 형식으로 테이블 태그를 변경해주세요.</p>\n<p></p>\n<ul>\n<li>목적: 객체의 속성을 시간에 따라 애니메이션화합니다.</li>\n<li>상속: ValueAnimator로부터 상속받으며 그 기능을 확장하여 속성을 직접 애니메이션화합니다.</li>\n</ul>\n<ol start=\"2\">\n<li>속성 애니메이션 vs. 뷰 애니메이션:</li>\n</ol>\n<ul>\n<li>속성 애니메이션: 뷰 속성뿐만 아니라 모든 객체의 속성을 애니메이션화합니다.</li>\n<li>뷰 애니메이션: 위치, 크기, 회전 등과 같은 특정 뷰 속성에 대해 제한됩니다.</li>\n</ul>\n<h1>기본 사용법</h1>\n<p></p>\n<ul>\n<li>ObjectAnimator를 만드는 방법:</li>\n<li>방법: 정적 메서드를 사용하여 인스턴스를 생성합니다.</li>\n<li>예시:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ObjectAnimator</span> animator = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofFloat</span>(targetView, <span class=\"hljs-string\">\"translationX\"</span>, 0f, 100f);\nanimator.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">1000</span>);  <span class=\"hljs-comment\">// 1초</span>\nanimator.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<ol start=\"2\">\n<li>애니메이트할 공통 속성:</li>\n</ol>\n<p></p>\n<ul>\n<li>alpha: 화면을 서서히 사라지게 합니다.</li>\n<li>translationX, translationY: 화면을 X 또는 Y 축을 따라 이동시킵니다.</li>\n<li>rotation, rotationX, rotationY: 피벗 지점을 중심으로 화면을 회전시킵니다.</li>\n<li>scaleX, scaleY: X 또는 Y 방향으로 화면의 크기를 조절합니다.</li>\n</ul>\n<h1>고급 사용법</h1>\n<ul>\n<li>\n<p>AnimatorSet:</p>\n</li>\n<li>\n<p>목적: 여러 애니메이션을 함께 또는 순차적으로 실행합니다.</p>\n</li>\n<li>\n<p>예시:</p>\n</li>\n</ul>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ObjectAnimator</span> scaleX = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofFloat</span>(targetView, <span class=\"hljs-string\">\"scaleX\"</span>, 1f, <span class=\"hljs-number\">1.</span>5f);\n<span class=\"hljs-title class_\">ObjectAnimator</span> scaleY = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofFloat</span>(targetView, <span class=\"hljs-string\">\"scaleY\"</span>, 1f, <span class=\"hljs-number\">1.</span>5f);\n<span class=\"hljs-title class_\">AnimatorSet</span> animatorSet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AnimatorSet</span>();\nanimatorSet.<span class=\"hljs-title function_\">playTogether</span>(scaleX, scaleY);\nanimatorSet.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">1000</span>);\nanimatorSet.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<ol start=\"2\">\n<li>PropertyValuesHolder:</li>\n</ol>\n<ul>\n<li>목적: 하나의 애니메이터로 개체의 여러 속성을 동시에 애니메이션화합니다.</li>\n<li>예시:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">PropertyValuesHolder</span> pvhX = <span class=\"hljs-title class_\">PropertyValuesHolder</span>.<span class=\"hljs-title function_\">ofFloat</span>(<span class=\"hljs-string\">\"scaleX\"</span>, 1f, <span class=\"hljs-number\">1.</span>5f);\n<span class=\"hljs-title class_\">PropertyValuesHolder</span> pvhY = <span class=\"hljs-title class_\">PropertyValuesHolder</span>.<span class=\"hljs-title function_\">ofFloat</span>(<span class=\"hljs-string\">\"scaleY\"</span>, 1f, <span class=\"hljs-number\">1.</span>5f);\n<span class=\"hljs-title class_\">ObjectAnimator</span> animator = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofPropertyValuesHolder</span>(targetView, pvhX, pvhY);\nanimator.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">1000</span>);\nanimator.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<p></p>\n<ol start=\"3\">\n<li>AnimatorListener:</li>\n</ol>\n<ul>\n<li>목적: 애니메이션 이벤트에 대응합니다.</li>\n<li>구현:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">PropertyValuesHolder</span> pvhX = <span class=\"hljs-title class_\">PropertyValuesHolder</span>.<span class=\"hljs-title function_\">ofFloat</span>(<span class=\"hljs-string\">\"scaleX\"</span>, 1f, <span class=\"hljs-number\">1.</span>5f);\n<span class=\"hljs-title class_\">PropertyValuesHolder</span> pvhY = <span class=\"hljs-title class_\">PropertyValuesHolder</span>.<span class=\"hljs-title function_\">ofFloat</span>(<span class=\"hljs-string\">\"scaleY\"</span>, 1f, <span class=\"hljs-number\">1.</span>5f);\n<span class=\"hljs-title class_\">ObjectAnimator</span> animator = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofPropertyValuesHolder</span>(targetView, pvhX, pvhY);\nanimator.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">1000</span>);\nanimator.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<ol start=\"4\">\n<li>Interpolator:</li>\n</ol>\n<p></p>\n<ul>\n<li>목적: 애니메이션의 변화율을 제어합니다.</li>\n<li>일반적으로 사용되는 보간기: LinearInterpolator, AccelerateInterpolator, DecelerateInterpolator, BounceInterpolator.</li>\n<li>예시:</li>\n</ul>\n<pre><code class=\"hljs language-js\">animator.<span class=\"hljs-title function_\">setInterpolator</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BounceInterpolator</span>());\n</code></pre>\n<ol start=\"5\">\n<li>키프레임:</li>\n</ol>\n<ul>\n<li>목적: 애니메이션 타임라인에서 특정 지점을 정의합니다.</li>\n<li>예시:</li>\n</ul>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Keyframe</span> kf0 = <span class=\"hljs-title class_\">Keyframe</span>.<span class=\"hljs-title function_\">ofFloat</span>(0f, 0f);\n<span class=\"hljs-title class_\">Keyframe</span> kf1 = <span class=\"hljs-title class_\">Keyframe</span>.<span class=\"hljs-title function_\">ofFloat</span>(<span class=\"hljs-number\">0.</span>5f, 200f);\n<span class=\"hljs-title class_\">Keyframe</span> kf2 = <span class=\"hljs-title class_\">Keyframe</span>.<span class=\"hljs-title function_\">ofFloat</span>(1f, 0f);\n<span class=\"hljs-title class_\">PropertyValuesHolder</span> pvh = <span class=\"hljs-title class_\">PropertyValuesHolder</span>.<span class=\"hljs-title function_\">ofKeyframe</span>(<span class=\"hljs-string\">\"translationX\"</span>, kf0, kf1, kf2);\n<span class=\"hljs-title class_\">ObjectAnimator</span> animator = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofPropertyValuesHolder</span>(targetView, pvh);\nanimator.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">2000</span>);\nanimator.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<h2>Pratical Examples</h2>\n<ul>\n<li>Fading a View:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ObjectAnimator</span> fadeOut = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofFloat</span>(targetView, <span class=\"hljs-string\">\"alpha\"</span>, 1f, 0f);\nfadeOut.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">2000</span>);\nfadeOut.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<p></p>\n<ol start=\"2\">\n<li>바운스 애니메이션:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ObjectAnimator</span> bounceAnim = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofFloat</span>(targetView, <span class=\"hljs-string\">\"translationY\"</span>, 0f, 300f);\nbounceAnim.<span class=\"hljs-title function_\">setInterpolator</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BounceInterpolator</span>());\nbounceAnim.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">2000</span>);\nbounceAnim.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<ol start=\"3\">\n<li>연속 애니메이션:</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ObjectAnimator</span> moveRight = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofFloat</span>(targetView, <span class=\"hljs-string\">\"translationX\"</span>, 0f, 300f);\n<span class=\"hljs-title class_\">ObjectAnimator</span> moveDown = <span class=\"hljs-title class_\">ObjectAnimator</span>.<span class=\"hljs-title function_\">ofFloat</span>(targetView, <span class=\"hljs-string\">\"translationY\"</span>, 0f, 300f);\n<span class=\"hljs-title class_\">AnimatorSet</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AnimatorSet</span>();\nset.<span class=\"hljs-title function_\">playSequentially</span>(moveRight, moveDown);\nset.<span class=\"hljs-title function_\">setDuration</span>(<span class=\"hljs-number\">2000</span>);\nset.<span class=\"hljs-title function_\">start</span>();\n</code></pre>\n<p></p>\n<h2>최선의 실첀법</h2>\n<ul>\n<li>\n<p>레이아웃 패스 최소화하기:</p>\n</li>\n<li>\n<p>onDraw와 같이 자주 호출되는 메서드에서 애니메이션을 생성하거나 시작하는 것을 피하세요.</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>애니메이터를 재사용하세요.</li>\n</ol>\n<p></p>\n<p>가능한 경우 ObjectAnimator 인스턴스를 재사용하여 성능을 향상시킵니다.</p>\n<ol start=\"3\">\n<li>하드웨어 가속화:</li>\n</ol>\n<ul>\n<li>애니메이션을 부드럽게 실행하기 위해 하드웨어 가속화를 활용하세요.</li>\n</ul>\n<ol start=\"4\">\n<li>테스트:</li>\n</ol>\n<p></p>\n<ul>\n<li>서로 다른 기기와 화면 크기에서 애니메이션을 테스트하여 일관된 동작을 보장하세요.</li>\n</ul>\n<ol start=\"5\">\n<li>사용자 정의 속성:</li>\n</ol>\n<ul>\n<li>PropertyValuesHolder 및 사용자 정의 속성 세터/게터를 사용하여 일반적이지 않은 속성을 애니메이션화하세요.</li>\n</ul>\n<p>ObjectAnimator를 이해하고 효과적으로 활용함으로써 Android 애플리케이션의 사용자 경험을 향상시키는 매혹적이고 순조로운 애니메이션을 만들 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}