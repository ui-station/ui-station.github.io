{"pageProps":{"post":{"title":"Jetpack Compose 팝업  마스터하기","description":"","date":"2024-05-18 15:27","slug":"2024-05-18-JetpackComposePopupMasterIt","content":"\n## 안드로이드 개발 배우기\n\n![이미지](/assets/img/2024-05-18-JetpackComposePopupMasterIt_0.png)\n\n저희가 Jetpack Compose 뷰를 프로그래밍할 때, 단순한 Jetpack Compose 뷰 프로그래밍으로 어떤 제약이 있다는 것을 깨닫지 못할 수 있습니다.\n\n해당 제약은 다음과 같습니다. 어떤 Compose 뷰에서도, 부모 뷰에 비해 큰 뷰나 뷰 외부에서 다른 뷰를 작성하는 것이 불가능합니다 (아래 다이어그램에 표시됨).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 새로운 코드 블록을 Markdown 형식으로 바꾼 예시입니다.\n\n<img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_1.png\" />\n\n자, 다행히도 Jetpack Compose는 이 목적으로 활용할 수 있는 두 개의 Compose 구성 요소를 제공해줍니다.\n\n- Dialog\n- Popup\n\n이 글의 주제는 Popup에 대해 모든 것을 공유하고, 그림을 통해 사용자가 쉽게 익힐 수 있도록 합니다. 또 기타 재미있는 세부사항이나 화면 보안, 제스처 사용 방지 등에 대해 알 수도 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n한번 확인해 보세요.\n\n# 팝업 기본\n\n## 팝업 표시\n\n기본적으로, 다음과 같이 팝업을 표시할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nPopup {\n    // 팝업에서 표시할 합성 콘텐츠\n}\n```\n\n그러나 우리가 그냥 호출하면 팝업이 항상 표시됩니다.\n\n버튼 클릭시에만 표시되도록하려면 몇 가지 제어 로직을 둘러싸야합니다.\n\n```js\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"일반 팝업 열기\")\n}\n\nif (popupControl) {\n    Popup {\n      // 팝업에서 표시할 합성 콘텐츠\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기본적으로 팝업은 아래와 같이 부모 컨테이너의 상단-왼쪽에 맞춰 표시됩니다.\n\n![Popup Default Alignment](https://miro.medium.com/v2/resize:fit:470/1*jpGDSCT0yj7bk1I2Bf-tPA.gif)\n\n## 팝업 정렬\n\n팝업을 재정렬하려면 제공할 수 있는 정렬 매개변수가 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nPopup((정렬 = Alignment.Center));\n```\n\n설정 가능한 값으로는 Center, CenterStart, CenterEnd, TopCenter, TopStart (기본값), TopEnd, BottomCenter, BottomStart, BottomEnd이 있습니다.\n\n물론 항상 이상적인 상황은 아닐 수 있습니다. 따라서 사용자가 제공할 수 있는 Offset 값도 몇 가지 있습니다.\n\n```js\nPopup((정렬 = Alignment.CenterStart), (offset = IntOffset(0, 700)));\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Popup onDismissRequest\n\n기본적으로 팝업 콘텐츠 외부를 누르면 팝업이 닫힙니다. 그러나 다음을 따르면 결코 닫히지 않습니다.\n\n```js\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"Open normal popup\")\n}\n\nif (popupControl) {\n    Popup(\n        alignment = Alignment.CenterStart,\n        offset = IntOffset(0, 700),\n    ) {\n      // 팝업에 표시할 컴포저블 콘텐츠\n    }\n}\n```\n\n팝업이 닫히지 않는 것은 팝업이 사라지지 않았기 때문이 아닙니다. 실제로 닫혔지만, 팝업 컨트롤이 여전히 true 상태이며, recomposition되면 Popup이 다시 나타납니다 (닫혔다고 느끼지 않게 합니다).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n해당 문제를 해결하기 위해 팝업이 닫힐 때 popupControl을 false로 설정하도록 팝업에 알려주어야 합니다. 아래와 같이 onDismissRequest 매개변수를 사용하여 그 작업을 수행할 수 있습니다.\n\n```js\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"일반 팝업 열기\")\n}\n\nif (popupControl) {\n    Popup(\n        alignment = Alignment.CenterStart,\n        offset = IntOffset(0, 700),\n        onDismissRequest = { popupControl = false },\n    ) {\n      // 팝업에서 표시할 컴포저블 내용\n    }\n}\n```\n\n# 팝업 속성\n\n팝업의 기본을 배웠으니, 좀 더 고급 기능 중 하나인 PopupProerties 매개변수에 대해 살펴보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclass PopupProperties(\n    focusable: Boolean = false,\n    dismissOnBackPress: Boolean = true,\n    dismissOnClickOutside: Boolean = true,\n    securePolicy: SecureFlagPolicy = SecureFlagPolicy.Inherit,\n    excludeFromSystemGesture: Boolean = true,\n    clippingEnabled: Boolean = true,\n    @get:ExperimentalComposeUiApi //현재시점에서\n    val usePlatformDefaultWidth: Boolean = false\n)\n```\n\n상기 내용이 기본값으로 제공되지만 우리는 이를 재정의할 수 있습니다. 아래에서 각각 설명하겠습니다.\n\n## Focusable 및 DismissOnBackPress\n\nfocusable이 true일 때 팝업은 IME 이벤트와 키 입력을 수신하고, 뒤로 가기 버튼이 눌렸을 때와 같이 역할을 합니다. 그러나 팝업 뒤에 있는 것에 대한 터치가 비활성화됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Popup](/assets/img/2024-05-18-JetpackComposePopupMasterIt_2.png)\n\nIf we couple `focusable = true` with `dismissOnBackPress` is true, then the Popup will be dismissed if the user clicks the back button (the older Android phone).\n\n## DismissOnClickOutside\n\nAs mentioned previously, by default, when the user clicks outside the Popup area, it will be dismissed\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nenum class SecureFlagPolicy {\n    Inherit, // 부모를 따름, 기본값입니다\n    SecureOn,\n    SecureOff\n}\n```\n\n다음 그림을 보면 이제 모두 명확해졌습니다.\n\n![Jetpack Compose Popup Master It](/assets/img/2024-05-18-JetpackComposePopupMasterIt_3.png)\n\n## 시스템 제스처에서 제외하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n안드로이드 Q부터는 Android 하드웨어 백 버튼 대신에 사용자가 왼쪽으로 스와이프하여 뒤로 이동할 수 있습니다.\n\n하지만, 이것은 사이드바가 넓은 경우와 같이 앱 제스처와 겹칠 수 있습니다. 좋은 설명은 여기서 (가장자리에서 가장자리 밝기 슬라이더 섹션에서) 공유되어 있습니다.\n\n상황을 모방하기 위해, 제가 큰 팝업을 만들고 이를 켜고 끕니다.\n\n기본값으로 ON 상태일 때, 아래 설정을 한다면, 스와이프를 하려고 할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPopupProperties(\nfocusable = true,\ndismissOnBackPress = false,\ndismissOnClickOutside = false,\nexcludeFromSystemGesture = true,\n)\n\n아래 GIF에서 왼쪽에서 스와이프해도 아무 일도 일어나지 않습니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:470/1*8keelwDUflGe_U2LT9_7-g.gif\" />\n\n하지만, OFF로 변경해보면\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```javascript\nPopupProperties(\n  (focusable = true),\n  (dismissOnBackPress = false),\n  (dismissOnClickOutside = false),\n  (excludeFromSystemGesture = false)\n);\n```\n\n이제 왼쪽에서 스와이프를 할 때 “뒤로 가기”가 트리거되었습니다 (‘`’ 기호로 표시됨)\n\n![이미지](https://miro.medium.com/v2/resize:fit:470/1*lIPOkC6ucBMDt0yUOWWAPg.gif)\n\n## ClippingEnabled\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기본적으로는 그렇습니다. 이것은 팝업을 앱 장치 화면 바깥으로 실수로 배치할 수 없게 한다는 것을 의미합니다. Offset 값이 너무 크거나 팝업이 너무 커지면 아래에 나와 있는 것처럼 팝업이 축소되어 앱 장치에 고정됩니다.\n\n그러나 화면을 벗어나도 상관없다면 이 값을 false로 설정할 수 있습니다.\n\n<img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_4.png\" />\n\n## UsePlatformDefaultWidth\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n작성 시점에는 이것이 여전히 실험 중입니다. 잘라내기와 거의 동일하지만 다음과 같은 차이가 있습니다.\n\n- 너비만 잘라냅니다 (높이는 잘라내지 않음)\n- 위치를 재조정하지 않습니다 (X 좌표).\n\n아래는 Clipping과 함께 사용했을 때의 결과입니다.\n\n![Image](/assets/img/2024-05-18-JetpackComposePopupMasterIt_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 위치 조정 사용자 정의\n\nPopupProperty에 대해 배웠습니다. 또한 일반 Popup을 알고 있으며, Parent Composable View와 정렬하여 위치를 조정할 수 있습니다.\n\n그러나 Popup이 Parent Composable View에 의존하지 않도록하려면 어떻게해야 합니까?\n\n좋은 소식은 PopupPositionProvider를 제공할 수 있는 또 다른 Popup API가 있다는 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@Composable\nfun Popup(\n    popupPositionProvider: PopupPositionProvider,\n    onDismissRequest: (() -> Unit)? = null,\n    properties: PopupProperties = PopupProperties(),\n    content: @Composable () -> Unit\n) {\n```\n\n## PopupPositionProvider\n\n이 인터페이스는 사용자가 원하는 위치를 계산하는 데 사용됩니다.\n\n```kotlin\n@Immutable\ninterface PopupPositionProvider {\n    fun calculatePosition(\n        anchorBounds: IntRect,\n        windowSize: IntSize,\n        layoutDirection: LayoutDirection,\n        popupContentSize: IntSize\n    ): IntOffset\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제 경우에는 항상 창의 중앙에 위치한 사용자 정의 팝업 위치를 원합니다.\n\n그래서 아래처럼 Position을 쉽게 만들 수 있어요. 여기에는 창의 중앙 위치에 대한 상대적인 OffSet도 있습니다.\n\n```js\nclass WindowCenterOffsetPositionProvider(\n    private val x: Int = 0,\n    private val y: Int = 0\n) : PopupPositionProvider {\n    override fun calculatePosition(\n        anchorBounds: IntRect,\n        windowSize: IntSize,\n        layoutDirection: LayoutDirection,\n        popupContentSize: IntSize\n    ): IntOffset {\n        return IntOffset(\n            (windowSize.width - popupContentSize.width) / 2 + x,\n            (windowSize.height - popupContentSize.height) / 2 + y\n        )\n    }\n}\n```\n\n이제 아래와 같이 Popup에 할당하기만 하면 됩니다. 그러면 그에 맞게 동작합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"일반 팝업 열기\")\n}\n\nif (popupControl) {\n    Popup(\n        popupPositionProvider =\n           WindowCenterOffsetPositionProvider(),\n        onDismissRequest = { popupControl = false },\n    ) {\n      // 팝업에 표시할 콘텐츠\n    }\n}\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:476/1*Gd9kg-HENkrcawasnU1IZw.gif\" />\n\n여기서 코드 디자인을 얻을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n팝업은 호출자의 Compose 기능이 호출자의 Compose 뷰 경계 밖의 내용을 표시할 수 있게 하는 Jetpack Compose 구성 요소입니다.\n\n삭제되는 방법, 레이아웃, 호출자 Compose 뷰와의 위치 맞춤과 같이 사용자 정의할 수 있는 여러 팝업 속성이 있습니다.\n\n창과 맞춤을 맞출 수 있게 하는 Positioning 같은 위치 지정도 사용자 정의할 수 있습니다.\n\n예를 들어 사용 가능한 여러 제한 사항이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 표시 여부를 결정하는 외부 변수 (팝업 외부의 변수)에 의해 외부에서 제어되어야 합니다.\n- Composable 함수이므로 onClick 내에서 호출하거나 큐에 넣어 시기적절한 닫기를 할 수 없습니다. (예: 토스트로 만들어 호출), 코루틴 스코프에서.\n\n위의 제한사항을 고려하여 Popup에서 영향을 받은 사용자 정의 AbstractComposeView를 시도해보려고 합니다. 발견한 내용은 아래와 같습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-JetpackComposePopupMasterIt_0.png"},"coverImage":"/assets/img/2024-05-18-JetpackComposePopupMasterIt_0.png","tag":["Tech"],"readingTime":14},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>안드로이드 개발 배우기</h2>\n<p><img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_0.png\" alt=\"이미지\"></p>\n<p>저희가 Jetpack Compose 뷰를 프로그래밍할 때, 단순한 Jetpack Compose 뷰 프로그래밍으로 어떤 제약이 있다는 것을 깨닫지 못할 수 있습니다.</p>\n<p>해당 제약은 다음과 같습니다. 어떤 Compose 뷰에서도, 부모 뷰에 비해 큰 뷰나 뷰 외부에서 다른 뷰를 작성하는 것이 불가능합니다 (아래 다이어그램에 표시됨).</p>\n<p></p>\n<p>아래는 새로운 코드 블록을 Markdown 형식으로 바꾼 예시입니다.</p>\n<p>자, 다행히도 Jetpack Compose는 이 목적으로 활용할 수 있는 두 개의 Compose 구성 요소를 제공해줍니다.</p>\n<ul>\n<li>Dialog</li>\n<li>Popup</li>\n</ul>\n<p>이 글의 주제는 Popup에 대해 모든 것을 공유하고, 그림을 통해 사용자가 쉽게 익힐 수 있도록 합니다. 또 기타 재미있는 세부사항이나 화면 보안, 제스처 사용 방지 등에 대해 알 수도 있습니다.</p>\n<p></p>\n<p>한번 확인해 보세요.</p>\n<h1>팝업 기본</h1>\n<h2>팝업 표시</h2>\n<p>기본적으로, 다음과 같이 팝업을 표시할 수 있습니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Popup</span> {\n    <span class=\"hljs-comment\">// 팝업에서 표시할 합성 콘텐츠</span>\n}\n</code></pre>\n<p>그러나 우리가 그냥 호출하면 팝업이 항상 표시됩니다.</p>\n<p>버튼 클릭시에만 표시되도록하려면 몇 가지 제어 로직을 둘러싸야합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> popupControl by remember { <span class=\"hljs-title function_\">mutableStateOf</span>(<span class=\"hljs-literal\">false</span>) }\n<span class=\"hljs-title class_\">TextButton</span>(onClick = { popupControl = <span class=\"hljs-literal\">true</span> }) {\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"일반 팝업 열기\"</span>)\n}\n\n<span class=\"hljs-keyword\">if</span> (popupControl) {\n    <span class=\"hljs-title class_\">Popup</span> {\n      <span class=\"hljs-comment\">// 팝업에서 표시할 합성 콘텐츠</span>\n    }\n}\n</code></pre>\n<p></p>\n<p>기본적으로 팝업은 아래와 같이 부모 컨테이너의 상단-왼쪽에 맞춰 표시됩니다.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:470/1*jpGDSCT0yj7bk1I2Bf-tPA.gif\" alt=\"Popup Default Alignment\"></p>\n<h2>팝업 정렬</h2>\n<p>팝업을 재정렬하려면 제공할 수 있는 정렬 매개변수가 있습니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Popup</span>((정렬 = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">Center</span>));\n</code></pre>\n<p>설정 가능한 값으로는 Center, CenterStart, CenterEnd, TopCenter, TopStart (기본값), TopEnd, BottomCenter, BottomStart, BottomEnd이 있습니다.</p>\n<p>물론 항상 이상적인 상황은 아닐 수 있습니다. 따라서 사용자가 제공할 수 있는 Offset 값도 몇 가지 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Popup</span>((정렬 = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterStart</span>), (offset = <span class=\"hljs-title class_\">IntOffset</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">700</span>)));\n</code></pre>\n<p></p>\n<h2>Popup onDismissRequest</h2>\n<p>기본적으로 팝업 콘텐츠 외부를 누르면 팝업이 닫힙니다. 그러나 다음을 따르면 결코 닫히지 않습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> popupControl by remember { <span class=\"hljs-title function_\">mutableStateOf</span>(<span class=\"hljs-literal\">false</span>) }\n<span class=\"hljs-title class_\">TextButton</span>(onClick = { popupControl = <span class=\"hljs-literal\">true</span> }) {\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"Open normal popup\"</span>)\n}\n\n<span class=\"hljs-keyword\">if</span> (popupControl) {\n    <span class=\"hljs-title class_\">Popup</span>(\n        alignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterStart</span>,\n        offset = <span class=\"hljs-title class_\">IntOffset</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">700</span>),\n    ) {\n      <span class=\"hljs-comment\">// 팝업에 표시할 컴포저블 콘텐츠</span>\n    }\n}\n</code></pre>\n<p>팝업이 닫히지 않는 것은 팝업이 사라지지 않았기 때문이 아닙니다. 실제로 닫혔지만, 팝업 컨트롤이 여전히 true 상태이며, recomposition되면 Popup이 다시 나타납니다 (닫혔다고 느끼지 않게 합니다).</p>\n<p></p>\n<p>해당 문제를 해결하기 위해 팝업이 닫힐 때 popupControl을 false로 설정하도록 팝업에 알려주어야 합니다. 아래와 같이 onDismissRequest 매개변수를 사용하여 그 작업을 수행할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> popupControl by remember { <span class=\"hljs-title function_\">mutableStateOf</span>(<span class=\"hljs-literal\">false</span>) }\n<span class=\"hljs-title class_\">TextButton</span>(onClick = { popupControl = <span class=\"hljs-literal\">true</span> }) {\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"일반 팝업 열기\"</span>)\n}\n\n<span class=\"hljs-keyword\">if</span> (popupControl) {\n    <span class=\"hljs-title class_\">Popup</span>(\n        alignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterStart</span>,\n        offset = <span class=\"hljs-title class_\">IntOffset</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">700</span>),\n        onDismissRequest = { popupControl = <span class=\"hljs-literal\">false</span> },\n    ) {\n      <span class=\"hljs-comment\">// 팝업에서 표시할 컴포저블 내용</span>\n    }\n}\n</code></pre>\n<h1>팝업 속성</h1>\n<p>팝업의 기본을 배웠으니, 좀 더 고급 기능 중 하나인 PopupProerties 매개변수에 대해 살펴보겠습니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PopupProperties</span>(\n    <span class=\"hljs-attr\">focusable</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">dismissOnBackPress</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">dismissOnClickOutside</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">securePolicy</span>: <span class=\"hljs-title class_\">SecureFlagPolicy</span> = <span class=\"hljs-title class_\">SecureFlagPolicy</span>.<span class=\"hljs-property\">Inherit</span>,\n    <span class=\"hljs-attr\">excludeFromSystemGesture</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">clippingEnabled</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">true</span>,\n    @<span class=\"hljs-attr\">get</span>:<span class=\"hljs-title class_\">ExperimentalComposeUiApi</span> <span class=\"hljs-comment\">//현재시점에서</span>\n    val <span class=\"hljs-attr\">usePlatformDefaultWidth</span>: <span class=\"hljs-title class_\">Boolean</span> = <span class=\"hljs-literal\">false</span>\n)\n</code></pre>\n<p>상기 내용이 기본값으로 제공되지만 우리는 이를 재정의할 수 있습니다. 아래에서 각각 설명하겠습니다.</p>\n<h2>Focusable 및 DismissOnBackPress</h2>\n<p>focusable이 true일 때 팝업은 IME 이벤트와 키 입력을 수신하고, 뒤로 가기 버튼이 눌렸을 때와 같이 역할을 합니다. 그러나 팝업 뒤에 있는 것에 대한 터치가 비활성화됩니다.</p>\n<p></p>\n<p><img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_2.png\" alt=\"Popup\"></p>\n<p>If we couple <code>focusable = true</code> with <code>dismissOnBackPress</code> is true, then the Popup will be dismissed if the user clicks the back button (the older Android phone).</p>\n<h2>DismissOnClickOutside</h2>\n<p>As mentioned previously, by default, when the user clicks outside the Popup area, it will be dismissed</p>\n<p></p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecureFlagPolicy</span> {\n    <span class=\"hljs-title class_\">Inherit</span>, <span class=\"hljs-comment\">// 부모를 따름, 기본값입니다</span>\n    <span class=\"hljs-title class_\">SecureOn</span>,\n    <span class=\"hljs-title class_\">SecureOff</span>\n}\n</code></pre>\n<p>다음 그림을 보면 이제 모두 명확해졌습니다.</p>\n<p><img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_3.png\" alt=\"Jetpack Compose Popup Master It\"></p>\n<h2>시스템 제스처에서 제외하기</h2>\n<p></p>\n<p>안드로이드 Q부터는 Android 하드웨어 백 버튼 대신에 사용자가 왼쪽으로 스와이프하여 뒤로 이동할 수 있습니다.</p>\n<p>하지만, 이것은 사이드바가 넓은 경우와 같이 앱 제스처와 겹칠 수 있습니다. 좋은 설명은 여기서 (가장자리에서 가장자리 밝기 슬라이더 섹션에서) 공유되어 있습니다.</p>\n<p>상황을 모방하기 위해, 제가 큰 팝업을 만들고 이를 켜고 끕니다.</p>\n<p>기본값으로 ON 상태일 때, 아래 설정을 한다면, 스와이프를 하려고 할 것입니다.</p>\n<p></p>\n<p>PopupProperties(\nfocusable = true,\ndismissOnBackPress = false,\ndismissOnClickOutside = false,\nexcludeFromSystemGesture = true,\n)</p>\n<p>아래 GIF에서 왼쪽에서 스와이프해도 아무 일도 일어나지 않습니다.</p>\n<p>하지만, OFF로 변경해보면</p>\n<p></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">PopupProperties</span>(\n  (focusable = <span class=\"hljs-literal\">true</span>),\n  (dismissOnBackPress = <span class=\"hljs-literal\">false</span>),\n  (dismissOnClickOutside = <span class=\"hljs-literal\">false</span>),\n  (excludeFromSystemGesture = <span class=\"hljs-literal\">false</span>)\n);\n</code></pre>\n<p>이제 왼쪽에서 스와이프를 할 때 “뒤로 가기”가 트리거되었습니다 (‘`’ 기호로 표시됨)</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:470/1*lIPOkC6ucBMDt0yUOWWAPg.gif\" alt=\"이미지\"></p>\n<h2>ClippingEnabled</h2>\n<p></p>\n<p>기본적으로는 그렇습니다. 이것은 팝업을 앱 장치 화면 바깥으로 실수로 배치할 수 없게 한다는 것을 의미합니다. Offset 값이 너무 크거나 팝업이 너무 커지면 아래에 나와 있는 것처럼 팝업이 축소되어 앱 장치에 고정됩니다.</p>\n<p>그러나 화면을 벗어나도 상관없다면 이 값을 false로 설정할 수 있습니다.</p>\n<h2>UsePlatformDefaultWidth</h2>\n<p></p>\n<p>작성 시점에는 이것이 여전히 실험 중입니다. 잘라내기와 거의 동일하지만 다음과 같은 차이가 있습니다.</p>\n<ul>\n<li>너비만 잘라냅니다 (높이는 잘라내지 않음)</li>\n<li>위치를 재조정하지 않습니다 (X 좌표).</li>\n</ul>\n<p>아래는 Clipping과 함께 사용했을 때의 결과입니다.</p>\n<p><img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_5.png\" alt=\"Image\"></p>\n<p></p>\n<h1>위치 조정 사용자 정의</h1>\n<p>PopupProperty에 대해 배웠습니다. 또한 일반 Popup을 알고 있으며, Parent Composable View와 정렬하여 위치를 조정할 수 있습니다.</p>\n<p>그러나 Popup이 Parent Composable View에 의존하지 않도록하려면 어떻게해야 합니까?</p>\n<p>좋은 소식은 PopupPositionProvider를 제공할 수 있는 또 다른 Popup API가 있다는 것입니다.</p>\n<p></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">Popup</span><span class=\"hljs-params\">(\n    popupPositionProvider: <span class=\"hljs-type\">PopupPositionProvider</span>,\n    onDismissRequest: (() -> <span class=\"hljs-type\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n    properties: <span class=\"hljs-type\">PopupProperties</span> = PopupProperties()</span></span>,\n    content: <span class=\"hljs-meta\">@Composable</span> () -> <span class=\"hljs-built_in\">Unit</span>\n) {\n</code></pre>\n<h2>PopupPositionProvider</h2>\n<p>이 인터페이스는 사용자가 원하는 위치를 계산하는 데 사용됩니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Immutable</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PopupPositionProvider</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">calculatePosition</span><span class=\"hljs-params\">(\n        anchorBounds: <span class=\"hljs-type\">IntRect</span>,\n        windowSize: <span class=\"hljs-type\">IntSize</span>,\n        layoutDirection: <span class=\"hljs-type\">LayoutDirection</span>,\n        popupContentSize: <span class=\"hljs-type\">IntSize</span>\n    )</span></span>: IntOffset\n}\n</code></pre>\n<p></p>\n<p>제 경우에는 항상 창의 중앙에 위치한 사용자 정의 팝업 위치를 원합니다.</p>\n<p>그래서 아래처럼 Position을 쉽게 만들 수 있어요. 여기에는 창의 중앙 위치에 대한 상대적인 OffSet도 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WindowCenterOffsetPositionProvider</span>(\n    private val <span class=\"hljs-attr\">x</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">0</span>,\n    private val <span class=\"hljs-attr\">y</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">0</span>\n) : <span class=\"hljs-title class_\">PopupPositionProvider</span> {\n    override fun <span class=\"hljs-title function_\">calculatePosition</span>(\n        <span class=\"hljs-attr\">anchorBounds</span>: <span class=\"hljs-title class_\">IntRect</span>,\n        <span class=\"hljs-attr\">windowSize</span>: <span class=\"hljs-title class_\">IntSize</span>,\n        <span class=\"hljs-attr\">layoutDirection</span>: <span class=\"hljs-title class_\">LayoutDirection</span>,\n        <span class=\"hljs-attr\">popupContentSize</span>: <span class=\"hljs-title class_\">IntSize</span>\n    ): <span class=\"hljs-title class_\">IntOffset</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">IntOffset</span>(\n            (windowSize.<span class=\"hljs-property\">width</span> - popupContentSize.<span class=\"hljs-property\">width</span>) / <span class=\"hljs-number\">2</span> + x,\n            (windowSize.<span class=\"hljs-property\">height</span> - popupContentSize.<span class=\"hljs-property\">height</span>) / <span class=\"hljs-number\">2</span> + y\n        )\n    }\n}\n</code></pre>\n<p>이제 아래와 같이 Popup에 할당하기만 하면 됩니다. 그러면 그에 맞게 동작합니다.</p>\n<p></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">var</span> popupControl <span class=\"hljs-keyword\">by</span> remember { mutableStateOf(<span class=\"hljs-literal\">false</span>) }\nTextButton(onClick = { popupControl = <span class=\"hljs-literal\">true</span> }) {\n    Text(<span class=\"hljs-string\">\"일반 팝업 열기\"</span>)\n}\n\n<span class=\"hljs-keyword\">if</span> (popupControl) {\n    Popup(\n        popupPositionProvider =\n           WindowCenterOffsetPositionProvider(),\n        onDismissRequest = { popupControl = <span class=\"hljs-literal\">false</span> },\n    ) {\n      <span class=\"hljs-comment\">// 팝업에 표시할 콘텐츠</span>\n    }\n}\n</code></pre>\n<p>여기서 코드 디자인을 얻을 수 있습니다.</p>\n<p></p>\n<p>팝업은 호출자의 Compose 기능이 호출자의 Compose 뷰 경계 밖의 내용을 표시할 수 있게 하는 Jetpack Compose 구성 요소입니다.</p>\n<p>삭제되는 방법, 레이아웃, 호출자 Compose 뷰와의 위치 맞춤과 같이 사용자 정의할 수 있는 여러 팝업 속성이 있습니다.</p>\n<p>창과 맞춤을 맞출 수 있게 하는 Positioning 같은 위치 지정도 사용자 정의할 수 있습니다.</p>\n<p>예를 들어 사용 가능한 여러 제한 사항이 있습니다.</p>\n<p></p>\n<ul>\n<li>표시 여부를 결정하는 외부 변수 (팝업 외부의 변수)에 의해 외부에서 제어되어야 합니다.</li>\n<li>Composable 함수이므로 onClick 내에서 호출하거나 큐에 넣어 시기적절한 닫기를 할 수 없습니다. (예: 토스트로 만들어 호출), 코루틴 스코프에서.</li>\n</ul>\n<p>위의 제한사항을 고려하여 Popup에서 영향을 받은 사용자 정의 AbstractComposeView를 시도해보려고 합니다. 발견한 내용은 아래와 같습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}