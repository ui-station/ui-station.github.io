{"pageProps":{"post":{"title":"2024년 최신 가이드 Rails 프로젝트에 Swagger UI 설정하는 방법","description":"","date":"2024-06-23 20:47","slug":"2024-06-23-HowtoSetUpSwaggerUIforRailsProject2024Edition","content":"\n![이미지](/assets/img/2024-06-23-HowtoSetUpSwaggerUIforRailsProject2024Edition_0.png)\n\n명확하고 상호작용이 가능한 API 문서 작성은 유지보수 가능하고 접근성 있는 웹 서비스를 개발하는 중요한 부분입니다. Swagger UI는 개발자를 위한 동적 문서 인터페이스로서, Ruby on Rails 프로젝트에 통합하면 개발자 경험을 크게 향상시킬 수 있습니다. 이 글에서는 Grape API를 위한 인기 있는 gem인 grape-swagger와 RSpec API 문서 작성을 위한 gem인 rswag를 사용하여 Swagger UI를 설정하는 과정을 자세히 설명합니다.\n\n---\n\n# 해결책 1: 일반적인 Rails 프로젝트용\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCordyline은 Progressive Documentation 아이디어를 가진 새로운 프로젝트에요.\n\n## 단계 1: Cordyline 설치\n\nCordyline 공식 웹사이트를 방문해서 미리 만들어진 gem 앱을 다운로드하세요.\n\n## 단계 2: 통합\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비 온 레일즈 프로젝트를 선택하고 번들 설치를 실행해주세요.\n\n(base) 컨트롤러에 도우미 모듈을 추가해주세요.\n\n```js\nclass ApplicationController < ActionController::API\n include Cordyline::DocGen\nend\n```\n\n## 단계 3: 첫 번째 문서 작성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n컨트롤러의 모든 동작에서는 docto 메서드를 사용하여 문서 주석을 작성하세요.\n\n```js\nclass WelcomeController\n  doc \"인사 엔드포인트, 아무 동작 없음\" do\n    detail \"일부 세부 정보\"\n  end\n\n  def index\n  end\nend\n```\n\n## 단계 4: Swagger 문서 호스팅\n\n아래 라인을 routes.rb 파일에 추가하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```ruby\nrequire 'cordyline/web'\n\nTestApp::Application.routes.draw do\n  mount Cordyline::Web => '/team_doc' # 또는 다른 경로\nend\n```\n\n이제 팀은 배포된 웹사이트에서 /team_doc/index.html 경로로 Swagger 문서에 액세스할 수 있습니다.\n\n# 해결책 2: Grape API에 대한 설명\n\nGrape는 루비용 REST와 유사한 API 마이크로 프레임워크로, Rack에서 실행하거나 Rails와 같은 기존 웹 애플리케이션 프레임워크와 함께 사용할 수 있도록 설계되었습니다. Grape-swagger는 Grape API에 대한 자동 생성된 문서를 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 1: grape-swagger 설치하기\n\nGemfile에 grape-swagger를 추가하고 프로젝트에 추가하려면 번들 설치를 실행하세요:\n\n```js\ngem 'grape-swagger'\n```\n\n그리고 실행하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n번들 설치\n```\n\n## 단계 2: grape-swagger 구성\n\ngrape-swagger를 위한 초기 설정을 해보세요:\n\n```js\n# config/initializers/swagger.rb\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nif defined?(Grape)\n  GrapeSwaggerRails.options.url      = \"/api/swagger_doc\"\n  GrapeSwaggerRails.options.app_name = \"MyApp\"\n  GrapeSwaggerRails.options.app_url  = \"/\"\nend\n```\n\n## 단계 3: API 엔티티 및 문서 정의\n\ngrape-swagger가 문서화할 수 있도록 API 엔티티를 정의해야 합니다:\n\n```js\n# app/api/entities/my_entity.rb\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n모듈 API\n  모듈 엔티티\n    클래스 MyEntity < Grape::Entity\n      expose :id, documentation: { type: 'Integer', desc: '엔티티의 ID' }\n      # ... 추가 코드 ...\n    end\n  end\nend\n```\n\n## 단계 4: 스웨거 엔드포인트 추가\n\nAPI 베이스 클래스에서 스웨거 설명 라우트를 추가하여 스웨거 JSON을 제공할 수 있도록 합니다:\n\n```js\n# app/api/base.rb\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```ruby\nclass API::Base < Grape::API\n  add_swagger_documentation\nend\n```\n\n## 단계 5: Swagger 문서 보기\n\n이제 http://localhost:3000/swagger로 이동하여 Swagger UI에 액세스할 수 있습니다.\n\n# 해결 방법 3: RSpec 사용하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nrswag은 API 테스트에 기반하여 자동으로 Swagger 호환 API 문서를 생성하는 데 RSpec과 통합됩니다.\n\n## 단계 1: rswag-specs 설치\n\nGemfile에 rswag-specs를 추가하고 설치하세요:\n\n```js\ngem 'rswag-specs'\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그리고 다음을 실행해 주세요:\n\n```js\nbundle install\n```\n\n## 단계 2: 구성 및 파일 생성\n\nRSwag 생성기를 실행하여 API 사양을 위한 초기 구성 및 디렉터리를 생성하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nrails g rswag:install\n```\n\n## 단계 3: Swagger DSL을 사용하여 요청 스펙 작성하기\n\n스펙 파일을 생성하고 RSwag의 DSL을 사용하여 엔드포인트를 테스트하고 문서화하세요:\n\n```js\n# spec/integration/my_api_spec.rb\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```ruby\nrequire 'swagger_helper'\ndescribe 'My API' do\n  path '/my_api/endpoint' do\n    ...\n    get 'Retrieves something' do\n      produces 'application/json'\n      response '200', 'successful' do\n        schema type: :object,\n               properties: {\n                 id: { type: :integer }\n               },\n               required: ['id']\n        # Your test code goes here\n      end\n    end\n  end\nend\n```\n\n## 단계 4: RSwag UI로 API 문서에 액세스하기\n\nRSwag는 http://localhost:3000/api-docs에서 액세스할 수 있는 Swagger UI를 제공합니다. 이 UI는 직접 작성한 사양을 반영합니다.\n","ogImage":{"url":"/assets/img/2024-06-23-HowtoSetUpSwaggerUIforRailsProject2024Edition_0.png"},"coverImage":"/assets/img/2024-06-23-HowtoSetUpSwaggerUIforRailsProject2024Edition_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-HowtoSetUpSwaggerUIforRailsProject2024Edition_0.png\" alt=\"이미지\"></p>\n<p>명확하고 상호작용이 가능한 API 문서 작성은 유지보수 가능하고 접근성 있는 웹 서비스를 개발하는 중요한 부분입니다. Swagger UI는 개발자를 위한 동적 문서 인터페이스로서, Ruby on Rails 프로젝트에 통합하면 개발자 경험을 크게 향상시킬 수 있습니다. 이 글에서는 Grape API를 위한 인기 있는 gem인 grape-swagger와 RSpec API 문서 작성을 위한 gem인 rswag를 사용하여 Swagger UI를 설정하는 과정을 자세히 설명합니다.</p>\n<hr>\n<h1>해결책 1: 일반적인 Rails 프로젝트용</h1>\n<p></p>\n<p>Cordyline은 Progressive Documentation 아이디어를 가진 새로운 프로젝트에요.</p>\n<h2>단계 1: Cordyline 설치</h2>\n<p>Cordyline 공식 웹사이트를 방문해서 미리 만들어진 gem 앱을 다운로드하세요.</p>\n<h2>단계 2: 통합</h2>\n<p></p>\n<p>루비 온 레일즈 프로젝트를 선택하고 번들 설치를 실행해주세요.</p>\n<p>(base) 컨트롤러에 도우미 모듈을 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApplicationController</span> &#x3C; <span class=\"hljs-title class_\">ActionController</span>::<span class=\"hljs-variable constant_\">API</span>\n include <span class=\"hljs-title class_\">Cordyline</span>::<span class=\"hljs-title class_\">DocGen</span>\nend\n</code></pre>\n<h2>단계 3: 첫 번째 문서 작성</h2>\n<p></p>\n<p>컨트롤러의 모든 동작에서는 docto 메서드를 사용하여 문서 주석을 작성하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WelcomeController</span>\n  doc <span class=\"hljs-string\">\"인사 엔드포인트, 아무 동작 없음\"</span> <span class=\"hljs-keyword\">do</span>\n    detail <span class=\"hljs-string\">\"일부 세부 정보\"</span>\n  end\n\n  def index\n  end\nend\n</code></pre>\n<h2>단계 4: Swagger 문서 호스팅</h2>\n<p>아래 라인을 routes.rb 파일에 추가하세요.</p>\n<p></p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'cordyline/web'</span>\n\n<span class=\"hljs-title class_\">TestApp</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:Application</span>.routes.draw <span class=\"hljs-keyword\">do</span>\n  mount <span class=\"hljs-title class_\">Cordyline</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:Web</span> => <span class=\"hljs-string\">'/team_doc'</span> <span class=\"hljs-comment\"># 또는 다른 경로</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>이제 팀은 배포된 웹사이트에서 /team_doc/index.html 경로로 Swagger 문서에 액세스할 수 있습니다.</p>\n<h1>해결책 2: Grape API에 대한 설명</h1>\n<p>Grape는 루비용 REST와 유사한 API 마이크로 프레임워크로, Rack에서 실행하거나 Rails와 같은 기존 웹 애플리케이션 프레임워크와 함께 사용할 수 있도록 설계되었습니다. Grape-swagger는 Grape API에 대한 자동 생성된 문서를 제공합니다.</p>\n<p></p>\n<h2>단계 1: grape-swagger 설치하기</h2>\n<p>Gemfile에 grape-swagger를 추가하고 프로젝트에 추가하려면 번들 설치를 실행하세요:</p>\n<pre><code class=\"hljs language-js\">gem <span class=\"hljs-string\">'grape-swagger'</span>\n</code></pre>\n<p>그리고 실행하세요:</p>\n<p></p>\n<pre><code class=\"hljs language-js\">번들 설치\n</code></pre>\n<h2>단계 2: grape-swagger 구성</h2>\n<p>grape-swagger를 위한 초기 설정을 해보세요:</p>\n<pre><code class=\"hljs language-js\"># config/initializers/swagger.<span class=\"hljs-property\">rb</span>\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> defined?(<span class=\"hljs-title class_\">Grape</span>)\n  <span class=\"hljs-title class_\">GrapeSwaggerRails</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">url</span>      = <span class=\"hljs-string\">\"/api/swagger_doc\"</span>\n  <span class=\"hljs-title class_\">GrapeSwaggerRails</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">app_name</span> = <span class=\"hljs-string\">\"MyApp\"</span>\n  <span class=\"hljs-title class_\">GrapeSwaggerRails</span>.<span class=\"hljs-property\">options</span>.<span class=\"hljs-property\">app_url</span>  = <span class=\"hljs-string\">\"/\"</span>\nend\n</code></pre>\n<h2>단계 3: API 엔티티 및 문서 정의</h2>\n<p>grape-swagger가 문서화할 수 있도록 API 엔티티를 정의해야 합니다:</p>\n<pre><code class=\"hljs language-js\"># app/api/entities/my_entity.<span class=\"hljs-property\">rb</span>\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-js\">모듈 <span class=\"hljs-variable constant_\">API</span>\n  모듈 엔티티\n    클래스 <span class=\"hljs-title class_\">MyEntity</span> &#x3C; <span class=\"hljs-title class_\">Grape</span>::<span class=\"hljs-title class_\">Entity</span>\n      expose :id, <span class=\"hljs-attr\">documentation</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'Integer'</span>, <span class=\"hljs-attr\">desc</span>: <span class=\"hljs-string\">'엔티티의 ID'</span> }\n      # ... 추가 코드 ...\n    end\n  end\nend\n</code></pre>\n<h2>단계 4: 스웨거 엔드포인트 추가</h2>\n<p>API 베이스 클래스에서 스웨거 설명 라우트를 추가하여 스웨거 JSON을 제공할 수 있도록 합니다:</p>\n<pre><code class=\"hljs language-js\"># app/api/base.<span class=\"hljs-property\">rb</span>\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-variable constant_\">API</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:Base</span> &#x3C; <span class=\"hljs-title class_\">Grape</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-symbol\">:API</span>\n  add_swagger_documentation\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h2>단계 5: Swagger 문서 보기</h2>\n<p>이제 <a href=\"http://localhost:3000/swagger%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/swagger로</a> 이동하여 Swagger UI에 액세스할 수 있습니다.</p>\n<h1>해결 방법 3: RSpec 사용하기</h1>\n<p></p>\n<p>rswag은 API 테스트에 기반하여 자동으로 Swagger 호환 API 문서를 생성하는 데 RSpec과 통합됩니다.</p>\n<h2>단계 1: rswag-specs 설치</h2>\n<p>Gemfile에 rswag-specs를 추가하고 설치하세요:</p>\n<pre><code class=\"hljs language-js\">gem <span class=\"hljs-string\">'rswag-specs'</span>\n</code></pre>\n<p></p>\n<p>그리고 다음을 실행해 주세요:</p>\n<pre><code class=\"hljs language-js\">bundle install\n</code></pre>\n<h2>단계 2: 구성 및 파일 생성</h2>\n<p>RSwag 생성기를 실행하여 API 사양을 위한 초기 구성 및 디렉터리를 생성하세요.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">rails g <span class=\"hljs-attr\">rswag</span>:install\n</code></pre>\n<h2>단계 3: Swagger DSL을 사용하여 요청 스펙 작성하기</h2>\n<p>스펙 파일을 생성하고 RSwag의 DSL을 사용하여 엔드포인트를 테스트하고 문서화하세요:</p>\n<pre><code class=\"hljs language-js\"># spec/integration/my_api_spec.<span class=\"hljs-property\">rb</span>\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'swagger_helper'</span>\ndescribe <span class=\"hljs-string\">'My API'</span> <span class=\"hljs-keyword\">do</span>\n  path <span class=\"hljs-string\">'/my_api/endpoint'</span> <span class=\"hljs-keyword\">do</span>\n    ...\n    get <span class=\"hljs-string\">'Retrieves something'</span> <span class=\"hljs-keyword\">do</span>\n      produces <span class=\"hljs-string\">'application/json'</span>\n      response <span class=\"hljs-string\">'200'</span>, <span class=\"hljs-string\">'successful'</span> <span class=\"hljs-keyword\">do</span>\n        schema <span class=\"hljs-symbol\">type:</span> <span class=\"hljs-symbol\">:object</span>,\n               <span class=\"hljs-symbol\">properties:</span> {\n                 <span class=\"hljs-symbol\">id:</span> { <span class=\"hljs-symbol\">type:</span> <span class=\"hljs-symbol\">:integer</span> }\n               },\n               <span class=\"hljs-symbol\">required:</span> [<span class=\"hljs-string\">'id'</span>]\n        <span class=\"hljs-comment\"># Your test code goes here</span>\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h2>단계 4: RSwag UI로 API 문서에 액세스하기</h2>\n<p>RSwag는 <a href=\"http://localhost:3000/api-docs%EC%97%90%EC%84%9C\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000/api-docs에서</a> 액세스할 수 있는 Swagger UI를 제공합니다. 이 UI는 직접 작성한 사양을 반영합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}