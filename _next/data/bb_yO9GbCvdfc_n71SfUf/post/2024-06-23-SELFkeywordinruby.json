{"pageProps":{"post":{"title":"루비에서 SELF 키워드 사용하는 방법","description":"","date":"2024-06-23 20:46","slug":"2024-06-23-SELFkeywordinruby","content":"\nRuby에서 self의 목적은 무엇인가요?\n\n<img src=\"/assets/img/2024-06-23-SELFkeywordinruby_0.png\" />\n\nRuby에서 self는 현재 객체를 나타내는 특별한 변수입니다. self의 의미는 사용되는 문맥에 따라 달라집니다. self를 이해하는 것은 다른 범위 내에서 어떻게 메서드와 변수에 접근하고 조작하는지에 영향을 미치므로 중요합니다. 이 글에서는 Ruby에서 self의 목적에 대해 자세히 살펴보고 상세한 예시를 제시하겠습니다.\n\n# Ruby에서 self의 목적\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 인스턴스 변수 및 메소드에 접근하기: 인스턴스 메소드 내부에서 self는 클래스의 인스턴스를 가리키며, 인스턴스 변수와 메소드에 접근할 수 있게 합니다.\n- 클래스 메소드 정의하기: 클래스 정의 내부에서 self는 클래스 자체를 가리킵니다. 이는 클래스 메소드를 정의하는 데 유용합니다.\n- 싱글톤 메소드: self를 사용하여 클래스의 모든 인스턴스가 아닌 단일 객체에 속하는 메소드를 정의할 수 있습니다.\n- 메타프로그래밍: self는 메타프로그래밍에서 자주 사용되어 동적으로 메소드를 정의하고 객체를 조작하는 데 활용됩니다.\n- 문맥 인식: self는 코드 실행 문맥을 이해하는 데 도움이 되어 메소드 해결과 범위 관리에 중요합니다.\n\n# self 사용 예시\n\n## 1. 인스턴스 변수와 메소드에 접근하기\n\n이 문맥에서 self는 인스턴스 메소드 내부에서 인스턴스 변수와 메소드에 접근 가능하도록 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```javascript\nclass Person\n  def initialize(name, age)\n    @name = name\n    @age = age\n  end\n\n  def birthday\n    self.age += 1\n  end\n\n  def introduce\n    \"Hello, I'm #{self.name} and I'm #{self.age} years old.\"\n  end\n\n  # Getter and setter methods\n  def name\n    @name\n  end\n\n  def age\n    @age\n  end\n\n  def age=(new_age)\n    @age = new_age\n  end\nend\n\nperson = Person.new(\"Alice\", 30)\nputs person.introduce # 출력: \"안녕, 나는 Alice이고 30살이야.\"\nperson.birthday\nputs person.introduce # 출력: \"안녕, 나는 Alice이고 31살이야.\"\n```\n\n## 2. 클래스 메소드 정의하기\n\n클래스 내부에서 사용될 때 self는 클래스 자체를 가리키며, 클래스 메소드를 정의하는 데 유용합니다.\n\n```javascript\nclass MathUtils\n  def self.square(num)\n    num * num\n  end\n\n  def self.cube(num)\n    num * num * num\n  end\nend\n\nputs MathUtils.square(3) # 출력: 9\nputs MathUtils.cube(3)   # 출력: 27\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclass MathUtils\n  class << self\n    def square(num)\n      num * num\n    end\n\n    def cube(num)\n      num * num * num\n    end\n  end\nend\n\nputs MathUtils.square(3) # Output: 9\nputs MathUtils.cube(3)   # Output: 27\n```\n\n## 3. Singleton Methods\n\nself can be used to define methods on a single object (singleton methods).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nstr = \"Hello\"\n\ndef str.shout\nself.upcase + \"!!!\"\nend\n\nputs str.shout # Output: \"HELLO!!!\"\n\n## 4. 메타프로그래밍\n\n메타프로그래밍에서 자주 self는 메소드를 동적으로 정의하고 객체를 조작하는 데 사용됩니다.\n\n```ruby\nclass MyClass\n  def self.create_method(name)\n    define_method(name) do\n      \"Method #{name} called\"\n    end\n  end\nend\n\nMyClass.create_method(:greet)\nobj = MyClass.new\nputs obj.greet # Output: \"Method greet called\"\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nself는 메소드 해결 및 범위 관리에 중요한 실행 컨텍스트를 이해하는 데 도움이 됩니다.\n\n```js\nclass Animal\n  def speak\n    \"동물이 말합니다\"\n  end\n\n  def call_speak\n    self.speak\n  end\nend\n\nclass Dog < Animal\n  def speak\n    \"멍멍!\"\n  end\nend\n\ndog = Dog.new\nputs dog.call_speak # 출력: \"멍멍!\"\n```\n\n## 6. 속성 작성기와 self 사용\n\nself를 사용하는 것은 속성 작성기(setters)를 호출할 때 중요합니다. 이는 로컬 변수 할당과 모호함을 피하기 위해 필요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclass User\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\n\n  def rename(new_name)\n    self.name = new_name # setter method `name=`이(가) 사용됨\n  end\nend\n\nuser = User.new(\"John\")\nuser.rename(\"Doe\")\nputs user.name # 출력: \"Doe\"\n```\n\n# 요약\n\n- 인스턴스 컨텍스트: 인스턴스 메서드 내에서 self는 클래스의 현재 인스턴스를 가리킵니다.\n- 클래스 컨텍스트: 클래스 메서드 및 클래스 정의 내에서 self는 클래스 자체를 가리킵니다.\n- 싱글톤 메서드: self는 개별 객체에 대해 메서드를 정의하는 데 사용될 수 있습니다.\n- 메타프로그래밍: self는 동적으로 메서드를 정의하고 객체를 조작하는 데 사용됩니다.\n- 컨텍스트 인식: self는 현재 실행 컨텍스트를 이해하는 데 도움을 주며, 메서드 해결과 범위에 영향을 줍니다.\n- 속성 쓰기: self는 로컬 변수 할당과 구별하기 위해 세터 메서드를 호출하는 데 필요합니다.\n\nRubyself의 사용을 숙달하면 더 유연하고 재사용 가능하며 유지 관리가 쉬운 코드를 작성할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-SELFkeywordinruby_0.png"},"coverImage":"/assets/img/2024-06-23-SELFkeywordinruby_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Ruby에서 self의 목적은 무엇인가요?</p>\n<p>Ruby에서 self는 현재 객체를 나타내는 특별한 변수입니다. self의 의미는 사용되는 문맥에 따라 달라집니다. self를 이해하는 것은 다른 범위 내에서 어떻게 메서드와 변수에 접근하고 조작하는지에 영향을 미치므로 중요합니다. 이 글에서는 Ruby에서 self의 목적에 대해 자세히 살펴보고 상세한 예시를 제시하겠습니다.</p>\n<h1>Ruby에서 self의 목적</h1>\n<p></p>\n<ul>\n<li>인스턴스 변수 및 메소드에 접근하기: 인스턴스 메소드 내부에서 self는 클래스의 인스턴스를 가리키며, 인스턴스 변수와 메소드에 접근할 수 있게 합니다.</li>\n<li>클래스 메소드 정의하기: 클래스 정의 내부에서 self는 클래스 자체를 가리킵니다. 이는 클래스 메소드를 정의하는 데 유용합니다.</li>\n<li>싱글톤 메소드: self를 사용하여 클래스의 모든 인스턴스가 아닌 단일 객체에 속하는 메소드를 정의할 수 있습니다.</li>\n<li>메타프로그래밍: self는 메타프로그래밍에서 자주 사용되어 동적으로 메소드를 정의하고 객체를 조작하는 데 활용됩니다.</li>\n<li>문맥 인식: self는 코드 실행 문맥을 이해하는 데 도움이 되어 메소드 해결과 범위 관리에 중요합니다.</li>\n</ul>\n<h1>self 사용 예시</h1>\n<h2>1. 인스턴스 변수와 메소드에 접근하기</h2>\n<p>이 문맥에서 self는 인스턴스 메소드 내부에서 인스턴스 변수와 메소드에 접근 가능하도록 합니다.</p>\n<p></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>\n  def <span class=\"hljs-title function_\">initialize</span>(name, age)\n    @name = name\n    @age = age\n  end\n\n  def birthday\n    self.<span class=\"hljs-property\">age</span> += <span class=\"hljs-number\">1</span>\n  end\n\n  def introduce\n    <span class=\"hljs-string\">\"Hello, I'm #{self.name} and I'm #{self.age} years old.\"</span>\n  end\n\n  # <span class=\"hljs-title class_\">Getter</span> and setter methods\n  def name\n    @name\n  end\n\n  def age\n    @age\n  end\n\n  def age=(new_age)\n    @age = new_age\n  end\nend\n\nperson = <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">new</span>(<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-number\">30</span>)\nputs person.<span class=\"hljs-property\">introduce</span> # 출력: <span class=\"hljs-string\">\"안녕, 나는 Alice이고 30살이야.\"</span>\nperson.<span class=\"hljs-property\">birthday</span>\nputs person.<span class=\"hljs-property\">introduce</span> # 출력: <span class=\"hljs-string\">\"안녕, 나는 Alice이고 31살이야.\"</span>\n</code></pre>\n<h2>2. 클래스 메소드 정의하기</h2>\n<p>클래스 내부에서 사용될 때 self는 클래스 자체를 가리키며, 클래스 메소드를 정의하는 데 유용합니다.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MathUtils</span>\n  def self.<span class=\"hljs-title function_\">square</span>(num)\n    num * num\n  end\n\n  def self.<span class=\"hljs-title function_\">cube</span>(num)\n    num * num * num\n  end\nend\n\nputs <span class=\"hljs-title class_\">MathUtils</span>.<span class=\"hljs-title function_\">square</span>(<span class=\"hljs-number\">3</span>) # 출력: <span class=\"hljs-number\">9</span>\nputs <span class=\"hljs-title class_\">MathUtils</span>.<span class=\"hljs-title function_\">cube</span>(<span class=\"hljs-number\">3</span>)   # 출력: <span class=\"hljs-number\">27</span>\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MathUtils</span>\n  <span class=\"hljs-keyword\">class</span> &#x3C;&#x3C; self\n    def <span class=\"hljs-title function_\">square</span>(num)\n      num * num\n    end\n\n    def <span class=\"hljs-title function_\">cube</span>(num)\n      num * num * num\n    end\n  end\nend\n\nputs <span class=\"hljs-title class_\">MathUtils</span>.<span class=\"hljs-title function_\">square</span>(<span class=\"hljs-number\">3</span>) # <span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-number\">9</span>\nputs <span class=\"hljs-title class_\">MathUtils</span>.<span class=\"hljs-title function_\">cube</span>(<span class=\"hljs-number\">3</span>)   # <span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-number\">27</span>\n</code></pre>\n<h2>3. Singleton Methods</h2>\n<p>self can be used to define methods on a single object (singleton methods).</p>\n<p></p>\n<p>str = \"Hello\"</p>\n<p>def str.shout\nself.upcase + \"!!!\"\nend</p>\n<p>puts str.shout # Output: \"HELLO!!!\"</p>\n<h2>4. 메타프로그래밍</h2>\n<p>메타프로그래밍에서 자주 self는 메소드를 동적으로 정의하고 객체를 조작하는 데 사용됩니다.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.create_method(name)\n    <span class=\"hljs-built_in\">define_method</span>(name) <span class=\"hljs-keyword\">do</span>\n      <span class=\"hljs-string\">\"Method <span class=\"hljs-subst\">#{name}</span> called\"</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-title class_\">MyClass</span>.create_method(<span class=\"hljs-symbol\">:greet</span>)\nobj = <span class=\"hljs-title class_\">MyClass</span>.new\nputs obj.greet <span class=\"hljs-comment\"># Output: \"Method greet called\"</span>\n</code></pre>\n<p></p>\n<p>self는 메소드 해결 및 범위 관리에 중요한 실행 컨텍스트를 이해하는 데 도움이 됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>\n  def speak\n    <span class=\"hljs-string\">\"동물이 말합니다\"</span>\n  end\n\n  def call_speak\n    self.<span class=\"hljs-property\">speak</span>\n  end\nend\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> &#x3C; <span class=\"hljs-title class_\">Animal</span>\n  def speak\n    <span class=\"hljs-string\">\"멍멍!\"</span>\n  end\nend\n\ndog = <span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\">new</span>\nputs dog.<span class=\"hljs-property\">call_speak</span> # 출력: <span class=\"hljs-string\">\"멍멍!\"</span>\n</code></pre>\n<h2>6. 속성 작성기와 self 사용</h2>\n<p>self를 사용하는 것은 속성 작성기(setters)를 호출할 때 중요합니다. 이는 로컬 변수 할당과 모호함을 피하기 위해 필요합니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>\n  attr_accessor :name\n\n  def <span class=\"hljs-title function_\">initialize</span>(name)\n    @name = name\n  end\n\n  def <span class=\"hljs-title function_\">rename</span>(new_name)\n    self.<span class=\"hljs-property\">name</span> = new_name # setter method <span class=\"hljs-string\">`name=`</span>이(가) 사용됨\n  end\nend\n\nuser = <span class=\"hljs-title class_\">User</span>.<span class=\"hljs-title function_\">new</span>(<span class=\"hljs-string\">\"John\"</span>)\nuser.<span class=\"hljs-title function_\">rename</span>(<span class=\"hljs-string\">\"Doe\"</span>)\nputs user.<span class=\"hljs-property\">name</span> # 출력: <span class=\"hljs-string\">\"Doe\"</span>\n</code></pre>\n<h1>요약</h1>\n<ul>\n<li>인스턴스 컨텍스트: 인스턴스 메서드 내에서 self는 클래스의 현재 인스턴스를 가리킵니다.</li>\n<li>클래스 컨텍스트: 클래스 메서드 및 클래스 정의 내에서 self는 클래스 자체를 가리킵니다.</li>\n<li>싱글톤 메서드: self는 개별 객체에 대해 메서드를 정의하는 데 사용될 수 있습니다.</li>\n<li>메타프로그래밍: self는 동적으로 메서드를 정의하고 객체를 조작하는 데 사용됩니다.</li>\n<li>컨텍스트 인식: self는 현재 실행 컨텍스트를 이해하는 데 도움을 주며, 메서드 해결과 범위에 영향을 줍니다.</li>\n<li>속성 쓰기: self는 로컬 변수 할당과 구별하기 위해 세터 메서드를 호출하는 데 필요합니다.</li>\n</ul>\n<p>Rubyself의 사용을 숙달하면 더 유연하고 재사용 가능하며 유지 관리가 쉬운 코드를 작성할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}