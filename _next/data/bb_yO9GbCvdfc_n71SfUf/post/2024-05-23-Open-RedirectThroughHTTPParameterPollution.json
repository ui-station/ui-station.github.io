{"pageProps":{"post":{"title":"HTTP 파라미터 오염을 통한 오픈 리다이렉트","description":"","date":"2024-05-23 18:46","slug":"2024-05-23-Open-RedirectThroughHTTPParameterPollution","content":"\n안녕하세요 여러분, 어떠세요?\n\n제 친구\nSaigo\n의 요청으로, 예전에 신고한 Open-Redirect에 대한 설명을 작성 중입니다. 실제로 큰 영향을 미치지는 않았지만요.\n\n![Open-Redirect](/assets/img/2024-05-23-Open-RedirectThroughHTTPParameterPollution_0.png)\n\n# 버그 발견\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저번 글에서 오픈 리다이렉션에 대해 설명한 적이 있죠. 그럼 바로 실습으로 넘어가 보겠습니다. 테스트할 대상은 redacted.com이라고 지칭하겠습니다. 로그인 URL의 next 파라미터에 절대 URL이 전달되고 있다는 점을 발견했습니다:\n\n```js\nhttps://redacted.com/login.php?next=https://redacted.com/account.php\n```\n\n처음에는 next 파라미터를 http://evil.com으로 변경해 보았지만 실패했어요. 그래서 HTTP 파라미터 오염을 테스트하기로 결정했습니다. PHP로 구축된 사이트였기 때문에 파라미터의 마지막 등장이 일반적으로 우선권을 가집니다. 따라서 제가 만든 최종 URL은 다음과 같습니다:\n\n```js\nhttps://redacted.com/login.php?next=https://redacted.com/account.php?next=http://evil.com\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n로그인 후 http://evil.com으로 성공적으로 리디렉션되었습니다.\n\n감사합니다!\n","ogImage":{"url":"/assets/img/2024-05-23-Open-RedirectThroughHTTPParameterPollution_0.png"},"coverImage":"/assets/img/2024-05-23-Open-RedirectThroughHTTPParameterPollution_0.png","tag":["Tech"],"readingTime":2},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요 여러분, 어떠세요?</p>\n<p>제 친구\nSaigo\n의 요청으로, 예전에 신고한 Open-Redirect에 대한 설명을 작성 중입니다. 실제로 큰 영향을 미치지는 않았지만요.</p>\n<p><img src=\"/assets/img/2024-05-23-Open-RedirectThroughHTTPParameterPollution_0.png\" alt=\"Open-Redirect\"></p>\n<h1>버그 발견</h1>\n<p></p>\n<p>저번 글에서 오픈 리다이렉션에 대해 설명한 적이 있죠. 그럼 바로 실습으로 넘어가 보겠습니다. 테스트할 대상은 redacted.com이라고 지칭하겠습니다. 로그인 URL의 next 파라미터에 절대 URL이 전달되고 있다는 점을 발견했습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//redacted.com/login.php?next=https://redacted.com/account.php</span>\n</code></pre>\n<p>처음에는 next 파라미터를 <a href=\"http://evil.com%EC%9C%BC%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">http://evil.com으로</a> 변경해 보았지만 실패했어요. 그래서 HTTP 파라미터 오염을 테스트하기로 결정했습니다. PHP로 구축된 사이트였기 때문에 파라미터의 마지막 등장이 일반적으로 우선권을 가집니다. 따라서 제가 만든 최종 URL은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//redacted.com/login.php?next=https://redacted.com/account.php?next=http://evil.com</span>\n</code></pre>\n<p></p>\n<p>로그인 후 <a href=\"http://evil.com%EC%9C%BC%EB%A1%9C\" rel=\"nofollow\" target=\"_blank\">http://evil.com으로</a> 성공적으로 리디렉션되었습니다.</p>\n<p>감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}