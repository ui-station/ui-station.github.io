{"pageProps":{"post":{"title":"제18장 CompactMapValues 사용 방법 Swift","description":"","date":"2024-06-23 21:28","slug":"2024-06-23-Chapter18CompactMapValues","content":"\nCompactMapValues 개요\n\n![이미지](/assets/img/2024-06-23-Chapter18CompactMapValues_0.png)\n\ncompactMapValues 함수는 Swift에서 제공되는 고차 함수로, 사전(Dictionary)의 값을 변환하고 결과적으로 발생하는 nil 값을 제거합니다.\n\n이 함수는 주어진 클로저를 사전의 각 값에 적용하고, nil이 아닌 결과만을 포함하는 새로운 사전을 반환합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 함수는 사전(Dictionary)에서 데이터를 정리하고 변환할 때 특히 유용합니다. 여기서는 유효하지 않거나 누락된 값들을 걸러내면서 기존 값들을 변환하는 작업을 할 수 있습니다.\n\n예시:\n\n```js\nlet data: [String: String] = [\"name\": \"Alice\", \"age\": \"25\", \"height\": \"five-five\"]\nlet numericData = data.compactMapValues { Int($0) }\nprint(numericData) // 결과: [\"age\": 25]\n```\n\n설명:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- let data: [String: String] = [\"name\": \"Alice\", \"age\": \"25\", \"height\": \"five-five\"] : 문자열 키와 값으로 구성된 딕셔너리를 정의합니다.\n- let numericData = data.compactMapValues { Int($0) }: compactMapValues 함수를 사용하여 딕셔너리의 값을 변환하며, 각 값을 정수로 변환을 시도합니다.\n- 변환에 실패하면 nil 값을 제거합니다.\n- print(numericData): 결과 딕셔너리 [\"age\": 25]를 출력합니다.\n\n실행 시간 복잡도: compactMapValues 함수의 시간 복잡도는 O(n)이며, 여기서 \\( n \\)은 딕셔너리의 요소 수입니다.\n\n이 복잡성은 함수가 각 값에 대해 정확히 한 번 처리하기 때문에 발생합니다.\n\n실제 사용 사례\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자 입력의 Dictionary를 정리하고 변환하기 위해 CompactMapValues를 사용하기:\n\n```js\nlet userInputs: [String: String] = [\"username\": \"david\", \"age\": \"twenty-five\", \"score\": \"42\", \"height\": \"170\"]\nlet validData = userInputs.compactMapValues { Int($0) }\nprint(validData) // 출력은 [\"score\": 42, \"height\": 170] 입니다.\n```\n\n해설:\n\n- let userInputs: [String: String] = [\"username\": \"john_doe\", \"age\": \"twenty-five\", \"score\": \"42\", \"height\": \"170\"]: string 키와 사용자 입력을 나타내는 값으로 이루어진 Dictionary를 정의합니다.\n- let validData = userInputs.compactMapValues ' Int($0) ': compactMapValues 함수를 사용하여 Dictionary의 값을 변환하며 각 값을 정수로 변환을 시도합니다.\n- 변환에 실패하면 nil 값이 제거됩니다.\n- print(validData): 결과인 딕셔너리 [\"score\": 42, \"height\": 170]를 출력합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n주석: compactMapValues 함수는 특히 사용자 입력이나 외부 소스에서 가져온 데이터와 같이 유효하지 않거나 숫자가 아닌 값이 포함될 수 있는 경우에 딕셔너리를 변환하고 정리하는 데 특히 유용합니다.\n\ncompactMapValues를 사용하면 기존 값의 변환과 함께 유효하지 않은 항목을 걸러내어 단일하고 표현력 있는 문장으로 처리할 수 있습니다.\n\n결론\n\ncompactMapValues 함수는 Swift에서 강력한 고차 함수로, 딕셔너리의 값들을 변환하고 정리하여 nil 결과를 제거할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시간 복잡도가 O(n)인 이것은 데이터 클리닝 및 변환 작업을 효율적으로 수행하는 방법을 제공합니다.\n\n이것은 예정된 무료 eBook 중 일부이며, 1분 만에 스위프트 데이터 구조 및 알고리즘 마스터하기를 시작하세요. Beginner Swift에서 구독하세요.\n","ogImage":{"url":"/assets/img/2024-06-23-Chapter18CompactMapValues_0.png"},"coverImage":"/assets/img/2024-06-23-Chapter18CompactMapValues_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>CompactMapValues 개요</p>\n<p><img src=\"/assets/img/2024-06-23-Chapter18CompactMapValues_0.png\" alt=\"이미지\"></p>\n<p>compactMapValues 함수는 Swift에서 제공되는 고차 함수로, 사전(Dictionary)의 값을 변환하고 결과적으로 발생하는 nil 값을 제거합니다.</p>\n<p>이 함수는 주어진 클로저를 사전의 각 값에 적용하고, nil이 아닌 결과만을 포함하는 새로운 사전을 반환합니다.</p>\n<p></p>\n<p>이 함수는 사전(Dictionary)에서 데이터를 정리하고 변환할 때 특히 유용합니다. 여기서는 유효하지 않거나 누락된 값들을 걸러내면서 기존 값들을 변환하는 작업을 할 수 있습니다.</p>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-title class_\">String</span>: <span class=\"hljs-title class_\">String</span>] = [<span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-string\">\"age\"</span>: <span class=\"hljs-string\">\"25\"</span>, <span class=\"hljs-string\">\"height\"</span>: <span class=\"hljs-string\">\"five-five\"</span>]\n<span class=\"hljs-keyword\">let</span> numericData = data.<span class=\"hljs-property\">compactMapValues</span> { <span class=\"hljs-title class_\">Int</span>($0) }\n<span class=\"hljs-title function_\">print</span>(numericData) <span class=\"hljs-comment\">// 결과: [\"age\": 25]</span>\n</code></pre>\n<p>설명:</p>\n<p></p>\n<ul>\n<li>let data: [String: String] = [\"name\": \"Alice\", \"age\": \"25\", \"height\": \"five-five\"] : 문자열 키와 값으로 구성된 딕셔너리를 정의합니다.</li>\n<li>let numericData = data.compactMapValues { Int($0) }: compactMapValues 함수를 사용하여 딕셔너리의 값을 변환하며, 각 값을 정수로 변환을 시도합니다.</li>\n<li>변환에 실패하면 nil 값을 제거합니다.</li>\n<li>print(numericData): 결과 딕셔너리 [\"age\": 25]를 출력합니다.</li>\n</ul>\n<p>실행 시간 복잡도: compactMapValues 함수의 시간 복잡도는 O(n)이며, 여기서 ( n )은 딕셔너리의 요소 수입니다.</p>\n<p>이 복잡성은 함수가 각 값에 대해 정확히 한 번 처리하기 때문에 발생합니다.</p>\n<p>실제 사용 사례</p>\n<p></p>\n<p>사용자 입력의 Dictionary를 정리하고 변환하기 위해 CompactMapValues를 사용하기:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">userInputs</span>: [<span class=\"hljs-title class_\">String</span>: <span class=\"hljs-title class_\">String</span>] = [<span class=\"hljs-string\">\"username\"</span>: <span class=\"hljs-string\">\"david\"</span>, <span class=\"hljs-string\">\"age\"</span>: <span class=\"hljs-string\">\"twenty-five\"</span>, <span class=\"hljs-string\">\"score\"</span>: <span class=\"hljs-string\">\"42\"</span>, <span class=\"hljs-string\">\"height\"</span>: <span class=\"hljs-string\">\"170\"</span>]\n<span class=\"hljs-keyword\">let</span> validData = userInputs.<span class=\"hljs-property\">compactMapValues</span> { <span class=\"hljs-title class_\">Int</span>($0) }\n<span class=\"hljs-title function_\">print</span>(validData) <span class=\"hljs-comment\">// 출력은 [\"score\": 42, \"height\": 170] 입니다.</span>\n</code></pre>\n<p>해설:</p>\n<ul>\n<li>let userInputs: [String: String] = [\"username\": \"john_doe\", \"age\": \"twenty-five\", \"score\": \"42\", \"height\": \"170\"]: string 키와 사용자 입력을 나타내는 값으로 이루어진 Dictionary를 정의합니다.</li>\n<li>let validData = userInputs.compactMapValues ' Int($0) ': compactMapValues 함수를 사용하여 Dictionary의 값을 변환하며 각 값을 정수로 변환을 시도합니다.</li>\n<li>변환에 실패하면 nil 값이 제거됩니다.</li>\n<li>print(validData): 결과인 딕셔너리 [\"score\": 42, \"height\": 170]를 출력합니다.</li>\n</ul>\n<p></p>\n<p>주석: compactMapValues 함수는 특히 사용자 입력이나 외부 소스에서 가져온 데이터와 같이 유효하지 않거나 숫자가 아닌 값이 포함될 수 있는 경우에 딕셔너리를 변환하고 정리하는 데 특히 유용합니다.</p>\n<p>compactMapValues를 사용하면 기존 값의 변환과 함께 유효하지 않은 항목을 걸러내어 단일하고 표현력 있는 문장으로 처리할 수 있습니다.</p>\n<p>결론</p>\n<p>compactMapValues 함수는 Swift에서 강력한 고차 함수로, 딕셔너리의 값들을 변환하고 정리하여 nil 결과를 제거할 수 있습니다.</p>\n<p></p>\n<p>시간 복잡도가 O(n)인 이것은 데이터 클리닝 및 변환 작업을 효율적으로 수행하는 방법을 제공합니다.</p>\n<p>이것은 예정된 무료 eBook 중 일부이며, 1분 만에 스위프트 데이터 구조 및 알고리즘 마스터하기를 시작하세요. Beginner Swift에서 구독하세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}