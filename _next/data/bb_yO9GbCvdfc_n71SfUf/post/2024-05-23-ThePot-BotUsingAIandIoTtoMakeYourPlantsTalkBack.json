{"pageProps":{"post":{"title":"더 나은 식물 생장을 위해 인공지능과 사물인터넷을 활용해 보세요","description":"","date":"2024-05-23 16:17","slug":"2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack","content":"\n만약 꽃병이 말할 수 있다면 어떨까요? 인공 지능과 Raspberry Pi의 마법을 활용하면 이제 가능합니다! 식물 화분에게 말을 건네는 방법을 알려드릴게요.\n\n![화분이 말하는 Pot-Bot](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png)\n\n# 계획\n\n프로젝트의 핵심은 Raspberry Pi로 이루어진 것입니다. 화분 내 센서에서 정보를 수집하고, 이 데이터는 Python 코드를 사용하여 처리됩니다. 센서의 정보를 가볍고 Tiny Dolphin이라는 모델로 변환한 후 이를 장치 내에서 실행되는 espeak로 전송합니다. 그리고 Tiny Dolphin에서 나온 출력은 화분 옆의 Bluetooth 연결 스피커로 전송됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_1.png)\n\nWhat you will need:\n\n- Raspberry Pi, and the knowledge to SSH into it.\n- Moisture sensor.\n- Jumper wires.\n- Bluetooth speaker or 3.5mm jack speaker.\n- A pot.\n\n# Preparing the Environment\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n첫째로, Raspberry Pi를 업그레이드하세요:\n\n```js\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n다음으로, LLM 모델을 관리하는 Ollama를 설치해보겠습니다. Ollama는 로컬 모델을 손쉽게 설치할 수 있습니다:\n\n```js\ncurl -fsSL https://ollama.com/install.sh | sh\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_2.png\" />\n\n설치가 완료된 후, Ollama 웹사이트에서 Tiny Dolphin 모델을 선택하세요. 이 모델은 가벼우면서 우리의 요구에 적합합니다:\n\n```js\nollama run tinydolphin\n```\n\n\"Send a message (/? for help)\"가 나타나면 모델이 준비된 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image 1](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_3.png)\n\n# Raspberry Pi 스피커 연결\n\n3.5mm 케이블이나 블루투스를 사용하여 스피커를 연결할 수 있습니다.\n\n![Image 2](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 블루투스 연결 설정\n\nRaspberry Pi 3과 4에는 내장 블루투스가 있습니다. 연결 관리를 위해 `bluetoothctl`을 사용하실 수 있어요:\n\n1. 블루투스 콘솔 열기:\n\n```js\nbluetoothctl;\n```\n\n2. 장치 검색:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nscan on\n```\n\n<img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_5.png\" />\n\n3. 스피커를 찾아 페어링하세요 (예: Mi Portable Speaker):\n\n```js\npair 4C:65:A8:5E:CE:95\nconnect 4C:65:A8:5E:CE:95\ntrust 4C:65:A8:5E:CE:95\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_6.png\" />\n\n## 오디오 스트리밍 설정\n\nPulseAudio와 pacmd가 설치되어 있는지 확인하세요:\n\n```js\npulseaudio - version;\npacmd - version;\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n블루투스 스피커를 기본 오디오 출력 장치로 설정해보세요:\n\n```js\npacmd list-sinks | grep -E 'name:|index'\npacmd set-default-sink bluez_sink.4C_65_A8_5E_CE_95.a2dp_sink\n```\n\n.wav 파일로 테스트해보세요:\n\n```js\nwget https://freewavesamples.com/files/Police-Siren.wav\naplay Police-Siren.wav\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 텍스트 음성 변환기 설치하기\n\nespeak 모듈을 설치하고 테스트해보세요:\n\n```js\nsudo apt-get install espeak\nespeak \"hello\"\n```\n\n# 모든 것을 함께 적용하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트 폴더와 `index.py` 파일을 만들어주세요. 이 스크립트는 CPU 온도를 읽고 Tiny Dolphin에 프롬프트를 보내며 응답을 음성으로 변환합니다.\n\n```python\nimport os\nimport time\nimport subprocess\nimport json\n\ndef get_cpu_temperature():\n    \"\"\"시스템 파일에서 CPU 온도를 읽어옵니다.\"\"\"\n    with open(\"/sys/class/thermal/thermal_zone0/temp\", \"r\") as file:\n        temp = float(file.read()) / 1000\n    return temp\n\ndef run_command(command):\n    \"\"\"시스템 명령을 실행하고 결과를 반환합니다.\"\"\"\n    result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    return result.stdout.strip()\n\ndef main():\n    while True:\n        temp = get_cpu_temperature()\n        message = f\"CPU 온도에 관한 10단어 메시지를 작성하세요: {temp} 섭씨\"\n        print(\"메시지를 API로 전송합니다\")\n        print(message)\n        # POST 요청을 보내기 위한 curl 명령어 작성\n        curl_command = f\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\"model\\\": \\\"tinydolphin\\\", \\\"prompt\\\": \\\"{message}\\\", \\\"stream\\\": false}}'\"\n        print(\"curl 명령어 실행 중...\")\n        print(curl_command)\n        curl_output = run_command(curl_command)\n        print(f\"Curl 출력: {curl_output}\")\n        try:\n            # JSON 응답을 파싱하여 응답 속성을 가져옴\n            json_response = json.loads(curl_output)\n            ollama_output = json_response['response']\n            print(f\"API 응답: {ollama_output}\")\n        except json.JSONDecodeError:\n            ollama_output = \"JSON 응답을 해독하는데 실패했습니다.\"\n            print(ollama_output)\n        except KeyError:\n            ollama_output = \"JSON 응답에서 'response' 키가 누락되었습니다.\"\n            print(ollama_output)\n\n        # ollama 실행 결과를 음성으로 출력\n        os.system(f\"espeak '{ollama_output}'\")\n        time.sleep(120)  # 120초 동안 대기\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드를 실행하면 모든 것이 연결되어 작동하는지 확인할 수 있습니다. 현재 LLM이 CPU 온도에 대해 이야기하고 있습니다. 더 흥미로운 내용일 수 있겠지만, 이겁니다만 말하는 식물이 아니라 중요한 이정표입니다. 모든 것이 작동하나요? 멋져요!\n\n# 센서 연결하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라즈베리 파이의 GPIO에 직접 센서를 연결하여 냄비가 CPU 온도가 아닌 자신에 대해 이야기하도록 설정해보세요.\n\nGPIO를 사용하면 다양한 센서로부터 입력을 받아 라즈베리 파이를 실제 IoT 장치로 만들 수 있습니다. 우리는 라즈베리 파이 핀배치도를 사용하여 다양한 종류의 GPIO를 확인합니다. 예를 들어, 이 핀배치도에서 5V 전원 핀과 GND 핀을 표시했습니다.\n\n[이미지: \"2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_7.png\"]\n\n이제 습도 센서를 연결해보겠습니다. 많은 온라인 상점에서 구할 수 있습니다. 디지털 센서가 필요하며, 더 쉽고 테스트하기 편한 워터 센서를 사용할 수도 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_8.png)\n\nThere should be three pins with VCC, GND, and DO—if there are four pins (with AO), it`s OK, but disregard the DO.\n\n![image](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_9.png)\n\nLet`s connect the jumpers. You should connect the GND to the ground pin, the VCC to the 3V outlet, and the DO to GPIO17.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지금 테스트해보세요: 이 Python 코드를 temp.py 파일로 작성하고 \"python3 temp.py\"로 실행하세요.\n\n```python\nimport RPi.GPIO as GPIO\nimport time\n\n# 설정\nsensor_pin = 17\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(sensor_pin, GPIO.IN)\n\ntry:\n    while True:\n        if GPIO.input(sensor_pin):\n            print(\"물 감지됨!\")\n        else:\n            print(\"물이 감지되지 않았습니다.\")\n        time.sleep(1)  # 1초마다 읽기\n\nfinally:\n    GPIO.cleanup()  # GPIO 정리하여 모드 재설정\n```\n\n이제 센서를 물잔에 넣어봐서 콘솔에 \"물 감지됨!\"이 출력되는지 확인해보세요.\n\n![이미지](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_10.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 많은 센서를 연결할 수 있어요. 연결할수록 식물이 더 많은 데이터를 가지고, 환경에 대해 더 나은 대응을 할 거예요. 하지만 지금은 물 센서로만 진행하죠.\n\n식물을 만들어 봐요!\n\n이제 LLM, 텍스트 음성 변환, 그리고 센서가 모두 준비되었으니, 모두 연결해보는 시간이에요! 센서 데이터를 받아와 LLM으로 전송하고, 식물처럼 동작하도록 만들고, 그 상태를 토론해봅시다.\n\n```python\nimport os\nimport time\nimport subprocess\nimport RPi.GPIO as GPIO\nimport json\n\n# GPIO 설정\nsensor_pin = 17  # 연결에 따라 변경 가능\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(sensor_pin, GPIO.IN)\n\ndef run_command(command):\n    \"\"\"시스템 명령을 실행하고 결과를 반환합니다.\"\"\"\n    result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    return result.stdout.strip()\n\ndef main():\n    try:\n        while True:\n            if GPIO.input(sensor_pin):\n                message = \"당신은 모세라고 불리우는 행복한 식물이에요. 10개의 단어로 설명해 주세요.\"\n            else:\n                message = \"당신은 모세라고 불리우는 목말라 하는 식물이에요. 10개의 단어로 불평해 주세요.\"\n            print(\"메시지를 API를 통해 실행 중\")\n            print(message)\n            # POST 요청을 보내기 위한 curl 명령 구성\n            curl_command = f\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\"model\\\": \\\"tinydolphin\\\", \\\"prompt\\\": \\\"{message}\\\", \\\"stream\\\": false}}'\"\n            print(\"curl 명령 실행 중...\")\n            print(curl_command)\n            curl_output = run_command(curl_command)\n            print(f\"Curl 결과: {curl_output}\")\n            try:\n                # JSON 결과를 파싱하여 응답 속성을 가져옴\n                json_response = json.loads(curl_output)\n                api_output = json_response['response']\n                print(f\"API 응답: {api_output}\")\n            except json.JSONDecodeError:\n                api_output = \"JSON 응답을 디코딩하는 데 실패했어요.\"\n                print(api_output)\n            except KeyError:\n                api_output = \"JSON 응답에서 'response' 키가 누락되었어요.\"\n                print(api_output)\n\n            # API 출력을 음성으로 출력\n            os.system(f\"espeak \\\"{api_output}\\\"\")\n            time.sleep(120)  # 매 2분마다 확인\n    finally:\n        GPIO.cleanup()  # GPIO 정리하여 모드 재설정\n\nif __name__ == \"__main__\":\n    main()\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그리고... 말합니다!\n\n# 결론\n\n이 설정으로 여러분의 식물 화분이 AI와 IoT를 이용하여 의사소통할 수 있습니다. 프롬프트를 개인 맞춤화하거나 더 많은 센서로 상호작용을 향상시키기 위해 스크립트를 수정해보세요. 가능성은 무한합니다. 옆에 누군가 있을 때만 말을 할 수 있도록 근접 센서를 추가할 수도 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png"},"coverImage":"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>만약 꽃병이 말할 수 있다면 어떨까요? 인공 지능과 Raspberry Pi의 마법을 활용하면 이제 가능합니다! 식물 화분에게 말을 건네는 방법을 알려드릴게요.</p>\n<p><img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png\" alt=\"화분이 말하는 Pot-Bot\"></p>\n<h1>계획</h1>\n<p>프로젝트의 핵심은 Raspberry Pi로 이루어진 것입니다. 화분 내 센서에서 정보를 수집하고, 이 데이터는 Python 코드를 사용하여 처리됩니다. 센서의 정보를 가볍고 Tiny Dolphin이라는 모델로 변환한 후 이를 장치 내에서 실행되는 espeak로 전송합니다. 그리고 Tiny Dolphin에서 나온 출력은 화분 옆의 Bluetooth 연결 스피커로 전송됩니다.</p>\n<p></p>\n<p><img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_1.png\" alt=\"image\"></p>\n<p>What you will need:</p>\n<ul>\n<li>Raspberry Pi, and the knowledge to SSH into it.</li>\n<li>Moisture sensor.</li>\n<li>Jumper wires.</li>\n<li>Bluetooth speaker or 3.5mm jack speaker.</li>\n<li>A pot.</li>\n</ul>\n<h1>Preparing the Environment</h1>\n<p></p>\n<p>첫째로, Raspberry Pi를 업그레이드하세요:</p>\n<pre><code class=\"hljs language-js\">sudo apt-get update\nsudo apt-get upgrade\n</code></pre>\n<p>다음으로, LLM 모델을 관리하는 Ollama를 설치해보겠습니다. Ollama는 로컬 모델을 손쉽게 설치할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">curl -fsSL <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//ollama.com/install.sh | sh</span>\n</code></pre>\n<p></p>\n<p>설치가 완료된 후, Ollama 웹사이트에서 Tiny Dolphin 모델을 선택하세요. 이 모델은 가벼우면서 우리의 요구에 적합합니다:</p>\n<pre><code class=\"hljs language-js\">ollama run tinydolphin\n</code></pre>\n<p>\"Send a message (/? for help)\"가 나타나면 모델이 준비된 것입니다.</p>\n<p></p>\n<p><img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_3.png\" alt=\"Image 1\"></p>\n<h1>Raspberry Pi 스피커 연결</h1>\n<p>3.5mm 케이블이나 블루투스를 사용하여 스피커를 연결할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_4.png\" alt=\"Image 2\"></p>\n<p></p>\n<h2>블루투스 연결 설정</h2>\n<p>Raspberry Pi 3과 4에는 내장 블루투스가 있습니다. 연결 관리를 위해 <code>bluetoothctl</code>을 사용하실 수 있어요:</p>\n<ol>\n<li>블루투스 콘솔 열기:</li>\n</ol>\n<pre><code class=\"hljs language-js\">bluetoothctl;\n</code></pre>\n<ol start=\"2\">\n<li>장치 검색:</li>\n</ol>\n<p></p>\n<pre><code class=\"hljs language-js\">scan on\n</code></pre>\n<ol start=\"3\">\n<li>스피커를 찾아 페어링하세요 (예: Mi Portable Speaker):</li>\n</ol>\n<pre><code class=\"hljs language-js\">pair 4<span class=\"hljs-attr\">C</span>:<span class=\"hljs-number\">65</span>:<span class=\"hljs-attr\">A8</span>:5<span class=\"hljs-attr\">E</span>:<span class=\"hljs-attr\">CE</span>:<span class=\"hljs-number\">95</span>\nconnect 4<span class=\"hljs-attr\">C</span>:<span class=\"hljs-number\">65</span>:<span class=\"hljs-attr\">A8</span>:5<span class=\"hljs-attr\">E</span>:<span class=\"hljs-attr\">CE</span>:<span class=\"hljs-number\">95</span>\ntrust 4<span class=\"hljs-attr\">C</span>:<span class=\"hljs-number\">65</span>:<span class=\"hljs-attr\">A8</span>:5<span class=\"hljs-attr\">E</span>:<span class=\"hljs-attr\">CE</span>:<span class=\"hljs-number\">95</span>\n</code></pre>\n<p></p>\n<h2>오디오 스트리밍 설정</h2>\n<p>PulseAudio와 pacmd가 설치되어 있는지 확인하세요:</p>\n<pre><code class=\"hljs language-js\">pulseaudio - version;\npacmd - version;\n</code></pre>\n<p></p>\n<p>블루투스 스피커를 기본 오디오 출력 장치로 설정해보세요:</p>\n<pre><code class=\"hljs language-js\">pacmd list-sinks | grep -E <span class=\"hljs-string\">'name:|index'</span>\npacmd set-<span class=\"hljs-keyword\">default</span>-sink bluez_sink.4C_65_A8_5E_CE_95.<span class=\"hljs-property\">a2dp_sink</span>\n</code></pre>\n<p>.wav 파일로 테스트해보세요:</p>\n<pre><code class=\"hljs language-js\">wget <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//freewavesamples.com/files/Police-Siren.wav</span>\naplay <span class=\"hljs-title class_\">Police</span>-<span class=\"hljs-title class_\">Siren</span>.<span class=\"hljs-property\">wav</span>\n</code></pre>\n<p></p>\n<h1>텍스트 음성 변환기 설치하기</h1>\n<p>espeak 모듈을 설치하고 테스트해보세요:</p>\n<pre><code class=\"hljs language-js\">sudo apt-get install espeak\nespeak <span class=\"hljs-string\">\"hello\"</span>\n</code></pre>\n<h1>모든 것을 함께 적용하기</h1>\n<p></p>\n<p>프로젝트 폴더와 <code>index.py</code> 파일을 만들어주세요. 이 스크립트는 CPU 온도를 읽고 Tiny Dolphin에 프롬프트를 보내며 응답을 음성으로 변환합니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> subprocess\n<span class=\"hljs-keyword\">import</span> json\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_cpu_temperature</span>():\n    <span class=\"hljs-string\">\"\"\"시스템 파일에서 CPU 온도를 읽어옵니다.\"\"\"</span>\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/sys/class/thermal/thermal_zone0/temp\"</span>, <span class=\"hljs-string\">\"r\"</span>) <span class=\"hljs-keyword\">as</span> file:\n        temp = <span class=\"hljs-built_in\">float</span>(file.read()) / <span class=\"hljs-number\">1000</span>\n    <span class=\"hljs-keyword\">return</span> temp\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run_command</span>(<span class=\"hljs-params\">command</span>):\n    <span class=\"hljs-string\">\"\"\"시스템 명령을 실행하고 결과를 반환합니다.\"\"\"</span>\n    result = subprocess.run(command, shell=<span class=\"hljs-literal\">True</span>, capture_output=<span class=\"hljs-literal\">True</span>, text=<span class=\"hljs-literal\">True</span>)\n    <span class=\"hljs-keyword\">return</span> result.stdout.strip()\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        temp = get_cpu_temperature()\n        message = <span class=\"hljs-string\">f\"CPU 온도에 관한 10단어 메시지를 작성하세요: <span class=\"hljs-subst\">{temp}</span> 섭씨\"</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"메시지를 API로 전송합니다\"</span>)\n        <span class=\"hljs-built_in\">print</span>(message)\n        <span class=\"hljs-comment\"># POST 요청을 보내기 위한 curl 명령어 작성</span>\n        curl_command = <span class=\"hljs-string\">f\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\"model\\\": \\\"tinydolphin\\\", \\\"prompt\\\": \\\"<span class=\"hljs-subst\">{message}</span>\\\", \\\"stream\\\": false}}'\"</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"curl 명령어 실행 중...\"</span>)\n        <span class=\"hljs-built_in\">print</span>(curl_command)\n        curl_output = run_command(curl_command)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Curl 출력: <span class=\"hljs-subst\">{curl_output}</span>\"</span>)\n        <span class=\"hljs-keyword\">try</span>:\n            <span class=\"hljs-comment\"># JSON 응답을 파싱하여 응답 속성을 가져옴</span>\n            json_response = json.loads(curl_output)\n            ollama_output = json_response[<span class=\"hljs-string\">'response'</span>]\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"API 응답: <span class=\"hljs-subst\">{ollama_output}</span>\"</span>)\n        <span class=\"hljs-keyword\">except</span> json.JSONDecodeError:\n            ollama_output = <span class=\"hljs-string\">\"JSON 응답을 해독하는데 실패했습니다.\"</span>\n            <span class=\"hljs-built_in\">print</span>(ollama_output)\n        <span class=\"hljs-keyword\">except</span> KeyError:\n            ollama_output = <span class=\"hljs-string\">\"JSON 응답에서 'response' 키가 누락되었습니다.\"</span>\n            <span class=\"hljs-built_in\">print</span>(ollama_output)\n\n        <span class=\"hljs-comment\"># ollama 실행 결과를 음성으로 출력</span>\n        os.system(<span class=\"hljs-string\">f\"espeak '<span class=\"hljs-subst\">{ollama_output}</span>'\"</span>)\n        time.sleep(<span class=\"hljs-number\">120</span>)  <span class=\"hljs-comment\"># 120초 동안 대기</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n<p>이 코드를 실행하면 모든 것이 연결되어 작동하는지 확인할 수 있습니다. 현재 LLM이 CPU 온도에 대해 이야기하고 있습니다. 더 흥미로운 내용일 수 있겠지만, 이겁니다만 말하는 식물이 아니라 중요한 이정표입니다. 모든 것이 작동하나요? 멋져요!</p>\n<h1>센서 연결하기</h1>\n<p></p>\n<p>라즈베리 파이의 GPIO에 직접 센서를 연결하여 냄비가 CPU 온도가 아닌 자신에 대해 이야기하도록 설정해보세요.</p>\n<p>GPIO를 사용하면 다양한 센서로부터 입력을 받아 라즈베리 파이를 실제 IoT 장치로 만들 수 있습니다. 우리는 라즈베리 파이 핀배치도를 사용하여 다양한 종류의 GPIO를 확인합니다. 예를 들어, 이 핀배치도에서 5V 전원 핀과 GND 핀을 표시했습니다.</p>\n<p>[이미지: \"2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_7.png\"]</p>\n<p>이제 습도 센서를 연결해보겠습니다. 많은 온라인 상점에서 구할 수 있습니다. 디지털 센서가 필요하며, 더 쉽고 테스트하기 편한 워터 센서를 사용할 수도 있습니다.</p>\n<p></p>\n<p><img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_8.png\" alt=\"image\"></p>\n<p>There should be three pins with VCC, GND, and DO—if there are four pins (with AO), it`s OK, but disregard the DO.</p>\n<p><img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_9.png\" alt=\"image\"></p>\n<p>Let`s connect the jumpers. You should connect the GND to the ground pin, the VCC to the 3V outlet, and the DO to GPIO17.</p>\n<p></p>\n<p>지금 테스트해보세요: 이 Python 코드를 temp.py 파일로 작성하고 \"python3 temp.py\"로 실행하세요.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> RPi.GPIO <span class=\"hljs-keyword\">as</span> GPIO\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-comment\"># 설정</span>\nsensor_pin = <span class=\"hljs-number\">17</span>\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(sensor_pin, GPIO.IN)\n\n<span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">if</span> GPIO.<span class=\"hljs-built_in\">input</span>(sensor_pin):\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"물 감지됨!\"</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"물이 감지되지 않았습니다.\"</span>)\n        time.sleep(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># 1초마다 읽기</span>\n\n<span class=\"hljs-keyword\">finally</span>:\n    GPIO.cleanup()  <span class=\"hljs-comment\"># GPIO 정리하여 모드 재설정</span>\n</code></pre>\n<p>이제 센서를 물잔에 넣어봐서 콘솔에 \"물 감지됨!\"이 출력되는지 확인해보세요.</p>\n<p><img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_10.png\" alt=\"이미지\"></p>\n<p></p>\n<p>더 많은 센서를 연결할 수 있어요. 연결할수록 식물이 더 많은 데이터를 가지고, 환경에 대해 더 나은 대응을 할 거예요. 하지만 지금은 물 센서로만 진행하죠.</p>\n<p>식물을 만들어 봐요!</p>\n<p>이제 LLM, 텍스트 음성 변환, 그리고 센서가 모두 준비되었으니, 모두 연결해보는 시간이에요! 센서 데이터를 받아와 LLM으로 전송하고, 식물처럼 동작하도록 만들고, 그 상태를 토론해봅시다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">import</span> subprocess\n<span class=\"hljs-keyword\">import</span> RPi.GPIO <span class=\"hljs-keyword\">as</span> GPIO\n<span class=\"hljs-keyword\">import</span> json\n\n<span class=\"hljs-comment\"># GPIO 설정</span>\nsensor_pin = <span class=\"hljs-number\">17</span>  <span class=\"hljs-comment\"># 연결에 따라 변경 가능</span>\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(sensor_pin, GPIO.IN)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run_command</span>(<span class=\"hljs-params\">command</span>):\n    <span class=\"hljs-string\">\"\"\"시스템 명령을 실행하고 결과를 반환합니다.\"\"\"</span>\n    result = subprocess.run(command, shell=<span class=\"hljs-literal\">True</span>, capture_output=<span class=\"hljs-literal\">True</span>, text=<span class=\"hljs-literal\">True</span>)\n    <span class=\"hljs-keyword\">return</span> result.stdout.strip()\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n            <span class=\"hljs-keyword\">if</span> GPIO.<span class=\"hljs-built_in\">input</span>(sensor_pin):\n                message = <span class=\"hljs-string\">\"당신은 모세라고 불리우는 행복한 식물이에요. 10개의 단어로 설명해 주세요.\"</span>\n            <span class=\"hljs-keyword\">else</span>:\n                message = <span class=\"hljs-string\">\"당신은 모세라고 불리우는 목말라 하는 식물이에요. 10개의 단어로 불평해 주세요.\"</span>\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"메시지를 API를 통해 실행 중\"</span>)\n            <span class=\"hljs-built_in\">print</span>(message)\n            <span class=\"hljs-comment\"># POST 요청을 보내기 위한 curl 명령 구성</span>\n            curl_command = <span class=\"hljs-string\">f\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\"model\\\": \\\"tinydolphin\\\", \\\"prompt\\\": \\\"<span class=\"hljs-subst\">{message}</span>\\\", \\\"stream\\\": false}}'\"</span>\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"curl 명령 실행 중...\"</span>)\n            <span class=\"hljs-built_in\">print</span>(curl_command)\n            curl_output = run_command(curl_command)\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"Curl 결과: <span class=\"hljs-subst\">{curl_output}</span>\"</span>)\n            <span class=\"hljs-keyword\">try</span>:\n                <span class=\"hljs-comment\"># JSON 결과를 파싱하여 응답 속성을 가져옴</span>\n                json_response = json.loads(curl_output)\n                api_output = json_response[<span class=\"hljs-string\">'response'</span>]\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"API 응답: <span class=\"hljs-subst\">{api_output}</span>\"</span>)\n            <span class=\"hljs-keyword\">except</span> json.JSONDecodeError:\n                api_output = <span class=\"hljs-string\">\"JSON 응답을 디코딩하는 데 실패했어요.\"</span>\n                <span class=\"hljs-built_in\">print</span>(api_output)\n            <span class=\"hljs-keyword\">except</span> KeyError:\n                api_output = <span class=\"hljs-string\">\"JSON 응답에서 'response' 키가 누락되었어요.\"</span>\n                <span class=\"hljs-built_in\">print</span>(api_output)\n\n            <span class=\"hljs-comment\"># API 출력을 음성으로 출력</span>\n            os.system(<span class=\"hljs-string\">f\"espeak \\\"<span class=\"hljs-subst\">{api_output}</span>\\\"\"</span>)\n            time.sleep(<span class=\"hljs-number\">120</span>)  <span class=\"hljs-comment\"># 매 2분마다 확인</span>\n    <span class=\"hljs-keyword\">finally</span>:\n        GPIO.cleanup()  <span class=\"hljs-comment\"># GPIO 정리하여 모드 재설정</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n<p></p>\n<p>그리고... 말합니다!</p>\n<h1>결론</h1>\n<p>이 설정으로 여러분의 식물 화분이 AI와 IoT를 이용하여 의사소통할 수 있습니다. 프롬프트를 개인 맞춤화하거나 더 많은 센서로 상호작용을 향상시키기 위해 스크립트를 수정해보세요. 가능성은 무한합니다. 옆에 누군가 있을 때만 말을 할 수 있도록 근접 센서를 추가할 수도 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}