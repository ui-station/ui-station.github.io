{"pageProps":{"post":{"title":"처음으로 Kotlin Multiplatform KMM 프로젝트를 Android Studio에서 빌드하는 방법","description":"","date":"2024-06-23 23:47","slug":"2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio","content":"\n![이미지](/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_0.png)\n\n코틀린 멀티플랫폼(KMP)은 코틀린 프로그래밍 언어의 기능으로, 개발자가 단일 코드베이스를 사용하여 Android, iOS, JavaScript 및 JVM과 같은 여러 플랫폼에서 실행할 수 있는 코드를 작성할 수 있게 해줍니다.\n\n이 방식은 코드 재사용을 극대화하고 중복을 줄이기 위한 것으로, 공통 로직을 다른 플랫폼 간에 공유하면서 필요한 경우에 플랫폼별 코드를 사용할 수 있도록 합니다.\n\n# Kotlin 멀티플랫폼의 장점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 코드 재사용성: 공통 로직을 한 번 작성하고 여러 플랫폼에서 재사용하여 코드 중복 및 유지 보수 노력을 줄입니다.\n- 일관성: 동일한 코드베이스를 공유함으로써 다양한 플랫폼에서 일관된 동작을 보장합니다.\n- 생산성: 비즈니스 로직 및 기타 UI 이외의 구성 요소를 공유하여 개발 속도를 높입니다.\n- 유연성: 공유 코드베이스를 유지한 채 필요에 따라 플랫폼별 API 및 라이브러리를 사용합니다.\n\n이제 코드 작성을 시작하고 Android Studio에서 KMM 프로젝트가 어떻게 작동하는지 확인해보겠습니다.\n\n- Android Studio에 KMM 플러그인을 추가하고 플러그인이 추가되도록 IDE를 재시작합니다.\n\n![KMM project in Android Studio](/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 안녕하세요! 안드로이드 스튜디오에서 새로운 KMM 앱을 만들고 있습니다. 프로젝트 구조가 아래와 같이 보일 것입니다.\n\n![프로젝트 구조](/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_2.png)\n\n3. KMM 프로젝트의 shared 폴더는 코드 재사용성, 일관성, 효율적인 개발 목표를 달성하는 데 근본적인 역할을 합니다. 비즈니스 로직을 중앙 집중화하여 중복을 줄이고 유지보수를 간소화함으로써 더 나은 협업을 도모하고 플랫폼 간 일관된 동작을 보장합니다. 공유 코드를 활용함으로써 개발자들은 더 효율적이고 적은 리소스로 견고하고 기능이 풍부한 애플리케이션을 개발할 수 있습니다.\n\n![공유 폴더](/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n4. 리소스 및 이미지를 추가하기 위해 The IceRock Moko 라이브러리(Mobile Kotlin)를 사용할 예정입니다. 이 라이브러리는 Kotlin Multiplatform Mobile (KMM) 애플리케이션 개발을 간편하게 하는 데 사용되는 라이브러리 및 도구 세트입니다. 이러한 라이브러리는 iOS 및 Android를 위한 공유 코드 작성을 지원하여 개발자가 효율적으로 크로스 플랫폼 모바일 애플리케이션을 생성할 수 있도록 합니다. IceRock Moko는 네트워크 요청, 리소스, MVVM 아키텍처, 권한 처리 등과 같은 모바일 개발의 다양한 측면을 다루는 다양한 라이브러리를 제공합니다.\n\n5. build.gradle.kts (:shared) 업데이트\n\n```js\nplugins {\n    kotlin(\"multiplatform\")\n    id(\"com.android.library\")\n    id(\"dev.icerock.mobile.multiplatform-resources\")\n}\n\nkotlin {\n    android {\n        compilations.all {\n            kotlinOptions {\n                jvmTarget = \"1.8\"\n            }\n        }\n    }\n    task(\"testClasses\")\n\n    listOf(\n        iosX64(),\n        iosArm64(),\n        iosSimulatorArm64()\n    ).forEach {\n        it.binaries.framework {\n            baseName = \"shared\"\n            isStatic = true\n            export(\"dev.icerock.moko:resources:0.22.3\")\n            export(\"dev.icerock.moko:graphics:0.9.0\")\n        }\n    }\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                api(\"dev.icerock.moko:resources:0.22.3\")\n            }\n        }\n\n       val  commonTest by getting {\n           dependencies{\n               implementation(libs.kotlin.test)\n           }\n        }\n        val androidMain by getting\n        val iosX64Main by getting\n        val iosArm64Main by getting\n        val iosSimulatorArm64Main by getting\n        val iosMain by creating {\n            dependsOn(commonMain)\n            iosX64Main.dependsOn(this)\n            iosArm64Main.dependsOn(this)\n            iosSimulatorArm64Main.dependsOn(this)\n        }\n        val iosX64Test by getting\n        val iosArm64Test by getting\n        val iosSimulatorArm64Test by getting\n    }\n}\n\nandroid {\n    namespace = \"com.tokai.mobile.coffeeworld\"\n    compileSdk = 34\n    defaultConfig {\n        minSdk = 24\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n}\nmultiplatformResources {\n    multiplatformResourcesPackage = \"com.tokai.mobile.coffeeworld\"\n    multiplatformResourcesClassName = \"SharedRes\"\n}\n```\n\n6. build.gradle.kts(:androidApp) 업데이트\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n플러그인 {\n    id(\"com.android.application\")\n    kotlin(\"android\")\n}\n\nandroid {\n    namespace = \"com.tokai.mobile.coffeeworld.android\"\n    compileSdk = 34\n    defaultConfig {\n        applicationId = \"com.tokai.mobile.coffeeworld.android\"\n        minSdk = 24\n        targetSdk = 34\n        versionCode = 1\n        versionName = \"1.0\"\n    }\n    buildFeatures {\n        compose = true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion =\"1.4.4\"\n    }\n    packaging {\n        resources {\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\n        }\n    }\n    buildTypes {\n        getByName(\"release\") {\n            isMinifyEnabled = false\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n}\n\ndependencies {\n    implementation(projects.shared)\n    implementation(\"androidx.compose.ui:ui-tooling:1.6.8\")\n    implementation(\"androidx.compose.ui:ui-tooling-preview:1.6.8\")\n    implementation(\"androidx.compose.foundation:foundation:1.4.4\")\n    implementation(\"androidx.compose.material:material:1.4.0\")\n    implementation(\"androidx.activity:activity-compose:1.7.0\")\n    implementation(\"org.jetbrains.kotlin:kotlin-test:1.8.10\")\n    implementation(\"androidx.compose.material3:material3:1.1.2\")\n}\n```\n\n7. build.gradle.kts(CoffeeWorld)를 업데이트 합니다\n\n```js\n플러그인 {\n    // 동일한 플러그인 버전을 모든 서브 모듈에서 사용하기 위한 트릭\n    id(\"com.android.application\").version(\"8.0.1\").apply(false)\n    id(\"com.android.library\").version(\"8.0.1\").apply(false)\n    kotlin(\"android\").version(\"1.8.10\").apply(false)\n    kotlin(\"multiplatform\").version(\"1.8.10\").apply(false)\n}\nbuildscript {\n    dependencies {\n        classpath(\"dev.icerock.moko:resources-generator:0.22.3\")\n    }\n}\n\ntasks.register(\"clean\", Delete::class) {\n    delete(rootProject.buildDir)\n}\n```\n\nAndroid Studio에서 프로젝트를 다시 빌드하세요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n8. 안드로이드 스튜디오에서 다음 버전들이 언급되었습니다.\n\n```js\nagp = \"8.0.1\";\nkotlin = \"1.8.10\";\ncompose = \"1.4.4\";\n```\n\n```js\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.0-bin.zip\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n```\n\n9. 이제 공유 폴더인 commonMain 내 KMM 프로젝트에서 문자열 파일을 만들어 보겠습니다. resources라는 새 디렉토리를 만들었고, MR/base 및 MR/de를 만들었습니다. 영어 및 독일어 언어용 두 개의 문자열 파일을 생성했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_4.png\" />\n\nMR/base/strings.xml\n\n```js\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<resources>\n    <string name=\"hello_world\">안녕 세계</string>\n    <string name=\"hello_x\">안녕 %s</string>\n</resources>\n```\n\nMR/de/strings.xml\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<resources>\n    <string name=\"hello_world\">Hallo Welt</string>\n    <string name=\"hello_x\">Hallo %s</string>\n</resources>\n```\n\n10. shared 폴더 아래 iosMain과 androidMain에 String.kt 파일을 추가합니다.\n\n![image](/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_5.png)\n\niosMain/Strings.kt\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n패키지 com.tokai.mobile.coffeeworld\n\nimport dev.icerock.moko.resources.StringResource\nimport dev.icerock.moko.resources.desc.Resource\nimport dev.icerock.moko.resources.desc.StringDesc\nimport dev.icerock.moko.resources.format\n\n실제 클래스 Strings() {\n    실제로 fun get(id: StringResource, args: List<Any>): String {\n        return if (args.isEmpty()) {\n            StringDesc.Resource(id).localized()\n        } else {\n            id.format(*args.toTypedArray()).localized()\n        }\n    }\n}\n```\n\nandroidMain/Strings.kt\n\n```js\n패키지 com.tokai.mobile.coffeeworld\n\nimport android.content.Context\nimport dev.icerock.moko.resources.StringResource\nimport dev.icerock.moko.resources.desc.Resource\nimport dev.icerock.moko.resources.desc.StringDesc\nimport dev.icerock.moko.resources.format\n\n실제 클래스 Strings(private val context: Context) {\n    실제로 fun get(id: StringResource, args: List<Any>): String {\n        return if (args.isEmpty()) {\n            StringDesc.Resource(id).toString(context = context)\n        } else {\n            id.format(*args.toTypedArray()).toString(context)\n        }\n    }\n}\n```\n\n11. 이제 프로젝트를 다시 빌드하고 KMM 프로젝트의 공용 폴더인 commonMain/resources/MR/images 경로에 이미지를 추가합니다. 이미지를 추가한 후 프로젝트를 다시 빌드합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_6.png)\n\n12. 이제 androidApp 내의 MainActivity에서 코드를 업데이트하고 프로젝트를 실행합니다.\n\n```js\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.tokai.mobile.coffeeworld.Greeting\nimport com.tokai.mobile.coffeeworld.SharedRes\nimport com.tokai.mobile.coffeeworld.Strings\nimport dev.icerock.moko.resources.StringResource\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            MyApplicationTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    Column(\n                        modifier = Modifier.fillMaxSize(),\n                        verticalArrangement = Arrangement.Center,\n                        horizontalAlignment = Alignment.CenterHorizontally\n                    ) {\n                        Image(\n                            painter = painterResource(\n                                id = com.tokai.mobile.coffeeworld.R.drawable.coffee\n                            ),\n                            contentDescription = null\n                        )\n                        Text(\n                            text = stringResource(\n                                id = SharedRes.strings.hello_world\n                            )\n                        )\n                        Text(\n                            text = stringResource(\n                                id = SharedRes.strings.hello_x,\n                                \"Parita\"\n                            )\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun stringResource(id: StringResource, vararg args: Any): String {\n    return Strings(LocalContext.current).get(id, args.toList())\n}\n\n@Composable\nfun GreetingView(text: String) {\n    Text(text = text)\n}\n\n@Preview\n@Composable\nfun DefaultPreview() {\n    MyApplicationTheme {\n        GreetingView(\"Hello, Android!\")\n    }\n}\n```\n\n13. 결과물은 다음과 같이 보일 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_7.png)\n\n# 이 프로젝트의 Github 링크: https://github.com/paritadey/CoffeeWorld\n\nKMM에서의 다음 코딩 세트로 돌아오겠습니다. 그 동안 즐거운 코딩하세요!!\n","ogImage":{"url":"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_0.png"},"coverImage":"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_0.png","tag":["Tech"],"readingTime":14},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_0.png\" alt=\"이미지\"></p>\n<p>코틀린 멀티플랫폼(KMP)은 코틀린 프로그래밍 언어의 기능으로, 개발자가 단일 코드베이스를 사용하여 Android, iOS, JavaScript 및 JVM과 같은 여러 플랫폼에서 실행할 수 있는 코드를 작성할 수 있게 해줍니다.</p>\n<p>이 방식은 코드 재사용을 극대화하고 중복을 줄이기 위한 것으로, 공통 로직을 다른 플랫폼 간에 공유하면서 필요한 경우에 플랫폼별 코드를 사용할 수 있도록 합니다.</p>\n<h1>Kotlin 멀티플랫폼의 장점</h1>\n<p></p>\n<ul>\n<li>코드 재사용성: 공통 로직을 한 번 작성하고 여러 플랫폼에서 재사용하여 코드 중복 및 유지 보수 노력을 줄입니다.</li>\n<li>일관성: 동일한 코드베이스를 공유함으로써 다양한 플랫폼에서 일관된 동작을 보장합니다.</li>\n<li>생산성: 비즈니스 로직 및 기타 UI 이외의 구성 요소를 공유하여 개발 속도를 높입니다.</li>\n<li>유연성: 공유 코드베이스를 유지한 채 필요에 따라 플랫폼별 API 및 라이브러리를 사용합니다.</li>\n</ul>\n<p>이제 코드 작성을 시작하고 Android Studio에서 KMM 프로젝트가 어떻게 작동하는지 확인해보겠습니다.</p>\n<ul>\n<li>Android Studio에 KMM 플러그인을 추가하고 플러그인이 추가되도록 IDE를 재시작합니다.</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_1.png\" alt=\"KMM project in Android Studio\"></p>\n<p></p>\n<ol start=\"2\">\n<li>안녕하세요! 안드로이드 스튜디오에서 새로운 KMM 앱을 만들고 있습니다. 프로젝트 구조가 아래와 같이 보일 것입니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_2.png\" alt=\"프로젝트 구조\"></p>\n<ol start=\"3\">\n<li>KMM 프로젝트의 shared 폴더는 코드 재사용성, 일관성, 효율적인 개발 목표를 달성하는 데 근본적인 역할을 합니다. 비즈니스 로직을 중앙 집중화하여 중복을 줄이고 유지보수를 간소화함으로써 더 나은 협업을 도모하고 플랫폼 간 일관된 동작을 보장합니다. 공유 코드를 활용함으로써 개발자들은 더 효율적이고 적은 리소스로 견고하고 기능이 풍부한 애플리케이션을 개발할 수 있습니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_3.png\" alt=\"공유 폴더\"></p>\n<p></p>\n<ol start=\"4\">\n<li>\n<p>리소스 및 이미지를 추가하기 위해 The IceRock Moko 라이브러리(Mobile Kotlin)를 사용할 예정입니다. 이 라이브러리는 Kotlin Multiplatform Mobile (KMM) 애플리케이션 개발을 간편하게 하는 데 사용되는 라이브러리 및 도구 세트입니다. 이러한 라이브러리는 iOS 및 Android를 위한 공유 코드 작성을 지원하여 개발자가 효율적으로 크로스 플랫폼 모바일 애플리케이션을 생성할 수 있도록 합니다. IceRock Moko는 네트워크 요청, 리소스, MVVM 아키텍처, 권한 처리 등과 같은 모바일 개발의 다양한 측면을 다루는 다양한 라이브러리를 제공합니다.</p>\n</li>\n<li>\n<p>build.gradle.kts (:shared) 업데이트</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-js\">plugins {\n    <span class=\"hljs-title function_\">kotlin</span>(<span class=\"hljs-string\">\"multiplatform\"</span>)\n    <span class=\"hljs-title function_\">id</span>(<span class=\"hljs-string\">\"com.android.library\"</span>)\n    <span class=\"hljs-title function_\">id</span>(<span class=\"hljs-string\">\"dev.icerock.mobile.multiplatform-resources\"</span>)\n}\n\nkotlin {\n    android {\n        compilations.<span class=\"hljs-property\">all</span> {\n            kotlinOptions {\n                jvmTarget = <span class=\"hljs-string\">\"1.8\"</span>\n            }\n        }\n    }\n    <span class=\"hljs-title function_\">task</span>(<span class=\"hljs-string\">\"testClasses\"</span>)\n\n    <span class=\"hljs-title function_\">listOf</span>(\n        <span class=\"hljs-title function_\">iosX64</span>(),\n        <span class=\"hljs-title function_\">iosArm64</span>(),\n        <span class=\"hljs-title function_\">iosSimulatorArm64</span>()\n    ).<span class=\"hljs-property\">forEach</span> {\n        it.<span class=\"hljs-property\">binaries</span>.<span class=\"hljs-property\">framework</span> {\n            baseName = <span class=\"hljs-string\">\"shared\"</span>\n            isStatic = <span class=\"hljs-literal\">true</span>\n            <span class=\"hljs-title function_\">export</span>(<span class=\"hljs-string\">\"dev.icerock.moko:resources:0.22.3\"</span>)\n            <span class=\"hljs-title function_\">export</span>(<span class=\"hljs-string\">\"dev.icerock.moko:graphics:0.9.0\"</span>)\n        }\n    }\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                <span class=\"hljs-title function_\">api</span>(<span class=\"hljs-string\">\"dev.icerock.moko:resources:0.22.3\"</span>)\n            }\n        }\n\n       val  commonTest by getting {\n           dependencies{\n               <span class=\"hljs-title function_\">implementation</span>(libs.<span class=\"hljs-property\">kotlin</span>.<span class=\"hljs-property\">test</span>)\n           }\n        }\n        val androidMain by getting\n        val iosX64Main by getting\n        val iosArm64Main by getting\n        val iosSimulatorArm64Main by getting\n        val iosMain by creating {\n            <span class=\"hljs-title function_\">dependsOn</span>(commonMain)\n            iosX64Main.<span class=\"hljs-title function_\">dependsOn</span>(<span class=\"hljs-variable language_\">this</span>)\n            iosArm64Main.<span class=\"hljs-title function_\">dependsOn</span>(<span class=\"hljs-variable language_\">this</span>)\n            iosSimulatorArm64Main.<span class=\"hljs-title function_\">dependsOn</span>(<span class=\"hljs-variable language_\">this</span>)\n        }\n        val iosX64Test by getting\n        val iosArm64Test by getting\n        val iosSimulatorArm64Test by getting\n    }\n}\n\nandroid {\n    namespace = <span class=\"hljs-string\">\"com.tokai.mobile.coffeeworld\"</span>\n    compileSdk = <span class=\"hljs-number\">34</span>\n    defaultConfig {\n        minSdk = <span class=\"hljs-number\">24</span>\n    }\n    compileOptions {\n        sourceCompatibility = <span class=\"hljs-title class_\">JavaVersion</span>.<span class=\"hljs-property\">VERSION_1_8</span>\n        targetCompatibility = <span class=\"hljs-title class_\">JavaVersion</span>.<span class=\"hljs-property\">VERSION_1_8</span>\n    }\n}\nmultiplatformResources {\n    multiplatformResourcesPackage = <span class=\"hljs-string\">\"com.tokai.mobile.coffeeworld\"</span>\n    multiplatformResourcesClassName = <span class=\"hljs-string\">\"SharedRes\"</span>\n}\n</code></pre>\n<ol start=\"6\">\n<li>build.gradle.kts(:androidApp) 업데이트</li>\n</ol>\n<p></p>\n<pre><code class=\"hljs language-js\">플러그인 {\n    <span class=\"hljs-title function_\">id</span>(<span class=\"hljs-string\">\"com.android.application\"</span>)\n    <span class=\"hljs-title function_\">kotlin</span>(<span class=\"hljs-string\">\"android\"</span>)\n}\n\nandroid {\n    namespace = <span class=\"hljs-string\">\"com.tokai.mobile.coffeeworld.android\"</span>\n    compileSdk = <span class=\"hljs-number\">34</span>\n    defaultConfig {\n        applicationId = <span class=\"hljs-string\">\"com.tokai.mobile.coffeeworld.android\"</span>\n        minSdk = <span class=\"hljs-number\">24</span>\n        targetSdk = <span class=\"hljs-number\">34</span>\n        versionCode = <span class=\"hljs-number\">1</span>\n        versionName = <span class=\"hljs-string\">\"1.0\"</span>\n    }\n    buildFeatures {\n        compose = <span class=\"hljs-literal\">true</span>\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion =<span class=\"hljs-string\">\"1.4.4\"</span>\n    }\n    packaging {\n        resources {\n            excludes += <span class=\"hljs-string\">\"/META-INF/{AL2.0,LGPL2.1}\"</span>\n        }\n    }\n    buildTypes {\n        <span class=\"hljs-title function_\">getByName</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"release\"</span></span>) {\n            isMinifyEnabled = <span class=\"hljs-literal\">false</span>\n        }\n    }\n    compileOptions {\n        sourceCompatibility = <span class=\"hljs-title class_\">JavaVersion</span>.<span class=\"hljs-property\">VERSION_1_8</span>\n        targetCompatibility = <span class=\"hljs-title class_\">JavaVersion</span>.<span class=\"hljs-property\">VERSION_1_8</span>\n    }\n    kotlinOptions {\n        jvmTarget = <span class=\"hljs-string\">\"1.8\"</span>\n    }\n}\n\ndependencies {\n    <span class=\"hljs-title function_\">implementation</span>(projects.<span class=\"hljs-property\">shared</span>)\n    <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.compose.ui:ui-tooling:1.6.8\"</span>)\n    <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.compose.ui:ui-tooling-preview:1.6.8\"</span>)\n    <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.compose.foundation:foundation:1.4.4\"</span>)\n    <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.compose.material:material:1.4.0\"</span>)\n    <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.activity:activity-compose:1.7.0\"</span>)\n    <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"org.jetbrains.kotlin:kotlin-test:1.8.10\"</span>)\n    <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.compose.material3:material3:1.1.2\"</span>)\n}\n</code></pre>\n<ol start=\"7\">\n<li>build.gradle.kts(CoffeeWorld)를 업데이트 합니다</li>\n</ol>\n<pre><code class=\"hljs language-js\">플러그인 {\n    <span class=\"hljs-comment\">// 동일한 플러그인 버전을 모든 서브 모듈에서 사용하기 위한 트릭</span>\n    <span class=\"hljs-title function_\">id</span>(<span class=\"hljs-string\">\"com.android.application\"</span>).<span class=\"hljs-title function_\">version</span>(<span class=\"hljs-string\">\"8.0.1\"</span>).<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">false</span>)\n    <span class=\"hljs-title function_\">id</span>(<span class=\"hljs-string\">\"com.android.library\"</span>).<span class=\"hljs-title function_\">version</span>(<span class=\"hljs-string\">\"8.0.1\"</span>).<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">false</span>)\n    <span class=\"hljs-title function_\">kotlin</span>(<span class=\"hljs-string\">\"android\"</span>).<span class=\"hljs-title function_\">version</span>(<span class=\"hljs-string\">\"1.8.10\"</span>).<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">false</span>)\n    <span class=\"hljs-title function_\">kotlin</span>(<span class=\"hljs-string\">\"multiplatform\"</span>).<span class=\"hljs-title function_\">version</span>(<span class=\"hljs-string\">\"1.8.10\"</span>).<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">false</span>)\n}\nbuildscript {\n    dependencies {\n        <span class=\"hljs-title function_\">classpath</span>(<span class=\"hljs-string\">\"dev.icerock.moko:resources-generator:0.22.3\"</span>)\n    }\n}\n\ntasks.<span class=\"hljs-title function_\">register</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"clean\"</span>, Delete::<span class=\"hljs-keyword\">class</span></span>) {\n    <span class=\"hljs-title function_\">delete</span>(rootProject.<span class=\"hljs-property\">buildDir</span>)\n}\n</code></pre>\n<p>Android Studio에서 프로젝트를 다시 빌드하세요</p>\n<p></p>\n<ol start=\"8\">\n<li>안드로이드 스튜디오에서 다음 버전들이 언급되었습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">agp = <span class=\"hljs-string\">\"8.0.1\"</span>;\nkotlin = <span class=\"hljs-string\">\"1.8.10\"</span>;\ncompose = <span class=\"hljs-string\">\"1.4.4\"</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\">distributionBase=<span class=\"hljs-variable constant_\">GRADLE_USER_HOME</span>\ndistributionPath=wrapper/dists\ndistributionUrl=https\\:<span class=\"hljs-comment\">//services.gradle.org/distributions/gradle-8.0-bin.zip</span>\nzipStoreBase=<span class=\"hljs-variable constant_\">GRADLE_USER_HOME</span>\nzipStorePath=wrapper/dists\n</code></pre>\n<ol start=\"9\">\n<li>이제 공유 폴더인 commonMain 내 KMM 프로젝트에서 문자열 파일을 만들어 보겠습니다. resources라는 새 디렉토리를 만들었고, MR/base 및 MR/de를 만들었습니다. 영어 및 독일어 언어용 두 개의 문자열 파일을 생성했습니다.</li>\n</ol>\n<p></p>\n<p>MR/base/strings.xml</p>\n<pre><code class=\"hljs language-js\">&#x3C;?xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span> ?>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">resources</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">string</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"hello_world\"</span>></span>안녕 세계<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">string</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">string</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"hello_x\"</span>></span>안녕 %s<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">string</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">resources</span>></span></span>\n</code></pre>\n<p>MR/de/strings.xml</p>\n<p></p>\n<pre><code class=\"hljs language-kotlin\">&#x3C;?xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span> ?>\n&#x3C;resources>\n    &#x3C;string name=<span class=\"hljs-string\">\"hello_world\"</span>>Hallo Welt&#x3C;/string>\n    &#x3C;string name=<span class=\"hljs-string\">\"hello_x\"</span>>Hallo %s&#x3C;/string>\n&#x3C;/resources>\n</code></pre>\n<ol start=\"10\">\n<li>shared 폴더 아래 iosMain과 androidMain에 String.kt 파일을 추가합니다.</li>\n</ol>\n<p><img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_5.png\" alt=\"image\"></p>\n<p>iosMain/Strings.kt</p>\n<p></p>\n<pre><code class=\"hljs language-js\">패키지 com.<span class=\"hljs-property\">tokai</span>.<span class=\"hljs-property\">mobile</span>.<span class=\"hljs-property\">coffeeworld</span>\n\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">StringResource</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">desc</span>.<span class=\"hljs-property\">Resource</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">desc</span>.<span class=\"hljs-property\">StringDesc</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">format</span>\n\n실제 클래스 <span class=\"hljs-title class_\">Strings</span>() {\n    실제로 fun <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">StringResource</span>, <span class=\"hljs-attr\">args</span>: <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Any</span>>): <span class=\"hljs-title class_\">String</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-title function_\">isEmpty</span>()) {\n            <span class=\"hljs-title class_\">StringDesc</span>.<span class=\"hljs-title class_\">Resource</span>(id).<span class=\"hljs-title function_\">localized</span>()\n        } <span class=\"hljs-keyword\">else</span> {\n            id.<span class=\"hljs-title function_\">format</span>(*args.<span class=\"hljs-title function_\">toTypedArray</span>()).<span class=\"hljs-title function_\">localized</span>()\n        }\n    }\n}\n</code></pre>\n<p>androidMain/Strings.kt</p>\n<pre><code class=\"hljs language-js\">패키지 com.<span class=\"hljs-property\">tokai</span>.<span class=\"hljs-property\">mobile</span>.<span class=\"hljs-property\">coffeeworld</span>\n\n<span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">content</span>.<span class=\"hljs-property\">Context</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">StringResource</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">desc</span>.<span class=\"hljs-property\">Resource</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">desc</span>.<span class=\"hljs-property\">StringDesc</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">format</span>\n\n실제 클래스 <span class=\"hljs-title class_\">Strings</span>(private val <span class=\"hljs-attr\">context</span>: <span class=\"hljs-title class_\">Context</span>) {\n    실제로 fun <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">StringResource</span>, <span class=\"hljs-attr\">args</span>: <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Any</span>>): <span class=\"hljs-title class_\">String</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-title function_\">isEmpty</span>()) {\n            <span class=\"hljs-title class_\">StringDesc</span>.<span class=\"hljs-title class_\">Resource</span>(id).<span class=\"hljs-title function_\">toString</span>(context = context)\n        } <span class=\"hljs-keyword\">else</span> {\n            id.<span class=\"hljs-title function_\">format</span>(*args.<span class=\"hljs-title function_\">toTypedArray</span>()).<span class=\"hljs-title function_\">toString</span>(context)\n        }\n    }\n}\n</code></pre>\n<ol start=\"11\">\n<li>이제 프로젝트를 다시 빌드하고 KMM 프로젝트의 공용 폴더인 commonMain/resources/MR/images 경로에 이미지를 추가합니다. 이미지를 추가한 후 프로젝트를 다시 빌드합니다.</li>\n</ol>\n<p></p>\n<p><img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_6.png\" alt=\"이미지\"></p>\n<ol start=\"12\">\n<li>이제 androidApp 내의 MainActivity에서 코드를 업데이트하고 프로젝트를 실행합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">os</span>.<span class=\"hljs-property\">Bundle</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">activity</span>.<span class=\"hljs-property\">ComponentActivity</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">activity</span>.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">setContent</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">foundation</span>.<span class=\"hljs-property\">Image</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">foundation</span>.<span class=\"hljs-property\">layout</span>.<span class=\"hljs-property\">Arrangement</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">foundation</span>.<span class=\"hljs-property\">layout</span>.<span class=\"hljs-property\">Column</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">foundation</span>.<span class=\"hljs-property\">layout</span>.<span class=\"hljs-property\">fillMaxSize</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">material3</span>.*\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">runtime</span>.<span class=\"hljs-property\">Composable</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">ui</span>.<span class=\"hljs-property\">Alignment</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">ui</span>.<span class=\"hljs-property\">Modifier</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">ui</span>.<span class=\"hljs-property\">platform</span>.<span class=\"hljs-property\">LocalContext</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">ui</span>.<span class=\"hljs-property\">res</span>.<span class=\"hljs-property\">painterResource</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">compose</span>.<span class=\"hljs-property\">ui</span>.<span class=\"hljs-property\">tooling</span>.<span class=\"hljs-property\">preview</span>.<span class=\"hljs-property\">Preview</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">tokai</span>.<span class=\"hljs-property\">mobile</span>.<span class=\"hljs-property\">coffeeworld</span>.<span class=\"hljs-property\">Greeting</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">tokai</span>.<span class=\"hljs-property\">mobile</span>.<span class=\"hljs-property\">coffeeworld</span>.<span class=\"hljs-property\">SharedRes</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">tokai</span>.<span class=\"hljs-property\">mobile</span>.<span class=\"hljs-property\">coffeeworld</span>.<span class=\"hljs-property\">Strings</span>\n<span class=\"hljs-keyword\">import</span> dev.<span class=\"hljs-property\">icerock</span>.<span class=\"hljs-property\">moko</span>.<span class=\"hljs-property\">resources</span>.<span class=\"hljs-property\">StringResource</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainActivity</span> : <span class=\"hljs-title class_\">ComponentActivity</span>() {\n    override fun <span class=\"hljs-title function_\">onCreate</span>(<span class=\"hljs-params\">savedInstanceState: Bundle?</span>) {\n        <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">onCreate</span>(savedInstanceState)\n        setContent {\n            <span class=\"hljs-title class_\">MyApplicationTheme</span> {\n                <span class=\"hljs-title class_\">Surface</span>(\n                    modifier = <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">fillMaxSize</span>(),\n                    color = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">background</span>\n                ) {\n                    <span class=\"hljs-title class_\">Column</span>(\n                        modifier = <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">fillMaxSize</span>(),\n                        verticalArrangement = <span class=\"hljs-title class_\">Arrangement</span>.<span class=\"hljs-property\">Center</span>,\n                        horizontalAlignment = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterHorizontally</span>\n                    ) {\n                        <span class=\"hljs-title class_\">Image</span>(\n                            painter = <span class=\"hljs-title function_\">painterResource</span>(\n                                id = com.<span class=\"hljs-property\">tokai</span>.<span class=\"hljs-property\">mobile</span>.<span class=\"hljs-property\">coffeeworld</span>.<span class=\"hljs-property\">R</span>.<span class=\"hljs-property\">drawable</span>.<span class=\"hljs-property\">coffee</span>\n                            ),\n                            contentDescription = <span class=\"hljs-literal\">null</span>\n                        )\n                        <span class=\"hljs-title class_\">Text</span>(\n                            text = <span class=\"hljs-title function_\">stringResource</span>(\n                                id = <span class=\"hljs-title class_\">SharedRes</span>.<span class=\"hljs-property\">strings</span>.<span class=\"hljs-property\">hello_world</span>\n                            )\n                        )\n                        <span class=\"hljs-title class_\">Text</span>(\n                            text = <span class=\"hljs-title function_\">stringResource</span>(\n                                id = <span class=\"hljs-title class_\">SharedRes</span>.<span class=\"hljs-property\">strings</span>.<span class=\"hljs-property\">hello_x</span>,\n                                <span class=\"hljs-string\">\"Parita\"</span>\n                            )\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title function_\">stringResource</span>(<span class=\"hljs-attr\">id</span>: <span class=\"hljs-title class_\">StringResource</span>, vararg <span class=\"hljs-attr\">args</span>: <span class=\"hljs-title class_\">Any</span>): <span class=\"hljs-title class_\">String</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Strings</span>(<span class=\"hljs-title class_\">LocalContext</span>.<span class=\"hljs-property\">current</span>).<span class=\"hljs-title function_\">get</span>(id, args.<span class=\"hljs-title function_\">toList</span>())\n}\n\n@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">GreetingView</span>(<span class=\"hljs-attr\">text</span>: <span class=\"hljs-title class_\">String</span>) {\n    <span class=\"hljs-title class_\">Text</span>(text = text)\n}\n\n@<span class=\"hljs-title class_\">Preview</span>\n@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">DefaultPreview</span>() {\n    <span class=\"hljs-title class_\">MyApplicationTheme</span> {\n        <span class=\"hljs-title class_\">GreetingView</span>(<span class=\"hljs-string\">\"Hello, Android!\"</span>)\n    }\n}\n</code></pre>\n<ol start=\"13\">\n<li>결과물은 다음과 같이 보일 것입니다.</li>\n</ol>\n<p></p>\n<p><img src=\"/assets/img/2024-06-23-FirstKotlinMultiplatformKMMprojecttobuildinAndroidStudio_7.png\" alt=\"image\"></p>\n<h1>이 프로젝트의 Github 링크: <a href=\"https://github.com/paritadey/CoffeeWorld\" rel=\"nofollow\" target=\"_blank\">https://github.com/paritadey/CoffeeWorld</a></h1>\n<p>KMM에서의 다음 코딩 세트로 돌아오겠습니다. 그 동안 즐거운 코딩하세요!!</p>\n</body>\n</html>\n"},"__N_SSG":true}