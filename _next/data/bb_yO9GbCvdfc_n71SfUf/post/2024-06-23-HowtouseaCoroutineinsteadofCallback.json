{"pageProps":{"post":{"title":"Callback 대신 Coroutine 사용하는 방법","description":"","date":"2024-06-23 23:28","slug":"2024-06-23-HowtouseaCoroutineinsteadofCallback","content":"\n콜백을 코루틴으로 대체하는 것은 비동기 작업을 처리하기 위해 콜백을 사용하는 코드를 코루틴 기반 코드로 변환하는 것을 의미합니다. 이렇게하면 코드가 더 읽기 쉽고 유지 관리하기 쉬워집니다. Kotlin에서 코루틴은 복잡한 콜백 체인 없이 비동기 작업을 처리할 수 있습니다.\n\n아래는 콜백 기반 접근 방식을 코루틴으로 대체하는 방법입니다:\n\n콜백 수신을 위한 인터페이스:\n\n```js\ninterface Callback<T> {\n    fun onSuccess(response: T)\n    fun onFailure(e: Throwable)\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n추상화 계층 추가를 위한 서비스 인터페이스:\n\n```kotlin\ninterface FruitService {\n    fun fetchFruits(callback: Callback<List<String>>)\n}\n```\n\n과일 목록을 가져오는 데이터 소스:\n\n```kotlin\nclass FruitsDataSource : FruitService {\n    override fun fetchFruits(callback: Callback<List<String>>) {\n        Thread {\n            try {\n                Thread.sleep(1000) // API 호출을 시뮬레이션하기 위한 지연\n                callback.onSuccess(fruits)\n            } catch (e: Exception) {\n                callback.onFailure(e)\n            }\n        }.apply {\n            start()\n            join()\n        }\n    }\n\n    private companion object {\n        val fruits = listOf(\n            \"사과\",\n            \"망고\",\n            \"체리\",\n            \"바나나\",\n            \"레몬\",\n            \"수박\",\n            \"달콤한 라임\",\n            \"오렌지\",\n            \"키위\"\n        )\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAPI 호출을 하는 저장소:\n\n```js\nclass FruitsRepository(\n    fruitService: FruitService\n) {\n\n    private var _service: FruitService = fruitService\n\n    fun fetchFruits(callback: Callback<List<String>>) {\n        _service.fetchFruits(callback)\n    }\n}\n```\n\n# 1. Callback 접근 방식 이해\n\n일반적인 콜백 기반 함수부터 시작해봅시다. 비동기 작업을 하는 과일 데이터를 가져오는 작업이 있으며 결과를 반환하기 위해 콜백을 사용한다고 가정해봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nfun fetchFruitsLegacyWay(repository: FruitsRepository) {\n    repository.fetchFruits(object : Callback<List<String>> {\n        override fun onSuccess(response: List<String>) {\n            println(\"fetchFruitsLegacyWay: onSuccess: $response \")\n        }\n\n        override fun onFailure(e: Throwable) {\n            println(\"fetchFruitsLegacyWay: onFailure: ${e.message} \")\n        }\n    })\n}\n```\n\nCallback을 사용하여 API 호출하는 방법:\n\n```kotlin\nfun main() {\n    val repository = FruitsRepository(LegacyDataSource())\n    fetchFruitsLegacyWay(repository)\n}\n```\n\n# 2. 코루틴으로 변환하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이를 코루틴 기반 접근 방식으로 변환하려면 다음 단계를 따르세요:\n\n- 서스펜드 함수 생성: 콜백 함수를 서스펜드 함수로 변경합니다.\n- 코루틴 빌더 사용: launch 또는 async를 사용하여 코루틴 스코프 내에서 서스펜드 함수를 호출합니다.\n- 예외 처리: 콜백 오류 메서드 대신 코루틴 내에서 try-catch를 사용하여 예외를 처리합니다.\n\n## 단계별 변환\n\n서스펜드 함수 정의: 콜백을 제거하고 함수를 서스펜드로 변경하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 내용을 추가하여 Service Interface를 업데이트하세요:\n\n```kotlin\nsuspend fun fetchFruits(): List<String> // 새로운 중단 함수\n```\n\n아래 코드를 추가하여 FruitsDataSource를 업데이트하세요:\n\n```kotlin\n// 과일 목록을 가져오는 중단 함수\noverride suspend fun fetchFruits(): List<String> {\n    delay(1000) // API 호출을 모방하기 위한 지연\n    return fruits\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래의 코드를 추가하여 FruitsRepository를 업데이트해주세요:\n\n```kotlin\noverride suspend fun fetchFruits(): List<String>  {\n    return _service.fetchFruits()\n}\n```\n\n사용하는 Suspend Function 호출하기: launch 또는 async와 같은 코루틴 빌더를 사용하여 suspend function을 호출합니다.\n\n## launch를 사용한 예시''\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprivate suspend fun fetchFruitsUsingCoroutine(repository: FruitsRepository) {\n    try {\n        println(\"fetchFruitsUsingCoroutine 성공:${repository.fetchFruits()}\")\n    } catch (ex: Exception) {\n        println(\"fetchFruitsUsingCoroutine 실패:${ex.message}\")\n    }\n}\n```\n\n```js\nfun main() = runBlocking {\n    // IO 컨텍스트에서 코루틴 실행\n    launch(Dispatchers.IO) {\n        try {\n            val repository = FruitsRepository(LegacyDataSource())\n            fetchFruitsUsingCoroutine(repository)\n            println(result) // Output: 서버로부터의 과일 목록\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n}\n```\n\n# 3. Async/Await를 사용한 여러 작업 처리\n\n만약 여러 비동기 태스크를 수행해야 한다면, 코루틴은 동시 실행을 위해 async를, 결과를 기다리기 위해 await를 사용하여 더 우아하게 처리할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 예시: 코루틴을 이용한 여러 작업\n\n```js\nfun main() = runBlocking {\n  val repository = FruitsRepository(LegacyDataSource())\n\n  val fruits1 = async { repository.fetchFruits() } //API 호출 1\n  val data1 = fruits1.await()\n  println(\"Data1: $data1\") // 출력: 서버에서 과일 목록\n\n  val fruits2 = async { repository.fetchFruits() } // API 호출 2\n  val data2 = fruits2.await()\n  println(\"Data2: $data2\") // 출력: 서버에서 과일 목록\n}\n```\n\n# 4. 기존 코드 통합\n\n기존 콜백을 사용하는 레거시 시스템과 통합할 때, suspendCoroutine 또는 suspendCancellableCoroutine을 사용하여 콜백 기반 코드를 코루틴으로 래핑할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 예시: 코루틴을 이용한 콜백 감싸기\n\n```kotlin\nprivate suspend fun fetchFruitsUsingCoroutines(repository: FruitsRepository) {\n  suspendCoroutine { continuation ->\n      repository.fetchFruits(object : Callback<List<String>> {\n          override fun onSuccess(response: List<String>) {\n              continuation.resume(response)\n          }\n\n          override fun onFailure(e: Throwable) {\n              continuation.resumeWithException(e)\n          }\n      })\n  }.let {\n      println(\"fetchFruitsUsingCoroutines: Response: $it\")\n  }\n}\n```\n\n# 5. 코루틴 사용의 장점\n\n- 가독성: 코루틴을 사용하면 동기 코드처럼 보이고 동작하는 비동기 코드를 간편하게 작성할 수 있습니다.\n- 확장성: 코루틴은 가벼우며 많은 수의 동시 작업을 효율적으로 처리할 수 있습니다.\n- 구조화된 병행성: 비동기 작업의 라이프사이클을 보다 효과적으로 관리할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n콜백을 코루틴으로 변환하면 코드를 현대화하여 유지 및 확장하기 쉬워집니다.\n","ogImage":{"url":"/assets/img/2024-06-23-HowtouseaCoroutineinsteadofCallback_0.png"},"coverImage":"/assets/img/2024-06-23-HowtouseaCoroutineinsteadofCallback_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>콜백을 코루틴으로 대체하는 것은 비동기 작업을 처리하기 위해 콜백을 사용하는 코드를 코루틴 기반 코드로 변환하는 것을 의미합니다. 이렇게하면 코드가 더 읽기 쉽고 유지 관리하기 쉬워집니다. Kotlin에서 코루틴은 복잡한 콜백 체인 없이 비동기 작업을 처리할 수 있습니다.</p>\n<p>아래는 콜백 기반 접근 방식을 코루틴으로 대체하는 방법입니다:</p>\n<p>콜백 수신을 위한 인터페이스:</p>\n<pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">Callback</span>&#x3C;T> {\n    fun <span class=\"hljs-title function_\">onSuccess</span>(<span class=\"hljs-attr\">response</span>: T)\n    fun <span class=\"hljs-title function_\">onFailure</span>(<span class=\"hljs-attr\">e</span>: <span class=\"hljs-title class_\">Throwable</span>)\n}\n</code></pre>\n<p></p>\n<p>추상화 계층 추가를 위한 서비스 인터페이스:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">FruitService</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchFruits</span><span class=\"hljs-params\">(callback: <span class=\"hljs-type\">Callback</span>&#x3C;<span class=\"hljs-type\">List</span>&#x3C;<span class=\"hljs-type\">String</span>>>)</span></span>\n}\n</code></pre>\n<p>과일 목록을 가져오는 데이터 소스:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FruitsDataSource</span> : <span class=\"hljs-type\">FruitService</span> {\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchFruits</span><span class=\"hljs-params\">(callback: <span class=\"hljs-type\">Callback</span>&#x3C;<span class=\"hljs-type\">List</span>&#x3C;<span class=\"hljs-type\">String</span>>>)</span></span> {\n        Thread {\n            <span class=\"hljs-keyword\">try</span> {\n                Thread.sleep(<span class=\"hljs-number\">1000</span>) <span class=\"hljs-comment\">// API 호출을 시뮬레이션하기 위한 지연</span>\n                callback.onSuccess(fruits)\n            } <span class=\"hljs-keyword\">catch</span> (e: Exception) {\n                callback.onFailure(e)\n            }\n        }.apply {\n            start()\n            join()\n        }\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">companion</span> <span class=\"hljs-keyword\">object</span> {\n        <span class=\"hljs-keyword\">val</span> fruits = listOf(\n            <span class=\"hljs-string\">\"사과\"</span>,\n            <span class=\"hljs-string\">\"망고\"</span>,\n            <span class=\"hljs-string\">\"체리\"</span>,\n            <span class=\"hljs-string\">\"바나나\"</span>,\n            <span class=\"hljs-string\">\"레몬\"</span>,\n            <span class=\"hljs-string\">\"수박\"</span>,\n            <span class=\"hljs-string\">\"달콤한 라임\"</span>,\n            <span class=\"hljs-string\">\"오렌지\"</span>,\n            <span class=\"hljs-string\">\"키위\"</span>\n        )\n    }\n}\n</code></pre>\n<p></p>\n<p>API 호출을 하는 저장소:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FruitsRepository</span>(\n    <span class=\"hljs-attr\">fruitService</span>: <span class=\"hljs-title class_\">FruitService</span>\n) {\n\n    private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">_service</span>: <span class=\"hljs-title class_\">FruitService</span> = fruitService\n\n    fun <span class=\"hljs-title function_\">fetchFruits</span>(<span class=\"hljs-params\">callback: Callback&#x3C;List&#x3C;<span class=\"hljs-built_in\">String</span>>></span>) {\n        _service.<span class=\"hljs-title function_\">fetchFruits</span>(callback)\n    }\n}\n</code></pre>\n<h1>1. Callback 접근 방식 이해</h1>\n<p>일반적인 콜백 기반 함수부터 시작해봅시다. 비동기 작업을 하는 과일 데이터를 가져오는 작업이 있으며 결과를 반환하기 위해 콜백을 사용한다고 가정해봅시다.</p>\n<p></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchFruitsLegacyWay</span><span class=\"hljs-params\">(repository: <span class=\"hljs-type\">FruitsRepository</span>)</span></span> {\n    repository.fetchFruits(<span class=\"hljs-keyword\">object</span> : Callback&#x3C;List&#x3C;String>> {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onSuccess</span><span class=\"hljs-params\">(response: <span class=\"hljs-type\">List</span>&#x3C;<span class=\"hljs-type\">String</span>>)</span></span> {\n            println(<span class=\"hljs-string\">\"fetchFruitsLegacyWay: onSuccess: <span class=\"hljs-variable\">$response</span> \"</span>)\n        }\n\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onFailure</span><span class=\"hljs-params\">(e: <span class=\"hljs-type\">Throwable</span>)</span></span> {\n            println(<span class=\"hljs-string\">\"fetchFruitsLegacyWay: onFailure: <span class=\"hljs-subst\">${e.message}</span> \"</span>)\n        }\n    })\n}\n</code></pre>\n<p>Callback을 사용하여 API 호출하는 방법:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">val</span> repository = FruitsRepository(LegacyDataSource())\n    fetchFruitsLegacyWay(repository)\n}\n</code></pre>\n<h1>2. 코루틴으로 변환하기</h1>\n<p></p>\n<p>이를 코루틴 기반 접근 방식으로 변환하려면 다음 단계를 따르세요:</p>\n<ul>\n<li>서스펜드 함수 생성: 콜백 함수를 서스펜드 함수로 변경합니다.</li>\n<li>코루틴 빌더 사용: launch 또는 async를 사용하여 코루틴 스코프 내에서 서스펜드 함수를 호출합니다.</li>\n<li>예외 처리: 콜백 오류 메서드 대신 코루틴 내에서 try-catch를 사용하여 예외를 처리합니다.</li>\n</ul>\n<h2>단계별 변환</h2>\n<p>서스펜드 함수 정의: 콜백을 제거하고 함수를 서스펜드로 변경하세요.</p>\n<p></p>\n<p>아래 내용을 추가하여 Service Interface를 업데이트하세요:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchFruits</span><span class=\"hljs-params\">()</span></span>: List&#x3C;String> <span class=\"hljs-comment\">// 새로운 중단 함수</span>\n</code></pre>\n<p>아래 코드를 추가하여 FruitsDataSource를 업데이트하세요:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-comment\">// 과일 목록을 가져오는 중단 함수</span>\n<span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchFruits</span><span class=\"hljs-params\">()</span></span>: List&#x3C;String> {\n    delay(<span class=\"hljs-number\">1000</span>) <span class=\"hljs-comment\">// API 호출을 모방하기 위한 지연</span>\n    <span class=\"hljs-keyword\">return</span> fruits\n}\n</code></pre>\n<p></p>\n<p>아래의 코드를 추가하여 FruitsRepository를 업데이트해주세요:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchFruits</span><span class=\"hljs-params\">()</span></span>: List&#x3C;String>  {\n    <span class=\"hljs-keyword\">return</span> _service.fetchFruits()\n}\n</code></pre>\n<p>사용하는 Suspend Function 호출하기: launch 또는 async와 같은 코루틴 빌더를 사용하여 suspend function을 호출합니다.</p>\n<h2>launch를 사용한 예시''</h2>\n<p></p>\n<pre><code class=\"hljs language-js\">private suspend fun <span class=\"hljs-title function_\">fetchFruitsUsingCoroutine</span>(<span class=\"hljs-params\">repository: FruitsRepository</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"fetchFruitsUsingCoroutine 성공:${repository.fetchFruits()}\"</span>)\n    } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-attr\">ex</span>: <span class=\"hljs-title class_\">Exception</span>) {\n        <span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"fetchFruitsUsingCoroutine 실패:${ex.message}\"</span>)\n    }\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">fun <span class=\"hljs-title function_\">main</span>() = runBlocking {\n    <span class=\"hljs-comment\">// IO 컨텍스트에서 코루틴 실행</span>\n    <span class=\"hljs-title function_\">launch</span>(<span class=\"hljs-params\">Dispatchers.IO</span>) {\n        <span class=\"hljs-keyword\">try</span> {\n            val repository = <span class=\"hljs-title class_\">FruitsRepository</span>(<span class=\"hljs-title class_\">LegacyDataSource</span>())\n            <span class=\"hljs-title function_\">fetchFruitsUsingCoroutine</span>(repository)\n            <span class=\"hljs-title function_\">println</span>(result) <span class=\"hljs-comment\">// Output: 서버로부터의 과일 목록</span>\n        } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-attr\">e</span>: <span class=\"hljs-title class_\">Exception</span>) {\n            e.<span class=\"hljs-title function_\">printStackTrace</span>()\n        }\n    }\n}\n</code></pre>\n<h1>3. Async/Await를 사용한 여러 작업 처리</h1>\n<p>만약 여러 비동기 태스크를 수행해야 한다면, 코루틴은 동시 실행을 위해 async를, 결과를 기다리기 위해 await를 사용하여 더 우아하게 처리할 수 있습니다.</p>\n<p></p>\n<h2>예시: 코루틴을 이용한 여러 작업</h2>\n<pre><code class=\"hljs language-js\">fun <span class=\"hljs-title function_\">main</span>() = runBlocking {\n  val repository = <span class=\"hljs-title class_\">FruitsRepository</span>(<span class=\"hljs-title class_\">LegacyDataSource</span>())\n\n  val fruits1 = <span class=\"hljs-keyword\">async</span> { repository.<span class=\"hljs-title function_\">fetchFruits</span>() } <span class=\"hljs-comment\">//API 호출 1</span>\n  val data1 = fruits1.<span class=\"hljs-title function_\">await</span>()\n  <span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Data1: $data1\"</span>) <span class=\"hljs-comment\">// 출력: 서버에서 과일 목록</span>\n\n  val fruits2 = <span class=\"hljs-keyword\">async</span> { repository.<span class=\"hljs-title function_\">fetchFruits</span>() } <span class=\"hljs-comment\">// API 호출 2</span>\n  val data2 = fruits2.<span class=\"hljs-title function_\">await</span>()\n  <span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Data2: $data2\"</span>) <span class=\"hljs-comment\">// 출력: 서버에서 과일 목록</span>\n}\n</code></pre>\n<h1>4. 기존 코드 통합</h1>\n<p>기존 콜백을 사용하는 레거시 시스템과 통합할 때, suspendCoroutine 또는 suspendCancellableCoroutine을 사용하여 콜백 기반 코드를 코루틴으로 래핑할 수 있습니다.</p>\n<p></p>\n<h2>예시: 코루틴을 이용한 콜백 감싸기</h2>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchFruitsUsingCoroutines</span><span class=\"hljs-params\">(repository: <span class=\"hljs-type\">FruitsRepository</span>)</span></span> {\n  suspendCoroutine { continuation ->\n      repository.fetchFruits(<span class=\"hljs-keyword\">object</span> : Callback&#x3C;List&#x3C;String>> {\n          <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onSuccess</span><span class=\"hljs-params\">(response: <span class=\"hljs-type\">List</span>&#x3C;<span class=\"hljs-type\">String</span>>)</span></span> {\n              continuation.resume(response)\n          }\n\n          <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onFailure</span><span class=\"hljs-params\">(e: <span class=\"hljs-type\">Throwable</span>)</span></span> {\n              continuation.resumeWithException(e)\n          }\n      })\n  }.let {\n      println(<span class=\"hljs-string\">\"fetchFruitsUsingCoroutines: Response: <span class=\"hljs-variable\">$it</span>\"</span>)\n  }\n}\n</code></pre>\n<h1>5. 코루틴 사용의 장점</h1>\n<ul>\n<li>가독성: 코루틴을 사용하면 동기 코드처럼 보이고 동작하는 비동기 코드를 간편하게 작성할 수 있습니다.</li>\n<li>확장성: 코루틴은 가벼우며 많은 수의 동시 작업을 효율적으로 처리할 수 있습니다.</li>\n<li>구조화된 병행성: 비동기 작업의 라이프사이클을 보다 효과적으로 관리할 수 있습니다.</li>\n</ul>\n<p></p>\n<p>콜백을 코루틴으로 변환하면 코드를 현대화하여 유지 및 확장하기 쉬워집니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}