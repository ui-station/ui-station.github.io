{"pageProps":{"post":{"title":"자바 SpringBoot를 사용한 JSON 스키마 유효성 검사기","description":"","date":"2024-05-17 17:43","slug":"2024-05-17-JSONSchemaValidatorusingJavaSpringBoot","content":"\n## Json 스키마란 무엇인가요?\n\nJSON Schema은 선언적 언어입니다. 이는 우리 서비스에 특정한 json 구조를 정의하고 유효성을 검사합니다. 주어진 json 데이터에 대한 표준 구조로 여러 시스템에서 사용할 수 있습니다. 자세한 내용은 여기를 참조하세요: what-is-jsonschema?\n\n## Json 스키마를 사용하는 이유는 무엇인가요?\n\n대부분의 경우, 서비스에서 들어오는 json을 유효성 검사하는 것이 필요합니다. 간단한 json은 속성에 제약 조건을 적용하여 POJO 또는 모델에 매핑할 때 유효성을 검사할 수 있습니다. 그러나 때로는 json이 복잡하여 이러한 제약 조건을 사용하여 모든 필드를 유효성을 검사할 수 없는 경우가 있습니다. JsonSchema를 사용하면 표준화된 구조를 사용하여 복잡한 json을 유효성을 검사할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 내용:\n\nSpringBoot와 Json Schema를 사용하는 단계별 가이드입니다. 이를 위해 networknt 라이브러리를 사용할 것입니다. 단계를 거친 후에는 테스트를 위해 수신된 json에 대한 몇 가지 시나리오가 있습니다.\n\n참고: 이 문서는 SpringBoot와 JsonSchema의 사용을 위한 것입니다. 이는 JsonSchema의 일부 기능 및 사용법에 대해 가르치기 위한 것입니다.\n\n## 1. SpringBoot 웹 애플리케이션을 생성하세요: https://start.spring.io/\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png)\n\n알림: spring-boot 및 java의 모든 버전 및 프로젝트 유형을 선택할 수 있습니다.\n\n## 2. pom.xml 또는 build.gradle에 종속성 추가.\n\n```js\n<--\npom.xml\nhttps://mvnrepository.com/artifact/com.networknt/json-schema-validator\n-->\n<dependency>\n  <groupId>com.networknt</groupId>\n  <artifactId>json-schema-validator</artifactId>\n  <version>1.4.0</version>\n</dependency>\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// build.gradle\n// https://mvnrepository.com/artifact/com.networknt/json-schema-validator\nimplementation 'com.networknt:json-schema-validator:1.4.0'\n```\n\n## 3. 리소스 유효성 검사 JSON 파일을 생성합니다.\n\n```js\n{\n \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"title\": \"Order Event\",\n    \"description\": \"예제용 주문 이벤트 스키마\",\n    \"required\": [\"order_id\", \"total_price\", \"products\" ],\n    \"properties\": {\n       \"order_id\": {\n          \"type\": \"string\"\n        },\n        \"event\": {\n          \"enum\": [\"PLACED\", \"DELIVERED\", \"RETURNED\"],\n          \"type\": \"string\"\n        },\n        \"total_price\": {\n         \"type\": \"number\",\n             \"minimum\": 0\n     },\n        \"products\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"additionalProperties\": true,\n        \"required\": [\"product_id\", \"price\"],\n        \"minItems\": 1,\n        \"properties\": {\n          \"product_id\": {\n            \"type\": \"string\"\n          },\n          \"price\": {\n            \"type\": \"number\",\n            \"minimum\": 0\n          },\n          \"quantity\": {\n            \"type\": \"integer\"\n          }\n        }\n      }\n    }\n   }\n}\n```\n\n## 4. JsonSchema 빈을 생성합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n호출자 메서드에서는 JsonSchema 객체를 직접 생성할 수 있지만, 빈을 생성하고 사용하는 것을 권장합니다.\n\n```java\n@Configuration\npublic class AppConfiguration {\n    private static final String SCHEMA_VALIDATION_FILE = \"validation.json\";\n\n    @Bean\n    public JsonSchema jsonSchema() {\n        return JsonSchemaFactory\n                .getInstance( SpecVersion.VersionFlag.V7 )\n                .getSchema( getClass().getResourceAsStream( SCHEMA_VALIDATION_FILE ) );\n    }\n}\n```\n\n## 5. JsonSchema 사용법\n\n이제 JsonSchema 객체를 사용해보겠습니다. JsonNode를 매개변수로 사용하는 메서드가 있는 Service 클래스를 만들겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```java\n@Slf4j\n@Service\npublic class JsonSchemaValidationService{\n\n  @Autowired\n  private JsonSchema jsonSchema;\n\n  public String validateJson(JsonNode jsonNode){\n\n    Set<ValidationMessage> errors = jsonSchema.validate(jsonNode);\n    //if errors have a single miss match, there would be a value in the errors set.\n    if(errors.isEmpty()){\n      //event is valid.\n      log.info(\"event is valid\");\n    }else{\n        //event is in_valid.\n      log.info(\"event is invalid\");\n     }\n      return errors.toString();\n  }\n}\n```\n\n## 6. Create a Rest Controller.\n\n```java\nimport com.fasterxml.jackson.databind.JsonNode;\n@RestController\npublic class JsonSchemaController {\n    @Autowired\n    private JsonSchemaValidationService service;\n\n    @PostMapping(\"/validate\")\n    public String validateEvent( @RequestBody JsonNode jsonNode ){\n       return service.validateJson(jsonNode);\n    }\n}\n```\n\n## 7. Start the SpringBoot Application and start sending requests.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 모든 것이 준비되었으니, 즐겨 사용하는 클라이언트를 사용하여 코드를 테스트할 수 있습니다. 저는 PostMan을 사용하고 있어요. 아래에서 유효한 이벤트로 시작해보겠습니다.\n\n```js\n# 유효한 데이터\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"order_id\":\"order134\",\n   \"event\": \"PLACED\",\n   \"products\": [\n     {\n       \"product_id\": \"product_1\",\n        \"price\":20.5,\n       \"quantity\":2\n     }\n   ],\n   \"total_price\": 41\n}'\n```\n\n응답:\n\n```js\n[];\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# order id 없는 페이로드\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"event\": \"PLACED\",\n   \"products\": [\n     {\n       \"product_id\": \"product_1\",\n        \"price\":20.5,\n       \"quantity\":2\n     }\n   ],\n   \"total_price\": 41\n}'\n```\n\n응답 :\n\n```js\n[$.order_id: 필수 항목이지만 누락되었습니다]\n```\n\n```js\n# order id 없는 페이로드\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"order_id\":\"order134\",\n   \"event\": \"PLACED\",\n   \"total_price\": 41\n}'\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n[$.products: is missing but it is required]\n```\n\n```js\n# order id가 없는 payload\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n \"order_id\" : \"order_123\",\n   \"event\": \"PLACED\",\n   \"products\": [\n\n   ],\n   \"total_price\": 41\n}'\n```\n\n응답 :\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n[$.products: 배열에는 최소 1개의 항목이 있어야 합니다.]\n```\n\n<img src=\"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_1.png\" />\n","ogImage":{"url":"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png"},"coverImage":"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>Json 스키마란 무엇인가요?</h2>\n<p>JSON Schema은 선언적 언어입니다. 이는 우리 서비스에 특정한 json 구조를 정의하고 유효성을 검사합니다. 주어진 json 데이터에 대한 표준 구조로 여러 시스템에서 사용할 수 있습니다. 자세한 내용은 여기를 참조하세요: what-is-jsonschema?</p>\n<h2>Json 스키마를 사용하는 이유는 무엇인가요?</h2>\n<p>대부분의 경우, 서비스에서 들어오는 json을 유효성 검사하는 것이 필요합니다. 간단한 json은 속성에 제약 조건을 적용하여 POJO 또는 모델에 매핑할 때 유효성을 검사할 수 있습니다. 그러나 때로는 json이 복잡하여 이러한 제약 조건을 사용하여 모든 필드를 유효성을 검사할 수 없는 경우가 있습니다. JsonSchema를 사용하면 표준화된 구조를 사용하여 복잡한 json을 유효성을 검사할 수 있습니다.</p>\n<p></p>\n<h2>내용:</h2>\n<p>SpringBoot와 Json Schema를 사용하는 단계별 가이드입니다. 이를 위해 networknt 라이브러리를 사용할 것입니다. 단계를 거친 후에는 테스트를 위해 수신된 json에 대한 몇 가지 시나리오가 있습니다.</p>\n<p>참고: 이 문서는 SpringBoot와 JsonSchema의 사용을 위한 것입니다. 이는 JsonSchema의 일부 기능 및 사용법에 대해 가르치기 위한 것입니다.</p>\n<h2>1. SpringBoot 웹 애플리케이션을 생성하세요: <a href=\"https://start.spring.io/\" rel=\"nofollow\" target=\"_blank\">https://start.spring.io/</a></h2>\n<p></p>\n<p><img src=\"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png\" alt=\"image\"></p>\n<p>알림: spring-boot 및 java의 모든 버전 및 프로젝트 유형을 선택할 수 있습니다.</p>\n<h2>2. pom.xml 또는 build.gradle에 종속성 추가.</h2>\n<pre><code class=\"hljs language-js\">&#x3C;--\npom.<span class=\"hljs-property\">xml</span>\n<span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//mvnrepository.com/artifact/com.networknt/json-schema-validator</span>\n-->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">dependency</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">groupId</span>></span>com.networknt<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">groupId</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">artifactId</span>></span>json-schema-validator<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">artifactId</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">version</span>></span>1.4.0<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">version</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">dependency</span>></span></span>\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// build.gradle</span>\n<span class=\"hljs-comment\">// https://mvnrepository.com/artifact/com.networknt/json-schema-validator</span>\nimplementation <span class=\"hljs-string\">'com.networknt:json-schema-validator:1.4.0'</span>\n</code></pre>\n<h2>3. 리소스 유효성 검사 JSON 파일을 생성합니다.</h2>\n<pre><code class=\"hljs language-js\">{\n <span class=\"hljs-string\">\"$schema\"</span>: <span class=\"hljs-string\">\"http://json-schema.org/draft-07/schema#\"</span>,\n    <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Order Event\"</span>,\n    <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"예제용 주문 이벤트 스키마\"</span>,\n    <span class=\"hljs-string\">\"required\"</span>: [<span class=\"hljs-string\">\"order_id\"</span>, <span class=\"hljs-string\">\"total_price\"</span>, <span class=\"hljs-string\">\"products\"</span> ],\n    <span class=\"hljs-string\">\"properties\"</span>: {\n       <span class=\"hljs-string\">\"order_id\"</span>: {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"string\"</span>\n        },\n        <span class=\"hljs-string\">\"event\"</span>: {\n          <span class=\"hljs-string\">\"enum\"</span>: [<span class=\"hljs-string\">\"PLACED\"</span>, <span class=\"hljs-string\">\"DELIVERED\"</span>, <span class=\"hljs-string\">\"RETURNED\"</span>],\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"string\"</span>\n        },\n        <span class=\"hljs-string\">\"total_price\"</span>: {\n         <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n             <span class=\"hljs-string\">\"minimum\"</span>: <span class=\"hljs-number\">0</span>\n     },\n        <span class=\"hljs-string\">\"products\"</span>: {\n      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"array\"</span>,\n      <span class=\"hljs-string\">\"items\"</span>: {\n        <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">\"required\"</span>: [<span class=\"hljs-string\">\"product_id\"</span>, <span class=\"hljs-string\">\"price\"</span>],\n        <span class=\"hljs-string\">\"minItems\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">\"properties\"</span>: {\n          <span class=\"hljs-string\">\"product_id\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"string\"</span>\n          },\n          <span class=\"hljs-string\">\"price\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n            <span class=\"hljs-string\">\"minimum\"</span>: <span class=\"hljs-number\">0</span>\n          },\n          <span class=\"hljs-string\">\"quantity\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"integer\"</span>\n          }\n        }\n      }\n    }\n   }\n}\n</code></pre>\n<h2>4. JsonSchema 빈을 생성합니다.</h2>\n<p></p>\n<p>호출자 메서드에서는 JsonSchema 객체를 직접 생성할 수 있지만, 빈을 생성하고 사용하는 것을 권장합니다.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfiguration</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">SCHEMA_VALIDATION_FILE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"validation.json\"</span>;\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> JsonSchema <span class=\"hljs-title function_\">jsonSchema</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> JsonSchemaFactory\n                .getInstance( SpecVersion.VersionFlag.V7 )\n                .getSchema( getClass().getResourceAsStream( SCHEMA_VALIDATION_FILE ) );\n    }\n}\n</code></pre>\n<h2>5. JsonSchema 사용법</h2>\n<p>이제 JsonSchema 객체를 사용해보겠습니다. JsonNode를 매개변수로 사용하는 메서드가 있는 Service 클래스를 만들겠습니다.</p>\n<p></p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Slf4j</span>\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JsonSchemaValidationService</span>{\n\n  <span class=\"hljs-meta\">@Autowired</span>\n  <span class=\"hljs-keyword\">private</span> JsonSchema jsonSchema;\n\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">validateJson</span><span class=\"hljs-params\">(JsonNode jsonNode)</span>{\n\n    Set&#x3C;ValidationMessage> errors = jsonSchema.validate(jsonNode);\n    <span class=\"hljs-comment\">//if errors have a single miss match, there would be a value in the errors set.</span>\n    <span class=\"hljs-keyword\">if</span>(errors.isEmpty()){\n      <span class=\"hljs-comment\">//event is valid.</span>\n      log.info(<span class=\"hljs-string\">\"event is valid\"</span>);\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-comment\">//event is in_valid.</span>\n      log.info(<span class=\"hljs-string\">\"event is invalid\"</span>);\n     }\n      <span class=\"hljs-keyword\">return</span> errors.toString();\n  }\n}\n</code></pre>\n<h2>6. Create a Rest Controller.</h2>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.JsonNode;\n<span class=\"hljs-meta\">@RestController</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JsonSchemaController</span> {\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> JsonSchemaValidationService service;\n\n    <span class=\"hljs-meta\">@PostMapping(\"/validate\")</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">validateEvent</span><span class=\"hljs-params\">( <span class=\"hljs-meta\">@RequestBody</span> JsonNode jsonNode )</span>{\n       <span class=\"hljs-keyword\">return</span> service.validateJson(jsonNode);\n    }\n}\n</code></pre>\n<h2>7. Start the SpringBoot Application and start sending requests.</h2>\n<p></p>\n<p>이제 모든 것이 준비되었으니, 즐겨 사용하는 클라이언트를 사용하여 코드를 테스트할 수 있습니다. 저는 PostMan을 사용하고 있어요. 아래에서 유효한 이벤트로 시작해보겠습니다.</p>\n<pre><code class=\"hljs language-js\"># 유효한 데이터\ncurl --location <span class=\"hljs-string\">'localhost:8080/validate'</span> \\\n--header <span class=\"hljs-string\">'Content-Type: application/json'</span> \\\n--data <span class=\"hljs-string\">'{\n  \"order_id\":\"order134\",\n   \"event\": \"PLACED\",\n   \"products\": [\n     {\n       \"product_id\": \"product_1\",\n        \"price\":20.5,\n       \"quantity\":2\n     }\n   ],\n   \"total_price\": 41\n}'</span>\n</code></pre>\n<p>응답:</p>\n<pre><code class=\"hljs language-js\">[];\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-js\"># order id 없는 페이로드\ncurl --location <span class=\"hljs-string\">'localhost:8080/validate'</span> \\\n--header <span class=\"hljs-string\">'Content-Type: application/json'</span> \\\n--data <span class=\"hljs-string\">'{\n   \"event\": \"PLACED\",\n   \"products\": [\n     {\n       \"product_id\": \"product_1\",\n        \"price\":20.5,\n       \"quantity\":2\n     }\n   ],\n   \"total_price\": 41\n}'</span>\n</code></pre>\n<p>응답 :</p>\n<pre><code class=\"hljs language-js\">[$.<span class=\"hljs-attr\">order_id</span>: 필수 항목이지만 누락되었습니다]\n</code></pre>\n<pre><code class=\"hljs language-js\"># order id 없는 페이로드\ncurl --location <span class=\"hljs-string\">'localhost:8080/validate'</span> \\\n--header <span class=\"hljs-string\">'Content-Type: application/json'</span> \\\n--data <span class=\"hljs-string\">'{\n\"order_id\":\"order134\",\n   \"event\": \"PLACED\",\n   \"total_price\": 41\n}'</span>\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-js\">[$.<span class=\"hljs-attr\">products</span>: is missing but it is required]\n</code></pre>\n<pre><code class=\"hljs language-js\"># order id가 없는 payload\ncurl --location <span class=\"hljs-string\">'localhost:8080/validate'</span> \\\n--header <span class=\"hljs-string\">'Content-Type: application/json'</span> \\\n--data <span class=\"hljs-string\">'{\n \"order_id\" : \"order_123\",\n   \"event\": \"PLACED\",\n   \"products\": [\n\n   ],\n   \"total_price\": 41\n}'</span>\n</code></pre>\n<p>응답 :</p>\n<p></p>\n<pre><code class=\"hljs language-js\">[$.<span class=\"hljs-attr\">products</span>: 배열에는 최소 <span class=\"hljs-number\">1</span>개의 항목이 있어야 합니다.]\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}