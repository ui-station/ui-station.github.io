{"pageProps":{"post":{"title":"Swift에서 Typed 오류와 Untyped 오류 이해하기 새로운 에러 처리 방법","description":"","date":"2024-06-23 23:35","slug":"2024-06-23-UnderstandingTypedandUntypedErrorsinSwiftANewApproachtoErrorHandling","content":"\n안녕하세요, Swift 개발자 여러분! 오늘은 우리의 일상 코딩 생활에서 매우 중요한 주제에 대해 이야기를 나누고 싶어요: 에러 처리입니다. 최근 WWDC 2024에서 Apple이 Swift에서 \"타입드 에러\"라 불리는 새로운 에러 처리 방법을 소개했어요. 따라서, 우리가 언타입드와 타입드 에러가 무엇인지, 그들이 어떻게 작동하는지, 그리고 왜 사용하고 싶을지 알아보도록 하겠습니다.\n\n## 언타입드 에러: 고전적인 방식\n\n먼저, 전통적인 방식인 언타입드 에러에 대해 이야기해보겠어요. Swift에서 오랫동안 코딩을 해왔다면, 이 방법에 익숙할 것입니다. Swift에서는 일반적으로 Error 프로토콜을 사용하여 에러를 처리합니다. 이 방법을 이용하면 Error 프로토콜을 준수하는 어떤 에러든 throw할 수 있어 매우 유연합니다. 그러나 때로는 너무 유연하여 어떤 종류의 에러를 기대해야 하는지 항상 알기 어려울 수 있습니다.\n\n```js\nenum StringParseError: Error {\n    case invalidCharacter(Character, at: String.Index)\n}\n\nfunc parseNumber(from input: String) throws -> Int {\n    for (index, character) in input.enumerated() {\n        guard let _ = character.wholeNumberValue else {\n            throw StringParseError.invalidCharacter(character, at: input.index(input.startIndex, offsetBy: index))\n        }\n    }\n    return Int(input) ?? 0\n}\n\ndo {\n    let number = try parseNumber(from: \"12a45\")\n} catch let error as StringParseError {\n    switch error {\n    case .invalidCharacter(let character, let index):\n        print(\"Invalid character '\\(character)' found at index \\(index).\")\n    }\n} catch {\n    print(\"An unexpected error occurred: \\(error).\")\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 이곳에서 무슨 일이 일어나고 있나요:\n\n- StringParseError: Error 프로토콜을 준수하는 enum입니다.\n- parseNumber(from:): 이 함수는 문자열의 각 문자를 확인합니다. 유효하지 않은 문자를 발견하면 StringParseError를 throw합니다.\n- do-catch 블록: 이는 parseNumber 함수를 호출하고 발생 가능한 오류를 catch합니다. StringParseError 및 다른 오류는 일반적으로 처리됩니다.\n\n## Typed Errors: 새로운 접근 방식\n\n자, 이제 이 새롭고 멋진 기능인 typed errors에 대해 이야기해보겠습니다. WWDC 2024에서 소개된 이 기능은 함수가 throw할 수 있는 오류의 정확한 유형을 지정할 수 있게 해줍니다. 이를 통해 오류 처리를 더 정확하고 유형 안전하게 만들어줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n열거자 ParseError: 오류 {\n    case nonNumericCharacter(Character, at: String.Index)\n}\n\nfunc parseInt(from input: String) throws(ParseError) -> Int {\n    for (index, character) in input.enumerated() {\n        if character.isNumber == false {\n            throw ParseError.nonNumericCharacter(character, at: input.index(input.startIndex, offsetBy: index))\n        }\n    }\n    return Int(input) ?? 0\n}\n\ndo {\n    let value = try parseInt(from: \"123x56\")\n} catch {\n    print(\"ParseError 발생: \\(error)\")\n}\n```\n\n# 여기에서 무슨 일이 벌어지고 있나요:\n\n- parseInt(from:): 이 함수는 이제 throws(ParseError)를 사용하여 ParseError만 throw할 수 있음을 나타냅니다.\n- do-catch 블록: 정확히 어떤 유형의 오류가 발생할 수 있는지 알기 때문에 catch 블록에서 오류 유형을 지정할 필요가 없습니다.\n\n# Any 및 Never 오류 유형\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n타입 애너효메이션을 사용하면 Error 및 Never를 지원하여 더 많은 유연성을 제공합니다.\n\n```js\nfunc parseValue(from input: String) throws(any Error) -> Int {\n    if input.isEmpty {\n        throw NSError(domain: \"ParseDomain\", code: 100, userInfo: [NSLocalizedDescriptionKey: \"Input string is empty.\"])\n    }\n    return Int(input) ?? 0\n}\n\nfunc parseValue(from input: String) -> Int {\n    return Int(input) ?? 0\n}\n\nfunc parseValue(from input: String) throws(Never) -> Int {\n    return Int(input) ?? 0\n}\n```\n\n# 이곳에서 하는 일:\n\n- throws(any Error): 함수는 Error 프로토콜을 준수하는 모든 오류를 던질 수 있습니다.\n- throws(Never): 함수는 오류를 던지지 않으며 throws 키워드가 기술적으로 필요하지만 오류를 던지지 않는다는 것을 명시적으로 나타낼 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 마무리\n\n타입별 오류를 사용하면 오류 처리가 더 명확하고 이해하기 쉬워집니다. 함수가 던질 수 있는 오류 유형을 지정함으로써 코드를 더 안전하고 유지보수하기 쉽게 만들 수 있습니다. WWDC 2024에서 소개된 이 새로운 방식은 믿을 수 있고 유지보수 가능한 응용 프로그램을 작성하는 데 도움이 됩니다.\n\n다음에 Swift 프로젝트에서 오류 처리를 작업할 때는 타입별 오류를 한 번 시도해 보세요. 이를 통해 버그를 초기에 잡을 수 있고 코드를 더 예측 가능하며 디버깅하기 쉬워질 수 있습니다.\n\n즐거운 코딩 되세요! 여러분의 Swift 프로젝트가 오류 없이 잘 진행되길 바랍니다! 이 주제를 더 깊게 파고들고 싶다면, 공식 Swift 문서를 확인해보세요.\n","ogImage":{"url":"/assets/img/2024-06-23-UnderstandingTypedandUntypedErrorsinSwiftANewApproachtoErrorHandling_0.png"},"coverImage":"/assets/img/2024-06-23-UnderstandingTypedandUntypedErrorsinSwiftANewApproachtoErrorHandling_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요, Swift 개발자 여러분! 오늘은 우리의 일상 코딩 생활에서 매우 중요한 주제에 대해 이야기를 나누고 싶어요: 에러 처리입니다. 최근 WWDC 2024에서 Apple이 Swift에서 \"타입드 에러\"라 불리는 새로운 에러 처리 방법을 소개했어요. 따라서, 우리가 언타입드와 타입드 에러가 무엇인지, 그들이 어떻게 작동하는지, 그리고 왜 사용하고 싶을지 알아보도록 하겠습니다.</p>\n<h2>언타입드 에러: 고전적인 방식</h2>\n<p>먼저, 전통적인 방식인 언타입드 에러에 대해 이야기해보겠어요. Swift에서 오랫동안 코딩을 해왔다면, 이 방법에 익숙할 것입니다. Swift에서는 일반적으로 Error 프로토콜을 사용하여 에러를 처리합니다. 이 방법을 이용하면 Error 프로토콜을 준수하는 어떤 에러든 throw할 수 있어 매우 유연합니다. 그러나 때로는 너무 유연하여 어떤 종류의 에러를 기대해야 하는지 항상 알기 어려울 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-title class_\">StringParseError</span>: <span class=\"hljs-title class_\">Error</span> {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">invalidCharacter</span>(<span class=\"hljs-title class_\">Character</span>, <span class=\"hljs-attr\">at</span>: <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-property\">Index</span>)\n}\n\nfunc <span class=\"hljs-title function_\">parseNumber</span>(<span class=\"hljs-keyword\">from</span> <span class=\"hljs-attr\">input</span>: <span class=\"hljs-title class_\">String</span>) throws -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">for</span> (index, character) <span class=\"hljs-keyword\">in</span> input.<span class=\"hljs-title function_\">enumerated</span>(<span class=\"hljs-params\"></span>) {\n        guard <span class=\"hljs-keyword\">let</span> _ = character.<span class=\"hljs-property\">wholeNumberValue</span> <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">StringParseError</span>.<span class=\"hljs-title function_\">invalidCharacter</span>(character, <span class=\"hljs-attr\">at</span>: input.<span class=\"hljs-title function_\">index</span>(input.<span class=\"hljs-property\">startIndex</span>, <span class=\"hljs-attr\">offsetBy</span>: index))\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Int</span>(input) ?? <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-keyword\">do</span> {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-title function_\">parseNumber</span>(<span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">\"12a45\"</span>)\n} <span class=\"hljs-keyword\">catch</span> <span class=\"hljs-keyword\">let</span> error <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">StringParseError</span> {\n    <span class=\"hljs-keyword\">switch</span> error {\n    <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">invalidCharacter</span>(<span class=\"hljs-keyword\">let</span> character, <span class=\"hljs-keyword\">let</span> index):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Invalid character '\\(character)' found at index \\(index).\"</span>)\n    }\n} <span class=\"hljs-keyword\">catch</span> {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"An unexpected error occurred: \\(error).\"</span>)\n}\n</code></pre>\n<p></p>\n<h2>이곳에서 무슨 일이 일어나고 있나요:</h2>\n<ul>\n<li>StringParseError: Error 프로토콜을 준수하는 enum입니다.</li>\n<li>parseNumber(from:): 이 함수는 문자열의 각 문자를 확인합니다. 유효하지 않은 문자를 발견하면 StringParseError를 throw합니다.</li>\n<li>do-catch 블록: 이는 parseNumber 함수를 호출하고 발생 가능한 오류를 catch합니다. StringParseError 및 다른 오류는 일반적으로 처리됩니다.</li>\n</ul>\n<h2>Typed Errors: 새로운 접근 방식</h2>\n<p>자, 이제 이 새롭고 멋진 기능인 typed errors에 대해 이야기해보겠습니다. WWDC 2024에서 소개된 이 기능은 함수가 throw할 수 있는 오류의 정확한 유형을 지정할 수 있게 해줍니다. 이를 통해 오류 처리를 더 정확하고 유형 안전하게 만들어줍니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">열거자 <span class=\"hljs-title class_\">ParseError</span>: 오류 {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">nonNumericCharacter</span>(<span class=\"hljs-title class_\">Character</span>, <span class=\"hljs-attr\">at</span>: <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-property\">Index</span>)\n}\n\nfunc <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-keyword\">from</span> <span class=\"hljs-attr\">input</span>: <span class=\"hljs-title class_\">String</span>) <span class=\"hljs-title function_\">throws</span>(<span class=\"hljs-title class_\">ParseError</span>) -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">for</span> (index, character) <span class=\"hljs-keyword\">in</span> input.<span class=\"hljs-title function_\">enumerated</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">if</span> character.<span class=\"hljs-property\">isNumber</span> == <span class=\"hljs-literal\">false</span> {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">ParseError</span>.<span class=\"hljs-title function_\">nonNumericCharacter</span>(character, <span class=\"hljs-attr\">at</span>: input.<span class=\"hljs-title function_\">index</span>(input.<span class=\"hljs-property\">startIndex</span>, <span class=\"hljs-attr\">offsetBy</span>: index))\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Int</span>(input) ?? <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-keyword\">do</span> {\n    <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">\"123x56\"</span>)\n} <span class=\"hljs-keyword\">catch</span> {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"ParseError 발생: \\(error)\"</span>)\n}\n</code></pre>\n<h1>여기에서 무슨 일이 벌어지고 있나요:</h1>\n<ul>\n<li>parseInt(from:): 이 함수는 이제 throws(ParseError)를 사용하여 ParseError만 throw할 수 있음을 나타냅니다.</li>\n<li>do-catch 블록: 정확히 어떤 유형의 오류가 발생할 수 있는지 알기 때문에 catch 블록에서 오류 유형을 지정할 필요가 없습니다.</li>\n</ul>\n<h1>Any 및 Never 오류 유형</h1>\n<p></p>\n<p>타입 애너효메이션을 사용하면 Error 및 Never를 지원하여 더 많은 유연성을 제공합니다.</p>\n<pre><code class=\"hljs language-js\">func <span class=\"hljs-title function_\">parseValue</span>(<span class=\"hljs-keyword\">from</span> <span class=\"hljs-attr\">input</span>: <span class=\"hljs-title class_\">String</span>) <span class=\"hljs-title function_\">throws</span>(any <span class=\"hljs-title class_\">Error</span>) -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">if</span> input.<span class=\"hljs-property\">isEmpty</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">NSError</span>(<span class=\"hljs-attr\">domain</span>: <span class=\"hljs-string\">\"ParseDomain\"</span>, <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">userInfo</span>: [<span class=\"hljs-title class_\">NSLocalizedDescriptionKey</span>: <span class=\"hljs-string\">\"Input string is empty.\"</span>])\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Int</span>(input) ?? <span class=\"hljs-number\">0</span>\n}\n\nfunc <span class=\"hljs-title function_\">parseValue</span>(<span class=\"hljs-keyword\">from</span> <span class=\"hljs-attr\">input</span>: <span class=\"hljs-title class_\">String</span>) -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Int</span>(input) ?? <span class=\"hljs-number\">0</span>\n}\n\nfunc <span class=\"hljs-title function_\">parseValue</span>(<span class=\"hljs-keyword\">from</span> <span class=\"hljs-attr\">input</span>: <span class=\"hljs-title class_\">String</span>) <span class=\"hljs-title function_\">throws</span>(<span class=\"hljs-title class_\">Never</span>) -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Int</span>(input) ?? <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<h1>이곳에서 하는 일:</h1>\n<ul>\n<li>throws(any Error): 함수는 Error 프로토콜을 준수하는 모든 오류를 던질 수 있습니다.</li>\n<li>throws(Never): 함수는 오류를 던지지 않으며 throws 키워드가 기술적으로 필요하지만 오류를 던지지 않는다는 것을 명시적으로 나타낼 수 있습니다.</li>\n</ul>\n<p></p>\n<h1>마무리</h1>\n<p>타입별 오류를 사용하면 오류 처리가 더 명확하고 이해하기 쉬워집니다. 함수가 던질 수 있는 오류 유형을 지정함으로써 코드를 더 안전하고 유지보수하기 쉽게 만들 수 있습니다. WWDC 2024에서 소개된 이 새로운 방식은 믿을 수 있고 유지보수 가능한 응용 프로그램을 작성하는 데 도움이 됩니다.</p>\n<p>다음에 Swift 프로젝트에서 오류 처리를 작업할 때는 타입별 오류를 한 번 시도해 보세요. 이를 통해 버그를 초기에 잡을 수 있고 코드를 더 예측 가능하며 디버깅하기 쉬워질 수 있습니다.</p>\n<p>즐거운 코딩 되세요! 여러분의 Swift 프로젝트가 오류 없이 잘 진행되길 바랍니다! 이 주제를 더 깊게 파고들고 싶다면, 공식 Swift 문서를 확인해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}