{"pageProps":{"post":{"title":"특정 지역 자원 및 잘못된 로컬라이제이션 - 안드로이드","description":"","date":"2024-05-27 17:53","slug":"2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid","content":"\n![이미지](/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_0.png)\n\n이 기사의 일환으로, 우리 애플리케이션에서 로컬라이제이션 지원을 망가뜨린 리소스 구성에 대한 최근 경험을 설명하겠습니다.\n\n프랑스어 번역에서 망가진 부분의 샘플은 다음과 같습니다.\n\n우리의 클라이언트 애플리케이션은 라이브러리를 사용하여 이 UI에 노출됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 라이브러리 개발자들이 문자열 리소스를 넣은 파일들입니다 👇\n\n- strings.xml\n- 🇨🇦 strings.xml (fr-rCA)\n\n![이미지](/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_1.png)\n\n👆에서 보듯이, 프랑스어 문자열을 캐나다 지역을 대상으로 하는 파일에 넣었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리 애플리케이션에는 지역별이 아닌 프랑스어 문자열이 공통 파일에 저장되어 있어요👇\n\n![이미지](/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_2.png)\n\n앱 수준 build.gradle에 다음 구성을 추가하기 전에 예상대로 작동했습니다\n\nKotlin\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n안드로이드 {\n    defaultConfig {\n        ...\n        resourceConfigurations.addAll(listOf(\"en\", \"fr\"))\n    }\n}\n```\n\n그루비\n\n```js\n안드로이드 {\n    defaultConfig {\n        ...\n        resConfigs \"en\", \"fr\"\n         // 또는\n        resourceConfigurations += [\"en\", \"fr\"]\n    }\n}\n```\n\n# 이 설정은 무엇을 하는 건가요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Android 개발자 문서에서의 정의\n\n사용되지 않는 대체 리소스 제거 👇\n\n이 방법의 주요 이점은 애플리케이션에 필요하지 않은 모든 리소스를 제거할 수 있다는 것입니다.\n\n이 시점에서 우리 케이스에서 프랑스어 지원이 깨졌다는 이유를 이해하셨으면 좋겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희 애플리케이션에는 두 가지 리소스만 필요하다는 구성이 추가되었습니다.👇\n\n```js\nresConfigs \"en\", \"fr\"\n         // 또는\nresourceConfigurations += [\"en\", \"fr\"]\n```\n\n이에 따라 Resource Shrinker는 fr-rCA 🇨🇦 리소스를 제거하고 애플리케이션에서는 [“en”, “fr”] 리소스만 사용할 수 있게 되었습니다.\n\n# 문제를 해결해보는 시간입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 빠르게 이 문제를 해결하기 위해 몇 가지 옵션이 있습니다:\n\n1st\n\n- build.gradle을 업데이트하여 fr-rCA 🇨🇦 리소스를 제거하지 않도록합니다.\n\n```js\nandroid {\n    defaultConfig {\n        ...\n        resConfigs \"en\", \"fr\", \"fr-rCA\"\n        // 또는\n        resourceConfigurations += [\"en\", \"fr\", \"fr-rCA\"]\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2nd\n\n- 대안으로, 도서관을 제어하고 지역별 자원을 사용하고 싶지 않은 경우, 모든 지역에서 액세스할 수 있는 파일로 이동할 수 있습니다.\n\n# 함께 연결해요\n\nhttps://www.linkedin.com/in/navczydev/\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 참고문헌\n","ogImage":{"url":"/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_0.png"},"coverImage":"/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_0.png\" alt=\"이미지\"></p>\n<p>이 기사의 일환으로, 우리 애플리케이션에서 로컬라이제이션 지원을 망가뜨린 리소스 구성에 대한 최근 경험을 설명하겠습니다.</p>\n<p>프랑스어 번역에서 망가진 부분의 샘플은 다음과 같습니다.</p>\n<p>우리의 클라이언트 애플리케이션은 라이브러리를 사용하여 이 UI에 노출됩니다.</p>\n<p></p>\n<p>다음은 라이브러리 개발자들이 문자열 리소스를 넣은 파일들입니다 👇</p>\n<ul>\n<li>strings.xml</li>\n<li>🇨🇦 strings.xml (fr-rCA)</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_1.png\" alt=\"이미지\"></p>\n<p>👆에서 보듯이, 프랑스어 문자열을 캐나다 지역을 대상으로 하는 파일에 넣었습니다.</p>\n<p></p>\n<p>우리 애플리케이션에는 지역별이 아닌 프랑스어 문자열이 공통 파일에 저장되어 있어요👇</p>\n<p><img src=\"/assets/img/2024-05-27-RegionspecificresourcesandbrokenlocalizationAndroid_2.png\" alt=\"이미지\"></p>\n<p>앱 수준 build.gradle에 다음 구성을 추가하기 전에 예상대로 작동했습니다</p>\n<p>Kotlin</p>\n<p></p>\n<pre><code class=\"hljs language-js\">안드로이드 {\n    defaultConfig {\n        ...\n        resourceConfigurations.<span class=\"hljs-title function_\">addAll</span>(<span class=\"hljs-title function_\">listOf</span>(<span class=\"hljs-string\">\"en\"</span>, <span class=\"hljs-string\">\"fr\"</span>))\n    }\n}\n</code></pre>\n<p>그루비</p>\n<pre><code class=\"hljs language-js\">안드로이드 {\n    defaultConfig {\n        ...\n        resConfigs <span class=\"hljs-string\">\"en\"</span>, <span class=\"hljs-string\">\"fr\"</span>\n         <span class=\"hljs-comment\">// 또는</span>\n        resourceConfigurations += [<span class=\"hljs-string\">\"en\"</span>, <span class=\"hljs-string\">\"fr\"</span>]\n    }\n}\n</code></pre>\n<h1>이 설정은 무엇을 하는 건가요:</h1>\n<p></p>\n<h2>Android 개발자 문서에서의 정의</h2>\n<p>사용되지 않는 대체 리소스 제거 👇</p>\n<p>이 방법의 주요 이점은 애플리케이션에 필요하지 않은 모든 리소스를 제거할 수 있다는 것입니다.</p>\n<p>이 시점에서 우리 케이스에서 프랑스어 지원이 깨졌다는 이유를 이해하셨으면 좋겠습니다.</p>\n<p></p>\n<p>저희 애플리케이션에는 두 가지 리소스만 필요하다는 구성이 추가되었습니다.👇</p>\n<pre><code class=\"hljs language-js\">resConfigs <span class=\"hljs-string\">\"en\"</span>, <span class=\"hljs-string\">\"fr\"</span>\n         <span class=\"hljs-comment\">// 또는</span>\nresourceConfigurations += [<span class=\"hljs-string\">\"en\"</span>, <span class=\"hljs-string\">\"fr\"</span>]\n</code></pre>\n<p>이에 따라 Resource Shrinker는 fr-rCA 🇨🇦 리소스를 제거하고 애플리케이션에서는 [“en”, “fr”] 리소스만 사용할 수 있게 되었습니다.</p>\n<h1>문제를 해결해보는 시간입니다.</h1>\n<p></p>\n<ul>\n<li>빠르게 이 문제를 해결하기 위해 몇 가지 옵션이 있습니다:</li>\n</ul>\n<p>1st</p>\n<ul>\n<li>build.gradle을 업데이트하여 fr-rCA 🇨🇦 리소스를 제거하지 않도록합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">android {\n    defaultConfig {\n        ...\n        resConfigs <span class=\"hljs-string\">\"en\"</span>, <span class=\"hljs-string\">\"fr\"</span>, <span class=\"hljs-string\">\"fr-rCA\"</span>\n        <span class=\"hljs-comment\">// 또는</span>\n        resourceConfigurations += [<span class=\"hljs-string\">\"en\"</span>, <span class=\"hljs-string\">\"fr\"</span>, <span class=\"hljs-string\">\"fr-rCA\"</span>]\n    }\n}\n</code></pre>\n<p></p>\n<h1>2nd</h1>\n<ul>\n<li>대안으로, 도서관을 제어하고 지역별 자원을 사용하고 싶지 않은 경우, 모든 지역에서 액세스할 수 있는 파일로 이동할 수 있습니다.</li>\n</ul>\n<h1>함께 연결해요</h1>\n<p><a href=\"https://www.linkedin.com/in/navczydev/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/navczydev/</a></p>\n<p></p>\n<h1>참고문헌</h1>\n</body>\n</html>\n"},"__N_SSG":true}