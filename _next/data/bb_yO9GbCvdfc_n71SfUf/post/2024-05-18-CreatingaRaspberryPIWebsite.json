{"pageProps":{"post":{"title":"라즈베리 파이 웹사이트 만들기","description":"","date":"2024-05-18 19:11","slug":"2024-05-18-CreatingaRaspberryPIWebsite","content":"\n아래는 메인 시리즈 \"Hackable Lego Train\"의 미니 파트입니다.\n\n다음은 메인 시리즈를 확인할 수 있는 링크입니다:\n\nHackable Lego Train | Part 1 | Stux | 작성자: Stux | 2024년 5월 | Medium\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_1.png\" />\n\n프로젝트의 아이디어는 열차 해킹을 시뮬레이션하고 운영 기술 환경에서 취약한 애플리케이션과 관련된 전반적인 사이버 위험을 보여주는 것입니다.\n\n그러니까 PI에 간단한 웹사이트를 만든 방법에 대해 설명해드릴게요.\n\n전체적인 단계는 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 새로운 OS(Kali)로 Pi 이미지 다시 만들기\n- Pi에서 SSH 활성화\n- 웹 사이트를 위한 폴더 디렉토리 생성\n- 웹 사이트를 위한 파일 구성\n- 웹 사이트에 로깅 추가\n\n시작해 보세요!\n\n주 컴퓨터에서 라즈베리 파이 이미지 소프트웨어를 다운로드하고 설치하세요.\n\n라즈베리 파이 OS — 라즈베리 파이\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Creating a Raspberry PI Website Image 2](/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_2.png)\n\n라즈베리 파이에 Kali를 설치하고 싶었어요.\n\n- 저는 Kali를 잘 알고 있고 손에 익숙해요.\n- 이 프로젝트 이외에도 네트워크 침투 분야에서 다른 계획이 있어요.\n- 어차피 해킹 프로젝트니까 나에게 가장 쉽게 만들어야겠죠 :)\n\n![Creating a Raspberry PI Website Image 3](/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n호스트 컴퓨터에 PI SD 카드를 넣어주세요. 그리고 카드에 Kali를 WRITE해주세요.\n\n작업이 끝나면 SD 카드를 PI에 다시 넣고 부팅해주세요.\n\n원하는 방식으로 Kali를 설정하고 따라가보세요.\n\n로그인하세요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서부터는 SSH를 사용해서 작업을 계속합니다. 그래서 셸 명령어에 익숙하신 것 같아요.\n\n![CreatingaRaspberryPIWebsite_4](/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_4.png)\n\n새 시스템에 SSH로 접속한 후, 먼저 웹사이트 디렉토리 구조를 만들고 싶어요.\n\n![CreatingaRaspberryPIWebsite_5](/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 제 예시입니다:\n\n```js\nbig_cabooses/\n│\n├── static/\n│   └── css/\n│       └── styles.css\n│   └── images/\n│       └── background.jpg\n├── templates/\n│   └── index.html\n├── app.py\n└── train_schedule.py\n```\n\napp.py 파일을 편집하여 다음 내용을 추가하십시오:\n\n```js\nfrom flask import Flask, render_template\nfrom train_schedule import get_train_schedule\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    schedule = get_train_schedule()\n    return render_template('index.html', schedule=schedule)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\ndef get_train_schedule():\n    return [\n        {\"time\": \"07:00 AM\", \"train\": \"천년비행선\", \"destination\": \"타투인\"},\n        {\"time\": \"09:00 AM\", \"train\": \"데스스타\", \"destination\": \"엔도어\"},\n        {\"time\": \"11:00 AM\", \"train\": \"X-윙\", \"destination\": \"야빈 4\"},\n        {\"time\": \"01:00 PM\", \"train\": \"TIE 전투기\", \"destination\": \"호스\"},\n        {\"time\": \"03:00 PM\", \"train\": \"제국 셔틀\", \"destination\": \"코르서캔트\"},\n        {\"time\": \"05:00 PM\", \"train\": \"슬레이브 1\", \"destination\": \"카미노\"},\n        {\"time\": \"07:00 PM\", \"train\": \"나부 스타파이터\", \"destination\": \"나부\"},\n    ]\n```\n\ntemplates/index.html 수정:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Big Cabooses</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"{{ url_for('static', filename='css/styles.css') }}\"\n    />\n  </head>\n  <body>\n    <div class=\"background\"></div>\n    <div class=\"content\">\n      <h1>Big Cabooses 열차 일정</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>시간</th>\n            <th>열차</th>\n            <th>목적지</th>\n          </tr>\n        </thead>\n        <tbody>\n          {% for entry in schedule %}\n          <tr>\n            <td>{{ entry.time }}</td>\n            <td>{{ entry.train }}</td>\n            <td>{{ entry.destination }}</td>\n          </tr>\n          {% endfor %}\n        </tbody>\n      </table>\n    </div>\n  </body>\n</html>\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nstatic/css/styles.css 파일에 다음 내용을 입력해주세요:\n\n```js\nbody, html {\n    height: 100%;\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n.background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(\"../images/background.jpg\");\n    background-size: cover;\n    background-position: center;\n    z-index: -1;\n    opacity: 0.5;\n}\n\n.content {\n    position: relative;\n    z-index: 1;\n    padding: 20px;\n    background-color: rgba(255, 255, 255, 0.8);\n    border-radius: 10px;\n    max-width: 600px;\n    margin: auto;\n    top: 50%;\n    transform: translateY(-50%);\n    text-align: center;\n}\n\ntable {\n    width: 100%;\n    border-collapse: collapse;\n}\n\nth, td {\n    padding: 10px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\nth {\n    background-color: #f2f2f2;\n}\n```\n\nstatic/background.jpg의 경로에 매력적인 배경 이미지를 업로드해주세요.\n\nChatGPT를 이용하여 스스로 이미지를 만들 수 있게 위해서 돈을 지불했어요. 여러분도 자금이 있으시다면 강력히 추천합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n웹사이트를 시작하세요!\n\n```js\nsudo python3 app.py\n```\n\n브라우저를 열고 127.0.0.1:5000으로 이동하세요\n\nBUTTT!!!!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리는 로깅을 추가하고 내부 네트워크의 다른 컴퓨터에서 액세스할 수 있는 기능을 추가하길 원해요.\n\n이를 위해 하나 해야 할 일은 우리의 app.py 파일을 변경하는 것뿐입니다:\n\n```js\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n```\n\n반드시 \"host=\"에 PI의 IP를 넣어 주세요!!!!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 웹 사이트에 로그 파일을 기록하려고 합니다. app.py 파일에 이 모든 내용을 추가해 보겠습니다:\n\n```python\nfrom flask import Flask, render_template\nfrom train_schedule import get_train_schedule\nimport logging\n\napp = Flask(__name__)\n\n# 로깅 설정\nlogging.basicConfig(filename='app.log', level=logging.DEBUG,\n                    format='%(asctime)s %(levelname)s %(name)s %(threadName)s : %(message)s')\n\n@app.route('/')\ndef home():\n    app.logger.info(\"홈 페이지에 접근했습니다.\")\n    schedule = get_train_schedule()\n    return render_template('index.html', schedule=schedule)\n\n@app.route('/error')\ndef error():\n    app.logger.error(\"이것은 오류 예제입니다.\")\n    return \"오류 예제\", 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n```\n\n이제 /big-cabooses/ 메인 디렉토리에 app.log라는 파일이 생기게 됩니다.\n\n그런 다음, 간단한 접속 로그가 포함된 스타워즈 테마의 레고 기차 웹 사이트를 만들었습니다. 함께 빌드하는 과정을 즐겼습니다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어떤 질문이든 하시거나 도움이 필요하시면 언제든지 메시지를 보내주세요. 즐겁게 즐기세요! 이것을 하면서 몇 번 굳었지만, 마침내 성공적으로 해냈고 결과물을 좋아합니다. -Stux\n","ogImage":{"url":"/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_0.png"},"coverImage":"/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>아래는 메인 시리즈 \"Hackable Lego Train\"의 미니 파트입니다.</p>\n<p>다음은 메인 시리즈를 확인할 수 있는 링크입니다:</p>\n<p>Hackable Lego Train | Part 1 | Stux | 작성자: Stux | 2024년 5월 | Medium</p>\n<p></p>\n<p>프로젝트의 아이디어는 열차 해킹을 시뮬레이션하고 운영 기술 환경에서 취약한 애플리케이션과 관련된 전반적인 사이버 위험을 보여주는 것입니다.</p>\n<p>그러니까 PI에 간단한 웹사이트를 만든 방법에 대해 설명해드릴게요.</p>\n<p>전체적인 단계는 다음과 같습니다:</p>\n<p></p>\n<ul>\n<li>새로운 OS(Kali)로 Pi 이미지 다시 만들기</li>\n<li>Pi에서 SSH 활성화</li>\n<li>웹 사이트를 위한 폴더 디렉토리 생성</li>\n<li>웹 사이트를 위한 파일 구성</li>\n<li>웹 사이트에 로깅 추가</li>\n</ul>\n<p>시작해 보세요!</p>\n<p>주 컴퓨터에서 라즈베리 파이 이미지 소프트웨어를 다운로드하고 설치하세요.</p>\n<p>라즈베리 파이 OS — 라즈베리 파이</p>\n<p></p>\n<p><img src=\"/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_2.png\" alt=\"Creating a Raspberry PI Website Image 2\"></p>\n<p>라즈베리 파이에 Kali를 설치하고 싶었어요.</p>\n<ul>\n<li>저는 Kali를 잘 알고 있고 손에 익숙해요.</li>\n<li>이 프로젝트 이외에도 네트워크 침투 분야에서 다른 계획이 있어요.</li>\n<li>어차피 해킹 프로젝트니까 나에게 가장 쉽게 만들어야겠죠 :)</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_3.png\" alt=\"Creating a Raspberry PI Website Image 3\"></p>\n<p></p>\n<p>호스트 컴퓨터에 PI SD 카드를 넣어주세요. 그리고 카드에 Kali를 WRITE해주세요.</p>\n<p>작업이 끝나면 SD 카드를 PI에 다시 넣고 부팅해주세요.</p>\n<p>원하는 방식으로 Kali를 설정하고 따라가보세요.</p>\n<p>로그인하세요!</p>\n<p></p>\n<p>여기서부터는 SSH를 사용해서 작업을 계속합니다. 그래서 셸 명령어에 익숙하신 것 같아요.</p>\n<p><img src=\"/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_4.png\" alt=\"CreatingaRaspberryPIWebsite_4\"></p>\n<p>새 시스템에 SSH로 접속한 후, 먼저 웹사이트 디렉토리 구조를 만들고 싶어요.</p>\n<p><img src=\"/assets/img/2024-05-18-CreatingaRaspberryPIWebsite_5.png\" alt=\"CreatingaRaspberryPIWebsite_5\"></p>\n<p></p>\n<p>아래는 제 예시입니다:</p>\n<pre><code class=\"hljs language-js\">big_cabooses/\n│\n├── <span class=\"hljs-keyword\">static</span>/\n│   └── css/\n│       └── styles.<span class=\"hljs-property\">css</span>\n│   └── images/\n│       └── background.<span class=\"hljs-property\">jpg</span>\n├── templates/\n│   └── index.<span class=\"hljs-property\">html</span>\n├── app.<span class=\"hljs-property\">py</span>\n└── train_schedule.<span class=\"hljs-property\">py</span>\n</code></pre>\n<p>app.py 파일을 편집하여 다음 내용을 추가하십시오:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Flask</span>, render_template\n<span class=\"hljs-keyword\">from</span> train_schedule <span class=\"hljs-keyword\">import</span> get_train_schedule\n\napp = <span class=\"hljs-title class_\">Flask</span>(__name__)\n\n@app.<span class=\"hljs-title function_\">route</span>(<span class=\"hljs-string\">'/'</span>)\ndef <span class=\"hljs-title function_\">home</span>():\n    schedule = <span class=\"hljs-title function_\">get_train_schedule</span>()\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">render_template</span>(<span class=\"hljs-string\">'index.html'</span>, schedule=schedule)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.<span class=\"hljs-title function_\">run</span>(debug=<span class=\"hljs-title class_\">True</span>)\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_train_schedule</span>():\n    <span class=\"hljs-keyword\">return</span> [\n        {<span class=\"hljs-string\">\"time\"</span>: <span class=\"hljs-string\">\"07:00 AM\"</span>, <span class=\"hljs-string\">\"train\"</span>: <span class=\"hljs-string\">\"천년비행선\"</span>, <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"타투인\"</span>},\n        {<span class=\"hljs-string\">\"time\"</span>: <span class=\"hljs-string\">\"09:00 AM\"</span>, <span class=\"hljs-string\">\"train\"</span>: <span class=\"hljs-string\">\"데스스타\"</span>, <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"엔도어\"</span>},\n        {<span class=\"hljs-string\">\"time\"</span>: <span class=\"hljs-string\">\"11:00 AM\"</span>, <span class=\"hljs-string\">\"train\"</span>: <span class=\"hljs-string\">\"X-윙\"</span>, <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"야빈 4\"</span>},\n        {<span class=\"hljs-string\">\"time\"</span>: <span class=\"hljs-string\">\"01:00 PM\"</span>, <span class=\"hljs-string\">\"train\"</span>: <span class=\"hljs-string\">\"TIE 전투기\"</span>, <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"호스\"</span>},\n        {<span class=\"hljs-string\">\"time\"</span>: <span class=\"hljs-string\">\"03:00 PM\"</span>, <span class=\"hljs-string\">\"train\"</span>: <span class=\"hljs-string\">\"제국 셔틀\"</span>, <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"코르서캔트\"</span>},\n        {<span class=\"hljs-string\">\"time\"</span>: <span class=\"hljs-string\">\"05:00 PM\"</span>, <span class=\"hljs-string\">\"train\"</span>: <span class=\"hljs-string\">\"슬레이브 1\"</span>, <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"카미노\"</span>},\n        {<span class=\"hljs-string\">\"time\"</span>: <span class=\"hljs-string\">\"07:00 PM\"</span>, <span class=\"hljs-string\">\"train\"</span>: <span class=\"hljs-string\">\"나부 스타파이터\"</span>, <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"나부\"</span>},\n    ]\n</code></pre>\n<p>templates/index.html 수정:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Big Cabooses<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span>\n      <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>\n      <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"{{ url_for('static', filename='css/styles.css') }}\"</span>\n    /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"background\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Big Cabooses 열차 일정<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">table</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">thead</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">th</span>></span>시간<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">th</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">th</span>></span>열차<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">th</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">th</span>></span>목적지<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">th</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">thead</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tbody</span>></span>\n          {% for entry in schedule %}\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>{{ entry.time }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>{{ entry.train }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>{{ entry.destination }}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n          {% endfor %}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tbody</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">table</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p></p>\n<p>static/css/styles.css 파일에 다음 내용을 입력해주세요:</p>\n<pre><code class=\"hljs language-js\">body, html {\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>%;\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span>;\n    font-<span class=\"hljs-attr\">family</span>: <span class=\"hljs-title class_\">Arial</span>, sans-serif;\n}\n\n.<span class=\"hljs-property\">background</span> {\n    <span class=\"hljs-attr\">position</span>: absolute;\n    <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">100</span>%;\n    background-<span class=\"hljs-attr\">image</span>: <span class=\"hljs-title function_\">url</span>(<span class=\"hljs-string\">\"../images/background.jpg\"</span>);\n    background-<span class=\"hljs-attr\">size</span>: cover;\n    background-<span class=\"hljs-attr\">position</span>: center;\n    z-<span class=\"hljs-attr\">index</span>: -<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.5</span>;\n}\n\n.<span class=\"hljs-property\">content</span> {\n    <span class=\"hljs-attr\">position</span>: relative;\n    z-<span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-attr\">padding</span>: 20px;\n    background-<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">rgba</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>);\n    border-<span class=\"hljs-attr\">radius</span>: 10px;\n    max-<span class=\"hljs-attr\">width</span>: 600px;\n    <span class=\"hljs-attr\">margin</span>: auto;\n    <span class=\"hljs-attr\">top</span>: <span class=\"hljs-number\">50</span>%;\n    <span class=\"hljs-attr\">transform</span>: <span class=\"hljs-title function_\">translateY</span>(-<span class=\"hljs-number\">50</span>%);\n    text-<span class=\"hljs-attr\">align</span>: center;\n}\n\ntable {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n    border-<span class=\"hljs-attr\">collapse</span>: collapse;\n}\n\nth, td {\n    <span class=\"hljs-attr\">padding</span>: 10px;\n    <span class=\"hljs-attr\">border</span>: 1px solid #ddd;\n    text-<span class=\"hljs-attr\">align</span>: left;\n}\n\nth {\n    background-<span class=\"hljs-attr\">color</span>: #f2f2f2;\n}\n</code></pre>\n<p>static/background.jpg의 경로에 매력적인 배경 이미지를 업로드해주세요.</p>\n<p>ChatGPT를 이용하여 스스로 이미지를 만들 수 있게 위해서 돈을 지불했어요. 여러분도 자금이 있으시다면 강력히 추천합니다.</p>\n<p></p>\n<p>웹사이트를 시작하세요!</p>\n<pre><code class=\"hljs language-js\">sudo python3 app.<span class=\"hljs-property\">py</span>\n</code></pre>\n<p>브라우저를 열고 127.0.0.1:5000으로 이동하세요</p>\n<p>BUTTT!!!!</p>\n<p></p>\n<p>우리는 로깅을 추가하고 내부 네트워크의 다른 컴퓨터에서 액세스할 수 있는 기능을 추가하길 원해요.</p>\n<p>이를 위해 하나 해야 할 일은 우리의 app.py 파일을 변경하는 것뿐입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.<span class=\"hljs-title function_\">run</span>(host=<span class=\"hljs-string\">'0.0.0.0'</span>, port=<span class=\"hljs-number\">5000</span>, debug=<span class=\"hljs-title class_\">True</span>)\n</code></pre>\n<p>반드시 \"host=\"에 PI의 IP를 넣어 주세요!!!!</p>\n<p></p>\n<p>이제 웹 사이트에 로그 파일을 기록하려고 합니다. app.py 파일에 이 모든 내용을 추가해 보겠습니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask, render_template\n<span class=\"hljs-keyword\">from</span> train_schedule <span class=\"hljs-keyword\">import</span> get_train_schedule\n<span class=\"hljs-keyword\">import</span> logging\n\napp = Flask(__name__)\n\n<span class=\"hljs-comment\"># 로깅 설정</span>\nlogging.basicConfig(filename=<span class=\"hljs-string\">'app.log'</span>, level=logging.DEBUG,\n                    <span class=\"hljs-built_in\">format</span>=<span class=\"hljs-string\">'%(asctime)s %(levelname)s %(name)s %(threadName)s : %(message)s'</span>)\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">home</span>():\n    app.logger.info(<span class=\"hljs-string\">\"홈 페이지에 접근했습니다.\"</span>)\n    schedule = get_train_schedule()\n    <span class=\"hljs-keyword\">return</span> render_template(<span class=\"hljs-string\">'index.html'</span>, schedule=schedule)\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">'/error'</span></span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">error</span>():\n    app.logger.error(<span class=\"hljs-string\">\"이것은 오류 예제입니다.\"</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"오류 예제\"</span>, <span class=\"hljs-number\">500</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    app.run(host=<span class=\"hljs-string\">'0.0.0.0'</span>, port=<span class=\"hljs-number\">5000</span>, debug=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<p>이제 /big-cabooses/ 메인 디렉토리에 app.log라는 파일이 생기게 됩니다.</p>\n<p>그런 다음, 간단한 접속 로그가 포함된 스타워즈 테마의 레고 기차 웹 사이트를 만들었습니다. 함께 빌드하는 과정을 즐겼습니다!</p>\n<p></p>\n<p>어떤 질문이든 하시거나 도움이 필요하시면 언제든지 메시지를 보내주세요. 즐겁게 즐기세요! 이것을 하면서 몇 번 굳었지만, 마침내 성공적으로 해냈고 결과물을 좋아합니다. -Stux</p>\n</body>\n</html>\n"},"__N_SSG":true}