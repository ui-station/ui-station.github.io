{"pageProps":{"post":{"title":"Swft Data로 SwiftUI 어플리케이션 개발하기","description":"","date":"2024-05-27 18:02","slug":"2024-05-27-BuildingSwiftUIApplicationswithSwiftData","content":"\n![Image](/assets/img/2024-05-27-BuildingSwiftUIApplicationswithSwiftData_0.png)\n\n# Swift UI는 Swift Data를 시작하는 가장 쉬운 방법입니다\n\n- Swift UI와의 완벽한 통합\n- 간편한 구성\n- 데이터 자동 가져오기 및 뷰 업데이트\n\n# Swift Data 소개\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n표를 마크다운 형식으로 변경해 주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@Model\nclass Category {\n\n  @Attribute(.unique) var name: String\n  var imageName: String\n\n  init(name: String,\n       imageName: String = \"rupeesign.circle\",\n       type: CategoryType) {\n    self.name = name\n    self.imageName = imageName\n  }\n\n}\n```\n\n## Using the model macro\n\nModifies all stored properties\n\n@Model\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 강력한 새로운 스위프트 매크로\n- 코드로 스키마 정의하기\n- 모델 유형에 스위프트 데이터 기능 추가하기\n\n속성을 어떻게 추론할지 제어합니다.\n\n@Attributes\n\n- 속성에서 추론된 속성\n- 기본 값 유형 지원\n- 구조체, 열거형, Codable 및 값 유형의 컬렉션과 같은 복잡한 값 유형의 지원\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n@관계\n\n- 관계는 참조 유형에서 유추됩니다.\n- 다른 모델 유형\n- 모델 유형의 컬렉션\n\n@Transient로 속성 제외\n\n더 많은 정보: Swift Data로 스키마 모델링하기 (WWDC 2023)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 데이터 작업하기\n\n## 모델 컨테이너\n\n- 영속성 백엔드\n- 구성에 맞게 사용자 지정\n- 스키마 마이그레이션 옵션 제공\n\n```js\n.modelContainer(for: Category.self) { result in\n    // TODO: - 결과 처리\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 모델 컨텍스트\n\n- 업데이트 추적\n- 모델 가져오기\n- 변경 내용 저장\n- 변경 내용 취소\n\n![이미지](/assets/img/2024-05-27-BuildingSwiftUIApplicationswithSwiftData_1.png)\n\n더 많은 정보: SwiftData에 대한 깊은 탐구 (WWDC 2023)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# SwiftUI와 통합\n\nSwiftData는 SwiftUI를 염두에 두고 만들어졌으며 함께 사용하는 것이 더 쉽습니다.\n\n뷰 수정자\n\n- 씬 및 뷰 수정자 활용\n- .modelContainer로 데이터 구성\n- SwiftUI 환경 전체에 전파됨\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n@Query Property Wrapper\n\n```swift\n@Query var categories: [Category]\nvar body: some View {\n List(categories) { category in\n  NavigationLink(category.name, destination: CategoryView(category))\n }\n}\n```\n\nSwiftData와 SwiftUI가 함께 작동하여 기본 데이터가 변경될 때 뷰에 실시간 업데이트를 제공하며 결과를 수동으로 새로 고침할 필요가 없습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n변경 사항 관찰\n\n@Published를 사용할 필요가 없습니다. SwiftUI는 관찰 대상 속성을 자동으로 새로 고칩니다.\n\n추가 정보: SwiftData(WWDC 2023)를 활용하여 앱을 개발해보세요.\n\n# 자동 지속성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSwiftData는 사용자 모델로 사용자 지정 스키마를 빌드하고 효율적으로 필드를 기반 저장소에 매핑합니다. SwiftData가 관리하는 객체는 필요할 때 데이터베이스에서 가져오고 추가 작업없이 적절한 시점에 자동으로 저장됩니다. 또한 ModelContext API를 사용하여 완전한 제어를 할 수도 있습니다.\n\n# CloudKit 동기화\n\n데이터는 DocumentGroup을 사용하여 파일로 저장하고 iCloud Drive를 통해 동기화하거나 CloudKit을 사용하여 장치간 데이터 동기화를 할 수 있습니다.\n\n# Core Data와 호환 가능\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSwiftData는 Core Data의 검증된 저장 아키텍처를 사용하므로 동일한 기본 저장소를 사용하여 동일한 앱에서 둘 다 사용할 수 있습니다. 준비가 되면 Xcode가 Core Data 모델을 SwiftData와 함께 사용할 클래스로 변환할 수 있습니다.\n\n# 참고:\n","ogImage":{"url":"/assets/img/2024-05-27-BuildingSwiftUIApplicationswithSwiftData_0.png"},"coverImage":"/assets/img/2024-05-27-BuildingSwiftUIApplicationswithSwiftData_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-BuildingSwiftUIApplicationswithSwiftData_0.png\" alt=\"Image\"></p>\n<h1>Swift UI는 Swift Data를 시작하는 가장 쉬운 방법입니다</h1>\n<ul>\n<li>Swift UI와의 완벽한 통합</li>\n<li>간편한 구성</li>\n<li>데이터 자동 가져오기 및 뷰 업데이트</li>\n</ul>\n<h1>Swift Data 소개</h1>\n<p></p>\n<p>표를 마크다운 형식으로 변경해 주세요.</p>\n<p></p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Model</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Category</span> {\n\n  <span class=\"hljs-meta\">@Attribute(.unique)</span> <span class=\"hljs-keyword\">var</span> name: String\n  <span class=\"hljs-keyword\">var</span> imageName: String\n\n  <span class=\"hljs-keyword\">init</span>(name: String,\n       imageName: String = <span class=\"hljs-string\">\"rupeesign.circle\"</span>,\n       type: CategoryType) {\n    self.name = name\n    self.imageName = imageName\n  }\n\n}\n</code></pre>\n<h2>Using the model macro</h2>\n<p>Modifies all stored properties</p>\n<p>@Model</p>\n<p></p>\n<ul>\n<li>강력한 새로운 스위프트 매크로</li>\n<li>코드로 스키마 정의하기</li>\n<li>모델 유형에 스위프트 데이터 기능 추가하기</li>\n</ul>\n<p>속성을 어떻게 추론할지 제어합니다.</p>\n<p>@Attributes</p>\n<ul>\n<li>속성에서 추론된 속성</li>\n<li>기본 값 유형 지원</li>\n<li>구조체, 열거형, Codable 및 값 유형의 컬렉션과 같은 복잡한 값 유형의 지원</li>\n</ul>\n<p></p>\n<p>@관계</p>\n<ul>\n<li>관계는 참조 유형에서 유추됩니다.</li>\n<li>다른 모델 유형</li>\n<li>모델 유형의 컬렉션</li>\n</ul>\n<p>@Transient로 속성 제외</p>\n<p>더 많은 정보: Swift Data로 스키마 모델링하기 (WWDC 2023)</p>\n<p></p>\n<h1>데이터 작업하기</h1>\n<h2>모델 컨테이너</h2>\n<ul>\n<li>영속성 백엔드</li>\n<li>구성에 맞게 사용자 지정</li>\n<li>스키마 마이그레이션 옵션 제공</li>\n</ul>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-title function_\">modelContainer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">for</span>: Category.self</span>) { result <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> - 결과 처리</span>\n}\n</code></pre>\n<p></p>\n<h2>모델 컨텍스트</h2>\n<ul>\n<li>업데이트 추적</li>\n<li>모델 가져오기</li>\n<li>변경 내용 저장</li>\n<li>변경 내용 취소</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-27-BuildingSwiftUIApplicationswithSwiftData_1.png\" alt=\"이미지\"></p>\n<p>더 많은 정보: SwiftData에 대한 깊은 탐구 (WWDC 2023)</p>\n<p></p>\n<h1>SwiftUI와 통합</h1>\n<p>SwiftData는 SwiftUI를 염두에 두고 만들어졌으며 함께 사용하는 것이 더 쉽습니다.</p>\n<p>뷰 수정자</p>\n<ul>\n<li>씬 및 뷰 수정자 활용</li>\n<li>.modelContainer로 데이터 구성</li>\n<li>SwiftUI 환경 전체에 전파됨</li>\n</ul>\n<p></p>\n<p>@Query Property Wrapper</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-meta\">@Query</span> <span class=\"hljs-keyword\">var</span> categories: [<span class=\"hljs-type\">Category</span>]\n<span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n <span class=\"hljs-type\">List</span>(categories) { category <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-type\">NavigationLink</span>(category.name, destination: <span class=\"hljs-type\">CategoryView</span>(category))\n }\n}\n</code></pre>\n<p>SwiftData와 SwiftUI가 함께 작동하여 기본 데이터가 변경될 때 뷰에 실시간 업데이트를 제공하며 결과를 수동으로 새로 고침할 필요가 없습니다.</p>\n<p></p>\n<p>변경 사항 관찰</p>\n<p>@Published를 사용할 필요가 없습니다. SwiftUI는 관찰 대상 속성을 자동으로 새로 고칩니다.</p>\n<p>추가 정보: SwiftData(WWDC 2023)를 활용하여 앱을 개발해보세요.</p>\n<h1>자동 지속성</h1>\n<p></p>\n<p>SwiftData는 사용자 모델로 사용자 지정 스키마를 빌드하고 효율적으로 필드를 기반 저장소에 매핑합니다. SwiftData가 관리하는 객체는 필요할 때 데이터베이스에서 가져오고 추가 작업없이 적절한 시점에 자동으로 저장됩니다. 또한 ModelContext API를 사용하여 완전한 제어를 할 수도 있습니다.</p>\n<h1>CloudKit 동기화</h1>\n<p>데이터는 DocumentGroup을 사용하여 파일로 저장하고 iCloud Drive를 통해 동기화하거나 CloudKit을 사용하여 장치간 데이터 동기화를 할 수 있습니다.</p>\n<h1>Core Data와 호환 가능</h1>\n<p></p>\n<p>SwiftData는 Core Data의 검증된 저장 아키텍처를 사용하므로 동일한 기본 저장소를 사용하여 동일한 앱에서 둘 다 사용할 수 있습니다. 준비가 되면 Xcode가 Core Data 모델을 SwiftData와 함께 사용할 클래스로 변환할 수 있습니다.</p>\n<h1>참고:</h1>\n</body>\n</html>\n"},"__N_SSG":true}