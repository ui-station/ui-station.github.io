{"pageProps":{"post":{"title":"2024 최신 Android Paging 30 Part 2 적용 방법","description":"","date":"2024-06-22 22:46","slug":"2024-06-22-Part2AndroidPaging30","content":"\n![그림](/assets/img/2024-06-22-Part2AndroidPaging30_0.png)\n\n안드로이드에서의 Paging 3.0은 이전 버전보다 여러 가지 개선 사항과 변화를 가져와서 더 강력하고 사용하기 쉽게 만들어졌어요. 아래에는 Paging 3.0의 각 구성 요소를 구현하는 방법에 대한 자세한 설명이 있습니다.\n\n# Paging 3.0의 주요 구성 요소\n\n- PagingSource: DataSource를 대체하며 서로 다른 소스로부터 데이터를 페이징하는 데 사용되는 주요 API 역할을 합니다.\n- Pager: 페이징된 데이터의 Flow 또는 LiveData를 생성하는 데 사용됩니다.\n- PagingData: 페이징된 데이터의 스트림을 나타냅니다.\n- PagingDataAdapter: PagedListAdapter를 대체하며 RecyclerView에서 페이징된 데이터를 표시하는 데 사용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 구현 단계\n\n- PagingSource 정의:\n\n- PagingSource는 데이터를 데이터 소스에서 로드하는 역할을 담당합니다.\n- 다양한 페이지에 대해 데이터를 로드하는 방법을 정의함으로써 PagingSource를 구현합니다.\n\n```kotlin\nclass MyPagingSource(private val apiService: ApiService) : PagingSource<Int, MyItem>() {\n\n    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, MyItem> {\n        return try {\n            // 데이터 소스에서 데이터 로드\n            val nextPageNumber = params.key ?: 1\n            val response = apiService.getItems(nextPageNumber, params.loadSize)\n            LoadResult.Page(\n                data = response.items,\n                prevKey = if (nextPageNumber == 1) null else nextPageNumber - 1,\n                nextKey = if (response.items.isEmpty()) null else nextPageNumber + 1\n            )\n        } catch (e: Exception) {\n            LoadResult.Error(e)\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 페이저 생성하기:\n\n- 페이저 객체는 PagingData의 Flow 또는 LiveData를 생성하는 데 사용됩니다.\n- 페이저를 PagingConfig와 PagingSource로 구성합니다.\n\n```js\nclass MyRepository(private val apiService: ApiService) {\n\n    fun getPagingData(): Flow<PagingData<MyItem>> {\n        return Pager(\n            config = PagingConfig(\n                pageSize = 20,\n                enablePlaceholders = false\n            ),\n            pagingSourceFactory = { MyPagingSource(apiService) }\n        ).flow\n    }\n}\n```\n\n3. ViewModel에서 PagingData 관찰하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 뷰모델에서 PagingData를 관찰하기 위해 Flow를 사용하세요.\n- LiveData를 선호한다면 LiveData와 함께 작업하십시오.\n\n```js\nclass MyRepository(private val apiService: ApiService) {\n\n    fun getPagingData(): Flow<PagingData<MyItem>> {\n        return Pager(\n            config = PagingConfig(\n                pageSize = 20,\n                enablePlaceholders = false\n            ),\n            pagingSourceFactory = { MyPagingSource(apiService) }\n        ).flow\n    }\n}\n```\n\n4. PagingDataAdapter로 RecyclerView 설정하기:\n\n- PagingDataAdapter를 사용하여 데이터를 RecyclerView에 바인딩합니다.\n- PagingData가 변경될 때 새 데이터를 어댑터에 제출하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclass MyViewModel(private val repository: MyRepository) : ViewModel() {\n\n    val pagingDataFlow = repository.getPagingData().cachedIn(viewModelScope)\n}\n```\n\n5. Activity/Fragment에서 모든 것을 연결하기:\n\n- PagingData를 관찰하고 어댑터에 제출합니다.\n\n```js\nclass MyPagingDataAdapter : PagingDataAdapter<MyItem, MyViewHolder>(MyDiffCallback()) {\n\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\n        val item = getItem(position)\n        if (item != null) {\n            holder.bind(item)\n        }\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_view, parent, false)\n        return MyViewHolder(view)\n    }\n\n    class MyDiffCallback : DiffUtil.ItemCallback<MyItem>() {\n        override fun areItemsTheSame(oldItem: MyItem, newItem: MyItem): Boolean {\n            return oldItem.id == newItem.id\n        }\n\n        override fun areContentsTheSame(oldItem: MyItem, newItem: MyItem): Boolean {\n            return oldItem == newItem\n        }\n    }\n}\n\nclass MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    fun bind(item: MyItem) {\n        // 뷰에 데이터를 바인딩합니다\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 대용량 데이터 처리\n\nPaging 3.0은 다음과 같은 방식으로 대용량 데이터 세트를 효과적으로 처리합니다:\n\n- 점진적 로딩: 필요할 때 데이터를 청크 단위로 로드하여 메모리 사용량을 줄입니다.\n- 백그라운드 로딩: 데이터 로딩을 백그라운드에서 처리하여 반응이 빠른 UI를 제공합니다.\n- 오류 처리: 실패한 로드를 다시 시도할 수 있는 메커니즘을 제공합니다.\n- 캐싱: 불필요한 네트워크 또는 데이터베이스 호출을 방지하기 위해 인메모리 캐싱을 지원합니다.\n- 변환: PagingData에 직접 적용할 수 있는 데이터 변환(예: 맵, 필터)을 허용합니다.\n\nPaging 3.0을 사용하여 대용량 데이터 세트를 원활하게 처리할 수 있는 효율적이고 반응이 뛰어난 애플리케이션을 만들 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-22-Part2AndroidPaging30_0.png"},"coverImage":"/assets/img/2024-06-22-Part2AndroidPaging30_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-Part2AndroidPaging30_0.png\" alt=\"그림\"></p>\n<p>안드로이드에서의 Paging 3.0은 이전 버전보다 여러 가지 개선 사항과 변화를 가져와서 더 강력하고 사용하기 쉽게 만들어졌어요. 아래에는 Paging 3.0의 각 구성 요소를 구현하는 방법에 대한 자세한 설명이 있습니다.</p>\n<h1>Paging 3.0의 주요 구성 요소</h1>\n<ul>\n<li>PagingSource: DataSource를 대체하며 서로 다른 소스로부터 데이터를 페이징하는 데 사용되는 주요 API 역할을 합니다.</li>\n<li>Pager: 페이징된 데이터의 Flow 또는 LiveData를 생성하는 데 사용됩니다.</li>\n<li>PagingData: 페이징된 데이터의 스트림을 나타냅니다.</li>\n<li>PagingDataAdapter: PagedListAdapter를 대체하며 RecyclerView에서 페이징된 데이터를 표시하는 데 사용됩니다.</li>\n</ul>\n<p></p>\n<h1>구현 단계</h1>\n<ul>\n<li>\n<p>PagingSource 정의:</p>\n</li>\n<li>\n<p>PagingSource는 데이터를 데이터 소스에서 로드하는 역할을 담당합니다.</p>\n</li>\n<li>\n<p>다양한 페이지에 대해 데이터를 로드하는 방법을 정의함으로써 PagingSource를 구현합니다.</p>\n</li>\n</ul>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyPagingSource</span>(<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> apiService: ApiService) : PagingSource&#x3C;<span class=\"hljs-built_in\">Int</span>, MyItem>() {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">load</span><span class=\"hljs-params\">(params: <span class=\"hljs-type\">LoadParams</span>&#x3C;<span class=\"hljs-type\">Int</span>>)</span></span>: LoadResult&#x3C;<span class=\"hljs-built_in\">Int</span>, MyItem> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-comment\">// 데이터 소스에서 데이터 로드</span>\n            <span class=\"hljs-keyword\">val</span> nextPageNumber = params.key ?: <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">val</span> response = apiService.getItems(nextPageNumber, params.loadSize)\n            LoadResult.Page(\n                <span class=\"hljs-keyword\">data</span> = response.items,\n                prevKey = <span class=\"hljs-keyword\">if</span> (nextPageNumber == <span class=\"hljs-number\">1</span>) <span class=\"hljs-literal\">null</span> <span class=\"hljs-keyword\">else</span> nextPageNumber - <span class=\"hljs-number\">1</span>,\n                nextKey = <span class=\"hljs-keyword\">if</span> (response.items.isEmpty()) <span class=\"hljs-literal\">null</span> <span class=\"hljs-keyword\">else</span> nextPageNumber + <span class=\"hljs-number\">1</span>\n            )\n        } <span class=\"hljs-keyword\">catch</span> (e: Exception) {\n            LoadResult.Error(e)\n        }\n    }\n}\n</code></pre>\n<p></p>\n<ol start=\"2\">\n<li>페이저 생성하기:</li>\n</ol>\n<ul>\n<li>페이저 객체는 PagingData의 Flow 또는 LiveData를 생성하는 데 사용됩니다.</li>\n<li>페이저를 PagingConfig와 PagingSource로 구성합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyRepository</span>(private val <span class=\"hljs-attr\">apiService</span>: <span class=\"hljs-title class_\">ApiService</span>) {\n\n    fun <span class=\"hljs-title function_\">getPagingData</span>(): <span class=\"hljs-title class_\">Flow</span>&#x3C;<span class=\"hljs-title class_\">PagingData</span>&#x3C;<span class=\"hljs-title class_\">MyItem</span>>> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Pager</span>(\n            config = <span class=\"hljs-title class_\">PagingConfig</span>(\n                pageSize = <span class=\"hljs-number\">20</span>,\n                enablePlaceholders = <span class=\"hljs-literal\">false</span>\n            ),\n            pagingSourceFactory = { <span class=\"hljs-title class_\">MyPagingSource</span>(apiService) }\n        ).<span class=\"hljs-property\">flow</span>\n    }\n}\n</code></pre>\n<ol start=\"3\">\n<li>ViewModel에서 PagingData 관찰하기:</li>\n</ol>\n<p></p>\n<ul>\n<li>뷰모델에서 PagingData를 관찰하기 위해 Flow를 사용하세요.</li>\n<li>LiveData를 선호한다면 LiveData와 함께 작업하십시오.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyRepository</span>(private val <span class=\"hljs-attr\">apiService</span>: <span class=\"hljs-title class_\">ApiService</span>) {\n\n    fun <span class=\"hljs-title function_\">getPagingData</span>(): <span class=\"hljs-title class_\">Flow</span>&#x3C;<span class=\"hljs-title class_\">PagingData</span>&#x3C;<span class=\"hljs-title class_\">MyItem</span>>> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Pager</span>(\n            config = <span class=\"hljs-title class_\">PagingConfig</span>(\n                pageSize = <span class=\"hljs-number\">20</span>,\n                enablePlaceholders = <span class=\"hljs-literal\">false</span>\n            ),\n            pagingSourceFactory = { <span class=\"hljs-title class_\">MyPagingSource</span>(apiService) }\n        ).<span class=\"hljs-property\">flow</span>\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>PagingDataAdapter로 RecyclerView 설정하기:</li>\n</ol>\n<ul>\n<li>PagingDataAdapter를 사용하여 데이터를 RecyclerView에 바인딩합니다.</li>\n<li>PagingData가 변경될 때 새 데이터를 어댑터에 제출하세요.</li>\n</ul>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyViewModel</span>(private val <span class=\"hljs-attr\">repository</span>: <span class=\"hljs-title class_\">MyRepository</span>) : <span class=\"hljs-title class_\">ViewModel</span>() {\n\n    val pagingDataFlow = repository.<span class=\"hljs-title function_\">getPagingData</span>().<span class=\"hljs-title function_\">cachedIn</span>(viewModelScope)\n}\n</code></pre>\n<ol start=\"5\">\n<li>Activity/Fragment에서 모든 것을 연결하기:</li>\n</ol>\n<ul>\n<li>PagingData를 관찰하고 어댑터에 제출합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyPagingDataAdapter</span> : <span class=\"hljs-title class_\">PagingDataAdapter</span>&#x3C;<span class=\"hljs-title class_\">MyItem</span>, <span class=\"hljs-title class_\">MyViewHolder</span>>(<span class=\"hljs-title class_\">MyDiffCallback</span>()) {\n\n    override fun <span class=\"hljs-title function_\">onBindViewHolder</span>(<span class=\"hljs-params\">holder: MyViewHolder, position: Int</span>) {\n        val item = <span class=\"hljs-title function_\">getItem</span>(position)\n        <span class=\"hljs-keyword\">if</span> (item != <span class=\"hljs-literal\">null</span>) {\n            holder.<span class=\"hljs-title function_\">bind</span>(item)\n        }\n    }\n\n    override fun <span class=\"hljs-title function_\">onCreateViewHolder</span>(<span class=\"hljs-attr\">parent</span>: <span class=\"hljs-title class_\">ViewGroup</span>, <span class=\"hljs-attr\">viewType</span>: <span class=\"hljs-title class_\">Int</span>): <span class=\"hljs-title class_\">MyViewHolder</span> {\n        val view = <span class=\"hljs-title class_\">LayoutInflater</span>.<span class=\"hljs-title function_\">from</span>(parent.<span class=\"hljs-property\">context</span>).<span class=\"hljs-title function_\">inflate</span>(R.<span class=\"hljs-property\">layout</span>.<span class=\"hljs-property\">item_view</span>, parent, <span class=\"hljs-literal\">false</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MyViewHolder</span>(view)\n    }\n\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyDiffCallback</span> : <span class=\"hljs-title class_\">DiffUtil</span>.<span class=\"hljs-property\">ItemCallback</span>&#x3C;<span class=\"hljs-title class_\">MyItem</span>>() {\n        override fun <span class=\"hljs-title function_\">areItemsTheSame</span>(<span class=\"hljs-attr\">oldItem</span>: <span class=\"hljs-title class_\">MyItem</span>, <span class=\"hljs-attr\">newItem</span>: <span class=\"hljs-title class_\">MyItem</span>): <span class=\"hljs-title class_\">Boolean</span> {\n            <span class=\"hljs-keyword\">return</span> oldItem.<span class=\"hljs-property\">id</span> == newItem.<span class=\"hljs-property\">id</span>\n        }\n\n        override fun <span class=\"hljs-title function_\">areContentsTheSame</span>(<span class=\"hljs-attr\">oldItem</span>: <span class=\"hljs-title class_\">MyItem</span>, <span class=\"hljs-attr\">newItem</span>: <span class=\"hljs-title class_\">MyItem</span>): <span class=\"hljs-title class_\">Boolean</span> {\n            <span class=\"hljs-keyword\">return</span> oldItem == newItem\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyViewHolder</span>(<span class=\"hljs-attr\">itemView</span>: <span class=\"hljs-title class_\">View</span>) : <span class=\"hljs-title class_\">RecyclerView</span>.<span class=\"hljs-title class_\">ViewHolder</span>(itemView) {\n    fun <span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-params\">item: MyItem</span>) {\n        <span class=\"hljs-comment\">// 뷰에 데이터를 바인딩합니다</span>\n    }\n}\n</code></pre>\n<p></p>\n<h1>대용량 데이터 처리</h1>\n<p>Paging 3.0은 다음과 같은 방식으로 대용량 데이터 세트를 효과적으로 처리합니다:</p>\n<ul>\n<li>점진적 로딩: 필요할 때 데이터를 청크 단위로 로드하여 메모리 사용량을 줄입니다.</li>\n<li>백그라운드 로딩: 데이터 로딩을 백그라운드에서 처리하여 반응이 빠른 UI를 제공합니다.</li>\n<li>오류 처리: 실패한 로드를 다시 시도할 수 있는 메커니즘을 제공합니다.</li>\n<li>캐싱: 불필요한 네트워크 또는 데이터베이스 호출을 방지하기 위해 인메모리 캐싱을 지원합니다.</li>\n<li>변환: PagingData에 직접 적용할 수 있는 데이터 변환(예: 맵, 필터)을 허용합니다.</li>\n</ul>\n<p>Paging 3.0을 사용하여 대용량 데이터 세트를 원활하게 처리할 수 있는 효율적이고 반응이 뛰어난 애플리케이션을 만들 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}