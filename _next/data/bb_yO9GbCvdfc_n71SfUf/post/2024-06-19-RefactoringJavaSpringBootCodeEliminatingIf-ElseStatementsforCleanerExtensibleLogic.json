{"pageProps":{"post":{"title":"Java Spring Boot 코드 리팩터링 더 깔끔하고 확장 가능한 로직을 위해 If-Else 문 제거하기","description":"","date":"2024-06-19 09:59","slug":"2024-06-19-RefactoringJavaSpringBootCodeEliminatingIf-ElseStatementsforCleanerExtensibleLogic","content":"\nif-else 문은 널리 사용되지만 과용하면 복잡하고 유지보수가 어려운 코드를 작성하게 될 수 있습니다. 이 기사에서는 Java Spring Boot 프로젝트에서 if-else 구조의 사용을 줄이는 다양한 전략을 탐색하며 코드를 모듈화하고 유지보수 가능하며 가독성 있게 만드는 데 초점을 맞춥니다.\n\n![image](/assets/img/2024-06-19-RefactoringJavaSpringBootCodeEliminatingIf-ElseStatementsforCleanerExtensibleLogic_0.png)\n\n## if-else 문 줄이는 전략\n\n- 전략 패턴\n- Enum 사용\n- 다형성\n- 람다 표현식 및 함수형 인터페이스\n- 명령 패턴\n- 가드 절(recipes)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n각 전략에 대해 예제와 함께 자세히 파헤쳐 봅시다.\n\n### 1. 전략 패턴\n\n전략 패턴은 알고리즘의 집합을 정의하고, 각각을 캡슐화하며, 서로 교환할 수 있게 만드는 패턴입니다. 이 패턴은 특정 작업을 수행하는 여러 방법이 있는 경우 유용합니다.\n\n### 예제: 결제 처리 시스템\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저 PaymentStrategy 인터페이스를 정의합니다:\n\n```java\npublic interface PaymentStrategy {\n    void pay(double amount);\n}\n```\n\n다음으로 다양한 결제 전략을 구현합니다:\n\n```java\n@Component\npublic class CreditCardPayment implements PaymentStrategy {\n    @Override\n    public void pay(double amount) {\n        // 신용카드 결제 처리 로직\n        System.out.println(\"신용카드를 사용하여 \" + amount + \" 결제되었습니다.\");\n    }\n}\n\n@Component\npublic class PaypalPayment implements PaymentStrategy {\n    @Override\n    public void pay(double amount) {\n        // PayPal 결제 처리 로직\n        System.out.println(\"PayPal을 사용하여 \" + amount + \" 결제되었습니다.\");\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 마크다운 형식으로 변경하십시오.\n\n| 구분 | 설명    |\n| ---- | ------- |\n| 1    | 첫 번째 |\n| 2    | 두 번째 |\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 예시: 주문 상태 관리\n\n다양한 동작을 가진 OrderStatus enum을 정의합니다:\n\n```js\npublic enum OrderStatus {\n    NEW {\n        @Override\n        public void handle() {\n            System.out.println(\"신규 주문 처리 중.\");\n        }\n    },\n    SHIPPED {\n        @Override\n        public void handle() {\n            System.out.println(\"주문 발송됨.\");\n        }\n    },\n    DELIVERED {\n        @Override\n        public void handle() {\n            System.out.println(\"주문 배송 완료됨.\");\n        }\n    };\n\n    public abstract void handle();\n}\n```\n\n이 enum을 서비스에서 사용하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```java\n@Service\npublic class OrderService {\n    public void processOrder(OrderStatus status) {\n        status.handle();\n    }\n}\n```\n\n## 3. Polymorphism\n\n다형성은 객체를 실제 클래스가 아닌 부모 클래스의 인스턴스로 취급할 수 있게 합니다. 이를 통해 부모 클래스의 참조를 통해 파생 클래스의 재정의된 메소드를 호출할 수 있습니다.\n\n## Example: Notification System\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```java\n// `Notification` 인터페이스와 그 구현 클래스 정의:\n\npublic interface Notification {\n    void send(String message);\n}\n\npublic class EmailNotification implements Notification {\n    @Override\n    public void send(String message) {\n        // 이메일 전송 로직\n        System.out.println(\"이메일 전송 중: \" + message);\n    }\n}\n\npublic class SmsNotification implements Notification {\n    @Override\n    public void send(String message) {\n        // SMS 전송 로직\n        System.out.println(\"SMS 전송 중: \" + message);\n    }\n}\n\n// 다형성을 사용하는 서비스 생성:\n\n@Service\npublic class NotificationService {\n    private final List<Notification> notifications;\n\n    public NotificationService(List<Notification> notifications) {\n        this.notifications = notifications;\n    }\n\n    public void notifyAll(String message) {\n        for (Notification notification : notifications) {\n            notification.send(message);\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 4. 람다 표현식과 함수형 인터페이스\n\n람다 표현식은 코드를 간단하게 만들어 줄 수 있어, 특히 작고 단일 메서드 인터페이스를 다룰 때 유용합니다.\n\n## 예시: 할인 서비스\n\n람다 표현식을 사용하는 할인 서비스를 정의하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\npublic class DiscountService {\n    private Map<String, Function<Double, Double>> discountStrategies = new HashMap<>();\n\n    public DiscountService() {\n        discountStrategies.put(\"SUMMER_SALE\", price -> price * 0.9);\n        discountStrategies.put(\"WINTER_SALE\", price -> price * 0.8);\n    }\n\n    public double applyDiscount(String discountCode, double price) {\n        return discountStrategies.getOrDefault(discountCode, Function.identity()).apply(price);\n    }\n}\n```\n\n## 5. Command Pattern\n\nThe Command Pattern encapsulates a request as an object, thereby allowing you to parameterize clients with queues, requests, and operations.\n\n## Example: File Operations\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Command 인터페이스와 구체적인 명령어를 정의한 코드입니다:\n\n```js\npublic interface Command {\n    void execute();\n}\n\npublic class OpenFileCommand implements Command {\n    private FileSystemReceiver fileSystem;\n\n    public OpenFileCommand(FileSystemReceiver fs) {\n        this.fileSystem = fs;\n    }\n\n    @Override\n    public void execute() {\n        this.fileSystem.openFile();\n    }\n}\n\npublic class CloseFileCommand implements Command {\n    private FileSystemReceiver fileSystem;\n\n    public CloseFileCommand(FileSystemReceiver fs) {\n        this.fileSystem = fs;\n    }\n\n    @Override\n    public void execute() {\n        this.fileSystem.closeFile();\n    }\n}\n```\n\n아래는 FileSystemReceiver와 Invoker를 정의한 코드입니다:\n\n```js\npublic interface FileSystemReceiver {\n    void openFile();\n    void closeFile();\n}\n\npublic class UnixFileSystemReceiver implements FileSystemReceiver {\n    @Override\n    public void openFile() {\n        System.out.println(\"Unix 운영체제에서 파일을 엽니다.\");\n    }\n\n    @Override\n    public void closeFile() {\n        System.out.println(\"Unix 운영체제에서 파일을 닫습니다.\");\n    }\n}\n\npublic class FileInvoker {\n    private Command command;\n\n    public FileInvoker(Command cmd) {\n        this.command = cmd;\n    }\n\n    public void execute() {\n        this.command.execute();\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 6. 가드 구문\n\n가드 구문은 조건을 조기에 처리하여 중첩 구조를 줄여 코드를 더 읽기 쉽게 만드는 방법을 제공합니다.\n\n## 예시: 사용자 유효성 검사\n\n사용자 입력을 유효성 검사하기 위해 if-else 문을 중첩하는 대신, 가드 구문을 사용하여 잘못된 경우를 미리 처리하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```java\npublic class UserService {\n    public void registerUser(User user) {\n        if (user == null) {\n            throw new IllegalArgumentException(\"User cannot be null\");\n        }\n        if (user.getName() == null || user.getName().isEmpty()) {\n            throw new IllegalArgumentException(\"User name cannot be empty\");\n        }\n        if (user.getEmail() == null || user.getEmail().isEmpty()) {\n            throw new IllegalArgumentException(\"User email cannot be empty\");\n        }\n        // Proceed with registration\n        System.out.println(\"Registering user: \" + user.getName());\n    }\n}\n```\n\n이 접근 방식을 통해 잘못된 조건을 조기에 처리하고 주요 로직을 보다 깔끔하고 이해하기 쉽게 유지할 수 있습니다.\n\n# 결론\n\n이러한 전략을 적용함으로써 Java Spring Boot 프로젝트에서 if-else 문의 사용을 크게 줄일 수 있습니다. 이는 코드를 더 읽기 쉽게 만들 뿐만 아니라 유지보수성과 확장성을 향상시킵니다. 이러한 패턴과 관행을 받아들여 더 깨끗하고 효율적인 코드를 작성해 보세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 참고 자료\n\n- Gamma, E., Helm, R., Johnson, R., & Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.\n- Bloch, J. (2018). Effective Java. Addison-Wesley.\n- Fowler, M. (2019). Refactoring: Improving the Design of Existing Code. Addison-Wesley.\n- Freeman, E., & Robson, E. (2020). Head First Design Patterns: Building Extensible and Maintainable Object-Oriented Software. O’Reilly Media.\n- Beck, K. (2003). Test Driven Development: By Example. Addison-Wesley.\n\n코딩을 즐기세요! 👨‍💻👩‍💻\n","ogImage":{"url":"/assets/img/2024-06-19-RefactoringJavaSpringBootCodeEliminatingIf-ElseStatementsforCleanerExtensibleLogic_0.png"},"coverImage":"/assets/img/2024-06-19-RefactoringJavaSpringBootCodeEliminatingIf-ElseStatementsforCleanerExtensibleLogic_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>if-else 문은 널리 사용되지만 과용하면 복잡하고 유지보수가 어려운 코드를 작성하게 될 수 있습니다. 이 기사에서는 Java Spring Boot 프로젝트에서 if-else 구조의 사용을 줄이는 다양한 전략을 탐색하며 코드를 모듈화하고 유지보수 가능하며 가독성 있게 만드는 데 초점을 맞춥니다.</p>\n<p><img src=\"/assets/img/2024-06-19-RefactoringJavaSpringBootCodeEliminatingIf-ElseStatementsforCleanerExtensibleLogic_0.png\" alt=\"image\"></p>\n<h2>if-else 문 줄이는 전략</h2>\n<ul>\n<li>전략 패턴</li>\n<li>Enum 사용</li>\n<li>다형성</li>\n<li>람다 표현식 및 함수형 인터페이스</li>\n<li>명령 패턴</li>\n<li>가드 절(recipes)</li>\n</ul>\n<p></p>\n<p>각 전략에 대해 예제와 함께 자세히 파헤쳐 봅시다.</p>\n<h3>1. 전략 패턴</h3>\n<p>전략 패턴은 알고리즘의 집합을 정의하고, 각각을 캡슐화하며, 서로 교환할 수 있게 만드는 패턴입니다. 이 패턴은 특정 작업을 수행하는 여러 방법이 있는 경우 유용합니다.</p>\n<h3>예제: 결제 처리 시스템</h3>\n<p></p>\n<p>먼저 PaymentStrategy 인터페이스를 정의합니다:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pay</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> amount)</span>;\n}\n</code></pre>\n<p>다음으로 다양한 결제 전략을 구현합니다:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CreditCardPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pay</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> amount)</span> {\n        <span class=\"hljs-comment\">// 신용카드 결제 처리 로직</span>\n        System.out.println(<span class=\"hljs-string\">\"신용카드를 사용하여 \"</span> + amount + <span class=\"hljs-string\">\" 결제되었습니다.\"</span>);\n    }\n}\n\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PaypalPayment</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">PaymentStrategy</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pay</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> amount)</span> {\n        <span class=\"hljs-comment\">// PayPal 결제 처리 로직</span>\n        System.out.println(<span class=\"hljs-string\">\"PayPal을 사용하여 \"</span> + amount + <span class=\"hljs-string\">\" 결제되었습니다.\"</span>);\n    }\n}\n</code></pre>\n<p></p>\n<p>테이블 태그를 마크다운 형식으로 변경하십시오.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>첫 번째</td>\n</tr>\n<tr>\n<td>2</td>\n<td>두 번째</td>\n</tr>\n</tbody>\n</table>\n<p></p>\n<h2>예시: 주문 상태 관리</h2>\n<p>다양한 동작을 가진 OrderStatus enum을 정의합니다:</p>\n<pre><code class=\"hljs language-js\">public enum <span class=\"hljs-title class_\">OrderStatus</span> {\n    <span class=\"hljs-variable constant_\">NEW</span> {\n        @<span class=\"hljs-title class_\">Override</span>\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handle</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"신규 주문 처리 중.\"</span>);\n        }\n    },\n    <span class=\"hljs-variable constant_\">SHIPPED</span> {\n        @<span class=\"hljs-title class_\">Override</span>\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handle</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"주문 발송됨.\"</span>);\n        }\n    },\n    <span class=\"hljs-variable constant_\">DELIVERED</span> {\n        @<span class=\"hljs-title class_\">Override</span>\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handle</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"주문 배송 완료됨.\"</span>);\n        }\n    };\n\n    public abstract <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handle</span>();\n}\n</code></pre>\n<p>이 enum을 서비스에서 사용하세요:</p>\n<p></p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderService</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">processOrder</span><span class=\"hljs-params\">(OrderStatus status)</span> {\n        status.handle();\n    }\n}\n</code></pre>\n<h2>3. Polymorphism</h2>\n<p>다형성은 객체를 실제 클래스가 아닌 부모 클래스의 인스턴스로 취급할 수 있게 합니다. 이를 통해 부모 클래스의 참조를 통해 파생 클래스의 재정의된 메소드를 호출할 수 있습니다.</p>\n<h2>Example: Notification System</h2>\n<p></p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-comment\">// `Notification` 인터페이스와 그 구현 클래스 정의:</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Notification</span> {\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">send</span><span class=\"hljs-params\">(String message)</span>;\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EmailNotification</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Notification</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">send</span><span class=\"hljs-params\">(String message)</span> {\n        <span class=\"hljs-comment\">// 이메일 전송 로직</span>\n        System.out.println(<span class=\"hljs-string\">\"이메일 전송 중: \"</span> + message);\n    }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SmsNotification</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Notification</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">send</span><span class=\"hljs-params\">(String message)</span> {\n        <span class=\"hljs-comment\">// SMS 전송 로직</span>\n        System.out.println(<span class=\"hljs-string\">\"SMS 전송 중: \"</span> + message);\n    }\n}\n\n<span class=\"hljs-comment\">// 다형성을 사용하는 서비스 생성:</span>\n\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NotificationService</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> List&#x3C;Notification> notifications;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">NotificationService</span><span class=\"hljs-params\">(List&#x3C;Notification> notifications)</span> {\n        <span class=\"hljs-built_in\">this</span>.notifications = notifications;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">notifyAll</span><span class=\"hljs-params\">(String message)</span> {\n        <span class=\"hljs-keyword\">for</span> (Notification notification : notifications) {\n            notification.send(message);\n        }\n    }\n}\n</code></pre>\n<p></p>\n<h2>4. 람다 표현식과 함수형 인터페이스</h2>\n<p>람다 표현식은 코드를 간단하게 만들어 줄 수 있어, 특히 작고 단일 메서드 인터페이스를 다룰 때 유용합니다.</p>\n<h2>예시: 할인 서비스</h2>\n<p>람다 표현식을 사용하는 할인 서비스를 정의하세요:</p>\n<p></p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-keyword\">import</span> java.util.function.Function;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DiscountService</span> {\n    <span class=\"hljs-keyword\">private</span> Map&#x3C;String, Function&#x3C;Double, Double>> discountStrategies = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&#x3C;>();\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DiscountService</span><span class=\"hljs-params\">()</span> {\n        discountStrategies.put(<span class=\"hljs-string\">\"SUMMER_SALE\"</span>, price -> price * <span class=\"hljs-number\">0.9</span>);\n        discountStrategies.put(<span class=\"hljs-string\">\"WINTER_SALE\"</span>, price -> price * <span class=\"hljs-number\">0.8</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">applyDiscount</span><span class=\"hljs-params\">(String discountCode, <span class=\"hljs-type\">double</span> price)</span> {\n        <span class=\"hljs-keyword\">return</span> discountStrategies.getOrDefault(discountCode, Function.identity()).apply(price);\n    }\n}\n</code></pre>\n<h2>5. Command Pattern</h2>\n<p>The Command Pattern encapsulates a request as an object, thereby allowing you to parameterize clients with queues, requests, and operations.</p>\n<h2>Example: File Operations</h2>\n<p></p>\n<p>아래는 Command 인터페이스와 구체적인 명령어를 정의한 코드입니다:</p>\n<pre><code class=\"hljs language-js\">public interface <span class=\"hljs-title class_\">Command</span> {\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">execute</span>();\n}\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OpenFileCommand</span> implements <span class=\"hljs-title class_\">Command</span> {\n    private <span class=\"hljs-title class_\">FileSystemReceiver</span> fileSystem;\n\n    public <span class=\"hljs-title class_\">OpenFileCommand</span>(<span class=\"hljs-title class_\">FileSystemReceiver</span> fs) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fileSystem</span> = fs;\n    }\n\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fileSystem</span>.<span class=\"hljs-title function_\">openFile</span>();\n    }\n}\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CloseFileCommand</span> implements <span class=\"hljs-title class_\">Command</span> {\n    private <span class=\"hljs-title class_\">FileSystemReceiver</span> fileSystem;\n\n    public <span class=\"hljs-title class_\">CloseFileCommand</span>(<span class=\"hljs-title class_\">FileSystemReceiver</span> fs) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fileSystem</span> = fs;\n    }\n\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fileSystem</span>.<span class=\"hljs-title function_\">closeFile</span>();\n    }\n}\n</code></pre>\n<p>아래는 FileSystemReceiver와 Invoker를 정의한 코드입니다:</p>\n<pre><code class=\"hljs language-js\">public interface <span class=\"hljs-title class_\">FileSystemReceiver</span> {\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">openFile</span>();\n    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">closeFile</span>();\n}\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnixFileSystemReceiver</span> implements <span class=\"hljs-title class_\">FileSystemReceiver</span> {\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">openFile</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Unix 운영체제에서 파일을 엽니다.\"</span>);\n    }\n\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">closeFile</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title class_\">System</span>.<span class=\"hljs-property\">out</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"Unix 운영체제에서 파일을 닫습니다.\"</span>);\n    }\n}\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileInvoker</span> {\n    private <span class=\"hljs-title class_\">Command</span> command;\n\n    public <span class=\"hljs-title class_\">FileInvoker</span>(<span class=\"hljs-title class_\">Command</span> cmd) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">command</span> = cmd;\n    }\n\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">execute</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">command</span>.<span class=\"hljs-title function_\">execute</span>();\n    }\n}\n</code></pre>\n<p></p>\n<h2>6. 가드 구문</h2>\n<p>가드 구문은 조건을 조기에 처리하여 중첩 구조를 줄여 코드를 더 읽기 쉽게 만드는 방법을 제공합니다.</p>\n<h2>예시: 사용자 유효성 검사</h2>\n<p>사용자 입력을 유효성 검사하기 위해 if-else 문을 중첩하는 대신, 가드 구문을 사용하여 잘못된 경우를 미리 처리하세요.</p>\n<p></p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">registerUser</span><span class=\"hljs-params\">(User user)</span> {\n        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">\"User cannot be null\"</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (user.getName() == <span class=\"hljs-literal\">null</span> || user.getName().isEmpty()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">\"User name cannot be empty\"</span>);\n        }\n        <span class=\"hljs-keyword\">if</span> (user.getEmail() == <span class=\"hljs-literal\">null</span> || user.getEmail().isEmpty()) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">\"User email cannot be empty\"</span>);\n        }\n        <span class=\"hljs-comment\">// Proceed with registration</span>\n        System.out.println(<span class=\"hljs-string\">\"Registering user: \"</span> + user.getName());\n    }\n}\n</code></pre>\n<p>이 접근 방식을 통해 잘못된 조건을 조기에 처리하고 주요 로직을 보다 깔끔하고 이해하기 쉽게 유지할 수 있습니다.</p>\n<h1>결론</h1>\n<p>이러한 전략을 적용함으로써 Java Spring Boot 프로젝트에서 if-else 문의 사용을 크게 줄일 수 있습니다. 이는 코드를 더 읽기 쉽게 만들 뿐만 아니라 유지보수성과 확장성을 향상시킵니다. 이러한 패턴과 관행을 받아들여 더 깨끗하고 효율적인 코드를 작성해 보세요.</p>\n<p></p>\n<h1>참고 자료</h1>\n<ul>\n<li>Gamma, E., Helm, R., Johnson, R., &#x26; Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.</li>\n<li>Bloch, J. (2018). Effective Java. Addison-Wesley.</li>\n<li>Fowler, M. (2019). Refactoring: Improving the Design of Existing Code. Addison-Wesley.</li>\n<li>Freeman, E., &#x26; Robson, E. (2020). Head First Design Patterns: Building Extensible and Maintainable Object-Oriented Software. O’Reilly Media.</li>\n<li>Beck, K. (2003). Test Driven Development: By Example. Addison-Wesley.</li>\n</ul>\n<p>코딩을 즐기세요! 👨‍💻👩‍💻</p>\n</body>\n</html>\n"},"__N_SSG":true}