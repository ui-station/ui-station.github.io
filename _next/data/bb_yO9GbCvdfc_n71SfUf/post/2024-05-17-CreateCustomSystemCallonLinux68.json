{"pageProps":{"post":{"title":"리눅스 68에서 사용자 정의 시스템 호출 만들기","description":"","date":"2024-05-17 18:49","slug":"2024-05-17-CreateCustomSystemCallonLinux68","content":"\n여태껏 사용자 정의 시스템 호출을 만들어보고 싶으셨나요? 과제를 위해서든, 즐거움을 위해서든, 또는 커널에 대해 더 많이 배우기 위해서든, 시스템 호출은 우리 시스템에 대해 더 많이 알아갈 수 있는 멋진 방법입니다.\n\n# 이 안내에 따를 이유는?\n\n이 주제에 대한 다양한 안내서가 있지만, 커널 개발 속도의 문제 때문에 문제가 발생합니다. 대부분의 안내서들은 오래되었고 다양한 오류를 발생시키기 때문에, 저는 이 포스트를 오류를 경험하고 그것들을 해결한 후에 작성하게 되었습니다 :)\n\n## 커널 컴파일을 위한 시스템 설정\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRed Hat / Fedora / Open Suse 기반 시스템에서는 아래와 같이 간편하게 실행할 수 있어요.\n\n```bash\nsudo dnf builddep kernel\nsudo dnf install kernel-devel\n```\n\nDebian / Ubuntu 기반 시스템에서는\n\n```bash\nsudo apt-get install build-essential vim git cscope libncurses-dev libssl-dev bison flex\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 커널 가져오기\n\n커널 소스 트리를 복제하세요. 특히 6.8 브랜치를 복제할 것이지만, 지침은 커널 개발자가 프로세스를 변경할 때까지 최신 브랜치에서도 작동해야 합니다.\n\n```js\ngit clone --depth=1 --branch v6.8 https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git\n```\n\n이상적으로, 복제된 버전은 현재 사용 중인 커널 버전과 같거나 더 높아야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재 커널 버전은 다음 명령어를 통해 확인할 수 있어요\n\n```bash\nuname -r\n```\n\n## 새로운 시스템 호출 생성\n\n다음을 수행해주세요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ncd linux\nmake mrproper\nmkdir hello\ncd hello\ntouch hello.c\ntouch Makefile\n```\n\n이 명령은 다운로드한 커널 소스 코드 내에 \"hello\"라는 폴더를 만들고, 그 안에 hello.c(시스템 호출 코드)와 Makefile(컴파일 규칙) 두 개의 파일을 생성합니다.\n\n좋아하는 텍스트 편집기에서 hello.c를 열고 다음 코드를 넣어주세요.\n\n```js\n#include <linux/kernel.h>\n#include <linux/syscalls.h>\n\nSYSCALL_DEFINE0(hello) {\n    pr_info(\"Hello World\\n\");\n    return 0;\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n커널 로그에 \"Hello World\"가 출력됩니다.\n\n우리는 단순히 프린트만 할 것이기 때문에 n=0을 사용합니다.\n\n이제 다음을 Makefile에 추가해주세요\n\nobj-y := hello.o\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제\n\n```js\ncd ..\ncd include/linux/\n```\n\n이 디렉토리 안에서 \"syscalls.h\" 파일을 열고 다음을 추가하세요.\n\n```js\nasmlinkage long sys_hello(void)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-17-CreateCustomSystemCallonLinux68_0.png\" />\n\n이것은 이전에 만든 syscall 함수에 대한 프로토타입입니다.\n\n커널 루트 내의 \"Kbuild\" 파일을 열고 (cd ../..) 맨 아래에 다음을 추가하십시오.\n\n```js\nobj-y += hello/\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 우리가 포함한 새 폴더도 컴파일하도록 커널 빌드 시스템에 지시합니다.\n\n이 작업이 완료되면, 아키텍처별 테이블에 시스콜 항목도 추가해 주어야 합니다.\n\n각 CPU 아키텍처는 특정 시스콜을 가질 수 있으며, 우리의 시스콜이 어떤 아키텍처를 위해 만들어졌는지 알려주어야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nx86_64 아키텍처에서 파일은\n\n```js\narch / x86 / entry / syscalls / syscall_64.tbl;\n```\n\n빈번호를 사용하고 테이블 주석에서 금지된 번호를 사용하지 않도록 유의하여 시스콜 항목을 추가하세요.\n\n제가 사용 가능한 번호 중 462번이 비어 있어서 새 항목을 다음과 같이 추가했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n462 공통 안녕 sys_hello\n```\n\n<img src=\"/assets/img/2024-05-17-CreateCustomSystemCallonLinux68_2.png\" />\n\n여기서 462은 우리의 시스템 호출에 매핑되며 두 아키텍처에 대해 공통인 sys_hello로 명명된 hello 시스템 호출의 진입 함수(entry function)입니다.\n\n## 새 커널을 컴파일하고 설치하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 명령을 실행하십시오.\n\n주의: 이 안내를 따르더라도 시스템의 안전, 보안, 무결성과 안정성을 보장하지 않습니다. 여기 나열된 모든 지침은 제 경험이며 귀하의 시스템에서의 결과를 대표하지 않습니다. 조심히 주의하여 진행하십시오.\n\n이제 법적인 부분은 끝냈으니, 계속해봅시다 ;)\n\n```js\ncp /boot/config-$(uname -r) .config\nmake olddefconfig\nmake -j $(nproc)\nsudo make -j $(nproc) modules_install\nsudo make install\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재 부팅된 커널의 구성 파일을 복사하고, 빌드 시스템에 동일한 값을 사용하도록 요청하여 기본값을 설정합니다. 그런 다음 nproc에 의해 주어진 코어 수에 따라 병렬 처리를 사용하여 커널을 빌드합니다. 이후 사용자 정의 커널을 설치합니다 (자체 책임으로).\n\n커널 컴파일에는 많은 시간이 소요되므로 커피 한 잔 또는 10잔을 마시며 터미널에서 스크롤되는 텍스트 줄을 즐기세요.\n\n시스템 속도에 따라 몇 시간이 걸릴 수 있으므로 실제 소요 시간이 다를 수 있습니다. 이 단계에서 열이 치기도 할 수 있으니 온도를 확인하려면 팬이 소리를 지를 수도 있습니다 (내 경우에도 그렇었어요).\n\n## 재미있는 부분, 새로운 시스템 호출 사용\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 시스템 호출이 우리의 커널에 통합되었으니 시스템을 재부팅하고 부팅 중에 grub에서 새로운 커스텀 커널을 선택해주세요\n\n![image](/assets/img/2024-05-17-CreateCustomSystemCallonLinux68_3.png)\n\n부팅 후 시스템 호출을 사용하는 C 프로그램을 작성해봅시다.\n\n다음 내용을 가진 파일 \"test.c\"를 생성하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n#include <stdio.h>\n#include <sys/syscall.h>\n#include <unistd.h>\nint main(void) {\n  printf(\"%ld\\n\", syscall(462));\n  return 0;\n}\n```\n\n당신이 테이블에서 시스템 콜에 대해 선택한 번호로 462을 대체하세요.\n\n프로그램을 컴파일하고 실행하세요.\n\n```js\nmake test\nchmod +x test\n./test\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모두 정상적으로 진행되면, 터미널에서 \"0\"을 출력하고 시스콜 출력이 커널 로그에 표시됩니다.\n\n다음 명령어를 사용하여 로그에 액세스하세요.\n\n```bash\nsudo dmesg | tail\n```\n\n그러면 원하는 시스템 콜 메시지가 출력된 것을 확인할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 성공적으로 수행했다면 축하드려요 🎉 좋아요와 댓글이 있다면 감사하겠습니다 :) 꼭 여러분의 이야기를 공유해 주세요 :D\n\n다시 한 번 아래 사항을 기억해 주세요:\n\n- 커널을 컴파일하는 데 많은 시간이 걸립니다.\n- 새로 컴파일한 커널은 상당한 용량을 차지하므로 저장 공간 확인이 필요합니다.\n- 리눅스 커널은 코드 변경이 빠르게 이뤄집니다.\n","ogImage":{"url":"/assets/img/2024-05-17-CreateCustomSystemCallonLinux68_0.png"},"coverImage":"/assets/img/2024-05-17-CreateCustomSystemCallonLinux68_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>여태껏 사용자 정의 시스템 호출을 만들어보고 싶으셨나요? 과제를 위해서든, 즐거움을 위해서든, 또는 커널에 대해 더 많이 배우기 위해서든, 시스템 호출은 우리 시스템에 대해 더 많이 알아갈 수 있는 멋진 방법입니다.</p>\n<h1>이 안내에 따를 이유는?</h1>\n<p>이 주제에 대한 다양한 안내서가 있지만, 커널 개발 속도의 문제 때문에 문제가 발생합니다. 대부분의 안내서들은 오래되었고 다양한 오류를 발생시키기 때문에, 저는 이 포스트를 오류를 경험하고 그것들을 해결한 후에 작성하게 되었습니다 :)</p>\n<h2>커널 컴파일을 위한 시스템 설정</h2>\n<p></p>\n<p>Red Hat / Fedora / Open Suse 기반 시스템에서는 아래와 같이 간편하게 실행할 수 있어요.</p>\n<pre><code class=\"hljs language-bash\">sudo dnf builddep kernel\nsudo dnf install kernel-devel\n</code></pre>\n<p>Debian / Ubuntu 기반 시스템에서는</p>\n<pre><code class=\"hljs language-bash\">sudo apt-get install build-essential vim git cscope libncurses-dev libssl-dev bison flex\n</code></pre>\n<p></p>\n<h2>커널 가져오기</h2>\n<p>커널 소스 트리를 복제하세요. 특히 6.8 브랜치를 복제할 것이지만, 지침은 커널 개발자가 프로세스를 변경할 때까지 최신 브랜치에서도 작동해야 합니다.</p>\n<pre><code class=\"hljs language-js\">git clone --depth=<span class=\"hljs-number\">1</span> --branch v6<span class=\"hljs-number\">.8</span> <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</span>\n</code></pre>\n<p>이상적으로, 복제된 버전은 현재 사용 중인 커널 버전과 같거나 더 높아야 합니다.</p>\n<p></p>\n<p>현재 커널 버전은 다음 명령어를 통해 확인할 수 있어요</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">uname</span> -r\n</code></pre>\n<h2>새로운 시스템 호출 생성</h2>\n<p>다음을 수행해주세요</p>\n<p></p>\n<pre><code class=\"hljs language-js\">cd linux\nmake mrproper\nmkdir hello\ncd hello\ntouch hello.<span class=\"hljs-property\">c</span>\ntouch <span class=\"hljs-title class_\">Makefile</span>\n</code></pre>\n<p>이 명령은 다운로드한 커널 소스 코드 내에 \"hello\"라는 폴더를 만들고, 그 안에 hello.c(시스템 호출 코드)와 Makefile(컴파일 규칙) 두 개의 파일을 생성합니다.</p>\n<p>좋아하는 텍스트 편집기에서 hello.c를 열고 다음 코드를 넣어주세요.</p>\n<pre><code class=\"hljs language-js\">#include &#x3C;linux/kernel.<span class=\"hljs-property\">h</span>>\n#include &#x3C;linux/syscalls.<span class=\"hljs-property\">h</span>>\n\n<span class=\"hljs-title function_\">SYSCALL_DEFINE0</span>(<span class=\"hljs-params\">hello</span>) {\n    <span class=\"hljs-title function_\">pr_info</span>(<span class=\"hljs-string\">\"Hello World\\n\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p></p>\n<p>커널 로그에 \"Hello World\"가 출력됩니다.</p>\n<p>우리는 단순히 프린트만 할 것이기 때문에 n=0을 사용합니다.</p>\n<p>이제 다음을 Makefile에 추가해주세요</p>\n<p>obj-y := hello.o</p>\n<p></p>\n<p>이제</p>\n<pre><code class=\"hljs language-js\">cd ..\ncd include/linux/\n</code></pre>\n<p>이 디렉토리 안에서 \"syscalls.h\" 파일을 열고 다음을 추가하세요.</p>\n<pre><code class=\"hljs language-js\">asmlinkage long <span class=\"hljs-title function_\">sys_hello</span>(<span class=\"hljs-keyword\">void</span>)\n</code></pre>\n<p></p>\n<p>이것은 이전에 만든 syscall 함수에 대한 프로토타입입니다.</p>\n<p>커널 루트 내의 \"Kbuild\" 파일을 열고 (cd ../..) 맨 아래에 다음을 추가하십시오.</p>\n<pre><code class=\"hljs language-js\">obj-y += hello/\n</code></pre>\n<p></p>\n<p>아래는 우리가 포함한 새 폴더도 컴파일하도록 커널 빌드 시스템에 지시합니다.</p>\n<p>이 작업이 완료되면, 아키텍처별 테이블에 시스콜 항목도 추가해 주어야 합니다.</p>\n<p>각 CPU 아키텍처는 특정 시스콜을 가질 수 있으며, 우리의 시스콜이 어떤 아키텍처를 위해 만들어졌는지 알려주어야 합니다.</p>\n<p></p>\n<p>x86_64 아키텍처에서 파일은</p>\n<pre><code class=\"hljs language-js\">arch / x86 / entry / syscalls / syscall_64.<span class=\"hljs-property\">tbl</span>;\n</code></pre>\n<p>빈번호를 사용하고 테이블 주석에서 금지된 번호를 사용하지 않도록 유의하여 시스콜 항목을 추가하세요.</p>\n<p>제가 사용 가능한 번호 중 462번이 비어 있어서 새 항목을 다음과 같이 추가했습니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-number\">462</span> 공통 안녕 sys_hello\n</code></pre>\n<p>여기서 462은 우리의 시스템 호출에 매핑되며 두 아키텍처에 대해 공통인 sys_hello로 명명된 hello 시스템 호출의 진입 함수(entry function)입니다.</p>\n<h2>새 커널을 컴파일하고 설치하기</h2>\n<p></p>\n<p>다음 명령을 실행하십시오.</p>\n<p>주의: 이 안내를 따르더라도 시스템의 안전, 보안, 무결성과 안정성을 보장하지 않습니다. 여기 나열된 모든 지침은 제 경험이며 귀하의 시스템에서의 결과를 대표하지 않습니다. 조심히 주의하여 진행하십시오.</p>\n<p>이제 법적인 부분은 끝냈으니, 계속해봅시다 ;)</p>\n<pre><code class=\"hljs language-js\">cp /boot/config-$(uname -r) .<span class=\"hljs-property\">config</span>\nmake olddefconfig\nmake -j $(nproc)\nsudo make -j $(nproc) modules_install\nsudo make install\n</code></pre>\n<p></p>\n<p>현재 부팅된 커널의 구성 파일을 복사하고, 빌드 시스템에 동일한 값을 사용하도록 요청하여 기본값을 설정합니다. 그런 다음 nproc에 의해 주어진 코어 수에 따라 병렬 처리를 사용하여 커널을 빌드합니다. 이후 사용자 정의 커널을 설치합니다 (자체 책임으로).</p>\n<p>커널 컴파일에는 많은 시간이 소요되므로 커피 한 잔 또는 10잔을 마시며 터미널에서 스크롤되는 텍스트 줄을 즐기세요.</p>\n<p>시스템 속도에 따라 몇 시간이 걸릴 수 있으므로 실제 소요 시간이 다를 수 있습니다. 이 단계에서 열이 치기도 할 수 있으니 온도를 확인하려면 팬이 소리를 지를 수도 있습니다 (내 경우에도 그렇었어요).</p>\n<h2>재미있는 부분, 새로운 시스템 호출 사용</h2>\n<p></p>\n<p>이제 시스템 호출이 우리의 커널에 통합되었으니 시스템을 재부팅하고 부팅 중에 grub에서 새로운 커스텀 커널을 선택해주세요</p>\n<p><img src=\"/assets/img/2024-05-17-CreateCustomSystemCallonLinux68_3.png\" alt=\"image\"></p>\n<p>부팅 후 시스템 호출을 사용하는 C 프로그램을 작성해봅시다.</p>\n<p>다음 내용을 가진 파일 \"test.c\"를 생성하세요.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">#include &#x3C;stdio.<span class=\"hljs-property\">h</span>>\n#include &#x3C;sys/syscall.<span class=\"hljs-property\">h</span>>\n#include &#x3C;unistd.<span class=\"hljs-property\">h</span>>\nint <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">void</span></span>) {\n  <span class=\"hljs-title function_\">printf</span>(<span class=\"hljs-string\">\"%ld\\n\"</span>, <span class=\"hljs-title function_\">syscall</span>(<span class=\"hljs-number\">462</span>));\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>당신이 테이블에서 시스템 콜에 대해 선택한 번호로 462을 대체하세요.</p>\n<p>프로그램을 컴파일하고 실행하세요.</p>\n<pre><code class=\"hljs language-js\">make test\nchmod +x test\n./test\n</code></pre>\n<p></p>\n<p>모두 정상적으로 진행되면, 터미널에서 \"0\"을 출력하고 시스콜 출력이 커널 로그에 표시됩니다.</p>\n<p>다음 명령어를 사용하여 로그에 액세스하세요.</p>\n<pre><code class=\"hljs language-bash\">sudo dmesg | <span class=\"hljs-built_in\">tail</span>\n</code></pre>\n<p>그러면 원하는 시스템 콜 메시지가 출력된 것을 확인할 수 있습니다.</p>\n<p></p>\n<p>만약 성공적으로 수행했다면 축하드려요 🎉 좋아요와 댓글이 있다면 감사하겠습니다 :) 꼭 여러분의 이야기를 공유해 주세요 :D</p>\n<p>다시 한 번 아래 사항을 기억해 주세요:</p>\n<ul>\n<li>커널을 컴파일하는 데 많은 시간이 걸립니다.</li>\n<li>새로 컴파일한 커널은 상당한 용량을 차지하므로 저장 공간 확인이 필요합니다.</li>\n<li>리눅스 커널은 코드 변경이 빠르게 이뤄집니다.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}