{"pageProps":{"post":{"title":"SwiftUI Photo Picker 앱을 PhotosUI로 만들기","description":"","date":"2024-05-27 16:26","slug":"2024-05-27-SwiftUIPhotoPickerAppwithPhotosUI","content":"\n![이미지](/assets/img/2024-05-27-SwiftUIPhotoPickerAppwithPhotosUI_0.png)\n\nSwiftUI와 PhotosUI는 iOS 앱에서 풍부하고 인터랙티브한 사용자 인터페이스를 만드는 강력한 도구를 제공합니다. 이 튜토리얼에서는 사용자가 사진 라이브러리에서 사진을 선택하고 표시할 수 있는 앱을 만들겠습니다.\n\n# 프로젝트 설정\n\n- Xcode를 열고 새 SwiftUI 프로젝트를 생성합니다.\n- 프로젝트의 이름을 지정합니다 (예: \"PhotoPickerApp\").\n- 사용자 인터페이스로 SwiftUI를 선택하고 프로그래밍 언어로 Swift를 선택해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 코드 설명\n\n## 단계 1: 필요한 프레임워크 가져오기\n\n```js\nimport SwiftUI\nimport PhotosUI\n```\n\n- SwiftUI: 사용자 인터페이스를 구축하기 위한 프레임워크입니다.\n- PhotosUI: 사진 및 비디오 선택 및 관리를 위한 프레임워크입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 2: 상태 변수 정의\n\n```js\nstruct ContentView: View {\n   @State private var selectedPhotos: [PhotosPickerItem] = []\n   @State private var images: [UIImage] = []\n   @State private var errorMessage: String?\n\n   // ... 나머지 코드\n}\n```\n\n- selectedPhotos: 선택된 사진 항목을 저장합니다.\n- images: 불러온 이미지를 저장합니다.\n- errorMessage: 발생한 오류 메시지를 저장합니다.\n\n## 단계 3: 메인 뷰 생성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\nvar body: some View {\n    VStack {\n        Form {\n            photoPickerSection\n            imagesSection\n        }\n        if let errorMessage = errorMessage {\n            Text(errorMessage)\n                .foregroundColor(.red)\n                .padding()\n        }\n    }\n}\n```\n\n- VStack: 폼과 에러 메시지를 포함합니다.\n- Form: 사진 선택기와 이미지를 위한 섹션을 포함합니다.\n\n## 단계 4: 사진 선택기 섹션 정의\n\n```swift\nprivate var photoPickerSection: some View {\n    Section {\n        PhotosPicker(selection: $selectedPhotos, maxSelectionCount: 3, matching: .images) {\n            Label(\"사진 선택\", systemImage: \"photo\")\n        }\n        .onChange(of: selectedPhotos) { _ in\n            loadSelectedPhotos()\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- PhotosPicker: 사진을 선택하는 UI 구성 요소입니다.\n- selection: `selectedPhotos`에 바인딩됩니다.\n- maxSelectionCount: 선택을 3개의 사진으로 제한합니다.\n- matching: 이미지로 제한된 선택을 합니다.\n- .onChange: `selectedPhotos`이 변경될 때 `loadSelectedPhotos`를 호출합니다.\n\n## 단계 5: 이미지 섹션 정의하기\n\n```js\nprivate var imagesSection: some View {\n    Section {\n        ForEach(images, id: \\.self) { image in\n            Image(uiImage: image)\n                .resizable()\n                .scaledToFit()\n                .frame(maxWidth: .infinity)\n                .clipShape(RoundedRectangle(cornerRadius: 10.0))\n                .padding(.vertical, 10)\n        }\n    }\n}\n```\n\n- ForEach: `images` 배열을 반복합니다.\n- Image(uiImage:): 각 이미지를 표시합니다.\n- .resizable(), .scaledToFit(), .frame(maxWidth: .infinity), .clipShape(), .padding(): 이미지를 스타일링합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 6: 선택한 사진 불러오기\n\n```js\nprivate func loadSelectedPhotos() {\n    images.removeAll()\n    errorMessage = nil\n\n    Task {\n        await withTaskGroup(of: (UIImage?, Error?).self) { taskGroup in\n            for photoItem in selectedPhotos {\n                taskGroup.addTask {\n                    do {\n                        if let imageData = try await photoItem.loadTransferable(type: Data.self),\n                           let image = UIImage(data: imageData) {\n                            return (image, nil)\n                        }\n                        return (nil, nil)\n                    } catch {\n                        return (nil, error)\n                    }\n                }\n            }\n\n            for await result in taskGroup {\n                if let error = result.1 {\n                    errorMessage = \"한 개 이상의 이미지를 불러오지 못했습니다.\"\n                    break\n                } else if let image = result.0 {\n                    images.append(image)\n                }\n            }\n        }\n    }\n}\n```\n\n- images.removeAll(): 기존 이미지를 지웁니다.\n- errorMessage = nil: 오류 메시지를 초기화합니다.\n- Task: 비동기 작업을 시작합니다.\n- withTaskGroup: 사진을 로드하는 동시 작업을 관리합니다.\n- photoItem.loadTransferable(type: Data.self): 사진 데이터를 로드합니다.\n- UIImage(data: imageData): 데이터를 `UIImage`로 변환합니다.\n- errorMessage: 오류 발생 시 업데이트됩니다.\n- images.append(image): 로드된 이미지를 배열에 추가합니다.\n\n## 단계 7: 뷰 미리보기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# Preview {\n    ContentView()\n}\n```\n\n- # Preview: Xcode 캔버스에서 `ContentView`를 미리 볼 수 있습니다.\n\n# 프로젝트 실행\n\n이제 프로젝트를 시뮬레이터나 실제 장치에 실행하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image](https://miro.medium.com/v2/resize:fit:720/1*AtvjZ8d79WvKb85R-jBVVg.gif)\n\n# 요약\n\n이 튜토리얼은 사용자가 사진을 선택하고 표시할 수 있는 SwiftUI 앱을 만드는 방법을 안내했습니다. 상태 관리, 비동기 작업 및 이미지 처리를 다루었습니다. 이 앱은 사진 편집, 저장 또는 공유와 같은 추가 기능으로 확장할 수 있습니다. SwiftUI와 PhotosUI를 활용하여 앱의 기능과 사용자 경험을 향상시켜 보세요.\n\n즐거운 코딩되세요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 완성된 코드\n\n이 저장소를 복제하거나 다운로드하여 완전한 코드를 확인하십시오.\n","ogImage":{"url":"/assets/img/2024-05-27-SwiftUIPhotoPickerAppwithPhotosUI_0.png"},"coverImage":"/assets/img/2024-05-27-SwiftUIPhotoPickerAppwithPhotosUI_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-SwiftUIPhotoPickerAppwithPhotosUI_0.png\" alt=\"이미지\"></p>\n<p>SwiftUI와 PhotosUI는 iOS 앱에서 풍부하고 인터랙티브한 사용자 인터페이스를 만드는 강력한 도구를 제공합니다. 이 튜토리얼에서는 사용자가 사진 라이브러리에서 사진을 선택하고 표시할 수 있는 앱을 만들겠습니다.</p>\n<h1>프로젝트 설정</h1>\n<ul>\n<li>Xcode를 열고 새 SwiftUI 프로젝트를 생성합니다.</li>\n<li>프로젝트의 이름을 지정합니다 (예: \"PhotoPickerApp\").</li>\n<li>사용자 인터페이스로 SwiftUI를 선택하고 프로그래밍 언어로 Swift를 선택해야 합니다.</li>\n</ul>\n<p></p>\n<h1>코드 설명</h1>\n<h2>단계 1: 필요한 프레임워크 가져오기</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SwiftUI</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">PhotosUI</span>\n</code></pre>\n<ul>\n<li>SwiftUI: 사용자 인터페이스를 구축하기 위한 프레임워크입니다.</li>\n<li>PhotosUI: 사진 및 비디오 선택 및 관리를 위한 프레임워크입니다.</li>\n</ul>\n<p></p>\n<h2>단계 2: 상태 변수 정의</h2>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n   @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">selectedPhotos</span>: [<span class=\"hljs-title class_\">PhotosPickerItem</span>] = []\n   @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">images</span>: [<span class=\"hljs-title class_\">UIImage</span>] = []\n   @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">errorMessage</span>: <span class=\"hljs-title class_\">String</span>?\n\n   <span class=\"hljs-comment\">// ... 나머지 코드</span>\n}\n</code></pre>\n<ul>\n<li>selectedPhotos: 선택된 사진 항목을 저장합니다.</li>\n<li>images: 불러온 이미지를 저장합니다.</li>\n<li>errorMessage: 발생한 오류 메시지를 저장합니다.</li>\n</ul>\n<h2>단계 3: 메인 뷰 생성</h2>\n<p></p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n    <span class=\"hljs-type\">VStack</span> {\n        <span class=\"hljs-type\">Form</span> {\n            photoPickerSection\n            imagesSection\n        }\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> errorMessage <span class=\"hljs-operator\">=</span> errorMessage {\n            <span class=\"hljs-type\">Text</span>(errorMessage)\n                .foregroundColor(.red)\n                .padding()\n        }\n    }\n}\n</code></pre>\n<ul>\n<li>VStack: 폼과 에러 메시지를 포함합니다.</li>\n<li>Form: 사진 선택기와 이미지를 위한 섹션을 포함합니다.</li>\n</ul>\n<h2>단계 4: 사진 선택기 섹션 정의</h2>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> photoPickerSection: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n    <span class=\"hljs-type\">Section</span> {\n        <span class=\"hljs-type\">PhotosPicker</span>(selection: <span class=\"hljs-variable\">$selectedPhotos</span>, maxSelectionCount: <span class=\"hljs-number\">3</span>, matching: .images) {\n            <span class=\"hljs-type\">Label</span>(<span class=\"hljs-string\">\"사진 선택\"</span>, systemImage: <span class=\"hljs-string\">\"photo\"</span>)\n        }\n        .onChange(of: selectedPhotos) { <span class=\"hljs-keyword\">_</span> <span class=\"hljs-keyword\">in</span>\n            loadSelectedPhotos()\n        }\n    }\n}\n</code></pre>\n<p></p>\n<ul>\n<li>PhotosPicker: 사진을 선택하는 UI 구성 요소입니다.</li>\n<li>selection: <code>selectedPhotos</code>에 바인딩됩니다.</li>\n<li>maxSelectionCount: 선택을 3개의 사진으로 제한합니다.</li>\n<li>matching: 이미지로 제한된 선택을 합니다.</li>\n<li>.onChange: <code>selectedPhotos</code>이 변경될 때 <code>loadSelectedPhotos</code>를 호출합니다.</li>\n</ul>\n<h2>단계 5: 이미지 섹션 정의하기</h2>\n<pre><code class=\"hljs language-js\">private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">imagesSection</span>: some <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-title class_\">Section</span> {\n        <span class=\"hljs-title class_\">ForEach</span>(images, <span class=\"hljs-attr\">id</span>: \\.<span class=\"hljs-property\">self</span>) { image <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-title class_\">Image</span>(<span class=\"hljs-attr\">uiImage</span>: image)\n                .<span class=\"hljs-title function_\">resizable</span>()\n                .<span class=\"hljs-title function_\">scaledToFit</span>()\n                .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">maxWidth</span>: .<span class=\"hljs-property\">infinity</span>)\n                .<span class=\"hljs-title function_\">clipShape</span>(<span class=\"hljs-title class_\">RoundedRectangle</span>(<span class=\"hljs-attr\">cornerRadius</span>: <span class=\"hljs-number\">10.0</span>))\n                .<span class=\"hljs-title function_\">padding</span>(.<span class=\"hljs-property\">vertical</span>, <span class=\"hljs-number\">10</span>)\n        }\n    }\n}\n</code></pre>\n<ul>\n<li>ForEach: <code>images</code> 배열을 반복합니다.</li>\n<li>Image(uiImage:): 각 이미지를 표시합니다.</li>\n<li>.resizable(), .scaledToFit(), .frame(maxWidth: .infinity), .clipShape(), .padding(): 이미지를 스타일링합니다.</li>\n</ul>\n<p></p>\n<h2>단계 6: 선택한 사진 불러오기</h2>\n<pre><code class=\"hljs language-js\">private func <span class=\"hljs-title function_\">loadSelectedPhotos</span>(<span class=\"hljs-params\"></span>) {\n    images.<span class=\"hljs-title function_\">removeAll</span>()\n    errorMessage = nil\n\n    <span class=\"hljs-title class_\">Task</span> {\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">withTaskGroup</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">of</span>: (UIImage?, <span class=\"hljs-built_in\">Error</span>?).self</span>) { taskGroup <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">for</span> photoItem <span class=\"hljs-keyword\">in</span> selectedPhotos {\n                taskGroup.<span class=\"hljs-property\">addTask</span> {\n                    <span class=\"hljs-keyword\">do</span> {\n                        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> imageData = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> photoItem.<span class=\"hljs-title function_\">loadTransferable</span>(<span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">Data</span>.<span class=\"hljs-property\">self</span>),\n                           <span class=\"hljs-keyword\">let</span> image = <span class=\"hljs-title class_\">UIImage</span>(<span class=\"hljs-attr\">data</span>: imageData) {\n                            <span class=\"hljs-keyword\">return</span> (image, nil)\n                        }\n                        <span class=\"hljs-keyword\">return</span> (nil, nil)\n                    } <span class=\"hljs-keyword\">catch</span> {\n                        <span class=\"hljs-keyword\">return</span> (nil, error)\n                    }\n                }\n            }\n\n            <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> result <span class=\"hljs-keyword\">in</span> taskGroup {\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> error = result<span class=\"hljs-number\">.1</span> {\n                    errorMessage = <span class=\"hljs-string\">\"한 개 이상의 이미지를 불러오지 못했습니다.\"</span>\n                    <span class=\"hljs-keyword\">break</span>\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> image = result<span class=\"hljs-number\">.0</span> {\n                    images.<span class=\"hljs-title function_\">append</span>(image)\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<ul>\n<li>images.removeAll(): 기존 이미지를 지웁니다.</li>\n<li>errorMessage = nil: 오류 메시지를 초기화합니다.</li>\n<li>Task: 비동기 작업을 시작합니다.</li>\n<li>withTaskGroup: 사진을 로드하는 동시 작업을 관리합니다.</li>\n<li>photoItem.loadTransferable(type: Data.self): 사진 데이터를 로드합니다.</li>\n<li>UIImage(data: imageData): 데이터를 <code>UIImage</code>로 변환합니다.</li>\n<li>errorMessage: 오류 발생 시 업데이트됩니다.</li>\n<li>images.append(image): 로드된 이미지를 배열에 추가합니다.</li>\n</ul>\n<h2>단계 7: 뷰 미리보기</h2>\n<p></p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">Preview</span> {\n    <span class=\"hljs-title class_\">ContentView</span>()\n}\n</code></pre>\n<ul>\n<li>\n<h1>Preview: Xcode 캔버스에서 <code>ContentView</code>를 미리 볼 수 있습니다.</h1>\n</li>\n</ul>\n<h1>프로젝트 실행</h1>\n<p>이제 프로젝트를 시뮬레이터나 실제 장치에 실행하세요.</p>\n<p></p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:720/1*AtvjZ8d79WvKb85R-jBVVg.gif\" alt=\"Image\"></p>\n<h1>요약</h1>\n<p>이 튜토리얼은 사용자가 사진을 선택하고 표시할 수 있는 SwiftUI 앱을 만드는 방법을 안내했습니다. 상태 관리, 비동기 작업 및 이미지 처리를 다루었습니다. 이 앱은 사진 편집, 저장 또는 공유와 같은 추가 기능으로 확장할 수 있습니다. SwiftUI와 PhotosUI를 활용하여 앱의 기능과 사용자 경험을 향상시켜 보세요.</p>\n<p>즐거운 코딩되세요!</p>\n<p></p>\n<h1>완성된 코드</h1>\n<p>이 저장소를 복제하거나 다운로드하여 완전한 코드를 확인하십시오.</p>\n</body>\n</html>\n"},"__N_SSG":true}