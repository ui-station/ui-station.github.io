{"pageProps":{"post":{"title":"스위프트UI MVVM  라우터","description":"","date":"2024-05-18 15:41","slug":"2024-05-18-SwiftUIMVVMRouter","content":"\n<img src=\"/assets/img/2024-05-18-SwiftUIMVVMRouter_0.png\" />\n\n# MVVM 및 Router 이해하기\n\nMVVM 아키텍처는 코드베이스를 세 가지 주요 구성 요소로 나눕니다.\n\n- Model: 데이터 및 비즈니스 로직을 나타냅니다.\n- View: 프레젠테이션 및 사용자 상호 작용을 처리합니다.\n- ViewModel: Model과 View 사이의 중간 역할을 수행하여 데이터 로직과 상태를 관리합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 라우터\n\n라우터는 응용 프로그램 내에서 다른 뷰나 화면 간의 탐색을 관리하는 역할을 합니다. 네비게이션 로직을 캡슐화하여 전환을 관리하고 관심사의 깔끔한 분리를 유지하기 쉽게 만듭니다.\n\n# SwiftUI에서 MVVM + 라우터 구현\n\n간단한 SwiftUI 앱을 만들어서 항목 목록을 가져와 표시하는 방법을 알아봅시다. 항목을 선택하면 해당 항목의 상세보기로 이동하는 기능을 구현해보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 모델\n\n아이템 모델은 id와 이름을 가진 기본 데이터 구조를 나타냅니다.\n\n```swift\nstruct Item: Identifiable {\n    let id: UUID\n    let name: String\n}\n```\n\n아이템 구조체는 간단합니다. id와 이름을 가진 아이템을 정의합니다. 이 모델은 앱 전반에서 사용되는 핵심 데이터 구조를 나타냅니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## ViewModel\n\nItemViewModel은 항목을 가져오고 뷰에 노출하는 역할을 합니다.\n\n```swift\nclass ItemViewModel: ObservableObject {\n    @Published var items: [Item] = []\n\n    func fetchItems() {\n        // 원격 서버에서 항목을 가져오는 것을 모방\n        self.items = [\n            Item(id: UUID(), name: \"항목 1\"),\n            Item(id: UUID(), name: \"항목 2\"),\n            Item(id: UUID(), name: \"항목 3\")\n        ]\n    }\n}\n```\n\nItemViewModel 클래스는 데이터를 가져오는 로직을 처리합니다. @Published 프로퍼티 래퍼를 사용하여 SwiftUI 뷰가 항목 배열이 변경될 때 반응적으로 업데이트되도록합니다. 실제 애플리케이션에서는 네트워크 요청이나 데이터베이스에서 데이터를 가져올 수 있지만 여기서는 간단함을 위해 더미 데이터를 채웁니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 라우터\n\n라우터 클래스는 현재 네비게이션 상태를 관리합니다.\n\n```js\nenum AppRoute {\n    case itemList\n    case itemDetail(Item)\n}\n\nclass Router: ObservableObject {\n    @Published var currentRoute: AppRoute?\n\n    func navigateToItemDetail(_ item: Item) {\n        currentRoute = .itemDetail(item)\n    }\n\n    func navigateToItemList() {\n        currentRoute = .itemList\n    }\n}\n```\n\n라우터 클래스는 앱의 네비게이션 상태를 관리합니다. @Published 속성을 사용하여 뷰가 네비게이션 변경에 반응할 수 있습니다. navigateToItemDetail 및 navigateToItemList 메서드는 현재 경로를 업데이트하고 적절한 뷰가 표시됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 화면\n\n아이템 목록 뷰\n아이템 목록 뷰는 아이템 목록을 표시하고, 아이템을 선택하면 상세 뷰로 이동합니다.\n\n```swift\nstruct ItemListView: View {\n    @ObservedObject var viewModel: ItemViewModel\n    @EnvironmentObject var router: Router\n\n    var body: some View {\n        List(viewModel.items) { item in\n            Button(action: {\n                router.navigateToItemDetail(item)\n            }) {\n                Text(item.name)\n            }\n        }\n        .onAppear {\n            viewModel.fetchItems()\n        }\n        .navigationTitle(\"Items\")\n    }\n}\n```\n\n아이템 목록 뷰는 ItemViewModel이 가져온 아이템 목록을 표시합니다. 각각의 아이템은 탭되면 상세 뷰로 이동하는 Button으로 둘러싸여 있습니다. 화면이 나타날 때도 onAppear 수정자를 사용하여 아이템을 가져옵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아이템 상세보기\n아이템 상세보기는 선택된 항목의 세부 정보를 표시하고 목록 보기로 돌아가는 버튼을 제공합니다.\n\n```js\nstruct ItemDetailView: View {\n    let item: Item\n    @EnvironmentObject var router: Router\n\n    var body: some View {\n        VStack {\n            Text(item.name)\n                .font(.largeTitle)\n            Spacer()\n            Button(\"목록으로\") {\n                router.navigateToItemList()\n            }\n            .padding()\n        }\n        .navigationTitle(\"아이템 상세\")\n    }\n}\n```\n\n아이템 상세보기 화면은 선택된 항목의 세부 정보를 보여주며, 아이템 목록으로 이동할 수 있는 버튼이 포함되어 있습니다. 이 화면은 @EnvironmentObject를 사용하여 라우터에 액세스하여 탐색 작업을 수행합니다.\n\n컨텐츠뷰\n컨텐츠뷰는 현재 경로에 따라 아이템 목록 뷰와 아이템 상세보기 뷰 간의 탐색을 관리하는 주요 진입점 역할을 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\nstruct ContentView: View {\n    @StateObject var itemViewModel = ItemViewModel()\n    @StateObject var router = Router()\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                switch router.currentRoute {\n                case .none, .some(.itemList):\n                    ItemListView(viewModel: itemViewModel)\n                        .environmentObject(router)\n                case .some(.itemDetail(let item)):\n                    ItemDetailView(item: item)\n                        .environmentObject(router)\n                }\n            }\n        }\n        .onAppear {\n            router.navigateToItemList()\n        }\n    }\n}\n```\n\nContentView은 현재 라우터가 관리하는 현재 경로에 따라 탐색을 조율하는 주요 뷰입니다. 뷰 모델과 라우터를 초기화하고, switch 문을 사용하여 표시할 뷰를 결정합니다.\n\nMVVM 및 라우터를 SwiftUI에서 구현함으로써, 잘 구조화되고 유지보수 가능한 코드베이스를 달성할 수 있습니다. 역할 분리를 통해 각 구성 요소가 명확한 책임을 갖도록하여 코드를 이해하기 쉽고 확장하기 쉽게 만듭니다. 이 아키텍처는 상태 및 탐색을 관리하기 어려운 복잡한 애플리케이션에 특히 유용합니다.\n\n이 예시는 더 복잡한 시나리오에 맞게 확장할 수 있는 기초적인 접근 방식을 제공하여 SwiftUI 프로젝트가 확장 가능하고 견고하게 유지될 수 있도록 보장합니다.\n","ogImage":{"url":"/assets/img/2024-05-18-SwiftUIMVVMRouter_0.png"},"coverImage":"/assets/img/2024-05-18-SwiftUIMVVMRouter_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>MVVM 및 Router 이해하기</h1>\n<p>MVVM 아키텍처는 코드베이스를 세 가지 주요 구성 요소로 나눕니다.</p>\n<ul>\n<li>Model: 데이터 및 비즈니스 로직을 나타냅니다.</li>\n<li>View: 프레젠테이션 및 사용자 상호 작용을 처리합니다.</li>\n<li>ViewModel: Model과 View 사이의 중간 역할을 수행하여 데이터 로직과 상태를 관리합니다.</li>\n</ul>\n<p></p>\n<h1>라우터</h1>\n<p>라우터는 응용 프로그램 내에서 다른 뷰나 화면 간의 탐색을 관리하는 역할을 합니다. 네비게이션 로직을 캡슐화하여 전환을 관리하고 관심사의 깔끔한 분리를 유지하기 쉽게 만듭니다.</p>\n<h1>SwiftUI에서 MVVM + 라우터 구현</h1>\n<p>간단한 SwiftUI 앱을 만들어서 항목 목록을 가져와 표시하는 방법을 알아봅시다. 항목을 선택하면 해당 항목의 상세보기로 이동하는 기능을 구현해보겠습니다.</p>\n<p></p>\n<h2>모델</h2>\n<p>아이템 모델은 id와 이름을 가진 기본 데이터 구조를 나타냅니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span>: <span class=\"hljs-title class_\">Identifiable</span> {\n    <span class=\"hljs-keyword\">let</span> id: <span class=\"hljs-type\">UUID</span>\n    <span class=\"hljs-keyword\">let</span> name: <span class=\"hljs-type\">String</span>\n}\n</code></pre>\n<p>아이템 구조체는 간단합니다. id와 이름을 가진 아이템을 정의합니다. 이 모델은 앱 전반에서 사용되는 핵심 데이터 구조를 나타냅니다.</p>\n<p></p>\n<h2>ViewModel</h2>\n<p>ItemViewModel은 항목을 가져오고 뷰에 노출하는 역할을 합니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ItemViewModel</span>: <span class=\"hljs-title class_\">ObservableObject</span> {\n    <span class=\"hljs-meta\">@Published</span> <span class=\"hljs-keyword\">var</span> items: [<span class=\"hljs-type\">Item</span>] <span class=\"hljs-operator\">=</span> []\n\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">fetchItems</span>() {\n        <span class=\"hljs-comment\">// 원격 서버에서 항목을 가져오는 것을 모방</span>\n        <span class=\"hljs-keyword\">self</span>.items <span class=\"hljs-operator\">=</span> [\n            <span class=\"hljs-type\">Item</span>(id: <span class=\"hljs-type\">UUID</span>(), name: <span class=\"hljs-string\">\"항목 1\"</span>),\n            <span class=\"hljs-type\">Item</span>(id: <span class=\"hljs-type\">UUID</span>(), name: <span class=\"hljs-string\">\"항목 2\"</span>),\n            <span class=\"hljs-type\">Item</span>(id: <span class=\"hljs-type\">UUID</span>(), name: <span class=\"hljs-string\">\"항목 3\"</span>)\n        ]\n    }\n}\n</code></pre>\n<p>ItemViewModel 클래스는 데이터를 가져오는 로직을 처리합니다. @Published 프로퍼티 래퍼를 사용하여 SwiftUI 뷰가 항목 배열이 변경될 때 반응적으로 업데이트되도록합니다. 실제 애플리케이션에서는 네트워크 요청이나 데이터베이스에서 데이터를 가져올 수 있지만 여기서는 간단함을 위해 더미 데이터를 채웁니다.</p>\n<p></p>\n<h2>라우터</h2>\n<p>라우터 클래스는 현재 네비게이션 상태를 관리합니다.</p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-title class_\">AppRoute</span> {\n    <span class=\"hljs-keyword\">case</span> itemList\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">itemDetail</span>(<span class=\"hljs-title class_\">Item</span>)\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Router</span>: <span class=\"hljs-title class_\">ObservableObject</span> {\n    @<span class=\"hljs-title class_\">Published</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">currentRoute</span>: <span class=\"hljs-title class_\">AppRoute</span>?\n\n    func <span class=\"hljs-title function_\">navigateToItemDetail</span>(<span class=\"hljs-params\">_ item: Item</span>) {\n        currentRoute = .<span class=\"hljs-title function_\">itemDetail</span>(item)\n    }\n\n    func <span class=\"hljs-title function_\">navigateToItemList</span>(<span class=\"hljs-params\"></span>) {\n        currentRoute = .<span class=\"hljs-property\">itemList</span>\n    }\n}\n</code></pre>\n<p>라우터 클래스는 앱의 네비게이션 상태를 관리합니다. @Published 속성을 사용하여 뷰가 네비게이션 변경에 반응할 수 있습니다. navigateToItemDetail 및 navigateToItemList 메서드는 현재 경로를 업데이트하고 적절한 뷰가 표시됩니다.</p>\n<p></p>\n<h2>화면</h2>\n<p>아이템 목록 뷰\n아이템 목록 뷰는 아이템 목록을 표시하고, 아이템을 선택하면 상세 뷰로 이동합니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ItemListView</span>: <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-meta\">@ObservedObject</span> <span class=\"hljs-keyword\">var</span> viewModel: <span class=\"hljs-type\">ItemViewModel</span>\n    <span class=\"hljs-meta\">@EnvironmentObject</span> <span class=\"hljs-keyword\">var</span> router: <span class=\"hljs-type\">Router</span>\n\n    <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n        <span class=\"hljs-type\">List</span>(viewModel.items) { item <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-type\">Button</span>(action: {\n                router.navigateToItemDetail(item)\n            }) {\n                <span class=\"hljs-type\">Text</span>(item.name)\n            }\n        }\n        .onAppear {\n            viewModel.fetchItems()\n        }\n        .navigationTitle(<span class=\"hljs-string\">\"Items\"</span>)\n    }\n}\n</code></pre>\n<p>아이템 목록 뷰는 ItemViewModel이 가져온 아이템 목록을 표시합니다. 각각의 아이템은 탭되면 상세 뷰로 이동하는 Button으로 둘러싸여 있습니다. 화면이 나타날 때도 onAppear 수정자를 사용하여 아이템을 가져옵니다.</p>\n<p></p>\n<p>아이템 상세보기\n아이템 상세보기는 선택된 항목의 세부 정보를 표시하고 목록 보기로 돌아가는 버튼을 제공합니다.</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">ItemDetailView</span>: <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">item</span>: <span class=\"hljs-title class_\">Item</span>\n    @<span class=\"hljs-title class_\">EnvironmentObject</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">router</span>: <span class=\"hljs-title class_\">Router</span>\n\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">VStack</span> {\n            <span class=\"hljs-title class_\">Text</span>(item.<span class=\"hljs-property\">name</span>)\n                .<span class=\"hljs-title function_\">font</span>(.<span class=\"hljs-property\">largeTitle</span>)\n            <span class=\"hljs-title class_\">Spacer</span>()\n            <span class=\"hljs-title class_\">Button</span>(<span class=\"hljs-string\">\"목록으로\"</span>) {\n                router.<span class=\"hljs-title function_\">navigateToItemList</span>()\n            }\n            .<span class=\"hljs-title function_\">padding</span>()\n        }\n        .<span class=\"hljs-title function_\">navigationTitle</span>(<span class=\"hljs-string\">\"아이템 상세\"</span>)\n    }\n}\n</code></pre>\n<p>아이템 상세보기 화면은 선택된 항목의 세부 정보를 보여주며, 아이템 목록으로 이동할 수 있는 버튼이 포함되어 있습니다. 이 화면은 @EnvironmentObject를 사용하여 라우터에 액세스하여 탐색 작업을 수행합니다.</p>\n<p>컨텐츠뷰\n컨텐츠뷰는 현재 경로에 따라 아이템 목록 뷰와 아이템 상세보기 뷰 간의 탐색을 관리하는 주요 진입점 역할을 합니다.</p>\n<p></p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-meta\">@StateObject</span> <span class=\"hljs-keyword\">var</span> itemViewModel <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">ItemViewModel</span>()\n    <span class=\"hljs-meta\">@StateObject</span> <span class=\"hljs-keyword\">var</span> router <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Router</span>()\n\n    <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n        <span class=\"hljs-type\">NavigationView</span> {\n            <span class=\"hljs-type\">VStack</span> {\n                <span class=\"hljs-keyword\">switch</span> router.currentRoute {\n                <span class=\"hljs-keyword\">case</span> .none, .some(.itemList):\n                    <span class=\"hljs-type\">ItemListView</span>(viewModel: itemViewModel)\n                        .environmentObject(router)\n                <span class=\"hljs-keyword\">case</span> .some(.itemDetail(<span class=\"hljs-keyword\">let</span> item)):\n                    <span class=\"hljs-type\">ItemDetailView</span>(item: item)\n                        .environmentObject(router)\n                }\n            }\n        }\n        .onAppear {\n            router.navigateToItemList()\n        }\n    }\n}\n</code></pre>\n<p>ContentView은 현재 라우터가 관리하는 현재 경로에 따라 탐색을 조율하는 주요 뷰입니다. 뷰 모델과 라우터를 초기화하고, switch 문을 사용하여 표시할 뷰를 결정합니다.</p>\n<p>MVVM 및 라우터를 SwiftUI에서 구현함으로써, 잘 구조화되고 유지보수 가능한 코드베이스를 달성할 수 있습니다. 역할 분리를 통해 각 구성 요소가 명확한 책임을 갖도록하여 코드를 이해하기 쉽고 확장하기 쉽게 만듭니다. 이 아키텍처는 상태 및 탐색을 관리하기 어려운 복잡한 애플리케이션에 특히 유용합니다.</p>\n<p>이 예시는 더 복잡한 시나리오에 맞게 확장할 수 있는 기초적인 접근 방식을 제공하여 SwiftUI 프로젝트가 확장 가능하고 견고하게 유지될 수 있도록 보장합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}