{"pageProps":{"post":{"title":"2024년에 유용할 고급 Shell 스크립팅 명령어 9선","description":"","date":"2024-06-22 23:42","slug":"2024-06-22-AdvancedShellScriptingCommandsthatcanbehelpfulin2024","content":"\n![이미지](/assets/img/2024-06-22-AdvancedShellScriptingCommandsthatcanbehelpfulin2024_0.png)\n\n안녕하세요! 저는 최근 회사에서 일하는 동안 일반 업무 외에도 쉘 스크립팅을 사용하여 도구를 만들었습니다.\n\n쉘의 구문은 다른 프로그래밍 언어와 비교했을 때 약간 복잡하여 이해하고 구현하기가 조금 어렵지만, 쉘 스크립팅은 자동화를 위한 다양한 용도로 사용됩니다. 쉘 스크립팅을 공부하면서 얻은 지식으로 매우 만족스럽습니다.\n\n다음은 제가 사용하고 코딩하는 동안 도움이 된 일련의 명령어입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- grep: 쉘 스크립팅에서 사용되는 매우 유용한 명령어로, 파일에서 패턴이나 정규 표현식을 찾아 해당 grep이 제공하는 옵션에 따라 출력을 내용에 맞게 얻을 수 있습니다.\n\n```js\ngrep [options] pattern filename\n```\n\n일부 옵션은 다음과 같습니다:-\n\n- c: 이 옵션은 파일에서 패턴을 포함하는 일치하는 행의 수를 세는데 사용됩니다. 예를 들어 grep -c “hello” sample.txt\n- -l: 이 옵션은 해당 패턴을 포함하는 행을 출력합니다. 예를 들어 grep -l “finding” commentsTracker.sh\n- -i: 이 옵션은 대소문자를 구별하지 않고 파일 내에서 검색하므로 해당 단어의 어떤 형태든 검색됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. mailx: 리눅스에서 자동화된 작업에서 메일을 보내는 데 사용됩니다. 우리의 경우에는 특정 시나리오 하에서 mailx를 사용하여 메일을 보내는 것이 상당히 유용했어요.\n\n```sh\necho -e \"내용\" | mailx -s \"제목\" -r 발신자 수신자1 수신자2\n```\n\n여기서 내용을 우리가 원하는 본문 내용으로, 제목을 이메일 본문의 제목으로 대체할 수 있어요.\n\nmailx를 사용하면 -c를 사용하여 참조 메일 수신자도 추가할 수 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\necho -e \"내용\" | mailx -s \"제목\" -r 발신자 -c 참조사용자1,참조사용자2,참조사용자3 수신자1 수신자2\n```\n\n여기서 우리는 참조 사용자 ccuser1, ccuser2, ccuser3과 수신자1 및 수신자2가 메일 수신함에 있을 사용자 세 명을 가지고 있음을 볼 수 있습니다.\n이 기능은 매우 흥미로운 것입니다.\n\n3. ` :- 이 파일에 데이터를 쓰는 데 사용됩니다. 데이터가 이미 존재하는 경우 데이터가 덮어쓰여집니다.\n\n파일이 없으면 파일이 만들어집니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\necho \"Hello Medium\" > file.txt\n```\n\nfile.txt:- Hello Medium\n\n` :- On the other hand, this appends data to the file instead of overwriting it.\n\n```js\necho \"Adding this text\" >> file.txt\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 내용을 Markdown 형식으로 변경해보세요.\n\n파일.txt: - 안녕하세요 Medium. 이 텍스트를 추가합니다.\n\n4. \\**: - *검색할 문자열을 사용할 수 있습니다.\\*\n\n예: search_string = \"어디에 있나요\"\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예를 들어, 변수인 description에 정확한 문자열 search_string1을 포함하는 문자열에서 이 연산자를 사용하여 문자열을 검색할 수 있습니다. 정확히 동일한 문자열을 검색하므로 공백도 문제가 될 수 있습니다.\n\n```js\nif [[ $description == *\"$search_string1\"* ]]; then\n      echo \"description에 search_string1이 있습니다.\"\n```\n\n5. =~:- =~를 사용하여 지정된 문자열에서 부분 문자열을 일치시킬 수 있고, 해당 문자열에 부분 문자열이 있는지 확인할 수 있습니다.\n\n```js\nif [[ $variable =~ YES|Yes|Y ]]; then\n  echo \"변수에 YES 또는 Yes 또는 Y 부분 문자열이 포함되어 있습니다.\"\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기 지정된 문자열을 검색할 때 사용자에게 정말 편리합니다.\n\n6. Export:- 이 명령은 변수를 내보내어 후속 프로세스가 나중에 액세스할 수 있도록 하는 데 사용됩니다.\n\n```js\nexport BATCH_DATE=\"29042001\"\n```\n\n예를 들어 셸 스크립트에서 BATCH_DATE를 내보내고 나중에이 셸 스크립트가 호출한 파일 내에서 액세스합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\necho $BATCH_DATE\n\n일반적으로 코드 내에서 변수 condition을 내보내고 사용하고 싶을 때 사용됩니다.\n\n이 글에서 무언가를 얻었다면 좋아요와 댓글 부탁드립니다. 이는 제가 더 많은 유용한 글을 작성할 자극이 됩니다.\n\nLinkedIn에서 저와 연결하고 팔로우해주세요: https://www.linkedin.com/in/devendu-negi-142b6618b/\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제 YouTube 채널을 한 번 둘러보시는 것을 고려해 주시면 좋겠어요! 저는 힌디어로 콘텐츠를 올리고 있으며 일상 명언의 짧은 영상도 함께 제작하고 있어요.\n\nhttps://www.youtube.com/channel/UCaGvN7VhqTRa9sCHxcgJ-Pw\n\n누군가가 DSA에 대해 1대1로 안내를 받고 싶다면 topmate에서 저와 연락할 수 있어요: https://topmate.io/devendu_negi/\n\n커피 한 잔 사주시면 감사하겠어요!\nhttps://buymeacoffee.com/devendunegi\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 내 다른 글들이 당신의 소프트웨어 엔지니어링 여정에 가치를 더했다면, 더 많은 글을 보기 위해 내 계정을 팔로우해보세요.\n\n코딩을 즐기며, 당신의 목표를 이루길 바라요 :)\n","ogImage":{"url":"/assets/img/2024-06-22-AdvancedShellScriptingCommandsthatcanbehelpfulin2024_0.png"},"coverImage":"/assets/img/2024-06-22-AdvancedShellScriptingCommandsthatcanbehelpfulin2024_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-AdvancedShellScriptingCommandsthatcanbehelpfulin2024_0.png\" alt=\"이미지\"></p>\n<p>안녕하세요! 저는 최근 회사에서 일하는 동안 일반 업무 외에도 쉘 스크립팅을 사용하여 도구를 만들었습니다.</p>\n<p>쉘의 구문은 다른 프로그래밍 언어와 비교했을 때 약간 복잡하여 이해하고 구현하기가 조금 어렵지만, 쉘 스크립팅은 자동화를 위한 다양한 용도로 사용됩니다. 쉘 스크립팅을 공부하면서 얻은 지식으로 매우 만족스럽습니다.</p>\n<p>다음은 제가 사용하고 코딩하는 동안 도움이 된 일련의 명령어입니다.</p>\n<p></p>\n<ul>\n<li>grep: 쉘 스크립팅에서 사용되는 매우 유용한 명령어로, 파일에서 패턴이나 정규 표현식을 찾아 해당 grep이 제공하는 옵션에 따라 출력을 내용에 맞게 얻을 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">grep [options] pattern filename\n</code></pre>\n<p>일부 옵션은 다음과 같습니다:-</p>\n<ul>\n<li>c: 이 옵션은 파일에서 패턴을 포함하는 일치하는 행의 수를 세는데 사용됩니다. 예를 들어 grep -c “hello” sample.txt</li>\n<li>-l: 이 옵션은 해당 패턴을 포함하는 행을 출력합니다. 예를 들어 grep -l “finding” commentsTracker.sh</li>\n<li>-i: 이 옵션은 대소문자를 구별하지 않고 파일 내에서 검색하므로 해당 단어의 어떤 형태든 검색됩니다.</li>\n</ul>\n<p></p>\n<ol start=\"2\">\n<li>mailx: 리눅스에서 자동화된 작업에서 메일을 보내는 데 사용됩니다. 우리의 경우에는 특정 시나리오 하에서 mailx를 사용하여 메일을 보내는 것이 상당히 유용했어요.</li>\n</ol>\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"내용\"</span> | mailx -s <span class=\"hljs-string\">\"제목\"</span> -r 발신자 수신자1 수신자2\n</code></pre>\n<p>여기서 내용을 우리가 원하는 본문 내용으로, 제목을 이메일 본문의 제목으로 대체할 수 있어요.</p>\n<p>mailx를 사용하면 -c를 사용하여 참조 메일 수신자도 추가할 수 있어요.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">echo -e <span class=\"hljs-string\">\"내용\"</span> | mailx -s <span class=\"hljs-string\">\"제목\"</span> -r 발신자 -c 참조사용자<span class=\"hljs-number\">1</span>,참조사용자<span class=\"hljs-number\">2</span>,참조사용자<span class=\"hljs-number\">3</span> 수신자<span class=\"hljs-number\">1</span> 수신자<span class=\"hljs-number\">2</span>\n</code></pre>\n<p>여기서 우리는 참조 사용자 ccuser1, ccuser2, ccuser3과 수신자1 및 수신자2가 메일 수신함에 있을 사용자 세 명을 가지고 있음을 볼 수 있습니다.\n이 기능은 매우 흥미로운 것입니다.</p>\n<ol start=\"3\">\n<li>` :- 이 파일에 데이터를 쓰는 데 사용됩니다. 데이터가 이미 존재하는 경우 데이터가 덮어쓰여집니다.</li>\n</ol>\n<p>파일이 없으면 파일이 만들어집니다.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">echo <span class=\"hljs-string\">\"Hello Medium\"</span> > file.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<p>file.txt:- Hello Medium</p>\n<p>` :- On the other hand, this appends data to the file instead of overwriting it.</p>\n<pre><code class=\"hljs language-js\">echo <span class=\"hljs-string\">\"Adding this text\"</span> >> file.<span class=\"hljs-property\">txt</span>\n</code></pre>\n<p></p>\n<p>아래 내용을 Markdown 형식으로 변경해보세요.</p>\n<p>파일.txt: - 안녕하세요 Medium. 이 텍스트를 추가합니다.</p>\n<ol start=\"4\">\n<li>**: - *검색할 문자열을 사용할 수 있습니다.*</li>\n</ol>\n<p>예: search_string = \"어디에 있나요\"</p>\n<p></p>\n<p>예를 들어, 변수인 description에 정확한 문자열 search_string1을 포함하는 문자열에서 이 연산자를 사용하여 문자열을 검색할 수 있습니다. 정확히 동일한 문자열을 검색하므로 공백도 문제가 될 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> [[ $description == *<span class=\"hljs-string\">\"$search_string1\"</span>* ]]; then\n      echo <span class=\"hljs-string\">\"description에 search_string1이 있습니다.\"</span>\n</code></pre>\n<ol start=\"5\">\n<li>=~:- =~를 사용하여 지정된 문자열에서 부분 문자열을 일치시킬 수 있고, 해당 문자열에 부분 문자열이 있는지 확인할 수 있습니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> [[ $variable =~ <span class=\"hljs-variable constant_\">YES</span>|<span class=\"hljs-title class_\">Yes</span>|Y ]]; then\n  echo <span class=\"hljs-string\">\"변수에 YES 또는 Yes 또는 Y 부분 문자열이 포함되어 있습니다.\"</span>\n</code></pre>\n<p></p>\n<p>여기 지정된 문자열을 검색할 때 사용자에게 정말 편리합니다.</p>\n<ol start=\"6\">\n<li>Export:- 이 명령은 변수를 내보내어 후속 프로세스가 나중에 액세스할 수 있도록 하는 데 사용됩니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-variable constant_\">BATCH_DATE</span>=<span class=\"hljs-string\">\"29042001\"</span>\n</code></pre>\n<p>예를 들어 셸 스크립트에서 BATCH_DATE를 내보내고 나중에이 셸 스크립트가 호출한 파일 내에서 액세스합니다.</p>\n<p></p>\n<p>echo $BATCH_DATE</p>\n<p>일반적으로 코드 내에서 변수 condition을 내보내고 사용하고 싶을 때 사용됩니다.</p>\n<p>이 글에서 무언가를 얻었다면 좋아요와 댓글 부탁드립니다. 이는 제가 더 많은 유용한 글을 작성할 자극이 됩니다.</p>\n<p>LinkedIn에서 저와 연결하고 팔로우해주세요: <a href=\"https://www.linkedin.com/in/devendu-negi-142b6618b/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/devendu-negi-142b6618b/</a></p>\n<p></p>\n<p>제 YouTube 채널을 한 번 둘러보시는 것을 고려해 주시면 좋겠어요! 저는 힌디어로 콘텐츠를 올리고 있으며 일상 명언의 짧은 영상도 함께 제작하고 있어요.</p>\n<p><a href=\"https://www.youtube.com/channel/UCaGvN7VhqTRa9sCHxcgJ-Pw\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/channel/UCaGvN7VhqTRa9sCHxcgJ-Pw</a></p>\n<p>누군가가 DSA에 대해 1대1로 안내를 받고 싶다면 topmate에서 저와 연락할 수 있어요: <a href=\"https://topmate.io/devendu_negi/\" rel=\"nofollow\" target=\"_blank\">https://topmate.io/devendu_negi/</a></p>\n<p>커피 한 잔 사주시면 감사하겠어요!\n<a href=\"https://buymeacoffee.com/devendunegi\" rel=\"nofollow\" target=\"_blank\">https://buymeacoffee.com/devendunegi</a></p>\n<p></p>\n<p>만약 내 다른 글들이 당신의 소프트웨어 엔지니어링 여정에 가치를 더했다면, 더 많은 글을 보기 위해 내 계정을 팔로우해보세요.</p>\n<p>코딩을 즐기며, 당신의 목표를 이루길 바라요 :)</p>\n</body>\n</html>\n"},"__N_SSG":true}