{"pageProps":{"post":{"title":"Terraform과 PEM 키를 사용하여 EC2 인스턴스 및 SSH 접근 설정 방법","description":"","date":"2024-06-23 00:22","slug":"2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey","content":"\n이 안내서는 PEM 키를 사용하여 SSH 액세스가 설정된 Terraform을 사용하여 EC2 인스턴스를 생성하는 데 도움이 될 것입니다.\n\n## 아키텍처 개요\n\n설치에는 다음이 포함됩니다:\n\n- 서브넷과 인터넷 게이트웨이가 있는 VPC.\n- EC2 인스턴스.\n- SSH 액세스용 보안 그룹.\n- 라우팅 테이블.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# AWS 자격 증명 구성\n\nAWS CLI 설치: AWS CLI를 아직 설치하지 않았다면 여기에서 다운로드하여 설치할 수 있습니다.\n\nAWS CLI 구성: 아래 명령을 실행하여 AWS 자격 증명을 구성하세요. 이를 통해 Terraform이 사용할 필요한 구성 파일을 설정합니다.\n\n```js\naws configure\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음과 같이 자격 증명을 입력해주세요:\n\n```js\nAWS Access Key ID [None]: <당신의 AWS 액세스 키 ID>\nAWS Secret Access Key [None]: <당신의 AWS Secret 액세스 키>\nDefault region name [None]: us-west-2\nDefault output format [None]: json\n```\n\n설정 확인: 설정을 완료한 후에는 다음 명령어를 실행하여 설정을 확인하세요:\n\n```js\naws sts get-caller-identity\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 명령은 IAM 사용자에 대한 세부 정보가 포함된 JSON 응답을 반환해야 합니다.\n\n# 디렉토리 구조 설정하기\n\n터미널을 열고 다음과 같이 메인 디렉토리를 생성하세요:\n\n```shell\nmkdir terraform_project\ncd terraform_project\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모듈을 위한 하위 디렉토리를 생성해주세요:\n\n```bash\nmkdir ec2_setup\ncd ec2_setup\n```\n\n필요한 Terraform 파일을 생성해주세요:\n\n```bash\ntouch main.tf variables.tf vpc.tf subnet.tf security_group.tf ec2.tf internet_gateway.tf route_table.tf key_pair.tf\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파일이 생성되었는지 확인하기 위해 파일 목록을 나열해보세요:\n\n```js\nls;\n```\n\n## 구성 시작\n\n## 1. 제공자 정의\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nmain.tf 파일에서 공급업체를 설정하십시오:\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.18\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n```\n\n## 2. 입력 변수 정의\n\nvariables.tf 파일에서 변수를 정의하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nvariable \"ssh_key_name\" {\n  description = \"SSH 키 쌍의 이름\"\n  type        = string\n}\n\nvariable \"ec2_instance_type\" {\n  description = \"EC2 인스턴스의 유형\"\n  type        = string\n}\n\nvariable \"ec2_instance_tag\" {\n  description = \"EC2 인스턴스를 위한 태그\"\n  type        = string\n}\n\nvariable \"instance_count\" {\n  description = \"생성할 인스턴스 수\"\n  type        = number\n}\n\nvariable \"private_key_file\" {\n  description = \"개인 키 파일의 이름\"\n  type        = string\n}\n\nvariable \"vpc_cidr_block\" {\n  description = \"VPC의 CIDR 블록\"\n  type        = string\n}\n\nvariable \"subnet_az\" {\n  description = \"서브넷의 가용 영역\"\n  type        = string\n}\n```\n\n# 3. VPC 생성\n\nvpc.tf 파일에 VPC 리소스를 정의하세요:\n\n```js\nresource \"aws_vpc\" \"my_vpc\" {\n  cidr_block           = var.vpc_cidr_block\n  enable_dns_support   = true\n  enable_dns_hostnames = true\n  tags = {\n    Name = \"my_vpc\"\n  }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 서브넷 정의하기\n\nsubnet.tf 파일에서 다음과 같이 서브넷을 정의하세요:\n\n```js\nresource \"aws_subnet\" \"my_subnet\" {\n  cidr_block        = cidrsubnet(aws_vpc.my_vpc.cidr_block, 3, 1)\n  vpc_id            = aws_vpc.my_vpc.id\n  availability_zone = var.subnet_az\n}\n```\n\n# 5. 인터넷 게이트웨이 설정하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ninternet_gateway.tf 파일에서 인터넷 게이트웨이를 정의하세요:\n\n```js\nresource \"aws_internet_gateway\" \"my_igw\" {\n  vpc_id = aws_vpc.my_vpc.id\n}\n```\n\n# 6. 보안 그룹 생성하기\n\nsecurity_group.tf 파일에서 보안 그룹을 정의하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nresource \"aws_security_group\" \"ssh_access\" {\n  name   = \"ssh_access\"\n  vpc_id = aws_vpc.my_vpc.id\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = -1\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n# 7. EC2 인스턴스 시작하기\n\nec2.tf에서 다음과 같이 EC2 인스턴스를 정의하세요:\n\n```js\ndata \"aws_ami\" \"latest_ubuntu\" {\n  most_recent = true\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"]\n  }\n\n  filter {\n    name   = \"virtualization-type\"\n    values = [\"hvm\"]\n  }\n\n  owners = [\"<Your AWS Account ID>\"]\n}\n\nresource \"aws_instance\" \"my_ec2_instance\" {\n  count                       = var.instance_count\n  ami                         = data.aws_ami.latest_ubuntu.id\n  instance_type               = var.ec2_instance_type\n  key_name                    = var.ssh_key_name\n  security_groups             = [aws_security_group.ssh_access.id]\n  associate_public_ip_address = true\n  subnet_id                   = aws_subnet.my_subnet.id\n\n  tags = {\n    Name = var.ec2_instance_tag\n  }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. 라우트 테이블 생성\n\nroute_table.tf 파일에서 라우트 테이블 및 연관을 정의하세요:\n\n```js\nresource \"aws_route_table\" \"my_route_table\" {\n  vpc_id = aws_vpc.my_vpc.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.my_igw.id\n  }\n}\nresource \"aws_route_table_association\" \"my_route_table_assoc\" {\n  subnet_id      = aws_subnet.my_subnet.id\n  route_table_id = aws_route_table.my_route_table.id\n}\n```\n\n# 9. 키페어 생성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nkey_pair.tf 파일에서 키페어를 정의하고 개인 키를 저장하세요:\n\n```js\nresource \"tls_private_key\" \"my_rsa_key\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\nresource \"aws_key_pair\" \"my_key_pair\" {\n  key_name   = var.ssh_key_name\n  public_key = tls_private_key.my_rsa_key.public_key_openssh\n}\n\nresource \"local_file\" \"my_private_key\" {\n  content  = tls_private_key.my_rsa_key.private_key_pem\n  filename = var.private_key_file\n}\n```\n\n# 구성 배포\n\nTerraform 구성을 초기화하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```bash\n테이블 태그를 Markdown 형식으로 변경하세요.\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nterraform apply -var 'ssh_key_name=my_ssh_key' -var 'ec2_instance_type=t2.micro' -var 'ec2_instance_tag=[\"TestInstance\"]' -var 'instance_count=1' -var 'private_key_file=my_private_key.pem' -var 'vpc_cidr_block=10.0.0.0/16' -var 'subnet_az=us-west-2a'\n```\n\nAWS에서 리소스를 확인해보세요:\n\n![이미지1](/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_0.png)\n\n![이미지2](/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Markdown 형식으로 변경한 것입니다.\n\n![이미지1](/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_2.png)\n\n![이미지2](/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_3.png)\n\nPEM 키를 사용하여 인스턴스로 SSH 연결:\n\n```js\nssh -i my_private_key.pem ubuntu@<public-ip>\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_4.png\" />\n\n# 결론\n\n테라폼을 사용하여 SSH 액세스가 가능한 EC2 인스턴스를 성공적으로 생성했습니다. 이 구성은 모듈식이므로 향후 프로젝트에 맞게 쉽게 적응시킬 수 있습니다. 완전한 모듈은 GitHub에서 찾을 수 있습니다.\n\n행복한 Terraforming!\n","ogImage":{"url":"/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_0.png"},"coverImage":"/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 안내서는 PEM 키를 사용하여 SSH 액세스가 설정된 Terraform을 사용하여 EC2 인스턴스를 생성하는 데 도움이 될 것입니다.</p>\n<h2>아키텍처 개요</h2>\n<p>설치에는 다음이 포함됩니다:</p>\n<ul>\n<li>서브넷과 인터넷 게이트웨이가 있는 VPC.</li>\n<li>EC2 인스턴스.</li>\n<li>SSH 액세스용 보안 그룹.</li>\n<li>라우팅 테이블.</li>\n</ul>\n<p></p>\n<h1>AWS 자격 증명 구성</h1>\n<p>AWS CLI 설치: AWS CLI를 아직 설치하지 않았다면 여기에서 다운로드하여 설치할 수 있습니다.</p>\n<p>AWS CLI 구성: 아래 명령을 실행하여 AWS 자격 증명을 구성하세요. 이를 통해 Terraform이 사용할 필요한 구성 파일을 설정합니다.</p>\n<pre><code class=\"hljs language-js\">aws configure\n</code></pre>\n<p></p>\n<p>다음과 같이 자격 증명을 입력해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">AWS</span> <span class=\"hljs-title class_\">Access</span> <span class=\"hljs-title class_\">Key</span> <span class=\"hljs-variable constant_\">ID</span> [<span class=\"hljs-title class_\">None</span>]: &#x3C;당신의 <span class=\"hljs-variable constant_\">AWS</span> 액세스 키 <span class=\"hljs-variable constant_\">ID</span>>\n<span class=\"hljs-variable constant_\">AWS</span> <span class=\"hljs-title class_\">Secret</span> <span class=\"hljs-title class_\">Access</span> <span class=\"hljs-title class_\">Key</span> [<span class=\"hljs-title class_\">None</span>]: &#x3C;당신의 <span class=\"hljs-variable constant_\">AWS</span> <span class=\"hljs-title class_\">Secret</span> 액세스 키>\n<span class=\"hljs-title class_\">Default</span> region name [<span class=\"hljs-title class_\">None</span>]: us-west-<span class=\"hljs-number\">2</span>\n<span class=\"hljs-title class_\">Default</span> output format [<span class=\"hljs-title class_\">None</span>]: json\n</code></pre>\n<p>설정 확인: 설정을 완료한 후에는 다음 명령어를 실행하여 설정을 확인하세요:</p>\n<pre><code class=\"hljs language-js\">aws sts get-caller-identity\n</code></pre>\n<p></p>\n<p>이 명령은 IAM 사용자에 대한 세부 정보가 포함된 JSON 응답을 반환해야 합니다.</p>\n<h1>디렉토리 구조 설정하기</h1>\n<p>터미널을 열고 다음과 같이 메인 디렉토리를 생성하세요:</p>\n<pre><code class=\"hljs language-shell\">mkdir terraform_project\ncd terraform_project\n</code></pre>\n<p></p>\n<p>모듈을 위한 하위 디렉토리를 생성해주세요:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> ec2_setup\n<span class=\"hljs-built_in\">cd</span> ec2_setup\n</code></pre>\n<p>필요한 Terraform 파일을 생성해주세요:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">touch</span> main.tf variables.tf vpc.tf subnet.tf security_group.tf ec2.tf internet_gateway.tf route_table.tf key_pair.tf\n</code></pre>\n<p></p>\n<p>파일이 생성되었는지 확인하기 위해 파일 목록을 나열해보세요:</p>\n<pre><code class=\"hljs language-js\">ls;\n</code></pre>\n<h2>구성 시작</h2>\n<h2>1. 제공자 정의</h2>\n<p></p>\n<p>main.tf 파일에서 공급업체를 설정하십시오:</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"~> 5.18\"</span>\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-west-2\"</span>\n}\n</code></pre>\n<h2>2. 입력 변수 정의</h2>\n<p>variables.tf 파일에서 변수를 정의하세요.</p>\n<p></p>\n<pre><code class=\"hljs language-js\">variable <span class=\"hljs-string\">\"ssh_key_name\"</span> {\n  description = <span class=\"hljs-string\">\"SSH 키 쌍의 이름\"</span>\n  type        = string\n}\n\nvariable <span class=\"hljs-string\">\"ec2_instance_type\"</span> {\n  description = <span class=\"hljs-string\">\"EC2 인스턴스의 유형\"</span>\n  type        = string\n}\n\nvariable <span class=\"hljs-string\">\"ec2_instance_tag\"</span> {\n  description = <span class=\"hljs-string\">\"EC2 인스턴스를 위한 태그\"</span>\n  type        = string\n}\n\nvariable <span class=\"hljs-string\">\"instance_count\"</span> {\n  description = <span class=\"hljs-string\">\"생성할 인스턴스 수\"</span>\n  type        = number\n}\n\nvariable <span class=\"hljs-string\">\"private_key_file\"</span> {\n  description = <span class=\"hljs-string\">\"개인 키 파일의 이름\"</span>\n  type        = string\n}\n\nvariable <span class=\"hljs-string\">\"vpc_cidr_block\"</span> {\n  description = <span class=\"hljs-string\">\"VPC의 CIDR 블록\"</span>\n  type        = string\n}\n\nvariable <span class=\"hljs-string\">\"subnet_az\"</span> {\n  description = <span class=\"hljs-string\">\"서브넷의 가용 영역\"</span>\n  type        = string\n}\n</code></pre>\n<h1>3. VPC 생성</h1>\n<p>vpc.tf 파일에 VPC 리소스를 정의하세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_vpc\"</span> <span class=\"hljs-string\">\"my_vpc\"</span> {\n  cidr_block           = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_cidr_block</span>\n  enable_dns_support   = <span class=\"hljs-literal\">true</span>\n  enable_dns_hostnames = <span class=\"hljs-literal\">true</span>\n  tags = {\n    <span class=\"hljs-title class_\">Name</span> = <span class=\"hljs-string\">\"my_vpc\"</span>\n  }\n}\n</code></pre>\n<p></p>\n<h1>4. 서브넷 정의하기</h1>\n<p>subnet.tf 파일에서 다음과 같이 서브넷을 정의하세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_subnet\"</span> <span class=\"hljs-string\">\"my_subnet\"</span> {\n  cidr_block        = <span class=\"hljs-title function_\">cidrsubnet</span>(aws_vpc.<span class=\"hljs-property\">my_vpc</span>.<span class=\"hljs-property\">cidr_block</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\n  vpc_id            = aws_vpc.<span class=\"hljs-property\">my_vpc</span>.<span class=\"hljs-property\">id</span>\n  availability_zone = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnet_az</span>\n}\n</code></pre>\n<h1>5. 인터넷 게이트웨이 설정하기</h1>\n<p></p>\n<p>internet_gateway.tf 파일에서 인터넷 게이트웨이를 정의하세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_internet_gateway\"</span> <span class=\"hljs-string\">\"my_igw\"</span> {\n  vpc_id = aws_vpc.<span class=\"hljs-property\">my_vpc</span>.<span class=\"hljs-property\">id</span>\n}\n</code></pre>\n<h1>6. 보안 그룹 생성하기</h1>\n<p>security_group.tf 파일에서 보안 그룹을 정의하세요:</p>\n<p></p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_security_group\"</span> <span class=\"hljs-string\">\"ssh_access\"</span> {\n  name   = <span class=\"hljs-string\">\"ssh_access\"</span>\n  vpc_id = aws_vpc.<span class=\"hljs-property\">my_vpc</span>.<span class=\"hljs-property\">id</span>\n\n  ingress {\n    from_port   = <span class=\"hljs-number\">22</span>\n    to_port     = <span class=\"hljs-number\">22</span>\n    protocol    = <span class=\"hljs-string\">\"tcp\"</span>\n    cidr_blocks = [<span class=\"hljs-string\">\"0.0.0.0/0\"</span>]\n  }\n\n  egress {\n    from_port   = <span class=\"hljs-number\">0</span>\n    to_port     = <span class=\"hljs-number\">0</span>\n    protocol    = -<span class=\"hljs-number\">1</span>\n    cidr_blocks = [<span class=\"hljs-string\">\"0.0.0.0/0\"</span>]\n  }\n}\n</code></pre>\n<h1>7. EC2 인스턴스 시작하기</h1>\n<p>ec2.tf에서 다음과 같이 EC2 인스턴스를 정의하세요:</p>\n<pre><code class=\"hljs language-js\">data <span class=\"hljs-string\">\"aws_ami\"</span> <span class=\"hljs-string\">\"latest_ubuntu\"</span> {\n  most_recent = <span class=\"hljs-literal\">true</span>\n\n  filter {\n    name   = <span class=\"hljs-string\">\"name\"</span>\n    values = [<span class=\"hljs-string\">\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"</span>]\n  }\n\n  filter {\n    name   = <span class=\"hljs-string\">\"virtualization-type\"</span>\n    values = [<span class=\"hljs-string\">\"hvm\"</span>]\n  }\n\n  owners = [<span class=\"hljs-string\">\"&#x3C;Your AWS Account ID>\"</span>]\n}\n\nresource <span class=\"hljs-string\">\"aws_instance\"</span> <span class=\"hljs-string\">\"my_ec2_instance\"</span> {\n  count                       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">instance_count</span>\n  ami                         = data.<span class=\"hljs-property\">aws_ami</span>.<span class=\"hljs-property\">latest_ubuntu</span>.<span class=\"hljs-property\">id</span>\n  instance_type               = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ec2_instance_type</span>\n  key_name                    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ssh_key_name</span>\n  security_groups             = [aws_security_group.<span class=\"hljs-property\">ssh_access</span>.<span class=\"hljs-property\">id</span>]\n  associate_public_ip_address = <span class=\"hljs-literal\">true</span>\n  subnet_id                   = aws_subnet.<span class=\"hljs-property\">my_subnet</span>.<span class=\"hljs-property\">id</span>\n\n  tags = {\n    <span class=\"hljs-title class_\">Name</span> = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ec2_instance_tag</span>\n  }\n}\n</code></pre>\n<p></p>\n<h1>8. 라우트 테이블 생성</h1>\n<p>route_table.tf 파일에서 라우트 테이블 및 연관을 정의하세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_route_table\"</span> <span class=\"hljs-string\">\"my_route_table\"</span> {\n  vpc_id = aws_vpc.<span class=\"hljs-property\">my_vpc</span>.<span class=\"hljs-property\">id</span>\n\n  route {\n    cidr_block = <span class=\"hljs-string\">\"0.0.0.0/0\"</span>\n    gateway_id = aws_internet_gateway.<span class=\"hljs-property\">my_igw</span>.<span class=\"hljs-property\">id</span>\n  }\n}\nresource <span class=\"hljs-string\">\"aws_route_table_association\"</span> <span class=\"hljs-string\">\"my_route_table_assoc\"</span> {\n  subnet_id      = aws_subnet.<span class=\"hljs-property\">my_subnet</span>.<span class=\"hljs-property\">id</span>\n  route_table_id = aws_route_table.<span class=\"hljs-property\">my_route_table</span>.<span class=\"hljs-property\">id</span>\n}\n</code></pre>\n<h1>9. 키페어 생성</h1>\n<p></p>\n<p>key_pair.tf 파일에서 키페어를 정의하고 개인 키를 저장하세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"tls_private_key\"</span> <span class=\"hljs-string\">\"my_rsa_key\"</span> {\n  algorithm = <span class=\"hljs-string\">\"RSA\"</span>\n  rsa_bits  = <span class=\"hljs-number\">4096</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_key_pair\"</span> <span class=\"hljs-string\">\"my_key_pair\"</span> {\n  key_name   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ssh_key_name</span>\n  public_key = tls_private_key.<span class=\"hljs-property\">my_rsa_key</span>.<span class=\"hljs-property\">public_key_openssh</span>\n}\n\nresource <span class=\"hljs-string\">\"local_file\"</span> <span class=\"hljs-string\">\"my_private_key\"</span> {\n  content  = tls_private_key.<span class=\"hljs-property\">my_rsa_key</span>.<span class=\"hljs-property\">private_key_pem</span>\n  filename = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">private_key_file</span>\n}\n</code></pre>\n<h1>구성 배포</h1>\n<p>Terraform 구성을 초기화하세요:</p>\n<p></p>\n<pre><code class=\"hljs language-bash\">테이블 태그를 Markdown 형식으로 변경하세요.\n</code></pre>\n<p></p>\n<pre><code class=\"hljs language-js\">terraform apply -<span class=\"hljs-keyword\">var</span> <span class=\"hljs-string\">'ssh_key_name=my_ssh_key'</span> -<span class=\"hljs-keyword\">var</span> <span class=\"hljs-string\">'ec2_instance_type=t2.micro'</span> -<span class=\"hljs-keyword\">var</span> <span class=\"hljs-string\">'ec2_instance_tag=[\"TestInstance\"]'</span> -<span class=\"hljs-keyword\">var</span> <span class=\"hljs-string\">'instance_count=1'</span> -<span class=\"hljs-keyword\">var</span> <span class=\"hljs-string\">'private_key_file=my_private_key.pem'</span> -<span class=\"hljs-keyword\">var</span> <span class=\"hljs-string\">'vpc_cidr_block=10.0.0.0/16'</span> -<span class=\"hljs-keyword\">var</span> <span class=\"hljs-string\">'subnet_az=us-west-2a'</span>\n</code></pre>\n<p>AWS에서 리소스를 확인해보세요:</p>\n<p><img src=\"/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_0.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_1.png\" alt=\"이미지2\"></p>\n<p></p>\n<p>아래는 Markdown 형식으로 변경한 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_2.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-06-23-SettingUpanEC2InstanceUsingTerraformandSSHAccesswithPEMKey_3.png\" alt=\"이미지2\"></p>\n<p>PEM 키를 사용하여 인스턴스로 SSH 연결:</p>\n<pre><code class=\"hljs language-js\">ssh -i my_private_key.<span class=\"hljs-property\">pem</span> ubuntu@&#x3C;public-ip>\n</code></pre>\n<p></p>\n<h1>결론</h1>\n<p>테라폼을 사용하여 SSH 액세스가 가능한 EC2 인스턴스를 성공적으로 생성했습니다. 이 구성은 모듈식이므로 향후 프로젝트에 맞게 쉽게 적응시킬 수 있습니다. 완전한 모듈은 GitHub에서 찾을 수 있습니다.</p>\n<p>행복한 Terraforming!</p>\n</body>\n</html>\n"},"__N_SSG":true}