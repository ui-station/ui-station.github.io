{"pageProps":{"post":{"title":"Rails 7 폼 제출과 Turbo Stream  폼 제출 실패시 에러 표시","description":"","date":"2024-06-19 22:11","slug":"2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission","content":"\n# 소개\n\nHotwire 스위트의 일부인 Turbo Stream은 Rails 애플리케이션에서 실시간 업데이트를 처리하는 우아한 방법을 제공합니다. Rails 7에서 Turbo Stream을 사용하여 양식 제출을 관리하는 것은 더욱 강력하고 간소화되었습니다. 이 블로그 포스트에서는 양식 제출이 실패할 때 오류를 우아하게 처리하여 유연한 사용자 경험을 제공하는 방법에 대해 살펴보겠습니다.\n\n# 전제 조건\n\n시작하기 전에 다음 사항을 확인하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Rails 7 애플리케이션을 설정했어요.\n- Turbo와 Stimulus 라이브러리가 프로젝트에 포함되어 있어요. (이들은 Rails 7 앱에서 기본으로 제공돼요)\n\n# 단계 1: 모델 및 컨트롤러 설정하기\n\n간단한 모델과 컨트롤러를 설정해볼게요. 데모를 위해 간단한 제목과 본문을 가진 Post 모델을 만들고, PostsController에서 폼 제출을 처리할 거예요.\n\n## 모델 및 컨트롤러 생성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 유효성 정의\n\nPost 모델 (app/models/post.rb) 에 몇 가지 유효성을 추가해보세요:\n\n```rb\nclass Post < ApplicationRecord\n validates :title, presence: true\n validates :body, presence: true\nend\n```\n\n# 단계 2: 폼 생성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로, 새로운 게시물을 제출하기 위한 양식을 만들어보겠습니다. PostsController에서 new 및 create 액션을 정의하세요:\n\n```js\nclass PostsController < ApplicationController\n  def new\n    @post = Post.new\n  end\n\n  def create\n    @post = Post.new(post_params)\n    if @post.save\n      redirect_to @post, notice: '게시물이 성공적으로 생성되었습니다.'\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  private\n\n  def post_params\n    params.require(:post).permit(:title, :body)\n  end\nend\n```\n\n# 단계 3: 뷰 작성\n\n## 양식 부분\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/\\_form.html.erb):\n\n```ruby\n<%= form_for post, html: { class: 'row' } do |f| %>\n  <div class=\"col-auto\">\n    <%= f.label :title, class: 'form-label' %>\n    <%= f.text_field :title, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto\">\n    <%= f.label :body, class: 'form-label' %>\n    <%= f.text_area :body, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto mt-4\">\n    <%= f.submit class: 'btn btn-primary' %>\n  </div>\n<% end %>\n```\n\n폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/new.html.erb):\n\n```ruby\n<h2>새 글 작성하기</h2>\n<%= render 'form', post: @post %>\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 이제 레일즈 7에서 오류가 발생합니다.\n\n새로운 포스트를 생성하기 위해 폼을 제출할 때.\n\n```js\nturbo.es2017-esm.js:2115 Error: Form responses must redirect to another location\n    at FormSubmission.requestSucceededWithResponse (turbo.es2017-esm.js:679:27)\n    at FetchRequest.receive (turbo.es2017-esm.js:450:27)\n    at FetchRequest.perform (turbo.es2017-esm.js:431:31)\n```\n\n이것은 모든 링크 클릭과 폼 제출이 이제 레일즈 7에서 TURBO_STREAM 요청이 되었기 때문에 발생합니다.\n더 빠른 응답을 얻기 위해서이며, TURBO_STREAM 요청을 만들기 위한 명시적 코드를 작성할 필요가 없습니다.\n\nTURBO_STREAM 요청이 하는 일은 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일반적으로 전체 페이지를 다시로드하지 않고 페이지에 터보 프레임을 업데이트합니다.\n\n해결하는 방법은\n\n이 문제를 해결하려면\n\n이렇게 컨트롤러에서 TURBO_STREAM 요청을 처리해야 합니다.\n\n```js\n  def create\n    @post = Post.new(post_params)\n    if @post.save\n      redirect_to @post, notice: '게시물이 성공적으로 생성되었습니다.'\n    else\n      respond_to do |format|\n        format.turbo_stream { render turbo_stream: turbo_stream.replace(@post, partial: 'posts/form', locals: { post: @post }) }\n        format.html { render :new }\n      end\n    end\n  end\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n터보 스트림.replace 메소드는 레일즈의 Turbo Streams 라이브러리의 일부입니다. 이 메소드는 전체 페이지 새로고침 없이 페이지의 일부를 교체하는 Turbo Stream 액션을 생성합니다.\n\n다음은 이 메소드와 해당 속성에 대한 설명입니다:\n\n- format.turbo_stream: 이는 다음 블록이 Turbo Stream 요청에 응답하는 데 사용되어야 함을 지정합니다. Turbo Stream은 Hotwire 프레임워크의 일부로서 WebSocket을 통해 페이지의 특정 부분에 업데이트를 보낼 수 있게 합니다.\n- `render turbo_stream: turbo_stream.replace(@post, partial: 'posts/form', locals: { post: @post })`: 이는 Turbo Stream 요청에 대해 실행되는 블록입니다. 응답을 보내기 위해 render 메소드를 사용합니다.\n- turbo_stream.replace(@post, partial: `posts/form`, locals: { post: @post }): 이는 페이지의 일부를 교체하는 Turbo Stream 액션입니다. 새로운 콘텐츠로 Turbo Frame이나 Turbo Stream 요소를 교체하는 replace 메소드를 사용합니다.\n- @post: 이는 교체 액션의 대상입니다. 페이지에서 Turbo Frame이나 Turbo Stream 요소의 ID와 일치해야 합니다.\n- 지금은 대상이 form ID인 new_post인 경우가 있습니다. 첫 번째 인자에 @post를 전달했기 때문에 replace 메소드가 자동으로 form ID를 대상으로 설정합니다.\n- partial: 'posts/form': 이는 대상을 렌더링하고 교체할 부분을 지정합니다.\n- locals: { post: @post }: 이는 부분에 로컬 변수를 전달합니다. 이 경우 @post 인스턴스 변수를 post라는 로컬 변수로 전달합니다.\n\n또한, 폼 제출 실패를 처리하기 위해 뷰에 오류를 추가할 예정입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 게시물 생성하기\n\n```ruby\n<%= form_for post, html: { class: 'row' } do |f| %>\n  <% if post.errors.any? %>\n    <div class=\"col-12\">\n      <div class=\"alert alert-danger\">\n        <ul>\n          <% post.errors.full_messages.each do |message| %>\n            <li><%= message %></li>\n          <% end %>\n        </ul>\n      </div>\n    </div>\n  <% end %>\n\n  <div class=\"col-auto\">\n    <%= f.label :title, class: 'form-label' %>\n    <%= f.text_field :title, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto\">\n    <%= f.label :body, class: 'form-label' %>\n    <%= f.text_area :body, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto mt-4\">\n    <%= f.submit class: 'btn btn-primary' %>\n  </div>\n<% end %>\n```\n\n이렇게 수정하면 우리는 Rails 7에서 양식 제출 실패를 처리하는 문제를 해결할 수 있습니다.\n\n# 결론:\n\nTurbo는 Basecamp에 의해 소개된 Hotwire 프레임워크의 일부입니다. 최소한의 JavaScript를 사용하여 HTML을 통해 전송함으로써 현대적인 웹 애플리케이션을 구축하는 방법을 제공하도록 설계되었습니다. Turbo에는 세 가지 주요 부분이 있습니다: Turbo Drive, Turbo Frames 및 Turbo Streams.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 단계를 따라 하셨다면 Rails 7 애플리케이션에서 Turbo Stream을 성공적으로 구현하셨습니다. 이 방법을 통해 사용자 경험을 향상시켜 전체 페이지 새로고침 없이 즉각적인 피드백을 제공하고 Hotwire의 Turbo 라이브러리의 능력을 활용할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission_0.png"},"coverImage":"/assets/img/2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>Hotwire 스위트의 일부인 Turbo Stream은 Rails 애플리케이션에서 실시간 업데이트를 처리하는 우아한 방법을 제공합니다. Rails 7에서 Turbo Stream을 사용하여 양식 제출을 관리하는 것은 더욱 강력하고 간소화되었습니다. 이 블로그 포스트에서는 양식 제출이 실패할 때 오류를 우아하게 처리하여 유연한 사용자 경험을 제공하는 방법에 대해 살펴보겠습니다.</p>\n<h1>전제 조건</h1>\n<p>시작하기 전에 다음 사항을 확인하세요:</p>\n<p></p>\n<ul>\n<li>Rails 7 애플리케이션을 설정했어요.</li>\n<li>Turbo와 Stimulus 라이브러리가 프로젝트에 포함되어 있어요. (이들은 Rails 7 앱에서 기본으로 제공돼요)</li>\n</ul>\n<h1>단계 1: 모델 및 컨트롤러 설정하기</h1>\n<p>간단한 모델과 컨트롤러를 설정해볼게요. 데모를 위해 간단한 제목과 본문을 가진 Post 모델을 만들고, PostsController에서 폼 제출을 처리할 거예요.</p>\n<h2>모델 및 컨트롤러 생성하기</h2>\n<p></p>\n<h2>유효성 정의</h2>\n<p>Post 모델 (app/models/post.rb) 에 몇 가지 유효성을 추가해보세요:</p>\n<pre><code class=\"hljs language-rb\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post</span> &#x3C; <span class=\"hljs-title class_ inherited__\">ApplicationRecord</span>\n validates <span class=\"hljs-symbol\">:title</span>, <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n validates <span class=\"hljs-symbol\">:body</span>, <span class=\"hljs-symbol\">presence:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h1>단계 2: 폼 생성하기</h1>\n<p></p>\n<p>다음으로, 새로운 게시물을 제출하기 위한 양식을 만들어보겠습니다. PostsController에서 new 및 create 액션을 정의하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PostsController</span> &#x3C; <span class=\"hljs-title class_\">ApplicationController</span>\n  def <span class=\"hljs-keyword\">new</span>\n    @post = <span class=\"hljs-title class_\">Post</span>.<span class=\"hljs-property\">new</span>\n  end\n\n  def create\n    @post = <span class=\"hljs-title class_\">Post</span>.<span class=\"hljs-title function_\">new</span>(post_params)\n    <span class=\"hljs-keyword\">if</span> @post.<span class=\"hljs-property\">save</span>\n      redirect_to @post, <span class=\"hljs-attr\">notice</span>: <span class=\"hljs-string\">'게시물이 성공적으로 생성되었습니다.'</span>\n    <span class=\"hljs-keyword\">else</span>\n      render :<span class=\"hljs-keyword\">new</span>, <span class=\"hljs-attr\">status</span>: :unprocessable_entity\n    end\n  end\n\n  private\n\n  def post_params\n    params.<span class=\"hljs-built_in\">require</span>(:post).<span class=\"hljs-title function_\">permit</span>(:title, :body)\n  end\nend\n</code></pre>\n<h1>단계 3: 뷰 작성</h1>\n<h2>양식 부분</h2>\n<p></p>\n<p>폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/_form.html.erb):</p>\n<pre><code class=\"hljs language-ruby\">&#x3C;%= form_for post, <span class=\"hljs-symbol\">html:</span> { <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'row'</span> } <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">f</span>| %>\n  &#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"col-auto\"</span>>\n    &#x3C;%= f.label <span class=\"hljs-symbol\">:title</span>, <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'form-label'</span> %>\n    &#x3C;%= f.text_field <span class=\"hljs-symbol\">:title</span>, <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'form-control'</span> %>\n  &#x3C;<span class=\"hljs-regexp\">/div>\n  &#x3C;div class=\"col-auto\">\n    &#x3C;%= f.label :body, class: 'form-label' %>\n    &#x3C;%= f.text_area :body, class: 'form-control' %>\n  &#x3C;/div</span>>\n  &#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"col-auto mt-4\"</span>>\n    &#x3C;%= f.submit <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'btn btn-primary'</span> %>\n  &#x3C;<span class=\"hljs-regexp\">/div>\n&#x3C;% end %>\n</span></code></pre>\n<p>폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/new.html.erb):</p>\n<pre><code class=\"hljs language-ruby\">&#x3C;h2>새 글 작성하기&#x3C;<span class=\"hljs-regexp\">/h2>\n&#x3C;%= render 'form', post: @post %>\n</span></code></pre>\n<p></p>\n<h1>이제 레일즈 7에서 오류가 발생합니다.</h1>\n<p>새로운 포스트를 생성하기 위해 폼을 제출할 때.</p>\n<pre><code class=\"hljs language-js\">turbo.<span class=\"hljs-property\">es2017</span>-esm.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">2115</span> <span class=\"hljs-title class_\">Error</span>: <span class=\"hljs-title class_\">Form</span> responses must redirect to another location\n    at <span class=\"hljs-title class_\">FormSubmission</span>.<span class=\"hljs-property\">requestSucceededWithResponse</span> (turbo.<span class=\"hljs-property\">es2017</span>-esm.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">679</span>:<span class=\"hljs-number\">27</span>)\n    at <span class=\"hljs-title class_\">FetchRequest</span>.<span class=\"hljs-property\">receive</span> (turbo.<span class=\"hljs-property\">es2017</span>-esm.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">450</span>:<span class=\"hljs-number\">27</span>)\n    at <span class=\"hljs-title class_\">FetchRequest</span>.<span class=\"hljs-property\">perform</span> (turbo.<span class=\"hljs-property\">es2017</span>-esm.<span class=\"hljs-property\">js</span>:<span class=\"hljs-number\">431</span>:<span class=\"hljs-number\">31</span>)\n</code></pre>\n<p>이것은 모든 링크 클릭과 폼 제출이 이제 레일즈 7에서 TURBO_STREAM 요청이 되었기 때문에 발생합니다.\n더 빠른 응답을 얻기 위해서이며, TURBO_STREAM 요청을 만들기 위한 명시적 코드를 작성할 필요가 없습니다.</p>\n<p>TURBO_STREAM 요청이 하는 일은 무엇인가요?</p>\n<p></p>\n<p>일반적으로 전체 페이지를 다시로드하지 않고 페이지에 터보 프레임을 업데이트합니다.</p>\n<p>해결하는 방법은</p>\n<p>이 문제를 해결하려면</p>\n<p>이렇게 컨트롤러에서 TURBO_STREAM 요청을 처리해야 합니다.</p>\n<pre><code class=\"hljs language-js\">  def create\n    @post = <span class=\"hljs-title class_\">Post</span>.<span class=\"hljs-title function_\">new</span>(post_params)\n    <span class=\"hljs-keyword\">if</span> @post.<span class=\"hljs-property\">save</span>\n      redirect_to @post, <span class=\"hljs-attr\">notice</span>: <span class=\"hljs-string\">'게시물이 성공적으로 생성되었습니다.'</span>\n    <span class=\"hljs-keyword\">else</span>\n      respond_to <span class=\"hljs-keyword\">do</span> |format|\n        format.<span class=\"hljs-property\">turbo_stream</span> { render <span class=\"hljs-attr\">turbo_stream</span>: turbo_stream.<span class=\"hljs-title function_\">replace</span>(@post, <span class=\"hljs-attr\">partial</span>: <span class=\"hljs-string\">'posts/form'</span>, <span class=\"hljs-attr\">locals</span>: { <span class=\"hljs-attr\">post</span>: @post }) }\n        format.<span class=\"hljs-property\">html</span> { render :<span class=\"hljs-keyword\">new</span> }\n      end\n    end\n  end\n</code></pre>\n<p></p>\n<p>터보 스트림.replace 메소드는 레일즈의 Turbo Streams 라이브러리의 일부입니다. 이 메소드는 전체 페이지 새로고침 없이 페이지의 일부를 교체하는 Turbo Stream 액션을 생성합니다.</p>\n<p>다음은 이 메소드와 해당 속성에 대한 설명입니다:</p>\n<ul>\n<li>format.turbo_stream: 이는 다음 블록이 Turbo Stream 요청에 응답하는 데 사용되어야 함을 지정합니다. Turbo Stream은 Hotwire 프레임워크의 일부로서 WebSocket을 통해 페이지의 특정 부분에 업데이트를 보낼 수 있게 합니다.</li>\n<li><code>render turbo_stream: turbo_stream.replace(@post, partial: 'posts/form', locals: { post: @post })</code>: 이는 Turbo Stream 요청에 대해 실행되는 블록입니다. 응답을 보내기 위해 render 메소드를 사용합니다.</li>\n<li>turbo_stream.replace(@post, partial: <code>posts/form</code>, locals: { post: @post }): 이는 페이지의 일부를 교체하는 Turbo Stream 액션입니다. 새로운 콘텐츠로 Turbo Frame이나 Turbo Stream 요소를 교체하는 replace 메소드를 사용합니다.</li>\n<li>@post: 이는 교체 액션의 대상입니다. 페이지에서 Turbo Frame이나 Turbo Stream 요소의 ID와 일치해야 합니다.</li>\n<li>지금은 대상이 form ID인 new_post인 경우가 있습니다. 첫 번째 인자에 @post를 전달했기 때문에 replace 메소드가 자동으로 form ID를 대상으로 설정합니다.</li>\n<li>partial: 'posts/form': 이는 대상을 렌더링하고 교체할 부분을 지정합니다.</li>\n<li>locals: { post: @post }: 이는 부분에 로컬 변수를 전달합니다. 이 경우 @post 인스턴스 변수를 post라는 로컬 변수로 전달합니다.</li>\n</ul>\n<p>또한, 폼 제출 실패를 처리하기 위해 뷰에 오류를 추가할 예정입니다.</p>\n<p></p>\n<h2>게시물 생성하기</h2>\n<pre><code class=\"hljs language-ruby\">&#x3C;%= form_for post, <span class=\"hljs-symbol\">html:</span> { <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'row'</span> } <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">f</span>| %>\n  &#x3C;% <span class=\"hljs-keyword\">if</span> post.errors.any? %>\n    &#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"col-12\"</span>>\n      &#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"alert alert-danger\"</span>>\n        &#x3C;ul>\n          &#x3C;% post.errors.full_messages.each <span class=\"hljs-keyword\">do</span> |<span class=\"hljs-params\">message</span>| %>\n            &#x3C;li>&#x3C;%= message %>&#x3C;<span class=\"hljs-regexp\">/li>\n          &#x3C;% end %>\n        &#x3C;/ul</span>>\n      &#x3C;<span class=\"hljs-regexp\">/div>\n    &#x3C;/div</span>>\n  &#x3C;% <span class=\"hljs-keyword\">end</span> %>\n\n  &#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"col-auto\"</span>>\n    &#x3C;%= f.label <span class=\"hljs-symbol\">:title</span>, <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'form-label'</span> %>\n    &#x3C;%= f.text_field <span class=\"hljs-symbol\">:title</span>, <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'form-control'</span> %>\n  &#x3C;<span class=\"hljs-regexp\">/div>\n  &#x3C;div class=\"col-auto\">\n    &#x3C;%= f.label :body, class: 'form-label' %>\n    &#x3C;%= f.text_area :body, class: 'form-control' %>\n  &#x3C;/div</span>>\n  &#x3C;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">\"col-auto mt-4\"</span>>\n    &#x3C;%= f.submit <span class=\"hljs-symbol\">class:</span> <span class=\"hljs-string\">'btn btn-primary'</span> %>\n  &#x3C;<span class=\"hljs-regexp\">/div>\n&#x3C;% end %>\n</span></code></pre>\n<p>이렇게 수정하면 우리는 Rails 7에서 양식 제출 실패를 처리하는 문제를 해결할 수 있습니다.</p>\n<h1>결론:</h1>\n<p>Turbo는 Basecamp에 의해 소개된 Hotwire 프레임워크의 일부입니다. 최소한의 JavaScript를 사용하여 HTML을 통해 전송함으로써 현대적인 웹 애플리케이션을 구축하는 방법을 제공하도록 설계되었습니다. Turbo에는 세 가지 주요 부분이 있습니다: Turbo Drive, Turbo Frames 및 Turbo Streams.</p>\n<p></p>\n<p>위 단계를 따라 하셨다면 Rails 7 애플리케이션에서 Turbo Stream을 성공적으로 구현하셨습니다. 이 방법을 통해 사용자 경험을 향상시켜 전체 페이지 새로고침 없이 즉각적인 피드백을 제공하고 Hotwire의 Turbo 라이브러리의 능력을 활용할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}