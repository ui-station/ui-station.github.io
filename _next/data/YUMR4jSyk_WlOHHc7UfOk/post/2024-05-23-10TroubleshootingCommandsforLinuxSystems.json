{"pageProps":{"post":{"title":"리눅스 시스템을 위한 10가지 문제 해결 명령어","description":"","date":"2024-05-23 15:10","slug":"2024-05-23-10TroubleshootingCommandsforLinuxSystems","content":"\nMarkdown\n![이미지](/assets/img/2024-05-23-10TroubleshootingCommandsforLinuxSystems_0.png)\n\n# 1. CPU를 가장 많이 사용하는 프로세스 확인하는 방법\n\n```js\n$ ps H -eo pid,pcpu | sort -nk2 | tail\n31396  0.6\n31396  0.6\n31396  0.6\n31396  0.6\n31396  0.6\n31396  0.6\n31396  0.6\n31396  0.6\n30904  1.0\n30914  1.0\n```\n\n가장 CPU를 많이 사용하는 PID는 30914입니다. 음성오버: 실제로는 31396입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 2. 가장 CPU 소모가 많은 프로세스의 PID에 해당하는 서비스 이름은 무엇인가요?\n\n첫 번째 방법:\n\n```js\n$ ps aux | fgrep 30914\nwork 30914  1.0  0.8 309568 71668 ?  Sl   Feb02 124:44 ./router2 –conf=rs.conf\n```\n\n해당 프로세스는 ./router2입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n번호 두 방법:\n\n```js\n$ ll /proc/30914\nlrwxrwxrwx  1 work work 0 2월 10일 13:27 cwd -> /home/work/im-env/router2\nlrwxrwxrwx  1 work work 0 2월 10일 13:27 exe -> /home/work/im-env/router2/router2\n```\n\n음성 안내: 멋져요, 전체 경로가 모두 나와 있네요.\n\n# 3. 특정 포트의 연결 상태를 확인하는 방법은 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nMethod One:\n\n```js\n$ netstat -lap | fgrep 22022\ntcp        0      0 1.2.3.4:22022          *:*                         LISTEN      31396/imui\ntcp        0      0 1.2.3.4:22022          1.2.3.4:46642          ESTABLISHED 31396/imui\ntcp        0      0 1.2.3.4:22022          1.2.3.4:46640          ESTABLISHED 31396/imui\n```\n\nMethod Two:\n\n```js\n$ /usr/sbin/lsof -i :22022\nCOMMAND   PID USER   FD   TYPE   DEVICE SIZE NODE NAME\nrouter  30904 work   50u  IPv4 69065770       TCP 1.2.3.4:46638->1.2.3.4:22022 (ESTABLISHED)\nrouter  30904 work   51u  IPv4 69065772       TCP 1.2.3.4:46639->1.2.3.4:22022 (ESTABLISHED)\nrouter  30904 work   52u  IPv4 69065774       TCP 1.2.3.4:46640->1.2.3.4:22022 (ESTABLISHED)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 기계의 연결 수를 확인하는 방법은?\n\n1.2.3.4의 SSH 데몬(sshd)이 22번 포트에서 수신 대기 중입니다. 1.2.3.4의 sshd 서비스에 대한 다양한 상태의 연결 수 (TIME_WAIT/CLOSE_WAIT/ESTABLISHED)를 어떻게 카운트할 수 있을까요?\n\n```js\n$ netstat -n | grep 1.2.3.4:22 | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n\n$ netstat -lnpta | grep ssh | egrep \"TIME_WAIT | CLOSE_WAIT | ESTABLISHED\"\n```\n\n참고: netstat은 네트워크 연결 문제를 추적하는 데 자주 사용되는 도구이며, grep/awk와 결합하면 강력한 도구가 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 사전 백업 로그에서 데이터 쿼리하기\n\n사전 백업 서비스.2022-06-26.log.bz2 로그에서 키워드 1.2.3.4을 포함하는 항목은 몇 개인가요?\n\n```js\n$ bzcat service.2022-06-26.log.bz2 | grep '1.2.3.4' | wc -l\n\n$ bzgrep '1.2.3.4' service.2022-06-26.log.bz2 | wc -l\n\n$ less service.2022-06-26.log.bz2 | grep '10.37.9.11' | wc -l\n```\n\n참고: 온라인 로그 파일은 일반적으로 bz2로 압축된 후 보존됩니다. 쿼리를 위해 해제하면 많은 공간과 시간이 소비됩니다. 따라서, 연구 및 개발 동료들이 숙달해야할 bzcat 및 bzgrep는 필수 도구입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 백업 서비스 팁\n\n백업을 위해 /opt/web/service_web 디렉토리를 패킹하되 로그 디렉토리는 제외하고, 패킹한 파일을 /opt/backup 디렉토리에 저장하세요.\n\n```js\n$ tar -zcvf /opt/backup/service_web.tar.gz \\\n    -exclude /opt/web/service_web/logs \\\n    /opt/web/service_web\n```\n\n참고: 이 명령은 온라인 애플리케이션에서 흔히 사용됩니다. 프로젝트를 패킹하고 이전해야 할 때 로그 디렉토리를 제외해야 할 때가 종종 있습니다. 이런 시나리오에서는 `exclude` 매개변수를 잘 활용하는 것이 중요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 쓰레드 카운트 조회\n\n서버의 서비스를 위해 실행 중인 전체 쓰레드 수를 조회합니다. 기계의 쓰레드 수가 경고 임계값을 초과할 때 해당 프로세스와 쓰레드 정보를 빠르게 식별해야 합니다.\n\n```js\n$ ps -eLf | wc -l\n\n$ pstree -p | wc -l\n```\n\n# 8. 디스크 경고, 가장 큰 파일 비우기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n많은 예외 로그 파일을 찾아 서버에서 실행 중인 Tomcat 서버에서 생성된 파일을 공간을 확보하세요. 파일에 \"log\" 키워드가 포함되어 있고 1GB보다 큰 경우를 가정합니다.\n\n단계 1: 파일 찾기.\n\n```js\n$ find / -type f -name \"*log*\" | xargs ls -lSh | more\n\n$ du -a / | sort -rn | grep log | more\n\n$ find / -name '*log*' -size +1000M -exec du -h {} \\;\n```\n\n단계 2: 파일을 비우기.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n가정적으로 찾은 파일이 a.log인 경우, 해당 파일을 완전히 비우는 올바른 방법은:\n\n```js\n$ echo \"\" > a.log\n```\n\n이렇게 하면 파일 공간이 즉시 해제됩니다.\n\n많은 사람들이 사용하는 방법:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n$ rm -rf a.log\n```\n\n파일을 삭제하면서도 Tomcat 서비스가 여전히 실행 중인 경우 공간이 즉시 해제되지 않을 수 있습니다. 공간을 확보하려면 Tomcat을 다시 시작해야 합니다.\n\n# 9. 파일 표시, 주석 필터링\n\n서버.conf 파일을 표시하고 #로 시작하는 주석 줄을 마스킹합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n$ sed -n '/^[#]/!p' server.conf\n\n$ sed -e '/^#/d' server.conf\n\n$ grep -v \"^#\" server.conf\n```\n\n# 10. 디스크 IO 예외 해결 방법\n\n디스크 IO 예외, 예를 들어 느린 쓰기 또는 높은 현재 사용량과 같은 문제를 해결하는 방법을 알아보세요. 높은 디스크 IO 예외를 일으키는 프로세스 ID를 식별해야 합니다.\n\n단계 1:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```sh\n$ iotop -o\n```\n\n현재 디스크에 쓰기 중인 모든 프로세스 ID를 보십시오.\n\n단계 2: 만약 쓰기 표시기가 낮고 주요 쓰기 작업이 거의 없다면, 디스크 자체를 확인해야 합니다. 시스템을 확인할 수 있습니다.\n\n```sh\n$ dmesg\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n차후에 한 번 `/var/log/message` 파일을 확인해보세요. 여기에 어떤 디스크 오류 메시지가 있는지 확인할 수 있어요. 동시에, 쓰기 속도가 느린 디스크에 빈 파일을 만들어보세요. 디스크의 고장으로 인해 쓰기가 안 되는지 확인할 수 있어요.\n","ogImage":{"url":"/assets/img/2024-05-23-10TroubleshootingCommandsforLinuxSystems_0.png"},"coverImage":"/assets/img/2024-05-23-10TroubleshootingCommandsforLinuxSystems_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Markdown\n<img src=\"/assets/img/2024-05-23-10TroubleshootingCommandsforLinuxSystems_0.png\" alt=\"이미지\"></p>\n<h1>1. CPU를 가장 많이 사용하는 프로세스 확인하는 방법</h1>\n<pre><code class=\"hljs language-js\">$ ps H -eo pid,pcpu | sort -nk2 | tail\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">31396</span>  <span class=\"hljs-number\">0.6</span>\n<span class=\"hljs-number\">30904</span>  <span class=\"hljs-number\">1.0</span>\n<span class=\"hljs-number\">30914</span>  <span class=\"hljs-number\">1.0</span>\n</code></pre>\n<p>가장 CPU를 많이 사용하는 PID는 30914입니다. 음성오버: 실제로는 31396입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>2. 가장 CPU 소모가 많은 프로세스의 PID에 해당하는 서비스 이름은 무엇인가요?</h1>\n<p>첫 번째 방법:</p>\n<pre><code class=\"hljs language-js\">$ ps aux | fgrep <span class=\"hljs-number\">30914</span>\nwork <span class=\"hljs-number\">30914</span>  <span class=\"hljs-number\">1.0</span>  <span class=\"hljs-number\">0.8</span> <span class=\"hljs-number\">309568</span> <span class=\"hljs-number\">71668</span> ?  <span class=\"hljs-title class_\">Sl</span>   <span class=\"hljs-title class_\">Feb02</span> <span class=\"hljs-number\">124</span>:<span class=\"hljs-number\">44</span> ./router2 –conf=rs.<span class=\"hljs-property\">conf</span>\n</code></pre>\n<p>해당 프로세스는 ./router2입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>번호 두 방법:</p>\n<pre><code class=\"hljs language-js\">$ ll /proc/<span class=\"hljs-number\">30914</span>\nlrwxrwxrwx  <span class=\"hljs-number\">1</span> work work <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2</span>월 <span class=\"hljs-number\">10</span>일 <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">27</span> cwd -> <span class=\"hljs-regexp\">/home/</span>work/im-env/router2\nlrwxrwxrwx  <span class=\"hljs-number\">1</span> work work <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2</span>월 <span class=\"hljs-number\">10</span>일 <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">27</span> exe -> <span class=\"hljs-regexp\">/home/</span>work/im-env/router2/router2\n</code></pre>\n<p>음성 안내: 멋져요, 전체 경로가 모두 나와 있네요.</p>\n<h1>3. 특정 포트의 연결 상태를 확인하는 방법은 무엇인가요?</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Method One:</p>\n<pre><code class=\"hljs language-js\">$ netstat -lap | fgrep <span class=\"hljs-number\">22022</span>\ntcp        <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">22022</span>          *:*                         <span class=\"hljs-variable constant_\">LISTEN</span>      <span class=\"hljs-number\">31396</span>/imui\ntcp        <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">22022</span>          <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">46642</span>          <span class=\"hljs-variable constant_\">ESTABLISHED</span> <span class=\"hljs-number\">31396</span>/imui\ntcp        <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">22022</span>          <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">46640</span>          <span class=\"hljs-variable constant_\">ESTABLISHED</span> <span class=\"hljs-number\">31396</span>/imui\n</code></pre>\n<p>Method Two:</p>\n<pre><code class=\"hljs language-js\">$ /usr/sbin/lsof -i :<span class=\"hljs-number\">22022</span>\n<span class=\"hljs-variable constant_\">COMMAND</span>   <span class=\"hljs-variable constant_\">PID</span> <span class=\"hljs-variable constant_\">USER</span>   <span class=\"hljs-variable constant_\">FD</span>   <span class=\"hljs-variable constant_\">TYPE</span>   <span class=\"hljs-variable constant_\">DEVICE</span> <span class=\"hljs-variable constant_\">SIZE</span> <span class=\"hljs-variable constant_\">NODE</span> <span class=\"hljs-variable constant_\">NAME</span>\nrouter  <span class=\"hljs-number\">30904</span> work   50u  <span class=\"hljs-title class_\">IPv4</span> <span class=\"hljs-number\">69065770</span>       <span class=\"hljs-variable constant_\">TCP</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">46638</span>-><span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">22022</span> (<span class=\"hljs-variable constant_\">ESTABLISHED</span>)\nrouter  <span class=\"hljs-number\">30904</span> work   51u  <span class=\"hljs-title class_\">IPv4</span> <span class=\"hljs-number\">69065772</span>       <span class=\"hljs-variable constant_\">TCP</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">46639</span>-><span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">22022</span> (<span class=\"hljs-variable constant_\">ESTABLISHED</span>)\nrouter  <span class=\"hljs-number\">30904</span> work   52u  <span class=\"hljs-title class_\">IPv4</span> <span class=\"hljs-number\">69065774</span>       <span class=\"hljs-variable constant_\">TCP</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">46640</span>-><span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">22022</span> (<span class=\"hljs-variable constant_\">ESTABLISHED</span>)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4. 기계의 연결 수를 확인하는 방법은?</h1>\n<p>1.2.3.4의 SSH 데몬(sshd)이 22번 포트에서 수신 대기 중입니다. 1.2.3.4의 sshd 서비스에 대한 다양한 상태의 연결 수 (TIME_WAIT/CLOSE_WAIT/ESTABLISHED)를 어떻게 카운트할 수 있을까요?</p>\n<pre><code class=\"hljs language-js\">$ netstat -n | grep <span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.4</span>:<span class=\"hljs-number\">22</span> | awk <span class=\"hljs-string\">'/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'</span>\n\n$ netstat -lnpta | grep ssh | egrep <span class=\"hljs-string\">\"TIME_WAIT | CLOSE_WAIT | ESTABLISHED\"</span>\n</code></pre>\n<p>참고: netstat은 네트워크 연결 문제를 추적하는 데 자주 사용되는 도구이며, grep/awk와 결합하면 강력한 도구가 됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5. 사전 백업 로그에서 데이터 쿼리하기</h1>\n<p>사전 백업 서비스.2022-06-26.log.bz2 로그에서 키워드 1.2.3.4을 포함하는 항목은 몇 개인가요?</p>\n<pre><code class=\"hljs language-js\">$ bzcat service<span class=\"hljs-number\">.2022</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">26.</span>log.<span class=\"hljs-property\">bz2</span> | grep <span class=\"hljs-string\">'1.2.3.4'</span> | wc -l\n\n$ bzgrep <span class=\"hljs-string\">'1.2.3.4'</span> service<span class=\"hljs-number\">.2022</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">26.</span>log.<span class=\"hljs-property\">bz2</span> | wc -l\n\n$ less service<span class=\"hljs-number\">.2022</span>-<span class=\"hljs-number\">06</span>-<span class=\"hljs-number\">26.</span>log.<span class=\"hljs-property\">bz2</span> | grep <span class=\"hljs-string\">'10.37.9.11'</span> | wc -l\n</code></pre>\n<p>참고: 온라인 로그 파일은 일반적으로 bz2로 압축된 후 보존됩니다. 쿼리를 위해 해제하면 많은 공간과 시간이 소비됩니다. 따라서, 연구 및 개발 동료들이 숙달해야할 bzcat 및 bzgrep는 필수 도구입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>6. 백업 서비스 팁</h1>\n<p>백업을 위해 /opt/web/service_web 디렉토리를 패킹하되 로그 디렉토리는 제외하고, 패킹한 파일을 /opt/backup 디렉토리에 저장하세요.</p>\n<pre><code class=\"hljs language-js\">$ tar -zcvf /opt/backup/service_web.<span class=\"hljs-property\">tar</span>.<span class=\"hljs-property\">gz</span> \\\n    -exclude /opt/web/service_web/logs \\\n    /opt/web/service_web\n</code></pre>\n<p>참고: 이 명령은 온라인 애플리케이션에서 흔히 사용됩니다. 프로젝트를 패킹하고 이전해야 할 때 로그 디렉토리를 제외해야 할 때가 종종 있습니다. 이런 시나리오에서는 <code>exclude</code> 매개변수를 잘 활용하는 것이 중요합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>7. 쓰레드 카운트 조회</h1>\n<p>서버의 서비스를 위해 실행 중인 전체 쓰레드 수를 조회합니다. 기계의 쓰레드 수가 경고 임계값을 초과할 때 해당 프로세스와 쓰레드 정보를 빠르게 식별해야 합니다.</p>\n<pre><code class=\"hljs language-js\">$ ps -eLf | wc -l\n\n$ pstree -p | wc -l\n</code></pre>\n<h1>8. 디스크 경고, 가장 큰 파일 비우기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>많은 예외 로그 파일을 찾아 서버에서 실행 중인 Tomcat 서버에서 생성된 파일을 공간을 확보하세요. 파일에 \"log\" 키워드가 포함되어 있고 1GB보다 큰 경우를 가정합니다.</p>\n<p>단계 1: 파일 찾기.</p>\n<pre><code class=\"hljs language-js\">$ find / -type f -name <span class=\"hljs-string\">\"*log*\"</span> | xargs ls -lSh | more\n\n$ du -a / | sort -rn | grep log | more\n\n$ find / -name <span class=\"hljs-string\">'*log*'</span> -size +1000M -exec du -h {} \\;\n</code></pre>\n<p>단계 2: 파일을 비우기.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>가정적으로 찾은 파일이 a.log인 경우, 해당 파일을 완전히 비우는 올바른 방법은:</p>\n<pre><code class=\"hljs language-js\">$ echo <span class=\"hljs-string\">\"\"</span> > a.<span class=\"hljs-property\">log</span>\n</code></pre>\n<p>이렇게 하면 파일 공간이 즉시 해제됩니다.</p>\n<p>많은 사람들이 사용하는 방법:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">$ rm -rf a.<span class=\"hljs-property\">log</span>\n</code></pre>\n<p>파일을 삭제하면서도 Tomcat 서비스가 여전히 실행 중인 경우 공간이 즉시 해제되지 않을 수 있습니다. 공간을 확보하려면 Tomcat을 다시 시작해야 합니다.</p>\n<h1>9. 파일 표시, 주석 필터링</h1>\n<p>서버.conf 파일을 표시하고 #로 시작하는 주석 줄을 마스킹합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">$ sed -n <span class=\"hljs-string\">'/^[#]/!p'</span> server.<span class=\"hljs-property\">conf</span>\n\n$ sed -e <span class=\"hljs-string\">'/^#/d'</span> server.<span class=\"hljs-property\">conf</span>\n\n$ grep -v <span class=\"hljs-string\">\"^#\"</span> server.<span class=\"hljs-property\">conf</span>\n</code></pre>\n<h1>10. 디스크 IO 예외 해결 방법</h1>\n<p>디스크 IO 예외, 예를 들어 느린 쓰기 또는 높은 현재 사용량과 같은 문제를 해결하는 방법을 알아보세요. 높은 디스크 IO 예외를 일으키는 프로세스 ID를 식별해야 합니다.</p>\n<p>단계 1:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-sh\">$ iotop -o\n</code></pre>\n<p>현재 디스크에 쓰기 중인 모든 프로세스 ID를 보십시오.</p>\n<p>단계 2: 만약 쓰기 표시기가 낮고 주요 쓰기 작업이 거의 없다면, 디스크 자체를 확인해야 합니다. 시스템을 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-sh\">$ dmesg\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>차후에 한 번 <code>/var/log/message</code> 파일을 확인해보세요. 여기에 어떤 디스크 오류 메시지가 있는지 확인할 수 있어요. 동시에, 쓰기 속도가 느린 디스크에 빈 파일을 만들어보세요. 디스크의 고장으로 인해 쓰기가 안 되는지 확인할 수 있어요.</p>\n</body>\n</html>\n"},"__N_SSG":true}