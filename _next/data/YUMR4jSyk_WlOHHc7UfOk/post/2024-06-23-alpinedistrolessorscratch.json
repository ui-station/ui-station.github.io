{"pageProps":{"post":{"title":"Alpine, Distroless, 아니면 Scratch 도커 이미지 선택 가이드","description":"","date":"2024-06-23 00:36","slug":"2024-06-23-alpinedistrolessorscratch","content":"\n저는 최근 온라인 부티크 샘플 앱의 4개 Golang 앱을 알파인에서 스크래치로 이주했어요. 그런 과정에서 배운 멋진 것들이 있습니다.\n\n알파인은 우리의 컨테이너화된 애플리케이션의 컨테이너 이미지 크기를 줄이는 데 인기 있는 이미지입니다. 그로 인해 보안 상태도 개선됩니다(공격 표면이 적고 CVE가 적습니다).\n\n하지만 이것만으로 충분하지는 않아요. 알파인에는 아직 취약점이 있는 패키지가 포함되어 있고, busybox와 wget이 있어서 프로덕션 환경에 적합하지 않은 것이죠.\n\n알파인보다 더 나은 것을 할 수 있을까요? 그럼! distroless가 도움이 될 거에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 많고 더 나은 것을 할 수 있을까요? 네! scratch가 도움이 될 수 있어요.\n\n이 세 가지 이미지 간의 차이를 살펴봅시다.\n\n이를 위해 Kelsey Hightower의 helloworld 앱을 사용하고 scratch를 사용하여 테스트해보겠지만, 알파인 및 distroless로도 테스트를 수행할 거에요.\n\n```js\nFROM golang:1.22\nWORKDIR /go/src/github.com/kelseyhightower/app/\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build .\n\n# FROM alpine\n# FROM gcr.io/distroless/static\n# FROM cgr.dev/chainguard/static\nFROM scratch\nCOPY --from=0 /go/src/github.com/kelseyhightower/app/helloworld .\nENTRYPOINT [\"/helloworld\"]\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 크기\n\n다양한 변형의 컨테이너 이미지를 빌드한 후에 이제 크기를 비교해봅시다:\n\n```js\nREPOSITORY   TAG          IMAGE ID       CREATED          SIZE\nhelloworld   alpine       2c2991efd7cd   7 minutes ago    14.4MB\nhelloworld   distroless   08308f5bc54d   16 minutes ago   9.03MB\nhelloworld   chainguard   eaa8a9d18fef   8 seconds ago    7.79MB\nhelloworld   scratch      287ad0140c46   32 minutes ago   7.04MB\n```\n\n모두 매우 가벼우며 작습니다. Alpine은 더 크며, 더 많은 패키지를 제공하기 때문에 Scratch보다 두 배 더 큽니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 블로그 포스트인 \"이미지 크기는 핵심이 아니다\"는 이미지 크기에만 집중해서는 안 된다는 이유를 설명합니다. 작은 컨테이너 이미지를 가지는 것은 종종 성능이 더 우수하고 보안 수준이 높다는 좋은 신호입니다.\n\n# 패키지\n\n이제 빌드된 이 컨테이너 이미지에 포함된 패키지를 비교해 보겠습니다. 이를 위해 syft를 사용해 봅시다.\n\n알파인 (17 개 패키지):\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n이름                    버전               유형\nalpine-baselayout       3.4.3-r2              apk\nalpine-baselayout-data  3.4.3-r2              apk\nalpine-keys             2.4-r1                apk\napk-tools               2.14.0-r5             apk\nbusybox                 1.36.1-r15            apk\nbusybox-binsh           1.36.1-r15            apk\nca-certificates-bundle  20230506-r0           apk\nhelloworld              (devel)               go-module\nlibc-utils              0.7.2-r5              apk\nlibcrypto3              3.1.4-r5              apk\nlibssl3                 3.1.4-r5              apk\nmusl                    1.2.4_git20230717-r4  apk\nmusl-utils              1.2.4_git20230717-r4  apk\nscanelf                 1.3.7-r2              apk\nssl_client              1.36.1-r15            apk\nstdlib                  go1.22.2              go-module\nzlib                    1.3.1-r0              apk\n```\n\ndistroless (5 개):\n\n```js\n이름        버전          유형\nbase-files  12.4+deb12u5     deb\nhelloworld  (devel)          go-module\nnetbase     6.4              deb\nstdlib      go1.22.2         go-module\ntzdata      2024a-0+deb12u1  deb\n```\n\nchainguard (7 개):\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n이름                    버전                    유형\n알파인-베이스레이아웃-데이터  3.6.4-r0                 apk\n알파인-키               2.4-r1                   apk\n알파인-릴리스            3.20.0_alpha20240329-r0  apk\nCA-인증서 번들         20240226-r0              apk\n헬로우월드              (개발 중)                  go-모듈\n표준 라이브러리          go1.22.2                 go-모듈\n시간대 데이터            2024a-r1                 apk\n```\n\n기본 (2 개의 패키지):\n\n```js\n이름        버전   유형\n헬로우월드  (개발 중)   go-모듈\n표준      go1.22.2  go-모듈\n```\n\n우리는 이제 이들을 우리의 필요에 맞게 현명하게 사용할 수 있어요. 사용하는 프로그래밍 언어에 따라 무엇이 들어있는지 정확히 알아야 하는 것이 정말 멋지고 중요하죠?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# CVEs\n\n불필요한 종속성과 패키지의 수를 줄이면 유지 보수 시간과 관련된 CVEs 업데이트로부터 오는 피로를 줄일 수 있어요.\n\n만약 trivy와 같은 도구를 사용한다면, 이 블로그 글을 작성할 때 alpine만 CVEs가 있는 것을 확인할 수 있어요:\n\n```js\nhelloworld:alpine (alpine 3.19.1)\n=================================\nTotal: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\n|  라이브러리 | 취약점 | 심각도 | 상태 | 설치된 버전 | 수정된 버전 | 제목 |\n|----------|----------|--------|------|-----------------|-----------------|------------------------------------------------------------------|\n| libcrypto3 | CVE-2024-2511 | LOW | fixed | 3.1.4-r5 | 3.1.4-r6 | openssl: Unbounded memory growth with session handling in TLSv1.3 |\n| | | | | | | [자세히 보기](https://avd.aquasec.com/nvd/cve-2024-2511) |\n| libssl3 | | | | | | |\n| | | | | | | |\n| | | | | | | |\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예시에서는 낮은 수준의 보안이지만 그래도 중요합니다. 여전히 자신의 앱 패키지의 CVEs를 다루어야 하므로 기본 이미지에서 이를 제거하는 것은 항상 큰 이점입니다.\n\n# 더 많은 보안\n\n다음 명령어를 사용하여 모두를 특권 없이 실행하는 것은 어려움이 없습니다. 모두 성공적으로 작동합니다:\n\n```js\ndocker run \\\n    -d \\\n    -p 8080:8080 \\\n    --read-only \\\n    --cap-drop=ALL \\\n    --user=65532 \\\n    CONTAINER_IMAGE\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그리고 docker exec 또는 kubectl exec를 실행할 수 있는 유일한 컨테이너 이미지는 alpine 이미지입니다. 다른 이미지들은 셸을 갖고 있지 않기 때문에 이 작업을 허용하지 않습니다. 보안적인 측면에서 셸이 없는 것은 보안 포지션을 개선하는 좋은 실천법이죠 (다시 말해, 공격 표면을 줄입니다).\n\n# 이것으로 마치겠습니다!\n\n만약 정적으로 컴파일된 Golang 또는 Rust 앱을 사용한다면, scratch를 사용하세요. ca-certificates나 tzdata와 같은 것이 필요하다면 gcr.io/distroless/static 또는 cgr.dev/chainguard/static을 선택하세요.\n\n이것이 바로 쿠버네티스 프로젝트가 이미 4년간 진행해 온 작업입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 libc가 필요하다면 gcr.io/distroless/base-nossl 또는 libssl이 포함된 gcr.io/distroless/base를 사용할 수 있어요.\n\n또한 Java, .NET, Python 등 다른 유형의 앱을 위한 더 많은 컨테이너 이미지들도 있어요.\n\ndistroless 주변에서 더 많은 노력들도 있어요:\n\n- Chainguard는 중요한 역할을 하는데, 그들은 많은 distroless 이미지를 가지고 있어요.\n- RedHat은 UBI Micro를 가지고 있어요.\n- Ubuntu는 Chiseled을 가지고 있어요 — 이제 Microsoft가 dotnet 컨테이너 이미지와 함께 포함시켰어요. 예를 들어, 저는 이 컨테이너와 다른 컨테이너를 alpine에서 chiseled로 마이그레이션 했어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n또한, 클러스터 내에서 배포하는 외부 컨테이너에는 distroless flavor를 요청하십시오. 예를 들어, Jib를 사용하는 경우, 이제 distroless를 기본으로 사용합니다. Istio의 경우 Istio 사이드카 프록시에 distroless를 선택적으로 사용할 수 있습니다.\n\ndistrolesss를 사용하면 컨테이너에 대한 디버깅 기능이 제거됩니다(쉘 없음, 패키지 관리자 없음, wget/curl 없음). 하지만 생산 환경에서 디버그 모드로 진입하는 것은 좋지 않은 실천 방법입니다(잠재적 해커에게 더 많은 도구를 제공하기 때문입니다). 대신에 kubernetes debug 또는 initContainers와 같은 기능을 사용할 수도 있습니다. 필요한 경우에는요.\n\n# 리소스\n\n- scratch for checkout, frontend, productcatalog and shipping by mathieu-benoit · Pull Request #2512 · GoogleCloudPlatform/microservices-demo (github.com)\n- Is Your Container Image Really Distroless? | Docker\n- erickduran/docker-distroless-poc: A simple Proof of Concept of a vulnerable web app using a distroless image and Python. (github.com)\n- Chiselled Ubuntu containers: the benefits of combining Distroless and Ubuntu | Ubuntu\n- Why I Will Never Use Alpine Linux Ever Again | by Martin Heinz | Better Programming\n","ogImage":{"url":"/assets/img/2024-06-23-alpinedistrolessorscratch_0.png"},"coverImage":"/assets/img/2024-06-23-alpinedistrolessorscratch_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>저는 최근 온라인 부티크 샘플 앱의 4개 Golang 앱을 알파인에서 스크래치로 이주했어요. 그런 과정에서 배운 멋진 것들이 있습니다.</p>\n<p>알파인은 우리의 컨테이너화된 애플리케이션의 컨테이너 이미지 크기를 줄이는 데 인기 있는 이미지입니다. 그로 인해 보안 상태도 개선됩니다(공격 표면이 적고 CVE가 적습니다).</p>\n<p>하지만 이것만으로 충분하지는 않아요. 알파인에는 아직 취약점이 있는 패키지가 포함되어 있고, busybox와 wget이 있어서 프로덕션 환경에 적합하지 않은 것이죠.</p>\n<p>알파인보다 더 나은 것을 할 수 있을까요? 그럼! distroless가 도움이 될 거에요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>더 많고 더 나은 것을 할 수 있을까요? 네! scratch가 도움이 될 수 있어요.</p>\n<p>이 세 가지 이미지 간의 차이를 살펴봅시다.</p>\n<p>이를 위해 Kelsey Hightower의 helloworld 앱을 사용하고 scratch를 사용하여 테스트해보겠지만, 알파인 및 distroless로도 테스트를 수행할 거에요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">golang</span>:<span class=\"hljs-number\">1.22</span>\n<span class=\"hljs-variable constant_\">WORKDIR</span> /go/src/github.<span class=\"hljs-property\">com</span>/kelseyhightower/app/\n<span class=\"hljs-variable constant_\">COPY</span> . .\n<span class=\"hljs-variable constant_\">RUN</span> <span class=\"hljs-variable constant_\">CGO_ENABLED</span>=<span class=\"hljs-number\">0</span> <span class=\"hljs-variable constant_\">GOOS</span>=linux go build .\n\n# <span class=\"hljs-variable constant_\">FROM</span> alpine\n# <span class=\"hljs-variable constant_\">FROM</span> gcr.<span class=\"hljs-property\">io</span>/distroless/<span class=\"hljs-keyword\">static</span>\n# <span class=\"hljs-variable constant_\">FROM</span> cgr.<span class=\"hljs-property\">dev</span>/chainguard/<span class=\"hljs-keyword\">static</span>\n<span class=\"hljs-variable constant_\">FROM</span> scratch\n<span class=\"hljs-variable constant_\">COPY</span> --<span class=\"hljs-keyword\">from</span>=<span class=\"hljs-number\">0</span> /go/src/github.<span class=\"hljs-property\">com</span>/kelseyhightower/app/helloworld .\n<span class=\"hljs-variable constant_\">ENTRYPOINT</span> [<span class=\"hljs-string\">\"/helloworld\"</span>]\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>크기</h1>\n<p>다양한 변형의 컨테이너 이미지를 빌드한 후에 이제 크기를 비교해봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">REPOSITORY</span>   <span class=\"hljs-variable constant_\">TAG</span>          <span class=\"hljs-variable constant_\">IMAGE</span> <span class=\"hljs-variable constant_\">ID</span>       <span class=\"hljs-variable constant_\">CREATED</span>          <span class=\"hljs-variable constant_\">SIZE</span>\nhelloworld   alpine       2c2991efd7cd   <span class=\"hljs-number\">7</span> minutes ago    <span class=\"hljs-number\">14.</span>4MB\nhelloworld   distroless   08308f5bc54d   <span class=\"hljs-number\">16</span> minutes ago   <span class=\"hljs-number\">9.</span>03MB\nhelloworld   chainguard   eaa8a9d18fef   <span class=\"hljs-number\">8</span> seconds ago    <span class=\"hljs-number\">7.</span>79MB\nhelloworld   scratch      287ad0140c46   <span class=\"hljs-number\">32</span> minutes ago   <span class=\"hljs-number\">7.</span>04MB\n</code></pre>\n<p>모두 매우 가벼우며 작습니다. Alpine은 더 크며, 더 많은 패키지를 제공하기 때문에 Scratch보다 두 배 더 큽니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 블로그 포스트인 \"이미지 크기는 핵심이 아니다\"는 이미지 크기에만 집중해서는 안 된다는 이유를 설명합니다. 작은 컨테이너 이미지를 가지는 것은 종종 성능이 더 우수하고 보안 수준이 높다는 좋은 신호입니다.</p>\n<h1>패키지</h1>\n<p>이제 빌드된 이 컨테이너 이미지에 포함된 패키지를 비교해 보겠습니다. 이를 위해 syft를 사용해 봅시다.</p>\n<p>알파인 (17 개 패키지):</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">이름                    버전               유형\nalpine-baselayout       <span class=\"hljs-number\">3.4</span><span class=\"hljs-number\">.3</span>-r2              apk\nalpine-baselayout-data  <span class=\"hljs-number\">3.4</span><span class=\"hljs-number\">.3</span>-r2              apk\nalpine-keys             <span class=\"hljs-number\">2.4</span>-r1                apk\napk-tools               <span class=\"hljs-number\">2.14</span><span class=\"hljs-number\">.0</span>-r5             apk\nbusybox                 <span class=\"hljs-number\">1.36</span><span class=\"hljs-number\">.1</span>-r15            apk\nbusybox-binsh           <span class=\"hljs-number\">1.36</span><span class=\"hljs-number\">.1</span>-r15            apk\nca-certificates-bundle  <span class=\"hljs-number\">20230506</span>-r0           apk\nhelloworld              (devel)               go-<span class=\"hljs-variable language_\">module</span>\nlibc-utils              <span class=\"hljs-number\">0.7</span><span class=\"hljs-number\">.2</span>-r5              apk\nlibcrypto3              <span class=\"hljs-number\">3.1</span><span class=\"hljs-number\">.4</span>-r5              apk\nlibssl3                 <span class=\"hljs-number\">3.1</span><span class=\"hljs-number\">.4</span>-r5              apk\nmusl                    <span class=\"hljs-number\">1.2</span>.4_git20230717-r4  apk\nmusl-utils              <span class=\"hljs-number\">1.2</span>.4_git20230717-r4  apk\nscanelf                 <span class=\"hljs-number\">1.3</span><span class=\"hljs-number\">.7</span>-r2              apk\nssl_client              <span class=\"hljs-number\">1.36</span><span class=\"hljs-number\">.1</span>-r15            apk\nstdlib                  go1<span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.2</span>              go-<span class=\"hljs-variable language_\">module</span>\nzlib                    <span class=\"hljs-number\">1.3</span><span class=\"hljs-number\">.1</span>-r0              apk\n</code></pre>\n<p>distroless (5 개):</p>\n<pre><code class=\"hljs language-js\">이름        버전          유형\nbase-files  <span class=\"hljs-number\">12.4</span>+deb12u5     deb\nhelloworld  (devel)          go-<span class=\"hljs-variable language_\">module</span>\nnetbase     <span class=\"hljs-number\">6.4</span>              deb\nstdlib      go1<span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.2</span>         go-<span class=\"hljs-variable language_\">module</span>\ntzdata      2024a-<span class=\"hljs-number\">0</span>+deb12u1  deb\n</code></pre>\n<p>chainguard (7 개):</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">이름                    버전                    유형\n알파인-베이스레이아웃-데이터  <span class=\"hljs-number\">3.6</span><span class=\"hljs-number\">.4</span>-r0                 apk\n알파인-키               <span class=\"hljs-number\">2.4</span>-r1                   apk\n알파인-릴리스            <span class=\"hljs-number\">3.20</span>.0_alpha20240329-r0  apk\n<span class=\"hljs-variable constant_\">CA</span>-인증서 번들         <span class=\"hljs-number\">20240226</span>-r0              apk\n헬로우월드              (개발 중)                  go-모듈\n표준 라이브러리          go1<span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.2</span>                 go-모듈\n시간대 데이터            2024a-r1                 apk\n</code></pre>\n<p>기본 (2 개의 패키지):</p>\n<pre><code class=\"hljs language-js\">이름        버전   유형\n헬로우월드  (개발 중)   go-모듈\n표준      go1<span class=\"hljs-number\">.22</span><span class=\"hljs-number\">.2</span>  go-모듈\n</code></pre>\n<p>우리는 이제 이들을 우리의 필요에 맞게 현명하게 사용할 수 있어요. 사용하는 프로그래밍 언어에 따라 무엇이 들어있는지 정확히 알아야 하는 것이 정말 멋지고 중요하죠?</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>CVEs</h1>\n<p>불필요한 종속성과 패키지의 수를 줄이면 유지 보수 시간과 관련된 CVEs 업데이트로부터 오는 피로를 줄일 수 있어요.</p>\n<p>만약 trivy와 같은 도구를 사용한다면, 이 블로그 글을 작성할 때 alpine만 CVEs가 있는 것을 확인할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">helloworld</span>:alpine (alpine <span class=\"hljs-number\">3.19</span><span class=\"hljs-number\">.1</span>)\n=================================\n<span class=\"hljs-title class_\">Total</span>: <span class=\"hljs-number\">2</span> (<span class=\"hljs-attr\">UNKNOWN</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">LOW</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">MEDIUM</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">HIGH</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">CRITICAL</span>: <span class=\"hljs-number\">0</span>)\n\n|  라이브러리 | 취약점 | 심각도 | 상태 | 설치된 버전 | 수정된 버전 | 제목 |\n|----------|----------|--------|------|-----------------|-----------------|------------------------------------------------------------------|\n| libcrypto3 | <span class=\"hljs-variable constant_\">CVE</span>-<span class=\"hljs-number\">2024</span>-<span class=\"hljs-number\">2511</span> | <span class=\"hljs-variable constant_\">LOW</span> | fixed | <span class=\"hljs-number\">3.1</span><span class=\"hljs-number\">.4</span>-r5 | <span class=\"hljs-number\">3.1</span><span class=\"hljs-number\">.4</span>-r6 | <span class=\"hljs-attr\">openssl</span>: <span class=\"hljs-title class_\">Unbounded</span> memory growth <span class=\"hljs-keyword\">with</span> session handling <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title class_\">TLSv1</span><span class=\"hljs-number\">.3</span> |\n| | | | | | | [자세히 보기](<span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//avd.aquasec.com/nvd/cve-2024-2511) |</span>\n| libssl3 | | | | | | |\n| | | | | | | |\n| | | | | | | |\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 예시에서는 낮은 수준의 보안이지만 그래도 중요합니다. 여전히 자신의 앱 패키지의 CVEs를 다루어야 하므로 기본 이미지에서 이를 제거하는 것은 항상 큰 이점입니다.</p>\n<h1>더 많은 보안</h1>\n<p>다음 명령어를 사용하여 모두를 특권 없이 실행하는 것은 어려움이 없습니다. 모두 성공적으로 작동합니다:</p>\n<pre><code class=\"hljs language-js\">docker run \\\n    -d \\\n    -p <span class=\"hljs-number\">8080</span>:<span class=\"hljs-number\">8080</span> \\\n    --read-only \\\n    --cap-drop=<span class=\"hljs-variable constant_\">ALL</span> \\\n    --user=<span class=\"hljs-number\">65532</span> \\\n    <span class=\"hljs-variable constant_\">CONTAINER_IMAGE</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그리고 docker exec 또는 kubectl exec를 실행할 수 있는 유일한 컨테이너 이미지는 alpine 이미지입니다. 다른 이미지들은 셸을 갖고 있지 않기 때문에 이 작업을 허용하지 않습니다. 보안적인 측면에서 셸이 없는 것은 보안 포지션을 개선하는 좋은 실천법이죠 (다시 말해, 공격 표면을 줄입니다).</p>\n<h1>이것으로 마치겠습니다!</h1>\n<p>만약 정적으로 컴파일된 Golang 또는 Rust 앱을 사용한다면, scratch를 사용하세요. ca-certificates나 tzdata와 같은 것이 필요하다면 gcr.io/distroless/static 또는 cgr.dev/chainguard/static을 선택하세요.</p>\n<p>이것이 바로 쿠버네티스 프로젝트가 이미 4년간 진행해 온 작업입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>만약 libc가 필요하다면 gcr.io/distroless/base-nossl 또는 libssl이 포함된 gcr.io/distroless/base를 사용할 수 있어요.</p>\n<p>또한 Java, .NET, Python 등 다른 유형의 앱을 위한 더 많은 컨테이너 이미지들도 있어요.</p>\n<p>distroless 주변에서 더 많은 노력들도 있어요:</p>\n<ul>\n<li>Chainguard는 중요한 역할을 하는데, 그들은 많은 distroless 이미지를 가지고 있어요.</li>\n<li>RedHat은 UBI Micro를 가지고 있어요.</li>\n<li>Ubuntu는 Chiseled을 가지고 있어요 — 이제 Microsoft가 dotnet 컨테이너 이미지와 함께 포함시켰어요. 예를 들어, 저는 이 컨테이너와 다른 컨테이너를 alpine에서 chiseled로 마이그레이션 했어요.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>또한, 클러스터 내에서 배포하는 외부 컨테이너에는 distroless flavor를 요청하십시오. 예를 들어, Jib를 사용하는 경우, 이제 distroless를 기본으로 사용합니다. Istio의 경우 Istio 사이드카 프록시에 distroless를 선택적으로 사용할 수 있습니다.</p>\n<p>distrolesss를 사용하면 컨테이너에 대한 디버깅 기능이 제거됩니다(쉘 없음, 패키지 관리자 없음, wget/curl 없음). 하지만 생산 환경에서 디버그 모드로 진입하는 것은 좋지 않은 실천 방법입니다(잠재적 해커에게 더 많은 도구를 제공하기 때문입니다). 대신에 kubernetes debug 또는 initContainers와 같은 기능을 사용할 수도 있습니다. 필요한 경우에는요.</p>\n<h1>리소스</h1>\n<ul>\n<li>scratch for checkout, frontend, productcatalog and shipping by mathieu-benoit · Pull Request #2512 · GoogleCloudPlatform/microservices-demo (github.com)</li>\n<li>Is Your Container Image Really Distroless? | Docker</li>\n<li>erickduran/docker-distroless-poc: A simple Proof of Concept of a vulnerable web app using a distroless image and Python. (github.com)</li>\n<li>Chiselled Ubuntu containers: the benefits of combining Distroless and Ubuntu | Ubuntu</li>\n<li>Why I Will Never Use Alpine Linux Ever Again | by Martin Heinz | Better Programming</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}