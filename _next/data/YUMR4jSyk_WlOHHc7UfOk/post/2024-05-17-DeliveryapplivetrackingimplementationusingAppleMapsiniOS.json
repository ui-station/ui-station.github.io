{"pageProps":{"post":{"title":"iOS에서 Apple Maps를 사용하여 배송 앱 실시간 추적 구현","description":"","date":"2024-05-17 17:57","slug":"2024-05-17-DeliveryapplivetrackingimplementationusingAppleMapsiniOS","content":"\nUIKit 및 MapKit을 사용하여 Apple 지도에서 라이브 추적 구현을 성취했습니다.\n\n[GitHub Repo](https://github.com/VSofficial/Zomato-Live-tracking-Clone-iOS-)\n\n[YouTube](https://www.youtube.com/shorts/Qzi_vZw4p4Q)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지도에서 MKAnnoatation을 사용하여 사용자 정의 주석(맵 마커)을 정의하는 것으로 시작해 봅시다.\n\n```js\nclass CustomAnnotation: NSObject, MKAnnotation {\n    var coordinate: CLLocationCoordinate2D\n    var title: String?\n    private let pathCoordinates: [CLLocationCoordinate2D]\n\n    init(coordinates: [CLLocationCoordinate2D], title: String?) {\n        self.coordinate = coordinates.first ?? CLLocationCoordinate2D(latitude: 0, longitude: 0)\n        self.title = title\n        self.pathCoordinates = coordinates\n        super.init()\n    }\n}\n```\n\n그런 다음 맵에서 마커의 사용자 정의 뷰(심볼)를 생성합니다.\n\n```js\n// 지도의 주석용 사용자 정의 뷰\npublic class CustomAnnotationView: MKAnnotationView {\n    override init(annotation: MKAnnotation?, reuseIdentifier: String?) {\n        super.init(annotation: annotation, reuseIdentifier: reuseIdentifier)\n        self.image = UIImage(named: \"delivery\")\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 우리가 MKMapViewDelegate를 사용하여 맵에 사용자 정의 주석을 구현하는 부분으로 넘어가 봅시다.\n\n```swift\nextension ViewController: MKMapViewDelegate {\n\n    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n        guard let annotation = annotation as? CustomAnnotation else {\n            return nil\n        }\n        let identifier = \"CustomAnnotationView\"\n        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier) as? MKPinAnnotationView\n\n        if annotationView == nil {\n            annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n            annotationView?.canShowCallout = true\n        } else {\n            annotationView?.annotation = annotation\n        }\n        return annotationView\n    }\n}\n```\n\n다음으로 리다라를 따라가며\n\n```swift\nextension ViewController {\n    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {\n        if overlay is MKPolyline {\n            let renderer = MKPolylineRenderer(overlay: overlay)\n            renderer.strokeColor = UIColor.systemTeal\n            renderer.lineWidth = 6\n            return renderer\n        }\n        return MKOverlayRenderer(overlay: overlay)\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 코드는 지도에 이동 (배송) 경로를 포함하는 스트로크 라인을 보여주는 데 도움이 됩니다.\n\n이제, 주요 기능이 구현된 섹션으로 이동해 보겠습니다.\n\n```js\n// MapKit에서 지도의 주요 구성\n    private func configureMap() {\n        mapView.delegate = self\n\n        let pathCoordinates = [\n            CLLocationCoordinate2D(latitude: Double(startLatitude)!, longitude: Double(startLongitude)!),\n            CLLocationCoordinate2D(latitude: Double(endLatitude)!, longitude: Double(endLongitude)!),\n        ]\n\n        let annotation = CustomAnnotation(coordinates: pathCoordinates, title: \"Moving Pins\")\n        mapView.addAnnotation(annotation)\n\n        let regionRadius: CLLocationDistance = 350\n        let region = MKCoordinateRegion(center: pathCoordinates.first!, latitudinalMeters: regionRadius, longitudinalMeters: regionRadius)\n\n        let request = MKDirections.Request()\n        request.source = MKMapItem(placemark: MKPlacemark(coordinate: pathCoordinates[0]))\n        request.destination = MKMapItem(placemark: MKPlacemark(coordinate: pathCoordinates[1]))\n        request.transportType = .automobile\n\n        let directions = MKDirections(request: request)\n        directions.calculate { (response, error) in\n            guard let route = response?.routes.first else {\n                if let error = error {\n                    print(\"방향을 가져오는 중 에러 발생: \\(error.localizedDescription)\")\n                }\n                return\n            }\n            self.mapView.addOverlay(route.polyline)\n            self.addPinAndFollowRoute(route: route, duration: TimeInterval(self.timedVariable))\n        }\n        mapView.setRegion(region, animated: true)\n    }\n\n    // 배달원용 경로 따르는 알고리즘\n    func addPinAndFollowRoute(route: MKRoute, duration: TimeInterval) {\n        let pin = MKPointAnnotation()\n        pin.coordinate = route.polyline.coordinate\n        mapView.addAnnotation(pin)\n\n        var elapsedTime: TimeInterval = 0.0\n        let totalDuration = duration\n        let pointCount = route.polyline.pointCount\n\n        Timer.scheduledTimer(withTimeInterval: 0.01, repeats: true) { timer in\n            elapsedTime += 0.01\n\n            if elapsedTime >= totalDuration {\n                self.showAlert()\n                self.ordertitle.text = \"주문 배달 완료!! 🎉🎉 \"\n                timer.invalidate()\n                return\n            }\n\n            let fraction = elapsedTime / totalDuration\n            let index = Int(fraction * Double(pointCount - 1))\n\n            if index < pointCount - 1 {\n                let startCoordinate = route.polyline.points()[index].coordinate\n                let endCoordinate = route.polyline.points()[index + 1].coordinate\n                let interpolatedCoordinate = self.interpolateCoordinate(startCoordinate, endCoordinate, fraction)\n\n                UIView.animate(withDuration: 0.01) { // 부드러운 이동을 위한 애니메이션 시간 감소\n                    pin.coordinate = interpolatedCoordinate\n                }\n            }\n        }\n    }\n\n    func interpolateCoordinate(_ start: CLLocationCoordinate2D, _ end: CLLocationCoordinate2D, _ fraction: Double) -> CLLocationCoordinate2D {\n        let lat = start.latitude + (end.latitude - start.latitude) * fraction\n        let lon = start.longitude + (end.longitude - start.longitude) * fraction\n        return CLLocationCoordinate2D(latitude: lat, longitude: lon)\n    }\n\n    // 주문 배달 메시지\n    func showAlert() {\n          let alert = UIAlertController(title: \"주문 배달 완료\", message: \"식사를 즐기세요\", preferredStyle: .alert)\n          let okAction = UIAlertAction(title: \"확인\", style: .default) { _ in\n              // 필요하다면 확인 작업 처리\n          }\n          alert.addAction(okAction)\n          present(alert, animated: true, completion: nil)\n      }\n\n}\n```\n\npathCoordinates는 시작 및 끝 위치의 좌표를 정의합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\nregion 변수는 우리의 배송 위치가 위치한 지역만 표시하는 데 사용됩니다.\n\nfunc addPinAndFollowRoute(route: MKRoute, duration: TimeInterval)\n\n위의 함수는 경로를 따라가는 데 사용됩니다. 여행을 완료하는 데 필요한 시간과 경로를 정의할 수 있습니다.\n\nvar errorMessage: String?\nvar startLatitude: String = \"0\"\nvar startLongitude: String = \"0.0\"\nvar endLatitude: String = \"0.0\"\nvar endLongitude: String = \"0.0\"\nvar timedVariable: Int = 1\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 변수들은 ViewController에 정의되어 있으며 하드 코딩된 값이나 API 응답에서 가져온 값으로 수정할 수 있습니다.\n\nconfigureMap() 내에서 route의 정의 (이미 위 코드에 포함되어 있음)\n\n```js\nguard let route = response?.routes.first else {\n                if let error = error {\n                    print(\"Error getting directions: \\(error.localizedDescription)\")\n                }\n                return\n            }\n```\n\n그리고 여기서 우리 애플리케이션이 완료됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGitHub 저장소 및 YouTube 비디오를 첨부했어요. 코드베이스와 애플리케이션 데모를 확인해보세요!\n","ogImage":{"url":"/assets/img/2024-05-17-DeliveryapplivetrackingimplementationusingAppleMapsiniOS_0.png"},"coverImage":"/assets/img/2024-05-17-DeliveryapplivetrackingimplementationusingAppleMapsiniOS_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>UIKit 및 MapKit을 사용하여 Apple 지도에서 라이브 추적 구현을 성취했습니다.</p>\n<p><a href=\"https://github.com/VSofficial/Zomato-Live-tracking-Clone-iOS-\" rel=\"nofollow\" target=\"_blank\">GitHub Repo</a></p>\n<p><a href=\"https://www.youtube.com/shorts/Qzi_vZw4p4Q\" rel=\"nofollow\" target=\"_blank\">YouTube</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>지도에서 MKAnnoatation을 사용하여 사용자 정의 주석(맵 마커)을 정의하는 것으로 시작해 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomAnnotation</span>: <span class=\"hljs-title class_\">NSObject</span>, <span class=\"hljs-title class_\">MKAnnotation</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">coordinate</span>: <span class=\"hljs-title class_\">CLLocationCoordinate2D</span>\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">String</span>?\n    private <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">pathCoordinates</span>: [<span class=\"hljs-title class_\">CLLocationCoordinate2D</span>]\n\n    <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">coordinates: [CLLocationCoordinate2D], title: <span class=\"hljs-built_in\">String</span>?</span>) {\n        self.<span class=\"hljs-property\">coordinate</span> = coordinates.<span class=\"hljs-property\">first</span> ?? <span class=\"hljs-title class_\">CLLocationCoordinate2D</span>(<span class=\"hljs-attr\">latitude</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">longitude</span>: <span class=\"hljs-number\">0</span>)\n        self.<span class=\"hljs-property\">title</span> = title\n        self.<span class=\"hljs-property\">pathCoordinates</span> = coordinates\n        <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">init</span>()\n    }\n}\n</code></pre>\n<p>그런 다음 맵에서 마커의 사용자 정의 뷰(심볼)를 생성합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 지도의 주석용 사용자 정의 뷰</span>\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomAnnotationView</span>: <span class=\"hljs-title class_\">MKAnnotationView</span> {\n    override <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">annotation: MKAnnotation?, reuseIdentifier: <span class=\"hljs-built_in\">String</span>?</span>) {\n        <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">init</span>(<span class=\"hljs-attr\">annotation</span>: annotation, <span class=\"hljs-attr\">reuseIdentifier</span>: reuseIdentifier)\n        self.<span class=\"hljs-property\">image</span> = <span class=\"hljs-title class_\">UIImage</span>(<span class=\"hljs-attr\">named</span>: <span class=\"hljs-string\">\"delivery\"</span>)\n    }\n\n    required init?(coder <span class=\"hljs-attr\">aDecoder</span>: <span class=\"hljs-title class_\">NSCoder</span>) {\n        <span class=\"hljs-title function_\">fatalError</span>(<span class=\"hljs-string\">\"init(coder:) has not been implemented\"</span>)\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 우리가 MKMapViewDelegate를 사용하여 맵에 사용자 정의 주석을 구현하는 부분으로 넘어가 봅시다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">ViewController</span>: <span class=\"hljs-title class_\">MKMapViewDelegate</span> {\n\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">mapView</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">mapView</span>: <span class=\"hljs-type\">MKMapView</span>, <span class=\"hljs-params\">viewFor</span> <span class=\"hljs-params\">annotation</span>: <span class=\"hljs-type\">MKAnnotation</span>) -> <span class=\"hljs-type\">MKAnnotationView</span>? {\n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> annotation <span class=\"hljs-operator\">=</span> annotation <span class=\"hljs-keyword\">as?</span> <span class=\"hljs-type\">CustomAnnotation</span> <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n        }\n        <span class=\"hljs-keyword\">let</span> identifier <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"CustomAnnotationView\"</span>\n        <span class=\"hljs-keyword\">var</span> annotationView <span class=\"hljs-operator\">=</span> mapView.dequeueReusableAnnotationView(withIdentifier: identifier) <span class=\"hljs-keyword\">as?</span> <span class=\"hljs-type\">MKPinAnnotationView</span>\n\n        <span class=\"hljs-keyword\">if</span> annotationView <span class=\"hljs-operator\">==</span> <span class=\"hljs-literal\">nil</span> {\n            annotationView <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">MKPinAnnotationView</span>(annotation: annotation, reuseIdentifier: identifier)\n            annotationView<span class=\"hljs-operator\">?</span>.canShowCallout <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            annotationView<span class=\"hljs-operator\">?</span>.annotation <span class=\"hljs-operator\">=</span> annotation\n        }\n        <span class=\"hljs-keyword\">return</span> annotationView\n    }\n}\n</code></pre>\n<p>다음으로 리다라를 따라가며</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">ViewController</span> {\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">mapView</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">mapView</span>: <span class=\"hljs-type\">MKMapView</span>, <span class=\"hljs-params\">rendererFor</span> <span class=\"hljs-params\">overlay</span>: <span class=\"hljs-type\">MKOverlay</span>) -> <span class=\"hljs-type\">MKOverlayRenderer</span> {\n        <span class=\"hljs-keyword\">if</span> overlay <span class=\"hljs-keyword\">is</span> <span class=\"hljs-type\">MKPolyline</span> {\n            <span class=\"hljs-keyword\">let</span> renderer <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">MKPolylineRenderer</span>(overlay: overlay)\n            renderer.strokeColor <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UIColor</span>.systemTeal\n            renderer.lineWidth <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>\n            <span class=\"hljs-keyword\">return</span> renderer\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">MKOverlayRenderer</span>(overlay: overlay)\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 코드는 지도에 이동 (배송) 경로를 포함하는 스트로크 라인을 보여주는 데 도움이 됩니다.</p>\n<p>이제, 주요 기능이 구현된 섹션으로 이동해 보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// MapKit에서 지도의 주요 구성</span>\n    private func <span class=\"hljs-title function_\">configureMap</span>(<span class=\"hljs-params\"></span>) {\n        mapView.<span class=\"hljs-property\">delegate</span> = self\n\n        <span class=\"hljs-keyword\">let</span> pathCoordinates = [\n            <span class=\"hljs-title class_\">CLLocationCoordinate2D</span>(<span class=\"hljs-attr\">latitude</span>: <span class=\"hljs-title class_\">Double</span>(startLatitude)!, <span class=\"hljs-attr\">longitude</span>: <span class=\"hljs-title class_\">Double</span>(startLongitude)!),\n            <span class=\"hljs-title class_\">CLLocationCoordinate2D</span>(<span class=\"hljs-attr\">latitude</span>: <span class=\"hljs-title class_\">Double</span>(endLatitude)!, <span class=\"hljs-attr\">longitude</span>: <span class=\"hljs-title class_\">Double</span>(endLongitude)!),\n        ]\n\n        <span class=\"hljs-keyword\">let</span> annotation = <span class=\"hljs-title class_\">CustomAnnotation</span>(<span class=\"hljs-attr\">coordinates</span>: pathCoordinates, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"Moving Pins\"</span>)\n        mapView.<span class=\"hljs-title function_\">addAnnotation</span>(annotation)\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">regionRadius</span>: <span class=\"hljs-title class_\">CLLocationDistance</span> = <span class=\"hljs-number\">350</span>\n        <span class=\"hljs-keyword\">let</span> region = <span class=\"hljs-title class_\">MKCoordinateRegion</span>(<span class=\"hljs-attr\">center</span>: pathCoordinates.<span class=\"hljs-property\">first</span>!, <span class=\"hljs-attr\">latitudinalMeters</span>: regionRadius, <span class=\"hljs-attr\">longitudinalMeters</span>: regionRadius)\n\n        <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-title class_\">MKDirections</span>.<span class=\"hljs-title class_\">Request</span>()\n        request.<span class=\"hljs-property\">source</span> = <span class=\"hljs-title class_\">MKMapItem</span>(<span class=\"hljs-attr\">placemark</span>: <span class=\"hljs-title class_\">MKPlacemark</span>(<span class=\"hljs-attr\">coordinate</span>: pathCoordinates[<span class=\"hljs-number\">0</span>]))\n        request.<span class=\"hljs-property\">destination</span> = <span class=\"hljs-title class_\">MKMapItem</span>(<span class=\"hljs-attr\">placemark</span>: <span class=\"hljs-title class_\">MKPlacemark</span>(<span class=\"hljs-attr\">coordinate</span>: pathCoordinates[<span class=\"hljs-number\">1</span>]))\n        request.<span class=\"hljs-property\">transportType</span> = .<span class=\"hljs-property\">automobile</span>\n\n        <span class=\"hljs-keyword\">let</span> directions = <span class=\"hljs-title class_\">MKDirections</span>(<span class=\"hljs-attr\">request</span>: request)\n        directions.<span class=\"hljs-property\">calculate</span> { (response, error) <span class=\"hljs-keyword\">in</span>\n            guard <span class=\"hljs-keyword\">let</span> route = response?.<span class=\"hljs-property\">routes</span>.<span class=\"hljs-property\">first</span> <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> error = error {\n                    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"방향을 가져오는 중 에러 발생: \\(error.localizedDescription)\"</span>)\n                }\n                <span class=\"hljs-keyword\">return</span>\n            }\n            self.<span class=\"hljs-property\">mapView</span>.<span class=\"hljs-title function_\">addOverlay</span>(route.<span class=\"hljs-property\">polyline</span>)\n            self.<span class=\"hljs-title function_\">addPinAndFollowRoute</span>(<span class=\"hljs-attr\">route</span>: route, <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-title class_\">TimeInterval</span>(self.<span class=\"hljs-property\">timedVariable</span>))\n        }\n        mapView.<span class=\"hljs-title function_\">setRegion</span>(region, <span class=\"hljs-attr\">animated</span>: <span class=\"hljs-literal\">true</span>)\n    }\n\n    <span class=\"hljs-comment\">// 배달원용 경로 따르는 알고리즘</span>\n    func <span class=\"hljs-title function_\">addPinAndFollowRoute</span>(<span class=\"hljs-params\">route: MKRoute, duration: TimeInterval</span>) {\n        <span class=\"hljs-keyword\">let</span> pin = <span class=\"hljs-title class_\">MKPointAnnotation</span>()\n        pin.<span class=\"hljs-property\">coordinate</span> = route.<span class=\"hljs-property\">polyline</span>.<span class=\"hljs-property\">coordinate</span>\n        mapView.<span class=\"hljs-title function_\">addAnnotation</span>(pin)\n\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">elapsedTime</span>: <span class=\"hljs-title class_\">TimeInterval</span> = <span class=\"hljs-number\">0.0</span>\n        <span class=\"hljs-keyword\">let</span> totalDuration = duration\n        <span class=\"hljs-keyword\">let</span> pointCount = route.<span class=\"hljs-property\">polyline</span>.<span class=\"hljs-property\">pointCount</span>\n\n        <span class=\"hljs-title class_\">Timer</span>.<span class=\"hljs-title function_\">scheduledTimer</span>(<span class=\"hljs-params\">withTimeInterval: <span class=\"hljs-number\">0.01</span>, repeats: <span class=\"hljs-literal\">true</span></span>) { timer <span class=\"hljs-keyword\">in</span>\n            elapsedTime += <span class=\"hljs-number\">0.01</span>\n\n            <span class=\"hljs-keyword\">if</span> elapsedTime >= totalDuration {\n                self.<span class=\"hljs-title function_\">showAlert</span>()\n                self.<span class=\"hljs-property\">ordertitle</span>.<span class=\"hljs-property\">text</span> = <span class=\"hljs-string\">\"주문 배달 완료!! 🎉🎉 \"</span>\n                timer.<span class=\"hljs-title function_\">invalidate</span>()\n                <span class=\"hljs-keyword\">return</span>\n            }\n\n            <span class=\"hljs-keyword\">let</span> fraction = elapsedTime / totalDuration\n            <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-title class_\">Int</span>(fraction * <span class=\"hljs-title class_\">Double</span>(pointCount - <span class=\"hljs-number\">1</span>))\n\n            <span class=\"hljs-keyword\">if</span> index &#x3C; pointCount - <span class=\"hljs-number\">1</span> {\n                <span class=\"hljs-keyword\">let</span> startCoordinate = route.<span class=\"hljs-property\">polyline</span>.<span class=\"hljs-title function_\">points</span>()[index].<span class=\"hljs-property\">coordinate</span>\n                <span class=\"hljs-keyword\">let</span> endCoordinate = route.<span class=\"hljs-property\">polyline</span>.<span class=\"hljs-title function_\">points</span>()[index + <span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">coordinate</span>\n                <span class=\"hljs-keyword\">let</span> interpolatedCoordinate = self.<span class=\"hljs-title function_\">interpolateCoordinate</span>(startCoordinate, endCoordinate, fraction)\n\n                <span class=\"hljs-title class_\">UIView</span>.<span class=\"hljs-title function_\">animate</span>(<span class=\"hljs-params\">withDuration: <span class=\"hljs-number\">0.01</span></span>) { <span class=\"hljs-comment\">// 부드러운 이동을 위한 애니메이션 시간 감소</span>\n                    pin.<span class=\"hljs-property\">coordinate</span> = interpolatedCoordinate\n                }\n            }\n        }\n    }\n\n    func <span class=\"hljs-title function_\">interpolateCoordinate</span>(_ <span class=\"hljs-attr\">start</span>: <span class=\"hljs-title class_\">CLLocationCoordinate2D</span>, _ <span class=\"hljs-attr\">end</span>: <span class=\"hljs-title class_\">CLLocationCoordinate2D</span>, _ <span class=\"hljs-attr\">fraction</span>: <span class=\"hljs-title class_\">Double</span>) -> <span class=\"hljs-title class_\">CLLocationCoordinate2D</span> {\n        <span class=\"hljs-keyword\">let</span> lat = start.<span class=\"hljs-property\">latitude</span> + (end.<span class=\"hljs-property\">latitude</span> - start.<span class=\"hljs-property\">latitude</span>) * fraction\n        <span class=\"hljs-keyword\">let</span> lon = start.<span class=\"hljs-property\">longitude</span> + (end.<span class=\"hljs-property\">longitude</span> - start.<span class=\"hljs-property\">longitude</span>) * fraction\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">CLLocationCoordinate2D</span>(<span class=\"hljs-attr\">latitude</span>: lat, <span class=\"hljs-attr\">longitude</span>: lon)\n    }\n\n    <span class=\"hljs-comment\">// 주문 배달 메시지</span>\n    func <span class=\"hljs-title function_\">showAlert</span>(<span class=\"hljs-params\"></span>) {\n          <span class=\"hljs-keyword\">let</span> alert = <span class=\"hljs-title class_\">UIAlertController</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"주문 배달 완료\"</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"식사를 즐기세요\"</span>, <span class=\"hljs-attr\">preferredStyle</span>: .<span class=\"hljs-property\">alert</span>)\n          <span class=\"hljs-keyword\">let</span> okAction = <span class=\"hljs-title class_\">UIAlertAction</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">\"확인\"</span>, <span class=\"hljs-attr\">style</span>: .<span class=\"hljs-property\">default</span>) { _ <span class=\"hljs-keyword\">in</span>\n              <span class=\"hljs-comment\">// 필요하다면 확인 작업 처리</span>\n          }\n          alert.<span class=\"hljs-title function_\">addAction</span>(okAction)\n          <span class=\"hljs-title function_\">present</span>(alert, <span class=\"hljs-attr\">animated</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">completion</span>: nil)\n      }\n\n}\n</code></pre>\n<p>pathCoordinates는 시작 및 끝 위치의 좌표를 정의합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-swift\">region 변수는 우리의 배송 위치가 위치한 지역만 표시하는 데 사용됩니다.\n\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">addPinAndFollowRoute</span>(<span class=\"hljs-params\">route</span>: <span class=\"hljs-type\">MKRoute</span>, <span class=\"hljs-params\">duration</span>: <span class=\"hljs-type\">TimeInterval</span>)\n\n위의 함수는 경로를 따라가는 데 사용됩니다. 여행을 완료하는 데 필요한 시간과 경로를 정의할 수 있습니다.\n\n<span class=\"hljs-keyword\">var</span> errorMessage: <span class=\"hljs-type\">String</span>?\n<span class=\"hljs-keyword\">var</span> startLatitude: <span class=\"hljs-type\">String</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"0\"</span>\n<span class=\"hljs-keyword\">var</span> startLongitude: <span class=\"hljs-type\">String</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"0.0\"</span>\n<span class=\"hljs-keyword\">var</span> endLatitude: <span class=\"hljs-type\">String</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"0.0\"</span>\n<span class=\"hljs-keyword\">var</span> endLongitude: <span class=\"hljs-type\">String</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"0.0\"</span>\n<span class=\"hljs-keyword\">var</span> timedVariable: <span class=\"hljs-type\">Int</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 변수들은 ViewController에 정의되어 있으며 하드 코딩된 값이나 API 응답에서 가져온 값으로 수정할 수 있습니다.</p>\n<p>configureMap() 내에서 route의 정의 (이미 위 코드에 포함되어 있음)</p>\n<pre><code class=\"hljs language-js\">guard <span class=\"hljs-keyword\">let</span> route = response?.<span class=\"hljs-property\">routes</span>.<span class=\"hljs-property\">first</span> <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> error = error {\n                    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Error getting directions: \\(error.localizedDescription)\"</span>)\n                }\n                <span class=\"hljs-keyword\">return</span>\n            }\n</code></pre>\n<p>그리고 여기서 우리 애플리케이션이 완료됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>GitHub 저장소 및 YouTube 비디오를 첨부했어요. 코드베이스와 애플리케이션 데모를 확인해보세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}