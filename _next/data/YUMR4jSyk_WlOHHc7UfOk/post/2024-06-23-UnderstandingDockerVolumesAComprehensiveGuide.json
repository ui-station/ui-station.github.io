{"pageProps":{"post":{"title":"Docker 볼륨 이해하기 완벽 가이드","description":"","date":"2024-06-23 22:52","slug":"2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide","content":"\n도커(Docker)의 컨테이너는 상태를 유지하지 않고 쉽게 폐기할 수 있는 방식으로 설계되었습니다. 볼륨(Volumes)은 컨테이너가 생성하고 사용하는 데이터를 단일 컨테이너의 수명 주기를 넘어서 계속 유지하는 방법을 제공합니다. 이는 데이터베이스, 파일 저장소 및 지속적인 저장 공간이 필요한 다른 응용 프로그램에 필수적입니다.\n\n본 문서는 도커 볼륨을 생성하고 사용하는 다양한 방법을 탐구하며, 실제 응용 사례를 설명하기 위한 예제가 포함되어 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Docker Volume 소개\n\nDocker 볼륨은 Docker 컨테이너에서 생성된 데이터를 저장하고 사용하기 위해 설계된 지속적인 저장 메커니즘입니다. 이들은 데이터 수명주기를 컨테이너 수명주기와 분리하여 데이터가 컨테이너가 삭제되거나 다시 생성되더라도 손상되지 않도록 보장합니다.\n\n# Docker Volume의 종류\n\n## Named Volumes\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이름이 지정된 볼륨은 사용자가 정의한 볼륨으로, 이름으로 쉽게 참조하고 여러 컨테이너 간에 재사용할 수 있습니다. 이러한 볼륨은 Docker의 내부 볼륨 저장소에 저장됩니다.\n\n```js\ndocker volume create myVolume\ndocker run -d --name my_container -v myVolume:/data node_container\n```\n\n## 익명 볼륨\n\n이름이 지정되지 않은 볼륨은 생성된 이름이 없을 때 생성됩니다. 이러한 볼륨들은 일반적으로 컨테이너의 수명주기를 넘어서 지속되지 않아야 하는 일시적인 데이터에 사용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n도커 실행 -d --name my_container -v /data node_container\n```\n\n## 바인드 마운트\n\n바인드 마운트는 호스트 파일 시스템의 디렉터리나 파일을 컨테이너에 매핑합니다. 이를 통해 호스트 파일 시스템에 직접 액세스하여 데이터를 호스트와 컨테이너 간에 공유해야하는 시나리오에 이상적입니다.\n\n```js\n도커 실행 -d --name my_container -v /호스트/경로:/data node_container\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## tmpfs 볼륨\n\ntmpfs 볼륨은 컨테이너의 메모리에 임시 파일 시스템을 마운트합니다. 민감한 정보나 임시 파일과 같이 디스크에 쓰여서는 안 되는 비영구 데이터를 저장하는 데 유용합니다.\n\n```js\ndocker run -d --name my_container --tmpfs /data node_container\n```\n\n# Docker 볼륨 생성 및 관리\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 볼륨 만들기\n\n이름이 지정된 볼륨을 만들려면 다음 명령을 사용하세요:\n\n```js\ndocker volume create myVolume\n```\n\n## 볼륨 검사\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n볼륨을 검사하고 세부 정보를 확인하려면\n\n```js\ndocker volume inspect myVolume\n```\n\n## 볼륨 제거\n\n더 이상 필요하지 않은 볼륨을 제거하려면:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n도커 볼륨 삭제 myVolume\n```\n\n![이미지](/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_2.png)\n\n# 도커 볼륨 사용하기\n\n## 명명된 볼륨 마운트하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특정 이름의 볼륨을 컨테이너에 마운트하려면:\n\n```js\ndocker run -d -v myVolume:/app/data myImage\n```\n\n## 익명 볼륨 마운트\n\n익명 볼륨을 마운트하려면:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n도커 실행 -d -v /app/data myImage\n```\n\n## 바인드 마운트 사용하기\n\n바인드 마운트를 사용하려면 호스트 경로와 컨테이너 경로를 지정하십시오:\n\n```js\n도커 실행 -d -v /host/data:/app/data myImage\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 예시\n\n## 1. 이름있는 볼륨을 사용하여 데이터 유지하기\n\n이름이 지정된 볼륨을 생성하고 컨테이너에서 사용하기\n\n```js\ndocker volume create mydata\ndocker run -d -v mydata:/app/data myImage\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n컨테이너 내부의 /app/data 경로에 작성된 모든 데이터는 컨테이너가 삭제되더라도 유지됩니다.\n\n## 2. 컨테이너 간 데이터 공유\n\n여러 컨테이너 간 데이터를 공유하려면 명명된 볼륨을 사용할 수 있습니다:\n\n```js\ndocker volume create shared_data\ndocker run -d -v shared_data:/app/data container1\ndocker run -d -v shared_data:/app/data container2\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Understanding Docker Volumes](/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_3.png)\n\n두 컨테이너 모두 /app/data에 읽고 쓸 수 있어 데이터 공유가 가능합니다.\n\n## 개발을 위한 Bind Mount 사용\n\n호스트 디렉토리를 컨테이너에 매핑하는 Bind Mount를 사용하여 실시간 코드 변경을 가능하게 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n도커 실행 -d -v $(pwd):/app myImage\n```\n\n호스트 디렉토리의 파일에 대한 변경 사항은 즉시 컨테이너에 반영됩니다.\n\n# 간단한 Node.js 애플리케이션 예제\n\n## 단계 1: Node.js 애플리케이션 생성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저 파일에 데이터를 작성하는 간단한 Node.js 애플리케이션을 만들어봅시다:\n\n![이미지](/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_4.png)\n\n## 단계 2: Dockerfile 생성\n\n다음으로 Node.js 애플리케이션을 위한 Dockerfile을 만들어봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```docker\nFROM node:14\n\nWORKDIR /app\n\nCOPY . .\n\nCMD [\"node\", \"app.js\"]\n```\n\n## Step 3: 이제 도커 이미지를 빌드하세요\n\n![Step 3](/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_5.png)\n\n## Step 4: 컨테이너를 실행하세요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_6.png\" />\n\n- myVolume: 호스트 머신에있는 볼륨의 이름입니다.\n- :/app/data: 이는 컨테이너 내부의 마운트 포인트를 지정합니다. 이 경우 호스트의 myVolume 볼륨을 컨테이너 내부의 /app/data 디렉토리로 마운트합니다.\n\n## 단계 5: data.txt 파일의 내용을 확인합니다.\n\n<img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_7.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_8.png\" />\n\n# 도커 볼륨 사용에 대한 최상의 방법\n\n- 컨테이너 수명 주기를 초과하는 데이터에 사용할 때는 명명된 볼륨을 사용합니다.\n- 개발 목적이거나 호스트 파일에 직접 액세스해야 할 때는 바인드 마운트를 사용합니다.\n- 사용되지 않는 볼륨을 정기적으로 검사하고 정리하여 공간을 확보합니다.\n- 보안 위험을 피하기 위해 바인드 마운트를 사용할 때 올바른 액세스 권한을 보장합니다.\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n도커 볼륨은 컨테이너화된 응용 프로그램의 유연성과 효율성을 향상시키는 강력한 기능입니다. 다양한 유형의 볼륨을 이해하고 관리하는 방법을 알면 도커를 사용하여 컨테이너 내에서 데이터를 지속적으로 유지, 공유 및 관리할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>도커(Docker)의 컨테이너는 상태를 유지하지 않고 쉽게 폐기할 수 있는 방식으로 설계되었습니다. 볼륨(Volumes)은 컨테이너가 생성하고 사용하는 데이터를 단일 컨테이너의 수명 주기를 넘어서 계속 유지하는 방법을 제공합니다. 이는 데이터베이스, 파일 저장소 및 지속적인 저장 공간이 필요한 다른 응용 프로그램에 필수적입니다.</p>\n<p>본 문서는 도커 볼륨을 생성하고 사용하는 다양한 방법을 탐구하며, 실제 응용 사례를 설명하기 위한 예제가 포함되어 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Docker Volume 소개</h1>\n<p>Docker 볼륨은 Docker 컨테이너에서 생성된 데이터를 저장하고 사용하기 위해 설계된 지속적인 저장 메커니즘입니다. 이들은 데이터 수명주기를 컨테이너 수명주기와 분리하여 데이터가 컨테이너가 삭제되거나 다시 생성되더라도 손상되지 않도록 보장합니다.</p>\n<h1>Docker Volume의 종류</h1>\n<h2>Named Volumes</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이름이 지정된 볼륨은 사용자가 정의한 볼륨으로, 이름으로 쉽게 참조하고 여러 컨테이너 간에 재사용할 수 있습니다. 이러한 볼륨은 Docker의 내부 볼륨 저장소에 저장됩니다.</p>\n<pre><code class=\"hljs language-js\">docker volume create myVolume\ndocker run -d --name my_container -v <span class=\"hljs-attr\">myVolume</span>:/data node_container\n</code></pre>\n<h2>익명 볼륨</h2>\n<p>이름이 지정되지 않은 볼륨은 생성된 이름이 없을 때 생성됩니다. 이러한 볼륨들은 일반적으로 컨테이너의 수명주기를 넘어서 지속되지 않아야 하는 일시적인 데이터에 사용됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">도커 실행 -d --name my_container -v /data node_container\n</code></pre>\n<h2>바인드 마운트</h2>\n<p>바인드 마운트는 호스트 파일 시스템의 디렉터리나 파일을 컨테이너에 매핑합니다. 이를 통해 호스트 파일 시스템에 직접 액세스하여 데이터를 호스트와 컨테이너 간에 공유해야하는 시나리오에 이상적입니다.</p>\n<pre><code class=\"hljs language-js\">도커 실행 -d --name my_container -v /호스트/경로:/data node_container\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>tmpfs 볼륨</h2>\n<p>tmpfs 볼륨은 컨테이너의 메모리에 임시 파일 시스템을 마운트합니다. 민감한 정보나 임시 파일과 같이 디스크에 쓰여서는 안 되는 비영구 데이터를 저장하는 데 유용합니다.</p>\n<pre><code class=\"hljs language-js\">docker run -d --name my_container --tmpfs /data node_container\n</code></pre>\n<h1>Docker 볼륨 생성 및 관리</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>볼륨 만들기</h2>\n<p>이름이 지정된 볼륨을 만들려면 다음 명령을 사용하세요:</p>\n<pre><code class=\"hljs language-js\">docker volume create myVolume\n</code></pre>\n<h2>볼륨 검사</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>볼륨을 검사하고 세부 정보를 확인하려면</p>\n<pre><code class=\"hljs language-js\">docker volume inspect myVolume\n</code></pre>\n<h2>볼륨 제거</h2>\n<p>더 이상 필요하지 않은 볼륨을 제거하려면:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">도커 볼륨 삭제 myVolume\n</code></pre>\n<p><img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_2.png\" alt=\"이미지\"></p>\n<h1>도커 볼륨 사용하기</h1>\n<h2>명명된 볼륨 마운트하기</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>특정 이름의 볼륨을 컨테이너에 마운트하려면:</p>\n<pre><code class=\"hljs language-js\">docker run -d -v <span class=\"hljs-attr\">myVolume</span>:<span class=\"hljs-regexp\">/app/</span>data myImage\n</code></pre>\n<h2>익명 볼륨 마운트</h2>\n<p>익명 볼륨을 마운트하려면:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">도커 실행 -d -v /app/data myImage\n</code></pre>\n<h2>바인드 마운트 사용하기</h2>\n<p>바인드 마운트를 사용하려면 호스트 경로와 컨테이너 경로를 지정하십시오:</p>\n<pre><code class=\"hljs language-js\">도커 실행 -d -v /host/<span class=\"hljs-attr\">data</span>:<span class=\"hljs-regexp\">/app/</span>data myImage\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>예시</h1>\n<h2>1. 이름있는 볼륨을 사용하여 데이터 유지하기</h2>\n<p>이름이 지정된 볼륨을 생성하고 컨테이너에서 사용하기</p>\n<pre><code class=\"hljs language-js\">docker volume create mydata\ndocker run -d -v <span class=\"hljs-attr\">mydata</span>:<span class=\"hljs-regexp\">/app/</span>data myImage\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>컨테이너 내부의 /app/data 경로에 작성된 모든 데이터는 컨테이너가 삭제되더라도 유지됩니다.</p>\n<h2>2. 컨테이너 간 데이터 공유</h2>\n<p>여러 컨테이너 간 데이터를 공유하려면 명명된 볼륨을 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">docker volume create shared_data\ndocker run -d -v <span class=\"hljs-attr\">shared_data</span>:<span class=\"hljs-regexp\">/app/</span>data container1\ndocker run -d -v <span class=\"hljs-attr\">shared_data</span>:<span class=\"hljs-regexp\">/app/</span>data container2\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_3.png\" alt=\"Understanding Docker Volumes\"></p>\n<p>두 컨테이너 모두 /app/data에 읽고 쓸 수 있어 데이터 공유가 가능합니다.</p>\n<h2>개발을 위한 Bind Mount 사용</h2>\n<p>호스트 디렉토리를 컨테이너에 매핑하는 Bind Mount를 사용하여 실시간 코드 변경을 가능하게 합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">도커 실행 -d -v $(pwd):/app myImage\n</code></pre>\n<p>호스트 디렉토리의 파일에 대한 변경 사항은 즉시 컨테이너에 반영됩니다.</p>\n<h1>간단한 Node.js 애플리케이션 예제</h1>\n<h2>단계 1: Node.js 애플리케이션 생성</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>먼저 파일에 데이터를 작성하는 간단한 Node.js 애플리케이션을 만들어봅시다:</p>\n<p><img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_4.png\" alt=\"이미지\"></p>\n<h2>단계 2: Dockerfile 생성</h2>\n<p>다음으로 Node.js 애플리케이션을 위한 Dockerfile을 만들어봅시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-docker\"><span class=\"hljs-keyword\">FROM</span> node:<span class=\"hljs-number\">14</span>\n\n<span class=\"hljs-keyword\">WORKDIR</span><span class=\"bash\"> /app</span>\n\n<span class=\"hljs-keyword\">COPY</span><span class=\"bash\"> . .</span>\n\n<span class=\"hljs-keyword\">CMD</span><span class=\"bash\"> [<span class=\"hljs-string\">\"node\"</span>, <span class=\"hljs-string\">\"app.js\"</span>]</span>\n</code></pre>\n<h2>Step 3: 이제 도커 이미지를 빌드하세요</h2>\n<p><img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_5.png\" alt=\"Step 3\"></p>\n<h2>Step 4: 컨테이너를 실행하세요</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_6.png\">\n<ul>\n<li>myVolume: 호스트 머신에있는 볼륨의 이름입니다.</li>\n<li>:/app/data: 이는 컨테이너 내부의 마운트 포인트를 지정합니다. 이 경우 호스트의 myVolume 볼륨을 컨테이너 내부의 /app/data 디렉토리로 마운트합니다.</li>\n</ul>\n<h2>단계 5: data.txt 파일의 내용을 확인합니다.</h2>\n<img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_7.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-06-23-UnderstandingDockerVolumesAComprehensiveGuide_8.png\">\n<h1>도커 볼륨 사용에 대한 최상의 방법</h1>\n<ul>\n<li>컨테이너 수명 주기를 초과하는 데이터에 사용할 때는 명명된 볼륨을 사용합니다.</li>\n<li>개발 목적이거나 호스트 파일에 직접 액세스해야 할 때는 바인드 마운트를 사용합니다.</li>\n<li>사용되지 않는 볼륨을 정기적으로 검사하고 정리하여 공간을 확보합니다.</li>\n<li>보안 위험을 피하기 위해 바인드 마운트를 사용할 때 올바른 액세스 권한을 보장합니다.</li>\n</ul>\n<h1>결론</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>도커 볼륨은 컨테이너화된 응용 프로그램의 유연성과 효율성을 향상시키는 강력한 기능입니다. 다양한 유형의 볼륨을 이해하고 관리하는 방법을 알면 도커를 사용하여 컨테이너 내에서 데이터를 지속적으로 유지, 공유 및 관리할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}