{"pageProps":{"posts":[{"title":"기본 웹 애플리케이션 아키텍처와 회고 핵심 개념 및 예시","description":"","date":"2024-06-23 00:17","slug":"2024-06-23-ReflectionsandBasicWebApplicationArchitecture","content":"\n<img src=\"/assets/img/2024-06-23-ReflectionsandBasicWebApplicationArchitecture_0.png\" />\n\n둘째 주가 끝나고, GitHub와 버전 관리에 대해 많이 배웠어요!\n\n이번 주에 저는 GitHub에서 저장소를 만들고, 커맨드 라인 인터페이스(CLI)를 사용하여 컴퓨터에 복제했어요. 또한 CLI로 커밋하고 README 파일을 GitHub에 푸시하고, 새로운 브랜치를 만들고, 파일을 업데이트하고, 풀 리퀘스트를 메인 브랜치에 병합하는 등 많은 작업을 할 수 있다는 것을 발견했어요. 게다가, 컴퓨터에 아마존 웹 서비스(AWS) CLI를 설치하고 연습했어요.\n\n이번 주에 웹 애플리케이션 아키텍처의 기본을 배우고, 배운 내용을 강화하기 위해 간단한 설정을 디자인하는 데 많은 시간을 보냈어요. AWS와 어떻게 관련이 있는지 알아볼까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 웹 애플리케이션 아키텍처\n\n그렇다면, 먼저 웹 애플리케이션 아키텍처는 무엇일까요?\n\n웹 애플리케이션 아키텍처는 웹 사이트가 어떻게 구성되어 작동하는지를 나타냅니다. 세 가지 주요 구성 요소가 있습니다: 프론트엔드, 백엔드 및 데이터베이스 (아래에 만든 다이어그램 참조). 프론트엔드는 당신이 보고 클릭하는 것들인데, HTML, CSS 및 JavaScript로 만들어진 버튼이나 사진과 같은 것들입니다. 백엔드는 웹 사이트의 뇌와 같습니다. 모든 로직과 처리를 처리하며 Python이나 JavaScript와 같은 언어를 사용합니다. 데이터베이스는 모든 정보가 저장되는 곳으로, 큰 디지털 파일 캐비닛처럼 작동합니다. 이러한 부분들은 웹을 통해 서로 대화하여 웹 사이트를 사용할 때 모든 것이 원활히 작동하도록 합니다. 아래는 모든 게 어떻게 작동하는지에 대한 이미지입니다.\n\n![웹 애플리케이션 아키텍처 다이어그램](/assets/img/2024-06-23-ReflectionsandBasicWebApplicationArchitecture_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 용어 설명\n\n위 다이어그램에 포함된 내용을 더 잘 설명하기 위한 어휘 목록입니다.\n\n최종 사용자: 제품이나 서비스를 사용하는 사람입니다. 이 경우에는 웹 애플리케이션과 상호 작용하는 사람으로, 휴대폰이나 태블릿과 같은 모바일 기기를 통해 웹 애플리케이션과 상호 작용하는 사람을 의미합니다.\n\n프론트엔드: 웹사이트나 앱의 일부로, 사용자가 보고 상호 작용하는 부분을 말합니다. 화면에 나타나는 모든 것인 버튼, 그림, 텍스트, 메뉴 등을 포함합니다. HTML, CSS, JavaScript와 같은 도구를 사용하여 멋지게 보이고 매끈하게 작동하도록 만들어집니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n도메인 이름 시스템(Domain Name System)은 전화번호부와 비슷해요. www.amazon.com 같은 웹사이트를 방문하려고 할 때 브라우저에 입력하면 DNS가 빠르게 웹사이트가 저장된 위치(IP 주소)를 찾아내고 컴퓨터에게 어떻게 찾아갈 지 알려줘요. 이렇게 하면 복잡한 주소를 알 필요 없이 원하는 웹사이트에 방문할 수 있어요. AWS Route 53은 AWS가 제공하는 DNS 서비스에요.\n\n백엔드는 모든 데이터와 정보가 저장되고 처리되는 곳이에요. 웹사이트에서 버튼을 클릭하여 메시지를 보내거나 물건을 구매하는 등의 작업을 할 때 백엔드가 그 요청을 처리해줘요.\n\n로드 밸런서는 웹사이트와 앱의 교통 관리자와 같아요. 많은 사람들이 동시에 웹사이트를 방문하려고 할 때, 로드 밸런서는 모든 요청을 처리하는 데 도움을 줘요. 각 서버에 일을 고르게 분배하여 한 대의 서버가 과부하되지 않게 해요. 그래서 웹사이트는 모든 사용자에게 빠르고 반응성 있는 상태를 유지할 수 있어요. AWS에서 로드 밸런서를 \"Elastic Load Balancer\"(ELB)라고 부르고 있어요.\n\n서버는 인터넷을 통해 다른 컴퓨터와 정보를 저장하고 공유하는 강력한 컴퓨터에요. 폰에서 웹사이트나 앱을 사용할 때 실제로 세계 어딘가의 서버에 연결하게 될 거예요. 이 서버는 온라인에서 보거나 상호작용하는 모든 사진, 비디오, 텍스트 등을 저장해요. 인터넷 상의 모든 것이 원할하고 빠르게 작동할 수 있도록 노력하며, 좋아하는 웹사이트와 앱에 언제든지 접속할 수 있도록 해줘요. AWS는 클라이언트가 활용할 수 있도록 전 세계의 큰 데이터 센터에 EC2 서버를 구축해 두고 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터베이스: 웹 애플리케이션 데이터베이스는 사용자 이름, 비밀번호, 사진 등 웹 사이트가 기억해야 하는 모든 중요한 정보를 보관하는 디지털 컨테이너와 같습니다. 웹 사이트에 가입하거나 댓글을 게시할 때 이 정보는 데이터베이스에 저장되어, 웹 사이트가 다음 방문 때에도 해당 정보를 기억할 수 있습니다. 데이터베이스는 웹 사이트의 모든 것이 원할하게 작동하고 정보가 안전하고 조직적으로 유지되도록 보장합니다. AWS RDS(관계형 데이터베이스 서비스)가 이러한 예시 중 하나입니다.\n\n# 반성\n\n2주차에는 일부 어려움이 있었지만 그때마다 능력이 더 향상된 것 같아요. 이 어려움들은 웹 개발 도구와 관행의 기본 원리에 대한 탐구의 여정으로 이끌어주었어요. GitHub를 이용해 저장소 생성, 복제, 명령 줄 인터페이스를 통한 버전 관리를 익혔고, AWS CLI를 탐험하며 앞으로의 프로젝트에서 귀중한 경험을 쌓을 수 있었어요.\n\n이번 주 중요한 부분 중 하나는 웹 애플리케이션 아키텍처를 이해하는 데 헌신했습니다. 웹 사이트가 원활하게 작동하도록 보장하는 설계도와 같다는 것을 배웠어요. 이는 세 가지 핵심 부분으로 구성되어 있어요: 사용자가 버튼과 시각적 요소와 상호작용하는 프론트엔드, 로직 처리와 배경에서의 처리를 담당하는 백엔드, 모든 웹 사이트 정보를 안전하게 저장하는 데이터베이스가 있어요. 이러한 구성 요소는 협력하여 통일된 사용자 경험을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n미래를 기대하며, 웹 애플리케이션 아키텍처의 복잡성에 더 깊이 파고들기를 기대하고 있어요. 다음 주에는 이러한 기본 개념이 AWS 서비스와 어떻게 통합되어 내 이해력과 기술 세트를 더욱 향상시키는지 살펴볼 거에요. 클라우드 엔지니어링의 매혹적인 세계에 대한 더 많은 통찰력을 기대해 주세요!\n\n지금은 여기까지입니다!\n\nBlaize\n","ogImage":{"url":"/assets/img/2024-06-23-ReflectionsandBasicWebApplicationArchitecture_0.png"},"coverImage":"/assets/img/2024-06-23-ReflectionsandBasicWebApplicationArchitecture_0.png","tag":["Tech"],"readingTime":5},{"title":"몇 번의 클릭으로 IAM 정책 시각화 하는 방법","description":"","date":"2024-06-23 00:16","slug":"2024-06-23-VisualizeyourIAMPoliciesinJustaFewClicks","content":"\n우리 모두가 IAM 정책이 AWS 리소스를 보호하는 데 매우 중요하다는 것을 알고 있습니다. 그러나 IAM 정책을 시각화해 본 적이 있나요? 아니라면, 이 게시물이 도움이 될 것입니다. 이 게시물에서는 IAM 정책을 몇 번의 클릭만으로 시각화하는 방법을 살펴보겠습니다.\n\n# IAM 정책을 시각화하는 이유\n\n간단한 IAM 정책이 다중 명령문을 가진 시나리오를 고려해 봅시다. 각 명령문에는 여러 작업, 리소스 및 조건이 있습니다.\n\n예시:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n{\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n          {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                  \"s3:GetObject\",\n                  \"s3:PutObject\"\n              ],\n              \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n              \"Condition\": {\n                  \"StringEquals\": {\n                      \"s3:x-amz-acl\": \"public-read\"\n                  }\n              }\n          },\n          {\n              \"Effect\": \"Deny\",\n              \"Action\": [\n                  \"s3:*\"\n              ],\n              \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n              \"Condition\": {\n                  \"StringNotEquals\": {\n                      \"s3:x-amz-acl\": \"public-read\"\n                  }\n              }\n          }\n      ]\n  }\n```\n\n이제 정책을 이해하려면 정책을 읽고 이해해야 합니다. 하지만, 여러 문과 조건이 포함된 복잡한 정책이 있는 경우는 어떨까요?\n\n예시:\n\n```js\n{\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n          {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                  \"s3:GetObject\",\n                  \"s3:PutObject\"\n              ],\n              \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n              \"Condition\": {\n                  \"StringEquals\": {\n                      \"s3:x-amz-acl\": \"public-read\"\n                  }\n              }\n          },\n          {\n              \"Effect\": \"Deny\",\n              \"Action\": [\n                  \"s3:*\"\n              ],\n              \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n              \"Condition\": {\n                  \"StringNotEquals\": {\n                      \"s3:x-amz-acl\": \"public-read\"\n                  }\n              }\n          },\n          {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                  \"s3:GetObject\",\n                  \"s3:PutObject\"\n              ],\n              \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n              \"Condition\": {\n                  \"StringEquals\": {\n                      \"s3:x-amz-acl\": \"public-read\"\n                  }\n              }\n          },\n          {\n              \"Effect\": \"Deny\",\n              \"Action\": [\n                  \"s3:*\"\n              ],\n              \"Resource\": \"arn:aws:s3:::my-bucket/*\",\n              \"Condition\": {\n                  \"StringNotEquals\": {\n                      \"s3:x-amz-acl\": \"public-read\"\n                  }\n              }\n          }\n      ]\n  }\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n정책을 읽는 것만으로는 정책을 이해하기가 매우 어려울 것입니다. 여기에 IAM 정책 시각화가 등장합니다. IAM 정책을 시각화하여 쉽게 이해하고 필요한 경우 변경할 수 있습니다.\n\n# IAM 정책 시각화 방법\n\n- 이 사이트로 이동하십시오. 이 사이트는 Amazon의 보안 엔지니어인 BOUR Abdelhadi가 만들었습니다.\n\n![IAM Policies Visualization](/assets/img/2024-06-23-VisualizeyourIAMPoliciesinJustaFewClicks_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. IAM 정책을 텍스트 영역에 붙여넣으세요. 이제 IAM 정책의 시각적 표현을 \"정책 시각화\" 섹션에서 볼 수 있습니다. 정책을 쉽게 이해하고 필요한 경우 변경할 수 있습니다.\n\n![IAM Policy Visualization 1](/assets/img/2024-06-23-VisualizeyourIAMPoliciesinJustaFewClicks_1.png)\n\n![IAM Policy Visualization 2](/assets/img/2024-06-23-VisualizeyourIAMPoliciesinJustaFewClicks_2.png)\n\n3. 조금 아래로 스크롤하면 \"이 정책이 하는 일은?\"을 평문으로 볼 수 있습니다. 이를 통해 정책을 간단하게 이해할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-VisualizeyourIAMPoliciesinJustaFewClicks_3.png\" />\n\n여기까지입니다. 몇 번의 클릭으로 IAM 정책을 성공적으로 시각화했습니다.\n\nIAM 정책을 시각화해야 하는 이유에 대해 더 알아보세요: [여기를 클릭하세요](링크)\n\n사이트 제작자: BOUR Abdelhadi\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nLinkedIn에서 연결해요: LinkedIn 프로필\n\n실전 프로젝트 살펴보기 (제 저장소가 도움이 된다면 GitHub에서 저를 팔로우하시는 것을 잊지 마세요): 내 GitHub 계정\n","ogImage":{"url":"/assets/img/2024-06-23-VisualizeyourIAMPoliciesinJustaFewClicks_0.png"},"coverImage":"/assets/img/2024-06-23-VisualizeyourIAMPoliciesinJustaFewClicks_0.png","tag":["Tech"],"readingTime":5},{"title":"클라우드 보안 전략을 만드는 궁극적인 가이드","description":"","date":"2024-06-23 00:14","slug":"2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy","content":"\n![Cloud Security](/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_0.png)\n\n클라우드 보안은 처음에는 쉽지 않습니다.\n\n저는 지난 20년간 이 산업에서 일한 경험이 있으며, 그 중 마지막 5년은 클라우드에 전념했습니다.\n\n클라우드 보안 여정에서 가장 어려운 단계 중 하나는 클라우드 환경을 보호하기 위한 로드맵을 만드는 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지난 몇 년 동안 클라우드 및 디지털 채택이 급증했으며, 적절한 로드맵이 없는 사이버 보안 팀은 후속 문제에 직면할 수 있습니다.\n\nCIO들과 CISO들이 앉아서 자신들의 클라우드 워크로드를 안전하게 보호하기 위한 최상의 접근 방식을 논의할 때, 상당한 양의 자료에 물들게 될 것입니다. 그것은 상당히 짜증날 수 있습니다!\n\n다양한 클라우드 구현 경험을 바탕으로, 나는 성공적인 클라우드 보안 구현을 위한 주요 성공 요소가 무엇인지 요약해 보기로 했습니다.\n\n로드맵을 세 가지 기본 단계로 나누었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 기초\n- 실행\n- 최적화\n\n참고: 제 경험을 바탕으로 가능한 한 상세하게 작성하려고 노력했지만, 대부분의 회사에 적용하기에 너무 상세해서 실용적이지 않게 만드는 것은 피했습니다.\n\n# 단계 1: 기초 다지기\n\n클라우드 보안 프로젝트가 실패하는 가장 일반적인 이유 중 하나는 CISO가 단순히 온프레미스 모델을 클라우드에 그대로 복사하려는 것 때문입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n구름의 이해 부족은 매우 강력한 원천 기능이 무시되는 결과를 초래할 수 있습니다. 그러므로 여정을 시작하기 전에 적절한 기초를 마련하는 것이 매우 중요합니다.\n\n다음은 몇 가지 중요한 기본 요소들입니다.\n\n## A. 규정 환경 이해\n\n클라우드 보안 여정을 시작하기 전에, 특정 지리에 대한 규정을 알아야 하는 것이 결정적인 첫 번째 단계입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n올바르게 처리하지 않으면 권한이 없는 데이터를 이동할 수 있으며 엄격한 규정 위반으로 엄격한 벌금을 부과 받을 수 있습니다.\n\n![이미지](/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_1.png)\n\n특정 국가는 자국 데이터를 자국 이외로 이동할 수 없도록하며 규정 미준수에 대해 엄중한 벌금을 부과합니다.\n\n유익한 점은 대부분의 규정이 보안에 대한 최상의 실천 방법과 겹치기 때문에 적절한 프레임워크를 먼저 마련하면 나중에 작업량이 현저히 줄어듭니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nHIPAA, PCI DSS 또는 SOC 2와 관련하여, 귀하의 법률 부서와 적절한 부문의 dos 및 don`ts를 완전히 숙지하기 위해 상호 협력하는 것이 중요합니다.\n\n매년 종일 감사를 하는 데 지치는 사이버 보안 팀에게 한 가지 놀라운 소식은 대부분의 클라우드 제공업체가 그들을 위해 많은 일을 처리한다는 것입니다.\n\nAWS, Azure 및 Google은 모두 매년 수백 개의 로컬 및 글로벌 인증을 실행하는 여러 제3자 프로그램을 보유하고 있으며, 이러한 인증은 수수료 없이 요청할 수 있습니다.\n\nAWS artifact는 AWS에 대한 수백 개의 보고서에 액세스할 수 있는 예시 중 하나입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_2.png\" />\n\n## B. 공유 책임 모델 이해\n\n공유 책임 모델은 클라우드에서 무언가를 구현하기 전에 미리 알아둬야 할 가장 중요한 것 중 하나입니다.\n\n클라우드에서 보안은 고객과 클라우드 제공업체가 함께 작업하여 환경을 안전하게 유지해야 하는 공유 책임이 되므로 이를 미리 알아두는 것이 중요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기반이 거의 다 마무리되었지만, 데이터와 애플리케이션에 대한 통제를 시행하여 귀하의 영역이 규정 준수를 하고 있는지 확인해야 합니다.\n\nAWS는 구름의 보안을 책임지고, 귀하는 구름 안에서의 보안을 담당합니다.\n\n![이미지](/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_3.png)\n\n이것은 사용하는 모델에 따라 달라질 수 있습니다 (완전히 관리되는 모델, IaaS 또는 플랫폼 등). 클라우드 제공업체는 귀하가 선택한 모델에 따라 일을 더 맡기거나 적게 맡을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_4.png\" />\n\n## C. 팀을 병렬적으로 강화하세요\n\nCISO이고 클라우드 보안 여정을 시작하는 경우, 팀 내에서 클라우드 기술을 구축하는 것이 중요한 기본 단계입니다.\n\n외부 컨설턴트에만 의존하지 마세요. 그들은 프로젝트가 끝나면 대개 떠나가고 내부 팀은 매일 운영을 맡게 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n팀원들은 투자가 이루어지고 있기 때문에 이를 신뢰의 표시로 인식할 것입니다.\n\n# 단계 2: 클라우드 보안\n\n이제 클라우드에 대한 견고한 기본 지식과 규제 승인(희망적으로!)이 확보되었으니, 클라우드 환경을 안전하게 유지하는 방법을 살펴볼 차례입니다.\n\n말씀드린대로, 온프렘에서 사용 중인 도구 세트를 그대로 복사하려고 하지 마세요. 항상 네이티브 클라우드 서비스를 먼저 사용하려고 노력해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 단계는 팀에서 가장 많은 노력과 스트레스를 유발할 수 있는 단계 중 하나입니다.\n\n이 단계에서 가장 중요한 두 가지는 벤치마킹과 클라우드 보안 모델을 만드는 것입니다.\n\n## A. 벤치마킹\n\n클라우드에서 보안 상태를 즉시 파악하는 가장 좋고 빠른 방법은 보안 모베스트 프랙티스에 대한 벤치마킹을 활성화하는 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n좋은 소식은, 구글, Azure 및 AWS와 같은 공급 업체가 이미 사전 구성된 벤치마크를 제공하여 환경을 측정할 수 있습니다.\n\n첫 날부터 CIS 벤치마크를 활성화하여 클라우드 내에서 쉽고 빠른 보안 성과를 얻는다면, CISO를 기쁘게 만들 수 있는 좋은 방법일 것입니다.\n\n아래는 각 메이저 프로바이더에 대한 도구입니다:\n\n- AWS Security Hub\n- Azure Security Center (Microsoft Defender로 변경됨)\n- Google 규정 준수 센터\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그 외에도, 예산이 있는 경우에는 가시성을 얻을 수 있는 제3자 도구가 있습니다.\n\n참고: 1일차의 높음 / 중간 수의 갯수에 대해 걱정하지 마세요. 모든 환경에 정상입니다. 하지만 아무것도 놓치지 않도록 위험 추적이 프로세스로 구현되어 있는지 확인해 주세요.\n\n## B. 클라우드 보안 모델 구축하기\n\n벤치마크가 활성화되었다면, 이제는 환경을 위한 고수준 보안 프레임워크를 구현하는 시기입니다. 아래는 중점을 두어야 하는 주요 영역입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 신원 제어: 클라우드에서의 신원은 방화벽입니다. 그래서 이를 우선으로 생각해야 합니다. 그냥 MFA를 활성화하고 끝내지 마세요. 대신 신원을 위한 적절한 보안 생태계를 구축해야 합니다. 단일 사인온 시스템과 연결하여 클라우드에서 별도의 신원 집합을 관리할 필요가 없도록 하는 것이 가장 좋은 방법입니다.\n\n- 암호화: 암호화 제어는 클라우드로 들어가는 PCI, PII와 같은 민감한 데이터를 어떤 규정에 맞춰야 하는지에 따라 다를 것입니다. 데이터가 정지 상태에 있을 때와 전송 중에 대한 암호화 제어를 알아두세요. AWS 및 다른 클라우드 제공업체는 암호화 키를 다루는 뛰어난 관리 서비스를 제공하며, 이를 통해 내부에서 HSM을 관리하는 번거로움을 줄일 수 있습니다.\n\n- 로깅 및 경보: 클라우드에서 로깅 및 경보를 지나치게 하는 것은 매우 쉽습니다. 경보를 너무 적게 만들면 중요한 데이터를 놓치게 될 수 있고, 너무 많이 만들면 대응팀을 분주하게 만들어 경보 피로를 야기할 수 있습니다. 좋은 점은 이미 벤치마킹을 활성화했다면, 이러한 항목 중 많은 것을 경보로 변환하고 해당 사항을 추가하기만 하면 됩니다.\n\n- 작업 부하 보호: 클라우드 워크로드를 실행할 때 VM, 컨테이너 및 클러스터를 보호하고 안전하게 유지해야 합니다. VM은 안전한 이미지에서 시작해야 합니다. 컨테이너 이미지는 시작하기 전에 검사돼야 하며, 실행 시 보호는 전반적으로 제공되어야 합니다. 클라우드를 위한 최소 요구 사항으로 만드세요.\n\n- 위협 인텔리전스: 클라우드에서 가장 멋진 점 중 하나는 클라우드 제공업체 덕분에 얼마나 많은 위협 인텔리전스에 접근할 수 있는지입니다. Azure, Google 및 AWS는 고객이 혜택을 받는 위협 인텔리전스 기술에 수십억을 투자하고 있습니다. 이 데이터는 클라우드 서비스에 공급되어 공격의 조기 탐지를 가능케 합니다. 서비스는 초기에 활성화하여 첫날부터 학습을 시작하고 사전에 조치를 취할 수 있는 기준 값을 생성할 수 있도록 하세요.\n\n# 단계 3: 클라우드 최적화\n\n이 단계는 클라우드 제어에 대한 자신감을 키워나갈 때이며, 더 전략적인 작업에 집중할 수 있는 시기입니다. 이 단계에서 살펴볼 몇 가지 주요 영역은 아래와 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 알림을 자동으로 해결하도록 설정하여 보안 팀이 더 생산적으로 작업에 집중할 수 있도록 합니다.\n- 기존 알림 논리를 세부 조정하면 무엇이 작동하고 무엇이 그렇지 않은지 알 수 있습니다.\n- 이전 단계에서 부여된 클라우드 권한을 정리합니다. 지금쯤 누가 어떤 권한이 필요한지 알 수 있고 그에 맞게 조정할 수 있습니다.\n- Slack과 같은 협업 도구를 통해 도구 세트를 확장하면 보안 프로세스의 효율성을 크게 높일 수 있으며, 이메일 문화에서 벗어날 수 있습니다.\n\n## A. 리스크 검토\n\n첫 날부터 리스크 추적기를 유지해야했지만, 이제는 리스크 데이터베이스를 신중히 살펴보고 무엇을 유지할지와 관리부서가 수용해야 하는 것을 결정해야 합니다. 실용적으로 생각하고 완벽한 100% 완료된 리스크 추적기를 얻을 수 없음을 깨닫는 것이 중요합니다.\n\n수정할 수 있는 것은 추적하고, 수정할 수 있는 것은 닫아야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그것은 주요 단계를 마무리하고 성공적인 클라우드 보안 여정으로 나아가게 도와줍니다.\n\n더 많은 세부 정보를 원하시면, 아래에서 만든 비디오를 확인해보세요.\n\n![이미지](/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_5.png)\n\n타이머 이즈랄은 핀테크 산업에서 사이버 보안 및 IT 리스크 관리 분야에서 20년 이상의 국제적 경험을 보유한 다중 수상 경력을 지닌 정보 보안 리더입니다. 타이머에게는 링크드인이나 그의 유튜브 채널 \"클라우드 보안 가이\"에서 연락할 수 있으며, 거기에서는 클라우드 보안, 인공지능 및 일반적인 사이버 보안 진로에 관한 조언을 정기적으로 게시하고 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_0.png"},"coverImage":"/assets/img/2024-06-23-TheUltimateGuideToCreatingACloudSecurityStrategy_0.png","tag":["Tech"],"readingTime":10},{"title":"클라우드 배포에서 CDK와 Terraform의 강력한 기능 활용하기","description":"","date":"2024-06-23 00:13","slug":"2024-06-23-UnleashingthePowerofCDKandTerraforminCloudDeployments","content":"\n![2024-06-23-UnleashingthePowerofCDKandTerraforminCloudDeployments](/assets/img/2024-06-23-UnleashingthePowerofCDKandTerraforminCloudDeployments_0.png)\n\n# 소개\n\n클라우드로 애플리케이션을 배포하는 것은 현대 소프트웨어 개발의 중요한 부분이 되었습니다. AWS는 클라우드 배포를 용이하게 하는 서비스로 CloudFormation을 제공하며 AWS Cloud Development Kit(CDK) 같은 도구를 제공합니다. 동시에 Terraform은 다중 클라우드 제공 업체로 더 빠른 배포를 가능케 하는 인프라스트럭처의 코드(IaC)에 강력한 솔루션이 되었습니다. 이 글에서는 AWS CDK와 Terraform을 함께 사용하는 이점을 살펴보고 TypeScript에서 CDK를 사용하여 REST API를 생성하는 실용적인 예제를 살펴보겠습니다.\n\n# Terraform과 CDK란 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테라폼과 CDK는 인프라를 코드로 정의하는 데 도움을 주는 주요 도구들입니다. 각 솔루션에는 각각의 장단점이 있습니다. 좀 더 자세히 알아보도록 하죠.\n\n## 테라폼\n\n테라폼은 HashiCorp에서 만든 도구로, HCL (HashiCorp Configuration Language)이라는 고수준 구성 언어를 사용하여 인프라를 정의할 수 있게 해줍니다. 테라폼은 클라우드에 독립적이며 AWS, Azure, Google Cloud Platform을 포함한 다양한 클라우드 제공 업체 간의 인프라를 관리할 수 있습니다. 또한 AWS의 경우 CloudFormation과 비교했을 때 빠른 배포를 가능하게 합니다.\n\n## AWS CDK\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAWS Cloud Development Kit (CDK)은 클라우드 인프라를 코드로 정의하고 AWS CloudFormation을 통해 프로비저닝하는 오픈 소스 소프트웨어 개발 프레임워크입니다. CDK는 TypeScript를 포함한 익숙한 프로그래밍 언어를 사용하여 애플리케이션을 모델링합니다. CDK는 코드를 사용하여 인프라를 생성하기 위해 일반적인 CloudFormation 템플릿을 생성합니다. 이 추상화로 인해 CDK를 사용하여 몇 줄의 코드로 매우 긴 CloudFormation 템플릿을 생성할 수 있습니다. 이는 개발자가 즐겨 사용하는 프로그래밍 언어로 편리하게 인프라 코드를 구현하고 유지할 수 있도록 도와줍니다.\n\n# Terraform과 CDK를 함께 사용하는 이점\n\n두 도구를 함께 사용하면 양쪽의 이점을 누릴 수 있습니다. Terraform은 HCL을 사용하지만 개발자에게는 불편할 수 있습니다. CDK는 몇 줄의 코드로 인프라를 구현하기 위한 고수준 재사용 가능한 CDK 구조를 제공함으로써 이를 해결합니다. 또한 매우 익숙한 프로그래밍 언어를 사용하기 때문에 개발자에게 친숙합니다.\n\n반면, CDK는 CloudFormation을 내부적으로 사용하며 이는 일반적으로 Terraform보다 느릴 수 있습니다. 그러나 CDK와 Terraform을 함께 사용할 때 Terraform을 사용하여 클라우드 배포를 수행하기 때문에 훨씬 빠른 클라우드 배포를 할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 프로젝트 설정\n\nCDK를 사용하여 Typescript를 언어로 사용하여 Terraform 프로젝트를 설정해 봅시다. CDK를 Terraform에 사용하기 위한 몇 가지 선행 조건을 설정해야 합니다.\n\n- Terraform CLI\n- NodeJS\n- TypeScript\n- CDKTF CLI\n\n설정이 완료되면 프로젝트를 시작할 수 있습니다. 먼저, 초기 코드를 설정할 폴더를 만들어 보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 CLI 명령어를 사용하여 프로젝트를 초기화할 수 있어요. 이 프로젝트에서는 TypeScript를 사용할 거에요.\n\n프로젝트를 초기화하고 나면, main.ts 파일을 업데이트하여 필요한 인프라를 정의할 수 있어요. main.ts 파일 안에 CDK 앱과 스택이 생성되어 있어요. 스택 내의 리소스를 필요에 맞게 업데이트하여 배포할 수 있어요. API Gateway 및 Lambda 함수를 사용하여 간단한 hello world REST API를 구축해보죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# REST API 구축\n\n어떤 AWS 리소스도 추가하기 전에, AWS를 클라우드 제공업체로 사용할 것이므로 Terraform에서 AWS 프로바이더를 구성해야 합니다. 또한,\n\nTerraform 백엔드를 저장하고 배포 상태를 추적하기 위해 S3 버킷을 사용할 수 있습니다.\n\n아래와 같이 필요한 CDK 생성물 (AwsProvider, S3Backend)과 같은 매개변수를 추가하여 간단히 구성할 수 있습니다.\n\n여기서 우리는 배포에 필요한 AWS 계정 ID와 지역을 제공함으로써 AWS 프로바이더를 구성했습니다. 마찬가지로, S3 백엔드를 구성하려면 버킷 이름과 다른 구성을 제공했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 람다 함수를 실행할 IAM 역할을 생성하고, 기본 람다 실행 역할의 권한을 포함시킵니다.\n\n이제 람다 함수를 생성할 시간입니다. src 폴더 내 index.ts 파일에 람다 함수 코드를 추가해 보겠습니다. 우리는 간단한 hello-world 애플리케이션을 구축하고 있으므로, 람다 함수는 간단한 hello-world 응답을 반환합니다.\n\n람다 함수 핸들러 구현을 추가한 후, 해당 핸들러를 참조하고 람다 함수 리소스를 생성하기 위해 CDK 구현을 추가할 수 있습니다.\n\n위 정의에 따라 함수 코드를 보관할 S3 버킷을 생성하고, 람다 함수를 만듭니다. 앞서 정의한 역할은 함수의 실행 역할로 제공됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n람다 함수가 준비되면 이제 API Gateway REST API를 생성하고 람다 함수와 통합할 수 있습니다.\n\n여기서는 API Gateway를 위한 구성을 정의하고, /hello 경로를 위한 리소스 및 해당 /hello GET 엔드포인트에 대한 GET 메서드를 정의하고 있습니다. 마지막으로, 우리는 앞에서 만든 람다 함수와 프록시 통합으로 통합했습니다.\n\n모든 것이 올바르게 통합되었으므로 API Gateway에 스테이지를 생성하고 아래와 같이 배포를 생성할 수 있습니다.\n\n우리는 설정에서 만들고자 하는 스테이지 이름과 API를 제공했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 필요한 모든 리소스를 생성했습니다. 하지만 해야 할 일이 아직 하나 더 있어요. API Gateway 서비스가 제공된 람다 함수를 호출할 수 있도록 보장해야 합니다. 이를 위해 람다 함수 내에서 해당 작업을 허용하는 리소스 기반 정책을 생성하고 첨부해야 해요. LambdaPermission 구성을 사용하여 아래와 같이 쉽게 할 수 있어요.\n\n이 구성 요소는 람다 함수에 필요한 권한을 추가하여 앞서 생성한 API에 의해 호출될 수 있도록 해줘요. 이렇게 하면 구현이 완료됩니다.\n\n이제 모든 것이 배포할 준비가 됐어요. 인프라를 프로비저닝하기 위해 Terraform이 AWS에 액세스할 수 있도록 AWS 자격 증명을 올바르게 구성했는지 확인하세요. 먼저 코드를 빌드하고 아래 명령을 사용하여 배포할 수 있어요.\n\n![image](/assets/img/2024-06-23-UnleashingthePowerofCDKandTerraforminCloudDeployments_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 명령을 실행하면 CDK for Terraform이 누락된 패키지가 있는 경우 설치되고 배포가 시작됩니다. 배포가 완료되면 생성된 리소스를 확인하고 API를 사용해 볼 수 있습니다.\n\n![이미지](/assets/img/2024-06-23-UnleashingthePowerofCDKandTerraforminCloudDeployments_4.png)\n\n게다가, 우리는 Terraform이 CloudFormation보다 배포를 훨씬 빠르게 실행한다는 것을 알 수 있습니다. 이는 무척 유리한 점입니다.\n\n만들어 둔 리소스를 삭제하려면 cdktf destroy 명령을 실행할 수 있습니다. 이렇게 하면 프로젝트에서 생성된 모든 리소스가 적절히 정리됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\nAWS CDK를 Terraform과 함께 사용하면 클라우드 인프라를 효과적으로 관리하는 여러 가지 이점이 있습니다. CDK는 AWS와 깊게 통합되어 있으며 TypeScript와 같은 익숙한 프로그래밍 언어를 지원하여 AWS 리소스를 정의하는 것을 직관적이고 유지보수하기 쉽게 만듭니다. Terraform의 클라우드에 중립적인 기능은 여러 클라우드 제공업체에 걸쳐 원활한 관리를 가능하게 하여 CDK를 보완합니다. 이 조합은 유연성, 사용 편의성 및 모듈성을 제공하여 전체 인프라 관리 워크플로우를 향상시킵니다. 이 두 도구를 활용하면 배포 프로세스를 최적화하고 효율성을 향상시키며 더 견고하고 다양한 인프라 관리 솔루션을 구축할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-UnleashingthePowerofCDKandTerraforminCloudDeployments_0.png"},"coverImage":"/assets/img/2024-06-23-UnleashingthePowerofCDKandTerraforminCloudDeployments_0.png","tag":["Tech"],"readingTime":8},{"title":"유니티 물리 시스템 메쉬 콜라이더 완벽 가이드","description":"","date":"2024-06-23 00:11","slug":"2024-06-23-UnityPhysicsMeshColliders","content":"\n너는 Unity를 사용하면서 메시 콜라이더를 본 적이 있을 거야. 하지만 정확히 뭘까?\n\n메시 콜라이더는 Unity가 해당 객체의 메시를 사용해 생성하는 콜라이더야. 예를 들어:\n\n![이미지](/assets/img/2024-06-23-UnityPhysicsMeshColliders_0.png)\n\n이 바럴이야. 메시 콜라이더 컴포넌트를 추가하면, 객체를 정확히 표현하는 콜라이더가 생성돼. 지금까지 다룬 다른 객체들처럼, 이 객체가 그냥 바닥으로 떨어지도록 원한다면.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임을 실행하면 오류가 발생합니다.\n\n<img src=\"/assets/img/2024-06-23-UnityPhysicsMeshColliders_1.png\" />\n\n이 오류는 비볼록 메시 콜라이더에 키네마틱이 아닌 리짏바디가 연결된 경우 지원되지 않는다고 합니다. 키네마틱 리짏바디는 물리 엔진에서 무시되어 정체되고 물리 엔진에 영향을 받지 않아야 합니다.\n\n하지만 이것의 장점은 무엇일까요? 리짏바디를 isKinematic으로 설정하고 이 객체를 사용하여 씬의 다른 리짏바디에 영향을 줄 수 있습니다. 예를들어,\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![sphere](https://miro.medium.com/v2/resize:fit:1400/1*Q7N3AFYNvo9bzu-BxBVkjw.gif)\n\nAs you can see, the sphere is affected by the shape of this barrel. If I use a non-convex mesh collider, the detail in the collider is slightly reduced, but it is still better than a capsule collider.\n\n![collider](/assets/img/2024-06-23-UnityPhysicsMeshColliders_2.png)\n\nUsing the non-convex option also gives you a visual of the collider Unity generates.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 테이블 태그를 Markdown 형식으로 변경해 주세요.\n\n| Header One  | Header Two  |\n| ----------- | ----------- |\n| Row 1 Col 1 | Row 1 Col 2 |\n| Row 2 Col 1 | Row 2 Col 2 |\n","ogImage":{"url":"/assets/img/2024-06-23-UnityPhysicsMeshColliders_0.png"},"coverImage":"/assets/img/2024-06-23-UnityPhysicsMeshColliders_0.png","tag":["Tech"],"readingTime":2},{"title":"초보자를 위한 Linux Debian에서 OpenGL 설정하는 방법","description":"","date":"2024-06-23 00:10","slug":"2024-06-23-ABeginnersGuidetoSetupOpenGLinLinuxDebian","content":"\n## OpenGL 설치를 위한 우분투에서의 단계별 가이드: 필요한 라이브러리인 GLFW 및 GLAD 설치와 함께.\n\n![이미지](/assets/img/2024-06-23-ABeginnersGuidetoSetupOpenGLinLinuxDebian_0.png)\n\n리눅스에서 OpenGL을 시작하려고 하지만 설정하는 데 충분한 자료를 찾지 못했나요? 걱정 마세요, 제가 도와드릴게요!\n이 문서에서는 VS Code를 사용하지 않고 우분투 및 다른 데비안 기반 리눅스 배포판에서 OpenGL 환경을 설정하는 간단한 지침을 제공할 것입니다. 우리는 또한 필수 라이브러리인 GLFW 및 GLAD를 설치할 것입니다.\n\nOpenGL 사용 방법에 대한 튜토리얼은 매우 기초부터 이해하기 쉬운 예제를 사용하여 가르치는 이 웹사이트를 추천합니다. 비디오 튜토리얼을 선호하는 경우 이를 확인하는 것이 좋습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 소개\n\nOpenGL은 크로스 플랫폼 및 크로스 언어 API로, 2D 및 3D 벡터 그래픽을 렌더링하는 데 사용할 수 있는 많은 함수 집합을 제공합니다. 이 API는 일반적으로 GPU와 상호 작용하여 하드웨어 가속 렌더링을 달성하는 데 사용됩니다.\n\n그러나 OpenGL 자체는 API가 아니라 단지 명세입니다. 각 함수의 결과물이 정확히 무엇이어야 하는지 및 어떻게 작동해야 하는지에 대한 설명일 뿐입니다. 제조업체가 명세를 따라 드라이버 내에 이미 구현했기 때문에 OpenGL을 별도로 \"설치\"하는 것은 없습니다. 그러나 운영 체제에 상호 작용하여 구현에 액세스하고 창 시스템 및 OpenGL 컨텍스트를 설정하는 ​​데 도움이 되는 라이브러리를 설치해야 합니다.\n\n# OpenGL 설정: 종속성 설치\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n필요한 라이브러리를 설치하기 전에 몇 가지 종속성을 먼저 설치해야 합니다. 터미널을 열고 다음 명령어를 실행해주세요:\n\n```js\nsudo apt-get update\nsudo apt-get install cmake pkg-config\nsudo apt-get install mesa-utils libglu1-mesa-dev freeglut3-dev mesa-common-dev\nsudo apt-get install libglew-dev libglfw3-dev libglm-dev\nsudo apt-get install libao-dev libmpg123-dev\n```\n\n# OpenGL 설정: GLFW 라이브러리\n\n아름다운 그래픽을 생성하기 전에 OpenGL 컨텍스트를 초기화하고 그리기 위한 응용 프로그램 창을 생성해야 합니다. 이 작업을 위해 인기 있는 C 라이브러리인 GLFW(Graphics Library Framework)를 사용할 것입니다. 이 라이브러리는 조이스틱, 키보드 및 마우스로부터의 입력을 처리하는 데 도움이 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 명령어를 실행하면 시스템에 GLFW를 설치할 수 있어요:\n\n```js\ncd /usr/local/lib/\ngit clone https://github.com/glfw/glfw.git\ncd glfw\ncmake .\nmake\nsudo make install\n```\n\n# OpenGL 설치: GLAD 라이브러리\n\n알다시피, OpenGL은 귀하의 그래픽 카드가 지원하는 드라이버 내부에 구현된 사양에 불과해요. OpenGL 드라이버의 버전이 다양하기 때문에 대부분의 함수의 위치를 컴파일 시에 알 수 없으며 실행 시에 조회해야 해요. 함수의 위치를 찾아 해당 함수를 함수 포인터로 로드하는 것은 번거로운 과정일 수 있어요. 다행히도 이런 불편함을 덜어줄 수 있는 라이브러리가 있어요: GLAD.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGLAD (Multi-language Loader Generator)은 웹 서비스를 이용하여 사용자가 OpenGL 버전을 정의하고 해당 버전에 따라 모든 관련 OpenGL 함수를 로드할 수 있도록 하는 오픈 소스 라이브러리입니다.\n\n이 라이브러리를 설치하려면 다음 단계를 수행하십시오:\n\n- GLAD 웹 서비스로 이동합니다.\n- 언어를 C++로 설정하고 OpenGL 사양을 선택합니다.\n- API 섹션에서 최소 3.3 버전의 gl 버전을 선택하고 프로필을 Core로 설정하고 로더 생성 옵션이 선택되었는지 확인합니다.\n- 확장을 무시하고 Generate를 클릭하여 결과 라이브러리 파일을 생성합니다.\n- 지금쯤에 GLAD는 glad.zip이라는 두 폴더(include 및 src)를 포함하고 있는 zip 파일을 제공해야 합니다.\n- include 폴더 안의 폴더들(glad 및 KHR)을 include 디렉토리로 복사합니다: cp -R include/\\* /usr/include/\n- 이제 src 폴더 안의 glad.c 파일을 현재 작업 디렉토리로 복사합니다.\n\n# 첫 번째 OpenGL 프로그램 실행하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 필요한 라이브러리를 설치하는 작업이 완료되었습니다.\n모든 것이 올바르게 설치되었는지 확인해보는 시간입니다. \"Hello Triangle\"을 사용하여 삼각형을 렌더링하는 간단한 프로그램입니다. 여기서 코드를 복사하여 hello_triangle.cpp이라는 파일에 저장할 수 있습니다.\n\n우리의 코드를 컴파일하고 실행 파일 a.out을 생성해 봅시다:\n\ng++ hello_triangle.cpp glad.c -ldl -lglfw\n\n./a.out을 실행하여 프로그램이 작동하는지 확인해보세요. 아래와 같은 결과가 표시되어야 합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-ABeginnersGuidetoSetupOpenGLinLinuxDebian_1.png\" />\n\nOpenGL 설정이 완료되었습니다. 간단하고 성공적이었기를 바랍니다. 방금 복사한 소스 코드에 대해 더 알고 싶다면 이 글을 읽어보세요!\n\n질문이나 어디에 꼬였는지에 대한 문제가 있다면 자유롭게 댓글을 달아주세요. 최선을 다해 도와드리겠습니다!\n그리고 이 정보가 도움이 되었다면 박수를 치고 친구들과 공유해주세요!\n\n그럼 이만 준비되었습니다. 다음에 또 만나요! :))\n","ogImage":{"url":"/assets/img/2024-06-23-ABeginnersGuidetoSetupOpenGLinLinuxDebian_0.png"},"coverImage":"/assets/img/2024-06-23-ABeginnersGuidetoSetupOpenGLinLinuxDebian_0.png","tag":["Tech"],"readingTime":5},{"title":"Sennaar의 노래 꿈을 현실로 만드는 이야기","description":"","date":"2024-06-23 00:09","slug":"2024-06-23-ChantsofSennaarisaDreamComeTrue","content":"\n## 게임 | 언어\n\n나는 이 게임을 직접 체험하는 대신 게임 플레이 영상을 간단히 시청하고 싶었지만, 비디오를 2분밖에 못 보고 내가 이 게임을 반드시 스스로 구매해야 한다고 결정했다.\n\n언어학, 퍼즐, 그리고 아름다운 그래픽이 결합된 게임인가요? 나는 가입할게요! 나는 이 게임을 일주일 동안 완주했다. 10-7 직장과 앞뒤로 3시간씩 이동하는 것을 고려하면 꽤 빠르게 완료한 것이겠죠. 그만큼 게임을 좋아한다고 말할 수 있겠죠.\n\n# Chants of Sennaar란 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSennaar의 노래는 바벨 탑에서 영감을 받은 퍼즐 게임입니다. 다양한 레벨을 통해 여행하면서 사람들이 사용하는 로고그래픽 언어를 해독하면서 노트북의 도움을 받게 됩니다. 플레이어가 모든 그래페임의 의미를 정확히 식별하면 언어가 학습된 것으로 간주되며, 전체 번역이 텍스트 위에 세계에서 표시됩니다.\n\n서로 다른 레벨은 각자의 문법 구조와 언어 특성을 가진 다른 언어를 가지고 있습니다. 다음 레벨로 진행하려면 언어를 배워야하며, 이를 통해 언어 장벽을 최종적으로 극복해야 합니다.\n\n## 시각적 단서\n\n이 게임을 플레이하는 것은 저의 영어 학습 초기 경험을 떠올리게 합니다. 대부분의 전문가들은 70-90%의 의사 소통이 비언어적이라고 믿고 있습니다. 언어를 이해하는 능력을 없애면 우리는 사람들이 무엇을 말하고 있는지를 몸짓으로 추론하기만 남게 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n숨바꼭질 시나리오가 나에게 와 닿았다. 게임 디자이너들이 보편적으로 이해되는 어린이 게임을 활용해 플레이어들이 언어를 해독하는 데 이끌어 주었기 때문이다. 벽화에 있는 심볼의 의미를 즉시 이해하지 못할 수도 있지만, 몇 라운드의 숨바꼭질 끝에 어린이가 무엇을 의도했는지 이해할 수 있다. 이는 우리가 언어를 일상 상호작용을 통해 배우는 방법을 뛰어난 방법으로 보여주는 사례이다.\n\n게다가, 이 게임은 전체 게임 중에 우리를 유아로 다룰 필요를 느끼지 않는다. 반면에 디자이너들은 우리로 하여금 레벨의 모든 코너와 구석 구석을 탐험하도록 허용하며, 시각적인 단서를 꽉 채워 두었다. 그들은 우리를 서두르지도 않는다. 우리로 하여금 추측하고 오류를 범하게 하며, 그들의 힌트를 신뢰한다. 글리프가 서로에 맞물리는 방식(소잡소리)에 어떻게 어떤 단어가 실체화의 기둥 내에 있는 식물 상징인지 알게 되었을 때의 유레카 순간은 더욱 아름다웠다. 이 깨달음은 몇 가지 더 글리프를 해결할 수 있게 하여, 첫 번째 언어를 순식간에 완성할 수 있도록 도와주었다.\n\n《Chants of Sennaar》는 현실에서 어떻게 언어를 배우는지를 밀접히 흉내내며 시각적으로 놀라운 게임으로 계발되었다. 우리는 모두 시행착오와 비언어적 의사소통을 통해 조금씩 언어를 배우고, 언어 여정에서 다음 단계로 나아가기 위해 계속 퍼즐을 풀고 있다. 이러한 언어 습득 프로세스의 게이미피케이션을 보았을 때 나의 언어학적 심장은 큰 기쁨을 느끼게 했다.\n\n# 플레이어 관점에서\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n물론, 게임 세계에 완전히 몰두하면서 탐험할 유연성에 감사했지만, 게임 중간에 다음 퍼즐을 어떻게 해결해야 할지 확신하지 못한 순간이 있었습니다. 손에 모든 정보가 있더라도 어디로 가야 하는지 모른 채로 멈춰있을 때는 답답할 수 있습니다.\n\n예를 들어, 첫 번째 레벨에서 정원의 저장소에 접근하는 방법이 명확하지 않았고, 교회에서 퍼즐을 해결한 후에는 길을 잃은 채로 남아 있었습니다. 방의 미로도 도움이 되지 않았으며, 탐험할 부분이 많다는 것에는 기쁘지만, 게임이 그 부분에서 조금 더 안내를 해주었으면 하는 바램이 있습니다.\n\n또한, 게임의 중심이 언어 해독에 있었기 때문에, 각 레벨마다 다섯 가지 언어를 해결하도록 요청하는 대신 언어와 더 많은 시간을 보낼 수 있었으면 좋았겠다고 생각했습니다. 일부 언어는 연결되어 있지만, 언어 해독에 집중하기 쉬워서 이야기 속에서 어디에 있는지 잊기 쉽습니다.\n\n그렇다고 해서, 아마도 그게 게임이 우리에게 원래 원하던 것이었을지도 모릅니다; 탑을 올라가면서 언어의 세계에 잃혀 있는 것이죠. 언어학 전공자로서 언어와 게임 플레이를 결합하는 꿈이 이뤄진 것을 본인이 굉장히 느꼈고, 그것은 '찬츠 오브 세나르'의 훌륭한 실행 덕분이라고 말씀드리고 싶습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저의 게임 리뷰 중 하나를 읽어 주셔서 감사합니다! 제 글을 즐겁게 읽으셨다면 다른 기사들도 미디엄에서 확인해보세요. 여기서도 제 소셜 미디어 계정을 확인하실 수 있어요!\n","ogImage":{"url":"/assets/img/2024-06-23-ChantsofSennaarisaDreamComeTrue_0.png"},"coverImage":"/assets/img/2024-06-23-ChantsofSennaarisaDreamComeTrue_0.png","tag":["Tech"],"readingTime":4},{"title":"2024년 최고의 AI 에이전트 목록 공개","description":"","date":"2024-06-23 00:09","slug":"2024-06-23-TopAIAgents2024arehere","content":"\nAI 에이전트들이 세상을 바꾸고 있어요. 이들은 더 높은 지능으로 인간의 업무를 수행할 수 있는 자율 프로그램들입니다. 시장에서 가장 인기 있는 AI 에이전트들 중 일부를 추천해 드릴게요. 대부분 이용 가능하니 참고해 보세요.\n\n# SWE-Agent\n\nSWE-Agent는 LLM(언어 모델)을 소프트웨어 엔지니어링 에이전트로 변환시켜 실제 GitHub 저장소의 버그와 문제를 해결할 수 있는 기능을 제공합니다. 코드에서 문제점을 발견했다면 ChatGPT가 단 한 번의 클릭으로 문제를 해결하는 데 얼마나 멋질까요?\n\n저장소 링크: https://github.com/princeton-nlp/SWE-agent\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데모 비디오: [여기를 클릭하세요](https://youtube.com/watch?v=CeMtJ4XObAM)\n\nDocker를 설치하고 docker pull sweagent/swe-agent:latest 명령을 사용하여 컨테이너 이미지를 가져오는 것을 추천합니다. 그리고 문서에서 제공된 docker run 명령을 사용하면 됩니다. 그렇게 하면 끝입니다.\n\n# 비전 에이전트\n\n이 라이브러리는 비전 작업과 관련된 문제를 해결하는 데 도움이 되는 도구입니다. AI 초보자이고 어떤 모델을 사용하여 문제를 해결해야 하는지 모르는 경우, \"이 첨부된 이미지 또는 비디오에서 사람 수를 세면 될까요\"라고 간단히 물어보세요. 에이전트가 문제를 해결하는 파이썬 코드를 생성해줄 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저장소 링크: [https://github.com/landing-ai/vision-agent](https://github.com/landing-ai/vision-agent)\n\n실시간 데모: [https://va.landing.ai/](https://va.landing.ai/)\n\nGPT 4-o 비전 작업에 이를 사용하여 응용 프로그램을 더 발전시킬 것을 추천드립니다. GPT-4와 통합하여 응용 프로그램에서 이를 도구로 활용하세요!\n\n# Microsoft의 AutoGen Studio\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마이크로소프트가 귀하의 작업을 위해 빠른 프로토타입화 멀티 에이전트 솔루션을 제공했습니다. 이는 여러 에이전트를 사용하여 단일 작업을 해결합니다.\n\n더 많은 정보는 다음 링크를 참조하세요: [AutoGenStudio 소개](https://microsoft.github.io/autogen/blog/2023/12/01/AutoGenStudio/)\n\n저장소 링크: [AutoGen 저장소](https://github.com/microsoft/autogen/tree/main/autogen)\n\n# Devin\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n안녕하세요! 코딩 과제를 해결해 드릴 수 있는 새로운 AI 소프트웨어 엔지니어입니다. Devin은 SWE-Agent와 유사하지만 실행 단계까지 도와주는 접근 방식으로 더 강력합니다.\n\n실시간 미리 보기: [Devin 미리 보기](https://preview.devin.ai/)\n\n# Devika\n\nDevika는 Devin의 쌍둥이 버전이지만 오픈 소스입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저장소 링크: [https://github.com/stitionai/devika](https://github.com/stitionai/devika)\n\n동영상: [https://www.youtube.com/watch?v=eLiMpEIRBzY&t=690s](https://www.youtube.com/watch?v=eLiMpEIRBzY&t=690s)\n\n이것들을 살펴보고 AI 에이전트를 배우는 데 시간을 할애하는 것이 멋질 거예요. 피드백 주시면 감사하겠습니다. 호기심에 대한 피드백을 주시면 감사하겠습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-TopAIAgents2024arehere_0.png"},"coverImage":"/assets/img/2024-06-23-TopAIAgents2024arehere_0.png","tag":["Tech"],"readingTime":4},{"title":"토탈 워 롬 2와 크리에이티브 어셈블리  10년 후의 나의 이야기","description":"","date":"2024-06-22 23:59","slug":"2024-06-22-TotalWarROMEIIandCreativeAssemblyMyStatementTenYearsOn","content":"\n테이블 태그를 마크다운 형식으로 변환해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 배경\n\n저는 소프트웨어 및 게임 개발자로 20년 이상 일해왔으며, 이 기간 동안 독립적인 작은 게임부터 대규모 \"AAA\" 게임까지 모두 포함하여 16개의 게임을 제작했습니다. 2009년부터 2014년까지는 크리에이티브 어셈블리에서 토탈 워 시리즈의 프로그래머로 일했는데, 나폴레옹: 토탈 워부터 시작하여 작전 2, 사무라이의 몰락, 로마 2, 알틸라까지 다양한 작품에 참여한 뒤 회사를 떠났습니다. 올해 10월에는 제가 이 회사를 떠난 지 10년이 되었는데, 그동안 토탈 워에 대해 크게 신경 쓰지는 않았습니다. 그러나 작년에 이 회사와 관련된 사건들로 인해 걱정되기 시작했습니다. 이곳에서 모든 것을 다 다루지는 않겠지만, 토탈 워 제품에 대한 실수와 커뮤니티에 대한 대우 등이 플레이어들과 해설자들로부터 강한 비판을 받았습니다.\n\n또한 세가, 크리에이티브 어셈블리의 모기업,이 스튜디오에서 몇 년 동안 개발되던 주요 제1인칭 슈팅게임 프로젝트인 \"Hyenas\"를 개발 예정이었던 짧은 시간 전에 취소했다는 사실을 알게 되었습니다. 그 후에는 저희와도 함께 일했던 전 동료들을 포함한 많은 개발자들이 해고당하면서 여러 차례의 인원 축소가 이어졌습니다.\n\n오랜 기간 동안 토탈 워를 즐기던 플레이어들은 제 이름을 알 수도 있을 겁니다. 왜냐하면 저는 2013년 9월 출시된 토탈 워: 로마 2의 론칭과 연관되어 대중에 알려지게 되었는데, 이 게임은 대부분의 사용자들이 플레이할 수 없는 상태로 출시되어 큰 반발을 일으켰습니다. 게임 배포 직전 몇 달 전에 저는 그들의 랠리 포인트 웹 시리즈 에피소드에 출연하여 게임의 전투 측면 AI에 대한 작업 내용을 논의했는데, 이로 인해 AI 및 게임 상태에 대한 많은 비판을 받게 되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-22-TotalWarROMEIIandCreativeAssemblyMyStatementTenYearsOn_0.png)\n\n게임의 상태가 제 인터뷰의 톤과 대조되어 게임과 제가 한 일을 일부러 왜곡했다고 여겨지는 상황이 발생했었습니다. 랠리 포인트 비디오 자체의 시청자 수는 10만 명 정도로 상대적으로 작았지만, 몇몇 리뷰어와 댓글러들이 그 클립을 사용하여 수백만 명에 달하는 관객들 앞에서 저를 조롱했습니다. 이 모든 일로 제게 개인적으로 상당히 악성 반격이 일어났는데, YouTube와 소셜 미디어에서 수많은 분노한 코멘트와 제게 향한 무수한 사망 위협 및 폭력 위협이 이어졌습니다. 이 위협들은 수가 많았고 자세했지만, 사법 관점에서 \"신뢰할 만한\" 것은 아니라고 말씀드리고 싶습니다. 즉, 제 안전을 위협받아야 한다고 실제적인 이유가 있는 것은 아니었습니다. 그 중 일부는 극단적이었는데, 한 동영상에서는 제 얼굴이 찌르거나 전체 화면에 \"BURN, IMMORAL AI GENIUS!\"라는 문구가 번쩍거리면서 불에 타는 장면이 포함되어 있었습니다.\n\n제 참여에 대한 비판과 토론은 저가 회사를 떠난 후에도 계속해서 온라인에서 이어졌습니다. 최근 Creative Assembly의 최신 논란을 쫓다가, 그들의 최신 게임 중 하나에 대한 온라인 리뷰에서 로마 II에 대한 제 비웃음을 반복하는 영상을 발견했는데, 이 비디오도 많은 조회수를 기록했습니다. 그래서 이 문제가 이미 지난 일이 아니라, 몇 년이 지난 지금까지도 제게 계속되는 문제라는 것을 깨달았습니다.\n\n로마 II 출시 이후에 겨우 제가 표적이 된 직원은 아니었습니다. 그러나 그 기간에 회사에 향하는 분노의 대상이 되는 자가 되었는데, 심지어 Creative Assembly 자체를 로마 II의 책임자로 책망해서는 안 된다는 이야기까지 나왔습니다. 그것은 단순히 해고된 한 명의 폭로된 개발자로 생각되었습니다. 이 이야기는 Creative Assembly에게는 꽤 편리한 이야기였고, 프로젝트의 실패로 인해 저가 희생양이 되었다고 생각합니다. 이러한 대화가 진실로 이뤄진 것은 아니라고 단언하는 것은 아니지만, 당시 경영진이 제대로 된 조치를 취하기에는 동기가 없었을 수도 있어요. 결국 그들은 제게 관여하지 않고 상황이 계속되도록 놔두었을 수도 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어찌됐든 전례 없이 완전히 발생한 일은 아니었습니다. 왜냐하면 2009년에 출시된 <Empire: Total War>도 비슷한 상황에서 출시되었었는데, 이후 중앙 리더십 인물이 포럼에 글을 올려 전투 AI 프로그래머의 이탈이 프로젝트의 어려움 중 하나라고 언급했습니다. 그때 저는 회사에 합류하기 직전이었기 때문에 정확히 무엇이 있었는지는 알지 못하지만, 불공정했던 것은 알고 있습니다. 저만이 전투 AI 프로그래머로서 중요한 어려움을 겪은 것은 아니라는 사실을 주장할 수 있습니다. 다른 개발자들을 대변할 권리는 없지만, 적어도 일부는 제게 발생한 이유와 비슷한 이유로 떠났다고 말할 것입니다. 이러한 이유에 대해 이 글에서 상세히 논의할 것입니다.\n\n# 일부 고지\n\n내부 고소련에 참여하겠다는 결정은 매우 신중하게 고려되었는데, 그 이유가 명확하기 때문입니다. 일반적인 상황에서 전 직장에 피해를 주고 싶지는 않았지만, 이 상황은 극도로 심각했고 아직도 그렇습니다. Creative Assembly에서 경험한 문제의 심각성, 회사가 내 상황을 다룬 방식, 그리고 내 명예에 입은 피해 때문에 이 조치를 취하고 있습니다. 또한 이러한 문제에 대해 공개적으로 발언함으로써 스튜디오의 만성적인 경영 문제에 대한 빛을 비추고자 합니다. 그리고 그것이 대중적 이익에 부합한다고 믿습니다.\n\n상황이 요구하는 한 전 직장에 최대한 예의를 갖추겠습니다. 이는 사실을 명확히 하려고 토론해야 하는 주제에만 한해서 발언할 것을 의미합니다. 이름을 언급하거나 직책에 대해 모호하게 언급하겠으며, 발표되지 않은 프로젝트나 기밀 정보와 같은 내용을 삼가겠습니다. \"리더십\"이나 \"경영진\"과 같은 단어를 사용하여 특정 개인들을 지정하지 않고 그룹을 언급하겠습니다. 리더십과 경영진은 시간이 지남에 따라 변화하며, 내 시절에 있지 않았고 이 글에서 논의된 문제와 아무 관련이 없었던 현재 회사의 리더십 인물이 분명히 존재할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저는 Creative Assembly가 세계 어디에서나 최고 수준의 재능 있는 사람들을 고용하기 때문에 이것이 강조된 문제로 인해 그들의 능력에 어떠한 방해요인이라고 생각할 계획은 없습니다. 이러한 문제는 단순히 경영진의 책임으로 보고, 개발 팀 전체의 문제로 보지 않습니다. 또한, Creative Assembly에서 아직 일하고 있는 친구들이 있어서 그들에게 불편함을 끼치고 싶지 않지만, 그들은 제 동기를 이해해 줄 것이라고 믿습니다.\n\n이 글에서 AI에 대해 상세히 다루었는데, 최근 ChatGPT와 같은 생성적 AI 시스템이 \"AI\"라는 용어로 많이 다뤄지고 있습니다. 그것들은 다른 주제입니다. 여기서 말하는 \"AI\"는 게임 코드에서 NPC와 faction을 제어하는 전통적인 게임 개발 용어로 사용됩니다.\n\n마지막으로, 로마 II와 게임의 문제, 그리고 예상한 대로 성공하지 못한 점 등에 대해 많은 이야기를 할 것이지만, 플레이어들을 소왈레 족하기 원하지 않습니다. 로마 II를 좋아하고 계속 플레이한다면, 저는 괜찮습니다. 여러분이 잘못했다고 말하러 온 것이 아니니까요. 하지만 그 목표에 따라 판단하면 많은 면에서 실패했으며, 의심의 여지 없이 엉망으로 시작된 게임 출시에 대해 주로 이야기할 것입니다.\n\n# Rally Point Episode 14\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라리 포인트 인터뷰에 대해 이야기해 보죠. 대부분의 사람들이 이를 보는 방식은, 여기에는 게임을 개발하는 개발자가 있고 따라서 모든 내부 정보를 가지고 있다는 것이라고 생각했습니다. 그래서 그것이 발표되고 완전히 망가지면, 그가 말하고 있는 모든 것이 사실이 아니었음을 알았을 것이라고 생각했습니다. 바깥에서 보면 그런 상황처럼 보이겠지만, 사실은 인터뷰를 진행한 당시에는 우리가 어떤 것을 출시할지 모른 채였습니다. 이런 프로젝트에서 일하는 사람들은 그것이 가능한지 정말 놀랄 것이라고 생각합니다. 게임 개발에 종사하지 않는 사람들이 듣는 것이지만, 이런 프로젝트에서 일하다가 실제 출시까지 몇 달이나 남은 시점에도 최종 게임이 어떻게 보일지 여전히 명확한 생각이 없을 수 있다는 것도 가능하다는 것을요.\n\n저희가 일하는 회사에서는 일반적으로 Total War 게임들은 출시 몇 주와 몇 달 전에야 완성되곤 했습니다. 대부분의 개발 시간 동안 대부분 플레이할 수 없었고, Rome II는 거의 그렇지 않았습니다. 인터뷰를 한 때에는 아직 모든 조각들이 모두 결합되기 시작하고 있었습니다. 그 당시에는 주로 특정 테스트 맵에서 전투 AI를 테스트하고 있었는데, 게임 자체에서는 유기적으로 테스트하지 않았고, 그 당시에 좋은 결과를 보기 시작하여 이러한 개선 사항에 대해 공개적으로 이야기할 자신감을 얻었습니다. 저는 그 당시에 그 프로젝트가 얼마나 일정에 뒤처진 것인지 또는 팀이 완성하려고 하는 동안 새로운 문제가 발생할지를 간파하지 못했습니다. 이전에 나폴레옹, 세계전쟁 2, 그리고 사무라이의 몰락에 참여한 경험이 있었는데, 이들은 모두 꽤 잘 마무리된 작업이었습니다. Rome II에는 몇 가지 분명한 생산 및 디자인 문제가 있었고, 버그도 많이 수정해야 했지만, 이전에 참여한 프로젝트들도 각자의 문제를 안고 마무리하기 위해 많은 노력이 필요했습니다.\n\n발생한 일은 AI에 대해 많은 질문을 받은 커뮤니티 팀이 답변을 돕고 싶냐고 물어본 것이었습니다. 동의했습니다. 강요당했거나 강제로 인터뷰를 하도록 몰린 것이었다고 짐작하는 사람들도 보았는데, 그것은 전혀 사실이 아니라는 것을 분명히 하고 싶습니다. 이를 요청받았지만, 거절할 수도 있었습니다. 나는 이를 진행하기로 결정했습니다. 내 인식과 프로젝트 진행에 대한 내부 커뮤니케이션을 바탕으로, 나는 우리가 세계전쟁 2와 비슷한 게임을 출시할 것이라고 믿었기 때문에 인터뷰를 계속하게 되었습니다.\n\n또한 라리 포인트에 출연하고 중요한 개발 분야에 참여한 것으로 보아 제가 팀 내에서 어느 정도의 선임자지를 가졌다고 생각하는 사람이 있을 수도 있는데, 이는 전혀 사실이 아닙니다. 저는 팀에서 다수의 프로그래머 중 한 명에 불과했으며, Total War의 리더십의 일원이 아니었습니다 (로마 II 출시 후에 나의 유일한 소규모 리더십 지명이 있었을 뿐입니다). 일반적으로 고위급 결정에 참여되지 않았으며, 중요한 프로덕션 또는 창의적인 결정이 내려질 때 미처 초대되지도 않았습니다. 프로젝트에 영향을 미친 많은 관리 결정들은 내 권한 밖의 것이었으며, 프로젝트 상태와 방향을 이해하기 위해 리더십으로부터 통신에 크게 의존했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n품질 보증 (Quality Assurance) 부서인 QA 부서가 이러한 단계를 참조하지 않았다는 사실을 나중에 알게 되었어요. 따라서 게임의 상태가 해당 단계를 반영하지 않는다는 것에 동의하지 않았다고 하는 QA 보고서에도 불구하고 생산 마일스톤들이 모두 제 시간에 달성된 것으로 보고되었다고 기억해. 다시 말해, 생산 책임자들이 이러한 단계 미 달성에 대한 보고를 하지 않으면서도, 이러한 마일스톤들이 빠졌다는 QA 보고서가 있었음에도 불구하고요.\n\n정보가 전해진 두 번째 주요 방법은 마케팅 업데이트였어요. 브랜드 및 마케팅 책임자들이 게임 비전, 트레일러, 이벤트에서의 긍정적인 반응 등을 다룬 매끄러운 프레젠테이션을 제공했죠. 즉, 회사의 동문들에게 게임의 상태와 진행 상황을 알린 동시에, 이러한 정보를 개발자들인 저와 같이 회사 내부로 전달했던 것이죠. 이러한 업데이트는 항상 낙천적인 톤으로 이루어졌고, 프로젝트가 올바른 트랙에 있는 것 같은 거짓된 인상을 더했어요.\n\n개인적으로 생각하기에, 생산, 마케팅 및 리더십이 프로젝트가 일정에 뒤쳐진 정도를 이해하고 전달하는 데 일관성있게 실패했다고 생각합니다. 정말로 완전히 망가진 게임을 출시하게 될 것을 알았다면, 인터뷰를 한 적이 없을 거에요. 제 동기에 대한 온라인 논쟁을 본 적이 있고, 제가 페라리로 달아나는 등의 농담도 있었어요. 제가 미국의 평범한 소프트웨어 개발자들에게 받는 평균적인 월급 정도인 크리에이티브 어셈블리 (Creative Assembly)에서 일한 것을 확약해요.\n\n그런데 이러한 상황 속에서 나는 리더십에 대한 신뢰를 내세웠으며, 해석하면 안 될 가정을 했어요. 아무도를 속이려 하지 않았지만, 분명히 그랬는데요 — Rome II에 대해 말한 결정이 제 몫이고, 그에 대해 사과할 뿐이에요. 게임에 실망했고, 제가 여러분을 속였다고 생각했다면, 정말 죄송해요. 잘못을 저질렀고, 그 결과로 큰 대가를 치루었으며, 그로 인해 몇 가지 어려운 교훈을 배웠어요. 이 성명서가 그것을 옳게 해소할 수 있는 한 걸음이 되기를 바래요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 실제로 무엇이 있었을까요?\n\n로마 II는 심각하게 잘못 관리되었습니다. 사실 Total War 팀은 가장 좋을 때조차 비효율적이었고, 저는 내가 랠리 포인트 인터뷰를 한 자리에 앉았을 때 팀의 작업 방식에 심각한 문제가 있음을 알고, 이 게임을 완료하는 데 많은 노력과 많은 초과 근무가 필요할 것이라는 것을 알고 있었어요. 그때는 아직 이 프로젝트가 추가적인 위험을 더하고 나머지 시간에 게임을 마무리하기가 굉장히 어려울 수도 있는 몇 가지 독특한 제작 및 디자인 문제로 손상을 입었다는 것을 이해하지 못했습니다. 더욱 많은 문제에 대해 이해한 후, 이 게임 또는 적어도 출시가 초기 계획 단계에서 실패했을 수 있는 것은 있지만, 좋은 리더십이 있었다면 11시간 이후의 프로젝트를 구할 수도 있었을 것입니다. 그러나, 이른바 제발, 어려운 상황을 더 어렵게 만들고 우리를 추락 입자로 이끈 심각한 실수가 이른 시점에 발생했습니다.\n\n참고: 나는 로마 II에 \"독특하다\"고 설명하는 문제들이 이전 Empire와 같은 프로젝트에서 나타난 것이거나 나가고 난 후에 계속 발생한 것일 수 있지만, 나는 나만의 직접적인 경험에 대해서만 말할 수 있습니다.\n\n나는 인터뷰를 하면서 게임의 부분들이 여전히 조립중이고 대체로 플레이할 수 없는 상태였던 점을 설명했습니다. 이는 많은 문제들과 그 결과들이 오랜 기간 동안은 보이지 않은 채 유지되다가 결정적인 최종 달을 함께 드러나게 했기 때문에 이 프로덕션 방식이 매우 중요한 요소입니다. Total War 게임들은 보통 이런 방식으로 개발되었지만, Rome II가 플레이 가능해지기 시작한 시점이 다른 게임에 비해 상당히 늦었기 때문에 우리는 최종 단계에 평소보다 더 적은 시간을 가졌습니다. 이것만으로도 게임을 연기해야만 할 이유가 있었지만, Creative Assembly의 경영진은 계획된 출시 일정을 지켜야 할 선택을 했으며, 이 과정에서 게임이 엉망으로 출시될 것을 잘 알고 있었어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임 프로젝트를 계획할 때 종종 채택되는 방식 중 하나는 제작 계획을 설계할 때 가능한 많은 부분을 병렬로 처리하고, 그 부분들을 모두 개발 일정의 끝에 함께 조립하는 것입니다. 버그를 수정하고 게임 플레이를 균형있게 조정하고 광을 더하는 충분한 시간 내에 작업이 완료되기를 희망하며, 출시일을 변경하기 어려워서 비행기에서 뛰어내리면서 낙하산을 조립해야 한다는 비유를 들었습니다. 기본적으로 이 접근 방식은 더 효율적일 수 있지만 실제로는 위험하고 에러가 발생하기 쉽다고 생각합니다. 개발 중에 발생한 오류는 늦게 발견될 수 있고, 그 때에는 적절히 대처할 시간이 남아있지 않을 수 있습니다. 제 경험상 대부분의 개발자들은 더 이상 이런 방식으로 작업하지 않지만, 여전히 이렇게 하는 곳도 있고 많은 게임이 분명히 손상되고 미완성 상태로 출시되는 주요 이유 중 하나라고 생각합니다.\n\n대안은 게임이 초기에 플레이 가능하도록 하고, 개발 과정 동안 기능을 추가하고 변경사항을 주기적으로 반복하는 것입니다. 이를 통해 전체 개발팀이 게임의 상태를 지속적으로 확인하고 테스트 기능을 테스트하고 개발 중에 유용한 피드백을 제공할 수 있습니다. 내가 경험해본 최고의 프로젝트들은 이와 같이 진행되었는데, 디자인과 제작에서 자주 반복이 강조되었지만 Creative Assembly에서는 그렇지 않았습니다. 일부 리더들은 반복을 낭비적이고 바람직하지 않다고 보았으며, 대신에 \"처음부터 제대로 하기\"를 목표로 하고 제작 계획은 불가피하게 발생한 실수를 교정할 충분한 여지를 제공하지 않았습니다. 따라서 대부분은 게임 출시 후에 패치를 통해 다루어지거나 그렇지 않은 경우도 있었습니다.\n\nTotal War의 리더십은 처음부터 Rome II를 제대로 만들 것으로 가정했지만 많은 것들이 심각하게 잘못되었습니다. 이 프로젝트는 이전 게임보다 더 많은 시간과 자원을 투자하고 Shogun 2의 견고한 기반에서 시작했기 때문에 사랑받는 Rome: Total War의 후속작으로 충분히 다듬어진 게임을 만들 수 있는 실제 기회가 있었습니다. 그러나 이 자원은 의심스러운 새로운 특징들과 공식 변경 목록에 낭비되었으며, 이로 인해 게임이 더 복잡해지고 개발이 어려워졌으며, 이전 제목들에서 얻은 성과를 버리게 만들었습니다. 더 나쁜 것은 관리진이 개발 중에 마케팅 노력에 우선순위를 두어 자원을 게임 개발보다는 트레일러 제작에 집중하도록 방향을 변경했습니다. 리더십이 개발팀의 경고와 조언을 듣고 결정을 내려야 했지만, 대신에 공백으로 중요한 결정을 내리고 나중에는 그것들에 대한 책임을 지지 않으니 실패할 수밖에 없었습니다.\n\n내가 경험한 Total War 프로젝트에서의 일반적인 문제와 Rome II에만 해당되는 독특한 문제를 포함한 가장 중요한 문제에 대해 상세히 알아보겠습니다. 그런 다음 관리진이 이 문제들을 어떻게 다루었는지에 대한 내 경험을 공유하겠습니다. 마지막으로 Total War: Attila 개발 과정에서 겪은 내 경험을 알려드리겠습니다. 이 경험으로 인해 스튜디오를 떠나기로 결정하게 되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 도시 확장\n\n시작하기에 좋은 곳은 프로젝트 말기에 발생한 최악의 제작 실수 중 하나로, 공세 및 무벽 정찰 전투에 대해 인공지능(AI)에 상당한 영향을 미친 것은 물론 제작, 디자인 및 커뮤니케이션 문제가 제어 범위를 벗어난 주요 효과를 보여주기도 했기 때문입니다. 로마 2는 이전 게임들에서 가지지 못했던 복잡한 공세 및 정찰 전투 환경을 가졌는데, 이전 게임에서는 게임 플레이와 AI가 올바로 작동하기 위해 많은 넓은 공간이 필요했습니다. 초신군 2 및 이전 게임에서는 복잡한 경로 찾기 및 협로점이 많지 않았습니다. 좀 더 복잡한 환경은 AI가 병력을 이동 및 배치하는 방법에 대해 이해하는 데 더 어렵게 만들었으며, 그 작업을 수행하는데 더 많은 계산 시간이 필요했습니다.\n\n이것을 실현하기 위해, 우리는 AI 메타데이터 제작을 위한 엄격한 레벨 디자인 요구 사항에 동의했고, 이러한 요구 사항을 지도에 포함하고 AI가 이러한 환경을 이해하고 접촉하는 방식을 구성 및 제어하는 데 사용되는 AI 탐색 그래프를 생성하기로 했습니다. 이것은 매번 지도마다 AI가 사용할 무시할 수 있는 기하학적 형태였으며, 게임 AI 개발에서 이러한 종류의 것이 매우 표준적이라고 말해야 합니다. 이것은 부정행위가 아닙니다 - 실제로 우리가 가지고 있던 시간과 성능 제약 조건 하에서 복잡한 로마 2 지도를 제공할 수 있는 유일한 방법이었습니다.\n\n![이미지](/assets/img/2024-06-22-TotalWarROMEIIandCreativeAssemblyMyStatementTenYearsOn_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트 초창기에 한 가지 결정이 내려졌습니다. 캠페인 도시 당 전투 맵이 하나만 있을 것이라는 것이었습니다. 반면에 Shogun 2에서는 각 도시에 대한 여러 크기의 변형이 있었죠. 그것은 멋진 기능이었습니다. 캠페인 지도에서 도시를 업그레이드할수록 전투장은 크기가 커지고 더 높은 벽과 활 쏘는 자리가 많아져서 방어가 쉬워졌던 것이죠. 로마 II의 대부분 개발 과정 동안 하나의 맵만 있을 것이라고 생각되었기 때문에, 캠페인 측의 업그레이드에 관계없이 그 도시에서 싸울 때마다 동일한 맵이 나오게 되었습니다. 이 결정의 이유는 잘 모르겠지만, 제 추측으로는 적은 맵을 가지고 상세를 더 신경 쓰는게 더 나을 것으로 판단되었던 것 같아요.\n\n한편, 캠페인 지도에 추가되는 주요 기능 중 하나는 도시 확장이었습니다. 이전 게임에서 도시는 캠페인 지도에서 업그레이드할 수 있었지만, 항상 한 개의 타일을 차지했었죠. 그러나 로마 II 캠페인에서는 도시가 업그레이드되고 인구가 증가함에 따라 더 많은 타일을 차지하면서 캠페인 지도에서 도시가 성장하는 느낌을 줬었습니다. 안타깝게도 전투와 캠페인 디자인 팀은 서로 이러한 변화에 대해 소통하지 않았으며, 상대팀이 무엇을 하고 있는지 알지 못했습니다. 프로젝트 마지막 달 동안 이야기를 나눈 리드 캠페인 아티스트와의 대화를 통해 이 사실이 발견된 것 같았습니다. 그는 즉시 리더십에 주장했고, 약간의 혼란이 있었던 거 같아요.\n\n확장되는 도시가 주요 캠페인 기능으로 마케팅될 것이라는 부끄러운 상황에 직면했습니다. 그러나 선수 게임에서만 작동했던 새로운 기능이 전투에 반영되지 않을 것을 발견해야 했습니다. 이를 해결하려면 기존 맵마다 세 개의 새 맵을 만들어야 했습니다. 작은, 중간, 큰 및 초대형 전투 맵 옵션을 제공하기 위해서였죠. 그들은 몇 가지 합리적인 옵션을 가지고 있었는데, 캠페인 측에서 이 기능을 포기하지 않을 것이라고 가정한다면. 완성된 게임을 출시한 후에 누락된 전투 맵에 대한 비판을 받아들이고, 이후 만들어진 맵을 무료 업데이트로 추가할 수도 있었거나 출시를 위해 캠페인에서 이 기능을 제거하고, 맵과 함께 업데이트 시 복구할 수도 있었겠죠. 그 두 가지 옵션이 수용할 수 없다면 게임 출시를 지연할 수도 있었습니다. 그 대신에, 레벨 디자이너에게 부족한 맵을 빠르게 만들어 출시 일정대로 준비하라는 지시를 내렸습니다.\n\n하나의 변형을 네 가지로 대체함으로써, 레벨 디자인 작업량이 사실상 네 배로 증가했으며, 이미 초반 버그 수정과 게임 완성을 위해 초과 근무중이었던 프로젝트의 막바지에 이러한 일이 발생했습니다. 제가 말씀드리고 싶은 점은, 이 보고서를 작성하는 동안, 현재 상태의 Rome II를 확인한 결과, 내가 살펴본 몇 가지 사례에서 대형 및 초대형 전투 맵이 서로 같았다는 것이며, 네 가지 변형이 실제로 만들어졌는지 확신할 수 없습니다. 대형 맵은 초대형의 중복일 수도 있습니다. 아무튼, 레벨 디자이너는 정말 열심히 일했고, 출시 당시 포함된 모든 맵을 완성했지만, 급하게 만들었기 때문에 경로 탐색 문제가 있었고, 더 중요한 것은 AI의 성능에 중요한 메타데이터에 버그가 가득해서 많은 문제점이 있었던 것입니다. 이러한 맵들은 너무 늦게 나와서 테스트를 많이 받지 못했고 게임 출시 시에 AI가 일으킨 버그의 일부만 발견할 수 있는 기회도 없었던 것이 안타까웠습니다. 많은 경우에 플레이어는 맵과 대부분 잘 상호 작용할 수 있었지만, AI는 경로 탐색과 같은 기본 작업을 할 수 없었으며, 더 높은 수준의 논리가 무엇을 해야 하는지 올바르게 인식했더라도 이동명령을 내릴 수 없었던 것이 결과였습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결과적으로 정착 및 포위 전투의 AI는 종종 한 곳에 앉아 아무것도 하지 않았으며, 플레이어의 행동에 거의 반응하지 않았습니다. 나는 이것이 비활성 AI의 유일한 원인이었다고 말하고 싶은 건 아닙니다. AI에는 여전히 작업할 부분이 많았고 많은 버그를 수정해야 했습니다. 하지만 롬 II를 출시 직후에 플레이했고 비활성 AI를 경험했다면, 이것이 그 이유일 확률이 높았습니다. 이러한 버그들은 신규 지형 변형이 작은 변형들이었기 때문에 극히 흔했으며, 보통 캠페인 초기에 자주 마주하게 되는 일이었습니다. 정착 및 포위 전투는 또한 가장 일반적인 전투 유형 중 하나였기 때문에 비활성 AI가 플레이어에게 롬 II에서의 첫 전투 경험이 될 가능성이 높았습니다. 우리는 이러한 버그들을 찾고 수정하는 데 몇 달이 걸렸습니다. 이것은 맵 자체가 서두르게 만들어지는 시간보다 더 많은 시간이 걸렸습니다. 랠리 포인트 인터뷰 이후에는 이 상황이 저에게 굉장히 나쁜 영향을 미치는 것처럼 보였지만, 실제로는 출시 일정에 가까워져 많은 새로운 콘텐츠를 필요로 하는 주요한 디자인 변경의 결과였습니다. 이때에는 우리 노력의 100%가 버그 수정에 집중되어야 했지만 그러지 못했습니다.\n\n# 전투 AI 프로그래머의 저주\n\n프로젝트의 마지막 달에 레벨 디자인 업무를 크게 늘리기로 한 결정은 지연된 디자인 변경의 특별히 나쁜 예였습니다. 그러나 늦은 디자인 변경은 토탈 워 프로젝트에서 흔하며, 출시를 앞두고 많은 문제와 추가 작업을 야기했습니다. 조각들이 모여가며 게임이 천천히 플레이 가능해지면, 디자인 리더들은 주로 피드백과 놀라움에 반응하여 게임 디자인에 중요한 변경을 가하기 때문에 워크플로우가 무효화되고 새로운 요구 사항을 충족시키기 위해 AI 코드를 더 변경해야 했습니다. 이 과정 자체는 문제가 아니라 반복적인 과정의 일환입니다. 문제는 이것이 프로젝트의 매우 늦은 시점에 발생했고 때로는 디자인의 주요한 변화가 출시 직전이나 심지어 출시 후까지도 계속되어 패치와 업데이트에서도 지속되었다는 것입니다.\n\n늦은 디자인 변경은 버그 수정과 게임 개선에 집중해야 할 시점에 많은 새로운 문제를 야기했습니다. 팀 전체에 영향을 미쳤지만, AI 개발자들에게는 특히 그 영향이 컸습니다. 왜냐하면 게임 플레이를 하는 것은 AI이기 때문에 게임이 변경되면 AI도 보통 변경해야 했기 때문입니다. 융통성 있고 여러 가능성을 고려한 시스템을 설계하려고 노력했고, 그 결과, 맵, 유닛 데이터, 밸런싱 등의 변경사항은 추가 AI 프로그래밍 작업 없이도 이뤄질 수 있었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러나 AI 시스템은 디자인 변경을 적절히 지원하기 위해 변경되어야 하는 지점까지만 늘려질 수 있었습니다. 게임 논리에 근본적인 변경이나 디자인 가정을 무효화하는 충분한 변경으로 인한 매개변수 변경은 거의 항상 코드 지원이 필요했습니다. 유감스럽게도, 일부 리더들 중에는 AI가 (또는 해야 하는) 디자인 변경에 자체적으로 어떻게 대응해야 하는지 찾아낼 수 있다고 오해하는 경향이 있었으며, 이는 종종 게임플레이 변화가 AI에 어떤 영향을 미칠지에 대한 우려를 무시하는 데 사용되곤 했습니다. 사실 AI 코드는 구현 당시 알려진 기능을 지원하는 데서 다르지 않으며, 그 이상의 유연성은 추가 개발과 투자를 요구합니다. 게임플레이 및 다른 부수적 영향에 대한 빈번한 변경에 반응해야 하는 AI 프로그래머들은 대개 AI 기술을 개발할 시간이 없었기 때문에, 게임플레이 규칙이나 밸런싱에 상당한 변경이 발생할 때 이를 탄탄하게 처리할 AI 기술을 개발할 시간이 없었을 것이라고 생각됩니다.\n\n늦은 디자인 변경으로 인해 Total War 게임이 종종 초기에 초기 AI가 개선되지 않은 채 출시되는 경우가 있었습니다. 가장 크게 팀이 새로운 프로젝트로 이동하고 디자인이 안정화되면서 반응적인 작업을 중단하고 실제로 AI 개선에 집중할 수 있게 된 후에 개선되었습니다. AI 개발자들이 해고되고 더 좋은 사람으로 대체된 것이 아니라, 이후부터 제대로 일 할 수 있었기 때문에 개선되었던 것입니다. 이는 제가 참여했던 모든 Total War 게임에 영향을 미쳤지만, 프로젝트가 일정에 뒤쳐지면 문제가 크게 늘어나게 되었습니다. 게임이 출시에 가까워질수록 완성되지 않은 상태가 더 많아져서 디자인 변경이 더 크고 빈번해지게 되었기 때문이며, 원만한 진행이 더 수월할 경우에는 조기에 안정화되어 좀 더 양호한 출시 기회를 얻을 수 있었습니다.\n\nTotal War와 같이 복잡한 전략 게임을 위해 유능한 AI를 개발하는 것은 최적 조건에서도 어려울 수 있습니다. 그러나 Total War 게임들이 개발된 방식은 특히 출시 시 AI에 좋은 결과를 제공하지 못할 수 있는데, 출시 후 개선이 시작된다는 점을 고려할 때 더욱 그렇습니다. 또한 전투 AI 프로그래머들도 어려움을 겪었음을 언급했습니다. 제가 그 역할로 이동한 시기에 이미 팀의 개발자들이 한두 편의 타이틀을 진행한 후 회사를 떠난 패턴에 대해 얘기했습니다. 이를 \"전투 AI 프로그래머의 저주\"라고 불렀죠. 이 저주는 실제로는 실무 관리의 문제와 기능하지 않는 팀 역학으로 인한 갈등과 소진을 반복하는 패턴이었습니다. 늦은 디자인 변경은 문제 중 하나였지만, 그 밖에도 다른 문제들이 있었습니다. 일반적으로 우리는 결정에 참여시키지 않았고, 게임 디자인 시 AI 개발 도전 과제가 고려되지 않았습니다. 더 나쁜 것은, 우리에게 영향을 미치는 중요한 디자인과 제작 결정 사항이 우리에게 전혀 알려지지 않았기 때문에, 변경 사항을 구현하고 문제를 일으키기 시작한 후에 우리가 반응해야 하는 상황에 대해 알게 되는 경우가 많았습니다.\n\n리더십은 AI를 \"다른 사람의 문제\"로 취급하고, 어렵고 때로는 불가능한 상황에서 최선을 다하는 것이 우리에게 남겨졌으며, 디자인 및 제작 결정은 종종 AI 개발 노력을 방해했습니다. 이러한 문제들은 수년간 보고되고 알려져 왔지만, 내가 그 곳에서 일하는 동안 리더십이 이에 대한 책임을 지지 않았고, 스튜디오에서 나의 시간 동안 이 문제들이 더욱 악화되었다고 나중에 자세히 설명할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 리더십 문화\n\n토탈 워 팀은 그 규모에 비해 매우 계층적이었으며, 주요 디자인 및 관리 결정은 상단 소수의 개인들에 의해 단독으로 만들어지며 광범위한 개발 팀으로부터 실제 감독이 이루어지지 않았습니다. 내가 함께 일했던 최고의 팀들은 중요한 결정을 팀 전체에 알리려고 노력하고 자기 자신을 검토할 수 있도록 열어두었던 리더들을 가지고 있었는데, 토탈 워의 리더들은 비판적인 피드백을 역선으로 인식하고 환영받지 않는 것처럼 여기는 듯했습니다. 중요한 결정들이 중요한 결정들이 중요한 결정들이 전달될 때까지 이미 최종 결정으로 취급되었고 그 결정들이 우리에게 전달되는 것 조차 그렇게 되지 않았던 것은 흔한 일이었습니다. 개발 중에 창조적이거나 관리적인 결정에 대한 피드백을 공유하는 공식적인 프로세스가 없었기 때문에 대부분의 직원들은 자신의 우려를 동료들에게 전달하고 아예 상관들과의 대립을 피했습니다. 광범위한 팀이 표현의 자유를 가질 수 있었다면 조기에 잡힐 수 있었을 심각한 실수를 범하게 된 것이었습니다.\n\n더불어, 책임 있는 리더십 인물의 구체적인 정체성은 보호하고자 합니다만, 개발 분야 간의 권력 동태에 대해 정보를 공유해야 한다고 생각합니다. 예를 들어, 프로그래밍 팀은 이 진술에서 논의된 많은 문제들을 잘 이해하고 있었으며, 나는 프로그래밍 리더들이 조심과 좋은 엔지니어링 규범을 장려하고 의문을 제기하는 디자인과 관리 결정에 대해 우려를 표명하는 경향이 있었습니다. 프로그래밍 리더들은 보통 릴리즈 근처에서 의도하지 않은 결과에 대한 위험 여부를 신중히 검토할 것입니다. 그러나 그들은 더 큰 팀을 이끌지는 않았으며 토탈 워에서 최종 결정을 내리는 것은 디자이너들이었습니다.\n\n디자이너들은 게임이 어떻게 진행되어야 하는지, 어떤 기능을 가져야 하는지, 균형, 난이도 및 게임의 전반적인 창작 비젼에 대한 결정을 내리는 개발자들입니다. 그러나 게임 디자인의 과제는 기술 및 제작 제약 속에서 작동해야 한다는 것이므로 보통 좋은 관리는 디자인과 엔지니어링 노력과 다른 분야가 서로 보완하고 효과적으로 협력할 수 있도록 돕게 될 것입니다. 이는 특히 토탈 워와 같이 기술적으로 야심찬 게임 시리즈에서 중요한데, 이는 AI 개발을 포함한 상당한 엔지니어링 과제가 수반되기 때문입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n하지만 크리에이티브 어셈블리에서는 그렇게 되지 않았습니다. 디자이너들이 기술적으로 우리 상사가 아니었다고 해도, 프로그래머들은 그들이 책임이 있다는 것을 이해했고, 프로그래밍 팀은 실제로 문제를 일으킬 것을 알고 있었지만 변경사항을 거부할 권한이 없었습니다. 더 나쁜 점은 디자이너들이 구현 중에 디자인 작업의 세부 사항을 종종 프로그래머들에게 맡기고, 실제로 프로그래머들이 많은 디자인 세부 사항에 책임을 지고 있지만 그에 상응하는 신용이나 자율성을 제공받지 못했다는 점입니다. 프로그래머로써 저는 분명히 편향되어 있지만, Total War 팀에서 가장 숙련되고 재능 있는 게임 개발자들 중 많은 사람들이 프로그래밍 부서에 있었다고 생각하며, 그들이 더 많은 영향력을 가지지 못한 것은 유감스럽다고 생각합니다. 특히 실시간 전투의 규모는 프로그래머들에게 크게 영광을 가져다주는 것인데, 그 이때의 주된 고유한 장점이라고 말할 수 있습니다.\n\n디자이너가 결정을 내린다고 말할 때, 프로그래밍 팀에 대해서만 그렇다는 것이 아니었습니다. 제작팀도 그들을 책임질 수 없었다고 보였습니다. 제작팀은 프로젝트의 관리 및 팀을 일정 및 마감일에 맞춰 유지하는 역할을 맡고 있습니다. 예를 들어, 프로젝트가 늦은 시간에 대규모 디자인 변경이 일어나는 것을 막는 것은 절대적으로 그들의 책임이어야 했지만, 제 경험상 그들은 항상 프로그래밍 팀이나 다른 사람들과의 논쟁에서 디자인을 지지했습니다. 제게 보여진 것은 제작 리더십이 디자이너들이 원하는 대로 하도록 허용했기 때문에 로마 2가 심각한 문제가 발생했던 주요 이유 중 하나로 보입니다.\n\n게임 디자인은 어렵습니다. 고수준의 창의적인 결정을 내리는 일을 하는 사람들을 부러워한 적이 없습니다. 그 결정은 프로젝트의 성공에 중요하며 게임을 쉽게 성공시킬 수도 실패시킬 수도 있습니다. 그 직책에 있는 사람들을 비판할 때 디자인이 쉽다고 생각하는 것을 인상주고 싶지 않습니다. 제 경험 상, Total War의 디자인 리더십은 책임을 매우 진지하게 받아들이지 않았다고 생각합니다. 디자이너들은 대부분 직관에 따라 결정을 내리고 실험적인 관찰 대신 프로토타입 아이디어를 테스트하기보다는 생산에 푸셔주는 경향이 있었습니다. 신중히 고려해야 할 결정들이 종종 대화 중간에 순간적으로 선택된 것처럼 보이며, 더 넓은 팀 구성원 중 우리가 디자인 선택에 대한 동기나 이유에 대해 기본 질문을 하면 설득력있고 안심시키는 답변을 받지 못했거나 차례 차리지 않았습니다.\n\n분명히 팀 내에는 이러한 문제를 인식하고 적어도 비공개적으로 인정하는 좋은 디자이너들이 있었습니다. 저는 디자인 리더에게 공식적으로 보고하지 않아서 그들이 제게 피드백을 제한하는 능력이 제한되었던 것처럼 상대적으로 다행스러운 위치에 있었습니다. 하지만 하위 계급의 디자이너 중 일부는 상사들의 결정에 대한 우려를 제기할 때 받은 대우를 제게 공유하며, 아마도 전산 및 미술 부서에서 비판이 더 많이 나오는 이유를 이해하는 데 도움이 되었습니다. 이것은 저를 놀래게 할 것이 없었는데, 디자인 리더들이 가끔 저나 다른 사람과 화를 내거나 목소리를 높이거나 가혹하게 말하기도 했었기 때문입니다. 어떤 리더십 구성원의 행동이 팀에서의 소중한 피드백이 억압되도록 하는 유해한 업무 환경을 조성할 수 있다고 생각됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로그래머와 디자인 리더십 간의 관계를 보여주는 구체적인 예시를 들어볼게요. 이 관계로 인해 많은 문제가 발생했고 결과적으로 게임의 출시 상태가 좋지 못했어요. 로마 2에 포함된 주요한 새로운 기능 중 하나는 육상 전투와 해상 전투를 결합한 것이었습니다. 엠파이어 이후로 우리는 해상 전투를 가졌지만, 이들은 완전히 육지 전투와 분리되어 있었고, 그 코드베이스는 그들이 언젠가 통합될 것이라는 기대 없이 개발되었습니다. 이것은 육지 부대 및 육지 전투를 처리하는 코드베이스와 배 및 해상 전투를 처리하는 코드베이스의 두 부분이 상호 고려 없이 설계되었다는 것을 의미했습니다. 전투 프로그래밍팀에게는 로마 2에서 핵심 기능으로 결합된 육지 및 해상 전투를 제공하도록 요청되었고, 팀장은 그 코드베이스의 일부를 결합하는 것이 많은 코드 수정을 필요로 하며, 프로젝트의 대부분을 이 문제들로 해결할 것이며, 프로젝트 끝에 안정성을 보장할 수 없을 것이라고 경고했습니다.\n\n리더십은 무조건 해야 한다고 했습니다. 그들은 그러하고 카르타고 예고편으로 전략적 공습을 보여주고 기능을 전달할 수 있도록 했습니다. 게임 출시 당시 결합 전투는 버그로 가득 찼습니다. 배가 육지를 통과하며 갇히거나 게임 플레이를 막는 문제가 발생했고, 이는 많은 패치를 통해 이 정리되었습니다. 많은 사람들은 이를 보고 로마의 삼중척을 사막을 달리는 것을 보고, 이것은 분명히 형편없는 프로그래밍이라고 생각할 것입니다. 하지만 저는 그것이 디자인 리더십에 달렸다고 생각해요. 어려운 전달과 버그를 초래할 것이라고 경고했지만 그들은 그럼에도 불구하고 우리에게 그 일을 시키기로 결정했습니다. 조심스럽게 접근할 것이며, 안정성과 게임 디자인 측면에서 입증될 때까지 몇 개의 프로젝트를 통해 접근했을 것입니다.\n\n디자인 리더십이 개발의 대부분 측면을 통제함으로써 문제가 많이 발생했습니다. 가장 큰 문제 중 하나는 프로그래밍 팀이 자신의 우선순위를 결정할 권한이 없다는 것이었습니다. 엔진, 도구 및 인프라 개선을 우선시 할 수 없었거나, 증가하는 기술 부채를 처리할 수 없었습니다. 프로그래머들은 엔진, 게임 플레이 및 인공지능에 관한 오래된 기술적 문제에 대해 잘 알고 있었지만, 디자인 부서는 이러한 문제를 중요하게 인식하지 않았기 때문에 이러한 문제를 제대로 해결하기 어려웠습니다. 디자이너들은 이러한 문제를 완전히 모르지는 않았지만, 팀의 우선순위를 설정하는 디자인 부서였기 때문에 이 문제들을 제대로 해결하기가 어려웠으며 그래도 스케줄에 시간을 할당하지 않으려는 디자인 리더들 때문에 적절하게 대응하기가 어려웠죠. 프로그래머들이 기술적 부채를 처리하려고 노력할 때 많은 경우, 그것은 일정에 포함되지 않거나 디자이너들의 기능 구현의 일부로 몰래 진행되곤 했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n창의적인 리더십은 Total War 게임에 추가된 새로운 기능의 수에 많은 중요성을 두는 것으로 보였으며, 각 프로젝트에서 가능한 시간은 거의 항상 새로운 기능과 디자인 변경으로 가득 차며, 다른 작업보다 우선 순위를 가져가곤 했습니다. 이는 프로그래머의 일정 문제에 많은 공헌을 했는데, 새 디자인 변경과 직접적으로 관련이 없는 경우에는 오래된 코드와 기능을 유지하고 개선하는 데 시간을 할애할 여유가 거의 없었기 때문입니다. 이에 따라 디자이너에겐 우선순위가 아닌 게임 플레이와 AI에 문제가 많았고, 새로운 변경으로 인해 프로젝트 후반에 발생할 수 있는 미지의 문제와 문제가 더 많아져서 버그가 발생할 위험이 증가했습니다.\n\n아무리 좋은 때라도 Total War 프로젝트는 정신없이 진행되어 매우 타이트한 일정 안에 많은 기능들을 전달해야 했지만, Total War 게임에 있어서는 이전 세 개의 프로젝트가 비교적 간단했습니다. 나폴레옹, 쇼군 2, 그리고 사무라이의 몰락은 각각 약 1년의 개발 기간이었으며, 각각의 경우에 새로운 설정이 주요 변경 없이 전달되는 것이 목표였습니다. 이러한 프로젝트들은 여전히 야 ambicious했으며 특히 압박이 있는 마감일을 고려할 때, 대부분의 변화와 새로운 기능은 새로운 설정을 흥미롭게 전달하기 위해 필수적인 것들이었습니다. 쇼군 2는 우리가 제작한 세 가지 중 가장 도전적이었을 것인데, 왜냐하면 이는 제국의 화약 무기를 위해 설계된 엔진에서 물러난 최초의 폐허였기 때문입니다. 그러나 설계는 필요한 곳에 주력하여 노력했고, 열심히 일한 결과로 우리는 견고한 게임을 만들었습니다.\n\n쇼군 2는 제 경력에서 일한 게임 중 가장 자랑스러운 작품 중 하나입니다. 완벽한 게임은 아니었으며, 이 문서에서 설명된 몇 가지 문제가 있었지만, 저는 그것이 로마 II와 대비되는 흥미로운 모습이라고 생각합니다. 쇼군의 후속작이 제대로 이루어진 일들이 로마의 후속작에서 잘못된 것으로 나타난 게 많았습니다. 우리는 나폴레온의 소총 전술에서 시대의 전투로 움직이는 것만으로도 상당한 도전이었으며, 새 엔진에서 이에 따른 모든 변화도 포함되었습니다. 우리는 또한 전투와 해전을 일본 무사 시대에 맞게 개편해야 했으므로, 새로운 역사적 배경으로 이동하는 것만으로도 많은 작업이 필요했고, 게임을 출시하기 위해 11개월 정도만 가지고 작업해야 했기 때문에 핵심 기능에 집중하고 우리가 떠안을 위험의 수준을 최소화해야 했습니다. 게다가 스튜디오는 제국으로 인해 받은 평판 타격으로 아직 위험을 감수할 마음이 많이 없었기 때문에 보수적이었습니다.\n\n로마 II는 출시 2년 전에 프리 프로덕션이 시작되어 대부분의 팀, 그 중 저도 2012년 3월 사무라이의 몰락 발매 후에 로마 II로 옮겨져 전체 개발 기간이 약 18개월인로했습니다. 이는 더 많은 시간이었지만, 이러한 야심 있는 프로젝트에 대한 타이트한 기한이었습니다. 만약 쇼군 2와 정확히 같은 방식으로 접근했다면, 로마 설정에 필요한 기능만 전달한다고 해도 그 기간 내에 도전이 됐겠죠. 쇼군 2의 센고쿠 시대는 캠페인 맵 전체에 걸쳐 콘텐츠를 재활용할 수 있고 모든 faction에 대부분 동일한 유닛 일람을 제공할 수 있지만, 로마 II는 다양한 문화, 비대칭 faction, 그리고 수백 개의 다른 유닛 유형을 포함하였고, 이 모든것이 디자인과 구현 과제를 늘리게 했습니다. 그러나 리더십은 우리에게 더 많은 시간과 자원이 있기 때문에 새로운 기능을 많이 추가할 여유가 있다고 생각했기 때문에 그렇게 했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n많은 새로운 기능이 추가되었는데, 그 중 많이 도전적이고 위험한 것들이 많았고 전쟁 전략 게임 Total War의 공식적인 변화가 있었습니다. 이미 본 혼합 육지/해상 전투에 대해 언급했는데, 이것은 큰 디자인 변경 중 하나였습니다. 여기 몇 가지 다른 변경 사항이 있습니다: 육지 전투에서의 점령 지점, 실제 시야 가시성 시스템, 매복 전투, 야영지 전투, 배치 가능한 방어구, 영화처럼 아름다운 전투 촬영기, 공성 전투의 총 리디자인, 새로운 항구 공성 전투, 성벽이 없는 정착지 전투, 전술적 시점, 전투터에서의 얼굴 애니메이션, 전투 전투 규칙의 총 리디자인; 물론 실제 설정 변경을 지지하기 위해 필요한 모든 기능들, 예를 들면 공성 탑, 돌진 차, 삼줄아처, 테스투도 형성, 그리고 수많은 다른 것들이 있습니다. 이것은 전투 측면에서의 이야기일 뿐이며, 내가 캠페인 맵에 대해 언급하지 않았습니다. 그리고 이것은 설계가 처음부터 시작했던 기능 목록의 전부도 아니며, 실제로 개발 중에 게임에서 삭제된 것들이 있습니다.\n\n로마 II는 이전 게임보다 더 많은 시간과 자원이 있었습니다, 이것은 사실입니다. 그러나 일정에 들어가게 된 많은 새로운 기능들로 인해, 각 기능을 마무리하고 다듬을 시간은 낮아져, 모든 다른 문제들을 떠나 실제 게임을 완성하고 다듬는 데 걸리는 시간은 충분하지 않았을 것입니다. 예산을 늘렸음에도 불구하고, 게임은 한 기능부터 다음 기능까지 빠르게 완성되는 바람에 급하게 보였고 느껴졌습니다.\n\n로마 II의 설계에 있어서 새로운 기능들과 기본 사항의 변경들이 대부분은 필요없는 것으로 생각했습니다. Shogun 2는 좋은 게임이었지만, 그 핵심 게임 플레이에 개선의 여지는 있었지만, 대부분의 미완전함은 세부사항과 다듬음의 부족에서 비롯된 것으로 생각했습니다. 그 핵심 디자인을 로마 설정으로 재탄생시키는 명백한 필요성이 없었으며, 그렇게 할 경우 일정을 늦출 뿐만 아니라 불필요한 위험과 개발 복잡성을 생산해 발매일에 문제를 일으켰다고 생각했습니다.\n\n# 결함이 있는 디자인\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n너무 많은 변화를 동시에 시도하는 것은 책임이 없었고, 광범위한 팀의 조언에 반하는 행동이었습니다. 실제로 유의미했다면 많은 문제를 일으켰을 것이지만 많은 경우에는 게임에 별다른 가치를 덧붙이지 못했을 뿐만 아니라 몇몇 경우에는 게임을 악화시키고 플레이어들에게 불인기를 끌었습니다. 로마 II의 개발 중에는 동의하기 힘든 많은 디자인 결정이 이루어졌고, 이를 설명할 수 없을 정도입니다. 프로젝트의 운명에 안좋은 디자인 방향이 어떤 역할을 했는지를 보여주는 예시 몇 가지에 집중하겠습니다.\n\n아마도 가장 불인기를 산 신규 기능은 오픈 필드 전투에서의 점령 지점이었습니다. 이는 게임 출시 전에 처음으로 대중들에게 공개되었을 때 즉시 논란을 일으켰습니다. 로마 II의 전투에서 발견되는 두 종류의 점령 가능한 승리 지점이 있었고, 시즈 전투와 방벽이 없는 거점 전투에서 발생했습니다. 이는 전투에서 승리하려면 이 지점들을 점령하고 유지해야 했던 것으로, 이는 이전 게임과 마찬가지였지만 방벽이 없는 거점이 새로운 기능이었고(이전에는 오직 Shogun 2의 Rise of the Samurai DLC에서 나왔을 뿐이었습니다). 시즈 전투에서는 이제 한 번에 세 개의 승리 지점이 될 수도 있었습니다. 하지만 로마 II에서는 이런 점령 지점이 정상적인 땅 전투에도 추가되었는데, 이는 전투 게임플레이에 근본적인 변화를 가져왔습니다. 이들은 방어군의 보급품을 나타내는 “수송 열차”로 불렸으며, 주위에 마차와 텐트 모델이 배치되는 계획이 있었으나 이 작업은 결국 실현되지는 않았습니다.\n\n대중 시연회에서 받은 강력한 부정적 피드백 이후에, 이 기능들은 출시 전에 점령 전투의 일부로 축소되었지만, 대부분의 개발 기간 동안 이들은 모든 정상적인 땅 전투에서 사용될 예정이었습니다. 이 게임의 역사에서 처음으로, 전투의 목표는 적의 보급품을 점령하고 유지하는 것일 뿐이었으며 적의 군대를 격퇴하거나 파괴하는 것이 아니었다. 이것은 믿기 어려울 수 있겠지만, 이게 사실입니다. 이 변화의 동기에 대한 내 이해는 이전과 같이 방어 시 측면 공격을 방지하는 \"모퉁이 캠프\" 전술을 막을 수 있다는 것이었을 것입니다. 그것을 억제하는 방법을 찾았다면 좋았을 것 같지만, 맵의 가운데에 승리 지점을 놓는 것은 문제에 비해 훨씬 나쁜 해결책입니다. 개발 기간 동안 이에 대한 내 의견을 분명하게 표현했고, 리더십 외의 팀 내 누구와 대화를 나누었을 때 이것이 엉터리 아이디어임을 인정했습니다. 반발이 발생하자 거의 놀람이 없었습니다. 일부 리더들은 이 기능을 전투에 \"변혁적 효과\"가 있다고 예고했지만, 나중에 그것에 항상 반대했던 것처럼 속였습니다.\n\n높은 수준에서도 디자인 방향은 팀의 명확한 창의적 비전을 정렬하는 데 실패했습니다. 프로젝트 초반에 확립된 로마 II 디자인의 주요 기둥 중 하나는 \"전략의 인간적 얼굴\"이라는 것이었고, 이는 게임에 추가되는 많은 새로운 기능들의 기초였습니다. 이는 인간 드라마와 비슷한 의미를 지닌 모호한 개념이었지만, 전략 게임을 디자인하는 맥락에서의 정확한 의미는 프로젝트 대부분 동안 명확하지 않았습니다. 때로는 전투에서 얼굴 표정 개선과 같은 실제 인간적 세부 사항을 의미했으며, 다른 때에는 카메라를 행동에 내려 놓아 병사들의 행동을 보고 듣는 것을 의미했지만, 그것은 이미 Total War 게임들의 핵심 특징이었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이상하게도, 인간 드라마 주변의 개선을 추진한 동일한 리더십 팀이 이미 해당 목표를 이루고 있던 기존 기능을 제거하기로 결정했습니다. 전투 전 연설은 전투 시작 시 장군이 군대에 고무적인 연설을 하는 기능으로, 이 기능은 이미 Shogun 2에서 재도입된 짧은 시간 후에 Rome II에서 제거되었습니다. 이 기능은 Rome: Total War(이하 Rome II의 전작)에서 인기가 있었지만, Empire와 Napoleon에는 포함되지 않았습니다. 저는 Shogun 2에서 전투 전 연설을 설계하고 구현한 개발자였으며, 작가들과 시네마틱 스태프와 함께 작업하여 Rome II에서 이 기능을 더 발전시키는 아이디어를 가지고 있었습니다. 이 기능을 제거한 이유로 전해진 것은 목소리 연기 비용이었는데, 게임의 예산과 예상 이익을 감안할 때 정말 안쓰러운 결정이었어요. 특히 \"인간적인 면\"이 현재 중심 디자인 원칙이 되었다는 점을 고려하면 더 그렇습니다.\n\n![이미지](/assets/img/2024-06-22-TotalWarROMEIIandCreativeAssemblyMyStatementTenYearsOn_2.png)\n\n내가 알기로는, 전투에서 \"인간적인 면\" 게임 특징으로 중요한 예가 되는 유일한 것은, 플레이어가 개별 유닛을 가까운 써드 퍼슨 시점에서 컨트롤할 수 있는 시네마틱 모드였습니다. 이 기능은 이전 Total War 게임에 존재했던 유닛 카메라와 유사했지만, 유닛을 아주 가까이 가져가는 점 때문에 플레이어들의 전략적 인식을 줄였다는 점에서 논란이 있습니다. 테스트 중에 이 기능을 사용하는 사람이 아무도 없다는 것이 분명해졌고, 디자인 리더는 사용자가 무시하는 시간을 들여 만들었던 기능을 싫어했습니다. 그들은 이 카메라 모드에서 유닛에게 전투 보너스를 부여하여 사용을 촉진하겠다고 발표했는데, 이에 프로그래머들이 전투 결과에 카메라 모드가 영향을 미치지 말아야 한다는 주장으로 논란을 일으켰습니다. 그 결과 디자인 리더십은 다음 대안으로 합의에 이르렀습니다: 사용자 인터페이스에서 이것이 전투 보너스를 제공한다고 알려주지만, 실제로 전투 보너스가 적용되지 않을 것입니다. 그들은 사용자들을 속이기 위해 명백히 거짓말을 한 후 사용자가 인기 없는 기능을 사용하도록 유도하고자 했습니다. 정말로 전투 보너스가 부여되었는지 모르겠지만, 이 버튼이 오늘까지 여전히 거짓말을 하는 가능성이 있습니다.\n\n# 디자인으로 제한된 AI\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n디자인 방향 중 하나가 이 토론과 특히 관련이 있다는 점이 있어요. 많은 사람들이 전체 전쟁 게임의 AI를 보면 항상 문제가 있고 실제로 훨씬 더 좋아지지 않았다고 말합니다. 아마도 크리에이티브 어셈블리의 프로그래머들이 아주 능숙하지 않고 AI를 어떻게 하는지 모른다는 것일지도 모른다고 생각해요. 많은 사람들이 AI가 어느 정도 일부러 그 모습을 하고 있는 것이지 않을까 생각해요. 저는 저희가 거기서 일할 당시에 AI의 일부 결핍이 설계적으로 의도된 것이었다는 것을 증언할 수 있어요. 다시 말해, 디자이너들이 우리에게 특정 방식으로 개선하지 말라고 지시했기 때문에 AI를 개선하지 않았다고요. 그들은 플레이어가 AI를 지배하는 것을 즐긴다고 믿었기 때문에 우리가 그들을 그것으로부터 배제해서는 안된다고 생각했어요.\n\n게임에는 플레이어에게 AI보다 유리한 요소를 제공하는 경우가 많았는데, 그러나 우리에게는 그들을 위한 AI 인식을 추가하지 말라는 지시가 있었거나, 기능 자체에는 충분한 시간이 있지만 시간이 부족해서 AI 작업은 추가할 수 없다는 식으로 말씀해주었어요. 이는 이러한 기능이 부족한 AI를 물리치기 위한 더 많은 도구가 되어 버린 것을 의미합니다. 저의 견해는 토탈 워가 AI 중심의 싱글 플레이어 전략 게임이라는 것이고, 플레이어가 AI에게 사용할 수 있는 기능인데 AI가 그에 대응하거나 피할 수 있는 방법을 모르는 기능이라면, 그것은 본질적으로 기능이 아니라고 생각합니다. 만약 디자인을 책임지고 있었다면, AI 지원 없이는 게임 기능을 추가하지 않았을 것입니다.\n\n롬 II의 예를 들어보겠습니다. 우리는 참조 가능한 시야를 추가하기로 결정했는데, 이는 플레이어가 자신의 부대가 시야를 향하고 있는 한 전장에서 적 부대를 보지 못할 것이라는 것을 의미합니다. 원론적으로 이 기능은 플레이어들이 지형을 이용해 자신의 병력이나 움직임을 숨길 수 있는 흥미로운 게임플레이를 제공할 것으로 예상되었지만, 설계 단계에서 이 기능에 대한 AI 개발에 시간을 할당하지 않기로 결정되었어요. 이는 AI가 이 기능을 자신에게 유리하게 사용하는 방법을 알지 못할 뿐만 아니라 플레이어의 부대가 피로 가려지거나 드러남에 대해 사고할 수 없을 것이라는 의미이지만, 아마도 이는 발매시 AI의 안 좋은 상태에 기여한 것이고 이것이 전적으로 의도된 것이었어요. 우리는 이에 대한 의견을 분명히 했지만 \"플레이어들은 차이를 알아차릴 수 없을 거에요\"라고 말씀을 들었어요.\n\n이것은 롬 II에서의 유일한 사례가 아니었어요. 앞서 언급한 수송열차들에도 전용 AI가 구축되지 않아야 했습니다. 비획벽 도시와 공성 전투는 특별한 경우였고, 정찰 지점을 이유하는 전용 AI가 있었는데, 적어도 작동할 때는 정찰 지점을 고려했던 것입니다. 그러나 우리는 필드 전투에서 정찰 지점을 위한 AI 개발을 하지 말라는 지시를 받았고, 왜냐하면 AI가 이미 어느 정도 우연히 그것을 처리했고 디자인 리더쉽에게 충분하다고 여겨졌기 때문입니다. 여기서 말하는 우연이란 AI 부대가 근처에 있고 우선 순위 대상이 없는 경우 정찰 지점을 향해 이동했지만 이것이 보장되지는 않았으며, 적어도 필드 전투에서는 이 정찰 지점의 중요성에 대한 전술 수준의 인식이 없었기 때문에 플레이어가 AI를 속이고 전투에서 승리하기가 어렵지 않았을 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 런칭 전 캡처 포인트에 대한 부정적인 평가가 없었다면, 우리는 한층 더 나쁜 상황을 경험했을 것입니다. Total War는 전략 게임으로 마케팅되고 있으며, AI가 우선 순위라는 발언과 약속이 여러 해 동안 있었지만, 내가 거기에서 일할 때의 현실은 새로운 기능이 항상 AI 개선보다 우선 순위로 취급되었다는 것이었습니다.\n\n## 마케팅 데모\n\n로마 II 이전에는 Creative Assembly에서 마케팅이 거의 없었습니다. PR 및 커뮤니케이션 역할을 하는 소수의 사람들이 있었고, 브랜드 및 마케팅은 대부분 세가의 영토였습니다. 로마 II를 시작으로 내부 브랜드 부서가 생겼고, 이들은 프로젝트에 훨씬 직접적으로 관여했으며, 제작 및 관리에 상당한 영향력을 행사한 것 같습니다. 이번에는 게임 개발 중 특정 시점에 공개로 게임 플레이를 보여주는 일련의 마케팅 데모를 기반으로 제작 일정이 조직화되었습니다. 여기서 말하는 마케팅 데모란, 비디오 트레일러로 공개된 게임 플레이의 데모이거나, 공개 이벤트에서 플레이어에게 제공되는 플레이할 수 있는 빌드입니다. 가장 주목할만한 것은 카르타고 시련 트레일러, 토이투부르크 숲 트레일러, 한니발 캠페인 트레일러였습니다. 또한 2013년 E3 데모와 게임 리뷰 시 회원들을 위해 만든 특별한 리뷰 빌드도 있었습니다.\n\n이러한 데모의 날짜는 제작의 중요한 이정표가 되었고, 게임의 일정은 데모에서 필요한 순서대로 기능이 개발되었습니다. 내가 아는 한, 마케팅 데모는 모두 제시된 시간에 전달되었고, 게임에 대한 현존 이펙트를 발생시키는 바람의 영향은 정확했습니다. 그러나 이러한 데모들이 프로젝트의 제작 문제에 많은 영향을 미쳤다고 생각합니다. 왜냐하면 이 데모들이 발표된 당시의 실제 게임 상태와는 거리가 멀었기 때문인데요. 카르타고 트레일러와 토이투부르크 숲 트레일러가 공개되었을 때, 실제로 게임이 없었습니다. 데모는 엔진 내에서 맞춤으로 제작되었으며, 많은 스크립트 및 목적에 맞게 구성된 구성 요소들이 사용되었습니다. 스크립트 작동 방법을 이해하고 예상된 타이밍과 이벤트 순서를 따른다면 상호작용할 수 있었습니다. 이들은 나중에 별도의 기능으로 “역사적 전투”로 출시되었지만, 그들의 중요성이 마케팅 자산으로서 개발이 우선순위를 받도록 했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이들 각각의 데모는 실제로 \"수직 슬라이스\"였어요. 그 이름처럼, 플레이어 경험의 시작부터 끝까지 모든 컴포넌트가 층층이 쌓인 전체 게임을 상상해보면, 사용자 인터페이스, AI, 경로 탐지, 레벨, 애니메이션 등이 포함된 작은 부분이 수직 슬라이스입니다. 본질적으로, 플레이할 게임의 나머지 부분을 만들지 않고 게임의 마지막 모습과 플레이 방식을 보여주기 위해 게임의 다양한 컴포넌트를 보여주는 게임의 5분 또는 10분 정도가 바로 수직 슬라이스에요. 이러한 데모는 프로젝트 초기에 거의 항상 만들어지며, 보통 팀에게 게임 컨셉을 증명하거나 이후 게임에 자금을 지원하는 것을 설득하기 위해 사용돼요. 내부적으로 팀을 일치시키기 위해 또는 자금을 확보하기 위해 내부 개발 도구로 사용될 때는 완전히 타당한 개발 도구에요. 문제는 마케팅 부서가 이를 가져가서 실제 게임 개발 단계에서 그것을 대표하는 것으로 공개하려고 결정했을 때 발생해요.\n\n몇 분 분량의 게임을 만드는 것은 수십 시간 또는 수백 시간이 소요되는 전체 게임을 구축하는 것보다 간단해 보일 수 있지만, 게임은 실제로 게임이 시작부터 끝까지 크게 변경되지 않는 많은 시스템과 컴포넌트를 포함하고 있기 때문에 실제로 그렇지 않아요. 다듬어진 게임 플레이 몇 분은 대부분 또는 모두 게임 시스템이 완료돼 있어야 할 수도 있어요. 경로 탐지가 작동하거나 작동하지 않거나 하는데, 일반적으로 다섯 분 분량의 경로 탐지를 만드는 것이 그리 쉬운 것은 아니에요, 특히 최종 게임에서의 품질 수준과 동일하게 수행해야 하는 경우에요. 이야기, 컷씬, 레벨 디자인, 환경 아트와 같은 컴포넌트는 시간이 지남에 따라 변할 수 있는 요소이지만, 게임 메커니즘, AI, 사용자 인터페이스 같은 모든 게임 시스템, 게임 전체에서 재사용되는 모든 아트, 게임 엔진, 렌더링, 툴 등과 같은 모든 기술 같은 모든 것은 일반적으로 게임의 기간 동안 변하지 않는 \"수평\"적인 영역에 속해 있어요.\n\n그래서 프로젝트 초기에 수직 슬라이스를 만들고 있다면, 아직 시스템을 구축하지 않은 상태에서 어떻게 다섯 분의 게임 플레이를 보여줄 수 있을까요? 답은 모든 방법을 활용하고, 필요하다면 가짜를 만드는 것이에요. 행동을 스크립팅하고, 유기적으로 발생해야 하는 이벤트를 나타내기 위해 미리 제작된 애니메이션을 사용하며, 실제로 필요한 특정 케이스만 처리하는 코드를 작성하고, 실제 게임에서 발생할 일반적인 문제를 처리하지 않는 것이에요. 기본적으로 연기와 거울을 사용하는 것이죠. 이것이 로마 II 개발 과정에서 발생한 일이에요. 그 당시에 게임은 여전히 밀집한 개발 중이었고 기본 기능이 플레이 가능해지기까지 몇 개월이 걸렸는데, 우리는 많은 부분을 가짜로 만들어야만 하는 상태에서 다듬어진 게임 플레이처럼 보이는 것을 만들어냈어요. 이것을 실제 게임 플레이 영상인 것처럼 대중에 공개해서 안 되었고, 불행히도 이것이 데모에 우선순위를 두는 전체 목적이었어요.\n\n카르타고의 공성과 같은 데모가 어떤 점에서 가짜인지 분명하게 설명해야 해요. 우리는 새로운 게임을 만드는 것이 아니었고, 시즈 of Carthage 데모를 위해 이숑 꾼 2에서 가져온 많은 게임 시스템이 있었어요. 그래서 경로 탐지, 유닛 형성, 포격 등을 가지고 있었고, 실제 게임 속에 포함된 데모를 위해 수행했던 일도 많았어요. 그래서 전체적으로 완전히 가짜라고 말하고 싶지는 않아요. 그러나 인상적으로 만든 것 중에는 많이 가짜인 요소가 포함되어 있어요. 먼저, AI가 없었고, 모든 적 유닛이 스크립팅됐어요. 그 당시에 게임의 많은 부분은 완전히 작동하고 있지 않았고, 포탑과 배에서의 하차와 같은 것들이 작동된 것처럼 보였지만 프로젝트 진행 동안 많은 작업이 필요했어요. 멋진 순간들이 스크립팅됐고, 포탄이 건물을 명중시켜 무너지거나, 살을 타고 적을 향해 돌진하는 코끼리와 같은 것은 실제 게임 플레이가 아닌 것이었어요. 지휘관이 병사들에게 연설하거나 적에게 공격 명령을 외치는 장면은 모두 스크립팅했던 것이에요. 만약 그 데모 내 모든 것이 최종적으로 출시할 카르타고 전투를 완벽하게 대표한다고 해도, 그것은 그 당시 로마 II의 상태를 완벽하게 대표하는 것이 아니었어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이론상으로는 카르타고 공성전이 최종 게임의 목표였고 결국 만들어낼 것이었다는 것이 아이디어였지만, 실제로는 그것도 사실이 아니었어요. 왜냐하면 데모에 들어간 기능 중 프로젝트 계획에 실제로 없던 것들이 있었거든요. 때로는 데모에서 본 것에 대해 게임에 실제로 그런 것이 들어갈 건지 물어보곤 했는데, \"오, 우리는 그것이 정말 웅장하고 시네마틱하게 보이게 하고 싶었어요\" 같은 대답을 들을 때가 있었어요. 하지만 그들은 그 기능이 게임에서 실행 가능한지 여부나 일정에 그것을 위한 시간이 있는지를 실제로 고려하지 않았다는 것이 분명했어요. 몇몇 경우에는 누군가가 트레일러에 넣었기 때문에 게임에 기능을 추가해야 했던 적도 있었고, 그 기능을 데모에 담아야 했다는 이유로 이제 그것들을 제공해야 한다고 알려진 적도 있었어요.\n\n이 모든 것이 제작 문제와 어떻게 관련이 있는지 궁금할 텐데요. 데모를 멋지게 만들기 위해 스크립트 작업을 한 것, 그 모든 미들미들을 추가하는 데치여 개발 시간이 많이 소모되었어요. 이러한 데모는 중요한 마감 기한이었고, 이를 준비하는 동안 다른 일들에 우선순위가 매겨졌으며, 직원들은 때때로 시간 내에 참여를 완료하기 위해 초과 근무를 해야 했어요. 따라서 많은 개발자들은 전체 프로젝트의 작은 부분에 대한 광택을 더하거나 기능을 아예 동작할 정도로 개발하는 데 많은 시간을 보낼 수밖에 없었어요. 이러한 데모의 수와 그 만드는 데 소요된 노력을 고려하면, 프로젝트 개발의 중요한 부분에서 홍보 트레일러를 만들고 있었다고 말해도 과언이 아니에요.\n\n마케팅은 사업적 현실이며, 그를 지원하기 위해 약간의 노력을 기울이는 것도 상식적인 것이라 생각해요. 이런 것을 이전 프로젝트에서도 보았는데 예를 들어 2010년 E3에서 펼쳐진 신구룡전 2 전투 데모 등도 실제로 수 주간 개발 팀 시간을 소비했던 것이었죠. 하지만 로마 2에서는 이러한 데모에 할당된 시간과 우선 순위가 훨씬 더 많이 들어갔고, 마케팅이 필요하다는 점을 감안해도 그에 비해 지나치게 큰 성격이었어요. 이러한 마케팅 데모들은 프로젝트를 뒤로 미뤄놓는 것 외에도 직접적으로 AI 개발에 영향을 끼쳤어요. 한 경우에는 전투 AI 프로그래머 중 한 명이 E3 플레이 가능한 데모용 AI 개발을 돕는 데 몇 주 동안 전환되어 그것이 높은 우선순위로 지정되었는데, 이 시간은 분명히 AI 버그를 수정하는 데 사용되었어야 했으니까요. 그 작업이 개발에 기여할 수 있었을 수도 있었지만, 해당 데모의 프로세스는 매우 실험적이었으며, 그 개발자는 대부분의 시간을 변화무쌍한 디자인에 반응하며 보내고 그 작업은 실제 게임 진행에 큰 도움이 되지 않았어요.\n\n마케팅 트레일러를 끝내고 게임을 마무리하려 할 때에도, 출시에서 한 달 전에 언론 행사를 위해 집중해야할 리뷰 빌드가 있었어요. 이 이벤트는 HBO의 로마 TV 시리즈 세트에서 진행되었고, 온 세계의 언론이 게임을 플레이하고 리뷰를 작성하고 가장 중요한 것은 리뷰 점수를 결정하기 위해 초대되었어요. 그러나 그들이 플레이하도록 제공된 것은 게임 자체의 최신 안정 버전이 아니라, 실제로 게임보다는 체험을 적극적으로 안내해 주는 특별히 만들어진 캠페인 시나리오였어요. 또한, 이것이 완성되는 동안 팀의 절대적인 우선 순위였어요. 이 빌드는 카르타고 데모보다는 훨씬 최종 게임을 잘 대표하는 특징이 많았는데, 실제로 AI와 실제 게임 시스템을 사용했는데도 아직 제대로 작동하지 않는 것들을 숨기기 위한 작업을 했고, 이 모든 것이 이미 늦게 출시되었고 실제 게임을 완성해야 하는데 핵심 개발 시간을 더 소요시켰어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 마케팅 데모와 특별 빌드는 개발자들로 하여금 마케팅 부서에 대한 서비스로 시간을 할애하게 해서는 안 된다고 생각해요. 리더십은 야 amb 만들고 게임 프로젝트를 개발하기를 원했지만 이를 달성하기 위해 추가 자원을 투자하지 않고도 게임을 홍보할 수 있도록 세련된 트레일러를 출시하기를 원했던 것 같아요.\n\n# 로마 II 수정\n\n게임 출시 후의 몇 주는 특히 저에게 개인적으로는 실망스러운 경험이었어요. 온라인에서 제 모습 때문에 비난을 받았고, 스튜디오 전체에도 그 영향이 확산되었어요. 여러 리더들 사이에서는 성공과 높은 사전 주문 및 판매량에 대한 이야기가 나오고 있었고, 게임을 홍보하기 위해 발표 이후 즉시 일부 주요 리더들이 나가 마케팅 행사에 참석하는 상황이었어요. 우리 프로젝트가 소실된 것 같아 리더들이 아무것도 안 하고 있고, 마케팅이 게임을 완성하는 것보다 더 중요시되고 있다는 생각이 들었어요.\n\n처음에, 로마 II의 개발은 여전히 프리-알파 단계인 것 같은데, 게임 플레이에 대한 기본적인 문제를 해결하고 디자이너들이 새로운 기능을 계획하는 중이었어요. 게임의 상태에도 불구하고, 잠시 후에 대부분의 팀이 향후 프로젝트로 이동하기로 결정되었으며, 난 작은 프로그래머, 디자이너 및 QA 테스터 팀을 이끌어서 로마 II를 고치도록 요청받았어요. 그때는 대략 10~12명 정도였어요. 이후로 게임을 완성하는 데 성공했지만 플레이어들이 주요한 차이점을 느끼기까지는 시간이 필요했어요. 그쯤되니 제가 퇴사당한 것으로 소문이 퍼지고 있었고, 게임이 개선되고 있기 때문에 많은 사람들은 제가 떠났고 새로운 사람이 더 잘하고 있는 증거라고 생각했어요. 그렇기 때문에 매일 패치 팀원들과 함께 작업해야 했는데 그 개선들이 제 무능력을 증명한다면서 많은 사람들에게 받아들여진다는 생각이 들어 매우 낙담했어요. 사직서를 쓰고 싶기도 했지만, 적어도 게임이 먼저 작동하도록 하고 싶었어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결국 최우선으로 처리해야 했던 심각한 문제들을 수정한 패치 14가 출시되었고, 이는 많은 플레이어들로부터 좋은 반응을 얻었습니다. 내 의견으로는 이것이 Rome II가 완전히 플레이 가능해진 첫 번째 시점이었지만, 아직 미완성이며 개선이 필요한 게임 밸런스, AI 문제 등이 여전히 존재했습니다. 그러나 곧 Rome II가 그 당시에 좋은 상태로 여겨졌고, 패치 프로세스가 종료되며 게임이 황제 에디션으로 재출시되고 나와 다른 팀원들은 새로운 프로젝트로 이동할 예정임을 알게 되었습니다. 이 결정은 내 희망과 상반되었으며, 바라건대 Rome II에 계속하여 작업을 진행하고, 스튜디오에서 계속해서 주요 프로젝트로 삼을 것이라고 믿었습니다. Rome II는 판매가 잘 되었으며 추가 DLC 개발에 대한 방대한 계획이 있었기 때문에 핵심 게임 자체를 계속해서 지원하고 향상시킬 필요가 있다고 생각했습니다.\n\n작은 개발팀을 프로젝트에 남겨둔 비용은 쉽게 정당화할 수 있었지만, 동시에 여러 새로운 토탈 워 프로젝트들이 병행으로 진행되고 있었으며, AI 프로그래머들이 필요했습니다. 뿐만 아니라, 리더십에서는 Attila가 Rome II와 너무 유사하게 인식될 우려가 있었으며, 따라서 AI를 개선하여 미래 소비자들에게 더 매력적으로 만들기 위한 방법이 될 것이라고 설명해주었습니다.\n\n# 사후 분석\n\nRome II 출시 후 게임을 왜 지연시키지 않았었는지에 대한 즉각적인 논의가 이뤄졌습니다. 게임을 플레이한 한 명의 경영진이 출시에 대해 충분히 좋다고 판단한 것을 바탕으로 결정이 내려졌다고 하며, 경영진은 Empire: Total War 출시 후에 있었던 그와 유사한 악재가 일어날 수 있다는 가능성을 알면서도 출시 결정을 내리기로 했다는 점을 인정했습니다. 나는 이 사실을 매우 실망스러워했고, 특히 개인적으로 경험하고 있는 결과를 고려할 때 더 그랬습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결국 프로젝트에 대한 사후 진단을 수행할 기회가 주어졌습니다. 개발팀이 프로젝트에서 잘못되거나 옳지 않은 부분을 보고 토론하는 과정을 말합니다. 그 결과를 활용하여 향후 프로젝트 관리 방법에 변화를 가져올 목표로 합니다. 모든 프로젝트 후에 이 항목이 있었지만 Rome II의 경우 더욱 중요하게 여겨졌습니다. 많은 문제가 발생했고 많은 사람들이 중요한 피드백을 제공했기 때문입니다. 사후 진단은 개발자들이 경영진에게 피드백을 제공할 수 있는 소중한 기회 중 하나였기 때문에 마음 속의 부담을 털어놓을 수 있는 기회였습니다. 많은 피드백이 주어졌고, 결정적인 제작 및 디자인 결정을 둘러싼 경영층에 대한 비판이 많이 있었습니다.\n\n개발 중에 우려를 표명했지만 제 의견이 들어주지 않는다고 느껴져 론칭 문제를 어떤 식으로 의도적으로 받아들이려 했습니다. 밖에서 비방을 당하더라도 제가 느꼈던 고통과 좌절을 살려 문제 해결에 힘쓰고, 이러한 문제가 다시 일어나지 않도록 향했기에 정말 낙관적이었습니다. 하지만 그렇게 되지는 않았습니다. 리더십이 결정을 재확인하려고 한다는 첫 번째 신호는 전투 프로그래밍 팀인 우리가 새로운 기능 도입에 너무 보수적이었다고 비판했다는 것이었습니다. 롬 II의 경우 론칭 시 완전하지 않고 많은 기능이 망가진 상태였음에도 불구하고 경고가 무시되었음에도 불구하고 우리에게 새로운 기능에 대한 저항을 너무 많이 보인다고 지금부터는 더 협조적이어야 한다고 말했습니다.\n\n사후 진단 피드백을 모두 얻고 토의한 후 중앙 리더십 인물에 의해 종합되어 공식 결론을 밝힌 팀 전체 보고서가 발송되었습니다. 그것은 희미하게했습니다. 경영층의 제작 및 디자인 실패가 최소화되고 거의 보이지 않았으며, 롬 II의 문제는 오래된 게임이 만들어진 후에 팀에 합류한 새로운 개발자들이 초래했다는 대체적인 설명이 제시되었습니다. 선임 스태프가 더 넓은 개발 팀에게 \"성공적인 총력전 게임 제작에 필요한 묘수\"에 대한 지식을 전달하지 못했다는 것을 설명하는 것입니다. 리더십이 과거에 롬: 토탈 워 같은 게임을 만들었기 때문에, 롬 II의 문제가 그들의 잘못이 아니라고 말했습니다. 지금은 롬 II가 단순히 선배인 성공작 자체를 재현한 것이라고 주장했습니다. 이것은 리더십이 자신의 위신을 지키기 위한 명백한 시도로 생각했으며, 제기된 주장은 명백히 사실이 아니었습니다. 최악의 아이디어와 계획 결정이 모두 팀의 가장 높은 구성원들로부터 나왔음에는 분명히 잘 알고 있습니다. 개발 중에 그들은 이러한 아이디어를 우리에게 강요했으며, 우리의 우려를 무시했지만, 이제 그들은 그 선택을 우리 탓으로 돌리려 합니다. 리더십에서 책임을 직접적으로 개발 팀 전반으로 옮기는 결정이 나에게는 깊은 충격을 주었고, 내게만큼 팀의 동기에도 주목할 만한 영향을 끼쳤습니다. 내 마음 속에서, 그때부터 리더십에게 의심의 여지를 줄 자리는 전혀 없었습니다. 아마도 제 생각에, 상황이 최악이라고 생각했지만, 그렇게 될 줄 몰랐습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Total War: ATTILA\n\n비록 리더십은 우리가 경험하는 문제를 만들어낸 데 대한 역할을 거의 부정했지만, 프로젝트 관리에 대한 변화에 대해 몇 가지 확언을 받은 적이 있었습니다. 전투 AI에 우선순위를 두고, 디자인 변경사항의 전달이 강조되었습니다. '애틸라'에 대한 많은 작업은 로마 II에서 하던 작업을 계속하는 것이었고, 포위전과 전투 AI를 개선하는 일이었습니다. 그러나 프로젝트로 이동한 후 곧 '이전 프로젝트에서 발생한 고집된 문제들이 다시 나타나기 시작했다는 것 같은 이전과 같은 문제점들이 발현되기 시작했습니다. 첫 번째 문제는 우리가 다시 한 번 디자인 논의에 포함되지 않았다는 것이었고, AI 개발에 영향을 주는 기능이 우리에게 사전 통보 없이 게임에 추가되고 있는 것이었습니다. 이러한 상황이 개선될 것이라는 확인을 받았기 때문에 이를 인식할 때마다 이에 대해 발언하는 것을 확실히 했고, 그로 인해 앗틸라의 리더십 팀과 갈등이 일어났는데, 그들은 우리에게 그러한 소통의무가 없다고 느꼈다. 디자인 변경사항의 통보를 받지 못했기 때문에 나는 그에 대한 AI를 개발할 기회가 없었지만, 리더십은 그저 신경쓰지 않았습니다.\n\nAI에 영향을 주는 기능에 대한 회의에 초대받지 않게 되자, 그에 대해 불평하니, 회의에 참여하는 이들을 신중하게 선택하기 때문에 결정을 내리기가 더 쉽다고 말을 들었습니다. 특정 선택지가 잘못된 것일 수 있는 이유를 알고 있는 사람을 배제한다면 결정을 내리기는 더 쉽겠죠. 하지만 그것은 잘못된 선택지를 만날 확률을 크게 높일 뿐입니다. 디자인 리드는 결정을 최대한 빨리 내리는 것만이 중요하다고 말했습니다.\n\n이러한 매우 기본적인 문제 외에도 AI와 관련된 두 가지 논란적인 사안이 발생했습니다. 첫 번째 문제는 나가 이 글에서 언급한 실제 시야 가시성 시스템에 대한 변경사항이었습니다. 그 기능은 디자인 상 AI 지원을 받지 않았기 때문에, 로마 II에서는 그것에 엄격한 거리 제한이 적용되었습니다 - 100미터 정도인 것 같습니다. 따라서 적 부대가 시야에 들어오지 않더라도 그 범위 내에서는 항상 가시적이었습니다. 이는 AI 지원 부족에 대한 우리의 우려를 반영한 것이었습니다. 그러나 불행하게도 '애틸라'에서 일어난 첫 일 중 하나는 디자이너들이 이 거리 임계값 설정을 찾아내어 5미터로 줄인 것이었습니다. 전투에서 5미터는 사실상 0과 같았습니다. 이는 플레이어가 AI 부대를 은폐되었다고 할 수 있는 거리에서 아슬아슬하게 마주치게 되는 것을 의미했습니다. 이러한 문제와 야기할 문제들에 대해 설명했지만, 해당 디자이너는 이것이 좋은 게임플레이라고만 생각하고 제 불만을 듣고 싶어하지 않았습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAttila에서 AI에게 반대되는 기능을 설계해 온 구식의 습관이 계속되고, 그 당시 개발 중이던 다른 게임인 워해머에서도 같은 문제가 지속되고 있었어요. 워해머의 경우, AI가 참여할 수 있는 게임플레이를 만들어내는 방대한 주문과 정교한 특수 능력이 존재했는데, 그 때의 AI는 참여할 예정조차 없었어요. 제가 알기로는 워해머에 더 많은 개발 시간이 투자되었고 결국 AI에 더 많은 능력이 부여되었지만, 저는 회사에 있을 당시에는 새로운 기능을 AI 능력보다 우선시하는 설계 방식이었어요. 두 게임 모두 의도적으로 부실한 AI로 게임을 설계하고 있었다는 점에 대해 제 반대의견을 피력했지만, 디자이너들은 제 발언을 무시하고 시간을 낭비한다며 말했어요.\n\n두 번째 문제는 Attila에서 발생한 새로운 기능으로, 공성 전투에 영향을 미칠 것이었어요. 우리는 방금 로마 II 출시 후 공성 전투를 플레이 가능하게 만드는 데 거의 1년을 썼는데, 그 때의 게임 부분 안정성을 지키고 싶었어요. 이 기능의 세부사항에 대해서 자세히 언급하지는 않겠지만, 핵심은 공성 전투에서 도시 벽 안에 유닛을 배치할 수 있는 것이었어요. 제 의견은 이것이 AI뿐만 아니라 게임플레이까지 방해할 수도 있다고 생각했고, 게임플레이와 공성 전투의 안정성 면에서 손해를 보는 것이 아닌지 확신이 들지 않았어요. Attila는 프로젝트 기간이 짧았으며 대부분의 시간을 로마 II 패치에 사용했기 때문에 이 시점에는 많은 시간이 남아 있지 않았어요. 사실 우리는 알파 이벤트에서 피쳐 완성된 시점까지 많이 남아 있지 않았죠.\n\n위험과 시기에 대한 우려, 로마 II를 고려한 공성 전투의 안정성을 망치지 않는 중요성에 대한 나의 관심사를 제기했고, 그 기능의 합리성이 무엇인지 알아보기 위해 물었습니다. 이것은 제 경험 상 게임 개발에서 매우 흔히 들을 수 있는 질문이에요. 누군가가 위험하거나 비용 소모가 큰 일을 계획할 때, 그 일이 좋은 생각인지 또는 어떤 문제를 해결하는지 설명해 달라고 물어보는 것은 실수를 방지하기 위한 좋은 방법이에요. 크리에이티브 어셈블리에서 이 질문이 많이 물어졌던 것은 아니라고 생각해요. 이 질문이 무시되자 저는 다시 한 번 물어보았고 아마도 여러 차례 더 물었는데, 결과적으로 위험을 평가했음에도 불구하고 그 기능을 계속 진행하고 있는 사실과 합리성에 대한 답변이 없음을 지적해야 했어요.\n\n결국 디자인 리드가 도시 안에 소환되는 유닛을 가진 기능이 공성 전투에 꼭 필요한 기능이라는 결론을 이끌어내려는 몇 페이지 분량의 이메일을 보내주었는데, 토탈 워 시리즈에서 그런 경우가 전혀 없었다고 생각해요. 이에 따라 디자인 리드와 대립하게 되었고, 끝에는 주요 프로덕션 및 디자인 리더십이 디자인 리드를 지지하고 나는 불평을 하느라 시간을 낭비한다며 비난했어요. 또한 이 리더십 구성원들에게 그 기능에 대한 이유를 제시할 수 있느냐고 물었으며, 받은 최상의 대답은 \"게임을 더 좋게 만들기 위해서\"였어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결전\n\n이 모든 일은 디자인 리더가 나를 이메일에서 협업에 어려움을 겪는다며 비난하고 있는데, 그 날에 절정에 이르렀습니다. 나는 협업을 강조한다고 답변했는데 디자인 팀이 밸리뉴움에서 결정을 내리고 그 결정을 심지어 게임을 만들고 있는 개발자들에게도 소통하지 않는다는 점을 비판했기 때문입니다. 이 답변으로 소동이 일어났지만, 나는 그 상황에서 매우 합리적이었다고 생각합니다. 나는 지도부와 경영진과 회의를 하게 되었는데, 앞서 언급한 디자인 리더는 불참했습니다.\n\n나에게는 그 디자인 리더의 발언이 적지 않다는 입장을 제시받았습니다. 그들은 내 불만과 우려를 다룰 수 없다고 주장했는데, 나는 그저 아틸라가 로마 II에서 하는 실수를 되풀이하고 있다고 지적했을 뿐입니다. 그 때문에 나는 배틀 AI에 영향을 주는 변경사항조차 제대로 알려주지 않는 것이 다툼의 원인이라고 모두에게 상기시켰습니다. 나는 참여를 요구한 적도 없고 지금 내가 참여해야 하는 디자인 프로세스에 참여하여야 한다고 믿지만, 우리에게 영향을 미치는 변경사항에 대해 알려주지 않는다면 내 업무를 수행할 수 없을 것이라고 싸울 수밖에 없었습니다.\n\n하지만 그 회의실에서 Total War의 경영진은 내가 이 문제를 지적하는 것을 그만두도록 나에게 많은 압박을 가하였고, 그들 중 한 명이 여러 차례 내 입에서 말한 적이 없는 말을 내 입에 넣었습니다. 내가 이 분쟁 중에 보여온 모든 행동이 전문적이었다는 점을 명확히 하고 싶습니다. 나는 단지 친절하게 사안을 제기했고 사람들이 내린 결정들과 이전의 보증과 어긋나는 방식을 가리키기만 했으며, 프로젝트에 미칠 결과를 염려하고 있었을 뿐입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저는 제가 중위 프로그래머로서 매우 합리적인 우려를 표현했다고 해서 경영진들로부터 비판을 받는 모임이 저를 침묵시키기 위해 명백히 의도된 것이었다고 생각합니다. 이는 누구에게든 어떤 결과를 가져다도 좋으니까 경영진들이 계속해서 자기들의 방식대로 일을 진행하고 싶어했던 것이 분명합니다. 아마도 그 목적은 달성됐을 것으로 생각합니다. 왜냐하면 그 순간부터 팀 리더십에서 적으로 여겼다는 걸 깨달았고, 승진 기회나 이와 같은 일들에 영향을 미칠 거라고 생각했습니다. HR과 협의해 공식으로 불만을 제기하는 등 여러 옵션을 고려해봤지만, 최종적으로는 스튜디오를 떠나는 게 최선일 거 같았습니다. 충분한 시간과 알림을 주고 떠날 때에는 문서 작성과 후임자 온보딩에 시간을 할애했습니다. 적어도 HR은 내 행동에 대해 안심시켜주고, 항상 다시 돌아와도 될 것이라고 했습니다(그러나 이 글이 게시된 후에는 그렇지 않을 수도 있겠습니다).\n\n# 마지막으로\n\nCreative Assembly에서의 경험은 상당히 극심했습니다. 회사의 평판이 내 것과 얽히게 된 실수는 내 실수이지만, 그 당시 스튜디오가 얼마나 잘못 관리되고 있는지를 그저 그때 알았더라면 결코 한 일이 아닐 것입니다. 수년 동안 많은 플레이어와 평론가들이 회사에 대한 강한 비판을 했지만 총체적으로 Total War 팀의 실제 상황은 적어도 가장 극단적인 비평가조차 상상치 못한 것들이 있었습니다. Rome II 출시 후 얻은 평판에도 불구하고, 나는 나의 일에 대한 자부심을 가진 개발자이며, 그 마인드로는 Creative Assembly가 나에게 적합하지 않았습니다. 다행히도 산업에서 다른 곳에서 훨씬 나은 경험을 쌓을 수 있었습니다.\n\n하나 의문은, 이러한 경험들이 오늘날의 Creative Assembly를 어떻게 잘 대표하는지입니다. 최근 스튜디오가 직면한 문제를 고려하면 스튜디오 경영진과 창의적 리더십이 여전히 주요 문제의 원인인 것은 분명합니다. 그러나 최근 문제의 세부 내용이 내가 경험한 것과 얼마나 유사한지에 대해 얘기하는 것은 제 역할이 아닙니다. 하지만 말씀드릴 수 있는 한 가지는, 이 글에서 설명한 문제들의 책임자들 중 몇몇은 여전히 회사에서 일하거나, 최근 감원 대상이 될 때까지 일했다는 점인데, 이것은 스튜디오의 경영 문화에 지속적인 문제가 있다는 것을 의미한다고 생각합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다른 질문은, 왜 이러한 리더십 문제가 그토록 오랫동안 지속되었는지인가요? 왜 'Empire', 'Rome II' 및 후속 논란 이후에 변화가 이루어지지 않았을까요? 내 생각에는 그 답을 알 수 있고, 매우 예측 가능합니다. 게임과 눈에 띄는 고위 프로필 부끄러움이 계속되면서도 시리즈는 계속해서 이익을 냈습니다. 이 사실은 저와 같은 개발자들이 더 나은 방법을 주장하면서 사용되었으며, 종종 창의적인 리더십에 의해 이전 프로젝트와 결정의 성공을 확인하는 측정 항목으로 사용되었습니다. 내 의견은 이 프렌차이즈의 계속된 성공은 토탈 워의 경영보다는 플레이어들의 인내심과 선의에 의해 더 잘 설명된다고 생각합니다.\n\n이 진술서로 저는 내가 일한 기간에 Creative Assembly의 문제를 이해하고자 했으며, Rome II 및 당시의 Total War 게임에서 개인적으로 한 역할을 더 잘 이해하고자 했습니다. 지난 10년간 이 상황의 결과와 함께 살아온 후 이 부담에서 벗어나 좋은 느낌이었습니다. 나와 같은 게임 개발자들은 게임을 만드는 것을 처음부터 게임을 좋아해서 시작했고, 나의 경우에는 토탈 워를 사랑했기 때문에 그곳에서 일하기 전에 시리즈의 모든 게임을 플레이했습니다. 저의 진심은 Creative Assembly가 이러한 문제를 극복하고 앞으로 더 나은 결과를 이끌어내기를 희망합니다. 언젠가는 메디발 III를 플레이하는 것도 참 좋을 것 같습니다.\n","ogImage":{"url":"/assets/img/2024-06-22-TotalWarROMEIIandCreativeAssemblyMyStatementTenYearsOn_0.png"},"coverImage":"/assets/img/2024-06-22-TotalWarROMEIIandCreativeAssemblyMyStatementTenYearsOn_0.png","tag":["Tech"],"readingTime":48},{"title":"Apple Vision Pro 디자인하기 Puzzling Places에서 배운 교훈","description":"","date":"2024-06-22 23:57","slug":"2024-06-22-DesigningforAppleVisionProLessonsLearnedfromPuzzlingPlaces","content":"\n애플 비전 프로는 새로운 디자인 도전 과제를 제시합니다. 여기에는 Apple Vision Pro를 위해 Puzzling Places를 처음부터 다시 디자인하는 과정에서 배운 몇 가지 교훈이 있습니다.\n\n이 글에서는 주로 디바이스를 위해 디자인하고 싶은 모든 것에 적용할 수 있는 우리가 배운 일반적인 교훈을 다룰 것입니다. 이외에도 Puzzling Places의 게임 루프에 특화된 몇 가지 교훈이 수반될 것입니다. 디자인 도전 과제뿐만 아니라 기술적 측면에 대해서도 간단히 다루겠습니다.\n\n간단한 고지: 여기서 읽는 내용은 주관적인 의견을 반영하며 Apple의 공식 입장을 대변하는 것이 아닙니다. 맥락을 이해하기 위해 게임 루프의 짧은 예고편이 여기 있습니다.\n\n## 새로운 플랫폼\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n애플의 AR 시장 진출은 많은 기대를 받고 있었습니다. 그래서 우리는 이 게임을 새로운 헤드셋으로 이식하기로 결정했습니다. 일반적으로 VR 헤드셋 간의 이식 과정은 기술 백엔드를 조정하여 새 플랫폼에서 작동하도록 하는 것이지만, 대부분 디자인은 그대로 유지합니다. 그러나 우리가 헤드셋에 대해 알아갈수록, 이것이 실제로 진정한 의미의 새로운 플랫폼일 수도 있다고 생각했습니다. 공식적으로 애플은 AR이나 VR에 대해 이야기하지 않고, 공간 컴퓨팅에 대해 언급합니다. 그 중 일부는 마케팅이지만, 퀘스트 3과 같은 것과 비교하여 이 헤드셋이 어떻게 설계되었는지에는 몇 가지 실제적인 차이가 있습니다. 그래서 이 플랫폼에 디자인을 시작하기 전에는 이것이 실제로 무엇을 의미하는지 생각하는 가치가 있습니다.\n\n지금 당장은 Apple Vision Pro를 위해 만들 수 있는 앱 유형이 세 가지라고 말할 수 있습니다. 이것은 윈도우, 바운드 및 언바운드입니다. 바운드 및 언바운드는 유니티 용어입니다. 기술적으로는 분할이 없습니다. Apple 측에서는 Shared 또는 Full Space에서 생성될 수 있는 창 또는 볼륨이 있습니다. 앱은 이러한 요소들을 각기 다른 방식으로 결합할 수 있습니다. 예를 들어, 여러 창을 함께 다양한 방식으로 볼륨들과 결합할 수 있습니다. 사용자의 필요에 따라 이들 간을 전환하여 매우 창의적일 수 있습니다. 따라서 참조한 페이지를 읽으면 실제 분할은 콘텐츠가 어떻게 표현되는지(2D 창 또는 3D 볼륨) 및 어느 공간에 있는지(다른 앱과 공유되는 공간 또는 완전히 독립된 공간)과 Passthrough 또는 혼합된 VR 환경 여부 사이에 있음을 알 수 있습니다.\n\n실제로 우리에게는 2D(윈도우), 바운드(공유 공간의 하나의 볼륨) 및 언바운드(풀 스페이스의 하나의 볼륨) 사이에서 선택해야 했던 문제였습니다. 이들이 실제 옵션으로 선택된 이유는 대부분 제한된 시간과 예산 및 유니티 엔진을 사용하는 기술적 한계에 있었습니다. 추후 자세한 내용은 뒤에서 다루겠습니다.\n\nVR에서 AVP로 디자인을 이동하려면, 가장 간단한 해결책은 풀 스페이스를 사용하는 것입니다. 당신은 자신만의 헤드셋을 사용하여 Passthrough 환경이나 완전히 가상 환경을 만들 수 있습니다. 해야 할 일은 컨트롤러 기반 상호작용 대신 손/눈 추적을 고려하여 디자인하는 것뿐입니다. 그렇게 하면 원만하게 작동할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nUnbounded/Full Space은 많은 이점을 가지고 있지만, 한 가지 주요 단점이 있습니다: 사용자가 사용자와 나란히 애플리케이션을 열 수 없다는 것입니다.\n\n퀘스트 3의 Puzzling Places에서 가장 많이 요청되는 기능 중 하나는 음악을 듣거나 YouTube 비디오를 시청하거나 오디오북을 듣는 기능입니다. 이러한 기능은 우리에게 매우 비싸게 들어갈 수 있는데, 그것들은 Apple Vision Pro에서만 작동합니다. 당신의 앱이 바운드되어 있고 공유 공간에 있는 경우, 사용자는 퍼즐을 즐기는 동안 원하는 대로 활동할 수 있습니다. 더 긴 퍼즐을 해결하는 동안 FaceTime에서 미팅에 참여하는 능력은 매우 자연스럽고 마법 같이 느껴집니다. Apple이 공간 컴퓨팅을 언급할 때, 아마도 그것이 의미하는 것일 겁니다. AVP는 VR 헤드셋이 아닙니다, 하드웨어 때문이 아니라 생태계 때문에 그렇습니다. Apple은 그것을 얼굴에 착용한 개인용 컴퓨터로 보는 것으로 보입니다. 당신이 많은 일을 할 수 있는 그런 장치입니다.\n\n이전에 언급한 대로, 이상적으로는 사용자가 상호작용할 수 있는 다양한 방법을 모두 지원하는 것이 좋습니다, 공유 공간이든 전체 공간이든 말이죠. 하지만 현실적으로 하나에 집중할 시간이 있어서, 우리는 헤드셋을 위한 Apple의 비전에 맞추기로 결정했고, 헤드셋을 특별하게 만드는 것에 집중했으며, 이미 작동하는 것을 그대로 옮기기보다는 게임 루프에 새로운 것을 배우기로 했습니다.\n\n그러나 앱이 어떤 공간에 있는지를 선택하는 것은 그저 시작에 불과합니다. 이미 장치에 대한 Apple의 비전과 일치하도록 결정했기 때문에, 게임을 위한 제어 패러다임을 디자인하는 것이 더 쉬웠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 직접 및 간접적인 제어\n\n지난 몇 년 동안 놀라운 일 중 하나는 비게이머들에게도 VR 게임이 얼마나 접근하기 쉽다는 것입니다. 그 이유 중 하나는 아마도 VR의 주요 제어 패러다임이 '직접 제어'라는 것일 것입니다. 이는 게임을 직접적으로 몸으로 체험하여 플레이하는 것이라는 멋진 말입니다. 이러한 제어 형태는 매우 직관적이며, 모두가 자신의 몸을 사용하는 방법을 알기 때문입니다.\n\nAVP의 운영 체제 및 공유 공간을 위한 제어 패러다임은 거의 정 반대입니다. 상호 작용하려는 대상을 살펴보고 핀치(pinch)하는 것입니다. 당신의 눈을 마우스 커서로, 핀치를 마우스 왼쪽 클릭으로 생각할 수 있습니다. 이를 애플은 '간접적인 제어'라고 합니다. 직접적인 제어가 직관적이라면, 간접적인 제어는 배워야 합니다. AVP와 상호 작용이 어색하다는 느낌은 아니지만, 선택을 핀치하여 하는 방법이나 손 위치의 이해는 즉시 이해되지 않습니다.\n\n게임에 따라 직접 제어와 간접 제어를 모두 동등하게 지원할 수 있습니다. 그러나 주요 상호 작용 모드 중 하나를 선택하여 더 많은 예산을 들여 그 부분을 개선해야 할 것입니다. 그렇다면 어느 것을 선택하시겠습니까?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAVP의 간접 제어는 배워야 할 필요가 있습니다. 하지만 그것이 나쁜 것은 아닙니다. 비디오 게임에서 아날로그 스틱이 처음 소개된 것과 마찬가지로 일부 기자들은 그겼더라도 이들이 익히기에 너무 복잡하다고 주장했습니다. 그러나 현재, 대부분의 게임은 컨트롤러로 플레이됩니다. 심지어 마우스 커서와 운영 체제와의 상호 작용도 익히는 데 시간이 필요합니다.\n\n이러한 상호 작용 시스템이 왜 이렇게 널리 사용되는 것일까요? 저는 그것들이 매우 다목적이며 게으름을 허용한다는 두 가지 주요 이유가 있다고 믿습니다. AVP 간접 제어는 나에게 둘 다 해당됩니다. 실제 세계에서 거의 한 칸도 옮기지 않으면서 많은 일을 할 수 있습니다. 직접적인 제어는 투명한 물리적 인터페이스를 갖고 있는 반면 간접 제어는 투명한 개념적 인터페이스를 가지고 있습니다!\n\n우리가 한 공유 공간에서 경계가 있는 부피로 만족한다면, 좋은 간접 제어를 활성화할 수밖에 없습니다. 사용자가 볼륨 내부에 있어서가 아니라 그 방향을 향해 있어야 한다는 점 때문입니다. 기본 설정에서 볼륨은 사용자로부터 한 미터 정도 떨어진 곳에 생성될 것입니다. 이 거리 때문에 사용자가 게임 세계를 직접 이동과 게임 플레이로 매핑하는 입력 방법을 통해 조작할 수 없습니다. 경계가 있는 공유 공간에서 볼륨을 신체적으로 상호 작용하는 물리적 공간 대신 3D 공간 모니터로 생각할 수 있습니다.\n\nPuzzling Places의 경우, 게임 플레이 방식이 변경되었다는 것을 의미했습니다. VR 버전에서 퍼즐을 조각으로 걸어가거나 퍼즐을 당겨오는 방식으로 진행합니다. 올바른 방향으로 조각을 물리적으로 회전시키고 올바른 위치에 물리적으로 놓습니다. 말할 필요도 없이 게임 필드가 팔 길이 밖에 있을 경우 그렇게 게임을 할 수 없습니다. 따라서 우리는 게임 루프를 변경했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어떤 앵커 역할을 하는 중심 부분이 있습니다. 이 앵커는 공용 공간의 볼륨에 미터 정도 떨어진 곳에 배치됩니다. 중심 부분과 연결할 수 있는 여러 조각들이 제시됩니다. 연결하고 싶은 조각을 보고, 그 조각을 끌어 마우스로 드래그하는 것처럼 조각을 놓을 위치에 끌어올립니다. 당신의 움직임은 마우스처럼 2D 평면 상에서 이루어지지만, 게임 로직은 깊이와 올바른 방향을 자동으로 계산합니다!\n\n이를 통해 당신은 200조각 짜리 퍼즐을 사무실 책상 위에서 풀 수 있고, 마우스를 움직이는 것만큼 손을 움직일 필요가 없습니다.\n\n간접 제어를 위해 디자인하는 것은 마우스나 컨트롤러를 위해 디자인하는 방식으로 돌아가는 것을 의미합니다. 플레이어의 물리적 움직임을 가상 세계로 일대일로 매핑하는 대신, 약간의 움직임만으로 게임 세계에서 많은 가능성을 열어주는 방식으로 다시 매핑합니다.\n\n이 제어 체계는 주로 눈 추적에 의존하며, 눈 추적을 통해 흥미로운 정보들을 발견하게 되었습니다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Eyetracking의 문제점\n\nAVP의 eyetracking은 실제로 매우 안정적입니다. 기술적으로는 내 시선이 어디를 보고 있는지를 결코 잘못 파악하지 않지만, 여전히 패러다임에는 몇 가지 재미있는 문제가 있습니다.\n\n**일련의 의도 문제**라고 부르고 싶은 가장 두드러진 문제는 무언가를 선택하려면 그 곳을 봐야 한다는 것입니다. 이는 일부 작업을 순차적으로만 수행할 수 있다는 것을 의미합니다. 이것은 크게 중요해 보이지 않을 수 있지만, 컴퓨터를 사용할 때 얼마나 자주 두 가지 이상의 작업을 동시에 하는지에 놀랐습니다. 예를 들어, 어딘가를 보면서 다른 곳을 클릭하는 것과 같은 여러 가지 작업을 한 번에 수행할 때 가장 많은 막힘을 느꼈습니다.\nAVP에서 익숙해지는 데 시간이 걸립니다. 이는 AVP로 멀티태스킹을 못 한다는 뜻이 아니라 기기에 의도를 순차적으로 전달할 수 있다는 것을 의미합니다.\n\n예를 들어, 오른손으로 퍼즐 조각을 선택하고 바로 왼손으로 다른 것을 선택하는 것처럼 두 손에 든 조각을 사용하여 동시에 여러 작업을 수행할 수 있습니다. 그러나 눈을 입력 방법으로 사용하는 모든 것은 인터랙션을 대역폭 제한 인터페이스를 통해 진행해야 한다는 것을 의미합니다.\n\n또한 우리의 눈이 어디를 보는지를 기반으로 우리의 의도를 가정하는 데 추가적인 문제가 있습니다. Saccadic masking과 시각적으로 산만한 것들이 가장 두드러진 문제였습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리의 눈은 일반적으로 삽시적으로 움직입니다. 즉, 빠르고 이산적인 움직임으로 이동합니다. 당연히 이것이 우리가 세계를 지각하는 방식은 아닙니다. 우리의 시각은 부드럽고 지속적인 느낌을 줍니다. 이것은 일종의 후처리인 삽시적 가리기로 인해 발생하는 것인데, 시각 데이터를 왜곡하여 부드러운 전환을 만들 뿐만 아니라 기억을 되짚어 삽시적 움직임의 증거를 가리기 위해 변경합니다. 이것은 눈 추적에 대한 좋지 않은 소식입니다. 우리가 어디를 바라보고 있었는지 생각했던 곳이 실제로 눈이 향하고 있던 곳이 아닐 수도 있습니다! 입력을 활성화하려고 눌렀을 때 과거나 현재에 대해 뇌가 당신에게 거짓말을 하는 것을 명백히 깨닫게 됩니다. 이것은 미묘하게 표현되지만, 저는 이를 전혀 적응하지 못했던 감정이었습니다.\n\n두 번째 문제는 우리의 눈이 여전히 의식 밖에서 때로는 생존을 보장하기 위해 반응하는 감각 입력 방법이라는 점입니다. 빠른 움직임, 매력적인 시각적 자극 또는 부호나 텍스트와 같은 고수준 시멘틱 요소들이 게임 플레이에서 내 눈을 끌어당겼는데, 내가 아무것도 할 수 없는 상황이 발생하는 것입니다. 이와는 별개로, 뇌가 눈이 실제로 하는 일과 병렬 또는 분리되어 동작을 대기열에 넣는 것처럼 보입니다. 예를 들어, 내가 한 조각을 집고 싶다고 결정하면 손가락에 집기 명령을 보내고 눈에는 \"그 조각을 보라\" 를 명령합니다. 이 과정에서 어떤 이유로 인해 내 눈은 오른쪽의 버튼으로 이동하여 그 버튼에 적힌 내용을 읽으려고 합니다. 버튼에는 \"재시작\" 이라고 적혀 있습니다. 그것을 보고 있는 동안, 손가락으로 실행된 집기 명령이 AVP에서 수행되어 게임 루프로 전달됩니다. 그 결과, 내 진행 상황이 다시 시작됩니다. 그런 상황이 발생할 때마다 웃음이 나왔습니다!\n\n그 자체로 컴퓨팅과 지연 시간이 이러한 문제를 가지게 되었음에 실제로 흥미로운 사실입니다! 이것이 디자인 측면에서 의미하는 바는 무엇일까요? 위에 언급된 문제들에는 동일한 해결책이 있습니다. 다음과 같은 요소들로 결정됩니다: 1. 게임과 상호작용의 템포 2. 시각적 요소들 간의 거리 3. 잘못된 긍정의 비용.\n\n첫 번째로, 눈 추적 및 집기 조합으로 플레이어에게 요구되는 더 빠른 반응 시간일수록 뭔가 잘못될 가능성이 높아집니다. 눈 추적을 사용한 빠른 속도의 게임을 가질 수 없다는 것이 아닙니다. 단지 게임 플레이와 관련된 반응 시간이 눈/뇌가 하는 다른 일과 심각하게 겹치는 경우에 문제가 발생할 수 있다는 것입니다. 둘째, 눈 공간에서 상호작용할 수 있는 객체들 사이의 거리가 멀수록 이러한 문제가 발생할 확률이 낮아집니다. 흥미로운 점은 우리가 다양한 알려지지 않은 요소들을 고려하기 위해 아날로그 스틱 제어 입력에 \"데드 존\"을 구축하는 것처럼, 장면에서 상호작용할 수 있는 물체들 간에 물리적인 최소 거리를 제공함으로써 눈의 이상한 행동을 고려할 수 있다는 점입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마지막으로, 잘못된 긍정적인 결과의 비용이 얼마나 큰지 평가하고 그것을 줄일 수 있는지 알 수 있습니다. 실수로 재시작 버튼을 누르는 것은 정말 최악이에요! 그러나 사용자가 누른 후에 추가 확인 창이 표시된다면, 그저 귀찮은 일이 되는 것뿐입니다. 우리 게임의 한 예는 선반 위의 조각들 간을 바꾸는 방법이었습니다. OS 디자인에 맞추기 위해 먼저 스와이프 동작을 사용하기로 결정했지만, 선반 배경과 조각들이 너무 가까워서 스와이프하는 동안 실수로 조각을 선택하는 경우가 있었습니다. 이로 인해 조각이 왼쪽이나 오른쪽으로 던져지면서 불편한 애니메이션이 발생했습니다. 그 대신에 버튼으로 전환했습니다. 이제 사용자가 버튼을 선택하고 실수로 조각을 선택하는 경우, 잘못된 소리가 재생되고 조각이 교체되지 않는 것 이외에는 아무 일도 일어나지 않습니다.\n\n# 공유 공간은 모든 것을 공유\n\n공유 공간을 고려할 때 직면할 도전 중 하나는 앱이 다른 앱 옆에서 매끄럽게 실행될 때 무엇을 의미하는지입니다. 가장 명백한 함의는 컴퓨팅 리소스가 공유된다는 것이므로 전체 처리 능력이 앱에 특화되어 있다고 가정해서는 안 된다는 것입니다.\n\n그러나 인지적 부담과 같은 추가적인 함의도 있습니다. 공유 공간을 위해 디자인하는 경우, 사람들이 당신의 앱을 다른 앱 옆에서 사용할 것으로 의도된다는 것을 의미합니다. 그렇지 않은 경우, 왜 Full Space로 가려하지 않고 추가 작업을 하려고 하는 걸까요? 그렇게 하려면 게임 루프의 인지 부담이 사용자가 FaceTime으로 회의에 참석하거나 작업 문제에 대해 생각할 수 있는 정신적 처리 능력을 남겨두도록 해야 합니다. 이것은 AVP를 위해 Puzzling Places의 루프를 단순화하기로 결정한 이유 중 하나였습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다른 앱들에게 숨 쉬는 공간을 남기는 것은 게임의 모든 영역에서 사용하는 패턴입니다. 사운드스케이프를 디자인하는 동안 다른 앱들도 약간의 소리를 생산할 뿐만 아니라 사용자가 결정할 수 있는 Apple 환경에서도 소리를 내게 될 수 있음을 염두에 두어야 합니다.\n\n소리에 대해 이야기할 때, AVP는 Passthrough에서 충분히 좋아서 소리 스케이프의 합성 반향 프로필이 내가 보고 있는 공간과 일치하지 않을 때 이상하다고 느낄 정도입니다. 이런 일이 발생하지 않는 예로는 Quest 3 Passthrough가 있습니다.\n\n# 기술적인 제한 사항\n\n이 블로그 글을 쓸 당시, 당신이 게임을 개발하고 싶은 위치를 결정해야 하는 첫 번째 결정은 어디에서 게임을 개발할지입니다. 네이티브 Swift / RealitityKit 조합 또는 Unity Engine 중 하나를 선택할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리에게는 네이티브 Swift가 사실 유효한 옵션이 아니었어요. 왜냐면 애플용으로 개발한 경험이 없었거든요. 매우 촉박한 개발 시간을 고려하면, 적어도 계산할 수 있는 위험성이 있는 생태계를 유지하는 것이 더 합리적이었어요. 하지만 Swift 경험이 있으면, 원하신다면 게임을 네이티브로 개발하는 데 많은 이점이 있을 거예요.\n\n가장 큰 제한은 기능에 있어요. Unity에는 AVP로 제한 사항이 몇 가지 있었어요. 예를 들어, 공간 오디오의 부족, 한 번에 하나의 볼륨만 지원하거나 기본 Swift UI 기능에 액세스할 수 없는 등입니다. 이러한 제약 사항 중 일부는 애플 측면, 일부는 Unity 측면, 일부는 AVP 렌더링 아키텍처가 작동하는 방식에 있습니다. 그러나 어쨌든, 언제든지 참여를 결정하더라도, 대부분의 서드파티 라이브러리는 최신 네이티브 기능보다 조금 뒤쳐질 것입니다.\n\nUnity에서 게임을 만들면, Unity는 게임을 두 부분으로 분할하겠죠. 게임 로직은 대부분 CPP 라이브러리로 컴파일되어 주요 게임 루프가 있는 곳에 위치하며, 프로그램을 초기화하는 Swift 코드가 조율됩니다. 씬은 Apple 백엔드가 이해하는 형식으로 변환되며, 관련 구성 요소는 다양한 Apple 구성 요소로 매핑됩니다. Apple은 다른 방식으로 작업하기 때문에, Unity 구성 요소는 당연히 최종 결과물과 일치하지 않아요. 이것은 귀찮은 일입니다.\n\n렌더링 관련해서 일부 머티리얼은 MaterialX로 변환됩니다. 이들은 Apple이 제공한 셰이더의 다양한 PBR 기능을 활용할 수 있을 뿐 아니라, Unity에서 사용할 수 없는 정보를 많이 활용할 수 있어요. 반면, 내 테스트 결과로는 이러한 셰이더가 Metal에서 컴파일할 수 있는 사용자 정의 셰이더보다 훨씬 비용이 많이 듭니다. 성능과 렌더링에 대해 말하자면, AVP의 성능은 어느 정도일까요? 제게는 아이디어가 없네요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n하드웨어 측면에서, AVP는 분명히 현재 시장에서 가장 강력한 상용 헤드셋입니다. 그러나 매우 높은 해상도, 프레임 속도, 그리고 지연 시간을 가지고 있습니다. 따라서 여전히 채움율이 문제가 될 수 있습니다. 렌더링은 Apple 프로세스로 처리되고 게임 로직은 Unity CPP 코드에서 발생하기 때문에 항상 어느 쪽이 지연을 일으키는 원인인지를 파악해야 합니다. 더 나빠진 점은 Unity 코드를 프로파일링할 수 있지만, Apple 측이 무엇을 하는지에 대한 정보는 제공되지 않는다는 것입니다. 현재 Xcode 프로파일러는 상당히 제한된 기능을 가지고 있습니다. Apple 측에서 렌더링이 얼마나 많이 소요되는지에 대한 정보를 더 얻고 싶었을 것입니다.\n\n제한사항에 대해 이야기하자면, 액세스할 수 있는 데이터에 관한 많은 제한이 있습니다. 이는 특히 공유 공간 및 사용자가 전용 볼륨 외부에 있는 경우에 심각한데요. 사용자의 눈이 어디를 보고 있는지 알 필요가 없는 이유에 대한 데이터 보호 관점에서 이해할 수 있지만, 카메라 위치와 같은 정보는 게임 개발에 매우 관련이 있습니다. 예를 들어, 미래에는 눈이 호버링하는 요소들의 하이라이트 행동을 예술적으로 조정할 수 있는 방법이 있었으면 좋겠습니다.\n\nApple Vision Pro에는 이를 활용하는 방법에 대한 많은 아이디어가 있습니다. 이를 위해 디자인할 때, 어디까지 해당 아이디어들과 조화를 이룰 것인지를 결정해야 합니다. 시간이 경과함에 따라 이러한 아이디어 중 몇 개가 남을지, 얼마나 많이 잊힐지가 결정될 것입니다.\n\n읽어주셔서 감사합니다. 계속해서 아래 내 소셜 미디어를 팔로우하실 수 있습니다: https://ircss.github.io/\n","ogImage":{"url":"/assets/img/2024-06-22-DesigningforAppleVisionProLessonsLearnedfromPuzzlingPlaces_0.png"},"coverImage":"/assets/img/2024-06-22-DesigningforAppleVisionProLessonsLearnedfromPuzzlingPlaces_0.png","tag":["Tech"],"readingTime":13}],"page":"27","totalPageCount":119,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":1},"__N_SSG":true}