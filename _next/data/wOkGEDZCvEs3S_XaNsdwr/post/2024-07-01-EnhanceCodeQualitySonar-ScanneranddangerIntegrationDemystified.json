{"pageProps":{"post":{"title":"코드 품질 향상 Sonar-Scanner와 danger 통합 방법 ","description":"","date":"2024-07-01 16:21","slug":"2024-07-01-EnhanceCodeQualitySonar-ScanneranddangerIntegrationDemystified","content":"\n\n이전 게시물 중 하나에서는 npm 피어 종속성 충돌을 해결하는 방법에 대해 이야기했습니다 [1]. 이번에는 코드 문제에 대한 자세한 보고서를 생성하는 방법에 대해 이야기하려고 합니다. 특히 SonarQube를 통합하고 자동화된 코드 리뷰를 위해 danger를 활용하는 방법에 대해 논의하겠습니다.\n\n## 1. Sonar-Scanner\n\nSonarQube Scanner (sonar-scanner)는 여러 프로그래밍 언어에 걸쳐 코드 품질 및 보안을 분석하는 도구입니다. Jenkins와 Maven과 같은 CI/CD 도구와 원활하게 통합되어 코드 문제에 대한 자세한 보고서를 제공하고 유지 관리성을 향상시키며 최상의 코딩 관행을 준수하는 것을 보장합니다.\n\n다음은 sonar-scanner를 사용하는 예시입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nsonar-scanner\n      -Dsonar.projectKey=$sonarQubeProjectKey\n      -Dsonar.login=$sonarQubeToken\n      -Dsonar.sourceEncoding=UTF-8\n      -Dsonar.sources=$npmSonarQubeSources\n      -Dsonar.tests=$npmSonarQubeTests\n      -Dsonar.exclusions=$npmSonarQubeExclusions\n      -Dsonar.test.inclusions=$npmSonarQubeTestInclusions\n      -Dsonar.typescript.lcov.reportPaths=$npmSonarQubeLcovReportPath\n      -Dcom.itestra.cloneview.enabled=false\n```\n\n![Enhance Code Quality](/assets/img/2024-07-01-EnhanceCodeQualitySonar-ScanneranddangerIntegrationDemystified_0.png)\n\n## 1.1 Nx 프로젝트 설정하기\n\nNx를 사용할 때는 다음 값들로 플레이스홀더를 채울 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// configuration with nx\nnpmSonarQubeSources = 'apps,libs'\nnpmSonarQubeTests = 'apps,libs'\nnpmSonarQubeExclusions = '**/node_modules/**,**/*-api/**,**/test-setup.ts'\nnpmSonarQubeTestInclusions = '**/*.spec.ts'\nnpmSonarQubeLcovReportPath = 'coverage/lcov.info'\n```\n\n여러 라이브러리 및/또는 애플리케이션이 구성되어 있으므로 커버리지 보고서를 단일 파일로 병합해야 합니다. 이 집계된 결과는 SonarQube로 전송할 수 있습니다.\n\n다음 코드[2]를 사용하여 이를 달성할 수 있습니다. 그러나 최신 glob 버전과 호환되기 위해 일부 수정이 필요합니다. 다음 코드 조각은 이를 어떻게 수정해야 하는지 보여줍니다.\n\n```js\nconst { glob } = require('glob');\nconst fs = require('fs');\nconst path = require('path');\n\nconst getLcovFiles = function (src) {\n    return new Promise((resolve) => {\n        glob(`${src}/**/lcov.info`)\n            .then((result) => resolve(result))\n            .catch(() => resolve([]));\n    });\n};\n\n(async function () {\n    const files = await getLcovFiles('coverage');\n    const mergedReport = files.reduce((mergedReport, currFile) => (mergedReport += fs.readFileSync(currFile)), '');\n\n    await fs.writeFile(path.resolve('./coverage/lcov.info'), mergedReport, (err) => {\n        if (err) throw err;\n        console.log('파일이 저장되었습니다!');\n    });\n})();\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 스크립트를 사용하려면 해야 할 일은 glob를 의존성으로 추가하는 것 뿐입니다.\n\n```js\nnpm install glob --save\n```\n\n## 1.2. 기타 유형의 프로젝트 설정\n\nNx 없이도 다음 값을 사용하여 자리 표시자를 채울 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\n// nxnpmSonarQubeSources = 'src'이라는 설정 없이\r\nnpmSonarQubeTests = 'src'\r\nnpmSonarQubeExclusions = '**/node_modules/**,**/*-api/**'\r\nnpmSonarQubeTestInclusions = '**/*.spec.ts'\r\nnpmSonarQubeLcovReportPath = 'coverage/lcov.info'\r\n```\r\n\r\n## 1.3 Jest 설정\r\n\r\njest를 사용할 때 (karma 대신) jest와 함께 nx를 사용하면, coverageReports 옵션을 lcov로 설정하여 쉽게 커버리지 보고서를 생성할 수 있습니다.\r\n\r\n```js\r\n// package.json 내의 스크립트\r\n\r\n\"coverage:merge\": \"node merge-coverage.js\",\r\n\"test\": \"nx run-many --all --target=test --code-coverage --coverageReporters=lcov --parallel=2 --runInBand && npm run coverage:merge\",\r\n\"test:ci\": \"npm run test\"\r\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 사용할 수 있는 jest.config의 예시입니다.\n\n```js\nexport default {\n    displayName: 'common',\n    preset: '../../../jest.preset.js',\n    setupFilesAfterEnv: ['<rootDir>/src/test-setup.ts'],\n    coverageDirectory: '../../../coverage/libs/common',\n    transform: {\n        '^.+\\\\.(ts|mjs|js|html)$': [\n            'jest-preset-angular',\n            {\n                tsconfig: '<rootDir>/tsconfig.spec.json',\n                stringifyContentPathRegex: '\\\\.(html|svg)$',\n            },\n        ],\n    },\n    transformIgnorePatterns: ['node_modules/(?!.*\\\\.mjs$|@datorama/akita)'],\n    snapshotSerializers: [\n        'jest-preset-angular/build/serializers/no-ng-attributes',\n        'jest-preset-angular/build/serializers/ng-snapshot',\n        'jest-preset-angular/build/serializers/html-comment',\n    ],\n    moduleNameMapper: {\n        '^lodash-es$': 'lodash',\n    },\n};\n```\n\n## 1.4 Karma 설정\n\n그러나 jest 대신 karma를 사용할 경우, 각 karma.conf 파일에 lcovonly를 리포터로 포함해야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nmodule.exports = () => {\n    return {\n        basePath: '',\n        frameworks: ['jasmine', '@angular-devkit/build-angular'],\n        plugins: [\n            require('karma-jasmine'),\n            require('karma-chrome-launcher'),\n            require('karma-jasmine-html-reporter'),\n            require('karma-coverage-istanbul-reporter'),\n            require('@angular-devkit/build-angular/plugins/karma'),\n        ],\n        client: {\n            clearContext: false, // 브라우저에서 Jasmine Spec Runner 출력을 보이게 유지\n        },\n        jasmineHtmlReporter: {\n            suppressAll: true, // 중복된 추적을 제거\n        },\n        coverageIstanbulReporter: {\n            dir: require('path').join(__dirname, '../../../coverage/common″'),\n            reports: ['html', 'lcovonly'],\n            fixWebpackSourcePaths: true,\n        },\n        reporters: ['progress', 'kjhtml', 'coverage-istanbul'],\n        ...\n}\n```\n\n그리고 코드 커버리지 옵션이 package.json에 설정되어야 합니다.\n\n```js\n\"test\": \"ng test\",\n\"test:ci\": \"npm run test -- --watch false --code-coverage=true\",\n```\n\n## 2. Danger\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTypeScript 프로젝트에서는 danger 의존성을 사용하여 eslint 규칙을 확인하여 코드 리뷰를 자동화합니다. 이는 pull request 에서 linting 문제를 자동으로 식별하여 코드 품질을 유지하는 데 도움이 됩니다. danger 를 통합하려면 Dangerfile 을 설정하여 규칙과 검사를 정의하고 일관된 코딩 표준을 유지하며 리뷰 프로세스를 간소화해야 합니다.\n\n다음은 Dangerfile 을 구성할 수 있는 예시입니다.\n\n```js\nimport {danger, fail, schedule, warn} from 'danger';\nimport {istanbulCoverage} from 'danger-plugin-istanbul-coverage';\nimport {ESLint} from 'eslint';\n\n// 코드 커버리지 확인\nschedule(istanbulCoverage({\n    entrySortMethod: 'least-coverage',\n    numberOfEntries: 30,\n    coveragePath: {path: './coverage/lcov.info', type: 'lcov'},\n    reportFileSet: 'createdOrModified',\n    reportMode: 'warn',\n    threshold: {\n        statements: 80,\n        branches: 80,\n        functions: 80,\n        lines: 80\n    }\n}));\n\nconst enum EslintSeverity {\n    WARNING = 1,\n    ERROR = 2\n}\n\n// ESLint 규칙 검사\nschedule(async () => {\n    try {\n        const filesToLint = danger.git.created_files.concat(danger.git.modified_files);\n        const eslint = new ESLint({});\n\n        const results = await eslint.lintFiles(filesToLint);\n\n        results.forEach(({filePath, messages}) => {\n            messages.forEach(message => {\n                if (message.fatal) {\n                    warn(`Fatal error linting ${filePath} with eslint.`);\n                    return;\n                }\n\n                // 무시된 파일 건너뛰기\n                if (message.severity === EslintSeverity.WARNING && (message.message || '').startsWith('File ignored')) {\n                    return;\n                }\n\n                const fn = reporterFor(message.severity);\n\n                fn(`${filePath} line ${message.line} – ${message.message} (${message.ruleId})`);\n            });\n        });\n    } catch (error) {\n        console.error(error);\n    }\n});\n\nfunction reporterFor(severity: number): (message: string) => void {\n    switch (severity) {\n        case EslintSeverity.WARNING:\n            return warn;\n        case EslintSeverity.ERROR:\n            return fail;\n        default:\n            return () => { /* 아무것도 수행하지 않음 */\n            };\n    }\n}\n```\n\ndanger 및 코드 커버리지 도구를 사용하려면 danger 및 danger-plugin-istanbul-coverage가 모두 의존성으로 추가되어야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// 일부 구버전\n\"danger\": \"10.5.3\",\n\"danger-plugin-istanbul-coverage\": \"^1.6.2\",\n```\n\n그리고 다음 스크립트를 package.json에 추가할 수 있습니다.\n\n```js\n\"danger:ci\": \"danger ci\",\n\"danger:local\": \"danger local\"\n```\n\nGitlab과 함께 danger를 통합하려면 다음 스크립트를 CI/CD 파이프라인에 사용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```bash\nexport DANGER_GITLAB_HOST=${dangerGitlabHost}\nexport DANGER_GITLAB_API_BASE_URL=${dangerGitlabApiBaseUrl}\n                        \ngit branch temp_${BRANCH_NAME}\ngit checkout -b ${dangerBaseBranch}\ngit checkout temp_${BRANCH_NAME}\nnpm run danger:local -- --base ${dangerBaseBranch}\n\nexport NODE_TLS_REJECT_UNAUTHORIZED=0\nnpm run danger:ci\nexport NODE_TLS_REJECT_UNAUTHORIZED=1\n```\n\n## 마무리\n\n저는 SonarScanner를 Nx 및 다양한 유형의 프로젝트에 구성하는 방법과 Jest와 Karma를 사용하여 테스팅하는 방법의 차이점을 강조했습니다. 각 도구의 구체적인 구성 및 모범 사례를 예를 통해 설명하여 개발자들이 테스트 및 코드 품질 전략에 대해 정보를 얻고 결정하는 데 도움이 되기를 바라며 이 비교를 제공했습니다.\n\n게다가, danger의 사용법을 보여주고 이를 CI/CD 파이프라인에 통합하는 방법을 설명했습니다. danger는 eslint 규칙을 강제로 적용하여 코드 리뷰를 자동화하고 일관된 코딩 표준을 유지하며 리뷰 프로세스를 간소화하기 위해 PR에서 이슈를 플래그 처리함으로써 개발자들을 도와줍니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 링크\n\n[1] <https://medium.com/@robert.maiersilldorff/resolving-npm-peer-dependency-conflicts-70d67f4ca7dc>  \n\n[2] <https://yonatankra.com/how-to-create-a-workspace-coverage-report-in-nrwl-nx-monorepo/>  ","ogImage":{"url":"/assets/img/2024-07-01-EnhanceCodeQualitySonar-ScanneranddangerIntegrationDemystified_0.png"},"coverImage":"/assets/img/2024-07-01-EnhanceCodeQualitySonar-ScanneranddangerIntegrationDemystified_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이전 게시물 중 하나에서는 npm 피어 종속성 충돌을 해결하는 방법에 대해 이야기했습니다 [1]. 이번에는 코드 문제에 대한 자세한 보고서를 생성하는 방법에 대해 이야기하려고 합니다. 특히 SonarQube를 통합하고 자동화된 코드 리뷰를 위해 danger를 활용하는 방법에 대해 논의하겠습니다.</p>\n<h2>1. Sonar-Scanner</h2>\n<p>SonarQube Scanner (sonar-scanner)는 여러 프로그래밍 언어에 걸쳐 코드 품질 및 보안을 분석하는 도구입니다. Jenkins와 Maven과 같은 CI/CD 도구와 원활하게 통합되어 코드 문제에 대한 자세한 보고서를 제공하고 유지 관리성을 향상시키며 최상의 코딩 관행을 준수하는 것을 보장합니다.</p>\n<p>다음은 sonar-scanner를 사용하는 예시입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">sonar-scanner\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">projectKey</span>=$sonarQubeProjectKey\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">login</span>=$sonarQubeToken\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">sourceEncoding</span>=<span class=\"hljs-variable constant_\">UTF</span>-<span class=\"hljs-number\">8</span>\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">sources</span>=$npmSonarQubeSources\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">tests</span>=$npmSonarQubeTests\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">exclusions</span>=$npmSonarQubeExclusions\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">test</span>.<span class=\"hljs-property\">inclusions</span>=$npmSonarQubeTestInclusions\n      -<span class=\"hljs-title class_\">Dsonar</span>.<span class=\"hljs-property\">typescript</span>.<span class=\"hljs-property\">lcov</span>.<span class=\"hljs-property\">reportPaths</span>=$npmSonarQubeLcovReportPath\n      -<span class=\"hljs-title class_\">Dcom</span>.<span class=\"hljs-property\">itestra</span>.<span class=\"hljs-property\">cloneview</span>.<span class=\"hljs-property\">enabled</span>=<span class=\"hljs-literal\">false</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-07-01-EnhanceCodeQualitySonar-ScanneranddangerIntegrationDemystified_0.png\" alt=\"Enhance Code Quality\"></p>\n<h2>1.1 Nx 프로젝트 설정하기</h2>\n<p>Nx를 사용할 때는 다음 값들로 플레이스홀더를 채울 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// configuration with nx</span>\nnpmSonarQubeSources = <span class=\"hljs-string\">'apps,libs'</span>\nnpmSonarQubeTests = <span class=\"hljs-string\">'apps,libs'</span>\nnpmSonarQubeExclusions = <span class=\"hljs-string\">'**/node_modules/**,**/*-api/**,**/test-setup.ts'</span>\nnpmSonarQubeTestInclusions = <span class=\"hljs-string\">'**/*.spec.ts'</span>\nnpmSonarQubeLcovReportPath = <span class=\"hljs-string\">'coverage/lcov.info'</span>\n</code></pre>\n<p>여러 라이브러리 및/또는 애플리케이션이 구성되어 있으므로 커버리지 보고서를 단일 파일로 병합해야 합니다. 이 집계된 결과는 SonarQube로 전송할 수 있습니다.</p>\n<p>다음 코드[2]를 사용하여 이를 달성할 수 있습니다. 그러나 최신 glob 버전과 호환되기 위해 일부 수정이 필요합니다. 다음 코드 조각은 이를 어떻게 수정해야 하는지 보여줍니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { glob } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'glob'</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n\n<span class=\"hljs-keyword\">const</span> getLcovFiles = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">src</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> {\n        <span class=\"hljs-title function_\">glob</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${src}</span>/**/lcov.info`</span>)\n            .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =></span> <span class=\"hljs-title function_\">resolve</span>(result))\n            .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">resolve</span>([]));\n    });\n};\n\n(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> files = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getLcovFiles</span>(<span class=\"hljs-string\">'coverage'</span>);\n    <span class=\"hljs-keyword\">const</span> mergedReport = files.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">mergedReport, currFile</span>) =></span> (mergedReport += fs.<span class=\"hljs-title function_\">readFileSync</span>(currFile)), <span class=\"hljs-string\">''</span>);\n\n    <span class=\"hljs-keyword\">await</span> fs.<span class=\"hljs-title function_\">writeFile</span>(path.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">'./coverage/lcov.info'</span>), mergedReport, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'파일이 저장되었습니다!'</span>);\n    });\n})();\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 스크립트를 사용하려면 해야 할 일은 glob를 의존성으로 추가하는 것 뿐입니다.</p>\n<pre><code class=\"hljs language-js\">npm install glob --save\n</code></pre>\n<h2>1.2. 기타 유형의 프로젝트 설정</h2>\n<p>Nx 없이도 다음 값을 사용하여 자리 표시자를 채울 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// nxnpmSonarQubeSources = 'src'이라는 설정 없이</span>\r\nnpmSonarQubeTests = <span class=\"hljs-string\">'src'</span>\r\nnpmSonarQubeExclusions = <span class=\"hljs-string\">'**/node_modules/**,**/*-api/**'</span>\r\nnpmSonarQubeTestInclusions = <span class=\"hljs-string\">'**/*.spec.ts'</span>\r\nnpmSonarQubeLcovReportPath = <span class=\"hljs-string\">'coverage/lcov.info'</span>\n</code></pre>\n<h2>1.3 Jest 설정</h2>\n<p>jest를 사용할 때 (karma 대신) jest와 함께 nx를 사용하면, coverageReports 옵션을 lcov로 설정하여 쉽게 커버리지 보고서를 생성할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// package.json 내의 스크립트</span>\r\n\r\n<span class=\"hljs-string\">\"coverage:merge\"</span>: <span class=\"hljs-string\">\"node merge-coverage.js\"</span>,\r\n<span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"nx run-many --all --target=test --code-coverage --coverageReporters=lcov --parallel=2 --runInBand &#x26;&#x26; npm run coverage:merge\"</span>,\r\n<span class=\"hljs-string\">\"test:ci\"</span>: <span class=\"hljs-string\">\"npm run test\"</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 사용할 수 있는 jest.config의 예시입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">displayName</span>: <span class=\"hljs-string\">'common'</span>,\n    <span class=\"hljs-attr\">preset</span>: <span class=\"hljs-string\">'../../../jest.preset.js'</span>,\n    <span class=\"hljs-attr\">setupFilesAfterEnv</span>: [<span class=\"hljs-string\">'&#x3C;rootDir>/src/test-setup.ts'</span>],\n    <span class=\"hljs-attr\">coverageDirectory</span>: <span class=\"hljs-string\">'../../../coverage/libs/common'</span>,\n    <span class=\"hljs-attr\">transform</span>: {\n        <span class=\"hljs-string\">'^.+\\\\.(ts|mjs|js|html)$'</span>: [\n            <span class=\"hljs-string\">'jest-preset-angular'</span>,\n            {\n                <span class=\"hljs-attr\">tsconfig</span>: <span class=\"hljs-string\">'&#x3C;rootDir>/tsconfig.spec.json'</span>,\n                <span class=\"hljs-attr\">stringifyContentPathRegex</span>: <span class=\"hljs-string\">'\\\\.(html|svg)$'</span>,\n            },\n        ],\n    },\n    <span class=\"hljs-attr\">transformIgnorePatterns</span>: [<span class=\"hljs-string\">'node_modules/(?!.*\\\\.mjs$|@datorama/akita)'</span>],\n    <span class=\"hljs-attr\">snapshotSerializers</span>: [\n        <span class=\"hljs-string\">'jest-preset-angular/build/serializers/no-ng-attributes'</span>,\n        <span class=\"hljs-string\">'jest-preset-angular/build/serializers/ng-snapshot'</span>,\n        <span class=\"hljs-string\">'jest-preset-angular/build/serializers/html-comment'</span>,\n    ],\n    <span class=\"hljs-attr\">moduleNameMapper</span>: {\n        <span class=\"hljs-string\">'^lodash-es$'</span>: <span class=\"hljs-string\">'lodash'</span>,\n    },\n};\n</code></pre>\n<h2>1.4 Karma 설정</h2>\n<p>그러나 jest 대신 karma를 사용할 경우, 각 karma.conf 파일에 lcovonly를 리포터로 포함해야 합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">basePath</span>: <span class=\"hljs-string\">''</span>,\n        <span class=\"hljs-attr\">frameworks</span>: [<span class=\"hljs-string\">'jasmine'</span>, <span class=\"hljs-string\">'@angular-devkit/build-angular'</span>],\n        <span class=\"hljs-attr\">plugins</span>: [\n            <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'karma-jasmine'</span>),\n            <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'karma-chrome-launcher'</span>),\n            <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'karma-jasmine-html-reporter'</span>),\n            <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'karma-coverage-istanbul-reporter'</span>),\n            <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'@angular-devkit/build-angular/plugins/karma'</span>),\n        ],\n        <span class=\"hljs-attr\">client</span>: {\n            <span class=\"hljs-attr\">clearContext</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-comment\">// 브라우저에서 Jasmine Spec Runner 출력을 보이게 유지</span>\n        },\n        <span class=\"hljs-attr\">jasmineHtmlReporter</span>: {\n            <span class=\"hljs-attr\">suppressAll</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 중복된 추적을 제거</span>\n        },\n        <span class=\"hljs-attr\">coverageIstanbulReporter</span>: {\n            <span class=\"hljs-attr\">dir</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>).<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">'../../../coverage/common″'</span>),\n            <span class=\"hljs-attr\">reports</span>: [<span class=\"hljs-string\">'html'</span>, <span class=\"hljs-string\">'lcovonly'</span>],\n            <span class=\"hljs-attr\">fixWebpackSourcePaths</span>: <span class=\"hljs-literal\">true</span>,\n        },\n        <span class=\"hljs-attr\">reporters</span>: [<span class=\"hljs-string\">'progress'</span>, <span class=\"hljs-string\">'kjhtml'</span>, <span class=\"hljs-string\">'coverage-istanbul'</span>],\n        ...\n}\n</code></pre>\n<p>그리고 코드 커버리지 옵션이 package.json에 설정되어야 합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"ng test\"</span>,\n<span class=\"hljs-string\">\"test:ci\"</span>: <span class=\"hljs-string\">\"npm run test -- --watch false --code-coverage=true\"</span>,\n</code></pre>\n<h2>2. Danger</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>TypeScript 프로젝트에서는 danger 의존성을 사용하여 eslint 규칙을 확인하여 코드 리뷰를 자동화합니다. 이는 pull request 에서 linting 문제를 자동으로 식별하여 코드 품질을 유지하는 데 도움이 됩니다. danger 를 통합하려면 Dangerfile 을 설정하여 규칙과 검사를 정의하고 일관된 코딩 표준을 유지하며 리뷰 프로세스를 간소화해야 합니다.</p>\n<p>다음은 Dangerfile 을 구성할 수 있는 예시입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> {danger, fail, schedule, warn} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'danger'</span>;\n<span class=\"hljs-keyword\">import</span> {istanbulCoverage} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'danger-plugin-istanbul-coverage'</span>;\n<span class=\"hljs-keyword\">import</span> {<span class=\"hljs-title class_\">ESLint</span>} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'eslint'</span>;\n\n<span class=\"hljs-comment\">// 코드 커버리지 확인</span>\n<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-title function_\">istanbulCoverage</span>({\n    <span class=\"hljs-attr\">entrySortMethod</span>: <span class=\"hljs-string\">'least-coverage'</span>,\n    <span class=\"hljs-attr\">numberOfEntries</span>: <span class=\"hljs-number\">30</span>,\n    <span class=\"hljs-attr\">coveragePath</span>: {<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'./coverage/lcov.info'</span>, <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'lcov'</span>},\n    <span class=\"hljs-attr\">reportFileSet</span>: <span class=\"hljs-string\">'createdOrModified'</span>,\n    <span class=\"hljs-attr\">reportMode</span>: <span class=\"hljs-string\">'warn'</span>,\n    <span class=\"hljs-attr\">threshold</span>: {\n        <span class=\"hljs-attr\">statements</span>: <span class=\"hljs-number\">80</span>,\n        <span class=\"hljs-attr\">branches</span>: <span class=\"hljs-number\">80</span>,\n        <span class=\"hljs-attr\">functions</span>: <span class=\"hljs-number\">80</span>,\n        <span class=\"hljs-attr\">lines</span>: <span class=\"hljs-number\">80</span>\n    }\n}));\n\n<span class=\"hljs-keyword\">const</span> enum <span class=\"hljs-title class_\">EslintSeverity</span> {\n    <span class=\"hljs-variable constant_\">WARNING</span> = <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-variable constant_\">ERROR</span> = <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-comment\">// ESLint 규칙 검사</span>\n<span class=\"hljs-title function_\">schedule</span>(<span class=\"hljs-keyword\">async</span> () => {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> filesToLint = danger.<span class=\"hljs-property\">git</span>.<span class=\"hljs-property\">created_files</span>.<span class=\"hljs-title function_\">concat</span>(danger.<span class=\"hljs-property\">git</span>.<span class=\"hljs-property\">modified_files</span>);\n        <span class=\"hljs-keyword\">const</span> eslint = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ESLint</span>({});\n\n        <span class=\"hljs-keyword\">const</span> results = <span class=\"hljs-keyword\">await</span> eslint.<span class=\"hljs-title function_\">lintFiles</span>(filesToLint);\n\n        results.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{filePath, messages}</span>) =></span> {\n            messages.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =></span> {\n                <span class=\"hljs-keyword\">if</span> (message.<span class=\"hljs-property\">fatal</span>) {\n                    <span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">`Fatal error linting <span class=\"hljs-subst\">${filePath}</span> with eslint.`</span>);\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                <span class=\"hljs-comment\">// 무시된 파일 건너뛰기</span>\n                <span class=\"hljs-keyword\">if</span> (message.<span class=\"hljs-property\">severity</span> === <span class=\"hljs-title class_\">EslintSeverity</span>.<span class=\"hljs-property\">WARNING</span> &#x26;&#x26; (message.<span class=\"hljs-property\">message</span> || <span class=\"hljs-string\">''</span>).<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">'File ignored'</span>)) {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-title function_\">reporterFor</span>(message.<span class=\"hljs-property\">severity</span>);\n\n                <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${filePath}</span> line <span class=\"hljs-subst\">${message.line}</span> – <span class=\"hljs-subst\">${message.message}</span> (<span class=\"hljs-subst\">${message.ruleId}</span>)`</span>);\n            });\n        });\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(error);\n    }\n});\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reporterFor</span>(<span class=\"hljs-params\">severity: number</span>): <span class=\"hljs-function\">(<span class=\"hljs-params\">message: string</span>) =></span> <span class=\"hljs-keyword\">void</span> {\n    <span class=\"hljs-keyword\">switch</span> (severity) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">EslintSeverity</span>.<span class=\"hljs-property\">WARNING</span>:\n            <span class=\"hljs-keyword\">return</span> warn;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">EslintSeverity</span>.<span class=\"hljs-property\">ERROR</span>:\n            <span class=\"hljs-keyword\">return</span> fail;\n        <span class=\"hljs-attr\">default</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> { <span class=\"hljs-comment\">/* 아무것도 수행하지 않음 */</span>\n            };\n    }\n}\n</code></pre>\n<p>danger 및 코드 커버리지 도구를 사용하려면 danger 및 danger-plugin-istanbul-coverage가 모두 의존성으로 추가되어야 합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 일부 구버전</span>\n<span class=\"hljs-string\">\"danger\"</span>: <span class=\"hljs-string\">\"10.5.3\"</span>,\n<span class=\"hljs-string\">\"danger-plugin-istanbul-coverage\"</span>: <span class=\"hljs-string\">\"^1.6.2\"</span>,\n</code></pre>\n<p>그리고 다음 스크립트를 package.json에 추가할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"danger:ci\"</span>: <span class=\"hljs-string\">\"danger ci\"</span>,\n<span class=\"hljs-string\">\"danger:local\"</span>: <span class=\"hljs-string\">\"danger local\"</span>\n</code></pre>\n<p>Gitlab과 함께 danger를 통합하려면 다음 스크립트를 CI/CD 파이프라인에 사용할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">export</span> DANGER_GITLAB_HOST=<span class=\"hljs-variable\">${dangerGitlabHost}</span>\n<span class=\"hljs-built_in\">export</span> DANGER_GITLAB_API_BASE_URL=<span class=\"hljs-variable\">${dangerGitlabApiBaseUrl}</span>\n                        \ngit branch temp_<span class=\"hljs-variable\">${BRANCH_NAME}</span>\ngit checkout -b <span class=\"hljs-variable\">${dangerBaseBranch}</span>\ngit checkout temp_<span class=\"hljs-variable\">${BRANCH_NAME}</span>\nnpm run danger:<span class=\"hljs-built_in\">local</span> -- --base <span class=\"hljs-variable\">${dangerBaseBranch}</span>\n\n<span class=\"hljs-built_in\">export</span> NODE_TLS_REJECT_UNAUTHORIZED=0\nnpm run danger:ci\n<span class=\"hljs-built_in\">export</span> NODE_TLS_REJECT_UNAUTHORIZED=1\n</code></pre>\n<h2>마무리</h2>\n<p>저는 SonarScanner를 Nx 및 다양한 유형의 프로젝트에 구성하는 방법과 Jest와 Karma를 사용하여 테스팅하는 방법의 차이점을 강조했습니다. 각 도구의 구체적인 구성 및 모범 사례를 예를 통해 설명하여 개발자들이 테스트 및 코드 품질 전략에 대해 정보를 얻고 결정하는 데 도움이 되기를 바라며 이 비교를 제공했습니다.</p>\n<p>게다가, danger의 사용법을 보여주고 이를 CI/CD 파이프라인에 통합하는 방법을 설명했습니다. danger는 eslint 규칙을 강제로 적용하여 코드 리뷰를 자동화하고 일관된 코딩 표준을 유지하며 리뷰 프로세스를 간소화하기 위해 PR에서 이슈를 플래그 처리함으로써 개발자들을 도와줍니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>링크</h1>\n<p>[1] <a href=\"https://medium.com/@robert.maiersilldorff/resolving-npm-peer-dependency-conflicts-70d67f4ca7dc\" rel=\"nofollow\" target=\"_blank\">https://medium.com/@robert.maiersilldorff/resolving-npm-peer-dependency-conflicts-70d67f4ca7dc</a></p>\n<p>[2] <a href=\"https://yonatankra.com/how-to-create-a-workspace-coverage-report-in-nrwl-nx-monorepo/\" rel=\"nofollow\" target=\"_blank\">https://yonatankra.com/how-to-create-a-workspace-coverage-report-in-nrwl-nx-monorepo/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}