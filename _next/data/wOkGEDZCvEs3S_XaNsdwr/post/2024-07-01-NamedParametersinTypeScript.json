{"pageProps":{"post":{"title":"TypeScript에서 Named Parameters 사용하는 방법","description":"","date":"2024-07-01 16:22","slug":"2024-07-01-NamedParametersinTypeScript","content":"\n\n## TypeScript에서 이름이 지정된 매개변수를 정의하는 최선의 방법은 무엇인가요?\n\n이름이 지정된 매개변수로도 알려져 있습니다. 이 글에서는 TypeScript에서 이름이 지정된 매개변수를 정의하는 좋은 방법에 대해 설명하겠습니다.\n\n<img src=\"/assets/img/2024-07-01-NamedParametersinTypeScript_0.png\" />\n\n## 약간의 배경 정보\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특정 기능에 대한 매개변수로 사용되는 객체를 만드는 것을 명명된 매개변수 또는 명명된 인수라고 합니다.\n\n일반적으로 매개변수는 함수 매개변수를 의미하고, 인수는 매개변수에 전달되는 값을 의미합니다. 그러나 저는 두 용어를 서로 바꿔 사용할 것입니다.\n\n명명된 인수는 C#, Kotlin, Swift 등 많은 언어의 기본 기능이지만 Javascript/Typescript에는 해당되지 않습니다. 이것은 오랜 시간 동안 제안되어 왔으며 babel에 플러그인이 있습니다.\n\nJavascript/Typescript에서 명명된 인수를 사용하는 방법은 객체를 정의하는 것입니다. 이것은 관행(회피책)입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이름이 지정된 매개변수 객체는 프로젝트에서 신경 써야 할 \"실제\" 유형 또는 인터페이스가 아닙니다. 그냥 함수의 매개변수에 존재하는 이름이 지정된 인수의 관습으로 살아 있습니다.\n\n제가 그렇게 말하는 이유는 이 객체를 이름이 지정된 매개변수로 생각하면 프로젝트에서의 위치가 더 명확해지기 때문입니다.\n\n여기 C#에서의 이름이 지정된 인수 (이는 TS에서 영감을 받은 언어입니다):\n\n```js\nvoid PrintOrderDetails(\n    string sellerName,\n    int orderNum,\n    string productName\n) {\n// ...\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그리고 이를 어떻게 호출할 수 있는지:\n\n```js\nPrintOrderDetails(\n    orderNum: 31,\n    productName: \"Red Mug\",\n    sellerName: \"Gift Shop\"\n);\n```\n\n이것이 TypeScript에서 지원되면 어떻게 작성할지에 대한 예시입니다.\n\n인자의 순서가 중요하지 않다는 점을 주목해주세요. 이것이 명명된 인자의 강점입니다. 인자를 어떤 순서로든 전달할 수 있고 코드를 읽기 쉽게 만들어줍니다 (어떤 값이 어디로 전달되는지 알 수 있음).\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# TypeScript에서의 최상의 실천 방법은 무엇인가요?\n\n배경 컨텍스트를 고려하면, 다음이 최상의 실천 방법입니다:\n\n```js\nfunction printOrderDetails(options: {\n    sellerName: string,\n    orderNum: number,\n    productName: string\n}): void {\n// ...\n}\n\nprintOrderDetails({\n    orderNum: 31,\n    productName: \"Red Mug\",\n    sellerName: \"Gift Shop\"\n});\n```\n\n이것은 네이티브 네임드 인수와 매우 유사합니다. 이 객체에 대해 타입이나 인터페이스를 만들지 않습니다. 왜냐하면 중요한 인터페이스나 타입이 아니기 때문입니다. 이것은 그냥 네임드 인수입니다. 함수를 호출할 때 다른 목적에 사용되지 않으며 우리가 신경 쓰지 않습니다. 즉, 이것은 필요하지 않으며 오히려 번거로울 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nconst options = {\n    orderNum: 31,\n    productName: \"Red Mug\",\n    sellerName: \"Gift Shop\"\n};\n\nPrintOrderDetails(options);\r\n```\n\n우리는 FunctionOptions를 선언하지 않습니다. 왜냐하면 해당 내용을 내보내지 않거나 정의하지 않기 때문입니다. 우리는 신경 쓰지 않습니다.\n\n## 함수 시그니처에서 파괴 할당을 어떻게 생각하시나요?\n\n이것은 별개의 주제입니다. 그리고 실천법은 팀마다 다를 수 있습니다. 예를 들어, React 프로젝트에서는 함수 시그니처에서 파괴 할당하는 것이 일반적이며, 내가 본 대부분의 프로젝트에서 이것이 표준이라고 볼 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n내 제안은 팀에 가장 적합한 것을 확인하는 것이 좋습니다. 무엇이 더 읽기 쉬운지 확인해보세요. 저는 함수 시그니처를 해체하지 않는 것을 선호하지만, 리액트 프로젝트를 제외하고는 다른 팀원들이 다른 견해를 가질 수도 있습니다.\n\n그래서 합의와 일관성이 중요합니다.\n\n```js\nexport function promiseExperience(options: {\n    experienceName,\n    experienceConfig,\n    experienceDiv,\n    siteId,\n    traversal\n}): Promise<BuildComponent> {\n    const {\n        experienceName,\n        experienceConfig,\n        experienceDiv,\n        siteId,\n        traversal\n    } = options;\n// ...\n}\n```\n\n합의는 객체에 대한 타입을 만드는 것을 의미할 수도 있습니다:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ntype PromiseExperienceParams = {\n    experienceName: string;\n    experienceConfig: TodoAny;\n    experienceDiv: HTMLDivElement;\n    siteId: string;\n    traversal: Traversal;\n};\n\nexport function promiseExperience(options: PromiseExperienceParams): Promise<BuildComponent> {\n    const {\n        experienceName,\n        experienceConfig,\n        experienceDiv,\n        siteId,\n        traversal\n    } = options;\n// ...\n}\n```\n\n하지만 타입을 생성할 때는 내보내지 말고, 함수의 인자로 사용하고 함수의 매개변수로 사용하지 마세요.\n\n# 일관성\n\n모든 프로젝트에서 일관성이 중요합니다.\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일관성이 코드를 읽기 쉽게 만듭니다. 이것이 표준이 됩니다. 프로젝트가 함수 시그니처로 분해된다면, 그것을 따르지 않으면 불일치할 것이고, 그 반대도 마찬가지입니다. 표준적인 방법에서 벗어나는 것은 피하고 싶지 않나요?\n\n이것이 여러분과 팀이 성공하는 데 도움이 되기를 바랍니다.","ogImage":{"url":"/assets/img/2024-07-01-NamedParametersinTypeScript_0.png"},"coverImage":"/assets/img/2024-07-01-NamedParametersinTypeScript_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>TypeScript에서 이름이 지정된 매개변수를 정의하는 최선의 방법은 무엇인가요?</h2>\n<p>이름이 지정된 매개변수로도 알려져 있습니다. 이 글에서는 TypeScript에서 이름이 지정된 매개변수를 정의하는 좋은 방법에 대해 설명하겠습니다.</p>\n<img src=\"/assets/img/2024-07-01-NamedParametersinTypeScript_0.png\">\n<h2>약간의 배경 정보</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>특정 기능에 대한 매개변수로 사용되는 객체를 만드는 것을 명명된 매개변수 또는 명명된 인수라고 합니다.</p>\n<p>일반적으로 매개변수는 함수 매개변수를 의미하고, 인수는 매개변수에 전달되는 값을 의미합니다. 그러나 저는 두 용어를 서로 바꿔 사용할 것입니다.</p>\n<p>명명된 인수는 C#, Kotlin, Swift 등 많은 언어의 기본 기능이지만 Javascript/Typescript에는 해당되지 않습니다. 이것은 오랜 시간 동안 제안되어 왔으며 babel에 플러그인이 있습니다.</p>\n<p>Javascript/Typescript에서 명명된 인수를 사용하는 방법은 객체를 정의하는 것입니다. 이것은 관행(회피책)입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이름이 지정된 매개변수 객체는 프로젝트에서 신경 써야 할 \"실제\" 유형 또는 인터페이스가 아닙니다. 그냥 함수의 매개변수에 존재하는 이름이 지정된 인수의 관습으로 살아 있습니다.</p>\n<p>제가 그렇게 말하는 이유는 이 객체를 이름이 지정된 매개변수로 생각하면 프로젝트에서의 위치가 더 명확해지기 때문입니다.</p>\n<p>여기 C#에서의 이름이 지정된 인수 (이는 TS에서 영감을 받은 언어입니다):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">PrintOrderDetails</span>(\n    string sellerName,\n    int orderNum,\n    string productName\n) {\n<span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그리고 이를 어떻게 호출할 수 있는지:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">PrintOrderDetails</span>(\n    <span class=\"hljs-attr\">orderNum</span>: <span class=\"hljs-number\">31</span>,\n    <span class=\"hljs-attr\">productName</span>: <span class=\"hljs-string\">\"Red Mug\"</span>,\n    <span class=\"hljs-attr\">sellerName</span>: <span class=\"hljs-string\">\"Gift Shop\"</span>\n);\n</code></pre>\n<p>이것이 TypeScript에서 지원되면 어떻게 작성할지에 대한 예시입니다.</p>\n<p>인자의 순서가 중요하지 않다는 점을 주목해주세요. 이것이 명명된 인자의 강점입니다. 인자를 어떤 순서로든 전달할 수 있고 코드를 읽기 쉽게 만들어줍니다 (어떤 값이 어디로 전달되는지 알 수 있음).</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>TypeScript에서의 최상의 실천 방법은 무엇인가요?</h1>\n<p>배경 컨텍스트를 고려하면, 다음이 최상의 실천 방법입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printOrderDetails</span>(<span class=\"hljs-params\">options: {\n    sellerName: string,\n    orderNum: number,\n    productName: string\n}</span>): <span class=\"hljs-keyword\">void</span> {\n<span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-title function_\">printOrderDetails</span>({\n    <span class=\"hljs-attr\">orderNum</span>: <span class=\"hljs-number\">31</span>,\n    <span class=\"hljs-attr\">productName</span>: <span class=\"hljs-string\">\"Red Mug\"</span>,\n    <span class=\"hljs-attr\">sellerName</span>: <span class=\"hljs-string\">\"Gift Shop\"</span>\n});\n</code></pre>\n<p>이것은 네이티브 네임드 인수와 매우 유사합니다. 이 객체에 대해 타입이나 인터페이스를 만들지 않습니다. 왜냐하면 중요한 인터페이스나 타입이 아니기 때문입니다. 이것은 그냥 네임드 인수입니다. 함수를 호출할 때 다른 목적에 사용되지 않으며 우리가 신경 쓰지 않습니다. 즉, 이것은 필요하지 않으며 오히려 번거로울 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">orderNum</span>: <span class=\"hljs-number\">31</span>,\n    <span class=\"hljs-attr\">productName</span>: <span class=\"hljs-string\">\"Red Mug\"</span>,\n    <span class=\"hljs-attr\">sellerName</span>: <span class=\"hljs-string\">\"Gift Shop\"</span>\n};\n\n<span class=\"hljs-title class_\">PrintOrderDetails</span>(options);\n</code></pre>\n<p>우리는 FunctionOptions를 선언하지 않습니다. 왜냐하면 해당 내용을 내보내지 않거나 정의하지 않기 때문입니다. 우리는 신경 쓰지 않습니다.</p>\n<h2>함수 시그니처에서 파괴 할당을 어떻게 생각하시나요?</h2>\n<p>이것은 별개의 주제입니다. 그리고 실천법은 팀마다 다를 수 있습니다. 예를 들어, React 프로젝트에서는 함수 시그니처에서 파괴 할당하는 것이 일반적이며, 내가 본 대부분의 프로젝트에서 이것이 표준이라고 볼 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>내 제안은 팀에 가장 적합한 것을 확인하는 것이 좋습니다. 무엇이 더 읽기 쉬운지 확인해보세요. 저는 함수 시그니처를 해체하지 않는 것을 선호하지만, 리액트 프로젝트를 제외하고는 다른 팀원들이 다른 견해를 가질 수도 있습니다.</p>\n<p>그래서 합의와 일관성이 중요합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">promiseExperience</span>(<span class=\"hljs-params\">options: {\n    experienceName,\n    experienceConfig,\n    experienceDiv,\n    siteId,\n    traversal\n}</span>): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">BuildComponent</span>> {\n    <span class=\"hljs-keyword\">const</span> {\n        experienceName,\n        experienceConfig,\n        experienceDiv,\n        siteId,\n        traversal\n    } = options;\n<span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>합의는 객체에 대한 타입을 만드는 것을 의미할 수도 있습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">type <span class=\"hljs-title class_\">PromiseExperienceParams</span> = {\n    <span class=\"hljs-attr\">experienceName</span>: string;\n    <span class=\"hljs-attr\">experienceConfig</span>: <span class=\"hljs-title class_\">TodoAny</span>;\n    <span class=\"hljs-attr\">experienceDiv</span>: <span class=\"hljs-title class_\">HTMLDivElement</span>;\n    <span class=\"hljs-attr\">siteId</span>: string;\n    <span class=\"hljs-attr\">traversal</span>: <span class=\"hljs-title class_\">Traversal</span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">promiseExperience</span>(<span class=\"hljs-params\">options: PromiseExperienceParams</span>): <span class=\"hljs-title class_\">Promise</span>&#x3C;<span class=\"hljs-title class_\">BuildComponent</span>> {\n    <span class=\"hljs-keyword\">const</span> {\n        experienceName,\n        experienceConfig,\n        experienceDiv,\n        siteId,\n        traversal\n    } = options;\n<span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>하지만 타입을 생성할 때는 내보내지 말고, 함수의 인자로 사용하고 함수의 매개변수로 사용하지 마세요.</p>\n<h1>일관성</h1>\n<p>모든 프로젝트에서 일관성이 중요합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>일관성이 코드를 읽기 쉽게 만듭니다. 이것이 표준이 됩니다. 프로젝트가 함수 시그니처로 분해된다면, 그것을 따르지 않으면 불일치할 것이고, 그 반대도 마찬가지입니다. 표준적인 방법에서 벗어나는 것은 피하고 싶지 않나요?</p>\n<p>이것이 여러분과 팀이 성공하는 데 도움이 되기를 바랍니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}