{"pageProps":{"post":{"title":"루비 필터를 Logstash에서 테스트하는 방법","description":"","date":"2024-05-23 12:49","slug":"2024-05-23-HowtotestaRubyfilterinLogstash","content":"\n이전 기사에서는 Logstash에서 코드를 공유하고 루비 필터에서 모듈을 만드는 방법을 보았습니다. 이 기사에서는 결과 이벤트가 예상대로인지 확인하기 위해 필터를 테스트하는 방법을 보여드릴 것입니다.\n\n# 이전 코드에 대해\n\n기억을 새기기 위해, 코드는 다음과 같았습니다:\n\n```js\nrequire './script/denormalized_by_prizes_utils.rb'\n\n# `params`의 값은 로그스태시 구성에서 `script_params`에 전달된 해시의 값입니다.\ndef register(params)\n    @keep_original_event = params[\"keep_original_event\"]\nend\n\n# 필터 메소드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.\n# 이벤트를 삭제하면 반환 배열에 포함되지 않음을 의미합니다.\n# 새 이벤트를 만드는 것은 반환된 배열에 LogStash::Event의 새 인스턴스만 추가하면 됩니다.\ndef filter(event)\n\n    items = Array.new\n\n    # 원래 이벤트를 유지하려면\n    originalEvent = LogStash::Util::DenormalizationByPrizesHelper::getOriginalEvent(event, @keep_original_event);\n    if not originalEvent.nil?\n        items.push originalEvent\n    end\n\n    # 상품 항목을 가져옵니다 (정규화)\n    prizes = LogStash::Util::DenormalizationByPrizesHelper::getPrizes(event);\n    if prizes.nil?\n        return items\n    end\n\n    # 복제 기본 이벤트 생성\n    eventBase = LogStash::Util::DenormalizationByPrizesHelper::getEventBase(event);\n\n    # 필요한 수정으로 상품 항목별 이벤트 생성\n    prizes.each { |prize|\n        items.push LogStash::Util::DenormalizationByPrizesHelper::createEventForPrize(eventBase, prize);\n    }\n\n    return items;\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 코드는 denormalized_by_prizes_utils.rb 파일 전체 내용입니다.\n\n```rb\nmodule LogStash::Util::DenormalizationByPrizesHelper\n    include LogStash::Util::Loggable\n\n    # 원본 이벤트 유지 여부 확인\n    def self.getOriginalEvent(event, keepOriginalEvent)\n        logger.debug('keepOriginalEvent is :' + keepOriginalEvent.to_s)\n        if keepOriginalEvent.to_s == 'true'\n            event.set('[@metadata][_index]', 'prizes-original');\n            return event;\n        end\n        return nil;\n    end\n\n    # 상금 아이템 얻기 (정규화)\n    def self.getPrizes(event)\n        prizes = event.get(\"prize\");\n        if prizes.nil?\n            logger.warn(\"이벤트에 상금이 없습니다: \" + event.to_s)\n        end\n        return prizes;\n    end\n\n    # 클론 기본 이벤트 생성\n    def self.getEventBase(event)\n        eventBase = event.clone();\n        eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n        eventBase.remove(\"prize\");\n        return eventBase;\n    end\n\n    # 필요한 수정과 함께 현재 상금 아이템을 위한 이벤트 클론 생성\n    def self.createEventForPrize(eventBase, prize)\n        eventPrize = eventBase.clone();\n        # 각 상금 아이템 값을 상금 객체로 복사\n        prize.each { |key,value|\n            eventPrize.set(\"[prize][\" + key + \"]\", value)\n        }\n        return eventPrize;\n    end\nend\n```\n\n## 일반 구문\n\n이 섹션에서는 예상된 이벤트가 실제로 예상한 대로 생성되는지 확인하는 기능 테스트를 작성하는 방법을 보여줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n하나 이상의 테스트 케이스를 작성할 수 있으며 각 테스트 케이스마다 필요한 만큼의 테스트를 수행할 수 있습니다. 이러한 테스트는 루비 필터 파일 끝에 작성되어야 합니다. 즉, register/filter 함수를 포함하는 주 파일에 작성되어야 합니다.\n\n필터 테스트는 다음과 같은 구문을 따라야 합니다:\n\n```js\ntest \"테스트 케이스 이름\" do\n\n    parameters do\n    {\n        # 필터에 전달할 매개변수\n    }\n    end\n\n    in_event {\n        # 필터 프로세스에 도착하는 이벤트\n    }\n\n    # expect 메서드를 사용한 테스트\n\nend\n```\n\n# 저희 루비 필터에 테스트를 구현합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예제에서는 역정규화를 구현했기 때문에 테스트에서 원본 이벤트를 잘 역정규화했는지 여러 경우(원본 이벤트 유지 여부, 상금 목록에 상금 하나 또는 둘의 예)를 확인할 것입니다.\n\n## 테스트 케이스\n\n따라서, 아래에 제시된 네 가지 테스트 케이스가 필요합니다:\n\n```js\ntest \"Case 1: 이벤트에 상금 하나 / 원본 이벤트 유지하지 않음\" do\n\n    parameters do\n    {\n        \"keep_original_event\" => false\n    }\n    end\n\n    in_event {\n        {\n            \"id\"        => 1,\n            \"firstname\" => \"Pierre\",\n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"male\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest \"Case 2: 이벤트에 상금 하나 / 원본 이벤트 유지\" do\n\n    parameters do\n    {\n        \"keep_original_event\" => true\n    }\n    end\n\n    in_event {\n        {\n            \"id\"        => 1,\n            \"firstname\" => \"Pierre\",\n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"male\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest \"Case 3: 이벤트에 상금 둘 / 원본 이벤트 유지하지 않음\" do\n\n    parameters do\n    {\n        \"keep_original_event\" => false\n    }\n    end\n\n    in_event {\n        {\n            \"id\"        => 2,\n            \"firstname\" => \"Marie\",\n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"female\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                },\n                {\n                    \"year\" => 1911,\n                    \"category\" => \"chemistry\"\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest \"Case 4: 이벤트에 상금 둘 / 원본 이벤트 유지\" do\n\n    parameters do\n    {\n        \"keep_original_event\" => true\n    }\n    end\n\n    in_event {\n        {\n            \"id\"        => 2,\n            \"firstname\" => \"Marie\",\n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"female\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                },\n                {\n                    \"year\" => 1911,\n                    \"category\" => \"chemistry\"\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 기능 테스트 구현\n\n이 글에서는 더 복잡한 테스트 케이스(마지막)만 구현할 것입니다. 다른 것들에 대해서도 원리는 동일하지만 서로 다른 테스트 케이스를 테스트하므로 예상 결과는 같지 않을 것입니다.\n\n그래서 마지막 테스트 케이스에서 다음을 확인할 것입니다:\n\n- 원본이 변경 없이 출력에 포함되어 있는지 확인하기\n- \"prize\" 배열의 각 항목마다 문서를 생성하므로 두 항목은 두 개의 문서를 생성해야 합니다\n- 생성된 각 항목이 올바른 공통 필드와 올바른 상금 필드를 포함하고 있는지 확인하기\n- 결과적으로 출력에는 3개의 이벤트가 있어야 하며, 각 이벤트는 별도의 인덱스에 있어야 합니다\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희의 테스트는 다음과 같이 작성될 수 있어요:\n\n```js\ntest \"Case 4: two prizes in event / keep original event\" do\n\n    parameters do\n    {\n        \"keep_original_event\" => true\n    }\n    end\n\n    in_event {\n        {\n            \"id\"        => 2,\n            \"firstname\" => \"Marie\",\n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"female\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                },\n                {\n                    \"year\" => 1911,\n                    \"category\" => \"chemistry\"\n                }\n            ]\n        }\n    }\n\n    expect(\"Count of events\") do |events|\n        events.length == 3\n    end\n\n    expect(\"Each event has same shared fields\") do |events|\n        result = true\n        events.each { |event|\n            result &= event.get(\"[id]\") == 2\n            result &= event.get(\"[firstname]\") == \"Marie\"\n            result &= event.get(\"[surname]\") == \"Curie\"\n            result &= event.get(\"[gender]\") == \"female\"\n        }\n        result\n    end\n\n    expect(\"Each event has good _index\") do |events|\n        result = true\n        result &= events[0].get(\"[@metadata][_index]\") == \"prizes-original\"\n        result &= events[1].get(\"[@metadata][_index]\") == \"prizes-denormalized\"\n        result &= events[2].get(\"[@metadata][_index]\") == \"prizes-denormalized\"\n        result\n    end\n\n    expect(\"Each event has good prize fields\") do |events|\n        result = true\n        result &= events[0].get(\"[prize][0][year]\") == 1903\n        result &= events[0].get(\"[prize][0][category]\") == \"physics\"\n        result &= events[0].get(\"[prize][1][year]\") == 1911\n        result &= events[0].get(\"[prize][1][category]\") == \"chemistry\"\n        result &= events[1].get(\"[prize][year]\") == 1903\n        result &= events[1].get(\"[prize][category]\") == \"physics\"\n        result &= events[2].get(\"[prize][year]\") == 1911\n        result &= events[2].get(\"[prize][category]\") == \"chemistry\"\n        result\n    end\n\nend\n```\n\n여러 개의 어설션을 갖는 `expect` 메서드를 사용할 때는, `&&` 또는 `&=` 연산자를 사용하여 어설션 결과를 결합하는데 문법에 주의하세요.\n\n우리의 테스트 케이스 구현이 준비되었어요. 모든 테스트 케이스는 Logstash 시작 시 실행되며 해당 파이프라인이 생성될 때 실행돼요. 실제로, Logstash는 Ruby 필터에 작성된 모든 테스트를 찾을 수 있어요. 그리고 Logstash 로그에서 모든 테스트 결과를 볼 수 있을 거예요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Markdown 형식으로 변경한 내용입니다.\n\n![이미지1](/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png)\n\n![이미지2](/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_1.png)\n\n테스트가 실패한 경우, 테스트 케이스 이름 및 필요한 모든 정보(매개변수, 입력 이벤트, 결과)를 명확히 확인할 수 있습니다. 최소한 하나의 테스트가 실패하면 연결된 파이프라인은 시작되지 않습니다.\n","ogImage":{"url":"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png"},"coverImage":"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이전 기사에서는 Logstash에서 코드를 공유하고 루비 필터에서 모듈을 만드는 방법을 보았습니다. 이 기사에서는 결과 이벤트가 예상대로인지 확인하기 위해 필터를 테스트하는 방법을 보여드릴 것입니다.</p>\n<h1>이전 코드에 대해</h1>\n<p>기억을 새기기 위해, 코드는 다음과 같았습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">'./script/denormalized_by_prizes_utils.rb'</span>\n\n# <span class=\"hljs-string\">`params`</span>의 값은 로그스태시 구성에서 <span class=\"hljs-string\">`script_params`</span>에 전달된 해시의 값입니다.\ndef <span class=\"hljs-title function_\">register</span>(params)\n    @keep_original_event = params[<span class=\"hljs-string\">\"keep_original_event\"</span>]\nend\n\n# 필터 메소드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.\n# 이벤트를 삭제하면 반환 배열에 포함되지 않음을 의미합니다.\n# 새 이벤트를 만드는 것은 반환된 배열에 <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Event</span>의 새 인스턴스만 추가하면 됩니다.\ndef <span class=\"hljs-title function_\">filter</span>(event)\n\n    items = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\">new</span>\n\n    # 원래 이벤트를 유지하려면\n    originalEvent = <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">getOriginalEvent</span>(event, @keep_original_event);\n    <span class=\"hljs-keyword\">if</span> not originalEvent.<span class=\"hljs-property\">nil</span>?\n        items.<span class=\"hljs-property\">push</span> originalEvent\n    end\n\n    # 상품 항목을 가져옵니다 (정규화)\n    prizes = <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">getPrizes</span>(event);\n    <span class=\"hljs-keyword\">if</span> prizes.<span class=\"hljs-property\">nil</span>?\n        <span class=\"hljs-keyword\">return</span> items\n    end\n\n    # 복제 기본 이벤트 생성\n    eventBase = <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">getEventBase</span>(event);\n\n    # 필요한 수정으로 상품 항목별 이벤트 생성\n    prizes.<span class=\"hljs-property\">each</span> { |prize|\n        items.<span class=\"hljs-property\">push</span> <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">createEventForPrize</span>(eventBase, prize);\n    }\n\n    <span class=\"hljs-keyword\">return</span> items;\nend\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 코드는 denormalized_by_prizes_utils.rb 파일 전체 내용입니다.</p>\n<pre><code class=\"hljs language-rb\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title class_\">LogStash::Util::DenormalizationByPrizesHelper</span>\n    <span class=\"hljs-keyword\">include</span> <span class=\"hljs-title class_\">LogStash::Util::Loggable</span>\n\n    <span class=\"hljs-comment\"># 원본 이벤트 유지 여부 확인</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.getOriginalEvent(event, keepOriginalEvent)\n        logger.debug(<span class=\"hljs-string\">'keepOriginalEvent is :'</span> + keepOriginalEvent.to_s)\n        <span class=\"hljs-keyword\">if</span> keepOriginalEvent.to_s == <span class=\"hljs-string\">'true'</span>\n            event.set(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-original'</span>);\n            <span class=\"hljs-keyword\">return</span> event;\n        <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>;\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-comment\"># 상금 아이템 얻기 (정규화)</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.getPrizes(event)\n        prizes = event.get(<span class=\"hljs-string\">\"prize\"</span>);\n        <span class=\"hljs-keyword\">if</span> prizes.<span class=\"hljs-literal\">nil</span>?\n            logger.warn(<span class=\"hljs-string\">\"이벤트에 상금이 없습니다: \"</span> + event.to_s)\n        <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">return</span> prizes;\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-comment\"># 클론 기본 이벤트 생성</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.getEventBase(event)\n        eventBase = event.clone();\n        eventBase.set(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-denormalized'</span>);\n        eventBase.remove(<span class=\"hljs-string\">\"prize\"</span>);\n        <span class=\"hljs-keyword\">return</span> eventBase;\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-comment\"># 필요한 수정과 함께 현재 상금 아이템을 위한 이벤트 클론 생성</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">self</span>.createEventForPrize(eventBase, prize)\n        eventPrize = eventBase.clone();\n        <span class=\"hljs-comment\"># 각 상금 아이템 값을 상금 객체로 복사</span>\n        prize.each { |<span class=\"hljs-params\">key,value</span>|\n            eventPrize.set(<span class=\"hljs-string\">\"[prize][\"</span> + key + <span class=\"hljs-string\">\"]\"</span>, value)\n        }\n        <span class=\"hljs-keyword\">return</span> eventPrize;\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<h2>일반 구문</h2>\n<p>이 섹션에서는 예상된 이벤트가 실제로 예상한 대로 생성되는지 확인하는 기능 테스트를 작성하는 방법을 보여줍니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>하나 이상의 테스트 케이스를 작성할 수 있으며 각 테스트 케이스마다 필요한 만큼의 테스트를 수행할 수 있습니다. 이러한 테스트는 루비 필터 파일 끝에 작성되어야 합니다. 즉, register/filter 함수를 포함하는 주 파일에 작성되어야 합니다.</p>\n<p>필터 테스트는 다음과 같은 구문을 따라야 합니다:</p>\n<pre><code class=\"hljs language-js\">test <span class=\"hljs-string\">\"테스트 케이스 이름\"</span> <span class=\"hljs-keyword\">do</span>\n\n    parameters <span class=\"hljs-keyword\">do</span>\n    {\n        # 필터에 전달할 매개변수\n    }\n    end\n\n    in_event {\n        # 필터 프로세스에 도착하는 이벤트\n    }\n\n    # expect 메서드를 사용한 테스트\n\nend\n</code></pre>\n<h1>저희 루비 필터에 테스트를 구현합니다.</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>예제에서는 역정규화를 구현했기 때문에 테스트에서 원본 이벤트를 잘 역정규화했는지 여러 경우(원본 이벤트 유지 여부, 상금 목록에 상금 하나 또는 둘의 예)를 확인할 것입니다.</p>\n<h2>테스트 케이스</h2>\n<p>따라서, 아래에 제시된 네 가지 테스트 케이스가 필요합니다:</p>\n<pre><code class=\"hljs language-js\">test <span class=\"hljs-string\">\"Case 1: 이벤트에 상금 하나 / 원본 이벤트 유지하지 않음\"</span> <span class=\"hljs-keyword\">do</span>\n\n    parameters <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-string\">\"keep_original_event\"</span> => <span class=\"hljs-literal\">false</span>\n    }\n    end\n\n    in_event {\n        {\n            <span class=\"hljs-string\">\"id\"</span>        => <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"firstname\"</span> => <span class=\"hljs-string\">\"Pierre\"</span>,\n            <span class=\"hljs-string\">\"surname\"</span>   => <span class=\"hljs-string\">\"Curie\"</span>,\n            <span class=\"hljs-string\">\"gender\"</span>    => <span class=\"hljs-string\">\"male\"</span>,\n            <span class=\"hljs-string\">\"prize\"</span>     => [\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1903</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"physics\"</span>\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest <span class=\"hljs-string\">\"Case 2: 이벤트에 상금 하나 / 원본 이벤트 유지\"</span> <span class=\"hljs-keyword\">do</span>\n\n    parameters <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-string\">\"keep_original_event\"</span> => <span class=\"hljs-literal\">true</span>\n    }\n    end\n\n    in_event {\n        {\n            <span class=\"hljs-string\">\"id\"</span>        => <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"firstname\"</span> => <span class=\"hljs-string\">\"Pierre\"</span>,\n            <span class=\"hljs-string\">\"surname\"</span>   => <span class=\"hljs-string\">\"Curie\"</span>,\n            <span class=\"hljs-string\">\"gender\"</span>    => <span class=\"hljs-string\">\"male\"</span>,\n            <span class=\"hljs-string\">\"prize\"</span>     => [\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1903</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"physics\"</span>\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest <span class=\"hljs-string\">\"Case 3: 이벤트에 상금 둘 / 원본 이벤트 유지하지 않음\"</span> <span class=\"hljs-keyword\">do</span>\n\n    parameters <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-string\">\"keep_original_event\"</span> => <span class=\"hljs-literal\">false</span>\n    }\n    end\n\n    in_event {\n        {\n            <span class=\"hljs-string\">\"id\"</span>        => <span class=\"hljs-number\">2</span>,\n            <span class=\"hljs-string\">\"firstname\"</span> => <span class=\"hljs-string\">\"Marie\"</span>,\n            <span class=\"hljs-string\">\"surname\"</span>   => <span class=\"hljs-string\">\"Curie\"</span>,\n            <span class=\"hljs-string\">\"gender\"</span>    => <span class=\"hljs-string\">\"female\"</span>,\n            <span class=\"hljs-string\">\"prize\"</span>     => [\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1903</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"physics\"</span>\n                },\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1911</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"chemistry\"</span>\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest <span class=\"hljs-string\">\"Case 4: 이벤트에 상금 둘 / 원본 이벤트 유지\"</span> <span class=\"hljs-keyword\">do</span>\n\n    parameters <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-string\">\"keep_original_event\"</span> => <span class=\"hljs-literal\">true</span>\n    }\n    end\n\n    in_event {\n        {\n            <span class=\"hljs-string\">\"id\"</span>        => <span class=\"hljs-number\">2</span>,\n            <span class=\"hljs-string\">\"firstname\"</span> => <span class=\"hljs-string\">\"Marie\"</span>,\n            <span class=\"hljs-string\">\"surname\"</span>   => <span class=\"hljs-string\">\"Curie\"</span>,\n            <span class=\"hljs-string\">\"gender\"</span>    => <span class=\"hljs-string\">\"female\"</span>,\n            <span class=\"hljs-string\">\"prize\"</span>     => [\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1903</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"physics\"</span>\n                },\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1911</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"chemistry\"</span>\n                }\n            ]\n        }\n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>기능 테스트 구현</h2>\n<p>이 글에서는 더 복잡한 테스트 케이스(마지막)만 구현할 것입니다. 다른 것들에 대해서도 원리는 동일하지만 서로 다른 테스트 케이스를 테스트하므로 예상 결과는 같지 않을 것입니다.</p>\n<p>그래서 마지막 테스트 케이스에서 다음을 확인할 것입니다:</p>\n<ul>\n<li>원본이 변경 없이 출력에 포함되어 있는지 확인하기</li>\n<li>\"prize\" 배열의 각 항목마다 문서를 생성하므로 두 항목은 두 개의 문서를 생성해야 합니다</li>\n<li>생성된 각 항목이 올바른 공통 필드와 올바른 상금 필드를 포함하고 있는지 확인하기</li>\n<li>결과적으로 출력에는 3개의 이벤트가 있어야 하며, 각 이벤트는 별도의 인덱스에 있어야 합니다</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>저희의 테스트는 다음과 같이 작성될 수 있어요:</p>\n<pre><code class=\"hljs language-js\">test <span class=\"hljs-string\">\"Case 4: two prizes in event / keep original event\"</span> <span class=\"hljs-keyword\">do</span>\n\n    parameters <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-string\">\"keep_original_event\"</span> => <span class=\"hljs-literal\">true</span>\n    }\n    end\n\n    in_event {\n        {\n            <span class=\"hljs-string\">\"id\"</span>        => <span class=\"hljs-number\">2</span>,\n            <span class=\"hljs-string\">\"firstname\"</span> => <span class=\"hljs-string\">\"Marie\"</span>,\n            <span class=\"hljs-string\">\"surname\"</span>   => <span class=\"hljs-string\">\"Curie\"</span>,\n            <span class=\"hljs-string\">\"gender\"</span>    => <span class=\"hljs-string\">\"female\"</span>,\n            <span class=\"hljs-string\">\"prize\"</span>     => [\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1903</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"physics\"</span>\n                },\n                {\n                    <span class=\"hljs-string\">\"year\"</span> => <span class=\"hljs-number\">1911</span>,\n                    <span class=\"hljs-string\">\"category\"</span> => <span class=\"hljs-string\">\"chemistry\"</span>\n                }\n            ]\n        }\n    }\n\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">\"Count of events\"</span>) <span class=\"hljs-keyword\">do</span> |events|\n        events.<span class=\"hljs-property\">length</span> == <span class=\"hljs-number\">3</span>\n    end\n\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">\"Each event has same shared fields\"</span>) <span class=\"hljs-keyword\">do</span> |events|\n        result = <span class=\"hljs-literal\">true</span>\n        events.<span class=\"hljs-property\">each</span> { |event|\n            result &#x26;= event.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[id]\"</span>) == <span class=\"hljs-number\">2</span>\n            result &#x26;= event.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[firstname]\"</span>) == <span class=\"hljs-string\">\"Marie\"</span>\n            result &#x26;= event.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[surname]\"</span>) == <span class=\"hljs-string\">\"Curie\"</span>\n            result &#x26;= event.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[gender]\"</span>) == <span class=\"hljs-string\">\"female\"</span>\n        }\n        result\n    end\n\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">\"Each event has good _index\"</span>) <span class=\"hljs-keyword\">do</span> |events|\n        result = <span class=\"hljs-literal\">true</span>\n        result &#x26;= events[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[@metadata][_index]\"</span>) == <span class=\"hljs-string\">\"prizes-original\"</span>\n        result &#x26;= events[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[@metadata][_index]\"</span>) == <span class=\"hljs-string\">\"prizes-denormalized\"</span>\n        result &#x26;= events[<span class=\"hljs-number\">2</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[@metadata][_index]\"</span>) == <span class=\"hljs-string\">\"prizes-denormalized\"</span>\n        result\n    end\n\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-string\">\"Each event has good prize fields\"</span>) <span class=\"hljs-keyword\">do</span> |events|\n        result = <span class=\"hljs-literal\">true</span>\n        result &#x26;= events[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][0][year]\"</span>) == <span class=\"hljs-number\">1903</span>\n        result &#x26;= events[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][0][category]\"</span>) == <span class=\"hljs-string\">\"physics\"</span>\n        result &#x26;= events[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][1][year]\"</span>) == <span class=\"hljs-number\">1911</span>\n        result &#x26;= events[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][1][category]\"</span>) == <span class=\"hljs-string\">\"chemistry\"</span>\n        result &#x26;= events[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][year]\"</span>) == <span class=\"hljs-number\">1903</span>\n        result &#x26;= events[<span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][category]\"</span>) == <span class=\"hljs-string\">\"physics\"</span>\n        result &#x26;= events[<span class=\"hljs-number\">2</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][year]\"</span>) == <span class=\"hljs-number\">1911</span>\n        result &#x26;= events[<span class=\"hljs-number\">2</span>].<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"[prize][category]\"</span>) == <span class=\"hljs-string\">\"chemistry\"</span>\n        result\n    end\n\nend\n</code></pre>\n<p>여러 개의 어설션을 갖는 <code>expect</code> 메서드를 사용할 때는, <code>&#x26;&#x26;</code> 또는 <code>&#x26;=</code> 연산자를 사용하여 어설션 결과를 결합하는데 문법에 주의하세요.</p>\n<p>우리의 테스트 케이스 구현이 준비되었어요. 모든 테스트 케이스는 Logstash 시작 시 실행되며 해당 파이프라인이 생성될 때 실행돼요. 실제로, Logstash는 Ruby 필터에 작성된 모든 테스트를 찾을 수 있어요. 그리고 Logstash 로그에서 모든 테스트 결과를 볼 수 있을 거예요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 Markdown 형식으로 변경한 내용입니다.</p>\n<p><img src=\"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_1.png\" alt=\"이미지2\"></p>\n<p>테스트가 실패한 경우, 테스트 케이스 이름 및 필요한 모든 정보(매개변수, 입력 이벤트, 결과)를 명확히 확인할 수 있습니다. 최소한 하나의 테스트가 실패하면 연결된 파이프라인은 시작되지 않습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}