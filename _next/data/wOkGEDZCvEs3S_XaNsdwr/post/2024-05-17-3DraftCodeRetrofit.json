{"pageProps":{"post":{"title":"3DraftCode  Retrofit","description":"","date":"2024-05-17 17:47","slug":"2024-05-17-3DraftCodeRetrofit","content":"\n<img src=\"/assets/img/2024-05-17-3DraftCodeRetrofit_0.png\" />\n\n# Retrofit이란 무엇인가요?\n\nRetrofit은 안드로이드 개발에서 네트워킹을 위해 사용되는 인기 있는 라이브러리 또는 종속성 중 하나입니다. 이는 RESTful 서비스와 상호 작용하는 데 사용하는 고수준 인터페이스를 제공하여 웹 서비스와 API로 HTTP 요청을 보내는 과정을 단순화합니다. Retrofit을 사용하면 API 엔드포인트와 JSON 응답을 나타내는 데이터 모델을 간단하고 선언적인 방식으로 정의할 수 있습니다. 또한 네트워크 요청, JSON 데이터의 직렬화 및 역직렬화와 같은 작업을 처리하여 개발자가 안드로이드 애플리케이션에서 웹 서버와 RESTful API를 소비하는 것이 더 쉽도록합니다. 전반적으로 Retrofit은 안드로이드 앱에서 네트워크 작업을 처리하는 간편함, 효율성 및 유연성으로 널리 사용됩니다.\n\n# 왜 Retrofit을 사용해야 할까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRetrofit은 Android 개발에서 네트워크 작업을 처리하는 우선적인 선택으로 여겨지는 몇 가지 이점을 제공합니다:\n\n- 간편함: Retrofit은 API 엔드포인트를 정의하고 상호 작용하기 위한 깨끗하고 직관적인 인터페이스를 제공하여 네트워크 요청을 만드는 과정을 간소화합니다.\n- 유형 안정성: Retrofit은 API 인터페이스 정의를 기반으로 유형 안전한 HTTP 클라이언트를 생성합니다. 이는 개발자로서 HTTP 요청 및 응답에 대한 컴파일 시간 유효성 검사를 제공하여 데이터 유형이 잘못된 경우나 필드가 누락된 경우의 런타임 오류 가능성을 줄입니다.\n- 쉬운 통합: Retrofit은 Android 생태계의 다른 인기 있는 라이브러리들과 원활하게 통합됩니다. 예를 들어 JSON 직렬화/역직렬화를 위한 Gson이나 Moshi, 그리고 비동기 작업 처리를 위한 RxJava나 Kotlin 코루틴 등을 사용할 수 있습니다.\n- 효율성: Retrofit은 성능을 최적화하여 네트워크 리소스를 효율적으로 사용합니다. 요청/응답 캐싱, 연결 풀링, 비동기 요청 실행 등의 기능을 지원하여 빠르고 반응성이 좋은 애플리케이션을 만드는 데 도움을 줍니다.\n- 유연성: Retrofit은 다양한 사용 사례와 요구 사항에 적응하기 위한 다양한 사용자 정의 옵션을 제공합니다. HTTP 헤더, 요청 타임아웃, 오류 처리 메커니즘, 로깅 수준 등을 필요에 맞춰 구성할 수 있습니다.\n\n# Retrofit을 사용해야 하는 경우?\n\nRetrofit이 제공하는 다양한 이점을 고려하면, 네트워크 작업 및 RESTful API와 작업할 때마다 Retrofit을 사용해야 한다고 생각합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Retrofit 예제?\n\n여기서 Retrofit을 사용하는 방법을 공유할게요.\n\n1. Android 프로젝트에 Retrofit 추가하기 (build.gradle)\n\n```js\ndependencies {\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0' // JSON 직렬화/역직렬화를 위해\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 데이터 클래스 정의\n\nJSON 응답 API를 기반으로 데이터 클래스를 정의하세요.\n\n```kotlin\ndata class User(\n    val id: Int,\n    val name: String,\n    val username: String,\n    val email: String\n)\n```\n\n3. API 인터페이스 정의\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n인터페이스 ApiService {\n\n    @GET(\"users/{id}\")\n    fun getUserById(@Path(\"id\") userId: Int): Call<User>\n\n}\n```\n\n4. Retrofit 인스턴스 생성\n\n기본 URL을 구성하고 JSON 파싱을 위한 컨버터 팩토리를 추가하려면 Retrofit 인스턴스를 설정하십시오.\n\n```kotlin\nobject ApiClient {\n    private const val BASE_URL = \"https://jsonplaceholder.typicode.com/\"\n\n    val retrofit: Retrofit = Retrofit.Builder()\n        .baseUrl(BASE_URL)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build()\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n5. 네트워크 요청 만들기\n\n여기에서 Retrofit을 사용하여 Activity에서 네트워크 요청을 할 수 있습니다.\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var apiService: ApiService\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        apiService = ApiClient.retrofit.create(ApiService::class.java)\n\n        getUserById(userId: 1)\n    }\n\n    private fun getUserById(userId: Int) {\n        val call = apiService.getUserById(userId)\n        call.enqueue(object : Callback<User> {\n            override fun onResponse(call: Call<User>, response: Response<User>) {\n                if (response.isSuccessful) {\n                    val user = response.body()\n                    Log.d(\"MainActivity\", \"User: $user\")\n                } else {\n                    Log.e(\"MainActivity\", \"Request failed: ${response.errorBody()}\")\n                }\n            }\n\n            override fun onFailure(call: Call<User>, t: Throwable) {\n                Log.e(\"MainActivity\", \"Network request failed\", t)\n            }\n        })\n    }\n}\n```\n\n6. Manifest에 권한을 추가하는 것을 잊지 마세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n자세한 내용은 Retrofit 공식 페이지를 확인해보세요.\n","ogImage":{"url":"/assets/img/2024-05-17-3DraftCodeRetrofit_0.png"},"coverImage":"/assets/img/2024-05-17-3DraftCodeRetrofit_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-17-3DraftCodeRetrofit_0.png\">\n<h1>Retrofit이란 무엇인가요?</h1>\n<p>Retrofit은 안드로이드 개발에서 네트워킹을 위해 사용되는 인기 있는 라이브러리 또는 종속성 중 하나입니다. 이는 RESTful 서비스와 상호 작용하는 데 사용하는 고수준 인터페이스를 제공하여 웹 서비스와 API로 HTTP 요청을 보내는 과정을 단순화합니다. Retrofit을 사용하면 API 엔드포인트와 JSON 응답을 나타내는 데이터 모델을 간단하고 선언적인 방식으로 정의할 수 있습니다. 또한 네트워크 요청, JSON 데이터의 직렬화 및 역직렬화와 같은 작업을 처리하여 개발자가 안드로이드 애플리케이션에서 웹 서버와 RESTful API를 소비하는 것이 더 쉽도록합니다. 전반적으로 Retrofit은 안드로이드 앱에서 네트워크 작업을 처리하는 간편함, 효율성 및 유연성으로 널리 사용됩니다.</p>\n<h1>왜 Retrofit을 사용해야 할까요?</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Retrofit은 Android 개발에서 네트워크 작업을 처리하는 우선적인 선택으로 여겨지는 몇 가지 이점을 제공합니다:</p>\n<ul>\n<li>간편함: Retrofit은 API 엔드포인트를 정의하고 상호 작용하기 위한 깨끗하고 직관적인 인터페이스를 제공하여 네트워크 요청을 만드는 과정을 간소화합니다.</li>\n<li>유형 안정성: Retrofit은 API 인터페이스 정의를 기반으로 유형 안전한 HTTP 클라이언트를 생성합니다. 이는 개발자로서 HTTP 요청 및 응답에 대한 컴파일 시간 유효성 검사를 제공하여 데이터 유형이 잘못된 경우나 필드가 누락된 경우의 런타임 오류 가능성을 줄입니다.</li>\n<li>쉬운 통합: Retrofit은 Android 생태계의 다른 인기 있는 라이브러리들과 원활하게 통합됩니다. 예를 들어 JSON 직렬화/역직렬화를 위한 Gson이나 Moshi, 그리고 비동기 작업 처리를 위한 RxJava나 Kotlin 코루틴 등을 사용할 수 있습니다.</li>\n<li>효율성: Retrofit은 성능을 최적화하여 네트워크 리소스를 효율적으로 사용합니다. 요청/응답 캐싱, 연결 풀링, 비동기 요청 실행 등의 기능을 지원하여 빠르고 반응성이 좋은 애플리케이션을 만드는 데 도움을 줍니다.</li>\n<li>유연성: Retrofit은 다양한 사용 사례와 요구 사항에 적응하기 위한 다양한 사용자 정의 옵션을 제공합니다. HTTP 헤더, 요청 타임아웃, 오류 처리 메커니즘, 로깅 수준 등을 필요에 맞춰 구성할 수 있습니다.</li>\n</ul>\n<h1>Retrofit을 사용해야 하는 경우?</h1>\n<p>Retrofit이 제공하는 다양한 이점을 고려하면, 네트워크 작업 및 RESTful API와 작업할 때마다 Retrofit을 사용해야 한다고 생각합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Retrofit 예제?</h1>\n<p>여기서 Retrofit을 사용하는 방법을 공유할게요.</p>\n<ol>\n<li>Android 프로젝트에 Retrofit 추가하기 (build.gradle)</li>\n</ol>\n<pre><code class=\"hljs language-js\">dependencies {\n    implementation <span class=\"hljs-string\">'com.squareup.retrofit2:retrofit:2.9.0'</span>\n    implementation <span class=\"hljs-string\">'com.squareup.retrofit2:converter-gson:2.9.0'</span> <span class=\"hljs-comment\">// JSON 직렬화/역직렬화를 위해</span>\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol start=\"2\">\n<li>데이터 클래스 정의</li>\n</ol>\n<p>JSON 응답 API를 기반으로 데이터 클래스를 정의하세요.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">data</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(\n    <span class=\"hljs-keyword\">val</span> id: <span class=\"hljs-built_in\">Int</span>,\n    <span class=\"hljs-keyword\">val</span> name: String,\n    <span class=\"hljs-keyword\">val</span> username: String,\n    <span class=\"hljs-keyword\">val</span> email: String\n)\n</code></pre>\n<ol start=\"3\">\n<li>API 인터페이스 정의</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\">인터페이스 ApiService {\n\n    <span class=\"hljs-meta\">@GET(<span class=\"hljs-string\">\"users/{id}\"</span>)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getUserById</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Path(<span class=\"hljs-string\">\"id\"</span>)</span> userId: <span class=\"hljs-type\">Int</span>)</span></span>: Call&#x3C;User>\n\n}\n</code></pre>\n<ol start=\"4\">\n<li>Retrofit 인스턴스 생성</li>\n</ol>\n<p>기본 URL을 구성하고 JSON 파싱을 위한 컨버터 팩토리를 추가하려면 Retrofit 인스턴스를 설정하십시오.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">object</span> ApiClient {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">val</span> BASE_URL = <span class=\"hljs-string\">\"https://jsonplaceholder.typicode.com/\"</span>\n\n    <span class=\"hljs-keyword\">val</span> retrofit: Retrofit = Retrofit.Builder()\n        .baseUrl(BASE_URL)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build()\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol start=\"5\">\n<li>네트워크 요청 만들기</li>\n</ol>\n<p>여기에서 Retrofit을 사용하여 Activity에서 네트워크 요청을 할 수 있습니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainActivity</span> : <span class=\"hljs-type\">AppCompatActivity</span>() {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> apiService: ApiService\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        apiService = ApiClient.retrofit.create(ApiService::<span class=\"hljs-keyword\">class</span>.java)\n\n        getUserById(userId: <span class=\"hljs-number\">1</span>)\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getUserById</span><span class=\"hljs-params\">(userId: <span class=\"hljs-type\">Int</span>)</span></span> {\n        <span class=\"hljs-keyword\">val</span> call = apiService.getUserById(userId)\n        call.enqueue(<span class=\"hljs-keyword\">object</span> : Callback&#x3C;User> {\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onResponse</span><span class=\"hljs-params\">(call: <span class=\"hljs-type\">Call</span>&#x3C;<span class=\"hljs-type\">User</span>>, response: <span class=\"hljs-type\">Response</span>&#x3C;<span class=\"hljs-type\">User</span>>)</span></span> {\n                <span class=\"hljs-keyword\">if</span> (response.isSuccessful) {\n                    <span class=\"hljs-keyword\">val</span> user = response.body()\n                    Log.d(<span class=\"hljs-string\">\"MainActivity\"</span>, <span class=\"hljs-string\">\"User: <span class=\"hljs-variable\">$user</span>\"</span>)\n                } <span class=\"hljs-keyword\">else</span> {\n                    Log.e(<span class=\"hljs-string\">\"MainActivity\"</span>, <span class=\"hljs-string\">\"Request failed: <span class=\"hljs-subst\">${response.errorBody()}</span>\"</span>)\n                }\n            }\n\n            <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onFailure</span><span class=\"hljs-params\">(call: <span class=\"hljs-type\">Call</span>&#x3C;<span class=\"hljs-type\">User</span>>, t: <span class=\"hljs-type\">Throwable</span>)</span></span> {\n                Log.e(<span class=\"hljs-string\">\"MainActivity\"</span>, <span class=\"hljs-string\">\"Network request failed\"</span>, t)\n            }\n        })\n    }\n}\n</code></pre>\n<ol start=\"6\">\n<li>Manifest에 권한을 추가하는 것을 잊지 마세요.</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;uses-permission <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\"android.permission.INTERNET\"</span> />\n</code></pre>\n<p>자세한 내용은 Retrofit 공식 페이지를 확인해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}