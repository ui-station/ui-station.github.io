{"pageProps":{"post":{"title":"프론트엔드 개발자를 위한 간단하면서도 재미있는 공룡 게임 만들기 가이드","description":"","date":"2024-07-01 16:30","slug":"2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide","content":"\n\n프로젝트를 작업 중에 인터넷 장애를 겪은 적이 있나요? 그러면 크롬 디노 게임을 하게 되는 경우가 많죠. 이 게임은 간단하면서 중독성이 강하며 웹 기반 게임의 훌륭한 예입니다. 이 기사에서는 핵심 프론트엔드 개발 최상의 실천법을 강조하면서 디노 게임의 자신만의 버전을 만드는 방법을 안내해 드릴 거에요.\n\n![이미지](/assets/img/2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide_0.png)\n\n# 핵심 프론트엔드 개발 실천법\n\n## 1. 간결함\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n크롬 디노 게임은 간단하지만 재미있습니다. 미니멀한 디자인으로 빠른 로딩 시간과 쉬운 게임 플레이를 보장합니다. 우리도 이 같은 원칙을 게임에 적용할 것입니다.\n\n## 2. 반응형 디자인\n\n미디어 쿼리를 사용하여 모든 기기에서 게임이 잘 보이도록 합니다. 화면 크기에 따라 게임 컨테이너의 높이가 조정됩니다.\n\n## 3. 성능 최적화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n에셋을 최소화하고 코드를 최적화하면 성능을 크게 향상시키고 Dino 게임이 즉시로드되고 저전력 장치에서도 원할하게 작동하도록 할 수 있습니다. 이러한 목표를 달성하는 방법에 대해 알아보겠습니다.\n\n## 4. 오프라인 기능\n\nChrome Dino와 같은 게임은 오프라인에서 실행되어 인터넷 연결 없이도 즐길 수 있습니다. 기본 HTML, CSS, 그리고 JavaScript를 사용하여 게임이 오프라인에서도 플레이 가능하도록 만들어 보겠습니다.\n\n## 5. 사용자 참여\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자가 계속해서 방문하는 것은 매력적인 경험을 제공할 때입니다. 우리는 게임에 게임화 요소를 추가할 거에요.\n\n## 6. Lazy Loading\n\n게임이 자원을 효율적으로 로드하도록 보장할 거예요. 이는 성능에 중요한 요소입니다.\n\n# 모두 결합하기\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에는 장애물, 점수 및 게임 오버 시나리오가 있는 간단하면서 매력적인 Dino 게임을 만드는 완전한 예제가 있습니다.\n\n데모 사이트: https://dinogamedemo.netlify.app\n\n## HTML: (index.html)\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Challenging Dino Game</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #e0e0e0;\n            font-family: Arial, sans-serif;\n        }\n        #game-container {\n            width: 100%;\n            height: 50vh;\n            position: relative;\n            overflow: hidden;\n            background-color: #f0f0f0;\n            border: 2px solid #000;\n        }\n        #dino, .obstacle {\n            position: absolute;\n            bottom: 0;\n        }\n        #dino {\n            width: 50px;\n            height: 50px;\n            background-color: green;\n        }\n        .obstacle {\n            background-color: red;\n        }\n        #score {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n        }\n        @media (min-width: 600px) {\n            #game-container {\n                height: 70vh;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div id=\"game-container\">\n        <div id=\"dino\"></div>\n        <div id=\"score\">Score: 0</div>\n    </div>\n    <script>\n        let isJumping = false;\n        let score = 0;\n        let gameSpeed = 4;\n        const dino = document.getElementById('dino');\n        const scoreDisplay = document.getElementById('score');\n        \n        document.addEventListener('keydown', function(event) {\n            if (event.code === 'Space' && !isJumping) {\n                jump();\n            }\n        });\n\n        function jump() {\n            if (isJumping) return;\n            isJumping = true;\n            let upInterval = setInterval(() => {\n                if (dino.style.bottom === '100px') {\n                    clearInterval(upInterval);\n                    let downInterval = setInterval(() => {\n                        if (dino.style.bottom === '0px') {\n                            clearInterval(downInterval);\n                            isJumping = false;\n                        }\n                        dino.style.bottom = `${parseInt(dino.style.bottom) - 5}px`;\n                    }, 20);\n                }\n                dino.style.bottom = `${parseInt(dino.style.bottom) + 5}px`;\n            }, 20);\n        }\n\n        function createObstacle() {\n            const obstacle = document.createElement('div');\n            obstacle.classList.add('obstacle');\n            obstacle.style.width = `${Math.random() * 40 + 20}px`;\n            obstacle.style.height = `${Math.random() * 40 + 20}px`;\n            obstacle.style.right = '0';\n            document.getElementById('game-container').appendChild(obstacle);\n\n            moveObstacle(obstacle);\n\n            // Randomly decide to create another obstacle shortly after the current one\n            if (Math.random() < 0.3) {\n                setTimeout(createObstacle, Math.random() * 2000);\n            }\n        }\n\n        function moveObstacle(obstacle) {\n            let obstaclePosition = parseInt(obstacle.style.right);\n            if (obstaclePosition >= window.innerWidth) {\n                obstacle.remove();\n                score++;\n                scoreDisplay.innerText = 'Score: ' + score;\n                gameSpeed += 0.1;  // Increase game speed slightly with each obstacle passed\n                createObstacle();\n            } else {\n                obstacle.style.right = `${obstaclePosition + gameSpeed}px`;\n                if (checkCollision(dino, obstacle)) {\n                    alert('Game Over! Your score is ' + score);\n                    location.reload();  // Reload the game\n                    return;\n                }\n                requestAnimationFrame(() => moveObstacle(obstacle));\n            }\n        }\n\n        function checkCollision(dino, obstacle) {\n            const dinoRect = dino.getBoundingClientRect();\n            const obstacleRect = obstacle.getBoundingClientRect();\n            return (\n                dinoRect.right > obstacleRect.left &&\n                dinoRect.left < obstacleRect.right &&\n                dinoRect.bottom > obstacleRect.top\n            );\n        }\n\n        dino.style.bottom = '0';\n        createObstacle();\n    </script>\n</body>\n</html>\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 설명\n\n- HTML 구조: 기본 HTML 구조에서는 게임 컨테이너, 공룡 및 점수 표시가 설정됩니다.\n- CSS 스타일링: CSS는 게임이 반응형이 되고 모든 기기에서 잘 보이도록 보장합니다. 미디어 쿼리는 화면 크기에 따라 게임 컨테이너의 높이를 조절합니다.\n- JavaScript 기능:\n\n- 점프 메커니즘: 점프 함수는 스페이스 바를 누르면 공룡이 점프합니다.\n- 장애물 생성: createObstacle 함수는 무작위 크기의 장애물을 생성합니다. 때로는 여러 장애물이 서로 가까이 나타나 더 큰 도전 요소가 됩니다.\n- 장애물 이동: moveObstacle 함수는 장애물을 오른쪽에서 왼쪽으로 이동시키며, 각각 이후 약간 속도를 높입니다.\n- 충돌 감지: checkCollision 함수는 공룡이 장애물과 충돌하는지 확인하고, 게임 오버 경고를 트리거합니다.\n\n# 성능 최적화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임이 저전력 장치에서도 원할하게 실행되도록 하기 위해 CSS와 JavaScript를 최소화할 수 있습니다. 다음은 방법입니다:\n\n## CSS 최소화\n\n- cssminifier.com과 같은 온라인 도구를 사용하여 CSS 코드를 최소화합니다.\n- 최소화된 버전으로 `style` 태그 안에 있는 CSS를 대체합니다.\n\n## JavaScript 최소화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 자바스크립트 코드를 최소화하려면 javascript-minifier.com과 같은 온라인 도구를 사용하실 수 있어요.\n- `script` 태그 안에 있는 자바스크립트를 최소화된 버전으로 바꿔주세요.\n\n# Lazy Loading\n\n성능을 더 향상시키기 위해 자산들에 대한 lazy loading을 구현할 수 있어요. 이 간단한 게임은 이미지나 외부 자산이 없지만, 기본적인 방법을 살펴보겠습니다:\n\n```js\n<script>\ndocument.addEventListener('DOMContentLoaded', () => {\n    const lazyElements = document.querySelectorAll('.lazy');\n    const lazyLoad = (target) => {\n        const observer = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const element = entry.target;\n                    // Load element here\n                    observer.disconnect();\n                }\n            });\n        });\n        observer.observe(target);\n    };\n\n    lazyElements.forEach(lazyLoad);\n});\n</script>\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이러한 모범 사례를 따르면 반응형이고 최적화되며 재미있는 간단한 게임을 만들 수 있습니다. 이 프로젝트는 주요 프론트엔드 개발 개념을 학습하고 적용하는 좋은 방법입니다. 웹 애플리케이션이 사용자 친화적이고 성능이 우수해지도록 보장합니다. 즐거운 코딩되세요!","ogImage":{"url":"/assets/img/2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide_0.png"},"coverImage":"/assets/img/2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>프로젝트를 작업 중에 인터넷 장애를 겪은 적이 있나요? 그러면 크롬 디노 게임을 하게 되는 경우가 많죠. 이 게임은 간단하면서 중독성이 강하며 웹 기반 게임의 훌륭한 예입니다. 이 기사에서는 핵심 프론트엔드 개발 최상의 실천법을 강조하면서 디노 게임의 자신만의 버전을 만드는 방법을 안내해 드릴 거에요.</p>\n<p><img src=\"/assets/img/2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide_0.png\" alt=\"이미지\"></p>\n<h1>핵심 프론트엔드 개발 실천법</h1>\n<h2>1. 간결함</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>크롬 디노 게임은 간단하지만 재미있습니다. 미니멀한 디자인으로 빠른 로딩 시간과 쉬운 게임 플레이를 보장합니다. 우리도 이 같은 원칙을 게임에 적용할 것입니다.</p>\n<h2>2. 반응형 디자인</h2>\n<p>미디어 쿼리를 사용하여 모든 기기에서 게임이 잘 보이도록 합니다. 화면 크기에 따라 게임 컨테이너의 높이가 조정됩니다.</p>\n<h2>3. 성능 최적화</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>에셋을 최소화하고 코드를 최적화하면 성능을 크게 향상시키고 Dino 게임이 즉시로드되고 저전력 장치에서도 원할하게 작동하도록 할 수 있습니다. 이러한 목표를 달성하는 방법에 대해 알아보겠습니다.</p>\n<h2>4. 오프라인 기능</h2>\n<p>Chrome Dino와 같은 게임은 오프라인에서 실행되어 인터넷 연결 없이도 즐길 수 있습니다. 기본 HTML, CSS, 그리고 JavaScript를 사용하여 게임이 오프라인에서도 플레이 가능하도록 만들어 보겠습니다.</p>\n<h2>5. 사용자 참여</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>사용자가 계속해서 방문하는 것은 매력적인 경험을 제공할 때입니다. 우리는 게임에 게임화 요소를 추가할 거에요.</p>\n<h2>6. Lazy Loading</h2>\n<p>게임이 자원을 효율적으로 로드하도록 보장할 거예요. 이는 성능에 중요한 요소입니다.</p>\n<h1>모두 결합하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기에는 장애물, 점수 및 게임 오버 시나리오가 있는 간단하면서 매력적인 Dino 게임을 만드는 완전한 예제가 있습니다.</p>\n<p>데모 사이트: <a href=\"https://dinogamedemo.netlify.app\" rel=\"nofollow\" target=\"_blank\">https://dinogamedemo.netlify.app</a></p>\n<h2>HTML: (index.html)</h2>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>Challenging Dino Game&#x3C;/title>\n    &#x3C;style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #e0e0e0;\n            font-family: Arial, sans-serif;\n        }\n        #game-container {\n            width: 100%;\n            height: 50vh;\n            position: relative;\n            overflow: hidden;\n            background-color: #f0f0f0;\n            border: 2px solid #000;\n        }\n        #dino, .obstacle {\n            position: absolute;\n            bottom: 0;\n        }\n        #dino {\n            width: 50px;\n            height: 50px;\n            background-color: green;\n        }\n        .obstacle {\n            background-color: red;\n        }\n        #score {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n        }\n        @media (min-width: 600px) {\n            #game-container {\n                height: 70vh;\n            }\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"game-container\">\n        &#x3C;div id=\"dino\">&#x3C;/div>\n        &#x3C;div id=\"score\">Score: 0&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;script>\n        let isJumping = false;\n        let score = 0;\n        let gameSpeed = 4;\n        const dino = document.getElementById('dino');\n        const scoreDisplay = document.getElementById('score');\n        \n        document.addEventListener('keydown', function(event) {\n            if (event.code === 'Space' &#x26;&#x26; !isJumping) {\n                jump();\n            }\n        });\n\n        function jump() {\n            if (isJumping) return;\n            isJumping = true;\n            let upInterval = setInterval(() => {\n                if (dino.style.bottom === '100px') {\n                    clearInterval(upInterval);\n                    let downInterval = setInterval(() => {\n                        if (dino.style.bottom === '0px') {\n                            clearInterval(downInterval);\n                            isJumping = false;\n                        }\n                        dino.style.bottom = `${parseInt(dino.style.bottom) - 5}px`;\n                    }, 20);\n                }\n                dino.style.bottom = `${parseInt(dino.style.bottom) + 5}px`;\n            }, 20);\n        }\n\n        function createObstacle() {\n            const obstacle = document.createElement('div');\n            obstacle.classList.add('obstacle');\n            obstacle.style.width = `${Math.random() * 40 + 20}px`;\n            obstacle.style.height = `${Math.random() * 40 + 20}px`;\n            obstacle.style.right = '0';\n            document.getElementById('game-container').appendChild(obstacle);\n\n            moveObstacle(obstacle);\n\n            // Randomly decide to create another obstacle shortly after the current one\n            if (Math.random() &#x3C; 0.3) {\n                setTimeout(createObstacle, Math.random() * 2000);\n            }\n        }\n\n        function moveObstacle(obstacle) {\n            let obstaclePosition = parseInt(obstacle.style.right);\n            if (obstaclePosition >= window.innerWidth) {\n                obstacle.remove();\n                score++;\n                scoreDisplay.innerText = 'Score: ' + score;\n                gameSpeed += 0.1;  // Increase game speed slightly with each obstacle passed\n                createObstacle();\n            } else {\n                obstacle.style.right = `${obstaclePosition + gameSpeed}px`;\n                if (checkCollision(dino, obstacle)) {\n                    alert('Game Over! Your score is ' + score);\n                    location.reload();  // Reload the game\n                    return;\n                }\n                requestAnimationFrame(() => moveObstacle(obstacle));\n            }\n        }\n\n        function checkCollision(dino, obstacle) {\n            const dinoRect = dino.getBoundingClientRect();\n            const obstacleRect = obstacle.getBoundingClientRect();\n            return (\n                dinoRect.right > obstacleRect.left &#x26;&#x26;\n                dinoRect.left &#x3C; obstacleRect.right &#x26;&#x26;\n                dinoRect.bottom > obstacleRect.top\n            );\n        }\n\n        dino.style.bottom = '0';\n        createObstacle();\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>설명</h1>\n<ul>\n<li>\n<p>HTML 구조: 기본 HTML 구조에서는 게임 컨테이너, 공룡 및 점수 표시가 설정됩니다.</p>\n</li>\n<li>\n<p>CSS 스타일링: CSS는 게임이 반응형이 되고 모든 기기에서 잘 보이도록 보장합니다. 미디어 쿼리는 화면 크기에 따라 게임 컨테이너의 높이를 조절합니다.</p>\n</li>\n<li>\n<p>JavaScript 기능:</p>\n</li>\n<li>\n<p>점프 메커니즘: 점프 함수는 스페이스 바를 누르면 공룡이 점프합니다.</p>\n</li>\n<li>\n<p>장애물 생성: createObstacle 함수는 무작위 크기의 장애물을 생성합니다. 때로는 여러 장애물이 서로 가까이 나타나 더 큰 도전 요소가 됩니다.</p>\n</li>\n<li>\n<p>장애물 이동: moveObstacle 함수는 장애물을 오른쪽에서 왼쪽으로 이동시키며, 각각 이후 약간 속도를 높입니다.</p>\n</li>\n<li>\n<p>충돌 감지: checkCollision 함수는 공룡이 장애물과 충돌하는지 확인하고, 게임 오버 경고를 트리거합니다.</p>\n</li>\n</ul>\n<h1>성능 최적화</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>게임이 저전력 장치에서도 원할하게 실행되도록 하기 위해 CSS와 JavaScript를 최소화할 수 있습니다. 다음은 방법입니다:</p>\n<h2>CSS 최소화</h2>\n<ul>\n<li>cssminifier.com과 같은 온라인 도구를 사용하여 CSS 코드를 최소화합니다.</li>\n<li>최소화된 버전으로 <code>style</code> 태그 안에 있는 CSS를 대체합니다.</li>\n</ul>\n<h2>JavaScript 최소화</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>자바스크립트 코드를 최소화하려면 javascript-minifier.com과 같은 온라인 도구를 사용하실 수 있어요.</li>\n<li><code>script</code> 태그 안에 있는 자바스크립트를 최소화된 버전으로 바꿔주세요.</li>\n</ul>\n<h1>Lazy Loading</h1>\n<p>성능을 더 향상시키기 위해 자산들에 대한 lazy loading을 구현할 수 있어요. 이 간단한 게임은 이미지나 외부 자산이 없지만, 기본적인 방법을 살펴보겠습니다:</p>\n<pre><code class=\"hljs language-js\">&#x3C;script>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'DOMContentLoaded'</span>, <span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> lazyElements = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelectorAll</span>(<span class=\"hljs-string\">'.lazy'</span>);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">lazyLoad</span> = (<span class=\"hljs-params\">target</span>) => {\n        <span class=\"hljs-keyword\">const</span> observer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IntersectionObserver</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">entries, observer</span>) =></span> {\n            entries.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">entry</span> =></span> {\n                <span class=\"hljs-keyword\">if</span> (entry.<span class=\"hljs-property\">isIntersecting</span>) {\n                    <span class=\"hljs-keyword\">const</span> element = entry.<span class=\"hljs-property\">target</span>;\n                    <span class=\"hljs-comment\">// Load element here</span>\n                    observer.<span class=\"hljs-title function_\">disconnect</span>();\n                }\n            });\n        });\n        observer.<span class=\"hljs-title function_\">observe</span>(target);\n    };\n\n    lazyElements.<span class=\"hljs-title function_\">forEach</span>(lazyLoad);\n});\n&#x3C;/script>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>결론</h1>\n<p>이러한 모범 사례를 따르면 반응형이고 최적화되며 재미있는 간단한 게임을 만들 수 있습니다. 이 프로젝트는 주요 프론트엔드 개발 개념을 학습하고 적용하는 좋은 방법입니다. 웹 애플리케이션이 사용자 친화적이고 성능이 우수해지도록 보장합니다. 즐거운 코딩되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}