{"pageProps":{"post":{"title":"Firebase로 안드로이드 애플리케이션에서 안전한 SMS 인증 방법","description":"","date":"2024-06-27 19:22","slug":"2024-06-27-SecureSMSVerificationinAndroidApplicationswithFirebase","content":"\n![이미지](/assets/img/2024-06-27-SecureSMSVerificationinAndroidApplicationswithFirebase_0.png)\n\n안녕하세요! 이 기사에서는 안드로이드 애플리케이션에서 Firebase의 SMS 인증 기능을 사용하여 사용자 인증하는 방법을 단계별로 설명하겠습니다. SMS 인증은 사용자의 전화번호를 확인하고 안전한 로그인을 보장하는 효과적인 방법입니다. 이 예에서는 프로젝트를 만들고 필요한 모든 단계를 거칠 것입니다.\n\n# 1. Firebase 프로젝트 만들기\n\n## Firebase 콘솔 설정\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nFirebase 콘솔에 로그인해 주세요:\n\n- Firebase 콘솔로 이동합니다.\n- Google 계정으로 로그인합니다.\n\n## 새 프로젝트 만들기:\n\n- Firebase 콘솔에서 “프로젝트 추가” 버튼을 클릭합니다.\n- 프로젝트 이름을 입력하고 “계속”을 클릭합니다.\n- Google 애널리틱스를 활성화하라는 요청이 표시될 수 있습니다. 원하는 옵션을 선택하고 “계속”을 클릭합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 프로젝트 설정 완료:\n\n- 프로젝트 생성 프로세스가 완료되면 “프로젝트 관리” 버튼을 클릭하여 프로젝트 페이지로 이동합니다.\n- App Check 옵션을 활성화하고 이 섹션에서 앱을 등록합니다. Firebase App Check를 활성화하여 Play Integrity API를 사용하면 앱의 보안을 강화하고 Firebase 서비스에 대한 무단 액세스를 방지할 수 있습니다.\n\n# 2. Firebase에 Android 앱 추가하기\n\nFirebase에 앱 추가하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 프로젝트 페이지에서 상단의 \"프로젝트 개요\" 섹션에서 Android 아이콘을 클릭하세요.\n- 패키지 이름 (예: com.ek.firebasesmssample), 앱 별명 및 SHA-1 인증서 지문을 입력해주세요. SHA-1 인증서 지문을 얻으려면 다음 단계를 따라주세요:\n- Android Studio에서 터미널을 열고 다음 명령을 입력하세요:\n\n```js\nkeytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android\n```\n\n- 출력에서 SHA1 값이 인증서 지문입니다.\n- \"앱 등록\" 버튼을 클릭하세요.\n\n## Google 서비스 JSON 파일 다운로드하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- google-services.json 파일을 다운로드하여 Android 프로젝트의 앱 디렉토리에 추가해주세요.\n\n## 3. Firebase SDK를 프로젝트에 추가하기\n\nGradle 파일 구성하기:\n\n- 프로젝트 수준의 build.gradle 파일에 다음 라인을 추가해주세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nclasspath 'com.google.gms:google-services:4.3.3'\n```\n\n다음 라인을 앱 수준의 build.gradle 파일에 추가하세요:\n\n```js\napply plugin: 'com.google.gms.google-services'\n\ndependencies {\n    implementation platform('com.google.firebase:firebase-bom:26.1.0')\n    implementation 'com.google.firebase:firebase-auth'\n    implementation 'com.google.firebase:firebase-analytics'\n}\n```\n\n# 4. Firebase 인증 활성화하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n인증 설정하기:\n\n- Firebase 콘솔의 왼쪽 메뉴에서 \"인증\" 섹션으로 이동합니다.\n- \"로그인 방법\" 탭을 클릭합니다.\n- 전화 번호 로그인 방법을 찾아 \"활성화\"를 클릭합니다.\n- 선택적으로 메시지 템플릿을 사용자 정의할 수 있습니다.\n- \"저장\" 버튼을 클릭합니다.\n\n# 5. 안드로이드 애플리케이션 코딩\n\n## 프로젝트 구조 및 UI 디자인\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우선, 안드로이드 프로젝트를 만들고 필요한 파일을 설정하세요.\n\nactivity_login.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:gravity=\"center\"\n    android:padding=\"16dp\">\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"SMS 인증을 위한 전화번호를 입력하세요.\"\n        android:textSize=\"12sp\" />\n\n    <com.google.android.material.textfield.TextInputLayout\n        android:id=\"@+id/phone_number_layout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"128dp\">\n\n        <EditText\n            android:id=\"@+id/phone_number_input\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"전화번호\"\n            android:inputType=\"phone\" />\n    </com.google.android.material.textfield.TextInputLayout>\n\n    <Button\n        android:id=\"@+id/login_button\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"48dp\"\n        android:paddingVertical=\"12dp\"\n        android:textSize=\"16sp\"\n        android:textColor=\"@color/white\"\n        android:backgroundTint=\"@color/red\"\n        android:text=\"로그인 →\" />\n\n</LinearLayout>\n```\n\nLoginActivity.kt\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 LoginActivity 클래스를 만들고 아래 코드를 추가해주세요:\n\n```js\nimport android.os.Bundle\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.widget.doAfterTextChanged\nimport com.google.android.material.textfield.TextInputLayout\nimport com.google.firebase.FirebaseApp\nimport com.google.firebase.FirebaseException\nimport com.google.firebase.appcheck.FirebaseAppCheck\nimport com.google.firebase.appcheck.playintegrity.PlayIntegrityAppCheckProviderFactory\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.PhoneAuthCredential\nimport com.google.firebase.auth.PhoneAuthProvider\nimport java.util.concurrent.TimeUnit\nimport java.util.regex.Pattern\n\nclass LoginActivity : AppCompatActivity() {\n\n    private lateinit var phoneNumberInput: EditText\n    private lateinit var loginButton: Button\n    private lateinit var phoneNumberLayout: TextInputLayout\n\n    private lateinit var auth: FirebaseAuth\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n\n        phoneNumberInput = findViewById(R.id.phone_number_input)\n        loginButton = findViewById(R.id.login_button)\n        phoneNumberLayout = findViewById(R.id.phone_number_layout)\n\n        auth = FirebaseAuth.getInstance()\n        FirebaseApp.initializeApp(this)\n        val firebaseAppCheck = FirebaseAppCheck.getInstance()\n        firebaseAppCheck.installAppCheckProviderFactory(\n            PlayIntegrityAppCheckProviderFactory.getInstance()\n        )\n        phoneNumberInput.addTextChangedListener(object : TextWatcher {\n            private var current = \"\"\n            override fun afterTextChanged(s: Editable?) {\n                if (s.toString() != current) {\n                    phoneNumberInput.removeTextChangedListener(this)\n\n                    val cleanString = s.toString().replace(\" \", \"\").replace(\"+90\", \"\")\n                    val formatted = cleanString.chunked(3).joinToString(\" \")\n\n                    if (cleanString.length > 6) {\n                        val part1 = cleanString.substring(0, 3)\n                        val part2 = cleanString.substring(3, 6)\n                        val part3 = cleanString.substring(6)\n                        current = \"+90 $part1 $part2$part3\"\n                    } else {\n                        current = \"+90 $formatted\"\n                    }\n\n                    phoneNumberInput.setText(current)\n                    phoneNumberInput.setSelection(current.length)\n\n                    phoneNumberInput.addTextChangedListener(this)\n                }\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\n\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\n        })\n\n        loginButton.setOnClickListener {\n            val phoneNumber = phoneNumberInput.text.toString()\n            if (isValidPhoneNumber(phoneNumber)) {\n                startPhoneNumberVerification(phoneNumber)\n            } else {\n                Toast.makeText(this, \"Please enter a valid phone number\", Toast.LENGTH_SHORT).show()\n            }\n        }\n    }\n\n    private fun isValidPhoneNumber(phoneNumber: String): Boolean {\n        val pattern = Pattern.compile(\"^\\\\+?[1-9]\\\\d{1,14}\\$\")\n        return pattern.matcher(phoneNumber.replace(\" \", \"\")).matches()\n    }\n\n    private fun startPhoneNumberVerification(phoneNumber: String) {\n        val callbacks = object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {\n\n            override fun onVerificationCompleted(credential: PhoneAuthCredential) {\n                // 인증이 성공했을 때 실행되는 콜백입니다.\n                // 여기에서 로그인 작업을 수행할 수 있습니다.\n                signInWithPhoneAuthCredential(credential)\n            }\n\n            override fun onVerificationFailed(e: FirebaseException) {\n                // 인증이 실패했을 때 실행되는 콜백입니다.\n                // 오류 메시지를 표시합니다.\n                Log.e(\"onVerificationFailed\", e.message ?: \"오류가 발생했습니다\")\n            }\n\n            override fun onCodeSent(\n                verificationId: String,\n                token: PhoneAuthProvider.ForceResendingToken\n            ) {\n                Log.e(\"onCodeSent\", \"verificationId: $verificationId\")\n                // 인증 코드가 전송될 때 실행되는 콜백입니다.\n                // 수신한 코드를 사용하여 자격 증명을 생성할 수 있습니다.\n                val credential = PhoneAuthProvider.getCredential(verificationId, \"123456\")\n                signInWithPhoneAuthCredential(credential)\n            }\n        }\n\n        // 핸드폰 번호와 콜백을 사용하여 인증 프로세스 시작\n        PhoneAuthProvider.getInstance().verifyPhoneNumber(\n            phoneNumber, // 핸드폰 번호\n            60, // 시간 제한\n            TimeUnit.SECONDS, // 시간 제한 단위\n            this, // 액티비티 (또는 프래그먼트)\n            callbacks\n        )\n    }\n\n    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {\n        auth.signInWithCredential(credential)\n            .addOnCompleteListener(this) { task ->\n                if (task.isSuccessful) {\n                    // 로그인 성공\n                    val user = task.result?.user\n                    val uid = user?.uid // 사용자 ID\n                    val phoneNumber = user?.phoneNumber // 핸드폰 번호\n                    val providerId = user?.providerId // 제공자 ID\n\n                    sendUserToBackend(uid)\n                } else {\n                    Log.e(\"signInWithCredential\", \"signInWithCredential:failure\", task.exception)\n                    // 로그인 실패\n                }\n            }\n    }\n\n    private fun sendUserToBackend(uid: String?) {\n        Log.e(\"sendUserToBackend\", \"UID: $uid\")\n        // 이 함수는 사용자의 UID를 백엔드로 전송하는 데 사용할 수 있습니다.\n    }\n}\n```\n\n`startPhoneNumberVerification` 메서드에서 전화번호 확인 프로세스 중 발생하는 이벤트들이 `onVerificationCompleted`, `onVerificationFailed`, `onCodeSent`와 같은 콜백을 사용하여 정의되어 있습니다.\n\n`signInWithPhoneAuthCredential` 메서드는 Firebase 인증을 사용하여 로그인 작업을 수행합니다. 확인이 성공적일 경우, 사용자 정보를 가져와 백엔드로 전송할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Secure SMS Verification in Android Applications with Firebase](/assets/img/2024-06-27-SecureSMSVerificationinAndroidApplicationswithFirebase_1.png)\n\n위 모든 단계를 완료한 후에는 Firebase로부터 SMS를 수신할 것입니다. SMS를 통해 받은 코드를 입력하면 signInWithPhoneAuthCredential 메서드가 이를 확인하고 응용 프로그램 흐름이 계속됩니다.\n\n# 결론\n\n본 문서에서 안내한 단계를 따라 Android 애플리케이션에서 Firebase를 사용하여 안전한 SMS 확인을 구현할 수 있게 됩니다. 이 방법은 사용자 인증의 보안성을 향상시키는데 그치지 않고 사용자들에게 원활한 로그인 경험을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSMS 인증을 구현하면 무단 액세스가 크게 줄어들고, 앱에 로그인할 수 있는 것은 정당한 사용자뿐이라는 것을 보장할 수 있습니다. 또한 Firebase의 강력한 기능과 쉬운 통합을 통해, 인증 및 보안을 관리하는 강력한 도구로 활용할 수 있습니다.\n\n# 참고 자료\n\n- Firebase 문서\n- Google Play 무결성 API\n- SHA-1 인증서 지문\n- Firebase용 Gradle 구성\n\n참고: 개발 단계에서 Google이 자동으로 reCaptcha 서비스를 활성화할 수 있으며, SMS 인증을 수행하는 동안 reCaptcha 화면을 볼 수 있습니다. 주제에서 벗어나지 않도록 자세히 다루지 않았습니다. 더 자세한 정보는 여기에서 확인할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNote-2: 현재 Firebase를 통해 보내는 메시지 템플릿을 사용자 정의하는 것은 불가능합니다. 사용자 정의 메시지 유형을 사용하려면 다른 공급업체를 사용해야 합니다.\n\n이 기사가 안드로이드 애플리케이션에서 Firebase를 사용하여 SMS 인증을 구현하는 데 도움이 되기를 바랍니다. 궁금한 점이 있거나 추가 지원이 필요하면 아래에 댓글을 남기세요.\n\n![image](https://miro.medium.com/v2/resize:fit:1200/0*vvlpXIMRKoxTUlrJ.gif)\n","ogImage":{"url":"/assets/img/2024-06-27-SecureSMSVerificationinAndroidApplicationswithFirebase_0.png"},"coverImage":"/assets/img/2024-06-27-SecureSMSVerificationinAndroidApplicationswithFirebase_0.png","tag":["Tech"],"readingTime":14},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-27-SecureSMSVerificationinAndroidApplicationswithFirebase_0.png\" alt=\"이미지\"></p>\n<p>안녕하세요! 이 기사에서는 안드로이드 애플리케이션에서 Firebase의 SMS 인증 기능을 사용하여 사용자 인증하는 방법을 단계별로 설명하겠습니다. SMS 인증은 사용자의 전화번호를 확인하고 안전한 로그인을 보장하는 효과적인 방법입니다. 이 예에서는 프로젝트를 만들고 필요한 모든 단계를 거칠 것입니다.</p>\n<h1>1. Firebase 프로젝트 만들기</h1>\n<h2>Firebase 콘솔 설정</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Firebase 콘솔에 로그인해 주세요:</p>\n<ul>\n<li>Firebase 콘솔로 이동합니다.</li>\n<li>Google 계정으로 로그인합니다.</li>\n</ul>\n<h2>새 프로젝트 만들기:</h2>\n<ul>\n<li>Firebase 콘솔에서 “프로젝트 추가” 버튼을 클릭합니다.</li>\n<li>프로젝트 이름을 입력하고 “계속”을 클릭합니다.</li>\n<li>Google 애널리틱스를 활성화하라는 요청이 표시될 수 있습니다. 원하는 옵션을 선택하고 “계속”을 클릭합니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>프로젝트 설정 완료:</h2>\n<ul>\n<li>프로젝트 생성 프로세스가 완료되면 “프로젝트 관리” 버튼을 클릭하여 프로젝트 페이지로 이동합니다.</li>\n<li>App Check 옵션을 활성화하고 이 섹션에서 앱을 등록합니다. Firebase App Check를 활성화하여 Play Integrity API를 사용하면 앱의 보안을 강화하고 Firebase 서비스에 대한 무단 액세스를 방지할 수 있습니다.</li>\n</ul>\n<h1>2. Firebase에 Android 앱 추가하기</h1>\n<p>Firebase에 앱 추가하기:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>프로젝트 페이지에서 상단의 \"프로젝트 개요\" 섹션에서 Android 아이콘을 클릭하세요.</li>\n<li>패키지 이름 (예: com.ek.firebasesmssample), 앱 별명 및 SHA-1 인증서 지문을 입력해주세요. SHA-1 인증서 지문을 얻으려면 다음 단계를 따라주세요:</li>\n<li>Android Studio에서 터미널을 열고 다음 명령을 입력하세요:</li>\n</ul>\n<pre><code class=\"hljs language-js\">keytool -list -v -keystore ~<span class=\"hljs-regexp\">/.android/</span>debug.<span class=\"hljs-property\">keystore</span> -alias androiddebugkey -storepass android -keypass android\n</code></pre>\n<ul>\n<li>출력에서 SHA1 값이 인증서 지문입니다.</li>\n<li>\"앱 등록\" 버튼을 클릭하세요.</li>\n</ul>\n<h2>Google 서비스 JSON 파일 다운로드하기:</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>google-services.json 파일을 다운로드하여 Android 프로젝트의 앱 디렉토리에 추가해주세요.</li>\n</ul>\n<h2>3. Firebase SDK를 프로젝트에 추가하기</h2>\n<p>Gradle 파일 구성하기:</p>\n<ul>\n<li>프로젝트 수준의 build.gradle 파일에 다음 라인을 추가해주세요:</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">classpath <span class=\"hljs-string\">'com.google.gms:google-services:4.3.3'</span>\n</code></pre>\n<p>다음 라인을 앱 수준의 build.gradle 파일에 추가하세요:</p>\n<pre><code class=\"hljs language-js\">apply <span class=\"hljs-attr\">plugin</span>: <span class=\"hljs-string\">'com.google.gms.google-services'</span>\n\ndependencies {\n    implementation <span class=\"hljs-title function_\">platform</span>(<span class=\"hljs-string\">'com.google.firebase:firebase-bom:26.1.0'</span>)\n    implementation <span class=\"hljs-string\">'com.google.firebase:firebase-auth'</span>\n    implementation <span class=\"hljs-string\">'com.google.firebase:firebase-analytics'</span>\n}\n</code></pre>\n<h1>4. Firebase 인증 활성화하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>인증 설정하기:</p>\n<ul>\n<li>Firebase 콘솔의 왼쪽 메뉴에서 \"인증\" 섹션으로 이동합니다.</li>\n<li>\"로그인 방법\" 탭을 클릭합니다.</li>\n<li>전화 번호 로그인 방법을 찾아 \"활성화\"를 클릭합니다.</li>\n<li>선택적으로 메시지 템플릿을 사용자 정의할 수 있습니다.</li>\n<li>\"저장\" 버튼을 클릭합니다.</li>\n</ul>\n<h1>5. 안드로이드 애플리케이션 코딩</h1>\n<h2>프로젝트 구조 및 UI 디자인</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>우선, 안드로이드 프로젝트를 만들고 필요한 파일을 설정하세요.</p>\n<p>activity_login.xml</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&#x3C;?xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span>?></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LinearLayout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">xmlns:app</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res-auto\"</span>\n    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"vertical\"</span>\n    <span class=\"hljs-attr\">android:gravity</span>=<span class=\"hljs-string\">\"center\"</span>\n    <span class=\"hljs-attr\">android:padding</span>=<span class=\"hljs-string\">\"16dp\"</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TextView</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"SMS 인증을 위한 전화번호를 입력하세요.\"</span>\n        <span class=\"hljs-attr\">android:textSize</span>=<span class=\"hljs-string\">\"12sp\"</span> /></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">com.google.android.material.textfield.TextInputLayout</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/phone_number_layout\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_marginTop</span>=<span class=\"hljs-string\">\"128dp\"</span>></span>\n\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">EditText</span>\n            <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/phone_number_input\"</span>\n            <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n            <span class=\"hljs-attr\">android:hint</span>=<span class=\"hljs-string\">\"전화번호\"</span>\n            <span class=\"hljs-attr\">android:inputType</span>=<span class=\"hljs-string\">\"phone\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">com.google.android.material.textfield.TextInputLayout</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/login_button\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:layout_marginTop</span>=<span class=\"hljs-string\">\"48dp\"</span>\n        <span class=\"hljs-attr\">android:paddingVertical</span>=<span class=\"hljs-string\">\"12dp\"</span>\n        <span class=\"hljs-attr\">android:textSize</span>=<span class=\"hljs-string\">\"16sp\"</span>\n        <span class=\"hljs-attr\">android:textColor</span>=<span class=\"hljs-string\">\"@color/white\"</span>\n        <span class=\"hljs-attr\">android:backgroundTint</span>=<span class=\"hljs-string\">\"@color/red\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"로그인 →\"</span> /></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">LinearLayout</span>></span>\n</code></pre>\n<p>LoginActivity.kt</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 LoginActivity 클래스를 만들고 아래 코드를 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">os</span>.<span class=\"hljs-property\">Bundle</span>\n<span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">text</span>.<span class=\"hljs-property\">Editable</span>\n<span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">text</span>.<span class=\"hljs-property\">TextWatcher</span>\n<span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">Log</span>\n<span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">widget</span>.<span class=\"hljs-property\">Button</span>\n<span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">widget</span>.<span class=\"hljs-property\">EditText</span>\n<span class=\"hljs-keyword\">import</span> android.<span class=\"hljs-property\">widget</span>.<span class=\"hljs-property\">Toast</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">appcompat</span>.<span class=\"hljs-property\">app</span>.<span class=\"hljs-property\">AppCompatActivity</span>\n<span class=\"hljs-keyword\">import</span> androidx.<span class=\"hljs-property\">core</span>.<span class=\"hljs-property\">widget</span>.<span class=\"hljs-property\">doAfterTextChanged</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">android</span>.<span class=\"hljs-property\">material</span>.<span class=\"hljs-property\">textfield</span>.<span class=\"hljs-property\">TextInputLayout</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">firebase</span>.<span class=\"hljs-property\">FirebaseApp</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">firebase</span>.<span class=\"hljs-property\">FirebaseException</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">firebase</span>.<span class=\"hljs-property\">appcheck</span>.<span class=\"hljs-property\">FirebaseAppCheck</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">firebase</span>.<span class=\"hljs-property\">appcheck</span>.<span class=\"hljs-property\">playintegrity</span>.<span class=\"hljs-property\">PlayIntegrityAppCheckProviderFactory</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">firebase</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">FirebaseAuth</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">firebase</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">PhoneAuthCredential</span>\n<span class=\"hljs-keyword\">import</span> com.<span class=\"hljs-property\">google</span>.<span class=\"hljs-property\">firebase</span>.<span class=\"hljs-property\">auth</span>.<span class=\"hljs-property\">PhoneAuthProvider</span>\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">concurrent</span>.<span class=\"hljs-property\">TimeUnit</span>\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">regex</span>.<span class=\"hljs-property\">Pattern</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginActivity</span> : <span class=\"hljs-title class_\">AppCompatActivity</span>() {\n\n    private lateinit <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">phoneNumberInput</span>: <span class=\"hljs-title class_\">EditText</span>\n    private lateinit <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">loginButton</span>: <span class=\"hljs-title class_\">Button</span>\n    private lateinit <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">phoneNumberLayout</span>: <span class=\"hljs-title class_\">TextInputLayout</span>\n\n    private lateinit <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">auth</span>: <span class=\"hljs-title class_\">FirebaseAuth</span>\n\n    override fun <span class=\"hljs-title function_\">onCreate</span>(<span class=\"hljs-params\">savedInstanceState: Bundle?</span>) {\n        <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">onCreate</span>(savedInstanceState)\n        <span class=\"hljs-title function_\">setContentView</span>(R.<span class=\"hljs-property\">layout</span>.<span class=\"hljs-property\">activity_login</span>)\n\n        phoneNumberInput = <span class=\"hljs-title function_\">findViewById</span>(R.<span class=\"hljs-property\">id</span>.<span class=\"hljs-property\">phone_number_input</span>)\n        loginButton = <span class=\"hljs-title function_\">findViewById</span>(R.<span class=\"hljs-property\">id</span>.<span class=\"hljs-property\">login_button</span>)\n        phoneNumberLayout = <span class=\"hljs-title function_\">findViewById</span>(R.<span class=\"hljs-property\">id</span>.<span class=\"hljs-property\">phone_number_layout</span>)\n\n        auth = <span class=\"hljs-title class_\">FirebaseAuth</span>.<span class=\"hljs-title function_\">getInstance</span>()\n        <span class=\"hljs-title class_\">FirebaseApp</span>.<span class=\"hljs-title function_\">initializeApp</span>(<span class=\"hljs-variable language_\">this</span>)\n        val firebaseAppCheck = <span class=\"hljs-title class_\">FirebaseAppCheck</span>.<span class=\"hljs-title function_\">getInstance</span>()\n        firebaseAppCheck.<span class=\"hljs-title function_\">installAppCheckProviderFactory</span>(\n            <span class=\"hljs-title class_\">PlayIntegrityAppCheckProviderFactory</span>.<span class=\"hljs-title function_\">getInstance</span>()\n        )\n        phoneNumberInput.<span class=\"hljs-title function_\">addTextChangedListener</span>(object : <span class=\"hljs-title class_\">TextWatcher</span> {\n            private <span class=\"hljs-keyword\">var</span> current = <span class=\"hljs-string\">\"\"</span>\n            override fun <span class=\"hljs-title function_\">afterTextChanged</span>(<span class=\"hljs-params\">s: Editable?</span>) {\n                <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-title function_\">toString</span>() != current) {\n                    phoneNumberInput.<span class=\"hljs-title function_\">removeTextChangedListener</span>(<span class=\"hljs-variable language_\">this</span>)\n\n                    val cleanString = s.<span class=\"hljs-title function_\">toString</span>().<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-string\">\"\"</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\"+90\"</span>, <span class=\"hljs-string\">\"\"</span>)\n                    val formatted = cleanString.<span class=\"hljs-title function_\">chunked</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_\">joinToString</span>(<span class=\"hljs-string\">\" \"</span>)\n\n                    <span class=\"hljs-keyword\">if</span> (cleanString.<span class=\"hljs-property\">length</span> > <span class=\"hljs-number\">6</span>) {\n                        val part1 = cleanString.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>)\n                        val part2 = cleanString.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>)\n                        val part3 = cleanString.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">6</span>)\n                        current = <span class=\"hljs-string\">\"+90 $part1 $part2$part3\"</span>\n                    } <span class=\"hljs-keyword\">else</span> {\n                        current = <span class=\"hljs-string\">\"+90 $formatted\"</span>\n                    }\n\n                    phoneNumberInput.<span class=\"hljs-title function_\">setText</span>(current)\n                    phoneNumberInput.<span class=\"hljs-title function_\">setSelection</span>(current.<span class=\"hljs-property\">length</span>)\n\n                    phoneNumberInput.<span class=\"hljs-title function_\">addTextChangedListener</span>(<span class=\"hljs-variable language_\">this</span>)\n                }\n            }\n\n            override fun <span class=\"hljs-title function_\">beforeTextChanged</span>(<span class=\"hljs-params\">s: CharSequence?, start: Int, count: Int, after: Int</span>) {}\n\n            override fun <span class=\"hljs-title function_\">onTextChanged</span>(<span class=\"hljs-params\">s: CharSequence?, start: Int, before: Int, count: Int</span>) {}\n        })\n\n        loginButton.<span class=\"hljs-property\">setOnClickListener</span> {\n            val phoneNumber = phoneNumberInput.<span class=\"hljs-property\">text</span>.<span class=\"hljs-title function_\">toString</span>()\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isValidPhoneNumber</span>(phoneNumber)) {\n                <span class=\"hljs-title function_\">startPhoneNumberVerification</span>(phoneNumber)\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-title class_\">Toast</span>.<span class=\"hljs-title function_\">makeText</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-string\">\"Please enter a valid phone number\"</span>, <span class=\"hljs-title class_\">Toast</span>.<span class=\"hljs-property\">LENGTH_SHORT</span>).<span class=\"hljs-title function_\">show</span>()\n            }\n        }\n    }\n\n    private fun <span class=\"hljs-title function_\">isValidPhoneNumber</span>(<span class=\"hljs-attr\">phoneNumber</span>: <span class=\"hljs-title class_\">String</span>): <span class=\"hljs-title class_\">Boolean</span> {\n        val pattern = <span class=\"hljs-title class_\">Pattern</span>.<span class=\"hljs-title function_\">compile</span>(<span class=\"hljs-string\">\"^\\\\+?[1-9]\\\\d{1,14}\\$\"</span>)\n        <span class=\"hljs-keyword\">return</span> pattern.<span class=\"hljs-title function_\">matcher</span>(phoneNumber.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\" \"</span>, <span class=\"hljs-string\">\"\"</span>)).<span class=\"hljs-title function_\">matches</span>()\n    }\n\n    private fun <span class=\"hljs-title function_\">startPhoneNumberVerification</span>(<span class=\"hljs-params\">phoneNumber: <span class=\"hljs-built_in\">String</span></span>) {\n        val callbacks = object : <span class=\"hljs-title class_\">PhoneAuthProvider</span>.<span class=\"hljs-title class_\">OnVerificationStateChangedCallbacks</span>() {\n\n            override fun <span class=\"hljs-title function_\">onVerificationCompleted</span>(<span class=\"hljs-params\">credential: PhoneAuthCredential</span>) {\n                <span class=\"hljs-comment\">// 인증이 성공했을 때 실행되는 콜백입니다.</span>\n                <span class=\"hljs-comment\">// 여기에서 로그인 작업을 수행할 수 있습니다.</span>\n                <span class=\"hljs-title function_\">signInWithPhoneAuthCredential</span>(credential)\n            }\n\n            override fun <span class=\"hljs-title function_\">onVerificationFailed</span>(<span class=\"hljs-params\">e: FirebaseException</span>) {\n                <span class=\"hljs-comment\">// 인증이 실패했을 때 실행되는 콜백입니다.</span>\n                <span class=\"hljs-comment\">// 오류 메시지를 표시합니다.</span>\n                <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">e</span>(<span class=\"hljs-string\">\"onVerificationFailed\"</span>, e.<span class=\"hljs-property\">message</span> ?: <span class=\"hljs-string\">\"오류가 발생했습니다\"</span>)\n            }\n\n            override fun <span class=\"hljs-title function_\">onCodeSent</span>(<span class=\"hljs-params\">\n                verificationId: <span class=\"hljs-built_in\">String</span>,\n                token: PhoneAuthProvider.ForceResendingToken\n            </span>) {\n                <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">e</span>(<span class=\"hljs-string\">\"onCodeSent\"</span>, <span class=\"hljs-string\">\"verificationId: $verificationId\"</span>)\n                <span class=\"hljs-comment\">// 인증 코드가 전송될 때 실행되는 콜백입니다.</span>\n                <span class=\"hljs-comment\">// 수신한 코드를 사용하여 자격 증명을 생성할 수 있습니다.</span>\n                val credential = <span class=\"hljs-title class_\">PhoneAuthProvider</span>.<span class=\"hljs-title function_\">getCredential</span>(verificationId, <span class=\"hljs-string\">\"123456\"</span>)\n                <span class=\"hljs-title function_\">signInWithPhoneAuthCredential</span>(credential)\n            }\n        }\n\n        <span class=\"hljs-comment\">// 핸드폰 번호와 콜백을 사용하여 인증 프로세스 시작</span>\n        <span class=\"hljs-title class_\">PhoneAuthProvider</span>.<span class=\"hljs-title function_\">getInstance</span>().<span class=\"hljs-title function_\">verifyPhoneNumber</span>(\n            phoneNumber, <span class=\"hljs-comment\">// 핸드폰 번호</span>\n            <span class=\"hljs-number\">60</span>, <span class=\"hljs-comment\">// 시간 제한</span>\n            <span class=\"hljs-title class_\">TimeUnit</span>.<span class=\"hljs-property\">SECONDS</span>, <span class=\"hljs-comment\">// 시간 제한 단위</span>\n            <span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-comment\">// 액티비티 (또는 프래그먼트)</span>\n            callbacks\n        )\n    }\n\n    private fun <span class=\"hljs-title function_\">signInWithPhoneAuthCredential</span>(<span class=\"hljs-params\">credential: PhoneAuthCredential</span>) {\n        auth.<span class=\"hljs-title function_\">signInWithCredential</span>(credential)\n            .<span class=\"hljs-title function_\">addOnCompleteListener</span>(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">this</span></span>) { task ->\n                <span class=\"hljs-keyword\">if</span> (task.<span class=\"hljs-property\">isSuccessful</span>) {\n                    <span class=\"hljs-comment\">// 로그인 성공</span>\n                    val user = task.<span class=\"hljs-property\">result</span>?.<span class=\"hljs-property\">user</span>\n                    val uid = user?.<span class=\"hljs-property\">uid</span> <span class=\"hljs-comment\">// 사용자 ID</span>\n                    val phoneNumber = user?.<span class=\"hljs-property\">phoneNumber</span> <span class=\"hljs-comment\">// 핸드폰 번호</span>\n                    val providerId = user?.<span class=\"hljs-property\">providerId</span> <span class=\"hljs-comment\">// 제공자 ID</span>\n\n                    <span class=\"hljs-title function_\">sendUserToBackend</span>(uid)\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">e</span>(<span class=\"hljs-string\">\"signInWithCredential\"</span>, <span class=\"hljs-string\">\"signInWithCredential:failure\"</span>, task.<span class=\"hljs-property\">exception</span>)\n                    <span class=\"hljs-comment\">// 로그인 실패</span>\n                }\n            }\n    }\n\n    private fun <span class=\"hljs-title function_\">sendUserToBackend</span>(<span class=\"hljs-params\">uid: <span class=\"hljs-built_in\">String</span>?</span>) {\n        <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">e</span>(<span class=\"hljs-string\">\"sendUserToBackend\"</span>, <span class=\"hljs-string\">\"UID: $uid\"</span>)\n        <span class=\"hljs-comment\">// 이 함수는 사용자의 UID를 백엔드로 전송하는 데 사용할 수 있습니다.</span>\n    }\n}\n</code></pre>\n<p><code>startPhoneNumberVerification</code> 메서드에서 전화번호 확인 프로세스 중 발생하는 이벤트들이 <code>onVerificationCompleted</code>, <code>onVerificationFailed</code>, <code>onCodeSent</code>와 같은 콜백을 사용하여 정의되어 있습니다.</p>\n<p><code>signInWithPhoneAuthCredential</code> 메서드는 Firebase 인증을 사용하여 로그인 작업을 수행합니다. 확인이 성공적일 경우, 사용자 정보를 가져와 백엔드로 전송할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-27-SecureSMSVerificationinAndroidApplicationswithFirebase_1.png\" alt=\"Secure SMS Verification in Android Applications with Firebase\"></p>\n<p>위 모든 단계를 완료한 후에는 Firebase로부터 SMS를 수신할 것입니다. SMS를 통해 받은 코드를 입력하면 signInWithPhoneAuthCredential 메서드가 이를 확인하고 응용 프로그램 흐름이 계속됩니다.</p>\n<h1>결론</h1>\n<p>본 문서에서 안내한 단계를 따라 Android 애플리케이션에서 Firebase를 사용하여 안전한 SMS 확인을 구현할 수 있게 됩니다. 이 방법은 사용자 인증의 보안성을 향상시키는데 그치지 않고 사용자들에게 원활한 로그인 경험을 제공합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>SMS 인증을 구현하면 무단 액세스가 크게 줄어들고, 앱에 로그인할 수 있는 것은 정당한 사용자뿐이라는 것을 보장할 수 있습니다. 또한 Firebase의 강력한 기능과 쉬운 통합을 통해, 인증 및 보안을 관리하는 강력한 도구로 활용할 수 있습니다.</p>\n<h1>참고 자료</h1>\n<ul>\n<li>Firebase 문서</li>\n<li>Google Play 무결성 API</li>\n<li>SHA-1 인증서 지문</li>\n<li>Firebase용 Gradle 구성</li>\n</ul>\n<p>참고: 개발 단계에서 Google이 자동으로 reCaptcha 서비스를 활성화할 수 있으며, SMS 인증을 수행하는 동안 reCaptcha 화면을 볼 수 있습니다. 주제에서 벗어나지 않도록 자세히 다루지 않았습니다. 더 자세한 정보는 여기에서 확인할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Note-2: 현재 Firebase를 통해 보내는 메시지 템플릿을 사용자 정의하는 것은 불가능합니다. 사용자 정의 메시지 유형을 사용하려면 다른 공급업체를 사용해야 합니다.</p>\n<p>이 기사가 안드로이드 애플리케이션에서 Firebase를 사용하여 SMS 인증을 구현하는 데 도움이 되기를 바랍니다. 궁금한 점이 있거나 추가 지원이 필요하면 아래에 댓글을 남기세요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/0*vvlpXIMRKoxTUlrJ.gif\" alt=\"image\"></p>\n</body>\n</html>\n"},"__N_SSG":true}