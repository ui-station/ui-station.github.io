{"pageProps":{"post":{"title":"Docker로 ReactJS 애플리케이션 컨테이너화하는 방법","description":"","date":"2024-07-01 16:15","slug":"2024-07-01-ContainerizationofReactJSApplicationusingDocker","content":"\n\n<img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_0.png\" />\n\n안녕하세요\n\n이 글에서는 샘플 React JS 애플리케이션을 생성하고 Docker를 활용하여 컨테이너화하는 방법을 배워보겠습니다.\n\n일정\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- React JS 애플리케이션 샘플\n- Docker 파일 생성\n- 애플리케이션 컨테이너화\n\n필수 요구사항\n\n- NPM\n- React JS\n- Docker Engine\n\nReact JS 애플리케이션 샘플\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n단계 1:\n\n아래 명령어를 사용하여 새 React JS 애플리케이션을 만듭니다.\n\n참고: 머신에 NPM 및 React JS가 이미 설치되어 있는지 확인하세요.\n\n\nnpx create-react-app reactjs-app-docker\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_1.png)\n\n단계 2:\n\n애플리케이션 디렉토리로 이동하여 애플리케이션을 실행합니다.\n\nnpm start\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Markdown 형식으로 변경된 테이블입니다.\n\n\n![이미지 1](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_2.png)\n\n![이미지 2](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_3.png)\n\nDocker 파일 생성\n\n```js\n# 공식 Node.js 베이스 이미지 사용\nFROM node:18\n\n# 작업 디렉토리 설정\nWORKDIR /app\n\n# package.json 및 package-lock.json 파일 복사\nCOPY package*.json ./\n\n# 종속 항목 설치\nRUN npm install\n\n# 나머지 애플리케이션 코드 복사\nCOPY . .\n\n# React 앱 빌드\nRUN npm run build\n\n# 빌드 폴더를 제공하는 serve를 전역으로 설치\nRUN npm install -g serve\n\n# 앱이 실행되는 포트 노출\nEXPOSE 3000\n\n# React 앱 시작\nCMD [\"serve\", \"-s\", \"build\"]\n```\n\n\n안내해 주셔서 감사합니다. 기타 요청이 있으시면 언제든지 말씀해주세요!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Docker 파일의 각 단계를 설명합니다:\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_4.png)\n\n이 줄은 Docker 이미지의 기본 이미지를 지정합니다. 우리는 Node.js의 공식 이미지를 버전 18으로 사용합니다. 이 이미지에는 Node.js 애플리케이션을 실행하는 데 필요한 모든 것이 포함되어 있습니다.\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_5.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 줄은 Docker 컨테이너 내의 작업 디렉토리를 /app으로 설정합니다. 이후의 모든 명령은 /app 디렉토리에서 실행됩니다. 이는 컨테이너 내에서 파일 시스템을 조직화하는 데 도움이 됩니다.\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_6.png)\n\n호스트 머신에서 package.json 및 package-lock.json을 Docker 컨테이너의 현재 작업 앱 디렉토리로 복사합니다. 이 파일들은 애플리케이션의 의존성을 설치하는 데 필요합니다.\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_7.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 단계는 package.json에 정의된 종속성을 설치하기 위해 npm install을 실행합니다. 이 단계를 통해 모든 필요한 Node.js 패키지가 컨테이너에 설치됩니다.\n\n![image](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_8.png)\n\n다음으로, 호스트 머신의 현재 디렉토리에서 Docker 컨테이너의 현재 작업 디렉토리로 모든 파일과 디렉토리를 복사합니다. 이는 소스 코드와 애플리케이션을 빌드하고 실행하는 데 필요한 모든 파일을 포함합니다.\n\n![image](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_9.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 명령은 React 애플리케이션을 프로덕션을 위해 빌드하는 npm run build를 실행합니다. 빌드 프로세스는 React 코드를 컴파일합니다.\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_10.png)\n\nDocker 컨테이너 내부에 serve 패키지를 글로벌로 설치합니다. serve는 빌드된 React 애플리케이션을 제공하는 데 사용할 간단한 정적 파일 서버입니다.\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_11.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 줄은 Docker에게 컨테이너가 실행 중일 때 포트 3000에서 수신 대기함을 알려줍니다. 이 포트는 React 애플리케이션이 제공될 포트입니다.\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_12.png)\n\n다음으로, 컨테이너가 시작될 때 실행할 명령을 지정합니다. 여기서 serve -s build는 serve 정적 파일 서버를 시작하고 React 빌드 프로세스에서 컴파일된 정적 파일이 포함된 build 디렉토리의 내용을 제공합니다.\n\n애플리케이션의 컨테이너화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n안녕하세요! 위 아래로 팔을 펴고 팔다리를 흔들어보세요. 근육들을 풀어주는 운동이죠! 함께 힘내봐요! 🏋🏻‍♂️🚀\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 Markdown 형식으로 변경하면 됩니다.\n\n\n![Containerization of ReactJS Application using Docker](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_13.png)\n\nStep 2:\n\nRun the docker image.\n\ndocker run -p 3000:3000 reactjs-app-docker\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_14.png)\n\n![이미지](/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_15.png)\n\nGithub:\n\nhttps://github.com/Jaydeep-007/reactjs-app-docker\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결론\n\n이 글에서는 샘플 React JS 애플리케이션을 만들었습니다. 이후 Docker 파일을 생성하고 각 단계와 목적을 이해했습니다. 마지막으로 Docker 명령어를 사용하여 Docker 이미지 파일을 빌드하고 컨테이너화했습니다.","ogImage":{"url":"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_0.png"},"coverImage":"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_0.png\">\n<p>안녕하세요</p>\n<p>이 글에서는 샘플 React JS 애플리케이션을 생성하고 Docker를 활용하여 컨테이너화하는 방법을 배워보겠습니다.</p>\n<p>일정</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>React JS 애플리케이션 샘플</li>\n<li>Docker 파일 생성</li>\n<li>애플리케이션 컨테이너화</li>\n</ul>\n<p>필수 요구사항</p>\n<ul>\n<li>NPM</li>\n<li>React JS</li>\n<li>Docker Engine</li>\n</ul>\n<p>React JS 애플리케이션 샘플</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>단계 1:</p>\n<p>아래 명령어를 사용하여 새 React JS 애플리케이션을 만듭니다.</p>\n<p>참고: 머신에 NPM 및 React JS가 이미 설치되어 있는지 확인하세요.</p>\n<p>npx create-react-app reactjs-app-docker</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_1.png\" alt=\"이미지\"></p>\n<p>단계 2:</p>\n<p>애플리케이션 디렉토리로 이동하여 애플리케이션을 실행합니다.</p>\n<p>npm start</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 Markdown 형식으로 변경된 테이블입니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_2.png\" alt=\"이미지 1\"></p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_3.png\" alt=\"이미지 2\"></p>\n<p>Docker 파일 생성</p>\n<pre><code class=\"hljs language-js\"># 공식 <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\">js</span> 베이스 이미지 사용\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">node</span>:<span class=\"hljs-number\">18</span>\n\n# 작업 디렉토리 설정\n<span class=\"hljs-variable constant_\">WORKDIR</span> /app\n\n# package.<span class=\"hljs-property\">json</span> 및 package-lock.<span class=\"hljs-property\">json</span> 파일 복사\n<span class=\"hljs-variable constant_\">COPY</span> package*.<span class=\"hljs-property\">json</span> ./\n\n# 종속 항목 설치\n<span class=\"hljs-variable constant_\">RUN</span> npm install\n\n# 나머지 애플리케이션 코드 복사\n<span class=\"hljs-variable constant_\">COPY</span> . .\n\n# <span class=\"hljs-title class_\">React</span> 앱 빌드\n<span class=\"hljs-variable constant_\">RUN</span> npm run build\n\n# 빌드 폴더를 제공하는 serve를 전역으로 설치\n<span class=\"hljs-variable constant_\">RUN</span> npm install -g serve\n\n# 앱이 실행되는 포트 노출\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n\n# <span class=\"hljs-title class_\">React</span> 앱 시작\n<span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"serve\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"build\"</span>]\n</code></pre>\n<p>안내해 주셔서 감사합니다. 기타 요청이 있으시면 언제든지 말씀해주세요!</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 Docker 파일의 각 단계를 설명합니다:</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_4.png\" alt=\"이미지\"></p>\n<p>이 줄은 Docker 이미지의 기본 이미지를 지정합니다. 우리는 Node.js의 공식 이미지를 버전 18으로 사용합니다. 이 이미지에는 Node.js 애플리케이션을 실행하는 데 필요한 모든 것이 포함되어 있습니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_5.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 줄은 Docker 컨테이너 내의 작업 디렉토리를 /app으로 설정합니다. 이후의 모든 명령은 /app 디렉토리에서 실행됩니다. 이는 컨테이너 내에서 파일 시스템을 조직화하는 데 도움이 됩니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_6.png\" alt=\"이미지\"></p>\n<p>호스트 머신에서 package.json 및 package-lock.json을 Docker 컨테이너의 현재 작업 앱 디렉토리로 복사합니다. 이 파일들은 애플리케이션의 의존성을 설치하는 데 필요합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_7.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 단계는 package.json에 정의된 종속성을 설치하기 위해 npm install을 실행합니다. 이 단계를 통해 모든 필요한 Node.js 패키지가 컨테이너에 설치됩니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_8.png\" alt=\"image\"></p>\n<p>다음으로, 호스트 머신의 현재 디렉토리에서 Docker 컨테이너의 현재 작업 디렉토리로 모든 파일과 디렉토리를 복사합니다. 이는 소스 코드와 애플리케이션을 빌드하고 실행하는 데 필요한 모든 파일을 포함합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_9.png\" alt=\"image\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래 명령은 React 애플리케이션을 프로덕션을 위해 빌드하는 npm run build를 실행합니다. 빌드 프로세스는 React 코드를 컴파일합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_10.png\" alt=\"이미지\"></p>\n<p>Docker 컨테이너 내부에 serve 패키지를 글로벌로 설치합니다. serve는 빌드된 React 애플리케이션을 제공하는 데 사용할 간단한 정적 파일 서버입니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_11.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 줄은 Docker에게 컨테이너가 실행 중일 때 포트 3000에서 수신 대기함을 알려줍니다. 이 포트는 React 애플리케이션이 제공될 포트입니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_12.png\" alt=\"이미지\"></p>\n<p>다음으로, 컨테이너가 시작될 때 실행할 명령을 지정합니다. 여기서 serve -s build는 serve 정적 파일 서버를 시작하고 React 빌드 프로세스에서 컴파일된 정적 파일이 포함된 build 디렉토리의 내용을 제공합니다.</p>\n<p>애플리케이션의 컨테이너화</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>안녕하세요! 위 아래로 팔을 펴고 팔다리를 흔들어보세요. 근육들을 풀어주는 운동이죠! 함께 힘내봐요! 🏋🏻‍♂️🚀</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래와 같이 Markdown 형식으로 변경하면 됩니다.</p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_13.png\" alt=\"Containerization of ReactJS Application using Docker\"></p>\n<p>Step 2:</p>\n<p>Run the docker image.</p>\n<p>docker run -p 3000:3000 reactjs-app-docker</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_14.png\" alt=\"이미지\"></p>\n<p><img src=\"/assets/img/2024-07-01-ContainerizationofReactJSApplicationusingDocker_15.png\" alt=\"이미지\"></p>\n<p>Github:</p>\n<p><a href=\"https://github.com/Jaydeep-007/reactjs-app-docker\" rel=\"nofollow\" target=\"_blank\">https://github.com/Jaydeep-007/reactjs-app-docker</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>결론</p>\n<p>이 글에서는 샘플 React JS 애플리케이션을 만들었습니다. 이후 Docker 파일을 생성하고 각 단계와 목적을 이해했습니다. 마지막으로 Docker 명령어를 사용하여 Docker 이미지 파일을 빌드하고 컨테이너화했습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}