{"pageProps":{"post":{"title":"안녕하세요 오늘은 안드로이드에서 ExoPlayer를 사용하여 Jetpack Compose로 비디오를 표시하는 방법에 대해 알아보겠습니다","description":"","date":"2024-05-23 12:55","slug":"2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose","content":"\n이 튜토리얼에서는 Jetpack Compose와 함께 ExoPlayer를 사용하는 간단한 방법을 보여드리기로 했어요.\n\n먼저 아래 종속성을 build.gradle(Module: app) 파일에 추가해주세요.\n\n```js\n// in .kts\nimplementation(\"androidx.media3:media3-exoplayer:1.2.0\");\nimplementation(\"androidx.media3:media3-ui:1.2.0\");\n```\n\n현재 컨텍스트를 LocalContext.current로 가져오세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n    // 현재 컨텍스트 가져오기\n    val context = LocalContext.current\n```\n\nComposable이나 ViewModel에서 ExoPlayer의 인스턴스를 만듭니다.\n\n```kotlin\nval exoPlayer = ExoPLayer.Builder(context).build()\n```\n\nExoPlayer의 라이프사이클을 관리하여 필요하지 않을 때 리소스를 해제해야 합니다. DisposableEffect와 LaunchedEffect를 사용하여 라이프사이클 이벤트를 처리할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// MediaSource를 ExoPlayer에 설정합니다.\nLaunchedEffect(mediaSource) {\n    exoPlayer.setMediaItem(mediaSource)\n    exoPlayer.prepare()\n}\n\n// 라이프사이클 이벤트 관리\nDisposableEffect(Unit) {\n    onDispose {\n        exoPlayer.release()\n    }\n}\n```\n\nExoPlayer 및 해당 컨트롤을 표시하는 Android view입니다.\n\n```js\nAndroidView(\n    factory = { ctx ->\n        PlayerView(ctx).apply {\n            player = exoPlayer\n        }\n    },\n    modifier = Modifier\n        .fillMaxWidth()\n        .height(200.dp) // 원하는 높이로 설정하세요\n)\n```\n\n상수 EXAMPLE_VIDEO_URI를 만들어 샘플 비디오의 URL을 정의합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nconst val EXAMPLE_VIDEO_URI = \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n```\n\nmanifest.file에 인터넷 권한을 추가해주세요.\n\n```js\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n이전에 만든 완성된 코드입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n/**\n * Composable 함수로 ExoPlayer를 사용하여 비디오를 재생하는 기능을 표시합니다.\n *\n * @OptIn 어노테이션인 UnstableApi는 해당 API가 여전히 실험적이며 향후 변경될 수 있다는 것을 나타냅니다.\n *\n * @see EXAMPLE_VIDEO_URI 실제 재생할 비디오의 URI로 대체하세요.\n */\n@OptIn(UnstableApi::class)\n@Composable\nfun ExoPlayerView() {\n    // 현재 컨텍스트 가져오기\n    val context = LocalContext.current\n\n    // ExoPlayer 초기화\n    val exoPlayer = ExoPlayer.Builder(context).build()\n\n    // MediaSource 생성\n    val mediaSource = remember(EXAMPLE_VIDEO_URI) {\n        MediaItem.fromUri(EXAMPLE_VIDEO_URI)\n    }\n\n    // MediaSource를 ExoPlayer에 설정\n    LaunchedEffect(mediaSource) {\n        exoPlayer.setMediaItem(mediaSource)\n        exoPlayer.prepare()\n    }\n\n    // 라이프사이클 이벤트 관리\n    DisposableEffect(Unit) {\n        onDispose {\n            exoPlayer.release()\n        }\n    }\n\n    // AndroidView를 사용하여 Android View(PlayerView)를 Compose에 임베드\n    AndroidView(\n        factory = { ctx ->\n            PlayerView(ctx).apply {\n                player = exoPlayer\n            }\n        },\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(200.dp) // 원하는 높이로 설정\n    )\n}\n```\n\n사용자 지정 UI 컨트롤이 필요하면 play, pause, seek 등을 위한 버튼으로 Composables를 생성하고 exoPlayer를 업데이트하면 됩니다.\n\n이 기능을 테스트하려면 Compose UI에서 ExoPlayeView()를 포함하면 됩니다:\n\n```kotlin\nExoPlayerView()\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코드를 실행하고 결과를 확인해보세요.\n\n![이미지](/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png)\n\n아래에는 해당 예제의 저장소 URL이 있습니다.\n\n## 그러나, 더 복잡한 설정과 동영상 컨트롤을 숨기는 기능이 포함된 다음 두 가지 화면으로 구성된 샘플 프로젝트가 있습니다. 첫 번째는 동영상 목록이고 두 번째는 선택된 동영상의 상세 정보입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n/**\n * Jetpack Compose를 사용하여 ExoPlayer를 이용한 비디오 플레이어를 표시하는 조합 가능한 함수입니다.\n *\n * @param video 비디오 재생 대상인 [VideoResultEntity]를 나타내는 매개변수입니다.\n * @param playingIndex 현재 재생 중인 인덱스를 나타내는 State입니다.\n * @param onVideoChange 비디오가 변경될 때 호출되는 콜백 함수입니다.\n * @param isVideoEnded 비디오가 종료되었는지를 결정하는 콜백 함수입니다.\n * @param modifier 스타일링 및 위치 지정을 위한 Modifier입니다.\n *\n * UnstableApi에 대한 OptIn 주석은 API가 여전히 실험적이며 미래에 변경될 수 있음을 나타냅니다.\n *\n * OpaqueUnitKey 사용에 대한 경고를 억제하기 위해 이용되는 SuppressLint 주석입니다.\n *\n * 실험적인 Animation API 사용을 위해 ExperimentalAnimationApi 주석이 적용되었습니다.\n */\n@OptIn(UnstableApi::class)\n@SuppressLint(\"OpaqueUnitKey\")\n@ExperimentalAnimationApi\n@Composable\nfun VideoPlayer(\n    video: VideoResultEntity,\n    playingIndex: State<Int>,\n    onVideoChange: (Int) -> Unit,\n    isVideoEnded: (Boolean) -> Unit,\n    modifier: Modifier = Modifier\n) {\n    // 현재 context 가져오기\n    val context = LocalContext.current\n\n    // 비디오 제목의 가시성을 제어하는 Mutable state\n    val visible = remember { mutableStateOf(true) }\n\n    // 비디오 제목을 보유하는 Mutable state\n    val videoTitle = remember { mutableStateOf(video.name) }\n\n    // ExoPlayer를 위한 MediaItems 목록 생성\n    val mediaItems = arrayListOf<MediaItem>()\n    mediaItems.add(\n        MediaItem.Builder()\n            .setUri(video.video)\n            .setMediaId(video.id.toString())\n            .setTag(video)\n            .setMediaMetadata(MediaMetadata.Builder().setDisplayTitle(video.name).build())\n            .build()\n    )\n\n    // ExoPlayer 초기화\n    val exoPlayer = remember {\n        ExoPlayer.Builder(context).build().apply {\n            this.setMediaItems(mediaItems)\n            this.prepare()\n            this.addListener(object : Player.Listener {\n                override fun onEvents(player: Player, events: Player.Events) {\n                    super.onEvents(player, events)\n                    // 200밀리초 후에 비디오 제목 숨김\n                    if (player.contentPosition >= 200) visible.value = false\n                }\n\n                override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {\n                    super.onMediaItemTransition(mediaItem, reason)\n                    // 비디오 변경 시 콜백\n                    onVideoChange(this@apply.currentPeriodIndex)\n                    visible.value = true\n                    videoTitle.value = mediaItem?.mediaMetadata?.displayTitle.toString()\n                }\n\n                override fun onPlaybackStateChanged(playbackState: Int) {\n                    super.onPlaybackStateChanged(playbackState)\n                    // 비디오 재생 상태가 STATE_ENDED로 변경될 때 콜백\n                    if (playbackState == ExoPlayer.STATE_ENDED) {\n                        isVideoEnded.invoke(true)\n                    }\n                }\n            })\n        }\n    }\n\n    // 지정된 인덱스로 이동하고 재생 시작\n    exoPlayer.seekTo(playingIndex.value, C.TIME_UNSET)\n    exoPlayer.playWhenReady = true\n\n    // 생명주기 이벤트에 기반한 플레이어 상태 관리를 위한 생명주기 관찰자 추가\n    LocalLifecycleOwner.current.lifecycle.addObserver(object : LifecycleEventObserver {\n        override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n            when (event) {\n                Lifecycle.Event.ON_START -> {\n                    // Composable이 화면에 있을 때 재생 시작\n                    if (exoPlayer.isPlaying.not()) {\n                        exoPlayer.play()\n                    }\n                }\n\n                Lifecycle.Event.ON_STOP -> {\n                    // Composable이 화면에서 벗어날 때 플레이어 일시정지\n                    exoPlayer.pause()\n                }\n\n                else -> {\n                    // Nothing\n                }\n            }\n        }\n    })\n\n    // 비디오 플레이어를 포함하는 Column Composable\n    Column(modifier = modifier.background(Color.Black)) {\n        // Composable이 소멸될 때 ExoPlayer 해제를 위한 DisposableEffect\n        DisposableEffect(\n            AndroidView(\n                modifier = modifier\n                    .testTag(VIDEO_PLAYER_TAG),\n                factory = {\n                    // Compose에 PlayerView를 포함시키는 AndroidView\n                    PlayerView(context).apply {\n                        player = exoPlayer\n                        layoutParams = FrameLayout.LayoutParams(\n                            ViewGroup.LayoutParams.MATCH_PARENT,\n                            ViewGroup.LayoutParams.MATCH_PARENT\n                        )\n                        // 사용 가능한 공간을 채우는 리사이즈 모드 설정\n                        resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL\n                        // 불필요한 플레이어 컨트롤 숨김\n                        setShowNextButton(false)\n                        setShowPreviousButton(false)\n                        setShowFastForwardButton(false)\n                        setShowRewindButton(false)\n                    }\n                })\n        ) {\n            // Composable이 소멸될 때 ExoPlayer 해제\n            onDispose {\n                exoPlayer.release()\n            }\n        }\n    }\n}\n```\n\n## VideoPlayer() 조합 가능한 함수 내용:\n\nMediaItems 및 ExoPlayer 설정:\n\n- 비디오 정보를 담을 MediaItems 목록 생성.\n- ExoPlayer를 해당 MediaItems로 구성하고 준비하며, 비디오 변경 및 재생 상태 변경과 같은 이벤트를 처리할 수 있도록 리스너가 추가됨.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라이프사이클 관리:\n\n- 리사이클러브 옵서버가 추가되어 Composable 라이프사이클 이벤트를 기반으로 플레이어 상태를 관리합니다. 화면이 포그라운드에 있을 때 플레이어가 재생되고, 백그라운드에 있을 때는 일시정지됩니다.\n\nAndroidView 및 PlayerView 통합:\n\n- AndroidView Composable은 안드로이드 PlayerView를 Jetpack Compose에 삽입하는 데 사용됩니다.\n- PlayerView는 ExoPlayer 인스턴스, 레이아웃 매개변수 및 리사이즈 모드와 플레이어 컨트롤의 가시성과 같은 속성과 함께 구성됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n휴지통 효과를 위한 정리:\n\n- DisposableEffect는 Composable이 dispose될 때 ExoPlayer 자원을 해제하기 위해 사용됩니다.\n\n총적으로, VideoPlayer Composable은 Jetpack Compose UI 내에서 비디오 재생을 위해 ExoPlayer를 초기화하고 관리하는 로직을 캡슐화합니다.\n\n## 아래 저장소에서 코드를 더 주의 깊게 테스트하고 검토해 주셨으면 좋겠습니다.\n","ogImage":{"url":"/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png"},"coverImage":"/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 튜토리얼에서는 Jetpack Compose와 함께 ExoPlayer를 사용하는 간단한 방법을 보여드리기로 했어요.</p>\n<p>먼저 아래 종속성을 build.gradle(Module: app) 파일에 추가해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in .kts</span>\n<span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.media3:media3-exoplayer:1.2.0\"</span>);\n<span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.media3:media3-ui:1.2.0\"</span>);\n</code></pre>\n<p>현재 컨텍스트를 LocalContext.current로 가져오세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\">    <span class=\"hljs-comment\">// 현재 컨텍스트 가져오기</span>\n    <span class=\"hljs-keyword\">val</span> context = LocalContext.current\n</code></pre>\n<p>Composable이나 ViewModel에서 ExoPlayer의 인스턴스를 만듭니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> exoPlayer = ExoPLayer.Builder(context).build()\n</code></pre>\n<p>ExoPlayer의 라이프사이클을 관리하여 필요하지 않을 때 리소스를 해제해야 합니다. DisposableEffect와 LaunchedEffect를 사용하여 라이프사이클 이벤트를 처리할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// MediaSource를 ExoPlayer에 설정합니다.</span>\n<span class=\"hljs-title class_\">LaunchedEffect</span>(mediaSource) {\n    exoPlayer.<span class=\"hljs-title function_\">setMediaItem</span>(mediaSource)\n    exoPlayer.<span class=\"hljs-title function_\">prepare</span>()\n}\n\n<span class=\"hljs-comment\">// 라이프사이클 이벤트 관리</span>\n<span class=\"hljs-title class_\">DisposableEffect</span>(<span class=\"hljs-title class_\">Unit</span>) {\n    onDispose {\n        exoPlayer.<span class=\"hljs-title function_\">release</span>()\n    }\n}\n</code></pre>\n<p>ExoPlayer 및 해당 컨트롤을 표시하는 Android view입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">AndroidView</span>(\n    factory = { ctx ->\n        <span class=\"hljs-title class_\">PlayerView</span>(ctx).<span class=\"hljs-property\">apply</span> {\n            player = exoPlayer\n        }\n    },\n    modifier = <span class=\"hljs-title class_\">Modifier</span>\n        .<span class=\"hljs-title function_\">fillMaxWidth</span>()\n        .<span class=\"hljs-title function_\">height</span>(<span class=\"hljs-number\">200.</span>dp) <span class=\"hljs-comment\">// 원하는 높이로 설정하세요</span>\n)\n</code></pre>\n<p>상수 EXAMPLE_VIDEO_URI를 만들어 샘플 비디오의 URL을 정의합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> val <span class=\"hljs-variable constant_\">EXAMPLE_VIDEO_URI</span> = <span class=\"hljs-string\">\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"</span>\n</code></pre>\n<p>manifest.file에 인터넷 권한을 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;uses-permission <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\"android.permission.INTERNET\"</span> />\n</code></pre>\n<p>이전에 만든 완성된 코드입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-comment\">/**\n * Composable 함수로 ExoPlayer를 사용하여 비디오를 재생하는 기능을 표시합니다.\n *\n * <span class=\"hljs-doctag\">@OptIn</span> 어노테이션인 UnstableApi는 해당 API가 여전히 실험적이며 향후 변경될 수 있다는 것을 나타냅니다.\n *\n * <span class=\"hljs-doctag\">@see</span> EXAMPLE_VIDEO_URI 실제 재생할 비디오의 URI로 대체하세요.\n */</span>\n<span class=\"hljs-meta\">@OptIn(UnstableApi::class)</span>\n<span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">ExoPlayerView</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">// 현재 컨텍스트 가져오기</span>\n    <span class=\"hljs-keyword\">val</span> context = LocalContext.current\n\n    <span class=\"hljs-comment\">// ExoPlayer 초기화</span>\n    <span class=\"hljs-keyword\">val</span> exoPlayer = ExoPlayer.Builder(context).build()\n\n    <span class=\"hljs-comment\">// MediaSource 생성</span>\n    <span class=\"hljs-keyword\">val</span> mediaSource = remember(EXAMPLE_VIDEO_URI) {\n        MediaItem.fromUri(EXAMPLE_VIDEO_URI)\n    }\n\n    <span class=\"hljs-comment\">// MediaSource를 ExoPlayer에 설정</span>\n    LaunchedEffect(mediaSource) {\n        exoPlayer.setMediaItem(mediaSource)\n        exoPlayer.prepare()\n    }\n\n    <span class=\"hljs-comment\">// 라이프사이클 이벤트 관리</span>\n    DisposableEffect(<span class=\"hljs-built_in\">Unit</span>) {\n        onDispose {\n            exoPlayer.release()\n        }\n    }\n\n    <span class=\"hljs-comment\">// AndroidView를 사용하여 Android View(PlayerView)를 Compose에 임베드</span>\n    AndroidView(\n        factory = { ctx ->\n            PlayerView(ctx).apply {\n                player = exoPlayer\n            }\n        },\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(<span class=\"hljs-number\">200.</span>dp) <span class=\"hljs-comment\">// 원하는 높이로 설정</span>\n    )\n}\n</code></pre>\n<p>사용자 지정 UI 컨트롤이 필요하면 play, pause, seek 등을 위한 버튼으로 Composables를 생성하고 exoPlayer를 업데이트하면 됩니다.</p>\n<p>이 기능을 테스트하려면 Compose UI에서 ExoPlayeView()를 포함하면 됩니다:</p>\n<pre><code class=\"hljs language-kotlin\">ExoPlayerView()\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>코드를 실행하고 결과를 확인해보세요.</p>\n<p><img src=\"/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png\" alt=\"이미지\"></p>\n<p>아래에는 해당 예제의 저장소 URL이 있습니다.</p>\n<h2>그러나, 더 복잡한 설정과 동영상 컨트롤을 숨기는 기능이 포함된 다음 두 가지 화면으로 구성된 샘플 프로젝트가 있습니다. 첫 번째는 동영상 목록이고 두 번째는 선택된 동영상의 상세 정보입니다.</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-comment\">/**\n * Jetpack Compose를 사용하여 ExoPlayer를 이용한 비디오 플레이어를 표시하는 조합 가능한 함수입니다.\n *\n * <span class=\"hljs-doctag\">@param</span> video 비디오 재생 대상인 [VideoResultEntity]를 나타내는 매개변수입니다.\n * <span class=\"hljs-doctag\">@param</span> playingIndex 현재 재생 중인 인덱스를 나타내는 State입니다.\n * <span class=\"hljs-doctag\">@param</span> onVideoChange 비디오가 변경될 때 호출되는 콜백 함수입니다.\n * <span class=\"hljs-doctag\">@param</span> isVideoEnded 비디오가 종료되었는지를 결정하는 콜백 함수입니다.\n * <span class=\"hljs-doctag\">@param</span> modifier 스타일링 및 위치 지정을 위한 Modifier입니다.\n *\n * UnstableApi에 대한 OptIn 주석은 API가 여전히 실험적이며 미래에 변경될 수 있음을 나타냅니다.\n *\n * OpaqueUnitKey 사용에 대한 경고를 억제하기 위해 이용되는 SuppressLint 주석입니다.\n *\n * 실험적인 Animation API 사용을 위해 ExperimentalAnimationApi 주석이 적용되었습니다.\n */</span>\n<span class=\"hljs-meta\">@OptIn(UnstableApi::class)</span>\n<span class=\"hljs-meta\">@SuppressLint(<span class=\"hljs-string\">\"OpaqueUnitKey\"</span>)</span>\n<span class=\"hljs-meta\">@ExperimentalAnimationApi</span>\n<span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">VideoPlayer</span><span class=\"hljs-params\">(\n    video: <span class=\"hljs-type\">VideoResultEntity</span>,\n    playingIndex: <span class=\"hljs-type\">State</span>&#x3C;<span class=\"hljs-type\">Int</span>>,\n    onVideoChange: (<span class=\"hljs-type\">Int</span>) -> <span class=\"hljs-type\">Unit</span>,\n    isVideoEnded: (<span class=\"hljs-type\">Boolean</span>) -> <span class=\"hljs-type\">Unit</span>,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier\n)</span></span> {\n    <span class=\"hljs-comment\">// 현재 context 가져오기</span>\n    <span class=\"hljs-keyword\">val</span> context = LocalContext.current\n\n    <span class=\"hljs-comment\">// 비디오 제목의 가시성을 제어하는 Mutable state</span>\n    <span class=\"hljs-keyword\">val</span> visible = remember { mutableStateOf(<span class=\"hljs-literal\">true</span>) }\n\n    <span class=\"hljs-comment\">// 비디오 제목을 보유하는 Mutable state</span>\n    <span class=\"hljs-keyword\">val</span> videoTitle = remember { mutableStateOf(video.name) }\n\n    <span class=\"hljs-comment\">// ExoPlayer를 위한 MediaItems 목록 생성</span>\n    <span class=\"hljs-keyword\">val</span> mediaItems = arrayListOf&#x3C;MediaItem>()\n    mediaItems.add(\n        MediaItem.Builder()\n            .setUri(video.video)\n            .setMediaId(video.id.toString())\n            .setTag(video)\n            .setMediaMetadata(MediaMetadata.Builder().setDisplayTitle(video.name).build())\n            .build()\n    )\n\n    <span class=\"hljs-comment\">// ExoPlayer 초기화</span>\n    <span class=\"hljs-keyword\">val</span> exoPlayer = remember {\n        ExoPlayer.Builder(context).build().apply {\n            <span class=\"hljs-keyword\">this</span>.setMediaItems(mediaItems)\n            <span class=\"hljs-keyword\">this</span>.prepare()\n            <span class=\"hljs-keyword\">this</span>.addListener(<span class=\"hljs-keyword\">object</span> : Player.Listener {\n                <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onEvents</span><span class=\"hljs-params\">(player: <span class=\"hljs-type\">Player</span>, events: <span class=\"hljs-type\">Player</span>.<span class=\"hljs-type\">Events</span>)</span></span> {\n                    <span class=\"hljs-keyword\">super</span>.onEvents(player, events)\n                    <span class=\"hljs-comment\">// 200밀리초 후에 비디오 제목 숨김</span>\n                    <span class=\"hljs-keyword\">if</span> (player.contentPosition >= <span class=\"hljs-number\">200</span>) visible.value = <span class=\"hljs-literal\">false</span>\n                }\n\n                <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onMediaItemTransition</span><span class=\"hljs-params\">(mediaItem: <span class=\"hljs-type\">MediaItem</span>?, reason: <span class=\"hljs-type\">Int</span>)</span></span> {\n                    <span class=\"hljs-keyword\">super</span>.onMediaItemTransition(mediaItem, reason)\n                    <span class=\"hljs-comment\">// 비디오 변경 시 콜백</span>\n                    onVideoChange(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@apply</span>.currentPeriodIndex)\n                    visible.value = <span class=\"hljs-literal\">true</span>\n                    videoTitle.value = mediaItem?.mediaMetadata?.displayTitle.toString()\n                }\n\n                <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onPlaybackStateChanged</span><span class=\"hljs-params\">(playbackState: <span class=\"hljs-type\">Int</span>)</span></span> {\n                    <span class=\"hljs-keyword\">super</span>.onPlaybackStateChanged(playbackState)\n                    <span class=\"hljs-comment\">// 비디오 재생 상태가 STATE_ENDED로 변경될 때 콜백</span>\n                    <span class=\"hljs-keyword\">if</span> (playbackState == ExoPlayer.STATE_ENDED) {\n                        isVideoEnded.invoke(<span class=\"hljs-literal\">true</span>)\n                    }\n                }\n            })\n        }\n    }\n\n    <span class=\"hljs-comment\">// 지정된 인덱스로 이동하고 재생 시작</span>\n    exoPlayer.seekTo(playingIndex.value, C.TIME_UNSET)\n    exoPlayer.playWhenReady = <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-comment\">// 생명주기 이벤트에 기반한 플레이어 상태 관리를 위한 생명주기 관찰자 추가</span>\n    LocalLifecycleOwner.current.lifecycle.addObserver(<span class=\"hljs-keyword\">object</span> : LifecycleEventObserver {\n        <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onStateChanged</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">LifecycleOwner</span>, event: <span class=\"hljs-type\">Lifecycle</span>.<span class=\"hljs-type\">Event</span>)</span></span> {\n            <span class=\"hljs-keyword\">when</span> (event) {\n                Lifecycle.Event.ON_START -> {\n                    <span class=\"hljs-comment\">// Composable이 화면에 있을 때 재생 시작</span>\n                    <span class=\"hljs-keyword\">if</span> (exoPlayer.isPlaying.not()) {\n                        exoPlayer.play()\n                    }\n                }\n\n                Lifecycle.Event.ON_STOP -> {\n                    <span class=\"hljs-comment\">// Composable이 화면에서 벗어날 때 플레이어 일시정지</span>\n                    exoPlayer.pause()\n                }\n\n                <span class=\"hljs-keyword\">else</span> -> {\n                    <span class=\"hljs-comment\">// Nothing</span>\n                }\n            }\n        }\n    })\n\n    <span class=\"hljs-comment\">// 비디오 플레이어를 포함하는 Column Composable</span>\n    Column(modifier = modifier.background(Color.Black)) {\n        <span class=\"hljs-comment\">// Composable이 소멸될 때 ExoPlayer 해제를 위한 DisposableEffect</span>\n        DisposableEffect(\n            AndroidView(\n                modifier = modifier\n                    .testTag(VIDEO_PLAYER_TAG),\n                factory = {\n                    <span class=\"hljs-comment\">// Compose에 PlayerView를 포함시키는 AndroidView</span>\n                    PlayerView(context).apply {\n                        player = exoPlayer\n                        layoutParams = FrameLayout.LayoutParams(\n                            ViewGroup.LayoutParams.MATCH_PARENT,\n                            ViewGroup.LayoutParams.MATCH_PARENT\n                        )\n                        <span class=\"hljs-comment\">// 사용 가능한 공간을 채우는 리사이즈 모드 설정</span>\n                        resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL\n                        <span class=\"hljs-comment\">// 불필요한 플레이어 컨트롤 숨김</span>\n                        setShowNextButton(<span class=\"hljs-literal\">false</span>)\n                        setShowPreviousButton(<span class=\"hljs-literal\">false</span>)\n                        setShowFastForwardButton(<span class=\"hljs-literal\">false</span>)\n                        setShowRewindButton(<span class=\"hljs-literal\">false</span>)\n                    }\n                })\n        ) {\n            <span class=\"hljs-comment\">// Composable이 소멸될 때 ExoPlayer 해제</span>\n            onDispose {\n                exoPlayer.release()\n            }\n        }\n    }\n}\n</code></pre>\n<h2>VideoPlayer() 조합 가능한 함수 내용:</h2>\n<p>MediaItems 및 ExoPlayer 설정:</p>\n<ul>\n<li>비디오 정보를 담을 MediaItems 목록 생성.</li>\n<li>ExoPlayer를 해당 MediaItems로 구성하고 준비하며, 비디오 변경 및 재생 상태 변경과 같은 이벤트를 처리할 수 있도록 리스너가 추가됨.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>라이프사이클 관리:</p>\n<ul>\n<li>리사이클러브 옵서버가 추가되어 Composable 라이프사이클 이벤트를 기반으로 플레이어 상태를 관리합니다. 화면이 포그라운드에 있을 때 플레이어가 재생되고, 백그라운드에 있을 때는 일시정지됩니다.</li>\n</ul>\n<p>AndroidView 및 PlayerView 통합:</p>\n<ul>\n<li>AndroidView Composable은 안드로이드 PlayerView를 Jetpack Compose에 삽입하는 데 사용됩니다.</li>\n<li>PlayerView는 ExoPlayer 인스턴스, 레이아웃 매개변수 및 리사이즈 모드와 플레이어 컨트롤의 가시성과 같은 속성과 함께 구성됩니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>휴지통 효과를 위한 정리:</p>\n<ul>\n<li>DisposableEffect는 Composable이 dispose될 때 ExoPlayer 자원을 해제하기 위해 사용됩니다.</li>\n</ul>\n<p>총적으로, VideoPlayer Composable은 Jetpack Compose UI 내에서 비디오 재생을 위해 ExoPlayer를 초기화하고 관리하는 로직을 캡슐화합니다.</p>\n<h2>아래 저장소에서 코드를 더 주의 깊게 테스트하고 검토해 주셨으면 좋겠습니다.</h2>\n</body>\n</html>\n"},"__N_SSG":true}