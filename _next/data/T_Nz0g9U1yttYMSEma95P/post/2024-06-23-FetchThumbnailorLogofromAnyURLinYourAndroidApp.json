{"pageProps":{"post":{"title":"안드로이드 앱에서 URL로 썸네일 또는 로고 가져오는 방법","description":"","date":"2024-06-23 20:56","slug":"2024-06-23-FetchThumbnailorLogofromAnyURLinYourAndroidApp","content":"\n이 기사에서는 안드로이드 애플리케이션에서 주어진 URL에서 섬네일이나 로고를 가져와서 표시하는 방법을 안내하겠습니다. 네트워크 요청에는 Retrofit, HTML 파싱에는 Jsoup, 이미지 로딩에는 Glide를 사용할 예정입니다.\n\n# 특징\n\n- 주어진 URL에서 HTML 콘텐츠를 가져옵니다.\n- HTML을 파싱하여 섬네일이나 로고 URL을 추출합니다.\n- Glide를 사용하여 가져온 이미지를 표시합니다.\n- 섬네일이나 로고를 찾을 수 없는 경우 기본 로고로 대체합니다.\n\n# 사용 사례\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 앱은 다음과 같은 여러 시나리오에 유용할 수 있어요:\n\n- 메시지나 소셜 미디어 앱에서 공유된 URL에 미리보기 이미지 표시하기.\n- 콘텐츠 집계 앱에서 블로그 글이나 기사의 썸네일 표시하기.\n- 북마크 관리자에서 링크와 관련된 로고나 이미지를 가져와 표시하기.\n\n# 시작하기\n\n# 요구 사항\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 안드로이드 스튜디오\n- 코틀린\n- 인터넷 연결\n\n# 종속성\n\n다음 종속성을 build.gradle.kts 파일에 추가해주세요:\n\n```js\nimplementation(\"com.squareup.retrofit2:retrofit:2.9.0\");\nimplementation(\"com.squareup.retrofit2:converter-scalars:2.9.0\");\nimplementation(\"org.jsoup:jsoup:1.13.1\");\nimplementation(\"com.github.bumptech.glide:glide:4.11.0\");\nkapt(\"com.github.bumptech.glide:compiler:4.11.0\");\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 사용 방법\n\n- 저장소를 복제합니다:\n\n  bash\n  git clone https://github.com/WalidAhmed90/Fetch-Thumbnail-or-Logo-in-Android-App.git\n  cd Fetch-Thumbnail-or-Logo-in-Android-App\n\n2. Android Studio에서 프로젝트를 엽니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3. 안드로이드 기기 또는 에뮬레이터에서 프로젝트를 빌드하고 실행하세요.\n\n4. URL을 입력하고 \"썸네일 생성\" 버튼을 클릭하여 썸네일이나 로고를 가져와 표시하세요.\n\n# 코드 개요\n\n## API 서비스\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nApiService 인터페이스는 URL에서 HTML 콘텐츠를 가져오는 메서드를 정의합니다:\n\n```js\ninterface ApiService {\n    @GET\n    suspend fun fetchHtml(@Url url: String): String\n}\n```\n\n## 썸네일 가져오기\n\nfetchThumbnail 함수는 HTML 콘텐츠를 가져와 썸네일이나 로고를 찾아 Glide를 사용하여 보여줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nfun fetchThumbnail(url: String) {\n        mBinding.progress.visibility = View.VISIBLE\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://example.com/\")  // 가짜 기본 URL, 덮어쓰기될 예정\n            .client(OkHttpClient())\n            .addConverterFactory(ScalarsConverterFactory.create())\n            .build()\n\n        val apiService = retrofit.create(ApiService::class.java)\n\n        CoroutineScope(Dispatchers.IO).launch {\n            try {\n                val html = apiService.fetchHtml(url)\n                Log.d(\"HTML_CONTENT\", html) // 가져온 HTML 내용 로깅\n\n                val document = Jsoup.parse(html)\n                val metaTags = document.select(\"meta[property=og:image], meta[name=twitter:image]\")\n\n                var thumbnailUrl: String? = null\n                for (metaTag in metaTags) {\n                    val content = metaTag.attr(\"content\")\n                    if (content.isNotEmpty()) {\n                        thumbnailUrl = content\n                        break\n                    }\n                }\n\n                if (thumbnailUrl == null) {\n                    val mainImage: Element? = document.select(\"table.infobox img\").first()\n                    mainImage?.let {\n                        thumbnailUrl = \"https:${it.attr(\"src\")}\"\n                    }\n                }\n\n                // 썸네일 이미지를 찾을 수 없는 경우 도메인 로고로 대체\n                if (thumbnailUrl == null) {\n                    val domain = Uri.parse(url).host ?: \"\"\n                    thumbnailUrl = \"https://logo.clearbit.com/$domain\"\n                }\n\n                if (thumbnailUrl != null) {\n                    launch(Dispatchers.Main) {\n                        mBinding.progress.visibility = View.GONE\n                        Glide.with(this@MainActivity)\n                            .load(thumbnailUrl)\n                            .into(mBinding.thumbnailImage)\n                    }\n                } else {\n                    mBinding.progress.visibility = View.GONE\n                    Log.d(\"THUMBNAIL\", \"이미지를 찾을 수 없습니다.\")\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n                mBinding.progress.visibility = View.GONE\n            }\n        }\n    }\n```\n\n## Layout\n\nactivity_main.xml 레이아웃 파일은 다음과 같이 UI 구성요소를 정의합니다:\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <data>\n\n    </data>\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n  >\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\"\n            android:padding=\"16dp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            tools:context=\".MainActivity\">\n\n            <EditText\n                android:id=\"@+id/urlInput\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:textColor=\"@color/grey\"\n                android:layout_marginTop=\"20dp\"\n                android:hint=\"URL 입력\" />\n\n            <Button\n                android:id=\"@+id/generateButton\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"10dp\"\n                android:text=\"썸네일 생성\" />\n\n            <ImageView\n                android:id=\"@+id/thumbnailImage\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:adjustViewBounds=\"true\"\n                android:contentDescription=\"썸네일\"\n                android:layout_marginTop=\"10dp\"\n                android:scaleType=\"fitCenter\"\n                android:visibility=\"visible\" />\n\n            <com.google.android.material.progressindicator.CircularProgressIndicator\n                android:id=\"@+id/progress\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                app:indicatorColor=\"@color/green\"\n                android:indeterminate=\"true\"\n                android:layout_gravity=\"center_horizontal\"\n                android:visibility=\"gone\"\n                />\n\n        </LinearLayout>\n\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</layout>\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 기여하기\n\n문제를 발견하거나 개선 제안이 있는 경우 문제를 열거나 풀 요청을 제출해주세요.\n\n# 결과:\n\n![Output](https://miro.medium.com/v2/resize:fit:1200/1*606E5BSXDVXR6xuwV6sFSg.gif)\n","ogImage":{"url":"/assets/img/2024-06-23-FetchThumbnailorLogofromAnyURLinYourAndroidApp_0.png"},"coverImage":"/assets/img/2024-06-23-FetchThumbnailorLogofromAnyURLinYourAndroidApp_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 기사에서는 안드로이드 애플리케이션에서 주어진 URL에서 섬네일이나 로고를 가져와서 표시하는 방법을 안내하겠습니다. 네트워크 요청에는 Retrofit, HTML 파싱에는 Jsoup, 이미지 로딩에는 Glide를 사용할 예정입니다.</p>\n<h1>특징</h1>\n<ul>\n<li>주어진 URL에서 HTML 콘텐츠를 가져옵니다.</li>\n<li>HTML을 파싱하여 섬네일이나 로고 URL을 추출합니다.</li>\n<li>Glide를 사용하여 가져온 이미지를 표시합니다.</li>\n<li>섬네일이나 로고를 찾을 수 없는 경우 기본 로고로 대체합니다.</li>\n</ul>\n<h1>사용 사례</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 앱은 다음과 같은 여러 시나리오에 유용할 수 있어요:</p>\n<ul>\n<li>메시지나 소셜 미디어 앱에서 공유된 URL에 미리보기 이미지 표시하기.</li>\n<li>콘텐츠 집계 앱에서 블로그 글이나 기사의 썸네일 표시하기.</li>\n<li>북마크 관리자에서 링크와 관련된 로고나 이미지를 가져와 표시하기.</li>\n</ul>\n<h1>시작하기</h1>\n<h1>요구 사항</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>안드로이드 스튜디오</li>\n<li>코틀린</li>\n<li>인터넷 연결</li>\n</ul>\n<h1>종속성</h1>\n<p>다음 종속성을 build.gradle.kts 파일에 추가해주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"com.squareup.retrofit2:retrofit:2.9.0\"</span>);\n<span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"com.squareup.retrofit2:converter-scalars:2.9.0\"</span>);\n<span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"org.jsoup:jsoup:1.13.1\"</span>);\n<span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"com.github.bumptech.glide:glide:4.11.0\"</span>);\n<span class=\"hljs-title function_\">kapt</span>(<span class=\"hljs-string\">\"com.github.bumptech.glide:compiler:4.11.0\"</span>);\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>사용 방법</h1>\n<ul>\n<li>\n<p>저장소를 복제합니다:</p>\n<p>bash\ngit clone <a href=\"https://github.com/WalidAhmed90/Fetch-Thumbnail-or-Logo-in-Android-App.git\" rel=\"nofollow\" target=\"_blank\">https://github.com/WalidAhmed90/Fetch-Thumbnail-or-Logo-in-Android-App.git</a>\ncd Fetch-Thumbnail-or-Logo-in-Android-App</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Android Studio에서 프로젝트를 엽니다.</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol start=\"3\">\n<li>\n<p>안드로이드 기기 또는 에뮬레이터에서 프로젝트를 빌드하고 실행하세요.</p>\n</li>\n<li>\n<p>URL을 입력하고 \"썸네일 생성\" 버튼을 클릭하여 썸네일이나 로고를 가져와 표시하세요.</p>\n</li>\n</ol>\n<h1>코드 개요</h1>\n<h2>API 서비스</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>ApiService 인터페이스는 URL에서 HTML 콘텐츠를 가져오는 메서드를 정의합니다:</p>\n<pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">ApiService</span> {\n    @<span class=\"hljs-variable constant_\">GET</span>\n    suspend fun <span class=\"hljs-title function_\">fetchHtml</span>(@<span class=\"hljs-title class_\">Url</span> <span class=\"hljs-attr\">url</span>: <span class=\"hljs-title class_\">String</span>): <span class=\"hljs-title class_\">String</span>\n}\n</code></pre>\n<h2>썸네일 가져오기</h2>\n<p>fetchThumbnail 함수는 HTML 콘텐츠를 가져와 썸네일이나 로고를 찾아 Glide를 사용하여 보여줍니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">fetchThumbnail</span><span class=\"hljs-params\">(url: <span class=\"hljs-type\">String</span>)</span></span> {\n        mBinding.progress.visibility = View.VISIBLE\n        <span class=\"hljs-keyword\">val</span> retrofit = Retrofit.Builder()\n            .baseUrl(<span class=\"hljs-string\">\"https://example.com/\"</span>)  <span class=\"hljs-comment\">// 가짜 기본 URL, 덮어쓰기될 예정</span>\n            .client(OkHttpClient())\n            .addConverterFactory(ScalarsConverterFactory.create())\n            .build()\n\n        <span class=\"hljs-keyword\">val</span> apiService = retrofit.create(ApiService::<span class=\"hljs-keyword\">class</span>.java)\n\n        CoroutineScope(Dispatchers.IO).launch {\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-keyword\">val</span> html = apiService.fetchHtml(url)\n                Log.d(<span class=\"hljs-string\">\"HTML_CONTENT\"</span>, html) <span class=\"hljs-comment\">// 가져온 HTML 내용 로깅</span>\n\n                <span class=\"hljs-keyword\">val</span> document = Jsoup.parse(html)\n                <span class=\"hljs-keyword\">val</span> metaTags = document.select(<span class=\"hljs-string\">\"meta[property=og:image], meta[name=twitter:image]\"</span>)\n\n                <span class=\"hljs-keyword\">var</span> thumbnailUrl: String? = <span class=\"hljs-literal\">null</span>\n                <span class=\"hljs-keyword\">for</span> (metaTag <span class=\"hljs-keyword\">in</span> metaTags) {\n                    <span class=\"hljs-keyword\">val</span> content = metaTag.attr(<span class=\"hljs-string\">\"content\"</span>)\n                    <span class=\"hljs-keyword\">if</span> (content.isNotEmpty()) {\n                        thumbnailUrl = content\n                        <span class=\"hljs-keyword\">break</span>\n                    }\n                }\n\n                <span class=\"hljs-keyword\">if</span> (thumbnailUrl == <span class=\"hljs-literal\">null</span>) {\n                    <span class=\"hljs-keyword\">val</span> mainImage: Element? = document.select(<span class=\"hljs-string\">\"table.infobox img\"</span>).first()\n                    mainImage?.let {\n                        thumbnailUrl = <span class=\"hljs-string\">\"https:<span class=\"hljs-subst\">${it.attr(<span class=\"hljs-string\">\"src\"</span>)}</span>\"</span>\n                    }\n                }\n\n                <span class=\"hljs-comment\">// 썸네일 이미지를 찾을 수 없는 경우 도메인 로고로 대체</span>\n                <span class=\"hljs-keyword\">if</span> (thumbnailUrl == <span class=\"hljs-literal\">null</span>) {\n                    <span class=\"hljs-keyword\">val</span> domain = Uri.parse(url).host ?: <span class=\"hljs-string\">\"\"</span>\n                    thumbnailUrl = <span class=\"hljs-string\">\"https://logo.clearbit.com/<span class=\"hljs-variable\">$domain</span>\"</span>\n                }\n\n                <span class=\"hljs-keyword\">if</span> (thumbnailUrl != <span class=\"hljs-literal\">null</span>) {\n                    launch(Dispatchers.Main) {\n                        mBinding.progress.visibility = View.GONE\n                        Glide.with(<span class=\"hljs-keyword\">this</span><span class=\"hljs-symbol\">@MainActivity</span>)\n                            .load(thumbnailUrl)\n                            .into(mBinding.thumbnailImage)\n                    }\n                } <span class=\"hljs-keyword\">else</span> {\n                    mBinding.progress.visibility = View.GONE\n                    Log.d(<span class=\"hljs-string\">\"THUMBNAIL\"</span>, <span class=\"hljs-string\">\"이미지를 찾을 수 없습니다.\"</span>)\n                }\n            } <span class=\"hljs-keyword\">catch</span> (e: Exception) {\n                e.printStackTrace()\n                mBinding.progress.visibility = View.GONE\n            }\n        }\n    }\n</code></pre>\n<h2>Layout</h2>\n<p>activity_main.xml 레이아웃 파일은 다음과 같이 UI 구성요소를 정의합니다:</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-meta\">&#x3C;?xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span>?></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"hljs-attr\">xmlns:app</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res-auto\"</span>\n    <span class=\"hljs-attr\">xmlns:tools</span>=<span class=\"hljs-string\">\"http://schemas.android.com/tools\"</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">data</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">data</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">androidx.constraintlayout.widget.ConstraintLayout</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n  ></span>\n\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">LinearLayout</span>\n            <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n            <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"vertical\"</span>\n            <span class=\"hljs-attr\">android:padding</span>=<span class=\"hljs-string\">\"16dp\"</span>\n            <span class=\"hljs-attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n            <span class=\"hljs-attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n            <span class=\"hljs-attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n            <span class=\"hljs-attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n            <span class=\"hljs-attr\">tools:context</span>=<span class=\"hljs-string\">\".MainActivity\"</span>></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">EditText</span>\n                <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/urlInput\"</span>\n                <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n                <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n                <span class=\"hljs-attr\">android:textColor</span>=<span class=\"hljs-string\">\"@color/grey\"</span>\n                <span class=\"hljs-attr\">android:layout_marginTop</span>=<span class=\"hljs-string\">\"20dp\"</span>\n                <span class=\"hljs-attr\">android:hint</span>=<span class=\"hljs-string\">\"URL 입력\"</span> /></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n                <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/generateButton\"</span>\n                <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n                <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n                <span class=\"hljs-attr\">android:layout_marginTop</span>=<span class=\"hljs-string\">\"10dp\"</span>\n                <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"썸네일 생성\"</span> /></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ImageView</span>\n                <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/thumbnailImage\"</span>\n                <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span>\n                <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n                <span class=\"hljs-attr\">android:adjustViewBounds</span>=<span class=\"hljs-string\">\"true\"</span>\n                <span class=\"hljs-attr\">android:contentDescription</span>=<span class=\"hljs-string\">\"썸네일\"</span>\n                <span class=\"hljs-attr\">android:layout_marginTop</span>=<span class=\"hljs-string\">\"10dp\"</span>\n                <span class=\"hljs-attr\">android:scaleType</span>=<span class=\"hljs-string\">\"fitCenter\"</span>\n                <span class=\"hljs-attr\">android:visibility</span>=<span class=\"hljs-string\">\"visible\"</span> /></span>\n\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">com.google.android.material.progressindicator.CircularProgressIndicator</span>\n                <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/progress\"</span>\n                <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n                <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n                <span class=\"hljs-attr\">app:indicatorColor</span>=<span class=\"hljs-string\">\"@color/green\"</span>\n                <span class=\"hljs-attr\">android:indeterminate</span>=<span class=\"hljs-string\">\"true\"</span>\n                <span class=\"hljs-attr\">android:layout_gravity</span>=<span class=\"hljs-string\">\"center_horizontal\"</span>\n                <span class=\"hljs-attr\">android:visibility</span>=<span class=\"hljs-string\">\"gone\"</span>\n                /></span>\n\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">LinearLayout</span>></span>\n\n\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">androidx.constraintlayout.widget.ConstraintLayout</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">layout</span>></span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>기여하기</h1>\n<p>문제를 발견하거나 개선 제안이 있는 경우 문제를 열거나 풀 요청을 제출해주세요.</p>\n<h1>결과:</h1>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*606E5BSXDVXR6xuwV6sFSg.gif\" alt=\"Output\"></p>\n</body>\n</html>\n"},"__N_SSG":true}