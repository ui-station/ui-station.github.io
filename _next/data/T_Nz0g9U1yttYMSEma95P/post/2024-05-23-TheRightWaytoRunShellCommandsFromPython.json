{"pageProps":{"post":{"title":"파이썬에서 쉘 명령어를 올바르게 실행하는 방법","description":"","date":"2024-05-23 15:08","slug":"2024-05-23-TheRightWaytoRunShellCommandsFromPython","content":"\n<img src=\"/assets/img/2024-05-23-TheRightWaytoRunShellCommandsFromPython_0.png\" />\n\n파이썬은 모든 것을 자동화하는 데 인기 있는 선택지입니다. 이는 시스템 관리 작업을 자동화하거나 다른 프로그램을 실행하거나 운영 체제와 상호 작용하는 작업을 포함합니다. 그러나 파이썬에서 이를 수행하는 많은 방법이 있습니다. 대부분은 논란이 될 수 있는 방법입니다.\n\n그래서 이 기사에서는 다른 프로세스를 실행하는 데 사용할 수 있는 파이썬 옵션을 모두 살펴볼 것입니다. 나쁜 방법, 좋은 방법, 그리고 무엇보다도 올바른 방법을 중점적으로 살펴보겠습니다.\n\n# 옵션들\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬은 다른 프로그램과 상호 작용하는 내장 옵션이 너무 많습니다. 그 중에서도 어떤 것은 좋고 나쁨이 있지만 솔직히 말해서 나는 어느 것도 좋아하지 않아요. 각 옵션을 빠르게 살펴보고 특정 모듈을 사용해야 하는 시점(있는 경우)을 확인해 봅시다.\n\n# 내장 도구\n\n일반적인 지침은 다른 프로그램이나 OS 명령을 직접 호출하는 대신 기본 기능을 사용하는 것이어야 합니다. 그래서 먼저 파이썬의 기본 옵션을 살펴보겠습니다:\n\n- pathlib — 파일/디렉토리를 생성하거나 삭제해야 하거나 파일이 존재하는지 확인하거나 권한을 변경해야 할 때는 시스템 명령을 실행할 이유가 없습니다. 단순히 pathlib을 사용하세요. 필요한 모든 것이 포함되어 있습니다. pathlib를 사용하기 시작하면 glob이나 os.path와 같은 다른 파이썬 모듈을 잊을 수 있다는 것을 깨닫게 될 거예요.\n- tempfile — 비슷하게, 임시 파일이 필요할 때는 tempfile 모듈을 사용하세요. /tmp에 수동으로 접근할 필요가 없습니다.\n- shutil — pathlib은 파이썬에서 대부분의 파일 관련 요구 사항을 충족할 것입니다. 그러나 파일을 복사하거나 이동하거나 chown 또는 아카이브를 생성해야 하는 경우에는 shutil을 사용해야 합니다.\n- signal — 신호 핸들러를 사용해야 하는 경우에 필요합니다.\n- syslog — Unix syslog에 대한 인터페이스를 위해 사용합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 위에 제공된 내장 옵션들 중에서 아무것도 원하는 대로 만족스럽지 않다면, 그때만 운영 체제나 다른 프로그램과 직접 상호 작용하는 것이 의미가 있습니다.\n\n# OS 모듈\n\n최악의 옵션부터 시작해서 os 모듈은 운영 체제와 상호 작용하기 위한 저수준 함수를 제공하지만, 많은 함수들이 다른 모듈에서 대체되었습니다.\n\n단순히 다른 프로그램을 호출하고 싶다면 os.system 함수를 사용할 수 있지만, 사용하면 안 됩니다. 당신에게 예시를 들어 주고 싶지 않아요, 왜냐하면 그냥 사용하지 말아야 하기 때문입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nos는 처음 선택하긴 좋지 않지만, 유용하게 사용할 수 있는 몇 가지 함수가 있습니다:\n\n```js\nimport os\n\nprint(os.getenv('PATH'))\n# /home/martin/.local/bin:/usr/local/sbin:/usr/local/bin:...\nprint(os.uname())\n# posix.uname_result(sysname='Linux', nodename='...', release='...', version='...', machine='x86_64')\nprint(os.times())\n# posix.times_result(user=0.01, system=0.0, children_user=0.0, children_system=0.0, elapsed=1740.63)\nprint(os.cpu_count())\n# 16\nprint(os.getloadavg())\n# (2.021484375, 2.35595703125, 2.04052734375)\nold_umask = os.umask(0o022)\n# 파일 처리...\nos.umask(old_umask)  # 이전 umask로 되돌리기\n\n# 'random' 모듈의 의사 난수보다 더 좋은 난수가 필요한 경우에만 사용하세요:\nfrom base64 import b64encode\n\nrandom_bytes = os.urandom(64)\nprint(b64encode(random_bytes).decode('utf-8'))\n# C2F3kHjdzxcP7461ETRj/YZredUf+NH...hxz9MXXHJNfo5nXVH7e5olqLwhahqFCe/mzLQ==\n```\n\n위에 설명된 함수들 외에도, fd(파일 기술자), 파이프, PTY 열기, chroot, chmod, mkdir, kill, stat을 생성하는 함수들이 있지만, 더 좋은 옵션이 있기 때문에 사용을 권장하지 않습니다. 심지어 os.popen, os.spawn 또는 os.system을 사용하지 않도록 docs에 나온 부분에서 os를 subprocess 모듈로 대체하는 방법을 보여줍니다.\n\n파일/경로 작업에 os 모듈을 사용하지 말아주세요. os.path 및 기타 경로 관련 함수 대신 pathlib를 사용하는 방법에 대한 전체 섹션이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nos 모듈의 대부분의 남은 함수는 OS(또는 C 언어) API에 직접적으로 연결되어 있습니다. 예를 들어 os.dup, os.splice, os.mkfifo, os.execv, os.fork 등이 있습니다. 이러한 모든 함수를 사용해야 한다면 파이썬이 그 작업에 적합한 언어인지 확신하지 못합니다.\n\n# 서브프로세스 모듈\n\n파이썬에서 두 번째 — 약간 나은 — 옵션은 서브프로세스 모듈입니다. 아래는 서브프로세스 모듈의 예시입니다:\n\n```js\nimport subprocess\n\np = subprocess.run('ls -l', shell=True, check=True, capture_output=True, encoding='utf-8')\n\n# 'p'는 'CompletedProcess(args='ls -la', returncode=0)'의 인스턴스입니다\nprint(f'Command {p.args} exited with {p.returncode} code, output: \\n{p.stdout}')\n# Command ls -la exited with 0 code\n\n# total 36\n# drwxrwxr-x  2 martin martin  4096 apr 22 12:53 .\n# drwxrwxr-x 42 martin martin 20480 apr 22 11:01 ..\n# ...\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문서에서 설명된대로:\n\n대부분의 경우 subprocess.run을 사용하여 kwargs를 전달하여 해당 동작을 변경하는 것이 충분합니다. 예를 들어 shell=True를 사용하면 명령을 단일 문자열로 전달할 수 있고, check=True를 사용하면 종료 코드가 0이 아닌 경우 예외를 throw하고, capture_output=True를 사용하면 stdout 속성을 채울 수 있습니다.\n\nsubprocess.run()은 프로세스를 호출하는 권장되는 방법입니다. 이 모듈에서 다른 (불필요하고 사용되지 않는) 옵션도 있습니다: call, check_call, check_output, getstatusoutput, getoutput. 일반적으로 아래와 같이 run과 Popen만 사용해야 합니다:\n\n```js\nwith subprocess.Popen(['ls', '-la'], stdout=subprocess.PIPE, encoding='utf-8') as process:\n    # process.wait(timeout=5)  # 코드만 반환: 0\n    outs, errs = process.communicate(timeout=5)\n    print(f'Command {process.args}가 {process.returncode} 코드로 종료되었으며 출력: \\n{outs}')\n\n# 파이프\nimport shlex\nls = shlex.split('ls -la')\nawk = shlex.split(\"awk '{print $9}'\")\nls_process = subprocess.Popen(ls, stdout=subprocess.PIPE)\nawk_process = subprocess.Popen(awk, stdin=ls_process.stdout, stdout=subprocess.PIPE, encoding='utf-8')\n\nfor line in awk_process.stdout:\n    print(line.strip())\n    # .\n    # ..\n    # examples.py\n    # ...\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 첫 번째 예제는 이전에 소개된 subprocess.run의 Popen 등가물을 보여줍니다. 그러나 run이 제공하는 것보다 더 많은 유연성이 필요할 때만 Popen을 사용해야 합니다. 두 번째 예제에서는 한 명령의 출력을 다른 명령으로 파이핑하는 방법을 볼 수 있습니다. ls -la | awk `'print $9'`를 효과적으로 실행하는 방법입니다. 또한, shlex.split을 사용했는데, 이는 문자열을 토큰의 배열로 분할하는 편리한 함수로, shell=True를 사용하지 않고 Popen이나 run으로 전달할 수 있습니다.\n\nPopen을 사용할 때, 프로세스와 더 많은 상호작용을 위해 terminate(), kill() 및 send_signal()을 추가적으로 사용할 수 있습니다.\n\n이전 예제에서는 실제로 오류 처리를 거의 하지 않았지만, 다른 프로세스를 실행할 때 많은 문제가 발생할 수 있습니다. 간단한 스크립팅의 경우, check=True가 있으면 충분할 것으로 생각됩니다. 이는 호출 프로세스가 0이 아닌 반환 코드를 만나면 CalledProcessError가 발생하므로 프로그램이 빠르고 강하게 실패합니다. timeout 인수도 설정하면 TimeoutExpired 예외도 받을 수 있지만, 일반적으로 subproccess 모듈의 모든 예외는 SubprocessError에서 상속받습니다. 예외를 잡고 싶을 경우에는 SubprocessError를 감시하면 됩니다.\n\n# 올바른 방법\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n파이썬의 신조(격언)은 다음과 같습니다:\n\n하지만 지금까지 파이썬의 내장 모듈들로 많은 방법을 보았습니다. 하지만 그 중에 어떤 것이 옳은 것일까요? 내 의견으로는 그 중 하나도 아닙니다.\n\n파이썬의 표준 라이브러리를 좋아하지만, subprocess 모듈이 더 나은 \"배터리\" 중에 하나라고 생각합니다.\n\n만약 파이썬에서 다른 프로세스를 많이 조합하는 상황이라면, sh 라이브러리를 한 번 살펴보는 것을 권장합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```bash\n# https://pypi.org/project/sh/\n# pip install sh\nimport sh\n\n# $PATH에 있는 어떤 명령어든 실행...\nprint(sh.ls('-la'))\n\nls_cmd = sh.Command('ls')\nprint(ls_cmd('-la'))  # 명시적으로\n# total 36\n# drwxrwxr-x  2 martin martin  4096 apr  8 14:18 .\n# drwxrwxr-x 41 martin martin 20480 apr  7 15:23 ..\n# -rw-rw-r--  1 martin martin    30 apr  8 14:18 examples.py\n\n# 만약 PATH에 명령어가 없다면:\ncustom_cmd = sh.Command('/path/to/my/cmd')\ncustom_cmd('some', 'args')\n\nwith sh.contrib.sudo:\n    # 'sudo'를 사용하여 작업 수행...\n    ...\n```\n\nsh.some_command을 호출하면, sh 라이브러리가 해당 이름의 내장 셸 명령어나 $PATH에 있는 이진 파일을 찾습니다. 그런 명령어를 찾으면 그대로 실행됩니다. 명령어가 $PATH에 없는 경우에는 Command의 인스턴스를 생성하고 그렇게 호출할 수 있습니다. sudo를 사용해야 하는 경우에는 contrib 모듈의 sudo context manager를 사용할 수 있습니다. 너무 간단하고 직관적이죠?\n\n명령어의 결과를 파일에 쓰려면, 함수에 \\_out 인수를 제공하면 됩니다:\n\n```bash\nsh.ip.address(_out='/tmp/ipaddr')\n# 'ip address > /tmp/ipaddr'와 같습니다\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위에는 하위 명령을 호출하는 방법도 보여 줍니다. - 점을 사용하세요.\n\n마지막으로 \\_인 인수를 사용하여 파이프(|)를 사용할 수도 있습니다:\n\n```js\nprint(sh.awk('{print $9}', _인=sh.ls('-la'))\n# \"ls -la | awk '{print $9}'\"과 동일합니다\n\nprint(sh.wc('-l', _인=sh.ls('.', '-1'))\n# \"ls -1 | wc -l\"과 동일합니다\n```\n\n오류 처리에 대해선 ErrorReturnCode 또는 TimeoutException 예외를 감시하면 됩니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시도:\nsh.cat('/tmp/doesnt/exist')\nexcept sh.ErrorReturnCode as e:\nprint(f'Command {e.full_cmd} exited with {e.exit_code}') # Command /usr/bin/cat /tmp/doesnt/exist exited with 1\n\ncurl = sh.curl('https://httpbin.org/delay/5', \\_bg=True)\ntry:\ncurl.wait(timeout=3)\nexcept sh.TimeoutException:\nprint(\"Command timed out...\")\ncurl.kill()\n\n선택적으로, 만약 프로세스가 시그널에 의해 종료된다면, SignalException을 받게 될 거에요. 특정 시그널을 확인할 수 있는데 예를 들면 SignalException_SIGKILL(또는 \\_SIGTERM, \\_SIGSTOP 등)으로 확인할 수 있어요.\n\n이 라이브러리에는 내장된 로깅 지원도 있어요. 켜기만 하면 되는데요. 다음 코드가 도와줄 거에요:\n\nimport logging\n\n# 기본 로깅 켜기:\n\nlogging.basicConfig(level=logging.INFO)\nsh.ls('-la')\n\n# INFO:sh.command:<Command '/usr/bin/ls -la', pid 1631463>: process started\n\n# 로그 레벨 변경:\n\nlogging.getLogger('sh').setLevel(logging.DEBUG)\nsh.ls('-la')\n\n# INFO:sh.command:<Command '/usr/bin/ls -la', pid 1631661>: process started\n\n# DEBUG:sh.command:<Command '/usr/bin/ls -la'>: starting process\n\n# DEBUG:sh.command.process:<Command '/usr/bin/ls -la'>.<Process 1631666 ['/usr/bin/ls', '-la']>: started process\n\n# ...\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 예제들은 대부분의 사용 사례를 다룰 수 있지만, 더 고급/난해한 경우에는 라이브러리 문서의 튜토리얼이나 FAQ를 확인해보세요. 여기에는 추가적인 예제들이 있습니다.\n\n# 마지막으로\n\n다시 강조하고 싶은 점은 항상 시스템 명령어를 사용하는 대신 네이티브 Python 함수를 선호해야 한다는 것입니다. 또한 CLI 명령어를 직접 실행하는 대신 Kubernetes-client나 클라우드 제공업체의 SDK와 같은 서드파티 클라이언트 라이브러리를 사용하는 것을 항상 선호해야 합니다. 내 의견으로는, 쉘 대신 Python에 더 익숙하다면 시스템 관리자 배경에서 오더라도 적용됩니다. 마지막으로, Python은 쉘보다 훨씬 강력하고 견고한 언어이지만, 다른 프로그램/명령어를 너무 많이 연결해야 하는 경우에는 아마도 쉘 스크립트를 작성하는 것이 나을 수도 있습니다.\n\n```js\n연락하고 싶으세요?\n\n이 글은 원본이 martinheinz.dev에 게시되었습니다.\n```\n","ogImage":{"url":"/assets/img/2024-05-23-TheRightWaytoRunShellCommandsFromPython_0.png"},"coverImage":"/assets/img/2024-05-23-TheRightWaytoRunShellCommandsFromPython_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-23-TheRightWaytoRunShellCommandsFromPython_0.png\">\n<p>파이썬은 모든 것을 자동화하는 데 인기 있는 선택지입니다. 이는 시스템 관리 작업을 자동화하거나 다른 프로그램을 실행하거나 운영 체제와 상호 작용하는 작업을 포함합니다. 그러나 파이썬에서 이를 수행하는 많은 방법이 있습니다. 대부분은 논란이 될 수 있는 방법입니다.</p>\n<p>그래서 이 기사에서는 다른 프로세스를 실행하는 데 사용할 수 있는 파이썬 옵션을 모두 살펴볼 것입니다. 나쁜 방법, 좋은 방법, 그리고 무엇보다도 올바른 방법을 중점적으로 살펴보겠습니다.</p>\n<h1>옵션들</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬은 다른 프로그램과 상호 작용하는 내장 옵션이 너무 많습니다. 그 중에서도 어떤 것은 좋고 나쁨이 있지만 솔직히 말해서 나는 어느 것도 좋아하지 않아요. 각 옵션을 빠르게 살펴보고 특정 모듈을 사용해야 하는 시점(있는 경우)을 확인해 봅시다.</p>\n<h1>내장 도구</h1>\n<p>일반적인 지침은 다른 프로그램이나 OS 명령을 직접 호출하는 대신 기본 기능을 사용하는 것이어야 합니다. 그래서 먼저 파이썬의 기본 옵션을 살펴보겠습니다:</p>\n<ul>\n<li>pathlib — 파일/디렉토리를 생성하거나 삭제해야 하거나 파일이 존재하는지 확인하거나 권한을 변경해야 할 때는 시스템 명령을 실행할 이유가 없습니다. 단순히 pathlib을 사용하세요. 필요한 모든 것이 포함되어 있습니다. pathlib를 사용하기 시작하면 glob이나 os.path와 같은 다른 파이썬 모듈을 잊을 수 있다는 것을 깨닫게 될 거예요.</li>\n<li>tempfile — 비슷하게, 임시 파일이 필요할 때는 tempfile 모듈을 사용하세요. /tmp에 수동으로 접근할 필요가 없습니다.</li>\n<li>shutil — pathlib은 파이썬에서 대부분의 파일 관련 요구 사항을 충족할 것입니다. 그러나 파일을 복사하거나 이동하거나 chown 또는 아카이브를 생성해야 하는 경우에는 shutil을 사용해야 합니다.</li>\n<li>signal — 신호 핸들러를 사용해야 하는 경우에 필요합니다.</li>\n<li>syslog — Unix syslog에 대한 인터페이스를 위해 사용합니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>만약 위에 제공된 내장 옵션들 중에서 아무것도 원하는 대로 만족스럽지 않다면, 그때만 운영 체제나 다른 프로그램과 직접 상호 작용하는 것이 의미가 있습니다.</p>\n<h1>OS 모듈</h1>\n<p>최악의 옵션부터 시작해서 os 모듈은 운영 체제와 상호 작용하기 위한 저수준 함수를 제공하지만, 많은 함수들이 다른 모듈에서 대체되었습니다.</p>\n<p>단순히 다른 프로그램을 호출하고 싶다면 os.system 함수를 사용할 수 있지만, 사용하면 안 됩니다. 당신에게 예시를 들어 주고 싶지 않아요, 왜냐하면 그냥 사용하지 말아야 하기 때문입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>os는 처음 선택하긴 좋지 않지만, 유용하게 사용할 수 있는 몇 가지 함수가 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> os\n\n<span class=\"hljs-title function_\">print</span>(os.<span class=\"hljs-title function_\">getenv</span>(<span class=\"hljs-string\">'PATH'</span>))\n# /home/martin/.<span class=\"hljs-property\">local</span>/<span class=\"hljs-attr\">bin</span>:<span class=\"hljs-regexp\">/usr/</span>local/<span class=\"hljs-attr\">sbin</span>:<span class=\"hljs-regexp\">/usr/</span>local/<span class=\"hljs-attr\">bin</span>:...\n<span class=\"hljs-title function_\">print</span>(os.<span class=\"hljs-title function_\">uname</span>())\n# posix.<span class=\"hljs-title function_\">uname_result</span>(sysname=<span class=\"hljs-string\">'Linux'</span>, nodename=<span class=\"hljs-string\">'...'</span>, release=<span class=\"hljs-string\">'...'</span>, version=<span class=\"hljs-string\">'...'</span>, machine=<span class=\"hljs-string\">'x86_64'</span>)\n<span class=\"hljs-title function_\">print</span>(os.<span class=\"hljs-title function_\">times</span>())\n# posix.<span class=\"hljs-title function_\">times_result</span>(user=<span class=\"hljs-number\">0.01</span>, system=<span class=\"hljs-number\">0.0</span>, children_user=<span class=\"hljs-number\">0.0</span>, children_system=<span class=\"hljs-number\">0.0</span>, elapsed=<span class=\"hljs-number\">1740.63</span>)\n<span class=\"hljs-title function_\">print</span>(os.<span class=\"hljs-title function_\">cpu_count</span>())\n# <span class=\"hljs-number\">16</span>\n<span class=\"hljs-title function_\">print</span>(os.<span class=\"hljs-title function_\">getloadavg</span>())\n# (<span class=\"hljs-number\">2.021484375</span>, <span class=\"hljs-number\">2.35595703125</span>, <span class=\"hljs-number\">2.04052734375</span>)\nold_umask = os.<span class=\"hljs-title function_\">umask</span>(<span class=\"hljs-number\">0o022</span>)\n# 파일 처리...\nos.<span class=\"hljs-title function_\">umask</span>(old_umask)  # 이전 umask로 되돌리기\n\n# <span class=\"hljs-string\">'random'</span> 모듈의 의사 난수보다 더 좋은 난수가 필요한 경우에만 사용하세요:\n<span class=\"hljs-keyword\">from</span> base64 <span class=\"hljs-keyword\">import</span> b64encode\n\nrandom_bytes = os.<span class=\"hljs-title function_\">urandom</span>(<span class=\"hljs-number\">64</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">b64encode</span>(random_bytes).<span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-string\">'utf-8'</span>))\n# C2F3kHjdzxcP7461ETRj/<span class=\"hljs-title class_\">YZredUf</span>+<span class=\"hljs-variable constant_\">NH</span>...hxz9MXXHJNfo5nXVH7e5olqLwhahqFCe/mzLQ==\n</code></pre>\n<p>위에 설명된 함수들 외에도, fd(파일 기술자), 파이프, PTY 열기, chroot, chmod, mkdir, kill, stat을 생성하는 함수들이 있지만, 더 좋은 옵션이 있기 때문에 사용을 권장하지 않습니다. 심지어 os.popen, os.spawn 또는 os.system을 사용하지 않도록 docs에 나온 부분에서 os를 subprocess 모듈로 대체하는 방법을 보여줍니다.</p>\n<p>파일/경로 작업에 os 모듈을 사용하지 말아주세요. os.path 및 기타 경로 관련 함수 대신 pathlib를 사용하는 방법에 대한 전체 섹션이 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>os 모듈의 대부분의 남은 함수는 OS(또는 C 언어) API에 직접적으로 연결되어 있습니다. 예를 들어 os.dup, os.splice, os.mkfifo, os.execv, os.fork 등이 있습니다. 이러한 모든 함수를 사용해야 한다면 파이썬이 그 작업에 적합한 언어인지 확신하지 못합니다.</p>\n<h1>서브프로세스 모듈</h1>\n<p>파이썬에서 두 번째 — 약간 나은 — 옵션은 서브프로세스 모듈입니다. 아래는 서브프로세스 모듈의 예시입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> subprocess\n\np = subprocess.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-string\">'ls -l'</span>, shell=<span class=\"hljs-title class_\">True</span>, check=<span class=\"hljs-title class_\">True</span>, capture_output=<span class=\"hljs-title class_\">True</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>)\n\n# <span class=\"hljs-string\">'p'</span>는 <span class=\"hljs-string\">'CompletedProcess(args='</span>ls -la<span class=\"hljs-string\">', returncode=0)'</span>의 인스턴스입니다\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'Command {p.args} exited with {p.returncode} code, output: \\n{p.stdout}'</span>)\n# <span class=\"hljs-title class_\">Command</span> ls -la exited <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">0</span> code\n\n# total <span class=\"hljs-number\">36</span>\n# drwxrwxr-x  <span class=\"hljs-number\">2</span> martin martin  <span class=\"hljs-number\">4096</span> apr <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">53</span> .\n# drwxrwxr-x <span class=\"hljs-number\">42</span> martin martin <span class=\"hljs-number\">20480</span> apr <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">01</span> ..\n# ...\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>문서에서 설명된대로:</p>\n<p>대부분의 경우 subprocess.run을 사용하여 kwargs를 전달하여 해당 동작을 변경하는 것이 충분합니다. 예를 들어 shell=True를 사용하면 명령을 단일 문자열로 전달할 수 있고, check=True를 사용하면 종료 코드가 0이 아닌 경우 예외를 throw하고, capture_output=True를 사용하면 stdout 속성을 채울 수 있습니다.</p>\n<p>subprocess.run()은 프로세스를 호출하는 권장되는 방법입니다. 이 모듈에서 다른 (불필요하고 사용되지 않는) 옵션도 있습니다: call, check_call, check_output, getstatusoutput, getoutput. 일반적으로 아래와 같이 run과 Popen만 사용해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">with</span> subprocess.<span class=\"hljs-title class_\">Popen</span>([<span class=\"hljs-string\">'ls'</span>, <span class=\"hljs-string\">'-la'</span>], stdout=subprocess.<span class=\"hljs-property\">PIPE</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">process</span>:\n    # process.<span class=\"hljs-title function_\">wait</span>(timeout=<span class=\"hljs-number\">5</span>)  # 코드만 반환: <span class=\"hljs-number\">0</span>\n    outs, errs = process.<span class=\"hljs-title function_\">communicate</span>(timeout=<span class=\"hljs-number\">5</span>)\n    <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'Command {process.args}가 {process.returncode} 코드로 종료되었으며 출력: \\n{outs}'</span>)\n\n# 파이프\n<span class=\"hljs-keyword\">import</span> shlex\nls = shlex.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">'ls -la'</span>)\nawk = shlex.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">\"awk '{print $9}'\"</span>)\nls_process = subprocess.<span class=\"hljs-title class_\">Popen</span>(ls, stdout=subprocess.<span class=\"hljs-property\">PIPE</span>)\nawk_process = subprocess.<span class=\"hljs-title class_\">Popen</span>(awk, stdin=ls_process.<span class=\"hljs-property\">stdout</span>, stdout=subprocess.<span class=\"hljs-property\">PIPE</span>, encoding=<span class=\"hljs-string\">'utf-8'</span>)\n\n<span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> awk_process.<span class=\"hljs-property\">stdout</span>:\n    <span class=\"hljs-title function_\">print</span>(line.<span class=\"hljs-title function_\">strip</span>())\n    # .\n    # ..\n    # examples.<span class=\"hljs-property\">py</span>\n    # ...\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 첫 번째 예제는 이전에 소개된 subprocess.run의 Popen 등가물을 보여줍니다. 그러나 run이 제공하는 것보다 더 많은 유연성이 필요할 때만 Popen을 사용해야 합니다. 두 번째 예제에서는 한 명령의 출력을 다른 명령으로 파이핑하는 방법을 볼 수 있습니다. ls -la | awk <code>'print $9'</code>를 효과적으로 실행하는 방법입니다. 또한, shlex.split을 사용했는데, 이는 문자열을 토큰의 배열로 분할하는 편리한 함수로, shell=True를 사용하지 않고 Popen이나 run으로 전달할 수 있습니다.</p>\n<p>Popen을 사용할 때, 프로세스와 더 많은 상호작용을 위해 terminate(), kill() 및 send_signal()을 추가적으로 사용할 수 있습니다.</p>\n<p>이전 예제에서는 실제로 오류 처리를 거의 하지 않았지만, 다른 프로세스를 실행할 때 많은 문제가 발생할 수 있습니다. 간단한 스크립팅의 경우, check=True가 있으면 충분할 것으로 생각됩니다. 이는 호출 프로세스가 0이 아닌 반환 코드를 만나면 CalledProcessError가 발생하므로 프로그램이 빠르고 강하게 실패합니다. timeout 인수도 설정하면 TimeoutExpired 예외도 받을 수 있지만, 일반적으로 subproccess 모듈의 모든 예외는 SubprocessError에서 상속받습니다. 예외를 잡고 싶을 경우에는 SubprocessError를 감시하면 됩니다.</p>\n<h1>올바른 방법</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>파이썬의 신조(격언)은 다음과 같습니다:</p>\n<p>하지만 지금까지 파이썬의 내장 모듈들로 많은 방법을 보았습니다. 하지만 그 중에 어떤 것이 옳은 것일까요? 내 의견으로는 그 중 하나도 아닙니다.</p>\n<p>파이썬의 표준 라이브러리를 좋아하지만, subprocess 모듈이 더 나은 \"배터리\" 중에 하나라고 생각합니다.</p>\n<p>만약 파이썬에서 다른 프로세스를 많이 조합하는 상황이라면, sh 라이브러리를 한 번 살펴보는 것을 권장합니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># https://pypi.org/project/sh/</span>\n<span class=\"hljs-comment\"># pip install sh</span>\nimport sh\n\n<span class=\"hljs-comment\"># $PATH에 있는 어떤 명령어든 실행...</span>\n<span class=\"hljs-built_in\">print</span>(sh.ls(<span class=\"hljs-string\">'-la'</span>))\n\nls_cmd = sh.Command(<span class=\"hljs-string\">'ls'</span>)\n<span class=\"hljs-built_in\">print</span>(ls_cmd(<span class=\"hljs-string\">'-la'</span>))  <span class=\"hljs-comment\"># 명시적으로</span>\n<span class=\"hljs-comment\"># total 36</span>\n<span class=\"hljs-comment\"># drwxrwxr-x  2 martin martin  4096 apr  8 14:18 .</span>\n<span class=\"hljs-comment\"># drwxrwxr-x 41 martin martin 20480 apr  7 15:23 ..</span>\n<span class=\"hljs-comment\"># -rw-rw-r--  1 martin martin    30 apr  8 14:18 examples.py</span>\n\n<span class=\"hljs-comment\"># 만약 PATH에 명령어가 없다면:</span>\ncustom_cmd = sh.Command(<span class=\"hljs-string\">'/path/to/my/cmd'</span>)\ncustom_cmd(<span class=\"hljs-string\">'some'</span>, <span class=\"hljs-string\">'args'</span>)\n\nwith sh.contrib.sudo:\n    <span class=\"hljs-comment\"># 'sudo'를 사용하여 작업 수행...</span>\n    ...\n</code></pre>\n<p>sh.some_command을 호출하면, sh 라이브러리가 해당 이름의 내장 셸 명령어나 $PATH에 있는 이진 파일을 찾습니다. 그런 명령어를 찾으면 그대로 실행됩니다. 명령어가 $PATH에 없는 경우에는 Command의 인스턴스를 생성하고 그렇게 호출할 수 있습니다. sudo를 사용해야 하는 경우에는 contrib 모듈의 sudo context manager를 사용할 수 있습니다. 너무 간단하고 직관적이죠?</p>\n<p>명령어의 결과를 파일에 쓰려면, 함수에 _out 인수를 제공하면 됩니다:</p>\n<pre><code class=\"hljs language-bash\">sh.ip.address(_out=<span class=\"hljs-string\">'/tmp/ipaddr'</span>)\n<span class=\"hljs-comment\"># 'ip address > /tmp/ipaddr'와 같습니다</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위에는 하위 명령을 호출하는 방법도 보여 줍니다. - 점을 사용하세요.</p>\n<p>마지막으로 _인 인수를 사용하여 파이프(|)를 사용할 수도 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(sh.<span class=\"hljs-title function_\">awk</span>(<span class=\"hljs-string\">'{print $9}'</span>, _인=sh.<span class=\"hljs-title function_\">ls</span>(<span class=\"hljs-string\">'-la'</span>))\n# <span class=\"hljs-string\">\"ls -la | awk '{print $9}'\"</span>과 동일합니다\n\n<span class=\"hljs-title function_\">print</span>(sh.<span class=\"hljs-title function_\">wc</span>(<span class=\"hljs-string\">'-l'</span>, _인=sh.<span class=\"hljs-title function_\">ls</span>(<span class=\"hljs-string\">'.'</span>, <span class=\"hljs-string\">'-1'</span>))\n# <span class=\"hljs-string\">\"ls -1 | wc -l\"</span>과 동일합니다\n</code></pre>\n<p>오류 처리에 대해선 ErrorReturnCode 또는 TimeoutException 예외를 감시하면 됩니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>시도:\nsh.cat('/tmp/doesnt/exist')\nexcept sh.ErrorReturnCode as e:\nprint(f'Command {e.full_cmd} exited with {e.exit_code}') # Command /usr/bin/cat /tmp/doesnt/exist exited with 1</p>\n<p>curl = sh.curl('<a href=\"https://httpbin.org/delay/5\" rel=\"nofollow\" target=\"_blank\">https://httpbin.org/delay/5</a>', _bg=True)\ntry:\ncurl.wait(timeout=3)\nexcept sh.TimeoutException:\nprint(\"Command timed out...\")\ncurl.kill()</p>\n<p>선택적으로, 만약 프로세스가 시그널에 의해 종료된다면, SignalException을 받게 될 거에요. 특정 시그널을 확인할 수 있는데 예를 들면 SignalException_SIGKILL(또는 _SIGTERM, _SIGSTOP 등)으로 확인할 수 있어요.</p>\n<p>이 라이브러리에는 내장된 로깅 지원도 있어요. 켜기만 하면 되는데요. 다음 코드가 도와줄 거에요:</p>\n<p>import logging</p>\n<h1>기본 로깅 켜기:</h1>\n<p>logging.basicConfig(level=logging.INFO)\nsh.ls('-la')</p>\n<h1>INFO:sh.command:&#x3C;Command '/usr/bin/ls -la', pid 1631463>: process started</h1>\n<h1>로그 레벨 변경:</h1>\n<p>logging.getLogger('sh').setLevel(logging.DEBUG)\nsh.ls('-la')</p>\n<h1>INFO:sh.command:&#x3C;Command '/usr/bin/ls -la', pid 1631661>: process started</h1>\n<h1>DEBUG:sh.command:&#x3C;Command '/usr/bin/ls -la'>: starting process</h1>\n<h1>DEBUG:sh.command.process:&#x3C;Command '/usr/bin/ls -la'>.&#x3C;Process 1631666 ['/usr/bin/ls', '-la']>: started process</h1>\n<h1>...</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 예제들은 대부분의 사용 사례를 다룰 수 있지만, 더 고급/난해한 경우에는 라이브러리 문서의 튜토리얼이나 FAQ를 확인해보세요. 여기에는 추가적인 예제들이 있습니다.</p>\n<h1>마지막으로</h1>\n<p>다시 강조하고 싶은 점은 항상 시스템 명령어를 사용하는 대신 네이티브 Python 함수를 선호해야 한다는 것입니다. 또한 CLI 명령어를 직접 실행하는 대신 Kubernetes-client나 클라우드 제공업체의 SDK와 같은 서드파티 클라이언트 라이브러리를 사용하는 것을 항상 선호해야 합니다. 내 의견으로는, 쉘 대신 Python에 더 익숙하다면 시스템 관리자 배경에서 오더라도 적용됩니다. 마지막으로, Python은 쉘보다 훨씬 강력하고 견고한 언어이지만, 다른 프로그램/명령어를 너무 많이 연결해야 하는 경우에는 아마도 쉘 스크립트를 작성하는 것이 나을 수도 있습니다.</p>\n<pre><code class=\"hljs language-js\">연락하고 싶으세요?\n\n이 글은 원본이 martinheinz.<span class=\"hljs-property\">dev</span>에 게시되었습니다.\n</code></pre>\n</body>\n</html>\n"},"__N_SSG":true}