{"pageProps":{"post":{"title":"라라벨  플러터 플러터 앱을 라라벨 인증 API에 연결하기","description":"","date":"2024-05-27 16:35","slug":"2024-05-27-LaravelFlutterConnectingFlutterApptoLaravelAuthAPI","content":"\n![Screenshot](/assets/img/2024-05-27-LaravelFlutterConnectingFlutterApptoLaravelAuthAPI_0.png)\n\n플러터(Flutter)는 네이티브 컴파일된 애플리케이션을 구축하기 위한 인기 있는 오픈 소스 프레임워크로, 라라벨(Laravel)은 안전하고 확장 가능한 백엔드 솔루션을 제공하는 강력한 PHP 기반 웹 프레임워크입니다.\n\n이 글에서는 플러터 애플리케이션과 라라벨 REST API를 통합하는 과정을 탐색하고, 안전한 사용자 인증 구현을 포함할 것입니다.\n\n# [0] 인증 API가 포함된 라라벨 프로젝트 생성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이전 글을 따라하거나 빠른 시작 프로젝트를 다운로드하세요.\n\n# [1] Flutter 프로젝트 생성하기\n\n## [1.1] 기본 Flutter 프로젝트 생성\n\n...다음 기본 설정으로.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n(파일 → pubspec.yaml)\n\n```yaml\nversion: 1.0.0+1\nenvironment:\n  sdk: \">=2.18.2 <3.0.0\"\ndependencies:\n  flutter:\n    sdk: flutter\n  cupertino_icons: ^1.0.2\n  dio: ^4.0.0\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^2.0.0\nflutter:\n  uses-material-design: true\n```\n\n## [1.2] dio 패키지 추가\n\ndio.dart 패키지는 Dart용 인기있는 HTTP 클라이언트 라이브러리로, Flutter 애플리케이션에서 일반적으로 사용됩니다. 이는 HTTP 요청을 만들고 응답을 처리하며, 가로채기, 헤더 및 기타 고급 기능을 관리하기 위한 간단하고 직관적인 API를 제공하는 유연한 HTTP 클라이언트입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\npubspec.yaml 파일을 업데이트해주세요:\n\n```yaml\ndependencies:\n  dio: ^4.0.6\n```\n\n## [1.3] Auth 서비스 생성\n\n(파일 →lib/services/auth_service.dart)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport 'package:dio/dio.dart';\n\nclass AuthService {\n  final _dio = Dio(\n    BaseOptions(\n      baseUrl: 'https://demo.razzi.my/lara11breeze/public/api',\n      headers: {\n        'Accept': 'application/json',\n      },\n    ),\n  );\n\n  Future<Map<String, dynamic>> login(String email, String password) async {\n    final response = await _dio.post('/login', data: {\n      'email': email,\n      'password': password,\n    });\n    return response.data;\n  }\n\n  Future<Map<String, dynamic>> register(\n    String name,\n    String email,\n    String password,\n  ) async {\n    final response = await _dio.post('/register', data: {\n      'name': name,\n      'email': email,\n      'password': password,\n    });\n    return response.data;\n  }\n\n  Future<Map<String, dynamic>> logout() async {\n    final response = await _dio.post('/logout');\n    return response.data;\n  }\n}\n```\n\n코드 설명:\n\n1] dio/dio.dart 패키지 가져오기: 이 import 문은 dio.dart 패키지에서 HTTP 요청을 수행하는 데 사용되는 주요 클래스인 Dio 클래스를 가져옵니다.\n\n2] Dio 인스턴스 초기화: 클래스에는 Dio 인스턴스로 초기화된 private \\_dio 필드가 있습니다. BaseOptions 매개변수를 사용하여 HTTP 요청의 기본 URL 및 기본 헤더를 구성합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- baseUrl: `https://demo.razzi.my/lara11breeze/public/api`: 이 설정은 API의 기본 URL을 설정합니다. 이 경우에는 지정된 URL에서 호스팅되는 데모 라라벨 API입니다.\n- headers: ' `Accept`: `application/json` ': 이 설정은 기본 `Accept` 헤더를 `application/json`으로 설정합니다. 이는 API가 JSON 응답을 반환해야 함을 나타냅니다.\n\n3] 로그인 메서드: 로그인 메서드는 이메일과 비밀번호를 인수로 취하며, `_dio.post` 메서드를 사용하여 /login 엔드포인트로 POST 요청을 보냅니다. 요청 데이터는 데이터 매개변수를 통해 맵으로 전달됩니다.\n\n4] 등록 메서드: 등록 메서드는 이름, 이메일 및 비밀번호를 인수로 취하며, `_dio.post` 메서드를 사용하여 /register 엔드포인트로 POST 요청을 보냅니다. 요청 데이터는 데이터 매개변수를 통해 맵으로 전달됩니다.\n\n5] 로그아웃 메서드: 로그아웃 메서드는 `_dio.post` 메서드를 사용하여 /logout 엔드포인트로 POST 요청을 보냅니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## [1.4] 로그인 화면 생성\n\n(파일 → lib/login_screen.dart)\n\n```js\nimport 'package:flutter/material.dart';\nimport 'services/auth_service.dart';\n\nclass LoginScreen extends StatefulWidget {\n  @override\n  _LoginScreenState createState() => _LoginScreenState();\n}\n\nclass _LoginScreenState extends State<LoginScreen> {\n  final _authService = AuthService();\n  final _emailController = TextEditingController();\n  final _passwordController = TextEditingController();\n\n  Future<void> _login() async {\n    final email = _emailController.text;\n    final password = _passwordController.text;\n\n    try {\n      final response = await _authService.login(email, password);\n      // 응답 처리, 예를 들어 액세스 토큰 및 사용자 데이터 저장\n      print(response);\n    } catch (e) {\n      // 오류 처리\n      print(e);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Login'),\n      ),\n      body: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            TextField(\n              controller: _emailController,\n              decoration: InputDecoration(\n                hintText: 'Email',\n              ),\n            ),\n            SizedBox(height: 16.0),\n            TextField(\n              controller: _passwordController,\n              obscureText: true,\n              decoration: InputDecoration(\n                hintText: 'Password',\n              ),\n            ),\n            SizedBox(height: 16.0),\n            ElevatedButton(\n              onPressed: _login,\n              child: Text('Login'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n코드 설명:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n1] 의존성 가져오기: 이 코드는 핵심 Flutter UI 위젯을 제공하는 flutter/material.dart 패키지와 AuthService 클래스를 포함하는 auth_service.dart 파일을 가져옵니다.\n\n2] LoginScreen 위젯: LoginScreen은 StatefulWidget으로 정의되어 있어 변경 가능한 상태를 가질 수 있습니다.\n\n3] \\_LoginScreenState 클래스: \\_LoginScreenState 클래스는 LoginScreen 위젯의 내부 상태 클래스입니다. 다음을 포함합니다:\n\n- \\_authService: 로그인 작업을 수행하는 데 사용되는 AuthService 클래스의 인스턴스입니다.\n- \\_emailController 및 \\_passwordController: 이메일 및 비밀번호 필드의 입력 값을 관리하는 두 TextEditingController 인스턴스입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n4] \\_login 메서드: \\_login 메서드는 사용자가 \"로그인\" 버튼을 탭했을 때 호출되는 비동기 함수입니다. 다음을 수행합니다:\n\n- 각각의 TextEditingController 인스턴스에서 이메일과 비밀번호 값을 가져옵니다.\n- \\_authService 인스턴스의 login 메서드를 호출하여 이메일과 비밀번호를 전달합니다.\n- login 메서드로부터 예상되는 데이터 맵(예: 사용자의 액세스 토큰 및 기타 데이터)를 처리합니다.\n- 오류가 발생하면 콘솔에 오류를 출력합니다.\n\n5] build 메서드: build 메서드는 LoginScreen 위젯의 UI를 정의합니다. 앱 바와 다음을 포함하는 본문이 있는 Scaffold 위젯을 생성합니다:\n\n- 이메일과 비밀번호 입력을 위한 두 개의 TextField 위젯이 있으며, 각각의 TextEditingController 인스턴스가 연결되어 있습니다.\n- 텍스트 필드와 로그인 버튼 사이에 간격을 추가하기 위한 SizedBox가 있습니다.\n- 눌렸을 때 \\_login 메서드를 호출하는 ElevatedButton 위젯이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## [1.5] 메인 업데이트\n\n(파일 → lib/main.dart)\n\n```js\nimport 'package:flutter/material.dart';\nimport 'login_screen.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: '플러터 앱!!',\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.indigo),\n        useMaterial3: true,\n        brightness: Brightness.light,\n      ),\n      darkTheme: ThemeData(\n        colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.blue),\n        useMaterial3: true,\n        brightness: Brightness.dark,\n      ),\n      home: LoginScreen(),\n      debugShowCheckedModeBanner: false,\n    );\n  }\n}\n```\n\n이제 플러터 앱을 실행하면 MyHomePage 위젯이 아닌 LoginScreen이 표시됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n인증 기능을 더 강화하기 위해 더 많은 화면을 추가할 수 있습니다. 예를 들어, 등록 화면, 비밀번호 재설정 화면, 그리고 로그인에 성공한 후에 표시되는 홈 화면 등을 추가할 수 있습니다. 또한 사용자 인증 상태와 세션 관리를 다루는 로직을 추가할 수도 있습니다.\n\n# [2] 테스트\n\nFlutter 앱을 실행하세요.\n\n1] 로그인 화면에서 Laravel 사용자의 이메일과 비밀번호를 입력하세요. 로그인 버튼을 누르세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2] 로그를 확인하세요. 모든 것이 잘 작동되면 아래와 같이 응답이 출력됩니다. 응답에는 사용자 토큰이 포함되어 있는데, 이를 이후 요청에 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-LaravelFlutterConnectingFlutterApptoLaravelAuthAPI_1.png)\n\n# 다운로드\n\n[링크](https://archive.org/download/laravelprojects/lara11breeze_userapi_flutter_20240409.zip)\n","ogImage":{"url":"/assets/img/2024-05-27-LaravelFlutterConnectingFlutterApptoLaravelAuthAPI_0.png"},"coverImage":"/assets/img/2024-05-27-LaravelFlutterConnectingFlutterApptoLaravelAuthAPI_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-LaravelFlutterConnectingFlutterApptoLaravelAuthAPI_0.png\" alt=\"Screenshot\"></p>\n<p>플러터(Flutter)는 네이티브 컴파일된 애플리케이션을 구축하기 위한 인기 있는 오픈 소스 프레임워크로, 라라벨(Laravel)은 안전하고 확장 가능한 백엔드 솔루션을 제공하는 강력한 PHP 기반 웹 프레임워크입니다.</p>\n<p>이 글에서는 플러터 애플리케이션과 라라벨 REST API를 통합하는 과정을 탐색하고, 안전한 사용자 인증 구현을 포함할 것입니다.</p>\n<h1>[0] 인증 API가 포함된 라라벨 프로젝트 생성하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이전 글을 따라하거나 빠른 시작 프로젝트를 다운로드하세요.</p>\n<h1>[1] Flutter 프로젝트 생성하기</h1>\n<h2>[1.1] 기본 Flutter 프로젝트 생성</h2>\n<p>...다음 기본 설정으로.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>(파일 → pubspec.yaml)</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-string\">+1</span>\n<span class=\"hljs-attr\">environment:</span>\n  <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">\">=2.18.2 &#x3C;3.0.0\"</span>\n<span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">flutter:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n  <span class=\"hljs-attr\">cupertino_icons:</span> <span class=\"hljs-string\">^1.0.2</span>\n  <span class=\"hljs-attr\">dio:</span> <span class=\"hljs-string\">^4.0.0</span>\n<span class=\"hljs-attr\">dev_dependencies:</span>\n  <span class=\"hljs-attr\">flutter_test:</span>\n    <span class=\"hljs-attr\">sdk:</span> <span class=\"hljs-string\">flutter</span>\n  <span class=\"hljs-attr\">flutter_lints:</span> <span class=\"hljs-string\">^2.0.0</span>\n<span class=\"hljs-attr\">flutter:</span>\n  <span class=\"hljs-attr\">uses-material-design:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h2>[1.2] dio 패키지 추가</h2>\n<p>dio.dart 패키지는 Dart용 인기있는 HTTP 클라이언트 라이브러리로, Flutter 애플리케이션에서 일반적으로 사용됩니다. 이는 HTTP 요청을 만들고 응답을 처리하며, 가로채기, 헤더 및 기타 고급 기능을 관리하기 위한 간단하고 직관적인 API를 제공하는 유연한 HTTP 클라이언트입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>pubspec.yaml 파일을 업데이트해주세요:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">dependencies:</span>\n  <span class=\"hljs-attr\">dio:</span> <span class=\"hljs-string\">^4.0.6</span>\n</code></pre>\n<h2>[1.3] Auth 서비스 생성</h2>\n<p>(파일 →lib/services/auth_service.dart)</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:dio/dio.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthService</span> {\n  final _dio = <span class=\"hljs-title class_\">Dio</span>(\n    <span class=\"hljs-title class_\">BaseOptions</span>(\n      <span class=\"hljs-attr\">baseUrl</span>: <span class=\"hljs-string\">'https://demo.razzi.my/lara11breeze/public/api'</span>,\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'application/json'</span>,\n      },\n    ),\n  );\n\n  <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-title class_\">String</span> email, <span class=\"hljs-title class_\">String</span> password) <span class=\"hljs-keyword\">async</span> {\n    final response = <span class=\"hljs-keyword\">await</span> _dio.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/login'</span>, <span class=\"hljs-attr\">data</span>: {\n      <span class=\"hljs-string\">'email'</span>: email,\n      <span class=\"hljs-string\">'password'</span>: password,\n    });\n    <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n  }\n\n  <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>> <span class=\"hljs-title function_\">register</span>(\n    <span class=\"hljs-title class_\">String</span> name,\n    <span class=\"hljs-title class_\">String</span> email,\n    <span class=\"hljs-title class_\">String</span> password,\n  ) <span class=\"hljs-keyword\">async</span> {\n    final response = <span class=\"hljs-keyword\">await</span> _dio.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/register'</span>, <span class=\"hljs-attr\">data</span>: {\n      <span class=\"hljs-string\">'name'</span>: name,\n      <span class=\"hljs-string\">'email'</span>: email,\n      <span class=\"hljs-string\">'password'</span>: password,\n    });\n    <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n  }\n\n  <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-title class_\">Map</span>&#x3C;<span class=\"hljs-title class_\">String</span>, dynamic>> <span class=\"hljs-title function_\">logout</span>() <span class=\"hljs-keyword\">async</span> {\n    final response = <span class=\"hljs-keyword\">await</span> _dio.<span class=\"hljs-title function_\">post</span>(<span class=\"hljs-string\">'/logout'</span>);\n    <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n  }\n}\n</code></pre>\n<p>코드 설명:</p>\n<p>1] dio/dio.dart 패키지 가져오기: 이 import 문은 dio.dart 패키지에서 HTTP 요청을 수행하는 데 사용되는 주요 클래스인 Dio 클래스를 가져옵니다.</p>\n<p>2] Dio 인스턴스 초기화: 클래스에는 Dio 인스턴스로 초기화된 private _dio 필드가 있습니다. BaseOptions 매개변수를 사용하여 HTTP 요청의 기본 URL 및 기본 헤더를 구성합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>baseUrl: <code>https://demo.razzi.my/lara11breeze/public/api</code>: 이 설정은 API의 기본 URL을 설정합니다. 이 경우에는 지정된 URL에서 호스팅되는 데모 라라벨 API입니다.</li>\n<li>headers: ' <code>Accept</code>: <code>application/json</code> ': 이 설정은 기본 <code>Accept</code> 헤더를 <code>application/json</code>으로 설정합니다. 이는 API가 JSON 응답을 반환해야 함을 나타냅니다.</li>\n</ul>\n<p>3] 로그인 메서드: 로그인 메서드는 이메일과 비밀번호를 인수로 취하며, <code>_dio.post</code> 메서드를 사용하여 /login 엔드포인트로 POST 요청을 보냅니다. 요청 데이터는 데이터 매개변수를 통해 맵으로 전달됩니다.</p>\n<p>4] 등록 메서드: 등록 메서드는 이름, 이메일 및 비밀번호를 인수로 취하며, <code>_dio.post</code> 메서드를 사용하여 /register 엔드포인트로 POST 요청을 보냅니다. 요청 데이터는 데이터 매개변수를 통해 맵으로 전달됩니다.</p>\n<p>5] 로그아웃 메서드: 로그아웃 메서드는 <code>_dio.post</code> 메서드를 사용하여 /logout 엔드포인트로 POST 요청을 보냅니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>[1.4] 로그인 화면 생성</h2>\n<p>(파일 → lib/login_screen.dart)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'services/auth_service.dart'</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginScreen</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatefulWidget</span> {\n  @override\n  _LoginScreenState <span class=\"hljs-title function_\">createState</span>() => <span class=\"hljs-title function_\">_LoginScreenState</span>();\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">_LoginScreenState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span>&#x3C;<span class=\"hljs-title class_\">LoginScreen</span>> {\n  final _authService = <span class=\"hljs-title class_\">AuthService</span>();\n  final _emailController = <span class=\"hljs-title class_\">TextEditingController</span>();\n  final _passwordController = <span class=\"hljs-title class_\">TextEditingController</span>();\n\n  <span class=\"hljs-title class_\">Future</span>&#x3C;<span class=\"hljs-keyword\">void</span>> <span class=\"hljs-title function_\">_login</span>() <span class=\"hljs-keyword\">async</span> {\n    final email = _emailController.<span class=\"hljs-property\">text</span>;\n    final password = _passwordController.<span class=\"hljs-property\">text</span>;\n\n    <span class=\"hljs-keyword\">try</span> {\n      final response = <span class=\"hljs-keyword\">await</span> _authService.<span class=\"hljs-title function_\">login</span>(email, password);\n      <span class=\"hljs-comment\">// 응답 처리, 예를 들어 액세스 토큰 및 사용자 데이터 저장</span>\n      <span class=\"hljs-title function_\">print</span>(response);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-comment\">// 오류 처리</span>\n      <span class=\"hljs-title function_\">print</span>(e);\n    }\n  }\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Scaffold</span>(\n      <span class=\"hljs-attr\">appBar</span>: <span class=\"hljs-title class_\">AppBar</span>(\n        <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Login'</span>),\n      ),\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-title class_\">Padding</span>(\n        <span class=\"hljs-attr\">padding</span>: <span class=\"hljs-title class_\">EdgeInsets</span>.<span class=\"hljs-title function_\">all</span>(<span class=\"hljs-number\">16.0</span>),\n        <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Column</span>(\n          <span class=\"hljs-attr\">children</span>: [\n            <span class=\"hljs-title class_\">TextField</span>(\n              <span class=\"hljs-attr\">controller</span>: _emailController,\n              <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">InputDecoration</span>(\n                <span class=\"hljs-attr\">hintText</span>: <span class=\"hljs-string\">'Email'</span>,\n              ),\n            ),\n            <span class=\"hljs-title class_\">SizedBox</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">16.0</span>),\n            <span class=\"hljs-title class_\">TextField</span>(\n              <span class=\"hljs-attr\">controller</span>: _passwordController,\n              <span class=\"hljs-attr\">obscureText</span>: <span class=\"hljs-literal\">true</span>,\n              <span class=\"hljs-attr\">decoration</span>: <span class=\"hljs-title class_\">InputDecoration</span>(\n                <span class=\"hljs-attr\">hintText</span>: <span class=\"hljs-string\">'Password'</span>,\n              ),\n            ),\n            <span class=\"hljs-title class_\">SizedBox</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">16.0</span>),\n            <span class=\"hljs-title class_\">ElevatedButton</span>(\n              <span class=\"hljs-attr\">onPressed</span>: _login,\n              <span class=\"hljs-attr\">child</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">'Login'</span>),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>코드 설명:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>1] 의존성 가져오기: 이 코드는 핵심 Flutter UI 위젯을 제공하는 flutter/material.dart 패키지와 AuthService 클래스를 포함하는 auth_service.dart 파일을 가져옵니다.</p>\n<p>2] LoginScreen 위젯: LoginScreen은 StatefulWidget으로 정의되어 있어 변경 가능한 상태를 가질 수 있습니다.</p>\n<p>3] _LoginScreenState 클래스: _LoginScreenState 클래스는 LoginScreen 위젯의 내부 상태 클래스입니다. 다음을 포함합니다:</p>\n<ul>\n<li>_authService: 로그인 작업을 수행하는 데 사용되는 AuthService 클래스의 인스턴스입니다.</li>\n<li>_emailController 및 _passwordController: 이메일 및 비밀번호 필드의 입력 값을 관리하는 두 TextEditingController 인스턴스입니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>4] _login 메서드: _login 메서드는 사용자가 \"로그인\" 버튼을 탭했을 때 호출되는 비동기 함수입니다. 다음을 수행합니다:</p>\n<ul>\n<li>각각의 TextEditingController 인스턴스에서 이메일과 비밀번호 값을 가져옵니다.</li>\n<li>_authService 인스턴스의 login 메서드를 호출하여 이메일과 비밀번호를 전달합니다.</li>\n<li>login 메서드로부터 예상되는 데이터 맵(예: 사용자의 액세스 토큰 및 기타 데이터)를 처리합니다.</li>\n<li>오류가 발생하면 콘솔에 오류를 출력합니다.</li>\n</ul>\n<p>5] build 메서드: build 메서드는 LoginScreen 위젯의 UI를 정의합니다. 앱 바와 다음을 포함하는 본문이 있는 Scaffold 위젯을 생성합니다:</p>\n<ul>\n<li>이메일과 비밀번호 입력을 위한 두 개의 TextField 위젯이 있으며, 각각의 TextEditingController 인스턴스가 연결되어 있습니다.</li>\n<li>텍스트 필드와 로그인 버튼 사이에 간격을 추가하기 위한 SizedBox가 있습니다.</li>\n<li>눌렸을 때 _login 메서드를 호출하는 ElevatedButton 위젯이 있습니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>[1.5] 메인 업데이트</h2>\n<p>(파일 → lib/main.dart)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'package:flutter/material.dart'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'login_screen.dart'</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">runApp</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>());\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">StatelessWidget</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MyApp</span>({key}) : <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-attr\">key</span>: key);\n\n  @override\n  <span class=\"hljs-title class_\">Widget</span> <span class=\"hljs-title function_\">build</span>(<span class=\"hljs-params\">BuildContext context</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">MaterialApp</span>(\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'플러터 앱!!'</span>,\n      <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-title class_\">ThemeData</span>(\n        <span class=\"hljs-attr\">colorScheme</span>: <span class=\"hljs-title class_\">ColorScheme</span>.<span class=\"hljs-title function_\">fromSwatch</span>(<span class=\"hljs-attr\">primarySwatch</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">indigo</span>),\n        <span class=\"hljs-attr\">useMaterial3</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">brightness</span>: <span class=\"hljs-title class_\">Brightness</span>.<span class=\"hljs-property\">light</span>,\n      ),\n      <span class=\"hljs-attr\">darkTheme</span>: <span class=\"hljs-title class_\">ThemeData</span>(\n        <span class=\"hljs-attr\">colorScheme</span>: <span class=\"hljs-title class_\">ColorScheme</span>.<span class=\"hljs-title function_\">fromSwatch</span>(<span class=\"hljs-attr\">primarySwatch</span>: <span class=\"hljs-title class_\">Colors</span>.<span class=\"hljs-property\">blue</span>),\n        <span class=\"hljs-attr\">useMaterial3</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">brightness</span>: <span class=\"hljs-title class_\">Brightness</span>.<span class=\"hljs-property\">dark</span>,\n      ),\n      <span class=\"hljs-attr\">home</span>: <span class=\"hljs-title class_\">LoginScreen</span>(),\n      <span class=\"hljs-attr\">debugShowCheckedModeBanner</span>: <span class=\"hljs-literal\">false</span>,\n    );\n  }\n}\n</code></pre>\n<p>이제 플러터 앱을 실행하면 MyHomePage 위젯이 아닌 LoginScreen이 표시됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>인증 기능을 더 강화하기 위해 더 많은 화면을 추가할 수 있습니다. 예를 들어, 등록 화면, 비밀번호 재설정 화면, 그리고 로그인에 성공한 후에 표시되는 홈 화면 등을 추가할 수 있습니다. 또한 사용자 인증 상태와 세션 관리를 다루는 로직을 추가할 수도 있습니다.</p>\n<h1>[2] 테스트</h1>\n<p>Flutter 앱을 실행하세요.</p>\n<p>1] 로그인 화면에서 Laravel 사용자의 이메일과 비밀번호를 입력하세요. 로그인 버튼을 누르세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>2] 로그를 확인하세요. 모든 것이 잘 작동되면 아래와 같이 응답이 출력됩니다. 응답에는 사용자 토큰이 포함되어 있는데, 이를 이후 요청에 사용할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-27-LaravelFlutterConnectingFlutterApptoLaravelAuthAPI_1.png\" alt=\"이미지\"></p>\n<h1>다운로드</h1>\n<p><a href=\"https://archive.org/download/laravelprojects/lara11breeze_userapi_flutter_20240409.zip\" rel=\"nofollow\" target=\"_blank\">링크</a></p>\n</body>\n</html>\n"},"__N_SSG":true}