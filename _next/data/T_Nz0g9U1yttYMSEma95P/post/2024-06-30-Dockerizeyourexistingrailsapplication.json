{"pageProps":{"post":{"title":"기존 Rails 애플리케이션을 Dockerize 하는 방법","description":"","date":"2024-06-30 19:17","slug":"2024-06-30-Dockerizeyourexistingrailsapplication","content":"\n요즘에는 Docker가 응용 프로그램의 플랫폼 의존성 문제를 해결해 주었습니다. Docker는 응용 프로그램을 컨테이너화하여 다양한 플랫폼에서 실행할 수 있도록 도와줍니다.\n\n![이미지](/assets/img/2024-06-30-Dockerizeyourexistingrailsapplication_0.png)\n\n다양한 환경에서 레일즈 응용 프로그램을 실행할 때는 다른 환경 변수와 설정 파일이 필요할 수 있습니다. 이를 위해 다음과 같은 다양한 솔루션을 사용할 수 있습니다:\n\n- 환경별 암호화되지 않은 설정 파일: 우리는 테스트, 스테이징 또는 프로덕션과 같은 다른 환경에서 다른 값들을 제공하기 위해 각각 다른 환경별 파일을 사용할 수 있습니다.\n  참조: https://github.com/rubyconfig/config\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 환경별 암호화된 자격 증명 파일: Rails 5.2에서는 저장소 자체의 암호화된 형식으로 이러한 설정을 유지하는 데 도움이되는 암호화된 자격 증명의 개념이 추가되었습니다. 이러한 자격 증명은 마스터 키를 사용하여 서버에서 해독 할 수 있습니다.\n\n3. 심볼릭 링크: 가장 일반적인 접근 방식은 코드 기반이 아닌 서버 또는 로컬 머신에서 별도의 구성 파일을 직접 사용할 수 있도록하는 심볼릭 링크를 사용하는 것입니다.\n\n어플리케이션을 도커화 하는 것에는 많은 장점이 있습니다. 장점에 대해서 이야기하는 대신에 이제 도커화 과정으로 진행해 봅시다.\n\n새로운 도커화된 레일즈 어플리케이션을 만드는 것은 다양한 환경과 설정 및 변수와 함께 실행중인 기존 어플리케이션을 이주시키는 것보다 훨씬 쉽습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 블로그에서는 기존 레일즈 애플리케이션의 구성 파일을 도커화하는 방법에 중점을 둘 것입니다. 도커화의 어려운 부분은 기존 애플리케이션의 구성 파일을 관리하는 것입니다.\n\n아래는 애플리케이션을 도커화하는 일반적인 단계입니다:\n\n1. Docker 파일 추가하기:\n\n경로: rails_app/Dockerfile\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nFROM ruby:3.2.0\nRUN apt-get update -qq && apt-get install -y cron && apt-get clean autoclean && apt-get autoremove\nARG rails_env=development\nARG bundle_ruby_gem_cred\n# Send log to docker logs\nENV RAILS_LOG_TO_STDOUT=\"1\"\n# Set Root directory\nENV RAILS_ROOT /opt/apps/rails_app\nENV RAILS_ENV=$rails_env\nRUN mkdir -p $RAILS_ROOT\nWORKDIR $RAILS_ROOT\nCOPY Gemfile $RAILS_ROOT/Gemfile\nCOPY Gemfile.lock $RAILS_ROOT/Gemfile.lock\nRUN bundle install\nADD . $RAILS_ROOT\nEXPOSE 3000\n# Set the entrypoint\nCOPY web-entrypoint.sh /usr/bin/\nRUN chmod +x /usr/bin/web-entrypoint.sh\nENTRYPOINT [\"web-entrypoint.sh\"]\n```\n\n위 파일은 레일즈 애플리케이션을 위한 기본 도커 파일입니다. 필요한 종속성을 설치하고 환경 변수를 설정할 것입니다.\nweb-entrypoint.sh 엔트리포인트 스크립트는 컨테이너가 시작될 때 실행되며 일반적으로 레일즈 서버를 시작하거나 기타 초기화 작업을 수행합니다.\n\n경로: rails_app/web-entrypoint.sh\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n#!/bin/bash\n# 데이터베이스 마이그레이션\nbundle exec rake db:migrate\n# 웹 서버 실행\nrm -f tmp/pids/server.pid\nbundle exec rails server -b 0.0.0.0 -p 3000\n```\n\n참고: 필요한 경우 cron, sidekiq 및 기타 서비스를 여기에서 처리할 수 있습니다.\n\n애플리케이션이 도커화되었지만, 다음 도전 과제는 database.yml, redis.yml 등의 설정 파일을 처리하는 것입니다.\n\n다음과 같은 방법으로 구성 파일을 처리할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 1. 환경별 자격 증명 파일 사용하기:\n\n이것은 가장 권장되고 안전한 방법입니다. 도커 이미지는 불변하기 때문에 이미지 내의 모든 내용을 유지해야 합니다.\n\n환경별 자격 증명 파일에 모든 설정 변수와 자격 증명을 커밋할 수 있으며 이미지 빌드 중에 해당 마스터 키를 제공할 수 있습니다.\n\n다음은 구성 파일 조각 중 하나입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n경로: rails_app/config/database.yml\n\n```yaml\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  pool: 100\n  port: 5432\n  host: <%= Rails.application.credentials.database.host %>\n  database: <%= Rails.application.credentials.database.name %>\n  username: <%= Rails.application.credentials.database.username %>\n  password: <%= Rails.application.credentials.database.password %>\n\ndevelopment:\n  <<: *default\n\ntest:\n  <<: *default\n\nstaging:\n  <<: *default\n\nproduction:\n  <<: *defaultadapter: postgresql\n```\n\n모든 환경에 대해 위와 같은 테이블을 Markdown 형식으로 바꿀 수 있어요.\n\n위 환경에 대한 서로 다른 자격 증명 파일을 생성하는 방법은 아래 명령어를 사용하세요:\n\nEDITOR=vim rails credentials:edit -e development|test|production|staging\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 명령어는 다음 디렉터리에 파일을 생성합니다:\n\n경로: rails_app/config/credentials\n\n```js\ntest.yml.enc;\ntest.key;\n\ndevelopment.yml.enc;\ndevelopment.key;\n\nprodution.yml.enc;\nprodution.key;\n\nstaging.yml.enc;\nstaging.key;\n```\n\n우리는 yml.enc 파일을 레포지토리에 커밋할 수 있고, 빌드 프로세스 중에 key는 github 자격증명을 사용하여 제공할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\necho -n ${ secrets.RAILS_APP_PRODUCTION_KEY } > ‘config/credentials/production.key’\n```\n\nRAILS_APP_PRODUCTION_KEY은 github 시크릿에서 유지되는 키의 실제 값을 포함합니다.\n\n## 장점:\n\na. 어떠한 원격 서버에도 어플리케이션을 머신 의존성 없이 배포할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nb. 키를 제외한 모든 것이 저장소 자체에 있습니다.\n\n## 단점:\n\na. 여러 설정 파일이 있는 경우 설정 변수를 자격 증명 파일 참조로 대체하려면 redis.yml에 언급된 대로 변경을 애플리케이션 전체에 적용해야 합니다.\n\n## 2. 심볼릭 링크를 사용:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-30-Dockerizeyourexistingrailsapplication_1.png)\n\n도커 컨테이너의 설정 파일에 대한 심볼릭 링크를 호스트 머신에 생성하여, 호스트 머신에서 설정 파일을 변경하면 도커 컨테이너에 반영될 수 있습니다.\n\ndatabase.yml 파일을 예시로 들어보겠습니다:\n\n2.1. 호스트 머신의 특정 디렉토리에 database.yml 파일의 실제 내용을 넣어주세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n경로: /opt/rails_app_configs/database.yml\n\n```js\nqa: adapter: postgresql;\nencoding: unicode;\npool: 100;\nport: 5432;\nhost: abc;\ndatabase: abc;\nusername: abc;\npassword: abc;\n```\n\n2.2. 이제 database.yml 파일을 아래 컨테이너 경로에 심볼릭 링크로 커밋하세요:\n\n파일: database.yml\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n/opt/configs/database.yml\n```\n\n2.3. 배포 시 호스트 머신에서 실제 파일을 database.yml에 지정된 컨테이너의 특정 경로로 복사하세요.\n\n```js\ndocker container run -d — rm — name hello-rails-app -e RAILS_ENV=qa -v /opt/rails_app_configs:/opt/configs -p 3000:3000 rails_app:latest\n```\n\n이렇게 하면 호스트 머신에서 파일이 컨테이너로 복사되어 응용 프로그램이 구성 파일에 액세스할 수 있게 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 장점:\n\na. 호스트 머신의 구성 파일을 변경하면 컨테이너에 반영됩니다.\n\nb. 구성 파일이 변경되어도 새 이미지를 빌드할 필요가 없습니다.\n\nc. 설정 변수를 자격 증명 파일 참조로 대체하려면 애플리케이션 코드를 변경할 필요가 없습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Cons:\n\na. 호스트 머신에서 설정 파일을 유지하고 있어야 합니다.\n\nb. 설정 파일은 호스트 머신에서 읽을 수 있습니다.\n\nc. 새로운 머신에서 컨테이너를 실행할 때마다 파일을 호스트 머신에 복사해야 합니다. 각 머신마다 파일을 복사하는 추가 노력을 피하기 위해 nfs 서버를 사용하여 호스트 머신에 설정 파일을 마운트하고 모든 머신에서 사용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 내용이 기존 레일즈 애플리케이션을 도커화하는 데 도움이 되길 바랍니다. 궁금한 사항이나 제안 사항이 있으시면 아래에 자유롭게 댓글을 남겨주세요.\n\n저는 동일한 주제로 GitHub 액션 및 배포용 워크플로우를 이어서 진행할 예정입니다.\n\n읽어주셔서 감사합니다.\n","ogImage":{"url":"/assets/img/2024-06-30-Dockerizeyourexistingrailsapplication_0.png"},"coverImage":"/assets/img/2024-06-30-Dockerizeyourexistingrailsapplication_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>요즘에는 Docker가 응용 프로그램의 플랫폼 의존성 문제를 해결해 주었습니다. Docker는 응용 프로그램을 컨테이너화하여 다양한 플랫폼에서 실행할 수 있도록 도와줍니다.</p>\n<p><img src=\"/assets/img/2024-06-30-Dockerizeyourexistingrailsapplication_0.png\" alt=\"이미지\"></p>\n<p>다양한 환경에서 레일즈 응용 프로그램을 실행할 때는 다른 환경 변수와 설정 파일이 필요할 수 있습니다. 이를 위해 다음과 같은 다양한 솔루션을 사용할 수 있습니다:</p>\n<ul>\n<li>환경별 암호화되지 않은 설정 파일: 우리는 테스트, 스테이징 또는 프로덕션과 같은 다른 환경에서 다른 값들을 제공하기 위해 각각 다른 환경별 파일을 사용할 수 있습니다.\n참조: <a href=\"https://github.com/rubyconfig/config\" rel=\"nofollow\" target=\"_blank\">https://github.com/rubyconfig/config</a></li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol start=\"2\">\n<li>\n<p>환경별 암호화된 자격 증명 파일: Rails 5.2에서는 저장소 자체의 암호화된 형식으로 이러한 설정을 유지하는 데 도움이되는 암호화된 자격 증명의 개념이 추가되었습니다. 이러한 자격 증명은 마스터 키를 사용하여 서버에서 해독 할 수 있습니다.</p>\n</li>\n<li>\n<p>심볼릭 링크: 가장 일반적인 접근 방식은 코드 기반이 아닌 서버 또는 로컬 머신에서 별도의 구성 파일을 직접 사용할 수 있도록하는 심볼릭 링크를 사용하는 것입니다.</p>\n</li>\n</ol>\n<p>어플리케이션을 도커화 하는 것에는 많은 장점이 있습니다. 장점에 대해서 이야기하는 대신에 이제 도커화 과정으로 진행해 봅시다.</p>\n<p>새로운 도커화된 레일즈 어플리케이션을 만드는 것은 다양한 환경과 설정 및 변수와 함께 실행중인 기존 어플리케이션을 이주시키는 것보다 훨씬 쉽습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 블로그에서는 기존 레일즈 애플리케이션의 구성 파일을 도커화하는 방법에 중점을 둘 것입니다. 도커화의 어려운 부분은 기존 애플리케이션의 구성 파일을 관리하는 것입니다.</p>\n<p>아래는 애플리케이션을 도커화하는 일반적인 단계입니다:</p>\n<ol>\n<li>Docker 파일 추가하기:</li>\n</ol>\n<p>경로: rails_app/Dockerfile</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">ruby</span>:<span class=\"hljs-number\">3.2</span><span class=\"hljs-number\">.0</span>\n<span class=\"hljs-variable constant_\">RUN</span> apt-get update -qq &#x26;&#x26; apt-get install -y cron &#x26;&#x26; apt-get clean autoclean &#x26;&#x26; apt-get autoremove\n<span class=\"hljs-variable constant_\">ARG</span> rails_env=development\n<span class=\"hljs-variable constant_\">ARG</span> bundle_ruby_gem_cred\n# <span class=\"hljs-title class_\">Send</span> log to docker logs\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">RAILS_LOG_TO_STDOUT</span>=<span class=\"hljs-string\">\"1\"</span>\n# <span class=\"hljs-title class_\">Set</span> <span class=\"hljs-title class_\">Root</span> directory\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">RAILS_ROOT</span> /opt/apps/rails_app\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">RAILS_ENV</span>=$rails_env\n<span class=\"hljs-variable constant_\">RUN</span> mkdir -p $RAILS_ROOT\n<span class=\"hljs-variable constant_\">WORKDIR</span> $RAILS_ROOT\n<span class=\"hljs-variable constant_\">COPY</span> <span class=\"hljs-title class_\">Gemfile</span> $RAILS_ROOT/<span class=\"hljs-title class_\">Gemfile</span>\n<span class=\"hljs-variable constant_\">COPY</span> <span class=\"hljs-title class_\">Gemfile</span>.<span class=\"hljs-property\">lock</span> $RAILS_ROOT/<span class=\"hljs-title class_\">Gemfile</span>.<span class=\"hljs-property\">lock</span>\n<span class=\"hljs-variable constant_\">RUN</span> bundle install\n<span class=\"hljs-variable constant_\">ADD</span> . $RAILS_ROOT\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n# <span class=\"hljs-title class_\">Set</span> the entrypoint\n<span class=\"hljs-variable constant_\">COPY</span> web-entrypoint.<span class=\"hljs-property\">sh</span> /usr/bin/\n<span class=\"hljs-variable constant_\">RUN</span> chmod +x /usr/bin/web-entrypoint.<span class=\"hljs-property\">sh</span>\n<span class=\"hljs-variable constant_\">ENTRYPOINT</span> [<span class=\"hljs-string\">\"web-entrypoint.sh\"</span>]\n</code></pre>\n<p>위 파일은 레일즈 애플리케이션을 위한 기본 도커 파일입니다. 필요한 종속성을 설치하고 환경 변수를 설정할 것입니다.\nweb-entrypoint.sh 엔트리포인트 스크립트는 컨테이너가 시작될 때 실행되며 일반적으로 레일즈 서버를 시작하거나 기타 초기화 작업을 수행합니다.</p>\n<p>경로: rails_app/web-entrypoint.sh</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">#!<span class=\"hljs-regexp\">/bin/</span>bash\n# 데이터베이스 마이그레이션\nbundle exec rake <span class=\"hljs-attr\">db</span>:migrate\n# 웹 서버 실행\nrm -f tmp/pids/server.<span class=\"hljs-property\">pid</span>\nbundle exec rails server -b <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span> -p <span class=\"hljs-number\">3000</span>\n</code></pre>\n<p>참고: 필요한 경우 cron, sidekiq 및 기타 서비스를 여기에서 처리할 수 있습니다.</p>\n<p>애플리케이션이 도커화되었지만, 다음 도전 과제는 database.yml, redis.yml 등의 설정 파일을 처리하는 것입니다.</p>\n<p>다음과 같은 방법으로 구성 파일을 처리할 수 있습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>1. 환경별 자격 증명 파일 사용하기:</h2>\n<p>이것은 가장 권장되고 안전한 방법입니다. 도커 이미지는 불변하기 때문에 이미지 내의 모든 내용을 유지해야 합니다.</p>\n<p>환경별 자격 증명 파일에 모든 설정 변수와 자격 증명을 커밋할 수 있으며 이미지 빌드 중에 해당 마스터 키를 제공할 수 있습니다.</p>\n<p>다음은 구성 파일 조각 중 하나입니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>경로: rails_app/config/database.yml</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">default:</span> <span class=\"hljs-meta\">&#x26;default</span>\n  <span class=\"hljs-attr\">adapter:</span> <span class=\"hljs-string\">postgresql</span>\n  <span class=\"hljs-attr\">encoding:</span> <span class=\"hljs-string\">unicode</span>\n  <span class=\"hljs-attr\">pool:</span> <span class=\"hljs-number\">100</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">5432</span>\n  <span class=\"hljs-attr\">host:</span> &#x3C;%=<span class=\"ruby\"> <span class=\"hljs-title class_\">Rails</span>.application.credentials.database.host </span>%>\n  <span class=\"hljs-attr\">database:</span> &#x3C;%=<span class=\"ruby\"> <span class=\"hljs-title class_\">Rails</span>.application.credentials.database.name </span>%>\n  <span class=\"hljs-attr\">username:</span> &#x3C;%=<span class=\"ruby\"> <span class=\"hljs-title class_\">Rails</span>.application.credentials.database.username </span>%>\n  <span class=\"hljs-attr\">password:</span> &#x3C;%=<span class=\"ruby\"> <span class=\"hljs-title class_\">Rails</span>.application.credentials.database.password </span>%>\n\n<span class=\"hljs-attr\">development:</span>\n  <span class=\"hljs-string\">&#x3C;&#x3C;:</span> <span class=\"hljs-meta\">*default</span>\n\n<span class=\"hljs-attr\">test:</span>\n  <span class=\"hljs-string\">&#x3C;&#x3C;:</span> <span class=\"hljs-meta\">*default</span>\n\n<span class=\"hljs-attr\">staging:</span>\n  <span class=\"hljs-string\">&#x3C;&#x3C;:</span> <span class=\"hljs-meta\">*default</span>\n\n<span class=\"hljs-attr\">production:</span>\n  <span class=\"hljs-string\">&#x3C;&#x3C;:</span> <span class=\"hljs-string\">*defaultadapter:</span> <span class=\"hljs-string\">postgresql</span>\n</code></pre>\n<p>모든 환경에 대해 위와 같은 테이블을 Markdown 형식으로 바꿀 수 있어요.</p>\n<p>위 환경에 대한 서로 다른 자격 증명 파일을 생성하는 방법은 아래 명령어를 사용하세요:</p>\n<p>EDITOR=vim rails credentials:edit -e development|test|production|staging</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 명령어는 다음 디렉터리에 파일을 생성합니다:</p>\n<p>경로: rails_app/config/credentials</p>\n<pre><code class=\"hljs language-js\">test.<span class=\"hljs-property\">yml</span>.<span class=\"hljs-property\">enc</span>;\ntest.<span class=\"hljs-property\">key</span>;\n\ndevelopment.<span class=\"hljs-property\">yml</span>.<span class=\"hljs-property\">enc</span>;\ndevelopment.<span class=\"hljs-property\">key</span>;\n\nprodution.<span class=\"hljs-property\">yml</span>.<span class=\"hljs-property\">enc</span>;\nprodution.<span class=\"hljs-property\">key</span>;\n\nstaging.<span class=\"hljs-property\">yml</span>.<span class=\"hljs-property\">enc</span>;\nstaging.<span class=\"hljs-property\">key</span>;\n</code></pre>\n<p>우리는 yml.enc 파일을 레포지토리에 커밋할 수 있고, 빌드 프로세스 중에 key는 github 자격증명을 사용하여 제공할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">echo -n ${ secrets.<span class=\"hljs-property\">RAILS_APP_PRODUCTION_KEY</span> } > ‘config/credentials/production.<span class=\"hljs-property\">key</span>’\n</code></pre>\n<p>RAILS_APP_PRODUCTION_KEY은 github 시크릿에서 유지되는 키의 실제 값을 포함합니다.</p>\n<h2>장점:</h2>\n<p>a. 어떠한 원격 서버에도 어플리케이션을 머신 의존성 없이 배포할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>b. 키를 제외한 모든 것이 저장소 자체에 있습니다.</p>\n<h2>단점:</h2>\n<p>a. 여러 설정 파일이 있는 경우 설정 변수를 자격 증명 파일 참조로 대체하려면 redis.yml에 언급된 대로 변경을 애플리케이션 전체에 적용해야 합니다.</p>\n<h2>2. 심볼릭 링크를 사용:</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-30-Dockerizeyourexistingrailsapplication_1.png\" alt=\"이미지\"></p>\n<p>도커 컨테이너의 설정 파일에 대한 심볼릭 링크를 호스트 머신에 생성하여, 호스트 머신에서 설정 파일을 변경하면 도커 컨테이너에 반영될 수 있습니다.</p>\n<p>database.yml 파일을 예시로 들어보겠습니다:</p>\n<p>2.1. 호스트 머신의 특정 디렉토리에 database.yml 파일의 실제 내용을 넣어주세요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>경로: /opt/rails_app_configs/database.yml</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">qa</span>: <span class=\"hljs-attr\">adapter</span>: postgresql;\n<span class=\"hljs-attr\">encoding</span>: unicode;\n<span class=\"hljs-attr\">pool</span>: <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">5432</span>;\n<span class=\"hljs-attr\">host</span>: abc;\n<span class=\"hljs-attr\">database</span>: abc;\n<span class=\"hljs-attr\">username</span>: abc;\n<span class=\"hljs-attr\">password</span>: abc;\n</code></pre>\n<p>2.2. 이제 database.yml 파일을 아래 컨테이너 경로에 심볼릭 링크로 커밋하세요:</p>\n<p>파일: database.yml</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">/opt/configs/database.<span class=\"hljs-property\">yml</span>\n</code></pre>\n<p>2.3. 배포 시 호스트 머신에서 실제 파일을 database.yml에 지정된 컨테이너의 특정 경로로 복사하세요.</p>\n<pre><code class=\"hljs language-js\">docker container run -d — rm — name hello-rails-app -e <span class=\"hljs-variable constant_\">RAILS_ENV</span>=qa -v /opt/<span class=\"hljs-attr\">rails_app_configs</span>:<span class=\"hljs-regexp\">/opt/</span>configs -p <span class=\"hljs-number\">3000</span>:<span class=\"hljs-number\">3000</span> <span class=\"hljs-attr\">rails_app</span>:latest\n</code></pre>\n<p>이렇게 하면 호스트 머신에서 파일이 컨테이너로 복사되어 응용 프로그램이 구성 파일에 액세스할 수 있게 됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>장점:</h2>\n<p>a. 호스트 머신의 구성 파일을 변경하면 컨테이너에 반영됩니다.</p>\n<p>b. 구성 파일이 변경되어도 새 이미지를 빌드할 필요가 없습니다.</p>\n<p>c. 설정 변수를 자격 증명 파일 참조로 대체하려면 애플리케이션 코드를 변경할 필요가 없습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>Cons:</h2>\n<p>a. 호스트 머신에서 설정 파일을 유지하고 있어야 합니다.</p>\n<p>b. 설정 파일은 호스트 머신에서 읽을 수 있습니다.</p>\n<p>c. 새로운 머신에서 컨테이너를 실행할 때마다 파일을 호스트 머신에 복사해야 합니다. 각 머신마다 파일을 복사하는 추가 노력을 피하기 위해 nfs 서버를 사용하여 호스트 머신에 설정 파일을 마운트하고 모든 머신에서 사용할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 내용이 기존 레일즈 애플리케이션을 도커화하는 데 도움이 되길 바랍니다. 궁금한 사항이나 제안 사항이 있으시면 아래에 자유롭게 댓글을 남겨주세요.</p>\n<p>저는 동일한 주제로 GitHub 액션 및 배포용 워크플로우를 이어서 진행할 예정입니다.</p>\n<p>읽어주셔서 감사합니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}