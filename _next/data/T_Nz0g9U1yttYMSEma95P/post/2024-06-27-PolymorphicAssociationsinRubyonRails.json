{"pageProps":{"post":{"title":"Ruby on Rails에서 다형성 연관 관계를 사용하는 방법","description":"","date":"2024-06-27 19:17","slug":"2024-06-27-PolymorphicAssociationsinRubyonRails","content":"\n\n폴리모픽 연관은 루비 온 레일즈의 강력한 기능 중 하나로, 한 모델이 하나 이상의 다른 모델에 단일 연관을 사용하여 속할 수 있게 합니다. 이는 단일 모델이 다른 여러 모델과 폴리모픽 인터페이스를 통해 연관될 수 있음을 의미합니다. 이 기능은 특히 한 모델이 여러 유형의 엔터티에 속할 수 있는 경우에 유용합니다.\n\n## 폴리모픽 연관이란 무엇인가요?\n\n폴리모픽 연관은 단일 연관을 사용하여 모델이 여러 다른 모델을 참조할 수 있게 합니다. 예를 들어, Comment 모델이 Post 모델 또는 Photo 모델에 속할 수 있는 시나리오를 고려해보세요. 각 모델에 대해 별도의 연관을 생성하는 대신, 폴리모픽 연관을 사용하여 이를 달성할 수 있습니다.\n\n다음은 루비 온 레일즈에서 폴리모픽 연관을 정의하는 방법입니다:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 모델 생성하기\n\n먼저 필요한 모델을 생성하세요. 이 예시에서는 Post, Photo, 그리고 Comment 모델을 만들겠습니다.\n\n```js\nrails generate model Post title:string body:text\nrails generate model Photo title:string url:string\nrails generate model Comment body:text commentable:references{polymorphic}\n```\n\n2. 관계 정의하기\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음에는 모델에서 연관 관계를 정의하세요. Comment 모델에서는 commentable이라는 다형 엔티티에 속한다고 지정하십시오.\n\n```ruby\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :commentable, polymorphic: true\nend\n```\n\nPost 및 Photo 모델에서 다형 관계를 통해 많은 comments를 가지고 있다고 지정하세요.\n\n```ruby\n# app/models/post.rb\nclass Post < ApplicationRecord\n  has_many :comments, as: :commentable\nend\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```ruby\n# app/models/photo.rb\nclass Photo < ApplicationRecord\n  has_many :comments, as: :commentable\nend\n```\n\n3. 데이터베이스 마이그레이션\n\n데이터베이스 스키마를 업데이트하려면 마이그레이션을 실행하세요.\n\n```shell\nrails db:migrate\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 다형성 연관을 사용하는 방법을 안내합니다. 이제 이를 애플리케이션에서 사용할 수 있습니다. 예시를 살펴보겠습니다:\n\n- 포스트에 댓글 생성하기:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npost = Post.create(title: '내 글', body: '이것이 글의 내용입니다.')\ncomment = post.comments.create(body: '이것은 글에 대한 댓글입니다.')\n```\n\n- 사진에 댓글 작성하기:\n\n```js\nphoto = Photo.create(title: '내 사진', url: 'http://example.com/photo.jpg')\ncomment = photo.comments.create(body: '이것은 사진에 대한 댓글입니다.')\n```\n\n- 댓글 가져오기:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특정 게시물이나 사진에 대한 댓글을 가져올 수 있어요:\n\n```js\npost.comments # 게시물에 대한 모든 댓글을 반환합니다\nphoto.comments # 사진에 대한 모든 댓글을 반환합니다\n```\n\n- 댓글 가능한 객체에 접근하기:\n\n댓글에서 부모 객체(게시물이나 사진)에도 접근할 수 있어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ncomment = Comment.first\ncomment.commentable # 댓글과 연관된 게시물 또는 사진을 반환합니다\n```\n\n## 다형성 연관의 장점\n\n- 유연성: 다형성 연관은 단일 모델이 여러 다른 모델에 속할 수 있도록하여 유연성을 제공합니다. 이로 인해 여러 연관이 필요한 것을 줄이고 코드베이스를 간단하게 만듭니다.\n- 중복 감소: 단일 연관을 사용함으로써 중복되는 코드와 데이터베이스 열을 피할 수 있어서 더 깔끔하고 유지보수가 쉬운 코드베이스를 얻을 수 있습니다.\n- 유지보수가 쉬움: 관리해야 할 연관이 적어지면 코드베이스를 유지보수하고 업데이트하는 일이 더 쉬워집니다.\n\n## 결론\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비 온 레일스의 다형성 연관은 코드베이스를 단순화하고 하나 이상의 유형의 엔티티에 속할 수 있는 모델 처리 시 더 큰 유연성을 제공할 수 있는 강력한 기능입니다. 이 글에서 안내된 단계를 따라가면 레일스 애플리케이션에서 다형성 연관을 효과적으로 구현하고 이점을 활용할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-27-PolymorphicAssociationsinRubyonRails_0.png"},"coverImage":"/assets/img/2024-06-27-PolymorphicAssociationsinRubyonRails_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>폴리모픽 연관은 루비 온 레일즈의 강력한 기능 중 하나로, 한 모델이 하나 이상의 다른 모델에 단일 연관을 사용하여 속할 수 있게 합니다. 이는 단일 모델이 다른 여러 모델과 폴리모픽 인터페이스를 통해 연관될 수 있음을 의미합니다. 이 기능은 특히 한 모델이 여러 유형의 엔터티에 속할 수 있는 경우에 유용합니다.</p>\n<h2>폴리모픽 연관이란 무엇인가요?</h2>\n<p>폴리모픽 연관은 단일 연관을 사용하여 모델이 여러 다른 모델을 참조할 수 있게 합니다. 예를 들어, Comment 모델이 Post 모델 또는 Photo 모델에 속할 수 있는 시나리오를 고려해보세요. 각 모델에 대해 별도의 연관을 생성하는 대신, 폴리모픽 연관을 사용하여 이를 달성할 수 있습니다.</p>\n<p>다음은 루비 온 레일즈에서 폴리모픽 연관을 정의하는 방법입니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>모델 생성하기</li>\n</ul>\n<p>먼저 필요한 모델을 생성하세요. 이 예시에서는 Post, Photo, 그리고 Comment 모델을 만들겠습니다.</p>\n<pre><code class=\"hljs language-js\">rails generate model <span class=\"hljs-title class_\">Post</span> <span class=\"hljs-attr\">title</span>:string <span class=\"hljs-attr\">body</span>:text\nrails generate model <span class=\"hljs-title class_\">Photo</span> <span class=\"hljs-attr\">title</span>:string <span class=\"hljs-attr\">url</span>:string\nrails generate model <span class=\"hljs-title class_\">Comment</span> <span class=\"hljs-attr\">body</span>:text <span class=\"hljs-attr\">commentable</span>:references{polymorphic}\n</code></pre>\n<ol start=\"2\">\n<li>관계 정의하기</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음에는 모델에서 연관 관계를 정의하세요. Comment 모델에서는 commentable이라는 다형 엔티티에 속한다고 지정하십시오.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\"># app/models/comment.rb</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Comment</span> &#x3C; <span class=\"hljs-title class_ inherited__\">ApplicationRecord</span>\n  belongs_to <span class=\"hljs-symbol\">:commentable</span>, <span class=\"hljs-symbol\">polymorphic:</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>Post 및 Photo 모델에서 다형 관계를 통해 많은 comments를 가지고 있다고 지정하세요.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\"># app/models/post.rb</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post</span> &#x3C; <span class=\"hljs-title class_ inherited__\">ApplicationRecord</span>\n  has_many <span class=\"hljs-symbol\">:comments</span>, <span class=\"hljs-symbol\">as:</span> <span class=\"hljs-symbol\">:commentable</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\"># app/models/photo.rb</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Photo</span> &#x3C; <span class=\"hljs-title class_ inherited__\">ApplicationRecord</span>\n  has_many <span class=\"hljs-symbol\">:comments</span>, <span class=\"hljs-symbol\">as:</span> <span class=\"hljs-symbol\">:commentable</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<ol start=\"3\">\n<li>데이터베이스 마이그레이션</li>\n</ol>\n<p>데이터베이스 스키마를 업데이트하려면 마이그레이션을 실행하세요.</p>\n<pre><code class=\"hljs language-shell\">rails db:migrate\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음은 다형성 연관을 사용하는 방법을 안내합니다. 이제 이를 애플리케이션에서 사용할 수 있습니다. 예시를 살펴보겠습니다:</p>\n<ul>\n<li>포스트에 댓글 생성하기:</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">post = <span class=\"hljs-title class_\">Post</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'내 글'</span>, <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">'이것이 글의 내용입니다.'</span>)\ncomment = post.<span class=\"hljs-property\">comments</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">'이것은 글에 대한 댓글입니다.'</span>)\n</code></pre>\n<ul>\n<li>사진에 댓글 작성하기:</li>\n</ul>\n<pre><code class=\"hljs language-js\">photo = <span class=\"hljs-title class_\">Photo</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'내 사진'</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'http://example.com/photo.jpg'</span>)\ncomment = photo.<span class=\"hljs-property\">comments</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">'이것은 사진에 대한 댓글입니다.'</span>)\n</code></pre>\n<ul>\n<li>댓글 가져오기:</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>특정 게시물이나 사진에 대한 댓글을 가져올 수 있어요:</p>\n<pre><code class=\"hljs language-js\">post.<span class=\"hljs-property\">comments</span> # 게시물에 대한 모든 댓글을 반환합니다\nphoto.<span class=\"hljs-property\">comments</span> # 사진에 대한 모든 댓글을 반환합니다\n</code></pre>\n<ul>\n<li>댓글 가능한 객체에 접근하기:</li>\n</ul>\n<p>댓글에서 부모 객체(게시물이나 사진)에도 접근할 수 있어요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">comment = <span class=\"hljs-title class_\">Comment</span>.<span class=\"hljs-property\">first</span>\ncomment.<span class=\"hljs-property\">commentable</span> # 댓글과 연관된 게시물 또는 사진을 반환합니다\n</code></pre>\n<h2>다형성 연관의 장점</h2>\n<ul>\n<li>유연성: 다형성 연관은 단일 모델이 여러 다른 모델에 속할 수 있도록하여 유연성을 제공합니다. 이로 인해 여러 연관이 필요한 것을 줄이고 코드베이스를 간단하게 만듭니다.</li>\n<li>중복 감소: 단일 연관을 사용함으로써 중복되는 코드와 데이터베이스 열을 피할 수 있어서 더 깔끔하고 유지보수가 쉬운 코드베이스를 얻을 수 있습니다.</li>\n<li>유지보수가 쉬움: 관리해야 할 연관이 적어지면 코드베이스를 유지보수하고 업데이트하는 일이 더 쉬워집니다.</li>\n</ul>\n<h2>결론</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>루비 온 레일스의 다형성 연관은 코드베이스를 단순화하고 하나 이상의 유형의 엔티티에 속할 수 있는 모델 처리 시 더 큰 유연성을 제공할 수 있는 강력한 기능입니다. 이 글에서 안내된 단계를 따라가면 레일스 애플리케이션에서 다형성 연관을 효과적으로 구현하고 이점을 활용할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}