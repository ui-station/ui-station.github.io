{"pageProps":{"posts":[{"title":"AWS Rekognition은 어떻게 아이들을 지킴에 도움을 주나요","description":"","date":"2024-05-27 16:59","slug":"2024-05-27-HowAWSRekognitionHelpsProtectChildhood","content":"\n## 어린이 안전을 혁신하다\n\n![이미지](/assets/img/2024-05-27-HowAWSRekognitionHelpsProtectChildhood_0.png)\n\n내 아들이 다니는 유치원에서 모든 것이 시작되었어요. 팬데믹 전날들, 외부 활동을 하고 사진을 찍어 SNS에 올리고 가족들에게 보내는 것이 흔했어요.\n\n이 맥락에서, 데이터 보호법은 미성년자의 신원이 노출되지 않도록 현명하게 규정하고 있습니다. 이를 위해 가족/부모의 명시적 허락을 받지 않으면 이러한 이미지를 배포해서는 안 된다는 요구 사항을 비롯한 다양한 제약이 설정되어 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 모든 과정은 감정 표현 아이콘을 겹쳐 놓거나 잘라내거나 삭제하는 귀찮은 익명화 수동 프로세스로 이어집니다. 수동 프로세스이기 때문에 오류가 없고 규모에 비해 잘 작동하지 않습니다.\n\n이것은 아이들의 얼굴을 찾아 숨기기 위해 자동화된 형태를 사용하여 그들의 익명성을 보장하고 교사들과 교육진들의 작업을 쉽게 만드는 아이디어로 이끈 것입니다. 지속 가능한 비즈니스 모델도 아울러 구체화할 수 있다면 한 발자국 더 나아갈 수 있겠죠.\n\n# 창의적인 프로세스\n\n이 아이디어와 함께, 나는 그것을 구현하기 시작했습니다: 간단한 웹 응용 프로그램과 서버 측 API. 나는 단순한 것을 준비했고, 준비가 끝난 후 도메인을 등록하고 처음 발표 전에 첫 번째 테스트 중에 이것이 다소 인위적인 단계임을 깨달았습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사진을 찍고 공유하려면 대개 모바일 폰에서 하게되는데, 사진을 다듬기 위해 여러 애플리케이션을 거치고 싶지 않을 때가 있습니다 (적어도 대부분의 사람이 그러하지는 않지만), 아예 타사 웹사이트를 통해 지나치게 다듬는 것은 훨씬 더 그렇습니다. 이러한 까칠함은 애플리케이션을 받아들이기 어렵게 만들어, 다른 방법을 시도해보기로 결정했습니다: 텔레그램 봇.\n\n기존에 이미 이뤄진 작업에 대한 많은 이점을 취할 수 있게 해주었기에, 리팩토링을 거쳐 봇을 발표하고 조금씩 사용자를 모았습니다. 개발 중이었을 때 4명의 분들께서 친절하게 테스트해 주셔서 그것이 저를 격려해 다양한 기능을 추가하게 이끌었습니다. 광고 없이 3개월 만에 400명의 사용자에 도달했습니다. 여러 분야에서 공유한 후, 총 1034명의 사용자가 있는 애플리케이션을 종료했습니다.\n\n![AWSRekognitionHelpsProtectChildhood](/assets/img/2024-05-27-HowAWSRekognitionHelpsProtectChildhood_1.png)\n\n## 아키텍처 단계\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n각 건축 설계의 근거가 아래에 자세히 나와 있습니다. 이것은 솔루션의 진화를 보여줍니다.\n\n## 첫 번째 반복: 서버리스\n\n콘텐츠 배포는 CloudFront와 S3를 사용하여 이루어졌으며, 로직은 람다에서 처리되어 GW API를 통해 액세스되었습니다. 비즈니스 로직은 Rekognition과 S3 호출을 통해 지원되었습니다. 모든 것이 예상대로 작동했지만, 이미지를 생성하는 프로세스에서 Lambda에서 많은 CPU/RAM을 필요로 했습니다.\n\n![AWS Rekognition Helps Protect Childhood](/assets/img/2024-05-27-HowAWSRekognitionHelpsProtectChildhood_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 두 번째 반복: EC2에서 IaaS\n\n두 번째 버전은 우분투가 실행되는 EC2에 직접 배포되었습니다. 처음에는 PEM을 사용하고 나중에는 SSM을 사용했습니다. CodeCommit, Rekognition 및 DynamoDB에서 코드를 다운로드하는 역할이 있는 인스턴스였습니다.\n\n![이미지](/assets/img/2024-05-27-HowAWSRekognitionHelpsProtectChildhood_3.png)\n\n## 최종 후보 아키텍처 (실행되지 않음)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n진화와 수요가 발생하는 경우 알맞은 버전은 필요 시 스케일 업할 수 있는 ALB가 있는 작은 Fargate Spot Fleet를 생성하는 것이었습니다. 이 버전은 예비적이며, 개발된 것은 없었으며, 폴링 대신 웹소켓을 사용하고 노드 밸런싱을 위해 외부 스토리지인 Redis에 세션 관리를 포함시키기 위해 코드를 리팩토링해야 했습니다.\n\n![이미지](/assets/img/2024-05-27-HowAWSRekognitionHelpsProtectChildhood_4.png)\n\n# 유용한 코드 조각\n\n코드의 흥미로운 부분은 Rekognition 응답을 처리하는 섹션입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그리고 그와 함께, 얼굴을 익명화하기 위해 가우시안 블러 효과를 적용하는 섹션을 변경하겠습니다:\n\n마지막으로, 궁금해하시는 분들을 위해, 여기에는 봇의 상태 머신, 애플리케이션의 나머지 비즈니스 로직 및 API 호출을 처리하는 데 필요한 헬퍼가 포함된 완전한 코드 저장소가 있습니다.\n\n# 배운 점\n\n이 섹션은 예기치 않은 도전에 직면하거나 다양한 기술을 실험하며, 무엇보다도 사이드 프로젝트로 디지털 제품을 출시하려는 노력에서 배운 교훈을 공유하는 데 전념합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 프리미엄이나 기부 기반 모델을 구현하는 것은 쉬운 일이 아닙니다.\n- 사람들은 스마트폰 상에서 봇과 상호 작용을 매우 잘합니다.\n- 사용자 경험과 명확한 지침은 플랫폼과 상호 작용하는 데 중요합니다.\n- 사용자 피드백은 반드시 필요하며, 소프트웨어를 테스트한 친구들로부터 얻은 일부 최고의 제안이 있었습니다.\n\n읽어주셔서 감사합니다! 마음에 드셨으면 여기 다른 AWS 관련 기사들이 있어요!\n\n# 쉽게 이해하는 AWS 관련 기사들 🚀\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIn Plain English 커뮤니티에 참여해 주셔서 감사합니다! 떠나시기 전에:\n\n- 반드시 작가를 클랩하고 팔로우해 주세요! 👏️️\n- 팔로우하기: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼 방문하기: Stackademic | CoFeed | Venture | Cubed\n- PlainEnglish.io에서 더 많은 콘텐츠를 확인해 보세요.\n","ogImage":{"url":"/assets/img/2024-05-27-HowAWSRekognitionHelpsProtectChildhood_0.png"},"coverImage":"/assets/img/2024-05-27-HowAWSRekognitionHelpsProtectChildhood_0.png","tag":["Tech"],"readingTime":6},{"title":"AWS 비용을 절감하는 방법 CloudWatch 알람을 사용하여 유휴 상태의 EC2 인스턴스 중지하기","description":"","date":"2024-05-27 16:57","slug":"2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms","content":"\n클라우드 리소스를 효율적으로 관리하는 것은 클라우드 서비스를 이용하는 사람에게 매우 중요합니다, 특히 비용을 통제하는 측면에서 말이죠. 한 가지 흔한 문제는 개발, 테스트 또는 임시 작업을 위해 사용하는 EC2 인스턴스를 중지하는 것을 잊는 경우입니다. 이러한 실수는 뜻밖에 높은 청구서를 유발할 수 있습니다.\n\n제 경우에는 주로 테스트 목적으로 특정 도구를 설치한 EC2 인스턴스를 갖고 있습니다. 이 인스턴스는 짧은 기간 동안 사용됩니다. 작업을 완료한 후 인스턴스를 일반적으로 중지합니다. 그러나 때로는 산만해지거나 다른 작업으로 이동하여 그것을 잊어버리곤 합니다 😓. 다시 돌아와서 그것이 계속 실행 중인 것을 발견하면 놀라곤 합니다, 그로 인해 청구서가 높아지죠 😲.\n\n이 문제를 해결하기 위해, 나만이 중지할 것을 기억하도록 의존할 수 없다는 것을 깨달았고 자동화해야 한다는 것을 이해했습니다. 발견한 해결책은 1시간 동안 활동이 감지되지 않으면 인스턴스를 자동으로 중지하는 CloudWatch 경보를 생성하는 것입니다. 이렇게 하면 실제 사용한 만큼만 지불하게 됩니다.\n\n이 글에서는 이 해결책을 여러분과 공유하려 합니다. CloudWatch 경보를 소개하는 것부터 시작하여 비활성 EC2 인스턴스를 자동으로 중지하기 위해 AWS 관리 콘솔 및 Terraform을 사용하여 경보를 구성하는 단계별 안내서를 제공할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Cloudwatch Alarm\n\nAmazon CloudWatch은 AWS의 모니터링 서비스입니다. 이 서비스는 AWS 서비스, 사용자 정의 응용 프로그램 및 온프레미스 응용 프로그램에서 수집된 메트릭과 로그를 수집하는 중앙 저장소 역할을 합니다. CloudWatch 중요 기능 중 하나는 수집된 데이터를 기반으로 알람을 구성할 수 있는 CloudWatch 알람입니다.\n\nCloudWatch 알람은 단일 메트릭의 값(단일 또는 복합)을 지정한 시간 동안 확인하고, 정의한 임계값에 도달하면 지정한 작업을 실행합니다.\n\nCloudWatch 알람을 이해할 때, 필로우스트림을 모니터링하는 보안 카메라로 상상해보세요. 이 카메라의 역할은 문의 상태를 추적하는 것입니다. 문이 열려 있는지 닫혀 있는지를 확인합니다. 카메라가 문이 너무 오래 열려 있는 등 이상한 상황을 감지하면 알림을 트리거하여 경고합니다. 마찬가지로, CloudWatch 알람은 CPU 사용량과 같은 AWS 리소스의 특정 메트릭을 모니터링합니다. 메트릭이 미리 정의된 임계값을 초과하면(문이 너무 오래 열려 있는 것처럼) 알람이 트리거되어 문제를 알리고 조치를 취할 수 있도록 알려줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# CloudWatch 알람의 주요 구성 요소\n\n- 메트릭: 메트릭은 시간이 지남에 따라 모니터링하는 성능 데이터입니다. 시간이 지남에 따라 다른 값을 갖는 변수처럼, 이러한 값의 변동은 응용 프로그램이 원래대로 작동하는지 확인하기 위한 결정을 내릴 때 중요합니다. 메트릭에는 CPU 사용량, 디스크 I/O, 메모리 사용량 및 사용자 정의 응용 프로그램 메트릭 등이 포함될 수 있습니다. 이러한 메트릭은 정기적으로 수집되고 CloudWatch에 저장됩니다.\n- 임계값: 이것은 메트릭 데이터가 평가되는 값을 의미합니다. 예를 들어, CPU 사용량의 70%를 임계값으로 설정할 수 있습니다. 메트릭 값이 임계값보다 작거나 같거나 더 클지에 따라, 액션을 트리거할 수 있습니다.\n- 기간(초): 기간은 메트릭 값이 수집되는 빈도를 결정합니다. 이는 필요에 따라 몇 초에서 몇 시간까지 범위가 될 수 있습니다.\n- 통계량: 이것은 각 기간에 대해 메트릭 데이터가 어떻게 집계되는지를 지정합니다. 일반적인 통계량으로는 평균, 합계, 최소값 및 최대값이 있습니다. 메트릭이 매 분마다 수집되고 알람 기간을 5분으로 설정한 경우, 5분 동안 수집된 5개 값의 평균이 각 기간에 대한 메트릭 값으로 계산됩니다.\n- 평가 기간: 알람의 상태를 평가하는 데 고려할 최근 기간 수입니다.\n- 알람 데이터포인트: 알람을 트리거하려면 메트릭이 임계값을 위반해야 하는 평가 기간 수입니다. 예를 들어, 3개의 평가 기간이 있고 2개의 알람 데이터포인트를 설정한 경우, 임계값은 3개 기간 중 적어도 2개에서 위반되어야 알람이 트리거됩니다.\n- 알람 액션: 알람 상태가 변경될 때 취해지는 조치입니다. 이는 Amazon SNS를 통해 알림을 보내거나 EC2 인스턴스를 중지, 종료 또는 다시 부팅하거나 AWS Lambda 함수를 호출하거나 Auto Scaling 작업을 수행하는 것 등이 포함될 수 있습니다. 단일 알람에 여러 액션을 구성할 수 있습니다.\n\n# CloudWatch 알람 예시\n\n각 CloudWatch 알람의 구성 요소의 역할과 시간 경과에 따른 알람 상태 평가를 설명하는 예시를 살펴보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n알람 예제는 EC2 인스턴스의 평균 CPU 사용률을 모니터링하도록 설정되어 있습니다. CPUUtilization 메트릭은 5분 간격으로 수집되고 집계됩니다. 알람은 연속적으로 3개의 기간 동안의 평균 CPU 사용률을 평가합니다. 평균 CPU 사용률이 최소 2개의 평가 기간 중에서 70%의 임계값을 초과하면 알람이 정의된 작업을 트리거합니다.\n\n- 메트릭 : CPUUtilization\n- 통계 : 평균\n- 기간 : 300초 (5분)\n- 임계값 : 70%\n- 알람 조건 : 크거나 같음\n- 평가 기간 : 3\n- 알람에 필요한 데이터포인트 : 2\n\n아래 표는 알람이 시간이 지남에 따라 어떻게 트리거되는지 보여줍니다 :\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예에서는 평균 CPU 이용률이 70% 임계 값을 기간 3에서 초과하지만 알람이 트리거되지 않습니다. 이는 임계 값을 3 개의 평가 기간 중 1 회만 초과하기 때문입니다 (65-60-70).평균 CPU 이용률이 70% 임계 값을 다시 초과하는 시점은 기간 5로, 이는 평가 기간에서 2 번째 초과입니다 (70-60-75). 따라서 알람이 트리거되고 ALARM 상태로 들어갑니다.\n\n# 비활성 인스턴스를 자동으로 중지시키기 위한 CloudWatch 알람 설정\n\n![CloudWatch 알람을 사용하여 유휴 EC2 인스턴스 중단으로 AWS 비용 절감하기](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_1.png)\n\n나는 비활성 인스턴스를 감지하는 데 사용할 메트릭으로 CPUUtilization을 선택했습니다. 이 메트릭은 기본적으로 5분마다 수집되며 CloudWatch로 전송됩니다. 알람은 1시간 동안 (5분씩 12회) CPU 이용률이 2% 미만으로 유지된 경우에만 트리거됩니다. 알람에 의해 트리거된 작업은 인스턴스 중지 및 이메일 통지입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 메트릭: CPUUtilization\n- 통계: 평균\n- 기간: 300초 (5분)\n- 임계값: 2%\n- 경보 조건: 이하\n- 평가 기간: 12\n- 경보 발생 데이터 포인트: 12\n- 조치: SNS 이메일 알림 + EC2 인스턴스 중지\n\n# 콘솔을 이용한 해결 방법\n\n## 단계 1. 메트릭 및 조건 지정\n\n모니터링해야 하는 인스턴스의 CPUUtilization 메트릭을 선택한 후 경보 조건을 지정하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![AWS Cost Reduction Step 2](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_2.png)\n\n![AWS Cost Reduction Step 3](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_3.png)\n\n![AWS Cost Reduction Step 4](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_4.png)\n\n![AWS Cost Reduction Step 5](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 2. 작업 구성\n\n첫 번째 작업은 이메일 구독이 있는 SNS 주제로 알림을 보내는 것입니다. 이렇게 하면 알람이 인스턴스를 중지할 때 알림을 받을 수 있습니다. 이 단계에서 SNS 주제를 생성할 수도 있고, 이미 생성한 경우 기존 주제를 참조할 수도 있습니다.\n\n두 번째 작업은 인스턴스를 중지하는 것입니다.\n\n![AWS 비용 절감 이미지](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_6.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_7.png)\n\n## 단계 3. 이름 및 설명 추가\n\n알람에 이름을 지정하고 설명도 추가할 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_8.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 4. 미리보기 및 생성\n\n모든 구성 요약을 확인하세요. 모든 것이 올바르다면 경보 생성을 확인하십시오.\n\n결과는 아래 스크린샷과 같아야 합니다.\n\n<img src=\"/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_9.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n알람은 새로 생성되었을 때이거나 지정된 기준을 바탕으로 알람 상태를 결정하기에 충분한 데이터가 없을 때 상태가 \"데이터 부족\"으로 표시될 수 있습니다.\n\n경고 메시지는 다음과 같습니다: \"이 작업은 확인 대기 중인 엔드포인트가 있는 SNS 주제로 메시지를 보냅니다. 엔드포인트가 확인될 때까지 예상대로 작동하지 않을 수 있습니다. SNS에서 구독 확인 이메일을 찾거나 주제를 검토하세요.\" 해당 메시지는 생성된 SNS 주제에 대한 이메일 구독을 확인하는 것에 관한 것입니다. SNS 주제를 생성할 때 제공한 이메일 주소로 수신한 이메일을 열고 구독을 확인해야 합니다.\n\n![이미지](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_10.png)\n\n구독을 확인한 후에 알람이 지정된 메트릭에 도달하면 아래 스크린샷과 같은 결과를 얻어야 합니다. 모든 것이 잘 작동합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![CloudWatch Alarm Screenshot 1](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_11.png)\n\nCloudWatch 알람이 올바르게 설정되어 있고 조건을 충족하면 작업을 트리거할 준비가 되어 있습니다. 이 경우 아래 스크린샷과 같은 결과를 볼 수 있습니다.\n\n![CloudWatch Alarm Screenshot 2](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_12.png)\n\n![CloudWatch Alarm Screenshot 3](/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_13.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 테라폼을 사용한 솔루션\n\n클라우드워치 알람을 빠르고 자동화되며 일관된 방식으로 설정하고 싶다면, 테라폼을 사용하는 것이 훌륭한 선택입니다. 아래에는 클라우드워치 알람을 설정하는 데 사용되는 주요 파일인 cloudwatch_alarm.tf와 sns.tf 파일을 제시합니다. 전체 테라폼 코드는 제 GitHub 저장소에서 확인할 수 있습니다.\n\n```js\nresource \"aws_cloudwatch_metric_alarm\" \"ec2_cpu_alarm\" {\n  comparison_operator       = \"LessThanOrEqualToThreshold\"\n  evaluation_periods        = \"12\"\n  datapoints_to_alarm       = \"12\"\n  metric_name               = \"CPUUtilization\"\n  namespace                 = \"AWS/EC2\"\n  period                    = \"300\" #초\n  statistic                 = \"Average\"\n  threshold                 = \"2\"\n  alarm_description         = \"이 알람은 EC2 인스턴스가 1시간 동안 비활성 상태로 유지될 경우 중지됩니다.\"\n  treat_missing_data        = \"missing\"\n  insufficient_data_actions = []\n  alarm_actions             = [aws_sns_topic.topic.arn, \"arn:aws:automate:${var.region}:ec2:stop\"]\n\n  alarm_name = \"stop_test_instance_alarm\"\n\n  dimensions = {\n    InstanceId = var.instance_ID\n  }\n}\n```\n\n```js\nresource \"aws_sns_topic\" \"topic\" {\n  name = \"stop_test_instance_alarm_topic\"\n}\n\nresource \"aws_sns_topic_subscription\" \"topic_email_subscription\" {\n  topic_arn = aws_sns_topic.topic.arn\n  protocol  = \"email\"\n  endpoint  = var.email_address\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모든 리소스가 생성된 후에는, 생성된 SNS 주제의 구독을 확인해야 합니다. 받은 이메일 안내에 따라 (콘솔 솔루션에서 설명한 대로) 구독을 확인해주세요.\n\n이 기사가 EC2 인스턴스를 효율적으로 관리하여 불필요한 사용을 방지하는 데 도움이 되길 바랍니다.\n","ogImage":{"url":"/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_0.png"},"coverImage":"/assets/img/2024-05-27-ReduceAWSCostsbyStoppingIdleEC2InstanceswithCloudWatchAlarms_0.png","tag":["Tech"],"readingTime":11},{"title":"게임 개발에서 빛과 색상 활용하기 초심자를 위한 가이드","description":"","date":"2024-05-27 16:54","slug":"2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide","content":"\n빛과 색은 감정을 전달하고 분위기를 조성하는 데 가장 강력한 도구 중 하나입니다. 그러나 이 도구들을 올바르게 활용하기 위해서는 일정한 예술적 지식이 필요합니다. 이 글에서는 크래시 코스와 앞으로의 방향에 대해 알아볼 거예요!\n\n![이미지](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_0.png)\n\n거의 모든 게임에서, 빛은 매우 중요한 요소입니다. 여기서 말하는 것은 현실적이고 아름다운 그래픽을 만들어내는 빛 뿐만 아니라, 게임 플레이 자체를 지원하는 요소입니다. 즉, 좋은 조명 없이는 게임이 반 준비만 된 것과 다름없습니다. 그렇다고 해서 기술적으로 올바르게 빛을 다루는 것만 중요한 것은 아닙니다. 예술적 측면에서 빛을 이해하는 것이 중요합니다.\n\n안녕하세요! 저는 알렉산더 샤로프라고 해요. 워 로봇: 프론티어 프로젝트에서 시니어 환경 아티스트로 일하고 있습니다. 7년 가까이 게임 산업에서 일하며, 모바일 개발, VR 프로젝트 및 AAA 게임 제작 경험이 있습니다. 이 글은 게임에서 빛을 다루는 기본에 대해 다룰 것이며, 그 중요성을 정확히 이해하고 싶어하는 분들을 위한 것입니다. 또한 색상과 빛이 근본적으로 관련된 개념이기 때문에 색상에 대해서도 이야기할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 게임 및 영화 제작 시 빛의 중요성\n\n우리는 기본부터 시작해봅시다: 빛은 분위기를 표현하거나 개발자가 의도한 정확한 감정을 전달하며, 그림자, 반사 등을 만들어내어 게임 메카닉에도 영향을 미칠 수 있습니다. (짧은 예로, 생존 게임에서 빛은 어둠 속에 휩쓸리고 주변이 보이지 않을 때 플레이어에게 공포와 긴장감을 느끼도록 하는데 사용될 수 있습니다.)\n\n빛은 게임 내 중요한 강조를 만들어내는 가장 강력한 도구입니다. God of War의 2018년 리부트를 시작으로 이를 고려해 봅시다.\n\n![이미지](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서 빛은 플레이어의 시선을 안내하고 대조를 강조하며, 핵심 초점을 보여줍니다. 즉, 플레이어가 가야 할 곳과 거기에서 기다리는 것이 무엇인지를 보여줍니다. 조명은 또한 특정 감정을 불러일으키는 분위기를 조성하고 \"와우\" 효과를 줍니다.\n\n파란색과 빨간색 컬러 쉐이드의 대비는 그림에 더 많은 흥미를 더하며, 결과적으로 눈은 그들 사이를 왔다갔다하게 됩니다. 도로도 빛과 색상으로 강조되어 있습니다. 이는 이동 방향을 빠르게 이해할 수 있도록 합니다. 빛은 또한 전경, 중경 및 배경을 분리하여 위치의 부피를 더 잘 볼 수 있게 하고 물체가 합쳐지는 것을 방지합니다. 물론, 플레이어는 보는 것을 철저히 분석하지 않습니다. 모든 것을 무의식적으로 수행합니다.\n\n두 번째 예는 언급한 시리즈의 최신 게임인 God of War: Ragnarök에서 나온 것입니다.\n\n![image](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 스크린샷에서 분위기는 더 어둡고 차가워졌어요. 등잔불에서 나오는 빛의 대비는 배경과 주변의 다른 것들에 명확히 보이게 하여 개발자들이 강조를 만들 수 있도록 도와줍니다. 이것은 플레이어들에게 어떤 포인트가 중요하다는 것을 알리기 가장 간편한 방법입니다. 예를 들어, 등잔불이 없었다면 이 문을 들어갈 수 있다거나 이 방향으로 가야 된다는 것이 명확하지 않았을 것입니다. 여기서 빛은 시각적인 역할뿐만 아니라 게임플레이를 강조하는 데도 도움이 됩니다. 다시 한 번 강조할 점은 눈이 차가운 파란색과 따뜻한 색조를 왔다갔다한다는 것도 있어요.\n\n세 번째와 네 번째 스크린샷은 'Horizon Forbidden West'와 'Burning Shores' 애드온에서 나왔어요.\n\n위 세 번째와 네 번째 스크린샷은 같은 기본 규칙을 따라서: 빛은 분위기를 만들고, 관심 지점을 보여주고, 규모와 방향을 보여줍니다. 이 경우, 이 효과들은 차가운 빛과 따뜻한 빛의 대비, 형상, 물체의 기울기, 그리고 다른 디자인 요소들을 통해 달성됩니다. 빛은 모든 이것들을 강조하고 강화하여, 개발자들이 상상한 아이디어를 전달합니다.\n\n더 구체적으로, 세 번째 스크린샷에서, 따뜻한 빛으로 조명이 비춰지는 거대한 입구를 볼 수 있어요; 차가운 곳 배경 앞에서 높이 서있는 이 빛은 플레이어의 시선을 끕니다. 더불어, 그 자체의 위치 디자인도 매우 효과적입니다: 입구는 다른 모든 것과 두드러지게 대조되는 독특한 형상을 가지고 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제 4번째 스크린샷에서 삐딱하게 자라난 나무와 인물이 함께 있는 것으로 보아 플레이어의 시선을 그림의 오른쪽으로 이끄는 것 같습니다. 그곳에는 흥미로운 물건이 위치해 있는데, 이 경우엔 모든 것과 잘 어우러지는 외로운 건물이 눈에 띕니다. 여기서의 빛은 계획들을 잘 분리하고, 장소의 규모를 강조하며, 모든 것이 하나의 연속적인 질량으로 융합되지 않도록합니다. 주 건물 뒤의 버려진 도시는 강조되기 위해 특히 짙은 안개에 덮여 있고, 주인공을 다른 물건과 대비시키기 위해 사용되는 다른 여러 물건들과 함께 이 장소에 존재합니다.\n\n# 칼라 심리학\n\n그래서, 이제 일부 게임에서 빛이 어떻게 작용하는지 살펴보았으니, 어떻게 실제로 작업해야 할까요? 올바른 흥미로운 결과를 얻기 위해 따라야 할 규칙은 무엇일까요? 심리학적 측면에서 사람들에게 어떻게 영향을 미치는지에 관심을 가진 색상과 관련된 과학이 있습니다. 이러한 규칙은 예술가들이 특정 플레이어 감정, 분노, 기쁨, 슬픔, 희망 등을 불러일으키기 위해 사용되지만, 예술적 구성 요소에 더 많은 중점을 두며 어떻게 원하는 효과를 이끌어낼 수 있는지 탐구합니다. 색채 이론은 색상이 어떻게 생성되는지, 서로 상호 작용하는 방식, 그리고 어떻게 사람들의 감정과 기분에 영향을 미치는지를 탐구하고 설명합니다.\n\n![이미지](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임 개발 과정에서는 색이 핵심적인 역할을 하는 많은 영역이 있습니다: UI, VFX, 그리고 조명, 환경, 시네마틱 디자인 등이 있죠. 예를 들어, UI/UX에서는 종종 동맹과 적을 구별하기 위한 표식이 필요한데, 게임에서는 보통 동맹을 파란색 또는 초록색으로, 적을 빨간색으로 표시합니다. 이렇게 해야 플레이어가 즉시 친구와 적을 구별할 수 있기 때문이에요.\n\n최근 Diablo IV에서도 이를 확인할 수 있는데, 건강과 마나 바가 명확하게 빨간색과 파란색으로 나뉘어져 있습니다. 건강에 빨간색이 선택된 이유는 인간의 혈액과 활력과 연관이 있습니다. 한편, 마나는 파란-보라색조로 표현되어 있는데, 이는 과거에 무언갈 알 수 없거나 마법적인 것을 떠올리게 한다고 합니다.\n\n환경 디자인 측면에서는 빨간색이 긴장감을 조성하여, 플레이어가 적극적인 조치를 취할 수 있도록 하거나 두려움을 불러일으킵니다. 노란색조는 상호 작용 가능한 물체를 강조하여 환경 내에서 쉽게 눈에 띄게 함으로써 중요한 역할을 합니다.\n\n같은 장면의 여러 프레임을 완전히 다르게 조명할 수 있으며, 이는 게임, 영화, 애니메이션, 그리고 예술 전반에서도 해석할 수 있습니다. 한 때 모든 게 빨강과 보라로 물들여진 분위기는 긴장과 불신을 조성합니다. 그리고 다른 때에는 녹색이나 파란색일 수도 있어서 차분하고 편안한 분위기를 연출할 수 있죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Using light and color in game development: a beginner's guide](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_4.png)\n\n# 구성, 톤, 색상\n\n그래서 빛은 게임이나 영화 내에서 프레임 및 구성에서 중요한 요소입니다. 그러나 이 요소는 예술적인 규칙을 고려한다면에만 작용합니다: 선, 모양, 관점, 톤, 색 이론. 빛을 구성할 때 이론을 공부하고 적용하면 게임이 더 표현력 있고 흥미로워집니다.\n\n이론을 살펴보고 빛을 설정할 때 적용하는 것은 게임을 더 표현력 있고 흥미롭게 만듭니다. 기본적인 사항에 대해 알아보겠습니다. 구성부터 시작해봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<table>태그를 Markdown 형식으로 변경하십시오.\n\n사진 속 가장 인기 있는 구성 기법 중 하나는 세분법입니다. 이는 클래식한 구성 원칙으로, 널리 사용되며, 표시하고자 하는 프레임 내에서 가장 흥미로운 요소와 중요한 부분이 이 프레임 내에서 어떤 상상의 선의 교차점에 위치해야 한다는 것을 명시한 것입니다. 이미지의 오른쪽 상단에 설명이 나와 있습니다.\n\n이것이 절대적인 규칙이 아니라 중요한 사항을 중점적으로 포착할 수 있도록 안내하고 편리한 템플릿으로 사용할 수 있는 것을 기억하는 것이 중요합니다. 아래에는 초점 요소의 사용 및 프레임을 요소 및 선분으로 나누는 방법이 작용하여 특정 시점에 중요한 요소나 행동에 중점을 둔 사진 몇 장을 보여줍니다.\n\n구성에 대한 공부를 소홀히 하거나 프레임을 구성하기 위한 특정 규칙을 준수하지 않는다면 전달하려는 정보가 소실될 수 있습니다. 따라서 예술적 기본 사항을 계속적으로 검토하는 것이 중요하며, 3D의 많은 측면은 고전 회화, 일러스트 및 영화 제작에서 나옵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일부 작곡 기법을 사용한다고 해서 사진과 장면이 즉각적으로 흥미롭고 영감을 준다는 것은 아니지만, 이를 통해 더 가깝게 다가갈 수 있게 될 거예요.\n\n영화에서 몇 가지 예시를 살펴 보겠습니다. 촬영의 구성과 무대 장치가 감독의 아이디어를 전달하는 데 어떻게 작용하는지 보여줍니다. 초점 및 프레임의 구획과 선분할은 특정 시점에 가장 중요한 요소 또는 행동에 강조를 두는 데 도움이 될 수 있어요.\n\n이제 조합이 게임에서 어떻게 적용될 수 있는지 살펴보죠. 예를 들어, God of War Ragnarök의 장소를 고려해 보세요.\n\n내 의견으로는 \"황금 삼각형\" 규칙이 여기에 잘 맞는 것 같아요. 화가들은 아마도 다른 규칙을 따랐을 것이지만, 저는 이 구체적인 방법만 분석할 거에요. 편의를 위해 관련된 선을 초록색으로 강조했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n플레이어가 이전에 알지 못했던 장소에 도착해서 더 나아가야 할 때를 상상해 보십시오. 우리는 그들을 혼란스럽게 하고 싶지 않으며, 이동 경로를 이해하도록 도와주되 여행 중 지루함이 없도록 하고 싶습니다. 위의 이미지 속 구성은 작가들이 요소들을 배치함으로써 모든 것이 명확하고 가장 중요한 정보가 가장 눈에 띄는 위치에 있도록 하는 좋은 예시입니다.\n\n그러므로, 분명하게 영웅은 대각선으로 바로 앞에 있는 큰 문을 통해 통과해야 할 것이고, 프레임의 왼쪽에 위치한 내려가는 계단이 있습니다. 길이 강조되어 문으로 이어지고 있습니다. 물체들은 주로 양쪽에 위치하고 있는데, 이는 직진하고 싶은 본능적인 욕구를 일으킵니다.\n\n한편, 달빛은 문에 집중을 둔 상태로, 그것을 가장 밝게 보이는 장소로 만듭니다. 나머지 공간이 그림자 속에 있기 때문에 이 대조는 문을 보고 싶어하게 만듭니다. 두 개의 램프는 빛과 그림자의 대조를 보여주기 위해 전경에 놓여져 있으며, 이는 플레이어의 주의를 끌기 위한 역할을 합니다. 여기서 가장 흥미로운 점은 수목과 덩굴이 밝은 붉은 색조로 만들어졌다는 것인데, 이는 달빛과 녹색 식물과는 다르게 최대한의 주의를 끌도록 고안되었습니다. 문 뒤에 위치한 산은 문 너머에 탐험해야 할 큰 공간이 있다거나 일종의 시각적 풍경이 있다는 것을 시사합니다.\n\n이 모든 사항들: 구성, 조명, 색상, 내비게이션 및 물체 배치는 플레이어를 돕고 이야기를 전달하기 위해 설계되었습니다. (물론 싱글 플레이어 및 멀티플레이어 게임에서 작업할 때는 고유한 고려 사항이 있지만, 기본적인 접근 방식은 어디서나 동일합니다.)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예제에서는 하나의 특정 프레임을 하나의 각도에서 살펴보았습니다. 그러나 캐릭터는 움직이고 주변을 보기도 하므로 어떻게 처리해야 할까요? 개발자들은 게임 플레이 관점에서 중요한 몇 가지 주요 각도를 선택해야 합니다. 이러한 각도는 나머지가 개발 과정 중에 확정될 때까지 기반이 될 것입니다. 개발자들은 플레이어가 위치에 들어오고 떠날 때 어떻게 할지, 게임 플레이에 따라 무엇을 보아야 할지를 숙고해야 하며, 여러 전문가들이 이 노력에 참여합니다: 컨셉 아티스트, 조명 아티스트, 환경 아티스트 등이 있습니다.\n\n구성 기초를 마스터한 후에는 빛과 색상을 다루는 또 다른 중요한 측면에 주목할 가치가 있습니다: 토널리티.\n\n토널리티는 삽화, 게임 및 영화 내에서 평면을 분리하는 기본 도구입니다. 톤이 없으면 모든 것이 하나의 평면으로 합쳐져서 프레임의 주요 아이디어를 식별하기 어렵게 될 것입니다. 프레임을 구분하기 쉽게 만들어주는 몇 가지 잘 알려진 기술이 있습니다: 지브라 조명, 대조 및 프레임을 평면으로 분할하는 것입니다.\n\n지브라 조명은 밝은 공간과 어두운 공간의 번갈아 나타남으로 인해 주목을 끌어냅니다. 이 기술을 사용하면 캐릭터를 강조하고 그들에게 강조를 둘 수 있습니다. 아래에서 캐릭터의 실루엣이 밝은 빛의 배경에 명확히 보이며 그 반대도 마찬가지입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_6.png)\n\n대조와 색조를 다루는 또 다른 중요한 기법입니다. 지각적으로는 색이 아닌 톤이 항상 더 중요하다는 것을 기억하는 것이 중요합니다. 톤이 주로 부피를 만들고 시각적으로 그림을 나누는 역할을 합니다.\n\n아래 예시를 살펴보세요: 첫 번째 이미지에 색을 추가하는 것만으로는 색조나 강도를 다루지 않으면 큰 차이가 없습니다. 이미지는 여전히 단조롭고 부분들이 하나로 섞여있는 느낌을 줍니다. 그러나 톤을 조절하면 흑백 그림조차 돋보이며 명확한 대조가 나타납니다. 이미지의 부분들이 서로 어떻게 상호작용하는지 즉시 알아볼 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_7.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이미지의 부분을 분리하는 데 도움이 되는 또 다른 좋은 기술은 프레임을 평면으로 나누는 것입니다. 이 방식을 사용하면 플레이어(또는 다른 뷰어)가 서로 다른 객체들을 더 명확하게 구별할 수 있게 됩니다.\n\n아래 늑대 사진을 살펴보죠: 관찰자에게 얼마나 가까운지에 따라 빛과 톤으로 동물들을 그룹화한 것을 보여줍니다. 이 분할이 없다면, \"카메라\" 바로 앞에 앉아 있는 늑대와 먼 곳에 앉아 있는 늑대를 구별하기가 매우 어려울 것입니다.\n\n![늑대 사진](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_8.png)\n\n톤 키도 고려할 가치가 있는 유용한 도구입니다. 이는 사진, 프레임, 일러스트레이션의 표현 범위에 대한 정보를 제공하는 종류의 안내서입니다. 이 도구는 특히 게임에서 조명을 다룰 때 유용하며, 이야기 속에서 원하는 분위기를 원하는 시점에 달성할 수 있도록 도와줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트의 전반적인 아트 디렉션과 위치의 작업 설명을 기반으로 톤 키가 선택됩니다:\n\n- 위치는 무엇입니까?\n- 어떻게 묘사해야합니까?\n- 어떤 분위기를 전달해야합니까?\n- 어떤 감정을 일으켜야합니까?\n\n보다 높은 컬러 키는 평온하고 희망을 전달할 수 있으며, 낮은 키는 긴장, 호기심, 위험을 전달할 수 있습니다.\n\n![이미지](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_9.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 개념 아티스트 스케치에서 가져온 몇 가지 예시이며, 이 중에서 고조도 및 저조도를 모두 포함하고 있습니다. 고조도는 밝은 색이 우세한 그림에서 보이며, 저조도는 어두운 톤이 우세한 그림에서 나타납니다.\n\n![image](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_10.png)\n\n# 색 조합의 종류\n\n이제 색에 대해 조금 이야기해보겠습니다. 색은 여러 가지 분리된 과학에 의해 연구되는 굉장히 거대한 주제입니다. 이에 따라, 초보자에게 유용한 색의 매우 기본적인 내용을 살펴보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n색상은 다양한 구성 요소를 가지고 있으며, 다양한 조합으로 다양한 효과를 내놓습니다.\n\n![색상과 광과 색채의 사용: 게임 개발을 위한 초보자 안내서](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_11.png)\n\n색조는 본질적으로 기본 색상을 가리킵니다. 채도는 색상의 강도 또는 순도이며, 밝기(값)는 색상의 어둠 또는 밝기로 색의 모양과 깊이를 결정합니다.\n\n프레임이나 일러스트레이션에서 (전문 작업에 대한 이야기를 하고 있다면) 어떤 이유로 색상 조합이 특정 원칙에 따라 색상 바퀴에 근거하여 선택됩니다. 이 개념은 19세기로 거슬러 올라가며, 처음으로 언급된 것은 스위스 예술가 요한네스 이텐이 쓴 'The Art of Color'라는 책입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_12.png)\n\n이론에 따르면 항상 잘 어울리는 서로 다른 색상 세트가 있으며, 특별한 색상 바퀴를 사용하여 이러한 색상을 식별할 수 있습니다. 사실 다양한 조합이 있습니다: 상보적인 색상은 원의 반대편에 위치하며, 단일 색상 팔레트의 경우, 한 가지 색상을 취하고 조톤을 변경합니다; 유사한 색상은 색상 바퀴 상에서 서로 이어진 색상입니다.\n\n각각의 예시를 살펴보겠습니다.\n\n![image](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_13.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래에 보면 보충색을 볼 수 있습니다. 컬러 휠 내에서 빨강과 주홍은 초록과 연두의 반대 색상이며, 이 대비는 주목을 끕니다.\n\n![image1](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_14.png)\n\n위에서는 보충색을 볼 수 있으며, 등대로부터 나오는 따뜻한 빛과 전체 위치에 반짝이는 차가운 달빛의 대조를 관찰할 수 있습니다.\n\n![image2](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_15.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 Firewatch 이미지에서는 유사한 색상이 따뜻한 분위기를 만들도록 도와줍니다. 동시에 밝기와 톤의 선택이 원하는 강조를 제공합니다.\n\n![Firewatch Image](/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_16.png)\n\n위 그림에서는 분할 보충 색상을 사용했습니다. 확실한 파란 머리 색상과 노란색, 버건디 같이 색상 바퀴 반대편에서 온 색상들을 볼 수 있습니다.\n\n위에 보여진 방법들은 강조를 통해 프레임 안에서 관심을 끌기 위해 필요합니다. 모든 방법은 작가의 재량으로 선택되며 명확하고 명백한 경계는 없습니다. 중요한 것은 플레이어나 관람자가 의도한 아이디어를 얼마나 성공적으로 이해하는지입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 대상 관객\n\n광을 다룰 때 또 다른 중요한 측면은 대상 관객을 이해하는 것이며, 이는 작업 방법을 결정할 것입니다. 대상 관객은 대략적으로 두 가지 유형으로 나눌 수 있습니다: 현실주의와 스타일화. (이는 프로젝트, 아트 디렉션, 그리고 의도된 대상 관객에 따라 조건부이며 크게 영향을 받습니다)\n\n작업 양면에서, 현실주의는 현실 세계에 가능한 한 가깝게 사진을 전달해야 한다는 임무로 인해 항상 더 어렵습니다: 현실적인 조명, 재료, 효과 등이 필요합니다. 기술적으로 말하면, 게임이 영화와 달리 미리 녹화되지 않고 실시간으로 실행되므로 그림을 처리하는데 많은 리소스가 필요합니다. 그리고 타협할 여지가 없습니다: 뭔가를 망친다면 관객이 즉시 알아차릴 것입니다.\n\n스타일화는 강조색과 단순화된 형태에 초점을 맞춘 간소화된 방식입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n물론 창의성에 제한은 없어요: 스타일을 섞고 어울리게 조합할 수 있어요. 모든 것은 프로젝트의 총 예술적 방향에 달려 있죠.\n\n특히 빛과 색에 관한 이야기를 할 때, 사실주의는 중립적이고 차가운 색조를 특징으로 하며 뚜렷한 강조가 없어요. 예를 들어, 영화 \"덩컥\"과 게임 콜 오브 듀티: 제2차 세계대전의 이미지들이 여기 있어요.\n\n스타일화를 할 때는 완전히 다른 방식으로 작업해요. 밝은 색상과 강조로 주목을 끌며 게임의 전통을 완화하죠.\n\n여기에 포트나이트와 오버워치의 몇 장면이 있어요. 실제 세계에서는 우리가 이런 색상이나 조명을 보지 못하지만, 스타일화된 것은 관객으로 하여금 이러한 불일치를 비판하지 않고 모든 것이 조화롭게 보이게 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라이트와 컬러는 게임과 영화 모두에서 분위기를 조성하고 감정을 전달하는 가장 강력한 도구 중 하나입니다. 그러나 이를 올바르게 활용하기 위해서는 일정 수준의 예술 지식이 필요합니다. 또한 다양한 게임을 플레이하고 분석하며 가능하다면 전문 서적을 읽어보는 것이 좋습니다 - James Gurney의 \"Color and Light\"로 시작하면 좋을 것 같아요. 이 모든 것이 여러분의 기술을 크게 향상시키는 데 도움이 될 것이며, 나머지는 이론을 계속 실천하는 문제에 불과해요!\n","ogImage":{"url":"/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_0.png"},"coverImage":"/assets/img/2024-05-27-Usinglightandcoloringamedevelopmentabeginnersguide_0.png","tag":["Tech"],"readingTime":17},{"title":" 어떤 HTML5 게임 엔진이 최고일까요","description":"","date":"2024-05-27 16:51","slug":"2024-05-27-WhatAretheBestHTML5GameEngines","content":"\n![HTML5 Game Engine](/assets/img/2024-05-27-WhatAretheBestHTML5GameEngines_0.png)\n\nHTML5 게임 개발에 뛰어들 때, 프로젝트의 성공을 위해 올바른 게임 엔진을 선택하는 것이 중요합니다. 여기에는 몇 가지 최고의 HTML5 게임 엔진, 그들의 기능, 그리고 다양한 사용자 요구를 충족하는 방법에 대한 자세한 정보가 있습니다.\n\n## 🔹 1. Phaser\n\n나는 Phaser 게임 엔진으로 게임 개발 경력을 시작했습니다. 그 시절에는 카지노 게임을 만들고 있었고, Phaser는 가장 많이 분기되고 이야기된 프레임워크 중 하나였습니다. 잘 문서화된 API와 매우 다양한 기능을 이해할 수 있는 많은 예제를 제공하는 완벽한 게임 엔진으로, Phaser는 최고의 선택 중 하나였습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPhaser에는 편집기가 없기 때문에 게임 객체의 디자인 및 배치를 볼 수 없습니다. 특히 UI 관련 변경 사항에 대해 알기 어렵습니다. 게임 객체의 배치와 동작을 상상해야 했었습니다. 제게 가장 어려웠던 부분은 게임에 물리학을 추가하는 것이었습니다. 처음 시작했을 때 게임에 물리학을 통합하는 데 능숙해지고, 교육 과정 중에 물리학에 큰 관심이 없었습니다.\n\n이러한 어려움에도 불구하고, 나는 Phaser를 좋아했습니다. 코드 중심적인 접근 방식으로 인해 게임 개발 중의 메카닉과 동작에 대한 더 깊은 이해를 얻을 수 있었습니다. 그러나 Cocos Creator를 사용한 후에 시각적 인터페이스 게임 엔진의 중요성을 깨달았습니다. Cocos Creator는 게임 UI를 디자인 미리보기대로 제작하는 데 소요되는 시간을 크게 줄여줍니다. 이를 통해 제작 프로세스가 더욱 간소하고 효율적으로 진행됩니다.\n\n특징:\n\n- 매우 인기가 높고 잘 문서화되어 있습니다.\n- 다양한 예제와 튜토리얼이 있습니다.\n- WebGL 및 Canvas 렌더링을 지원합니다.\n- 풍부한 플러그인 생태계를 보유하고 있습니다.\n- 2D 게임 개발에 탁월합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPhaser는 강력한 2D 게임 엔진을 찾는 개발자들에게 이상적이며 뛰어난 커뮤니티와 다양한 학습 자료가 제공됩니다. 이 엔진은 아케이드 스타일 게임, 플랫포머, 그리고 캐주얼 게임을 만드는 데 적합합니다. 그러나 시각적 편집기가 부족하므로 개발자들은 게임 객체의 배치와 행동을 코딩해야 합니다. 이는 상상력과 계획력이 필요할 수 있습니다.\n\n## 🔹 2. Cocos2d-JS (Cocos Creator)\n\nCocos Creator를 배우기 시작했을 때, 처음에는 문서가 중국어로 되어 있어 어려웠습니다. 영어 문서는 주로 자명한 노트 형식이었습니다. 그러나 결국 Cocos 문서는 매우 유용해지고 이제는 그것을 잘 알게 되었습니다. Cocos에 대한 우리가 갖고 있는 매뉴얼은 항상 좋습니다. 그것은 Cocos의 핵심 개념을 잘 이해할 수 있도록 도와줍니다.\n\n특징:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 2D 및 3D 게임 개발 지원\n- 쉬운 디자인 및 객체 배치를 위한 시감 편집기\n- 물리학을 위해 Box2D 및 Chipmunk 통합\n- 모바일 및 데스크톱을 포함한 크로스 플랫폼 지원\n- JavaScript로 스크립팅\n\nCocos Creator는 게임 장면과 객체를 디자인하는 시감 인터페이스를 선호하는 개발자에게 적합합니다. 시감을 통해 개발 프로세스를 간단하게 만들어주며, 초보자와 숙련자 모두에게 적합합니다. 복잡한 물리학과 크로스 플랫폼 배포를 필요로 하는 복잡한 게임에 이상적입니다.\n\n## 🔹 3. Construct 3\n\n저는 현재 속해 있는 Gamezop에서 Construct 게임 엔진을 처음으로 접했습니다. 처음에는 이런 것을 본 적이 없어서 이상한 경험이었습니다. 우리는 전혀 코드를 작성하지 않으므로요. 하나의 게임 객체에 대해 Construct 게임 엔진에게 이것을 요청하고 다른 것을 다른 것에 요청하는 것처럼 보였습니다. 그런 다음 게임 크리에이터가 무엇인지 알게 되었습니다. Construct는 게임 엔진뿐만 아니라 게임 크리에이터입니다. 코딩 지식이 없어도 Construct를 사용하여 게임을 만들 수 있습니다. 이전에는 소프트웨어를 다운로드하여 우리 기계에서 실행했지만, 이제는 완전히 온라인으로 사용할 수 있고 많은 추가 기능이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기능:\n\n- 프로그래밍이 필요하지 않음; 시각적 이벤트 기반 시스템 사용.\n- 장치에서 접근할 수 있는 클라우드 기반 편집기.\n- 빠른 프로토타이핑 및 개발.\n- HTML5, Android, iOS 등 다양한 플랫폼으로 내보내기.\n- 다양한 플러그인 지원.\n\nConstruct 3은 코드 작성 없이 빠르게 게임을 만들고 싶은 개발자에게 적합합니다. 시각적 스크립팅 시스템을 통해 빠른 개발 및 프로토타이핑이 가능하며, 게임 디자이너, 취미 개발자, 교육 목적에 적합합니다. 2D 게임에 가장 적합하며 비 프로그래머에게 매우 접근하기 쉽습니다.\n\n## 🔹 4. Babylon.js\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n바빌론.js를 Phaser처럼 3D 게임 개발을 위한 도구로 보고 있어요. 바빌론.js 문서에 있는 시작 프로젝트 이외에는 처음부터 게임을 만들어보지 못했어요. 처음에는 코드 중심이었지만, 이제는 시각적 편집기도 도입되어 디자이너와 시각적 인터페이스를 선호하는 개발자들에게 접근하기 쉬워졌어요.\n\n특징:\n\n- 3D 게임 개발에 초점을 맞추고 있어요.\n- 고성능 렌더링을 위한 WebGL 기반.\n- 복잡한 3D 씬을 만들기 위한 다양한 기능.\n- 포괄적인 문서와 예제.\n- 다양한 도구와 프레임워크와의 통합.\n\n바빌론.js는 고품질 3D 게임이나 상호작용 경험을 만들고 싶은 개발자에게 이상적이에요. 3D 그래픽과 WebGL에 대한 충분한 이해가 필요하며, 현실적인 그래픽, VR 경험 또는 복잡한 3D 상호작용이 필요한 프로젝트에 적합해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 🔹 5. Three.js\n\nThree.js은 웹 게임 개발을 위해 가장 뛰어난 3D 게임 엔진 중 하나입니다. Three.js를 사용하여 3D 게임 개발을 마스터하고 싶었는데, 그 인기와 다양한 사용 사례 때문에요. 처음 시작하는 사람들에게는 조금 어려울 수도 있지만, 코드 중심의 프레임워크이기도 하죠. 그래도 언제나 Three.js로 3D 게임 개발을 배우는 것을 권장합니다.\n\n주요 기능:\n\n- 강력한 3D 그래픽 라이브러리.\n- 고성능을 위해 WebGL 기반.\n- 광범위한 예제와 활발한 커뮤니티.\n- 어떤 유형의 3D 콘텐츠도 생성할 수 있는 유연성.\n- 다른 라이브러리와 프레임 워크와 잘 통합됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nThree.js는 웹에서 사용자 정의 3D 경험을 만드는 것을 원하는 개발자에게 좋은 도구입니다. 많은 유연성을 제공하지만 3D 수학과 그래픽 프로그래밍에 대한 튼튼한 이해가 필요합니다. 시각화, 시뮬레이션, 사용자 정의 3D 렌더링이 필요한 게임 등을 만드는 데 적합합니다.\n\n## 🔹 6. PlayCanvas\n\nPlayCanvas는 웹 기반 게임 엔진으로, 소개될 당시 독특한 존재였습니다. 현재 Construct 3도 웹 기반으로 되었지만, PlayCanvas가 처음에 이런 형태로 개발되었습니다. 자체 스크립팅 언어를 갖추고 있으며, 이 엔진을 사용하여 2D 및 3D 게임을 만들 수 있습니다. 나는 어떻게 웹에서 반응성을 갖춘 게임 엔진을 만들었는지 항상 궁금해했습니다. 내가 반응적인 게임을 만들기 어려워하는 동안에도 말이죠.\n\n주요 기능:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 웹 기반 개발 환경.\n- 실시간 협업 및 편집.\n- 3D 게임 개발에 중점.\n- 프로젝트의 쉬운 게시 및 공유.\n- WebGL과의 우수한 성능.\n\n플레이캔버스는 협업 개발 환경이 필요한 3D 게임 또는 인터랙티브 응용 프로그램을 개발하는 팀에 이상적입니다. 웹 기반 편집기를 통해 실시간 협업이 가능하므로 분산된 팀에 적합합니다. 쉬운 공유와 게시가 필요한 프로젝트에 가장 적합합니다.\n\n# 🔄 사용자 유형에 따른 차이점:\n\n![다운로드 이미지](/assets/img/2024-05-27-WhatAretheBestHTML5GameEngines_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Phaser 대 Cocos Creator: Phaser는 시각적 편집기가 없는 코드 중심으로, 모든 것을 수동으로 코딩하는 것을 즐기는 개발자에게 적합합니다. Cocos Creator는 시각적 편집기를 제공하여 디자인 및 레이아웃에 GUI를 선호하는 사람들에게 더 접근하기 쉽습니다.\n\n- Construct 3 대 Phaser: Construct 3는 비 프로그래머나 코드를 작성하지 않고 빠르게 게임을 개발하고자 하는 사람들에게 이상적이며, Phaser는 프로그래밍 지식이 필요하며 사용자 정의 논리에 대해 더 많은 유연성을 제공합니다.\n\n- Babylon.js 대 Three.js: 두 프레임워크 모두 3D 게임에 탁월하지만, Babylon.js는 게임 개발을 위한 내장 기능을 제공하는 더 포괄적인 프레임워크를 제공하며, Three.js는 사용자 정의 3D 렌더링 프로젝트에 대해 더 많은 유연성과 제어를 제공합니다.\n\n- PlayCanvas 대 Babylon.js: PlayCanvas는 협업 웹 기반 환경을 제공하여 팀에 적합하며, Babylon.js는 강력한 독립형 3D 엔진을 제공하고 오프라인에서 작업하거나 자체 도구 체인과 통합하는 것을 선호하는 개발자들에게 더 중점을 둡니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 🏢 게임존의 접근 방식\n\n게임존에서는 다양한 게임 엔진을 활용하여 각 프로젝트의 복잡성과 성격에 맞는 게임 포트폴리오를 만들어냅니다. 현재 저희가 주로 사용하는 게임 엔진은 Cocos Creator입니다. 전 세계의 게임 개발자 및 스튜디오들과 협력하면서, 각 게임 엔진에 대한 철저한 이해와 실무 경험을 가지고 우리의 특정 요구사항을 충족시키기 위한 필요한 조정을 할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-27-WhatAretheBestHTML5GameEngines_0.png"},"coverImage":"/assets/img/2024-05-27-WhatAretheBestHTML5GameEngines_0.png","tag":["Tech"],"readingTime":8},{"title":"모든 RPG에서 늘 같은 실수를 하곤 해","description":"","date":"2024-05-27 16:50","slug":"2024-05-27-IMakeTheSameMistakeinEveryRPG","content":"\n다이아블로 IV는 대부분의 다른 비디오 게임 RPG와 마찬가지로 다양한 플레이 메카닉과 시스템이 풍부합니다. 플레이어들은 다양한 장비, 스킬, 업그레이드, 재사용 대기시간, 회피, 공격 등을 균형 있게 유지해야 하며, 도전으로 가득한 큰 오픈 월드를 탐험합니다.\n\n최근에 출시된 업데이트는 이미 복잡한 게임에 더 많은 메카닉을 추가해 충격적으로 좋았습니다. 새로운 메뉴를 사용하고 수집할 레시피도 추가되었습니다. 그래서 때때로 이 모든 콘텐츠에 내 머리가 얽히기도 하죠, 비록 이것이 아마도 내가 가장 좋아하는 게임 장르일지라도요.\n\n이 복잡한 내용을 대부분 잘 다루며, 버튼이 많은 게임에서도 플로우 상태에 진입하는 데 뛰어납니다. 하지만 포션이라도 사용하는 것을 기억하는 데는 굉장히 별로입니다.\n\n여기서 말하는 것은 단순한 치유 포션이 아니라 게임이 제공하는 다른 어떤 포션이든 말이죠. 다이아블로 IV에서는 다양한 일시적인 스탯 부스트 포션과 엘릭서를 찾거나 제작할 수 있습니다. 이러한 포션들은 경험치 보너스나 추가 공격 속도와 같은 큰 혜택을 제공하며 종종 15분이나 30분과 같은 긴 시간 동안 지속됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n안타깝게도, 이런 유용한 아이템들은 주 인벤토리 페이지보다 더 낮은 위치에 있는 탭에 숨겨져 있습니다. 게임 초반에 한 번만 안내를 받는다는 점이 아쉬울 때가 많아요. 그 이후로 수십 시간을 플레이했는데도, 항상 포션 탭을 확인해봐야겠다는 것을 잊어버리곤 해요.\n\n가끔씩 생각해보게 되면, 다른 번거로운 문제가 생겨요. 나와 많은 RPG 팬들의 머릿속에 있는 작은 도깨비가 나타나는데, 이 도깨비는 어떤 한정된 아이템을 사용하지 말라고 제게 조언해요. \"만약에 추후에 필요할 때를 대비해 두는 게 어때?\" 라며 악몽 같은 미소를 짓죠. \"이 아이템이 주는 보너스를 사용하지 않고 낭비하게 되면 어떡해? 아이템을 낭비하고 싶지 않겠지?\" 그는 의심스러운 주장을 하지만, 매번 이게 이상하게 끌리는 거예요.\n\n이 도깨비 호더 경험을 겪는 사람은 나뿐만이 아니라는 건 알아요. YouTube 채널 VLDL의 코미디 스케치가 이 게임 고난을 잘 표현한 내가 좋아하는 콘텐츠 중 하나에요. 이러한 행동은 게임에서 아이템을 많이 주워들이고 멋진 것들을 수집하도록 가르치는 게임이 대부분인데, 그 후에는 그것들을 지키고 싶은 욕구가 자연스럽죠.\n\n숨겨진 인벤토리 탭 문제는 조금 더 수정 가능해 보여요. 만약 Diablo IV 포션이 UI의 더 자주 액세스되는 부분에 있다면, 기억하기도 쉬울 것 같아요. 아마 그런데 이 도깨비를 설득할 수만 있다면요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n많은 다른 게임에서도 같은 문제를 겪었어요. 작은 스탯 강화 아이템을 사용하는 게임들이 많거든요. 드래곤 에이지 인퀴지션에서는 무기 공격을 강화하는 다양한 물약과 독을 활용할 수 있는데, 그것들은 메뉴 안에서 더 재미난 마법 주문과 능력들 뒤에 숨겨져 있어요. 암살자의 길 리벨레이션에서는 플레이어들이 다양한 작은 투척 무기와 폭탄을 제작할 수 있는 복잡하고 인상적인 시스템이 있는데, 대부분을 사용하지 않는 이유는 게임의 핵심 메커니즘이 더 쉽게 접근 가능했기 때문이에요.\n\nUI 요소들이 잘 숨겨져 있어서 스탯 강화 물약 같은 것들이 게임 경험 전체에 미치는 중요성이 상대적으로 약해질 수 있지만, 이런 것들을 우연히 찾아 사용하면 큰 영향을 줄 수 있다는 걸 자주 깨닫곤 해요. 물론 이러한 작업은 플레이어들에게 더 많은 재미와 전투 이점을 주기 위해 이루어진 거예요. 물론 사용할 만큼 디자인되었지만, 그들이 중요한 요소로 인식되는 건 아니에요. 그래서 저는 재미있는 장식품보다는 정당한 전략으로 그들을 생각하지 않고 마음속에서 후순위로 밀어냅니다.\n\n모든 작은 스탯 혜택을 뽑아내는 것을 좋아하는 플레이어들에게는 반대의 문제가 발생할 수 있어요. 미니 보스를 빠르게 해치우는 완벽한 강화된 원소 공격을 선택할 수 있는데, 메뉴 앞에 정말 강력한 화염구가 있는 것에 제대로 주의를 기울이지 않을 수도 있어요. 모로윈드에서 물약 조합 영상을 보면 플레이어들이 최종 보스로 도약하거나 거의 무적이 되는 놀라운 것들을 할 때가 있어요. 하지만 제게는 항상 굴을 넘어서 검으로 칼을 휘두르고 있는 게 현실이에요.\n\nRPG 장르의 \"장점\" 중 하나는 매력적인 기계적 요소들이죠. 그들은 깊이와 플레이어의 선택지로 충만해요. 모든 시스템에 참여할 필요는 없지만, 가장 좋은 시간을 보내고 싶다면 그들과 상호작용해 보는 게 좋아요. 그래서, 아마 한 번에 모든 이상한 물약과 스탯 강화 아이템을 모두 소비해 보세요. 인벤토리가 완전히 비어질 때까지 모두 사용해 보세요. 다시 채우려면 더 많은 것들을 클릭해서 디지털 가방에 다시 채워 넣을 수 있으니까요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n상기 게임 제작사 중 어느 누구로부터 글을 쓰도록 요청받지도, 돈을 받지도 않았어요. 언급된 모든 게임은 제 자신이 현금으로 구입했습니다.\n","ogImage":{"url":"/assets/img/2024-05-27-IMakeTheSameMistakeinEveryRPG_0.png"},"coverImage":"/assets/img/2024-05-27-IMakeTheSameMistakeinEveryRPG_0.png","tag":["Tech"],"readingTime":4},{"title":"게임이 최고조의 사무라이에 도달했습니다","description":"","date":"2024-05-27 16:49","slug":"2024-05-27-GamingHasReachedPeakSamurai","content":"\n내일 아침에 Sony가 2020년의 널리 알려진 오픈 월드 액션 히트인 Ghost of Tsushima를 PC 런칭할 예정이에요. 이 타이틀은 이전에는 거의 볼 수 없었던 혹은 시도해보지 않은 수준의 정교함과 명성을 사무라이 비디오 게임으로 가져왔어요. PC 플레이어들이 접근할 수 있는 기회를 얻게 되어 기쁘네요... 비록 Helldivers 2로 시작된 계속되는 PlayStation Network 계정 논란에 휩싸여 있다는 점도 있지만요.\n\n소니는 그 일련의 난장판에서 몇 가지 교훈을 얻은 것 같아요. 나는 그들의 사무라이 런칭이 성공적일 것이라 믿어요. 하지만 그렇지 않다면... 혹시 소니의 다른 고급 PS5 사무라이 게임인 Rise of the Ronin을 한번 살펴보시는 건 어떨까요? 이 하드코어 Soulslike 액션, 현대적인 오픈 월드 유행, 그리고 코에이 테크모가 제작한 우스운 요소가 섞인 이 게임은 지금까지 내가 플레이한 최고의 대형 게임이에요. 아름답고 메카닉이 풍부하며 심사능력과 멜로드라마틱한 이야기를 가졌어요. 그 깊은 캐릭터 생성 시스템 덕분에 이 게임 세계에 자신을 투영할 뿐만 아니라, 자신만의 최고의 친구 (또는 가능한 적)를 만들 수도 있답니다.\n\nPS5에 접근할 수 없거나 Sony를 지원하려는 욕구가 없지만, 코에이 테크모의 사무라이 게임이 정확히 당신에게 필요한 것이라고 생각한다면? 정확히 당신을 대변하는 특별한 사람을 위한 좋은 소식이 있어요! 이번 주 초, 코에이 테크모는 2014년의 Samurai Warriors 4 DX의 PC 향상 버전을 일본 외에서 공개하지 않았다는 것을 상기하여, 조용히 Steam에 50달러에 업로드했어요. 이 전에는 일반적으로 허술했던 회사에 대한 인상적인 증명인데요, 온라인 협동도 유지되었으며 완전히 검증된 Steam Deck 지원 역시 있어요.\n\n과거에 코에이가 특정 플랫폼에서 발매를 건너뛰고 불만을 표명해왔고, 또 PC에 게임을 아무 알림도 없이 덤핑하는 이상한 일을 했을 때도 불만을 표했었죠. 이번엔 적어도 새로운 타이틀을 사용하려는 모두가 실제로 사용하는 스토어 플랫폼에 등록해놓았어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n충분한 큰 예산의 사무라이 모험이 아직 부족하다면, 조금 전의 Like a Dragon: Ishin!을 확인해보세요. 이것은 세가의 장기 RPG 시리즈에서 공개된 사이드 게임을 화려한 Unreal Engine 리메이크한 작품입니다. 저는 이 게임을 게임 패스로 플레이했고(마이크로소프트 서비스 지원 중단하기 전), 보았던 것을 정말로 좋아했습니다. Ronin의 부상처럼 이 게임은 현대적인 게임 플레이와 진지한 스토리텔링을 많은 신비한 비디오 게임 재미와 조화롭게 섞어냅니다.\n\n아직 부족하다고요? 그러면 새로 공개된 Assassin’s Creed: Shadows 예고편을 확인해보세요. 이 새로운 AC 게임은 닌자와 사무라이를 따라가며, 후자는 실제 역사적 인물인 Yasuke를 바탕으로 합니다. Ubisoft이 캐릭터를 다룰 때, 시도했던 Koei 시대보다 더 많이 참여함을 바랍니다. 솔직히 말하자면, 이 예고편은 그다지 흥미로운 것 같지 않네요. 이것은 사전 렌더링된 시네마틱인데, 최근 Ubisoft의 출력물들이 정말 멋있어보이지만, 비디오 게임을 정확하게 대표하기에는 영상 속에서 너무 많은 것이 일어나고 있습니다.\n\n이들이 매우 혼잡한 사무라이 트렌드에 참여하는 대담한 움직임이지만, 저는 실제 영상 게임을 보는 대신 화려한 애니메이션에 너무 흥분하기 어려운 부분입니다.\n\n“사무라이”에 모든 칩을 갑자기 거는 이 대기업들이 왜 그렇게 한 것인지 명확히 알지는 못하지만, 소니가 Tsushima로 어떻게 한 것을 보고 “즉시 복사하자!”라고 한 것이라고 추측할 수 있습니다. 이는 2012-2013년의 “활 시대”와 같은 게임 디자인의 수렴 트렌드를 떠올리게 합니다. Tomb Raider 2013, Crysis 3, Far Cry 3와 같은 게임들은 모두 멋진 활과 화살 기술을 이용하여 숨어다니기에 몰두했고, 이러한 선택들의 게임 플레이 결과를 오늘날에 이어가는 스텔스 메커니즘에서 볼 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재의 사무라이 열풍은 게임 디자인에 큰 기여를 하지 않았습니다. 대신, 기존의 트로프를 재배열하고 역사적인 부분과 영화적인 부분을 겹쳐 놓았네요. 사무라이 캐릭터는 게임에서 항상 등장해 왔지만, 보통은 예산이 작은 타이틀이나 케릭터 클래스로 등장합니다. '엘덴 링'과 같이 말이죠. '론인의 부상'을 좋아하는 사람으로서 이런 유행이 계속되게 하는 쪽에 동참하고 있지만, 다른 유행이 지나왔던 것처럼 곧 사라질 것으로 보입니다.\n\n게임 회사들은 이런 유행을 식별하여 관객들로부터의 호의를 모조리 끝내기 전까지 소모하는 경향이 있습니다. 팬들의 관심을 잃기 전까지 모든 가능한 것을 사용해 버린 후에야 다음으로 넘어가는 거죠. 베팅이 커지고 위험이 더 커질수록 이런 문제가 더욱 악화되는 것 같습니다. 타이틀을 내걸 확실한 IP가 없다면 검증된 유행이 그 다음으로 낫습니다. 문제는 이제 \"AAA\" 게임을 만드는 데 너무 오랜 시간이 걸리기 때문에 시장에 선보이기 전에 이미 유행이 사라질 수 있다는 점이죠.\n\n나는 유비소프트가 아마도 '사무라이' 문을 마지막으로 지나갈 것이라고 생각합니다. 이제 \"좋아, 이러니 좀 어처구니 없네\"라고 말할 때쯤이겠네요.\n\n시애틀에서 일본인이 아닌 사람들에 의해 만들어진 '쓰시마'에 대해 처음에는 꽤 의심이 많았습니다. 그러나 잘 나온 것 같아요. '어쌔신크리드: 그림자' 역시 백인 크리에이터들이 많이 참여하고 있어 조심스럽게 여겨봅니다. 헌사와 익명의 도용 사이에는 섬세한 선이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우비소프트는 자사의 일본 스튜디오가 참여하고 있다고 반복해서 말했다. 하지만 우비소프트는 전 세계 어디에서든 일하는 수천 명의 인원을 보유하고 있는 것을 알고 있어요. 이들은 이전 몇 작품에서 흰 여성을 검 여성 역할에 캐스팅한 적이 있었는데, 저는 개인적으로 그것이 실수였다고 생각하며, 그들이 목표로 했던 대표성을 싸게 만들었다고 생각해요. 서양인들이 이를 정확하게 하기도 하지만 완전히 잘못하기도 한 것을 알기에, 우비소프트가 이를 망칠까봐 걱정돼요.\n\n아마도 AC: Shadows에 대해 실제 비디오 게임처럼 보이는 것을 보여줄 때 너무 흥분할 수도 있겠죠. 하지만 여러분들의 마음을 사로잡지 못할 것입니다.\n\n저는 위에서 소개된 플레이 중인 게임들에 대해 언급하도록 위에서 언급된 사무라이 게임 제작자 중 어느 누구로부터 돈을 받거나 요청받지 않았어요. 위에서 언급된 제목들은 제 개인 자금으로 구매했고 플레이했어요.\n","ogImage":{"url":"/assets/img/2024-05-27-GamingHasReachedPeakSamurai_0.png"},"coverImage":"/assets/img/2024-05-27-GamingHasReachedPeakSamurai_0.png","tag":["Tech"],"readingTime":5},{"title":"게임 메카닉의 원자론","description":"","date":"2024-05-27 16:48","slug":"2024-05-27-AtomicTheoryofGameMechanics","content":"\n![Atomic Theory of Game Mechanics](/assets/img/2024-05-27-AtomicTheoryofGameMechanics_0.png)\n\n2차 패턴 언어 게임 디자인의 2판에서, 게임 메카닉에 초점을 맞춘 고급 패턴 연습을 제시할 것입니다. 두 가지 모두 중요하고 구분됩니다. 이러한 연습의 구조는 이전 섹션보다 더 고급입니다. 이 중 많은 연습이 그룹이 수행하는 것이 가장 좋고, 개인에게는 매우 어려우며 시간이 많이 소요됩니다. 여기서 메카닉에 초점을 둔 것도 중요한데, 과거 연습의 언어를 사용하여 메카닉 기반 패턴과 기능적 패턴을 유도하는 과정이 구별됩니다. 이러한 패턴의 씨앗을 선택할 때 개념적 설계 작업을 더 많이 수행해야 하며, 연습 자체는 더 고급 분석적 설계를 요구합니다.\n\n디자인 패턴은 게임 디자인의 여러 다양한 측면에 적용할 수 있음을 보셨습니다. Adams와 Dormans의 작업은 이러한 아이디어를 게임 시스템에 성공적으로 적용했습니다. 그들의 패턴은 게임 메카닉: 고급 게임 디자인에서 발견되는데, 물론 메카닉에 초점을 맞추고 있습니다. 그들의 언어는 게임 시스템을 경제로 보고 해당 구현에 경제학 원리를 적용하는 주로 상위 수준의 일반 시스템 패턴을 서술합니다. 그 접근 방식은 가치 있는데, 저는 이후에 이러한 프레임워크 중 일부를 채택합니다. 그러나 Jesse Schell의 언어로 렌즈 또는 방법을 제시하여 다양한 추상화 수준과 구체성에서 게임 메카닉 패턴을 제시할 계획입니다.\n\n저는 노스이스턴 대학에서 사용하도록 개발 중인 '게임 메카닉 및 시스템 디자인' 강의용으로 게임 메카닉을 조사하기 시작했을 때, 게임 메카닉의 폭넓지만 전혀 철저하지 않은 목록을 작성하는 것부터 시작했습니다. 이 목록에는 다음과 같은 것들이 포함되어 있었습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 뛰기\n- 점프\n- 공격\n\n이런 것들은 표면적으로는 간단해 보이지만, 조금 더 신중히 살펴보면 더 복잡해 보입니다. 예를 들어, 걷기와 뛰기 사이에는 어떤 차이가 있는가요? 뛰기에는 대시가 포함됩니까? 점프에는 더블 점프나 공중 대시가 포함되나요? 뛰기는 점프와 어떻게 상호 작용하나요? 이러한 것들이 2D, 3D, 일인칭, 혹은 등각 게임에서는 어떻게 다른가요?\n\n그래서 나는 이 목록을 반복하여 각각을 세부적으로 분해하여 구성 요소를 파악했습니다. 결국 훨씬 더 긴 목록이 되었습니다. 그런데 심지어 그 중 하나를 살펴보니 더 작은 기계적 구성 요소들로 이루어져 있다는 것을 알게 되었습니다. 어느 순간에는 '움직임 벡터', '지면 마찰', 중력과 같은 것들을 설명할 정도로 미세한 '기계적 구성 요소'들로 이루어진 목록이 생겼습니다.\n\n나에게는 이것들이 단일한 기계적 요소를 설명하기에는 충분하지 않아 보였으며, 최상위 수준에서는 '움직임'이나 '전투'와 같은 것들이 기계적으로 만들어진 시스템으로 이루어진 것처럼 개별적인 기계적 요소가 아니라는 것이 보였습니다. 따라서, 이 모든 것은 기계적 설계의 계층 구조를 시사한다고 보았습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n가장 높은 수준에서 게임 시스템이 있습니다; 이들은 게임플레이의 완전한 부분을 설명합니다; Ori and the Blind Forest에서의 이동이나 Doom Eternal에서의 전투와 같은 것을 생각해보세요. 이러한 시스템은 더 단순하지만 더 집중된 Compound Mechanics로 분해됩니다​​. Doom Eternal의 총 쏘기나 Ori에서의 점프와 같은 것입니다. 이러한 Compound Mechanics는 Atomic Mechanics의 모음으로 구성되어 있습니다; 이들은 매우 구별되고 제한적인데요, Ori에서의 한 번의 점프나 Doom Eternal의 조준과 같은 것입니다. 이 Atomic Mechanics은 더 자세히 분해 될 수 있지만, 그것들의 서브-원자적 부품은 한 가지 메카닉을 설명하지 않으며, 매개변수에 더 가까워집니다. 이러한 매개변수의 개념은 더 많은 고민을 필요로 합니다. 매개변수는 것을 측정하며, 변수에 저장하고 적용합니다. 이것은 Adam과 Dormans가 경제적으로 초점을 맞춘 패턴 언어에 설명한 자원과 비슷해 보입니다. 여기서 제가 설명하는 패러다임에서, 이러한 자원은 Atomic Mechanics이 서로 상호 작용하여 Compound Mechanics을 형성하고, Compound Mechanics이 Game Systems을 형성하는 방식이 됩니다. 이 전체 과정을 거치는 이점은 이제 이러한 자원, Atomic 및 Compound Mechanics, 그리고 Game Systems를 팔로우하게 될 패턴 생성 연습에서 씨앗으로 사용할 수 있다는 것입니다. Atomic Mechanic을 지배하는 패턴을 생성하거나, Compound Mechanic 또는 Game System의 형성을 안내하거나, 자원의 효과를 설명하는 패턴을 만들 수 있습니다. 이러한 패턴은 그 자체로 유용할 뿐만 아니라, 특정 게임의 복잡한 디자인 문제를 설명하는 패턴 언어를 작성할 수 있는 구조를 제공하기 시작합니다. 다음 몇 개의 기사에서는 이러한 메카닉 패턴 연습 중 일부를 소개하고, 언어의 형성과 구조에 어떻게 그 특성을 활용할 수 있는지에 대해 논의할 것입니다.\n","ogImage":{"url":"/assets/img/2024-05-27-AtomicTheoryofGameMechanics_0.png"},"coverImage":"/assets/img/2024-05-27-AtomicTheoryofGameMechanics_0.png","tag":["Tech"],"readingTime":4},{"title":"직장 스트레스가 비용 손해를 야기하고 있습니다 이를 줄이는 5가지 전략을 소개합니다","description":"","date":"2024-05-27 16:46","slug":"2024-05-27-WorkplaceStressIsCostingYouHereAre5StrategiesToReduceIt","content":"\n![Workplace Stress](/assets/img/2024-05-27-WorkplaceStressIsCostingYouHereAre5StrategiesToReduceIt_0.png)\n\n일은 우리 삶의 큰 부분입니다. 잘 하면 기쁨의 원천이 될 수 있습니다. 그러나 처리가 잘못되면 종종 스트레스, 불안 및 불만을 일으킬 수 있습니다.\n\n일에서 약간의 스트레스를 피하기는 불가능하며, 노력할 필요도 없습니다. 결국 모든 스트레스가 나쁜 것은 아닙니다. 종종, 가치 있는 일을 하고 있다는 신호를 보여줍니다. 가치를 추가하고 영향을 창출하는 데 관심이 있는 것을 보여줍니다. 스트레스는 당신을 활력 있게 만들어 일어나는 일을 성취할 노력을 기울일 수 있도록 해줄 수도 있습니다.\n\n그러나 만약 스트레스로 인해 기능 저하가 되었다면 어떻게 해야 할까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n의미 있는 기여를 하는 데 방해가 될까요?\n\n만들어내는 것이 기쁨을 주는 대신 직장 스트레스가 에너지를 빼앗고 동기부여에 해를 끼칠까봐 걱정이신가요?\n\n일하는 동안 스트레스를 느끼게 하는 다양한 이유가 있을 수 있습니다.\n\n악한 사람들이나 유해한 기업 문화로 인한 스트레스와 같이 제어할 수 없는 스트레스도 있을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 권력 동태\n- 심한 동료들\n- 미세관리 상사\n- 과중한 업무 부담\n\n다른 스트레스 요인은 대부분 귀하의 통제 범위 내에 있습니다. 이는 다양한 업무 사건에 대한 대처 방법과 응답 방식과 관련이 있습니다.\n\n- 인간관계 갈등을 어떻게 관리하시나요?\n- 어려운 상황이나 예기치 않은 상황에 직면했을 때 어떻게 대처하시나요?\n- 공격적인 마감일을 어떻게 처리하시나요?\n- 스트레스가 종종 당신의 미루기와 임박한 마감일을 충족하기 위해 마지막 순간에 서둘러하는 데 어떤 영향을 미치나요?\n- 압박 속에서 어떻게 성과를 내시나요?\n- 자신과 타인에게 높은 기준을 설정하고 이러한 기준을 달성하지 못해 스트레스를 느끼시나요?\n- 집중하기가 어려운 편이며 자신의 환경에 방해를 받아 작업에 과도한 시간과 노력을 들이지만 원하는 결과를 얻지 못해 스트레스를 느끼시나요?\n- 위장하는 사람으로 느끼며 다른 사람이 자신이 사기꾼임을 알게 될까봐 회피하기 위해 지나치게 노력하시나요?\n- 무질서함이 생산성에 악영향을 끼쳐 업무 성과에 대해 걱정하고 스트레스를 느끼시나요?\n- 여러 일을 이리저리 바쁘게 하다보니 집중력을 놓치는 버릇이 있으며 더 집중하고 차분해져야 한다고 느끼시나요?\n\n무슨 이유에서든지, 연구에 따르면 처리되지 않은 스트레스는 신체와 정신 건강 문제로 이어질 수 있습니다. 업무에서 생산성과 성과에 영향을 미칠 수 있습니다. 주변 사람들에게도 영향을 미칠 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 직장 스트레스 관리를 위한 5가지 전략\n\n당신이 통제할 수 없는 것들로 인한 스트레스는 이야기하지 않겠습니다. 엉망인 상사나 사내 정치, 또는 다른 해로운 문화적 요소로 인한 스트레스는 다른 직장으로 옮겨가는 것 외에 다른 선택지가 없다고 생각합니다. 이 문제에 대해 불평할 수 있지만, 만약 당신의 스트레스가 조직 내에서 더 큰 문화적 문제로 인한 것이라면 시간이 지나도 나아지지 않을 것입니다. 당신은 단호한 입장을 취하고 다른 직장을 찾지 못할 것을 두려워하지 않고 전환에 시간과 에너지를 투자해야 합니다.\n\n그럼, 제어할 수 있는 것들에 대해 이야기해보죠. 몇 년 동안 저에게 효과가 있었던 스트레스 관리 전략을 소개합니다.\n\n## 1. 사소한 것들을 버리세요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자주 직장 스트레스는 삶의 작은 일에 지나치게 신경쓰는 데서 비롯됩니다—오랜 시간이 지나면 사실 크게 중요하지 않은 일들입니다. 당신은 이런 것들에 신경을 쓰지 않지만 그 순간에는 삶과 사망의 문제처럼 느껴질 수도 있습니다.\n\n가끔은 자아가 방해가 되기도 하고, 때로는 무슨 문제든 당신의 시간과 관심을 받을 가치가 있는지 깨닫지 못합니다. 이런 사소한 미묘함으로부터 자신을 격리시킬 수 있는 많은 기회가 있지만, 이런 상황에 점점 더 올라타게 됩니다.\n\n삶 속의 사소한 일에 빠져들어 정신적 고통을 겪는 것을 피하려면, 다음 질문을 스스로에게 물어보세요:\n\n- 왜 이런 감정을 느끼게 되었는가?\n- 이 상황은 내가 통제할 수 있는 범위 내에 있는가?\n- 왜 이것이 나에게 중요한가?\n- 내가 이에 대해 더이상 신경 쓰지 않게 되면 어떻게 될까?\n- 일 년 후의 내 자신을 바라봤을 때, 왜 지금 이게 중요한가?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n스트레스의 원인을 알면 시간과 주의를 훔치지 않아도 되는 사소한 일로부터 자유로워질 수 있어요.\n\n## 2. 자신의 시간과 일정을 통제하세요\n\n일하는 동안 시간을 어떻게 보내는지 통제하지 못하는 것은 직장에서의 불안과 스트레스의 숨겨진 원인 중 하나입니다.\n\n과도한 회의와 바쁜 달력으로 가득 찬 바쁜 스케줄은 중요한 느낌을 주지만, 목표를 향해 전진시키는 데는 아무것도 도와주지 않아요. 그 대신, 중요한 일을 달성하지 못한 바쁜 날은 당신에게 효율적이고 적당한 느낌을 주게 될 거예요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n가정에서 스트레스 받는 아침은 직장으로 옮겨 올 수도 있습니다. 건강한 아침 식사를 챙기는 데 충분한 시간이 없고 아이들을 학교에 데려다 주며 회의 참석 시간을 맞추느라 고생할 때가 있습니다. 이러한 계획 부족은 업무에서 다양한 사건에 대한 대응 방식에도 영향을 미칩니다. 아침에 스트레스를 받고 시작하면 특히 조금의 기대 불일치나 업무에서의 불편함도 당신을 힘들게 할 수 있습니다. 주변의 모든 것이 무너지는 것 같다는 느낌을 받을 수도 있으며, 이로 인해 스트레스와 불안감이 더해질 수 있습니다.\n\n이러한 일은 의식적으로 하루를 계획하고 우선순위를 정하지 않을 때 자주 발생합니다. 제가 말하고 싶은 것은 계획을 세웠다고 해서 문제가 발생하지 않을 것이라는 것은 아닙니다. 그러나 계획을 세워두면 우연에 좀 더 남기고 당신이 대응 방식을 선택할 수 있는 정신적 공간을 제공해줍니다.\n\n일정에 대한 더 나은 통제를 통해 당신은 앞으로 나아가는 데 도움이 되고 스트레스가 스며들기 어려운 작업을 선택하고 수행할 수 있습니다.\n\n## 3. 명확함을 추구\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n직장에서 효과가 없다는 느낌은 소진의 중요한 원인 중 하나입니다. 당신이 어떤 것이 당신에게 기대되는지 모르거나 당신의 일이 팀의 목표에 어떻게 적합한지 알지 못하면 중요한 것을 달성하기 어려울 수 있습니다.\n\n진전 부족과 목적 및 의미 부족은 주로 목표에 대한 더 많은 명확성과 그 목표를 달성할 기회가 필요하기 때문에 발생합니다. 이는 무능감, 소속감 상실, 직업에 대한 냉소주의 및 부정적인 태도를 유발하여 스트레스로 이어질 수 있습니다.\n\n당신이 필요로 하는 명확성을 다른 사람이 제공하길 기다리는 대신 더 적극적으로 명확성을 추구하세요. 당신의 감정은 다른 사람에게 투명하지 않으며 사실, 모든 사람들이 자신의 업무 일정으로 바쁘기 때문에 당신이 필요한 것이나 이해하지 못하는 부분에 대해 인지하기 어렵습니다.\n\n스트레스를 피하기 위해 명확성을 강조하세요. 당신의 역할, 업무 기대치 및 목표를 이해하기 위해 더 나은 질문을 하고—관리자와 정기적인 피드백을 받기 위해 시간을 예약하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n작업 중에 명료성을 유지하면 긍정적인 변화가 가능해져 부정적인 감정과 스트레스가 줄어듭니다.\n\n## 4. 어려운 대화에 당당히 맞서보기\n\n조직에서 하는 많은 작업은 다른 팀과 부서 간의 협력을 필요로 합니다. 다른 사람들과 협력하는 것은 배우고成長하는 좋은 기회를 제공하지만, 그로 인해 스트레스가 발생할 수도 있습니다.\n\n의견 차이는 논쟁으로 이어질 수 있습니다. 충돌하는 우선순위, 일정이 겹치거나 기대치가 맞지 않으면 사람들이 자신의 아이디어를 구현하는 시간보다 논쟁하는 시간이 더 많아질 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이러한 갈등들이 불러일으키는 부정적인 감정들은 당신이 머리를 모래 속에 파묻을 수도 있게 할 수 있어요. 이런 경우 당신은 그 감정들을 다루기를 피하려 할지도 모르고, 그것들을 해결하지 않으려 하거나 그냥 사라질 것을 희망하며 미룰지도 모릅니다. 그러나 피하거나 아무것도 하지 않음으로써 문제는 더 악화될 뿐입니다 — 사소한 문제가 심각한 문제로 발전하여 조율을 찾기 어려워집니다. 그리고 조율이 이루어지지 않으면 중요한 일은 결코 해결되지 않습니다.\n\n그러므로, 만약 당신이 갈등을 피하기를 선호한다면, 그렇게 하지 마세요. 당면한 문제에 당면하세요. 대화를 나누세요. 상대방의 의견을 이해하려 노력하세요. 이러한 질문들을 던져보면 상황을 다루는 데 도움을 받을 수 있고, 그 문제들을 무시함으로 발생하는 스트레스를 피할 수 있습니다:\n\n- 내가 느끼는 감정은 무엇인가요 — 분노, 슬픔, 혐오, 두려움...\n- 왜 이런 감정을 느끼나요?\n- 갈등에 직면하고 있나요?\n- 이러한 감정이 현재 제게 어떤 영향을 끼치나요?\n- 이 갈등은 어떤 것을 촉발하나요?\n- 제가 이루려는 것이 무엇인가요, 혹은 잃을까 두려운 것이 무엇인가요?\n- 제 의견을 바꾸게 할 요소는 무엇인가요?\n- 만약 제가 틀렸다면 어떨까요?\n- 다른 사람이 이렇게 생각하게 하는 것은 무엇인가요, 제가 놓치고 있는 것은 무엇인가요?\n\n## 5. 부정적인 생각 다시 평가하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당신의 의도와는 다른 일이 벌어질 때 어떻게 되는지 궁금하신가요? 그런 상황에 대한 즉각적인 반응이 최악의 결과를 상정하는 것이 아니었나요? 사건을 과장시키지 않았나요?\n\n예상치 못한 일에 대비하지 않는 것은 어려운 일일 수 있습니다. 보통과 다른 작은 변화나 상황의 약간의 변화라도 당신을 매우 불안하고 스트레스를 받게 할 수 있어서 명확하게 사고할 수 있는 능력을 왜곡시킬 수 있습니다.\n\n부정적인 마음가짐은 파괴적인 행동 패턴(미루기, 탓, 산만)을 반복하게 만들어 귀하의 결과를 해치며 더 부정적인 생각을 유발할 수 있습니다. 이는 다시 부정적인 신념을 강조하고 특정한 감정을 느끼는 데 옳았다고 확신하게 만들어 버립니다. 이것은 종종 자기 성취 예언(self-fulfilling prophecy)의 역할을 합니다.\n\n스트레스를 관리하기 위해 부정적인 감정에 압도될 때 어쩌면 좋을지에 대해 이렇게 해보세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 그 감정들을 받아들이세요. 그것들을 무시하지 마세요.\n- 당신의 마음이 만들어낸 것일 뿐이며 항상 옳은 것은 아닐 수 있다는 것을 인정하세요.\n- 왜 그렇게 느끼게 되는지 의심하고 이해하려고 노력하세요. 왜 그렇게 느끼는 것이 옳다고 생각하는 건가요? 당신이 옳다고 생각하는 부분과 틀릴 수도 있는 부분은 무엇인가요?\n- 상황을 재평가하세요. 그 정도가 꼭 그렇게 나쁜 것일까요? 다른 타당한 대안이나 설명을 사용해서 상황을 평가해보세요.\n\n## 요약\n\n- 직장에서 스트레스를 유발하는 요인을 이해하지 못하고 적극적으로 조치를 취해 스트레스를 관리하지 않으면, 신체적이나 정신적 안녕에 영향을 줄 수 있어 업무 효율성과 성과에 악영향을 미칠 수 있습니다.\n- 스트레스를 유발하는 것들은 조직의 독성이 있는 근무 환경과 같이 당신의 통제 범위를 벗어날 수 있습니다. 자책에 시간을 보내는 대신 움직이세요.\n- 스트레스의 상당 부분은 당신이 통제할 수 있는 요소로부터 비롯됩니다. 이 사실을 인정하는 것이 상황에 대한 책임을 질 수 있는 유일한 방법입니다. 이를 통해 상황을 줄이기 위해 적극적 조치를 취할 수 있습니다.\n- 너무 사소한 것들에 너무 많은 주의를 기울이면 많은 스트레스가 올 수 있습니다. 본질적인 것과 아닌 것을 구별하고 사소한 문제에 신경 쓸 필요성을 멈추세요.\n- 의식적으로 시간과 에너지를 소비할 계획을 세우세요. 일정을 통제하는 것이 스트레스의 침투 여지를 줄입니다.\n- 진척, 목적 및 소속감을 느끼지 못하면 틀림없이 스트레스를 받을 것입니다. 명확성을 적극적으로 추구하세요. 그것은 그 간극을 메꾸어 행복, 만족 및 성취감을 갖도록 도와줍니다.\n- 상황을 악화시키는 갈등을 피하는 대신 어려운 대화를 나누는 용기를 연습하세요. 미해결된 감정으로 인한 많은 스트레스를 피할 수 있습니다.\n- 마지막으로, 우연히 일이 잘 안 풀리는 경우, 부정적 결론을 내리기 전에 일시 중단하고 상황을 재평가하세요. 대부분의 경우, 처음에 보이는 것만큼 상황이 나쁠 필요는 없습니다.\n\n더 많은 이야기를 위해 여기와 LinkedIn에서 저를 팔로우하세요. 본 이야기는 https://www.techtello.com에서 원래 게재되었습니다.\n","ogImage":{"url":"/assets/img/2024-05-27-WorkplaceStressIsCostingYouHereAre5StrategiesToReduceIt_0.png"},"coverImage":"/assets/img/2024-05-27-WorkplaceStressIsCostingYouHereAre5StrategiesToReduceIt_0.png","tag":["Tech"],"readingTime":10},{"title":"판타지 테크 직장 그만두기","description":"","date":"2024-05-27 16:45","slug":"2024-05-27-FantasyQuittingaTechJob","content":"\n![Image](/assets/img/2024-05-27-FantasyQuittingaTechJob_0.png)\n\n요즘 생생한 환상을 많이 꾸었어요. 정말 멋진 라면과 커피를 꿈꿨는데, 그 이상으로도 꿈꾸고 있어요.\n\n솔직히 말해서, 제 현 직무에서 떠나며 원하는 복수를 하는 상상을 하고 있어요.\n\n걱정 마세요, 이런 행동은 하지 않을 거니까요 — 어떤 직장을 찾아 새롭게 시작할 때 하고 싶은 일에 대해 상상하는 중이에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 한 방향의 부재\n\n지금 하는 챕터 작업이 충분히 좋지 않다고 듣고 있어요. 티켓에 한 줄이 있고, 시니어 개발자와 논의한 대로 데모가 작동 중이라고 말했어요. 상사께서 더 많은 질문을 던지는 것이 내 책임이라고 말씀하셨어요.\n\n혼자 한 분만으로 한 마디 하고 싶어요. 퇴사 신청서를 보냈어요.\n\n# 지금 말해요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저는 회의 중에 발언하는 것을 허락받지 못하는 상황이었어요.\n\n받았던 것에 참지 못하고 그 자리에서 퇴사 선언을 했죠.\n\n# Cry Me A River\n\n매니저에게 빠른 5분을 요청하며 눈물을 글썽이며 사임서를 쓰다가 제출했어요. 그 이후로 그들에게 연락하지 않았죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 한 번 더 나를 반복해줘\n\n나는 회의에 참석해서 그룹이 현재 겪고 있는 일반적인 문제의 해결책을 제시하고 싶어.\n\n내 동료들이 나를 반복하면, 나도 그들을 반복할 거야. 그런 다음 그들이 나에게 말하는 대로 반복하기 시작할 걸.\n\n몇 번의 회의를 통해 이것을 반복하면 나는 공식적으로 퇴사할 필요가 없겠군.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 현실\n\n솔직히 말해서, 난 진짜로 그게 유일한 방법이야. 전문적으로.\n\n분명히 나는 복수퇴사를 하는 게 좋은 생각인지 물어보고 ChatGPT에게 이것을 결론으로 도출했는데, IT 세계가 작을 수 있다는 경고를 계속 받고 있어서 그냥 관계를 끊는 일은 좋은 생각이 아니라고 하더라고.\n\n그래서 이렇게 될 것 같아. 내 매니저에게 5분만 해달라고 부탁하고 나가겠다고 하고, 그리고 이메일로 퇴사서를 보낼 거야.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n내 쓴 말 중 서글픔을 느끼게 할 단서는 나는 어디로 가는지 말하지 않겠다는 점밖에 없습니다. 하지만 '다른 곳에 간다'고 말하는 것보다 더 전문적인 거겠죠?\n\n비밀의 개발자는 마침내 의도된 대로 게임을 플레이하는 법을 배우고 있어요.\n\n# 결론\n\n네, 취직을 지원했어요. 말했어. 가야할 때가 되어서 불필요한 문제를 일으키지 말아야 하겠죠. 이 게임에서 다시 만날 수도 있으니까요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 저자 소개\n\n프로 피소프트웨어 개발자인 \"시크릿 개발자\"는 Twitter에서 @TheSDeveloper로 찾을 수 있으며, 주로 Medium.com을 통해 기사를 정기적으로 발행합니다.\n\n시크릿 개발자는 매우 빠른 시일 내에 자신의 직장을 그만둘 수 있기를 희망합니다.\n","ogImage":{"url":"/assets/img/2024-05-27-FantasyQuittingaTechJob_0.png"},"coverImage":"/assets/img/2024-05-27-FantasyQuittingaTechJob_0.png","tag":["Tech"],"readingTime":3},{"title":"마이크로서비스 아키텍처에서의 소통 스타일 가이드","description":"","date":"2024-05-27 16:41","slug":"2024-05-27-AGuidetoCommunicationStylesinMicroservicesArchitecture","content":"\n![A Guide to Communication Styles in Microservices Architecture](/assets/img/2024-05-27-AGuidetoCommunicationStylesinMicroservicesArchitecture_0.png)\n\n마이크로서비스 아키텍처에서 의사소통은 중요한 요소로, 다양한 토론이 진행되어 상호 서비스 상호 작용에 대한 가장 효과적인 방법을 선택하는 데 초점을 맞춥니다. 이 입문용 블로그 포스트에서는 마이크로서비스를 위한 최적의 의사소통 전략을 탐색하고 요약하여 언제 어디서 각 의사소통 스타일을 효과적으로 활용해야 하는지에 대한 통찰을 제공할 것입니다.\n\n# 상호 작용 스타일\n\n마이크로서비스 아키텍처 내에서 서비스가 어떻게 의사소통하는지 효과적으로 이해하기 위해 사용 가능한 상호 작용 스타일에 익숙해지는 것이 중요합니다. 각 스타일은 고유한 장단점을 가지고 있습니다. 이러한 세부 사항을 정확히 이해하는 것은 서비스에 가장 적합한 의사소통 메커니즘에 대한 정보를 얻기 전 중요합니다. 이 기본 지식은 선택한 방법이 시스템의 특정 요구 사항과 도전에 잘 부합되도록 보장합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러나 상호 작용 스타일은 두 가지 측면으로 분류할 수 있어요. 첫 번째 측면은 상호 작용이 일대일인지 일대다인지에요:\n\n- 일대일 — 각 클라이언트 요청이 정확히 한 서비스에서 처리돼요.\n- 일대다 — 각 요청이 여러 서비스에서 처리돼요.\n\n두 번째 측면은 상호 작용이 동기식인지 비동기식인지에요.\n\n- 동기식 — 클라이언트는 서비스로부터 적시에 응답을 기대하며 대기하는 동안 차단될 수 있어요.\n- 비동기식 — 클라이언트는 차단되지 않고, 응답이 있다면 즉시 전달되지 않을 수도 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 서로 다른 차원을 보여주는 표입니다.\n\n각각에 대해 간단히 얘기해 봅시다.\n\n## 일대일 상호작용\n\n- 요청/응답 — 서비스 클라이언트가 서비스에 요청을 보내고 응답을 기다립니다. 클라이언트는 시시각각 응답이 도착할 것으로 기대합니다. 대기하는 동안 블록될 수도 있습니다. 일반적으로 서비스가 서로 긴밀하게 결합되어 있는 상호작용 방식입니다.\n- 비동기 요청/응답 — 서비스 클라이언트가 요청을 보내고, 서비스가 비동기적으로 응답합니다. 클라이언트는 대기하는 동안 블록되지 않습니다. 왜냐하면 서비스가 응답을 오랫동안 보내지 않을 수도 있기 때문입니다.\n- 일방향 통지 — 서비스 클라이언트가 요청을 보내지만, 응답을 기대하거나 보내지 않습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 일대다 상호작용\n\n- 발행/구독 — 클라이언트가 알림 메시지를 발행하고, 이를 관심 있는 서비스가 소비합니다.\n- 발행/비동기 응답 — 클라이언트가 요청 메시지를 발행하고, 그리고 나서 관심 있는 서비스로부터 일정 시간 동안 응답을 기다립니다.\n\n# 동기적 원격 프로시저 호출 패턴을 사용한 통신\n\n클라이언트가 서비스에 요청을 보내고, 서비스는 요청을 처리한 후 응답을 되돌립니다. 일부 클라이언트는 응답을 기다리는 동안 블록될 수 있으며, 다른 클라이언트는 반응적인 논블로킹 아키텍처를 가지고 있을 수 있습니다. 그러나 메시징을 사용할 때와는 다르게, 클라이언트는 응답이 시간 이내에 도착할 것이라고 가정합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 다이어그램은 RPI 작동 방식을 보여줍니다. 클라이언트의 비즈니스 로직은 PRI 프록시 어댑터 클래스에 구현된 프록시 인터페이스를 호출합니다. RPI 프록시는 서비스에 요청을 보냅니다.\n\n요청은 RPI 서버 어댑터 클래스에 의해 처리되며, 이 클래스는 인터페이스를 통해 서비스의 비즈니스 로직을 호출합니다. 그런 다음 RPI 프록시에 응답을 보내고, 프록시는 클라이언트의 비즈니스 로직에 결과를 반환합니다.\n\n프록시 인터페이스는 일반적으로 기본 통신 프로토콜을 캡슐화합니다. 선택할 수 있는 다양한 프로토콜이 있습니다. 여기서는 가장 인기 있는 REST와 gRPC 프로토콜에 중점을 두고 있습니다.\n\n# REST API\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nREST에서의 중요한 개념 중 하나는 자원(resource)입니다. 자원은 일반적으로 고객(Customer)이나 제품(Product)과 같은 단일 비즈니스 객체 또는 비즈니스 객체 모음을 나타냅니다. REST는 자원을 조작하기 위해 HTTP 동사를 사용하며, 이는 URL을 사용하여 참조됩니다. 예를 들어 GET 요청은 자원의 표현을 반환하며, 이는 종종 XML 문서 또는 JSON 객체 형식으로 제공되지만 바이너리와 같은 다른 형식을 사용할 수도 있습니다. POST 요청은 새 자원을 생성하고, PUT 요청은 자원을 업데이트합니다.\n\nREST API에서의 과제\n\n- 하나의 요청으로 여러 자원 검색하기\n  REST 자원은 종종 고객(Customer) 및 주문(Orders)과 같은 비즈니스 객체에 집중하기 때문에 하나의 요청으로 여러 관련 객체를 검색하는 것이 어려울 수 있습니다. 예를 들어 주문과 해당 고객을 얻기 위해서는 일반적으로 여러 API 호출이 필요합니다. 공통적인 해결책은 고객이 연관 자원을 단일 호출로 가져올 수 있도록 API를 개선하는 것입니다. \"expand\" 쿼리 매개변수를 사용하여 관련 자원을 지정하는 GET 요청을 이용하는 것이 일반적입니다. 많은 경우에 효과적이지만 이 방법은 구현하기 복잡하고 시간이 소요될 수 있으며, 이로 인해 데이터 검색을 보다 간편하게 하는 GraphQL과 같은 대안 기술의 등장에 영향을 미쳤습니다.\n- 작업을 HTTP 동사에 매핑하기\n  REST API 설계에서 주목할 만한 도전 과제는 비즈니스 객체에서 특정 작업을 올바른 HTTP 동사에 할당하는 방법입니다. 예를 들어, 주문 업데이트는 취소 또는 수정과 같은 다양한 작업을 수반할 수 있으며, 모든 업데이트가 반드시 멱등성(idempotent)을 보장하는 것은 아닙니다. 이는 HTTP PUT 방법을 사용하는 데 필요합니다. 일반적인 접근 방식은 구분된 업데이트 작업을 위한 하위 자원을 생성하는 것입니다. 예를 들어, 취소(POST /orders/'orderId'/cancel)나 수정(POST /orders/'orderId'/revise)에 POST를 사용하는 것입니다. 또 다른 방법은 작업을 URL 쿼리 매개변수로 포함하는 것입니다. 그러나 이러한 방법은 REST 원칙을 완전히 준수하지 않을 수 있습니다. 작업을 HTTP 동사에 매핑하는 점의 어려움은 gRPC와 같은 대체 기술의 인기에 영향을 미쳤습니다.\n\n## REST의 장단점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nREST를 사용하는 것에는 많은 이점이 있습니다:\n\n- 간단하고 익숙합니다.\n- 예를 들어 Postman 플러그인을 사용하여 브라우저 내에서 HTTP API를 테스트하거나, JSON 또는 다른 텍스트 형식을 사용하는 경우 curl을 사용하여 명령줄에서 테스트할 수 있습니다.\n- 직접 요청/응답 스타일의 통신을 지원합니다.\n- HTTP는 물론 방화벽 친화적입니다.\n- 시스템 구조를 단순화하여 중간 브로커가 필요 없습니다.\n\n하지만 REST를 사용하는 것에는 몇 가지 단점이 있습니다:\n\n- 요청/응답 스타일의 통신만 지원합니다.\n- 가용성이 감소합니다. 클라이언트와 서비스가 중간 역할 없이 직접 통신하기 때문에 메시지를 버퍼링할 중간자가 없어야 하며 교환 기간 동안 둘 다 실행되어 있어야 합니다.\n- 클라이언트는 서비스 인스턴스의 위치(URL)를 알아야 합니다. 이는 현대적인 응용프로그램에서 중요한 문제입니다. 클라이언트는 서비스 인스턴스를 찾기 위해 서비스 검색 메커니즘을 사용해야 합니다.\n- 한 요청에서 여러 리소스를 가져오는 것이 어려울 수 있습니다.\n- 여러 업데이트 작업을 HTTP 동사에 매핑하는 것이 때때로 어려울 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# gRPC 사용하기\n\nREST API는 여러 개의 업데이트 작업을 효과적으로 처리하기 위해 제한된 HTTP 동사들에 어려움을 겪곤 합니다. gRPC는 API 중심 접근 방식을 강조하는 이진 메시지 기반 프로토콜을 사용하여 대안을 제공합니다. 구글에서 개발한 언어 중립 직렬화 시스템인 Protocol Buffers(Protobuf)를 활용하여 개발자가 Protocol Buffers 기반 인터페이스 정의 언어(IDL)로 API를 정의할 수 있도록 합니다. 이 설정은 Protocol Buffer 컴파일러를 사용하여 Java, C#, NodeJS, GoLang 등 다양한 프로그래밍 언어로 클라이언트 및 서버 코드를 자동으로 생성할 수 있게 합니다. gRPC API는 HTTP/2 상에서 작동하며, 간단한 요청/응답 및 스트리밍 RPC를 지원하여 서버가 메시지 스트림을 클라이언트에게 보내거나 그 반대로 클라이언트가 메시지 스트림을 서버에 보낼 수 있습니다. 이 기술은 강력한 유형화된 메서드를 가진 잘 정의된 서비스 인터페이스를 지원하므로, 마이크로서비스 아키텍처에서 다양하고 복잡한 통신 패턴을 처리하기 위한 견고한 프레임워크를 제공합니다.\n\n## gRPC의 장단점\n\ngRPC에는 여러 가지 이점이 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 업데이트 작업이 풍부한 API를 설계하는 것은 간단합니다.\n- 특히 큰 메시지를 교환할 때 효율적이고 간결한 IPC 메커니즘이 있습니다.\n- 양방향 스트리밍은 RPI와 메시징 스타일의 양쪽 통신을 가능하게 합니다.\n- 다양한 언어로 작성된 클라이언트와 서비스 간의 상호 운용성을 제공합니다.\n\ngRPC에는 몇 가지 단점이 있습니다:\n\n- JavaScript 클라이언트가 gRPC 기반 API를 소비하는 데 REST/JSON 기반 API보다 더 많은 작업이 필요합니다.\n- 오래된 방화벽은 HTTP/2를 지원하지 않을 수 있습니다.\n\ngRPC는 REST의 매력적인 대안이지만, REST처럼 동기식 통신 메커니즘이므로 일부 실패 문제도 겪을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 비동기 메시징 패턴을 사용하여 소통하기\n\n메시징을 사용하면 서비스들은 메시지를 비동기적으로 교환하며 소통합니다. 메시징 기반 응용 프로그램은 일반적으로 메시지 브로커를 사용하는데, 이는 서비스들 간의 중계자 역할을 합니다. 서비스 클라이언트는 메시지를 보내어 서비스에 요청을 합니다. 서비스 인스턴스가 응답을 할 것으로 예상되면, 별도의 메시지를 다시 클라이언트에게 보내어 응답합니다. 통신이 비동기적이기 때문에 클라이언트는 응답을 기다리는 것으로 블록되지 않습니다. 대신 클라이언트는 즉시 응답을 받지 못할 것으로 가정하고 작성됩니다.\n\n## 메시징 개요\n\n- Gregor Hohpe와 Bobby Woolf의 책 \"Enterprise Integration Patterns\"에서 요약\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 메시지 소개\n\n메시지는 헤더와 본문으로 구성됩니다.\n\n헤더는 이름-값 쌍과 데이터를 설명하는 메타데이터의 모음입니다. 메시지 발신자가 제공하는 이름-값 쌍 외에도 메시지 헤더에는 발신자 또는 메시징 인프라에서 생성된 고유한 메시지 ID와 선택적으로 응답이 작성되어야 하는 메시지 채널을 지정하는 이름-값 쌍이 포함됩니다.\n\n메시지 본문은 텍스트 또는 이진 형식으로 전송되는 데이터입니다.\n\n다양한 종류의 메시지가 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- **문서** - 데이터만 포함한 일반 메시지입니다. 수신자가 어떻게 해석할지 결정합니다. 명령에 대한 응답이 문서 메시지의 예입니다.\n- **명령** - RPC 요청과 동등한 메시지입니다. 호출할 작업과 해당 매개변수를 지정합니다.\n- **이벤트** - 무언가 주목할 만한 일이 발생했음을 나타내는 메시지입니다. 이벤트는 종종 도메인 객체의 상태 변경을 나타내는 도메인 이벤트이거나 주문 또는 고객과 같은 도메인 객체의 상태 변경을 나타냅니다.\n\n이 블로그 게시물에서는 주로 명령(Command) 및 이벤트(Event)에 초점을 맞출 것입니다.\n\n## 메시지 채널에 대해\n\n메시지는 채널을 통해 교환됩니다. 송신자에서의 비즈니스 로직은 송신 포트 인터페이스를 호출하며, 해당 포트는 내부 통신 메커니즘을 캡슐화합니다.\n송신 포트는 메시지 송신기 어댑터 클래스에 의해 구현되며, 이 클래스는 메시지 채널을 통해 수신자에게 메시지를 보냅니다. 메시지 채널은 메시징 인프라의 추상화입니다. 수신자의 메시지 핸들러 어댑터 클래스가 호출되어 메시지를 처리합니다. 이는 소비자의 비즈니스 로직에 의해 구현된 수신 포트 인터페이스를 호출합니다. 채널로부터 메시지를 보내는 송신자는 여러 명일 수 있습니다. 마찬가지로 채널에서 메시지를 수신하는 수신자도 여러 명일 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPoint-To-Point 및 Publish-Subscribe 두 가지 채널 유형을 이해하는 것이 매우 중요합니다.\n\n- Point-to-Point 채널은 채널에서 읽고 있는 소비자 중 정확히 한 명에게 메시지를 전달합니다. 서비스는 일대일 상호 작용 스타일을 위해 Point-to-Point 채널을 사용합니다. 예를 들어, 명령 메시지는 종종 Point-to-Point 채널을 통해 전송됩니다.\n- Publish-Subscribe 채널은 각 메시지를 연결된 모든 소비자에게 전달합니다. 서비스는 일대다 상호 작용 스타일을 위해 Publish-Subscribe 채널을 사용합니다. 예를 들어, 이벤트 메시지는 일반적으로 Publish-Subscribe 채널을 통해 전송됩니다.\n\n이제 비동기 통신의 개념 및 메시지 채널에 대한 명확한 이해를 가졌으므로, 비동기 통신 프레임워크에서 제공하는 다양한 통신 메커니즘의 구현을 탐색하는 것이 적절합니다.\n\n## 요청/응답 및 비동기 요청/응답 구현하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클라이언트와 서비스가 요청/응답 또는 비동기 요청/응답을 사용하여 상호 작용할 때, 클라이언트는 요청을 보내고 서비스는 응답을 다시 보냅니다. 두 상호 작용 스타일 간의 차이점은 요청/응답의 경우 클라이언트가 서비스가 즉시 응답할 것으로 기대하는 데 반해, 비동기 요청/응답에서는 그러한 기대가 없다.\n메시징은 본질적으로 비동기이므로 비동기적인 요청/응답만을 제공합니다. 그러나 클라이언트는 응답을 받을 때까지 블로킹될 수 있습니다.\n\n클라이언트와 서비스는 쌍으로 메시지를 교환하여 비동기 요청/응답 스타일의 상호 작용을 구현합니다. 다이어그램에서 보듯이, 클라이언트는 작업을 수행할 명령 메시지와 해당 매개변수를 지정하는 콘텐츠를 서비스가 소유한 포인트 투 포인트 메시징 채널로 보냅니다. 서비스는 요청을 처리하고 결과를 포함하는 응답 메시지를 클라이언트가 소유한 포인트 투 포인트 채널로 보냅니다.\n\n위 다이어그램에서 클라이언트는 응답 메시지를 보낼 서비스에 알려주어야 하며 응답 메시지를 요청과 일치시켜야 합니다. 다행히, 이 두 문제를 해결하는 것은 그렇게 어렵지 않습니다. 클라이언트는 응답 채널 헤더가 있는 명령 메시지를 보냅니다.\n서버는 응답 메시지를 작성할 때, 메시지 식별자와 동일한 값이 있는 상관 ID를 포함하여 응답 채널에 작성합니다. 클라이언트는 상관 ID를 사용하여 응답 메시지를 요청과 일치시킵니다.\n\n클라이언트와 서비스가 메시징을 사용하여 통신하기 때문에 상호 작용은 본질적으로 비동기적입니다. 이론적으로 메시징 클라이언트는 응답을 받을 때까지 블로킹될 수 있지만, 실제로는 클라이언트가 응답을 비동기적으로 처리합니다. 게다가, 응답은 일반적으로 클라이언트의 여러 인스턴스 중 하나에 의해 처리됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단방향 통지 구현\n\n비동기 메시징을 사용하여 단방향 통지를 구현하는 것은 간단합니다. 클라이언트는 일반적으로 명령 메시지를 보내고, 해당 메시지를 서비스가 소유한 점대점 채널로 전송합니다. 서비스는 해당 채널을 구독하고 메시지를 처리합니다. 답신을 보내지 않는다는 점에 유의하세요.\n이를 \"비동기 요청/응답\"에서 본 다이어그램과 비슷한 방식이라고 생각할 수 있지만, 답신 채널이 없다는 차이가 있습니다.\n\n## 게시/구독 구현\n\n클라이언트는 게시/구독 채널로 메시지를 게시하고, 여러 소비자가 읽습니다.\n서비스는 게시/구독을 사용하여 도메인 이벤트를 게시하는데, 이는 도메인 객체의 변경을 나타냅니다. 도메인 이벤트를 발행하는 서비스는 도메인 클래스에서 파생된 채널을 소유하며, 특정 도메인 객체의 이벤트에 관심이 있는 서비스는 해당 채널을 구독하면 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-27-AGuidetoCommunicationStylesinMicroservicesArchitecture_1.png\" />\n\n## Publish/Async Response 구현하기\n\n퍼블리시/비동기 응답 상호작용 스타일은 퍼블리시/서브스크라이브와 요청/응답 요소를 결합하여 구현하는 더 높은 수준의 상호작용 스타일입니다.\n클라이언트는 응답 채널 헤더를 지정하는 메시지를 퍼블리시-서브스크라이브 채널에 발행합니다. 소비자는 요청 채널로의 응답 메시지를 포함하여 상관 ID를 포함한 응답 메시지를 작성합니다.\n클라이언트는 요청과 응답 메시지를 일치시키기 위해 상관 ID를 사용하여 응답을 수집합니다.\n\n비동기 API를 갖는 응용 프로그램의 각 서비스는 이러한 구현 기법 중 하나 이상을 사용합니다. 작업을 호출하는 비동기 API를 가진 서비스에는 요청을 위한 메시지 채널이 있습니다. 마찬가지로 이벤트를 발행하는 서비스는 이벤트 메시지 채널에 이를 발행할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 메시지 브로커 사용하기\n\n메시지 기반 애플리케이션은 일반적으로 메시지 브로커를 사용하는데, 이를 통해 서비스가 통신하는 인프라 서비스입니다. 그러나 브로커 기반 아키텍처는 유일한 메시징 아키텍처가 아닙니다. 브로커를 사용하지 않는 메시징 아키텍처도 있습니다. 이 경우 서비스는 다른 서비스와 직접 통신합니다 (이 블로그 포스트에서는 이 주제를 다루지 않습니다).\n\n## 브로커 기반 메시징 개요\n\n메시지 브로커는 모든 메시지가 흐르는 중간 매개체입니다. 발신자는 메시지를 메시지 브로커에 작성하고, 메시지 브로커가 수신자에게 전달합니다. 메시지 브로커를 사용하는 중요한 이점 중 하나는 발신자가 소비자의 네트워크 위치를 알 필요가 없다는 것입니다. 또 다른 이점은 메시지 브로커가 메시지를 버퍼링하여 소비자가 처리할 수 있을 때까지 메시지를 저장한다는 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n많은 메시지 브로커를 선택할 수 있습니다. 인기있는 오픈 소스 메시지 브로커의 예시는 다음과 같습니다:\n\n- ActiveMQ\n- RabbitMQ\n- Apache Kafka\n\n각 브로커는 다른 트레이드오프를 가지고 있습니다. 예를 들어, 매우 낮은 레이턴시 브로커는 순서 보장을 유지하지 않을 수 있고, 메시지 전달을 보장하지 않으며 메시지를 메모리에만 저장할 수 있습니다.\n메시지 전달을 보장하고 메시지를 신뢰성 있게 디스크에 저장하는 브로커는 높은 레이턴시를 가지고 있을 것입니다.\n\n어떤 종류의 메시지 브로커가 가장 잘 맞는지는 애플리케이션의 요구사항에 따라 다릅니다. 심지어 애플리케이션의 다른 부분도 서로 다른 메시징 요구사항을 가질 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 메시지 브로커를 사용한 메시지 채널 구현\n\n각 메시지 브로커는 메시지 채널 개념을 다르게 구현합니다. 표에서 볼 수 있듯이, JMS 메시지 브로커인 ActiveMQ와 같은 메시지 브로커는 대기열과 토픽을 가지고 있습니다. RabbitMQ와 같은 AMQP 기반의 메시지 브로커는 거래소와 대기열이 있습니다. Apache Kafka는 토픽을 가지고 있고, AWS Kinesis는 스트림을, AWS SQS는 대기열을 가지고 있습니다.\n또한, 이 챕터에서 설명한 메시지와 채널 추상화보다 더 유연한 메시징을 제공하는 메시지 브로커도 있습니다.\n\n여기서 설명된 대부분의 메시지 브로커는 포인트 투 포인트 및 게시-구독 채널을 모두 지원합니다. 유일한 예외는 AWS SQS로, 이는 포인트 투 포인트 채널만을 지원합니다.\n\n# 메시지 브로커의 문제점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 경쟁 수신기와 메시지 순서 정렬\n\n한 가지 도전 과제는 메시지 수신기의 확장과 동시에 메시지 순서를 보존하는 방법입니다. 메시지를 동시에 처리하기 위해 서비스의 여러 인스턴스를 사용하는 것은 보편적인 요구사항입니다.\n게다가 심지어 단일 서비스 인스턴스도 여러 스레드를 사용하여 여러 메시지를 동시에 처리할 수 있습니다. 여러 스레드와 서비스 인스턴스를 사용하여 메시지를 동시에 처리하는 것은 응용 프로그램의 처리량을 증가시킵니다.\n그러나 메시지를 동시에 처리하는 과제는 각 메시지가 한 번에 한 번씩 순서대로 처리되는 것을 보장하는 것입니다.\n\n예를 들어, 특정 지점 간편 채널(point-to-point channel)에서 읽는 세 개의 서비스 인스턴스가 있다고 가정해보겠습니다. 그리고 송신자가 주문 생성, 주문 업데이트 및 주문 취소 이벤트 메시지를 순차적으로 발행합니다.\n간단한 메시징 구현은 각 메시지를 서로 다른 수신기에 동시에 전달할 수 있습니다. 네트워크 문제나 가비지 컬렉션으로 인한 지연 때문에 메시지가 순서대로 처리되지 않을 수 있으며, 이는 이상한 동작을 초래할 수 있습니다. 이론적으로, 한 서비스 인스턴스가 주문 취소 메시지를 처리하기 전에 다른 서비스가 주문 생성 메시지를 처리할 수 있습니다!\n\n아파치 카프카(Apache Kafka)나 AWS Kinesis와 같은 현대적인 메시지 브로커에서 사용되는 일반적인 해결책은 샤딩(파티셔닝)된 채널을 사용하는 것입니다.\n다음 다이어그램은 이 작동 방식을 보여줍니다. 이 해결책에는 세 부분이 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 샤드 채널은 두 개 이상의 샤드로 구성되어 있으며 각 샤드는 채널처럼 작동합니다.\n- 발신자는 메시지 헤더에 샤드 키를 지정하며, 이는 일반적으로 임의의 문자열 또는 바이트 시퀀스입니다. 메시지 브로커는 샤드 키를 사용하여 메시지를 특정 샤드/파티션에 할당합니다. 예를 들어, 샤드 키의 해시를 샤드 수로 나눈 나머지를 계산하여 샤드를 선택할 수 있습니다.\n- 메시징 브로커는 수신자의 여러 인스턴스를 그룹화하고 동일한 논리적 수신자로 처리합니다. 예를 들어 Apache Kafka는 소비자 그룹이라는 용어를 사용합니다. 메시지 브로커는 각 샤드를 단일 수신자에 할당합니다. 수신자가 시작하거나 종료될 때 샤드를 재할당합니다.\n\n이 예에서 각 주문 이벤트 메시지는 orderId를 샤드 키로 사용합니다. 특정 주문에 대한 각 이벤트는 동일한 샤드에 발행되며, 단일 소비자 인스턴스가 해당 샤드를 읽습니다.\n결과적으로 이러한 메시지는 순서대로 처리되도록 보장됩니다.\n\n## 중복 메시지 처리\n\n메시지를 사용할 때 대면해야 하는 또 다른 과제는 중복 메시지 처리입니다. 메시지 브로커는 이상적으로 각 메시지를 한 번만 전달해야 하지만, 정확히 한 번 메시지를 보장하는 것은 보통 너무 비용이 많이 듭니다. 대신 대부분의 메시지 브로커는 적어도 한 번 메시지를 전달할 것을 약속합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시스템이 정상적으로 작동할 때 최소한 한 번의 전달을 보장하는 메시지 브로커는 각 메시지를 한 번만 전달합니다. 그러나 클라이언트, 네트워크 또는 메시지 브로커의 장애로 인해 메시지가 여러 번 전달될 수 있습니다.\n예를 들어, 클라이언트가 메시지를 처리하고 데이터베이스를 업데이트한 후에 메시지를 확인하기 전에 충돌하는 경우가 있습니다.\n메시지 브로커는 확인되지 않은 메시지를 다시 전달하며, 클라이언트가 다시 시작되거나 클라이언트의 복제본 중 하나로 전달합니다.\n\n가능하다면, 메시지가 재전달될 때 순서가 유지되는 메시지 브로커를 사용하는 것이 이상적입니다.\n\n예를 들어, 클라이언트가 동일한 주문에 대한 주문 생성 이벤트를 처리한 후 주문 취소 이벤트를 처리하고, 어떤 이유로든 주문 생성 이벤트를 확인하지 않은 상황을 상상해보겠습니다.\n메시지 브로커는 주문 생성 및 주문 취소 이벤트를 다시 전달해야 합니다. 주문 생성만 재전달하는 경우, 클라이언트가 주문 취소를 취소할 수 있습니다.\n\n중복 메시지를 처리하는 몇 가지 다른 방법이 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 아이덴포턴트 메시지 핸들러를 작성하십시오.\n- 메시지를 추적하고 중복을 제거하십시오.\n\n각 옵션을 상세히 살펴보고, 이후에 각각에 대한 별도의 블로그 포스트를 작성할 예정입니다.\n\n## 아이덴포턴트 메시지 핸들러 작성\n\n메시지를 처리하는 응용 프로그램 로직이 아이덴포턴트하다면, 중복된 메시지는 해를 끼치지 않습니다. 응용 프로그램 로직이 아이덴포턴트하다는 것은 동일한 입력 값으로 여러 번 호출하더라도 추가적인 효과가 없다는 것을 의미합니다. 예를 들어, 이미 취소된 주문을 다시 취소하는 것은 아이덴포턴트한 작업입니다. 또한, 클라이언트가 제공한 ID로 주문을 생성하는 것도 아이덴포턴트한 작업입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n메시지 핸들러가 idempotent할 때 여러 번 안전하게 실행될 수 있습니다, 단 메시지 브로커가 메시지를 재전달할 때 순서를 유지해야 합니다.\n\n하지만, 응용 프로그램 로직은 종종 idempotent하지 않습니다. 또는 메시지 브로커가 메시지를 재전달할 때 순서를 보장하지 않는 경우도 있습니다. 중복 또는 순서가 올바르지 않은 메시지는 버그를 유발할 수 있습니다. 이러한 상황에서는 메시지를 추적하고 중복 메시지를 삭제하는 메시지 핸들러를 작성해야 합니다.\n\n## 메시지 추적 및 중복 삭제\n\n예를 들어 소비자 신용카드를 승인하는 메시지 핸들러를 고려해보겠습니다. 각 주문에 대해 카드를 정확히 한 번 승인해야 합니다. 이 응용 프로그램 로직의 경우 각 호출 시 다른 효과가 있습니다. 중복 메시지로 인해 메시지 핸들러가 이 로직을 여러 차례 실행하면 응용 프로그램이 잘못 동작할 수 있습니다. 이러한 종류의 응용 프로그램 로직을 실행하는 메시지 핸들러는 중복 메시지를 감지하고 삭제함으로써 독립적이어야 합니다.\n간단한 해결책은 메시지 소비자가 처리한 메시지를 메시지 ID를 사용하여 추적하고 중복을 버리는 것입니다. 예를 들어, 각 처리된 메시지의 메시지 ID를 데이터베이스 테이블에 저장할 수 있습니다. 다음 다이어그램은 전용 테이블을 사용하여 이러한 작업을 하는 방법을 보여줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n소비자가 메시지를 처리할 때, 메시지 ID를 데이터베이스 테이블에 기록합니다. 이는 비즈니스 엔티티를 생성하고 업데이트하는 트랜잭션의 일부로서 수행됩니다. 이 예제에서 소비자는 PROCESSED_MESSAGES 테이블에 메시지 ID를 포함한 행을 삽입합니다. 만약 메시지가 중복이면, 삽입이 실패하고 소비자는 메시지를 폐기할 수 있습니다.\n\n또 다른 옵션은 메시지 핸들러가 전용 테이블 대신 애플리케이션 테이블에 메시지 ID를 기록하는 것입니다. 이 접근 방법은 NoSQL 데이터베이스를 사용할 때 유용합니다. NoSQL 데이터베이스는 트랜잭션 모델이 제한되어 두 개의 테이블을 업데이트하는 것을 지원하지 않기 때문입니다.\n\n# 결론\n\n요약하자면, 마이크로서비스 아키텍처에서 통신 스타일을 선택하는 것은 애플리케이션 전체의 효율성과 확장성에 중요합니다. 이 게시물에서 동기 호출부터 비동기 메시징까지 다양한 통신 메커니즘을 탐색해봤습니다. 각각의 장단점과 적합한 사용 사례가 있습니다. 올바른 통신 전략은 성능을 향상시킬 뿐만 아니라 서비스 상호작용에서 탄력성과 유연성을 보장합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n커뮤니케이션 스타일을 선택할 때는 서비스 상호작용의 성격, 실시간 데이터 필요성, 그리고 서비스 복잡성과 같은 요소를 고려하는 것이 중요합니다. 조직의 요구 사항과 기술적 발전에 맞게 진화할 수 있는 견고한 아키텍처를 육성하는 것이 목표입니다.\n\n# 참고 자료\n\n- Microservices Patterns — Chris Richardson\n- Building Microservices: Designing Fine-Grained Systems 2nd Edition — Sam Newman\n- Building Event-Driven Microservices: Leveraging Organizational Data at Scale\n- Enterprise Integration Patterns — Gregor Hohpe\n","ogImage":{"url":"/assets/img/2024-05-27-AGuidetoCommunicationStylesinMicroservicesArchitecture_0.png"},"coverImage":"/assets/img/2024-05-27-AGuidetoCommunicationStylesinMicroservicesArchitecture_0.png","tag":["Tech"],"readingTime":21}],"page":"49","totalPageCount":113,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":2},"__N_SSG":true}