{"pageProps":{"posts":[{"title":"안녕하세요 안드로이드 코틀린에서 Retrofit을 사용한 API 호출 포괄적인 안내입니다","description":"","date":"2024-05-18 15:26","slug":"2024-05-18-APICallswithRetrofitinAndroidKotlinAComprehensiveGuide","content":"\n현대 소프트웨어 개발 세계에서, 다양한 소프트웨어 구성 요소 간의 커뮤니케이션이 중요합니다. 이를 달성하는 가장 일반적인 방법 중 하나는 API (응용 프로그램 프로그래밍 인터페이스)를 통해입니다. 안드로이드 앱 개발에서 API 호출을 수행하는 경우, Retrofit은 단순성, 효율성 및 견고성으로 인해 주로 사용되는 라이브러리가 되었습니다. 이 기사에서는 Kotlin 기반 안드로이드 애플리케이션에서 Retrofit을 사용하여 API 호출하는 방법을 자세히 살펴보겠습니다. 추가로 Retrofit 인스턴스 및 ApiService를 효율적이고 일관된 방식으로 사용하기 위해 싱글톤 패턴을 구현할 것입니다.\n\n# 전제 조건:\n\n구현에 들어가기 전에 다음 항목이 설정되어 있는지 확인하십시오:\n\n- 컴퓨터에 Android Studio가 설치되어 있어야 합니다.\n- Kotlin 프로그래밍 언어에 대한 기본적인 이해가 있어야 합니다.\n- API 테스트를 위한 인터넷 연결이 필요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 싱글톤 패턴으로 Retrofit 설정하기:\n\n시작하려면 Retrofit을 Android 프로젝트에 추가하고 Retrofit 인스턴스 및 ApiService에 대한 싱글톤 패턴을 구현하는 방법을 알아보세요:\n\n- Android Studio 프로젝트를 엽니다.\n- build.gradle (Module: app) 파일로 이동하여 다음 종속성을 추가하세요:\n\n```js\ndependencies {\n    // ... 다른 종속성들\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트를 동기화하여 새로운 종속성이 추가되었는지 확인하세요.\n\n# Retrofit 및 ApiService 싱글톤 생성하기:\n\n애플리케이션 전체에서 Retrofit 및 ApiService의 단일 인스턴스를 보장하기 위해 싱글톤 패턴을 구현할 수 있습니다. 예를 들어 ApiClient.kt와 같은 새로운 Kotlin 파일을 생성하고 다음과 같이 구현할 수 있습니다:\n\n```js\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nobject RetrofitClient {\n    private const val BASE_URL = \"https://jsonplaceholder.typicode.com/\"\n\n    val retrofit: Retrofit by lazy {\n        Retrofit.Builder()\n            .baseUrl(BASE_URL)\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n    }\n}\n\nobject ApiClient {\n    val apiService: ApiService by lazy {\n        RetrofitClient.retrofit.create(ApiService::class.java)\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 구현을 통해 애플리케이션 전반에 걸쳐 액세스할 수 있는 Retrofit 및 ApiService의 하나의 인스턴스를 갖게 됩니다.\n\n# ApiService Interface 정의:\n\n이제 Retrofit 인스턴스에 대한 싱글톤 패턴을 설정했으므로 API 엔드포인트 및 이에 대한 HTTP 메서드를 개요화하는 ApiService 인터페이스를 정의해 봅시다. ApiService.kt와 같은 새로운 Kotlin 파일을 만들고 다음을 구현해 보세요:\n\n```js\nimport retrofit2.Call\nimport retrofit2.http.GET\nimport retrofit2.http.Path\n\ninterface ApiService {\n    @GET(\"posts/{id}\")\n    fun getPostById(@Path(\"id\") postId: Int): Call<Post>\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 예시에서는 ID로 게시물을 가져오는 간단한 API 엔드포인트를 정의했습니다. 데이터 모델을 사용하여 Post를 교체해주세요.\n\n# 싱글톤을 사용한 API 호출:\n\nApiClient 싱글톤과 ApiService 인터페이스가 준비되어 있으면, API 호출은 간단해집니다. 활동이나 프래그먼트에서는 이제 ApiClient 싱글톤을 사용하여 API 호출을 시작할 수 있습니다. 버튼을 클릭할 때 API 호출을 수행한다고 가정해봅시다. 아래는 간단한 예시입니다.\n\n```js\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val button = findViewById<Button>(R.id.button)\n        button.setOnClickListener {\n            val postId = 1 // 가져올 게시물 ID로 교체\n            val call = ApiClient.apiService.getPostById(postId)\n\n            call.enqueue(object : Callback<Post> {\n                override fun onResponse(call: Call<Post>, response: Response<Post>) {\n                    if (response.isSuccessful) {\n                        val post = response.body()\n                        // 가져온 게시물 데이터 처리\n                    } else {\n                        // 에러 처리\n                    }\n                }\n\n                override fun onFailure(call: Call<Post>, t: Throwable) {\n                    // 실패 처리\n                }\n            })\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론:\n\nRetrofit을 사용하면 안드로이드 애플리케이션에서 API 호출하는 과정이 간단해집니다. Retrofit 인스턴스와 ApiService에 싱글톤 패턴을 구현하여 앱 전체에 걸쳐 단일하고 효율적인 인스턴스를 보장할 수 있습니다. 이 기사는 Kotlin 기반 안드로이드 프로젝트에서 Retrofit을 사용하여 API 호출하는 기본 사항을 다루었으며, 성능과 유지보수성을 높이기 위해 싱글톤 개념을 소개했으며 API 엔드포인트를 정의하는 ApiService 인터페이스를 포함했습니다. Retrofit과 그의 고급 기능들을 계속 탐구할 때, 싱글톤 사용이 앱의 네트워킹 레이어를 최적화하는 여러 전략 중 하나라는 것을 기억해주세요.\n\n# 추가 탐구:\n\n- Retrofit 문서 탐색: Retrofit 문서\n- 다양한 종류의 HTTP 메소드에 대해 알아보기: HTTP 메소드\n- Retrofit을 사용하여 API 호출시 오류 처리 구현하기: Retrofit을 이용한 오류 처리\n- OkHttp를 사용하여 앱의 네트워킹 레이어 강화하기: OkHttp\n- 인증 및 요청 사용자화와 같은 고급 Retrofit 주제에 대해 깊이 파고들기.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRetrofit 및 Android 앱 개발에서 네트워킹에 능숙해지기 위해서는 연습과 실험이 중요하다는 것을 기억해주세요.\n","ogImage":{"url":"/assets/img/2024-05-18-APICallswithRetrofitinAndroidKotlinAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-05-18-APICallswithRetrofitinAndroidKotlinAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":6},{"title":"간단한 안드로이드 Compose Flow 라이프사이클 처리 및 카운터로 배우기","description":"","date":"2024-05-18 15:24","slug":"2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter","content":"\n## 안드로이드 개발 배우기\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png)\n\n가끔 안드로이드 라이프사이클을 이해하려고 머리를 싸매면서, 정말 중요한 시나리오는 무엇인지 궁금해 할 때가 있습니다. 이해하지 못하면 적절하게 활용을 놓치게 될 수 있습니다.\n\n여기, 매우 간단한 디자인인 카운터를 고안해 보았습니다. 이를 통해 각종 간단한 라이프사이클 시나리오를 살펴볼 수 있습니다. 도움이 되길 바랍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 간단한 흐름\n\n간단한 카운터를 만들기 위해, 제 ViewModel에 아래와 같은 흐름이 있습니다. 매 초마다 1씩 증가하는 흐름입니다.\n\n```js\nval counter = flow {\n    var value = 0\n    while (true) {\n       emit(value++)\n       delay(1000)\n    }\n}\n```\n\nMainActivity에서 트리거된 Composable 함수에서는, 상태 변수로 수집하고 표시합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsState(0)\nText(\"${stateVariable.value}\")\n```\n\n작동은 됩니다. 하지만 한 가지 문제가 있어요.\n\n## 화면을 회전하면 초기화돼요!\n\n화면을 회전할 때마다(세로에서 가로로 변경할 때) 숫자가 다시 시작돼요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_1.png\" />\n\n처음에는 카운터가 재설정되어 깜짝 놀랐습니다. ViewModel이 화면 회전(구성 변경)을 통해 유지되는 것에 대해 생각해 보았더니, 화면이 회전될 때마다 MainActivity가 파괴되고 카운터가 다시 수집된다는 것을 깨달았습니다.\n\n```js\nval stateVariable = viewModel.counter.collectAsState(0)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n각 컬렉션은 새로운 플로우 이벤트를 시작합니다. 따라서 화면을 회전할 때 카운터가 재설정됩니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_2.png)\n\n# 외부 변수를 플로우로 변경\n\n이 문제를 해결하기 위해 제가 고안한 해결책은 다음과 같습니다. 카운터 값을 플로우에 저장하는 대신 외부에서 정의하겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nvar value = 0\nval counter = flow {\n    while (true) {\n       emit(value++)\n       delay(1000)\n    }\n}\n```\n\n제 MainActivity에서 트리거된 Composable Function에서는 상태 변수로만 수집하고 표시합니다.\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsState(0)\nText(\"${stateVariable.value}\")\n```\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_3.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 방법은 작동합니다. 그리고 꾸준히 계속 작동합니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_4.png)\n\n## 백그라운드에서 멈추지 않음\n\n하지만 한 가지 문제가 있습니다. 앱을 백그라운드로 이동시키면 작동이 멈추지 않고 계속 실행됩니다 (활동이 종료되지 않고 계속 활성 상태로 남아 있음).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_5.png\" />\n\n이게 이상적이지 않아요. 우리가 백그라운드로 가면(즉, 액티비티가 onPause되면), 일시 중지되기를 원했고, 다시 포어그라운드로 돌아오면 계속되기를 원했어요.\n\n그 이유는 collectAsState는 라이프사이클 변경을 인식하지 못하기 때문에, 흐름을 멈추거나 일시 중지시키지 못하기 때문이에요.\n\n## CollectAsStateWithLifecycle가 구조안으로 와서 구원을 줍니다\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n좋은 소식이 있어요. 구글에서 Manuel Vivo가 공유한 collectAsStateWithLifecycle을 소개했어요.\n\n우리는 이렇게만 하면 돼요:\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsStateWithLifecycle(0)\nText(\"${stateVariable.value}\")\n```\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_6.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n잠시 일시 중단해볼게요\n\n![image](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_7.png)\n\n## 시스템에 의해 종료될 때 상태를 저장하지 않음\n\nViewModel은 회전되더라도 앱이 계속 실행되도록 할 수 있어 좋습니다. 그러나 시스템에 의해 앱이 종료될 경우 계속 실행되지 않을 수 있습니다. 기기 메모리가 부족한 경우에는 OS가 백그라운드에서 실행 중인 앱을 종료할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이렇게 되면 우리 카운터에 무슨 일이 벌어집니다.\n\n![LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8.png)\n\n우리는 savedStateHandle을 사용하여 외부 값 저장 및 복원할 수 있습니다.\n\n```js\nvar value = savedStateHandle[KEY] ?: 0\nval counter = flow {\n    while (true) {\n       emit(value++)\n       savedStateHandle[KEY] = value\n       delay(1000)\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# StateFlow With Lifecycle Aware\n\n하지만 flow를 사용하고 있기 때문에, savedStateHandle에서 stateFlow를 직접 얻을 수 있다면 stateFlow를 사용해보는 것은 어떨까요?\n\n```kotlin\nval stateFlow = savedStateHandle.getStateFlow(KEY, 0)\n```\n\nflow와는 달리, stateFlow는 hot flow입니다. 이는 stateFlow 자체에서 값이 발행되지 않고, 외부에서 값을 받는다는 것을 의미합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그래서, ViewModel에서 아래의 간단한 코드를 가지고 있어요.\n\n```js\nval stateFlowCounter = savedStateHandle.getStateFlow(KEY, 0)\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n그리고 Activity에서는 아래와 같이 수집도 해요.\n\n```js\nval stateVariable\n    = viewModel.stateFlowCounter.collectAsStateWithLifecycle()\nText(\"${stateVariable.value}\")\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 방법은 상태Flow 변수를 저장하고 복원하므로 좋습니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_9.png)\n\n그러나 이 방식에는 문제가 있습니다. collectAsStateWithLifecycle를 사용하더라도 수집 부분이 MainActivity에 있습니다.\n\nstateFlow는 핫 플로우이며, 발행 프로세스도 ViewModel에 있기 때문에 발행 프로세스는 라이프사이클을 인식하지 못한 채 계속 실행됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n따라서 결과는 아래와 같습니다.\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_10.png\" />\n\n회전 문제와 저장 및 복원 문제를 해결했습니다. 그러나 백그라운드에서 일시 중지되지 않는 문제가 되돌아왔습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 이미지를 참고해 주세요.\n\n## WhileSubcribed가 도와 주었어요\n\n답을 찾기 위해 검색한 후, 답을 찾도록 도와준\nManuel Vivo님에게 감사드립니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간략하게 말하자면, stateFlow에 대해 WhileSubscribed를 사용하여 구독자(수집 중인)가 있는 경우에만 stateFlow가 활성화되도록 해야합니다.\n\n이를 위해 아래와 같이 stateIn을 추가해야 합니다.\n\n```js\nval stateFlowCounter = savedStateHandle\n    .getStateFlow(KEY, 0)\n    .stateIn(\n        viewModelScope,\n        SharingStarted.WhileSubscribed(0),\n        0\n    )\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n이렇게 해야합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nval stateVariable\n    = viewModel.stateFlowCounter.collectAsStateWithLifecycle()\nText(\"${stateVariable.value}\")\n```\n\n아래에 최신 코드가 설명되어 있습니다.\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_12.png\" />\n\n원하는 동작을 모두 갖게 될 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지1](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_13.png)\n\n![이미지2](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_14.png)\n\n![이미지3](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_15.png)\n\n# TL;DR\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 Google에서 권장하는 Lifecycle Aware한 Flow를 원한다면,\n\n- 보통 플로우나 핫 플로우와 관계없이 collectAsStateWithLifecycle을 사용하세요.\n- 모든 핫 플로우 (예: StateFlow)에는 WhileSubscribed를 적용하세요.\n\n이 내용이 유용하고 상태로 수집된 Flow 및 해당 라이프사이클 처리를 설명했기를 바랍니다.\n\n여기에서 코드와 디자인을 가져와 직접 실험해 볼 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png"},"coverImage":"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png","tag":["Tech"],"readingTime":12},{"title":"로컬 영속성Android Room 데이터베이스","description":"","date":"2024-05-18 15:21","slug":"2024-05-18-LocalPersistenceinAndroidRoomDatabase","content":"\n![Local Persistence in Android Room Database](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_0.png)\n\n우리의 PokeAPI 시리즈를 이어서, 오늘은 사용자에게 즐겁게 포켓몬을 즐겨찾기할 수 있는 로컬 퍼시스턴스를 실험해 보겠습니다. 이를 위해 Room Database에 의존하며, Room Database는 데이터 모델을 저장하기 위한 SQLite 저장소입니다. Room에 액세스하는 패턴들은 Retrofit으로 API 요청을 생성하는 방식과 매우 유사합니다. 둘 다 Repository 패턴과 빌더를 사용하지만, 이를 한 단계씩 다룰 것입니다.\n\n# SQL이란?\n\nSQL 언어의 개념에 대해 대부분의 분들이 친숙할 것으로 기대합니다. 그러나 이 기사는 Android와 Kotlin에 더 초점을 맞추고 있기 때문에 간단히 소개하겠습니다. SQL은 관계 데이터베이스 테이블 작업에 사용되는 일반적인 언어로, 특정 데이터를 쿼리하거나 객체를 추가, 업데이트, 삭제하는 데 사용됩니다. 예를 들어, 만약 Person 테이블이 있고 18세 이상인 모든 행을 가져와 이름만 표시하려면 다음과 같이 합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nSELECT name\nFROM person\nWHERE age >= 18\n```\n\n1 . The SELECT 명령은 출력에 이름 열 만 투사합니다.\n\n2. 우리는 person 테이블에서 데이터를 검색하고 있습니다.\n\n3. 18세 이상인 행만 필터링하고 있습니다(age).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위에서 언급한 대로, Android 개발에서 Room이 어떻게 작동하는지 살펴보겠습니다.\n\n# 로컬 유지 보수\n\nRoom은 Android에서 로컬 데이터를 저장하는 가장 일반적인 솔루션이며, 이는 백엔드에서 원격 데이터를 처리하는 것과는 달라요. 모든 데이터는 내부 기기 데이터베이스에 저장되며, SQLite로 작동합니다. iOS에서는 이에 해당하는 솔루션으로 Core Data가 있습니다.\n\n장치에 데이터 모델을 영구적으로 저장하기 위해서는 프로젝트에 구현해야할 중요한 구성 요소가 있어요. 먼저, Gradle 파일에 필요한 종속성을 동기화해보죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nannotationProcessor(\"androidx.room:room-compiler:2.6.1\");\nimplementation(\"androidx.room:room-runtime:2.6.1\");\nkapt(\"androidx.room:room-compiler:2.6.1\");\nimplementation(\"androidx.room:room-ktx:2.6.1\");\n```\n\n이제 Room 데이터베이스를 관리하는 가장 중요한 구성 요소를 구현할 수 있습니다. 아래는 우리 구조가 어떻게 보여야 하는지 입니다:\n\n![Room Database 구조](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_1.png)\n\n새로운 DAO와 같은 익숙하지 않은 층이 있는 것을 알 수 있습니다. 이에 대해 더 자세히 설명하겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 포켓몬 DAO\n\n저희 프로젝트에서는 Room이라는 SQLite 데이터베이스와 상호 작용하며, 모든 SQL DB처럼 SQL 쿼리를 사용하여 데이터를 조작하고 삽입합니다. DAO는 기본적으로 데이터베이스에서 상호 작용이 어떻게 이뤄지는 지를 정의하는 인터페이스입니다. Kotlin의 어노테이션의 놀라운 기능 덕분에 Kotlin 코드를 작성하지 않아도 데이터베이스를 관리하는 코드를 자동으로 생성할 수 있습니다. 어노테이션 자체가 메타데이터로 작동하여 데이터베이스를 관리하는 코드를 자동으로 생성합니다.\n\n귀하의 프로젝트 어딘가에 이 인터페이스를 생성해주십시오:\n\n```js\n@Dao\ninterface PokemonDao {\n    // 즐겨찾기 테이블의 모든 객체를 반환합니다\n    @Query(\"SELECT * FROM favorites\")\n    fun getFavorites(): Flow<List<Favorite>>\n\n    // 주어진 이름으로 포켓몬을 검색하여 해당 포켓몬을 반환합니다 (존재하면)\n    @Query(\"SELECT * FROM favorites WHERE name = :name\")\n    suspend fun getFavoriteByName(name: String): Favorite?\n\n    // 새로운 즐겨찾기 포켓몬을 삽입합니다\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertFavorite(favorite: Favorite)\n\n    // 기존 포켓몬을 업데이트합니다\n    @Update(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun updateFavorite(favorite: Favorite)\n\n    // 즐겨찾기 테이블의 모든 행을 삭제합니다\n    @Query(\"DELETE FROM favorites\")\n    suspend fun deleteAllFavorites()\n\n    // 주어진 항목을 삭제합니다\n    @Delete\n    suspend fun deleteFavorite(favorite: Favorite)\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Dao 어노테이션은 이 인터페이스가 새로운 클래스를 생성하여 Room DB에 직접 액세스할 것임을 나타냅니다.\n- Query 어노테이션은 DB에서 트리거될 SQL 쿼리를 정의하며, 이는 테이블의 행과 열을 나타내는 객체를 반환하게 됩니다. 이 경우에는 Favorite 객체(또는 DB에서 비동기적으로 가져오는 객체의 Flow)입니다.\n\n3. Insert 어노테이션은 입력된 객체가 다른 객체와 충돌할 경우(기본 키가 이미 존재하는 경우) 기존 객체를 새 객체로 대체하는 삽입 작업을 설명합니다.\n\n4. Update 어노테이션은 주어진 행의 데이터를 새로운 데이터로 대체합니다.\n\n5. Delete 어노테이션은 입력값으로 주어진 Favorite 행을 삭제함을 명시합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 모든 작업은 데이터베이스를 조작하는 SQL 작업을 나타냅니다. 주석은 Kapt가 새 코드를 생성하여 데이터베이스에 액세스하는 구체적인 구현을 수행할 것입니다.\n\n# 엔티티\n\n이제 엔티티를 구현해 봅시다. 어떤 데이터베이스 모델에서의 Entity는 테이블에 해당하며, 행과 열의 집합으로, 객체 목록을 지속한다는 것을 나타냅니다. Kotlin의 엔티티는 SQL 테이블 엔티티와 매우 비슷한 컨셉으로 작동합니다.\n\n```js\n@Entity(tableName = \"favorites\")\ndata class Favorite(\n    @PrimaryKey(autoGenerate = false)\n    @ColumnInfo(name = \"id\")\n    val id: String,\n    @ColumnInfo(name = \"name\")\n    val name: String\n)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 데이터 클래스는 Entity로 주석이 달려 있으며 \"favorites\"라는 이름의 SQL 테이블을 나타냅니다. 각 열(속성)은 해당 테이블에서 나타내는 내용에 대한 메타데이터가 달린 변수에 해당합니다.\n\n- Entity는 데이터 클래스가 SQL 테이블에 매핑되었음을 나타냅니다.\n- PrimaryKey는 속성이 테이블에서 행을 식별하는 것을 나타냅니다. 다른 속성이 무엇이든 해당 기본 키로 해당 행이 단수식별됩니다.\n- ColumnInfo는 속성을 DB의 열 이름에 매핑합니다. 예를 들어, 이름 변수는 이름 열에 해당합니다.\n\n# Room Database\n\n이제 DB 자체를 나타내는 개체도 필요합니다. 이 객체는 우리에게 DAO라는 자체 인터페이스를 제공하는 책임이 있습니다. Kotlin 주석 처리 도구가 자동 생성하므로 다음과 같이 주석이 달린 추상 클래스를 만듭니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@Database(entities = [Favorite::class], version = 1, exportSchema = false)\nabstract class PokemonDatabase: RoomDatabase() {\n    abstract fun pokemonDao(): PokemonDao\n}\n```\n\n우리에게 의미하는 바:\n\n- Database는 Favorite 모델로 표현된 단일 테이블로 구성된 Room DB 표현으로 우리의 클래스를 주석 처리합니다.\n- PokemonDao를 반환하는 단일 추상 함수를 제공하여 DB에 액세스하려고 시도할 때 호출될 것입니다.\n\n모든 것이 SQLite 로컬 데이터베이스에서 작동하는 코드를 생성할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 저장소\n\n이전에 설명했듯이, 저장소 패턴은 UI 바깥의 원격 데이터 소스에 대한 패싸드 역할을 하는 레이어입니다. 일반적으로 MVVM 아키텍처를 채택할 때는 ViewModel이 액세스하며, VIPER/Clean과 함께 작업할 때는 인터랙터가 액세스합니다. 중요한 점은 저장소가 DAO 내의 모든 작업을 캡슐화하고 각 함수가 데이터 소스에 매핑되어야 한다는 것입니다:\n\n```js\ninterface FavoritesRepositoryInterface {\n    fun getFavorites(): Flow<List<Favorite>>\n    suspend fun getFavoriteByName(name: String): Favorite?\n    suspend fun insertFavorite(favorite: Favorite)\n    suspend fun updateFavorite(favorite: Favorite)\n    suspend fun deleteFavorite(favorite: Favorite)\n    suspend fun deleteAllFavorites()\n}\n\nclass FavoritesRepository(\n    private val dao: PokemonDao\n): FavoritesRepositoryInterface {\n    override fun getFavorites(): Flow<List<Favorite>> = dao.getFavorites()\n    override suspend fun getFavoriteByName(name: String): Favorite? = dao.getFavoriteByName(name)\n    override suspend fun insertFavorite(favorite: Favorite) = dao.insertFavorite(favorite)\n    override suspend fun updateFavorite(favorite: Favorite) = dao.updateFavorite(favorite)\n    override suspend fun deleteFavorite(favorite: Favorite) = dao.deleteFavorite(favorite)\n    override suspend fun deleteAllFavorites() = dao.deleteAllFavorites()\n}\n```\n\nPokemonDao를 저장소에 주입하고 각 함수가 Dao에서 다른 함수를 호출하는 것을 주목하세요. 또한 저장소는 ViewModel에 인터페이스로서 액세스되어야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Flow 출력 x Suspend 함수\n\n첫 번째 방법이 다른 것들처럼 suspendable하지 않은 이유와 왜 모델 자체가 아닌 데이터의 Flow를 반환하는지 궁금할 수 있습니다. 실제로 이 작업은 비동기적일 것이지만 Flow 자체는 비동기적으로 도착하는 데이터의 흐름입니다. 이는 iOS에서의 Publisher와 동등하며, 데이터 소스가 보내는 많은 객체를 수신하기 위해 구독할 수 있지만, 우리는 데이터 수집 중이라고 말했다는 점에서 구독과는 다릅니다. 상태 Flow와 다르게, 이는 cold flow입니다.\n\n![image](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_2.png)\n\n두 가지의 차이는 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 다른 곳에서 반환된 Flow는 비동기가 아니지만 수집하는 것은 비동기이므로 메인 스레드 바깥에서 수행해야 합니다.\n- 일시 중단 함수를 호출할 때는 항상 코루틴에서 수행해야 합니다. 출력에 관계없이 항상 비동기 작업입니다.\n- Flow를 관찰할 때는 Flow가 반환하는 객체를 수신하는 연속적인 링크이므로 관찰을 중지할 때까지 많은 객체를 수신합니다.\n\n# Pokemon 세부 정보에서 즐겨찾기 추가\n\n이제 Pokemon 세부 화면에서 Pokemon을 즐겨찾기 기능을 추가하는 데 필요한 UI 및 기능을 추가해 보겠습니다. 먼저 앱 바에 새로운 위젯을 추가해야 합니다:\n\n```js\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun AppTopBar(\n    title: String,\n    shouldDisplayBackButton: Boolean,\n    trailingIcon: @Composable (() -> Unit) = { },\n    iconTapAction: (() -> Unit)\n) {\n    Surface(\n        shadowElevation = 4.dp,\n        color = Color.White\n    ) {\n        CenterAlignedTopAppBar(title = {\n            Text(\n                title, fontSize = 18.sp,\n                fontWeight = FontWeight.Bold\n            )\n        }, navigationIcon = {\n            if(shouldDisplayBackButton)\n                IconButton(\n                    onClick = { iconTapAction() }\n                ) {\n                    Icon(\n                        imageVector = Icons.Default.ArrowBack,\n                        contentDescription = null\n                    )\n                }\n        }, actions = {\n            trailingIcon()\n        })\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n디자인 설명에 대해서는 신경 쓰지 말고, 우리의 상세 화면에 즐겨찾기 버튼을 좋아하는 아이콘으로 적용해보자. 아이콘 틴트 색상은 포켓몬이 즐겨찾기 상태인지 아닌지에 따라 달라질 것이다. 아래 내용을 PokemonDetailsViewModel에 추가해 주세요:\n\n```kotlin\nclass PokemonDetailsViewModel(\n    private val repository: PokemonDetailsRepositoryInterface,\n    // New repository\n    private val favoritesRepository: FavoritesRepositoryInterface\n): ViewModel() {\n    private val _pokemonDetails = MutableStateFlow<PokemonDetailsModel?>(null)\n    private val _isLoading = MutableStateFlow<Boolean>(true)\n    private val _gotError = MutableStateFlow<Boolean>(false)\n    // Favorite state\n    private val _isFavorite = MutableStateFlow<Boolean>(false)\n    private var favoriteModel: Favorite? = null\n    val pokemonDetails: StateFlow<PokemonDetailsModel?> get() = _pokemonDetails.asStateFlow()\n    val isLoading: StateFlow<Boolean> get() = _isLoading.asStateFlow()\n    val gotError: StateFlow<Boolean> get() = _gotError.asStateFlow()\n    // Favorite state\n    val isFavorite: StateFlow<Boolean> get() = _isFavorite.asStateFlow()\n\n    fun fetchDetails(name: String) {\n        viewModelScope.launch {\n            _isLoading.value = true\n            // Checks favorite status before fetching data\n            getIsFavorite(name)\n            val result = repository.getPokemonDetails(name)\n            val error = result.errorBody()\n            val data = result.body()\n            if (error != null || !result.isSuccessful) {\n                Log.d(\"Got an error\", \"Got an error\")\n                _isLoading.value = false\n                _gotError.value = true\n                return@launch\n            }\n            if (data != null) {\n                Log.d(\"Got data\", \"Got data\")\n                _isLoading.value = false\n                _pokemonDetails.value = data\n            } else {\n                Log.d(\"Got nothing\", \"Got data\")\n                _isLoading.value = false\n            }\n        }\n    }\n\n    // Checks if the pokemon is favorite or not and delegates the\n    // corresponding operation to the Repository\n    fun didClickFavorite() {\n        viewModelScope.launch {\n            if (_isFavorite.value) {\n                favoriteModel?.let {\n                    favoritesRepository.deleteFavorite(it)\n                }\n            } else {\n                pokemonDetails.value?.let {\n                    favoritesRepository.insertFavorite(Favorite(\"${it.id}\", it.name))\n                }\n            }\n        }\n        _isFavorite.value = !_isFavorite.value\n    }\n\n    // Fetches in our FavoritesRepository if the pokemon is favorite by\n    // checking the output object\n    private suspend fun getIsFavorite(name: String) {\n        favoriteModel = favoritesRepository.getFavoriteByName(name)\n        _isFavorite.value = favoriteModel != null\n    }\n}\n```\n\n- 포켓몬 이름으로 Favorite 객체를 가져와서 해당 포켓몬이 즐겨찾기 상태인지 아닌지 확인합니다. 만약 null이면 즐겨찾기가 아닙니다. Repository는 DB에서 정보를 가져오기 위해 DAO와 통신할 것입니다.\n- 포켓몬이 즐겨찾기 상태인지 여부에 관계없이 이를 isFavorite 상태 변수에 저장할 것입니다.\n- 즐겨찾기 버튼을 클릭하면 즐겨찾기 상태가 확인되고, 이에 따라 포켓몬이 태그가 달릴 것인지 여부가 결정됩니다.\n\n# UI 업데이트하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 우리의 PokemonDetailsScreen을 업데이트하여 사용자 상호 작용에 따라 새 이벤트를 ViewModel로 위임하겠습니다. 맨 위에 있는 새로운 앱 바를 추가하기 위해 Scaffold에 넣어주세요:\n\n```js\n@Composable\nfun PokemonDetailsScreen(\n    navController: NavController,\n    name: String,\n    viewModel: PokemonDetailsViewModel = get()\n) {\n    // MARK: - State\n    val pokemonDetails = viewModel.pokemonDetails.collectAsState()\n    val isLoading = viewModel.isLoading.collectAsState()\n    val gotError = viewModel.gotError.collectAsState()\n    // Favorite State\n    val isFavorite = viewModel.isFavorite.collectAsState()\n\n    LaunchedEffect(pokemonDetails) {\n        viewModel.fetchDetails(name)\n    }\n\n    // Scaffold\n    Scaffold(topBar = {\n        // New app bar\n        AppTopBar(\n            title = \"Pokemon Details\",\n            shouldDisplayBackButton = true,\n            trailingIcon = {\n                // Manipulates and represents favorite state\n                IconButton(onClick = {\n                    viewModel.didClickFavorite()\n                }) {\n                    Icon(\n                        imageVector = Icons.Default.Favorite,\n                        contentDescription = null,\n                        tint = if(isFavorite.value) Color.Red else Color.LightGray\n                    )\n                }\n            },\n            iconTapAction = { navController.popBackStack() }\n        )\n    }) {\n        Content(\n            modifier = Modifier.padding(it),\n            isLoading = isLoading.value,\n            gotError = gotError.value,\n            pokemonDetails = pokemonDetails.value\n        )\n    }\n}\n```\n\nAppTopBar composable에 주목하고 trailing icon이 즐겨찾기 상태를 나타내는지 확인해주세요. 버튼을 클릭하면 해당 이벤트가 ViewModel로 위임됩니다.\n\n이것이 우리의 상세 화면이 보이는 방식입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*V6RtRHdYOsE2nyptLC7PFQ.gif\" />\n\n이제 우리는 모든 즐겨찾기 아이템을 제공하는 새로운 화면을 만들겠습니다.\n\n# 즐겨찾기 화면\n\n이제 우리는 즐겨찾기 포켓몬을 표시할 새로운 화면을 만들 것입니다. 즐겨찾기 목록을 모두 가져오고 데이터를 적절히 조작할 ViewModel을 만들어주세요. 이 ViewModel은 Repository에 접근할 수 있을 것입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nclass FavoriteListViewModel(\n    private val repository: FavoritesRepositoryInterface\n): ViewModel() {\n    private val _favoriteList = MutableStateFlow<List<Favorite>>(listOf())\n\n    val favoriteList: StateFlow<List<Favorite>> get() = _favoriteList\n\n    init {\n        getFavoritePokemon()\n    }\n\n    private fun getFavoritePokemon() {\n        viewModelScope.launch {\n            repository\n                .getFavorites()\n                .distinctUntilChanged()\n                .map { it.sortedBy { it.id } }\n                .collect { _favoriteList.value = it }\n        }\n    }\n\n    fun didClickDelete(favorite: Favorite) {\n        viewModelScope.launch {\n            repository.deleteFavorite(favorite)\n        }\n    }\n}\n```\n\n알 수 있듯이, 해당 코드는 즐겨찾는 포켓몬 목록을 제공하며, 시작할 때 가져오며, 특정 포켓몬을 지우기 위해 트리거되는 삭제 기능을 제공합니다. 사용자가 특정 포켓몬을 삭제하려고 탭할 때 작동합니다.\n\n이제 새로운 화면을 만들고 내비게이션 그래프에 통합해 보겠습니다. 좀 더 정교한 디자인으로 즐겨찾는 셀을 만들겠지만, UI 부분은 이 글의 초점이 아닙니다:\n\n```kotlin\n@Composable\nfun FavoriteListScreen(\n    navController: NavController,\n    viewModel: FavoriteListViewModel = get()) {\n    val favoriteList = viewModel.favoriteList.collectAsState()\n\n    Scaffold(topBar = {\n        AppTopBar(\n            title = \"Favorite Pokemon\",\n            shouldDisplayBackButton = true) {\n            navController.popBackStack()\n        }\n    }) {\n        Surface(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(it),\n            color = Color.White\n        ) {\n            // Favorite pokemon lazy list\n            LazyColumn(\n                modifier = Modifier.padding(20.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n                items(favoriteList.value) { item ->\n                    // Favorite Row\n                    FavoriteRow(favorite = item, clickAction = {\n                        // 셀을 클릭하면 상세 화면으로 이동합니다.\n                        navController.navigate(\"details/${item.name}\")\n                    }) {\n                        // 삭제 버튼을 클릭하면 DB에서 포켓몬을 삭제합니다.\n                        viewModel.didClickDelete(item)\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun FavoriteRow(\n    modifier: Modifier = Modifier,\n    favorite: Favorite,\n    clickAction: (() -> Unit),\n    deleteAction: (() -> Unit)\n) {\n    Surface(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(64.dp)\n            .clickable { clickAction() },\n        shape = RoundedCornerShape(\n            topStart = CornerSize(32.dp),\n            topEnd = CornerSize(4.dp),\n            bottomStart = CornerSize(32.dp),\n            bottomEnd = CornerSize(32.dp)\n        ),\n        color = Color(0xFFADD8E6)\n    ) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(horizontal = 56.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.SpaceBetween,\n        ) {\n            // 포켓몬 이름\n            Text(\n                favorite.name,\n                fontSize = 20.sp\n            )\n\n            // 삭제 버튼\n            IconButton(onClick = deleteAction) {\n                Icon(\n                    imageVector = Icons.Default.Delete,\n                    contentDescription = null,\n                    tint = Color(0x89FF1F0F)\n                )\n            }\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희 화면은 이렇게 나와야 합니다:\n\n![이미지](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_3.png)\n\n이제 앱 내비게이션 레이어에 새 경로를 추가해 보겠습니다:\n\n```javascript\n@Composable\nfun PokeAPIApp(navController: NavHostController = rememberNavController()) {\n    NavHost(navController = navController, startDestination = \"list\") {\n        composable(\"list\") {\n            PokemonListScreen(navController = navController, viewModel = get())\n        }\n\n        composable(\n            \"details/{id}\",\n            arguments = listOf(navArgument(\"id\") { type = NavType.StringType }),\n            enterTransition = {\n                slideIntoContainer(\n                    towards = AnimatedContentTransitionScope.SlideDirection.Companion.Left,\n                    animationSpec = tween(700)\n                )\n            },\n            exitTransition = {\n                slideOutOfContainer(\n                    towards = AnimatedContentTransitionScope.SlideDirection.Companion.Right,\n                    animationSpec = tween(700)\n                )\n            }\n        ) { backStackEntry ->\n            backStackEntry.arguments?.getString(\"id\")\n                ?.let { PokemonDetailsScreen(navController = navController, name = it) }\n        }\n\n        composable(\"favorites\") {\n            FavoriteListScreen(navController = navController)\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 메인 화면에 링크 걸기\n\n즐겨찾기 화면에 접근하려면 주요 허브를 약간 변경하여 새로운 플로팅 버튼을 지원하도록 해야 합니다. PokemonListScreen 콘텐츠를 Scaffold에 포함시키고 새로운 FavoriteButton composable을 새 화면으로 연결하는 플로팅 버튼으로 배치해주세요:\n\n```js\n@Composable\nfun FavoriteButton(\n    modifier: Modifier = Modifier,\n    onClickAction: (() -> Unit)\n) {\n    IconButton(\n        modifier = modifier,\n        onClick = onClickAction\n    ) {\n        Surface(\n            shape = CircleShape,\n            color = Color.Blue\n        ) {\n            Icon(\n                modifier = Modifier.padding(8.dp),\n                imageVector = Icons.Default.Favorite,\n                contentDescription = null,\n                tint = Color.White\n            )\n        }\n    }\n}\n```\n\n```js\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun PokemonListScreen(\n    navController: NavController,\n    viewModel: PokemonListViewModel = get()\n) {\n    val pagingData = viewModel.pagingData.collectAsLazyPagingItems()\n\n    // Scaffold\n    Scaffold(topBar = {\n        Surface(\n            shadowElevation = 4.dp,\n            color = Color.White\n        ) {\n            // App bar\n            AppTopBar(title = \"Pokemon List\", shouldDisplayBackButton = false) { }\n        }\n    }, floatingActionButton = {\n        // 즐겨찾기 목록으로 이동하는 링크\n        FavoriteButton(\n            modifier = Modifier\n                .padding(bottom = 16.dp)\n        ) {\n            navController.navigate(\"favorites\")\n        }\n    }) {\n        // 기존 코드!!!\n        Surface(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(it),\n            color = MaterialTheme.colorScheme.background\n        ) {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.Top\n            ) {\n                LazyColumn {\n                    items(pagingData.itemCount) {\n                        val name = pagingData[it]?.name ?: \"\"\n                        PokemonCell(\n                            index = \"${it+1}\",\n                            name = name\n                        ) {\n                            navController.navigate(\"details/$name\")\n                        }\n                    }\n                    pagingData.apply {\n                        when {\n                            loadState.refresh is LoadState.Loading -> {\n                                item { CircularProgressIndicator() }\n                            }\n                            loadState.refresh is LoadState.Error -> {\n                                item {\n                                    ErrorState()\n                                }\n                            }\n                            loadState.append is LoadState.Loading -> {\n                                item { CircularProgressIndicator() }\n                            }\n                            loadState.append is LoadState.Error -> {\n                                item {\n                                    ErrorState()\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 인터페이스가 이렇게 보입니다:\n\n![interface](https://miro.medium.com/v2/resize:fit:1400/1*H3CYZpUd982OPtcJ-vcKDw.gif)\n\n우리의 UI는 거의 완료되었지만, 한 가지 매우 중요한 부분을 잊고 있습니다: 의존성 주입.\n\n# 앱 모듈 업데이트\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희는 아직 데이터베이스와 DAO를 어떻게 생성할지 정의하지 않았어요. 각각을 위한 함수가 필요해요:\n\n```js\nfun providePokemonDao(database: PokemonDatabase): PokemonDao {\n    return database.pokemonDao()\n}\n\nfun providePokemonDatabase(context: Context): PokemonDatabase {\n    return Room.databaseBuilder(\n        context,\n        PokemonDatabase::class.java,\n        \"weather_database\"\n    )\n        .fallbackToDestructiveMigration()\n        .build()\n}\n```\n\nDB의 생성은 Retrofit API 인터페이스를 인스턴스화하는 패턴과 매우 유사하지만, 이번에는 RoomDatabase 서브 클래스, 앱 컨텍스트, 그리고 DB 이름을 전달해요. DAO는 PokemonDatabase 클래스의 자동 생성된 함수에서만 반환되네요.\n\n이제 모듈에 다음 DSL 표현식을 포함해주세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nfun <PokemonDatabase> {\n   providePokemonDatabase(androidContext())\n }\n\nfun <PokemonDao> {\n    providePokemonDao(get())\n }\n\nviewModel { PokemonDetailsViewModel(get(), get()) }\n\nfun <FavoritesRepositoryInterface> { FavoritesRepository(get()) }\nviewModel { FavoriteListViewModel(get()) }\n```\n\n이제 우리 앱이 작동할 준비가 되었습니다!\n\n# 결론\n\n이 문서는 Android 앱에서 데이터를 로컬로 영속화하는 다양한 방법 중 하나를 소개했습니다. SQL을 사용하여 꽤 조직화된 패턴으로 Room 데이터베이스를 다루는 것은 관계형 데이터베이스의 SQL 테이블을 조작하는 것과 매우 유사하지만 네트워크 연결이 필요하지 않습니다. 삽입, 업데이트, 쿼리 및 삭제 작업을 조작할 수 있으며 모든 작업은 Repository 패턴을 통해 추상화될 수 있습니다. 즐겁게 읽으셨기를 바랍니다 ;)\n","ogImage":{"url":"/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_0.png"},"coverImage":"/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_0.png","tag":["Tech"],"readingTime":27},{"title":"루비 마스터하기 동적 프로그래밍 언어에 대한 포괄적인 가이드","description":"","date":"2024-05-18 15:20","slug":"2024-05-18-MasteringRubyAComprehensiveGuidetotheDynamicProgrammingLanguage","content":"\n![이미지](/assets/img/2024-05-18-MasteringRubyAComprehensiveGuidetotheDynamicProgrammingLanguage_0.png)\n\n소개:\n\n프로그래밍 언어의 세상에서는 선택할 수 있는 다양한 옵션이 있습니다. 각 언어는 고유한 기능과 장점을 갖추고 있어, 다양한 개발자들의 요구사항과 선호도를 충족시킵니다. Ruby와 같은 동적이고 다재다능한 언어가 있습니다. 우아한 문법, 유연성, 객체지향 프로그래밍 기능으로 유명한 Ruby는 전 세계의 개발자들 사이에서 인기를 얻고 있습니다. 이 블로그에서는 Ruby 프로그래밍의 세계에 대해 탐구하며, 주요 기능, 사용 사례, 그리고 기술 스택에 추가해야 하는 이유를 살펴볼 것입니다.\n\n제1장: Ruby 이해하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비는 간결함과 생산성에 초점을 맞춘 다이내믹한 오픈 소스 프로그래밍 언어입니다. 유키히로 마츠모토(Yukihiro Matsumoto)에 의해 1990년대 중반에 개발되었으며 Matz로도 불립니다.\n\n루비는 개발자들에게 프로그래밍을 즐겁게 만들기 위해 디자인된 것으로 알려져 있습니다. 루비는 모든 것이 객체로 이뤄져 있는 객체지향적 접근 방식으로 유명합니다.\n\n이는 개발자들이 데이터를 쉽게 조작하고 재사용 가능한 코드를 만들 수 있도록 돕습니다.\n\n루비의 중요한 특징 중 하나는 읽고 쓰기 쉬운 우아한 문법입니다. 이런 가독성은 초보자들이 배우기에 좋은 언어로 만들어 줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n경험이 있는 개발자가 효율적으로 작업할 수 있도록 지원합니다. Ruby는 메타프로그래밍을 지원하며 개발자가 런타임에서 자체를 수정할 수 있는 코드를 작성할 수 있습니다.\n\n이 유연성은 동적 애플리케이션을 만들 수 있는 무한한 가능성을 열어줍니다.\n\n### 2장: 루비 실전 활용\n\n루비는 웹 개발부터 자동화 및 스크립팅까지 다양한 응용 프로그램에 사용될 수 있는 다재다능한 언어입니다. 루비로 만들어진 가장 인기 있는 프레임워크 중 하나는 루비온레일즈입니다. 루비온레일즈 또는 Rails로 알려진 이 프레임워크는 모델-뷰-컨트롤러(MVC) 패턴을 따르는 강력한 웹 응용 프레임워크입니다. 개발 프로세스를 간소화하여 웹 응용 프로그램을 빠르고 효율적으로 구축할 수 있도록 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n웹 개발 이외에도 Ruby는 데이터 분석, 게임 개발 및 시스템 관리에 사용할 수 있습니다. 풍부한 라이브러리와 젬 세트를 통해 Ruby의 기능을 쉽게 확장하고 다른 기술과 통합할 수 있습니다. 소규모 프로젝트를 처리하는 프리랜서이든 대기업이 엔터프라이즈급 소프트웨어를 개발하든 간에 Ruby는 성공하기 위해 필요한 도구와 지원을 제공합니다.\n\n## 3장: Ruby 시작하기\n\nRuby에서 프로그래밍을 시작하려면 컴퓨터에 Ruby 인터프리터를 설치해야 합니다. Ruby는 Windows, macOS 및 Linux와 호환되어 다양한 개발자가 접근할 수 있습니다. Ruby를 설치한 후에는 텍스트 편집기 또는 통합 개발 환경(IDE)을 사용하여 Ruby 코드를 작성하고 실행할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비로 간단한 \"Hello, World!\" 프로그램부터 시작해볼까요:\n\n```ruby\nputs \"Hello, World!\"\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 코드를 `.rb` 확장자로 저장한 후 루비 인터프리터를 사용하여 실행해 보세요. 콘솔에 \"Hello, World!\" 출력이 표시될 것입니다. 이 간단한 예제는 루비 문법의 단숨함과 우아함을 보여줍니다.\n\n제 4장: 고급 루비 기술\n\n루비 프로그래밍 여정을 진행하면서, 여러분의 스킬을 한 단계 높일 수 있는 고급 기술과 개념을 만나게 될 것입니다. 아래는 탐험할 수 있는 고급 주제 몇 가지입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n1. 메타프로그래밍: 루비의 메타프로그래밍 기능을 통해 자체를 수정할 수 있는 코드를 작성할 수 있습니다. 실행 중에 메소드를 정의하고 동적으로 클래스를 생성하여 매우 유연하고 사용자 정의 가능한 응용 프로그램을 구축할 수 있습니다.\n\n2. 블록과 프록: 루비는 코드 청크인 블록을 지원하며, 객체처럼 전달할 수 있는 코드 청크입니다. 프록은 코드 블록을 캡슐화하는 객체로, 함수 실행 방식을 더욱 세밀하게 제어할 수 있습니다.\n\n3. 모듈과 믹스인: 루비의 모듈은 메소드, 상수 및 클래스를 담는 컨테이너입니다. 믹스인을 통해 모듈 메소드를 클래스 인스턴스에 추가하여 코드 재사용을 촉진하고 모듈화된 설계를 촉진할 수 있습니다.\n\nChapter 5: 루비 온 레일즈로 웹 애플리케이션 구축하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비 온 레일즈는 웹 애플리케이션 개발을 간단하게 만드는 강력한 프레임워크입니다. 레일즈의 규칙을 따르면 빠르게 기능 풍부한 웹사이트와 웹 서비스를 구축할 수 있습니다. 이제 루비 온 레일즈를 사용하여 간단한 블로그 애플리케이션을 만드는 단계는 다음과 같습니다:\n\n1. 레일즈 설치: 시스템에 루비 온 레일즈를 설치하려면 `gem install rails` 명령을 사용하세요.\n\n2. 새 레일즈 애플리케이션 생성: `rails new blog` 명령을 실행하여 \"blog\"라는 새 레일즈 프로젝트를 만드세요.\n\n3. 스캐폴드 생성: `rails generate scaffold Post title:string body:text`를 사용하여 제목과 내용 속성을 가진 새 Post 모델을 생성하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n4. 데이터베이스 이주: `rails db:migrate`를 실행하여 애플리케이션을 위한 데이터베이스 테이블을 생성하세요.\n\n5. Rails 서버 시작: `rails server`를 실행하고 `http://localhost:3000`으로 이동하여 블로그 애플리케이션을 확인하세요.\n\n제6장: 결론\n\nRuby는 다재다능하고 강력한 프로그래밍 언어로, 다양한 개발 기능을 제공합니다. 우아한 구문부터 활기찬 커뮤니티와 생태계까지, Ruby는 동적이고 기능 풍부한 애플리케이션을 구축하려는 사람들에게 여전히 최고의 선택지입니다. 프로그래밍 세계를 탐험하는 초보자든, 견고한 도구 세트를 찾는 경험 많은 개발자든, Ruby는 모두에게 무엇인가를 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비를 숙달하고 그 고급 기능을 탐험함으로써, 당신은 새로운 가능성을 발견하고 프로그래밍 기술을 높은 수준으로 성장시킬 수 있습니다. 그래서, 지금당신의 루비 여정을 시작해보고 이 동적 언어의 매력을 발견해보는 것은 어떨까요?\n\n이렇게하여, 우리는 루비 프로그래밍에 대한 철저한 탐구를 마무리합니다. 이 블로그가 여러분의 코딩 모험에 가치 있는 통찰과 영감을 제공했기를 바랍니다. 기억하세요, 프로그래밍의 세계는 방대하고 끊임없이 진화하고 있으므로, 항상 함께 있는 루비로 배우고 탐험하며 창작해 나가십시오.\n","ogImage":{"url":"/assets/img/2024-05-18-MasteringRubyAComprehensiveGuidetotheDynamicProgrammingLanguage_0.png"},"coverImage":"/assets/img/2024-05-18-MasteringRubyAComprehensiveGuidetotheDynamicProgrammingLanguage_0.png","tag":["Tech"],"readingTime":6},{"title":"루비에서의 리팩터링  기본적 허락","description":"","date":"2024-05-18 15:19","slug":"2024-05-18-RefactoringinRubyPrimitiveObsession","content":"\nPrimitive Obsession은 도메인 개념을 나타내기 위해 전용 클래스를 만들기보다 문자열, 숫자 또는 배열과 같은 기본 데이터 유형을 과도하게 사용하는 것을 의미합니다. 이는 이해하기 어려우며 유지보수 및 확장이 어려운 코드로 이어질 수 있습니다.\n\n![image](/assets/img/2024-05-18-RefactoringinRubyPrimitiveObsession_0.png)\n\nRuby 언어에 관심이 있다면, 해당 언어에서 리팩터링 및 디자인 패턴에 대해 더 많이 알아볼 수 있습니다: [https://rubyhub.vercel.app/](https://rubyhub.vercel.app/). 현재 웹사이트는 준공 중이지만 미래에 더 많은 주제가 등장할 것입니다.\n\n# 문제들\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 코드 중복 - 코드베이스 전체에서 프리미티브 데이터 유형(예: 문자열 또는 해시)을 조작하는 동일한 로직이 반복되면 코드 중복이 발생할 수 있습니다.\n- 의미 부족 - 문자열이나 정수와 같은 프리미티브 데이터 유형에는 의미적 의미가 부족합니다.\n- 표현 능력 제한 - 프리미티브 데이터 유형은 사용자 정의 클래스와 비교하여 제한된 표현 능력을 제공합니다. 도메인 개념을 위해 전용 클래스를 만들면 속성과 메서드에 의미 있는 이름을 제공하여 코드를 자기 설명적으로 만들고 이해하기 쉽게 할 수 있습니다.\n- 확장성에 대한 어려움 - 프리미티브 데이터 유형을 사용할 때 도메인 개념과 관련된 동작을 확장하거나 새 기능을 추가하는 것이 어려울 수 있습니다.\n- 오류가 발생하기 쉬운 데이터 조작 - 프리미티브 데이터 유형을 직접 조작하는 것은 복잡한 데이터 구조나 비즈니스 규칙을 다룰 때 특히 오류가 발생할 수 있습니다.\n- 테스트 복잡성 - 프리미티브 데이터 유형을 많이 의존하는 코드를 테스트하는 것은 복잡할 수 있습니다. 이러한 유형과의 다양한 상호작용을 목업하거나 스텁 처리해야 합니다.\n\n# 실제 예시\n\n이 코드 냄새를 나타내는 가장 일반적인 데이터는 전화 번호나 금액과 같은 데이터입니다. 처음에는 일반 변수에 할당하지만 코드를 개발하는 과정에서 그들에게 더 많은 기능을 추가해야 한다는 것을 알게 됩니다.\n\n달러로 급여를 받는다고 상상해보세요(상상할 필요 없는 경우 제외). 스페인에서 집을 사려고 하는데, 그 집의 가격이 유로로 설정되어 있습니다. 그런 집을 구입하는 데 몇 달이 걸릴지 계산할 수 있는 간단한 프로그램을 작성해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 달러로 표시된 당신의 월급\n\nsalary = 5000\n\n# 유로로 표시된 집값\n\nhouse_cost = 100,000\n\neur_to_usd_rate = 1.09\n\n((house_cost \\* eur_to_usd_rate) / salary).ceil # => 21\n\n우리는 보듯이, 이 코드는 그리 좋아보이지 않습니다. 어떤 값이 어떤 통화에 있는지 알기 위해서는 코드에 추가적인 주석을 달 필요가 있습니다. 또한 값을 다른 통화로 변환할 수 있는 변수를 정의해야 합니다.\n\n계속 이 프로그램을 작업하기 쉽게 만들기 위해, 우리가 돈을 보다 쉽게 다룰 수 있는 새로운 클래스를 생성해야 할 것입니다.\n\nclass Money\nattr_reader :amount, :currency\n\ndef initialize(amount, currency)\n@amount = amount\n@currency = currency\nend\n\ndef dollar?\ncurrency == \"$\"\nend\n\ndef euro?\ncurrency == \"€\"\nend\n\ndef to_euro\nreturn amount if euro?\n\n    amount * 0.92\n\nend\n\ndef to_dollar\nreturn amount if dollar?\n\n    amount * 1.09\n\nend\nend\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 새 클래스를 사용해 보겠습니다.\n\n```js\nhouse_cost = Money.new 100_000, \"€\"\nsalary = Money.new 5000, \"$\"\n\n(house_cost.to_dollar / salary).ceil # => 21\n```\n\n# 장단점\n\n## 장점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 가독성과 표현력 향상 - 도메인별 클래스는 도메인 개념을 더 잘 반영하는 의미 있는 추상화를 제공합니다.\n- 향상된 유형 안정성 - 도메인별 클래스는 행동과 유효성 검증 논리를 캡슐화하여 더 강력한 유형 안정성을 제공합니다.\n- 중앙 집중화된 로직 - 기본 허영 주의의 리팩터링은 도메인 개념과 관련된 로직의 중앙 집중화를 가능하게 합니다.\n- 유지 보수 및 확장 용이성 - 도메인별 클래스를 사용하면 도메인 로직의 변경을 한 곳에서 처리할 수 있어 유지 보수 및 확장이 용이해집니다.\n\n## 단점\n\n- 복잡성 증가 - 도메인별 클래스 도입은 코드베이스에 복잡성을 추가할 수 있습니다. 특히 제대로 관리되지 않을 경우입니다. 개발자는 추가된 추상화가 코드를 지나치게 복잡하게 만들지 않도록 주의해야 합니다.\n- 학습 곡선 - 도메인별 클래스를 도입하는 것은 개발자들이 새로운 개념과 API를 학습할 필요가 있을 수 있습니다. 특히 도메인이나 사용된 설계 패턴에 익숙하지 않은 경우입니다.\n- 성능 오버헤드 - 도메인별 클래스는 추가적인 유효성 검사나 형식 지정 논리와 관련된 경우 기본 유형을 사용하는 것과 비교하여 약간의 성능 오버헤드를 도입할 수 있습니다. 그러나 대부분의 경우 이러한 오버헤드는 무시될 수 있습니다.\n- 과도한 공학 - 기본 허영 주의를 리팩터링할 때 너무 복잡한 추상화를 만들어서 응용 프로그램 요구 사항으로 정당화할 수 없는 경우에는 과도한 공학의 위험이 있습니다.\n- 의존성 관리 - 도메인별 클래스를 도입하면 코드베이스의 다른 부분 간의 의존성이 증가할 수 있으므로 긴밀한 결합을 피하고 모듈성을 유지하기 위해 주의 깊게 관리해야 합니다.\n\n![이미지](/assets/img/2024-05-18-RefactoringinRubyPrimitiveObsession_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비에서 리팩터링에 관한 책을 작업 중이에요. 이 주제에 관심이 있다면, 제 뉴스레터에 가입하실 수 있어요 📪️: [https://mailchi.mp/e3dd49dfada1/medium](https://mailchi.mp/e3dd49dfada1/medium). 제 구독자들은 출판 후 즉시 무료로 전자책 링크를 받을 수 있어요. 🆓\n","ogImage":{"url":"/assets/img/2024-05-18-RefactoringinRubyPrimitiveObsession_0.png"},"coverImage":"/assets/img/2024-05-18-RefactoringinRubyPrimitiveObsession_0.png","tag":["Tech"],"readingTime":5},{"title":"undefined","description":"","date":"2024-05-18 15:18","slug":"undefined","content":"\nRuby에서 freeze는 무엇에 사용되는 거죠?\n\n우리는 루비에서 이렇게 대문자로 상수를 생성할 수 있어요:\n\n```js\nclass DemoClass\n  FIRST_CONSTANT = \"constant 1\"\nend\n```\n\n이제 여기 문제점이 있는데, 실제로는 상수가 아니에요. 적어도 오래된 루비에는 그렇지 않아요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n동결이 어디에 들어가는 걸까요?\n\n![이미지](/assets/img/undefined_0.png)\n\n## 상수는 무엇인가요? 어떻게 정의하나요?\n\n상수라는 단어 자체가 변하지 않는 것을 의미합니다. 하지만 위의 예제에서 FIRST_CONSTANT은 변경할 수 없는 것일까요? 새로운 루비 버전에서는 기본적으로 상수지만, 이전 버전에서는 상수로 만들려면 .freeze를 사용해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 메서드 내에서 상수를 정의하면 어떻게 됩니까?\n\n```js\ndef test_method\n  FIRST_CONSTANT = \"constant 1\"\nend\n```\n\n위 예제와 같이 메서드 내에서 상수를 정의하려고 하면 오류가 발생합니다: 동적 상수 할당\n\n메서드 내에 상수를 정의하려고 시도하면 해당 메서드가 호출될 때마다 생성되기 때문에 오류가 발생합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 메소드 안에서 변수를 어떻게 동결하면 될까요?\n\n```ruby\ndef test_method\n  first_variable = \"상수 1\".freeze\nend\n```\n\n이제 이렇게 하면 오류가 발생하지는 않지만, first_variable이 이제 상수인 것은 아닙니다. 이렇게 하면 값인 \"상수 1\"을 동결시키는 것 뿐입니다. 변수의 값을 변경하더라도 오류 없이 수행됩니다.\n\n```ruby\ndef test_method\n  first_variable = \"상수 1\".freeze\n\n  first_variable = \"새 값\"\n  puts first_variable\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 코드는 새로운 값을 출력할 것입니다.\n\n값을 \"동결\"한다는 것은 무엇을 의미할까요? 문자열 상수 1이 어떻게 동결되는 걸까요?\n\ntest_method 메서드가 호출될 때마다, 루비는 상수 1에 대한 새 문자열 객체를 생성하지만, 이를 동결하면 루비는 한 번만 생성하고 메모리에 저장합니다. 이렇게 하면 객체를 생성하는 데 소요되는 시간이 단축되어 코드 실행 속도가 더 빨라집니다.\n\n이제 상수 1이 어떻게 동결되는지 설명해 드리겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndef test_method\n  first_variable = \"constant 1\".freeze\n\n  first_variable << \"append value\"\n  puts first_variable\nend\n```\n\n위의 코드를 실행하면 'can`t modify frozen string'라는 오류가 발생합니다. constant 1로 지정된 문자열은 동결되어 있지만 변수인 first_variable은 다른 값으로 지정될 수 있습니다.\n","ogImage":{"url":"/assets/img/undefined_0.png"},"coverImage":"/assets/img/undefined_0.png","tag":["Tech"],"readingTime":3},{"title":"루비 온 레일즈 인터뷰에서 자주 묻는 상위 5개 질문","description":"","date":"2024-05-18 15:17","slug":"2024-05-18-RubyonRailsTop5InterviewQuestions","content":"\n## 자신감을 가지고 다가오는 루비 온 레일즈 인터뷰를 헤쳐나가요: 필수 질문들\n\n![루비 온 레일즈](/assets/img/2024-05-18-RubyonRailsTop5InterviewQuestions_0.png)\n\n루비 온 레일즈는 보통 레일즈로 간단히 불리며 MIT 라이선스 하에 루비로 작성된 서버 측 웹 애플리케이션 프레임워크입니다. 이는 모델-뷰-컨트롤러(MVC) 프레임워크로, 데이터베이스, 웹 서비스 및 웹 페이지에 대한 기본 구조를 제공합니다. 레일즈는 여전히 웹 애플리케이션을 만들기 위한 인기 있는 프레임워크로, 루비 온 레일즈에 대한 숙련은 개발자로서 소중한 기술이 될 수 있습니다. 면접 준비 중이라면, 여기에 있는 다섯 가지 루비 온 레일즈 인터뷰 질문은 준비 상태를 파악하고 주요 개념을 되짚는 데 도움이 될 수 있습니다.\n\n# 1. 루비 온 레일즈에서의 MVC 아키텍처를 설명해보세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n답변: MVC는 Model-View-Controller의 약자로, 컴퓨터 사용자 인터페이스를 구현하는 소프트웨어 디자인 패턴입니다. Rails에서 MVC는 애플리케이션을 세 가지 상호 연결된 부분으로 분할합니다. 이는 정보의 내부 표현과 사용자가 정보를 표시하거나 수락하는 방법을 분리하기 위해 수행됩니다.\n\n- 모델: 모델은 데이터를 나타내며 다른 작업을 수행하지 않습니다. 컨트롤러나 뷰에 의존하지 않습니다. 데이터, 로직, 애플리케이션의 규칙을 직접 관리합니다.\n- 뷰: 뷰는 특정 형식으로 데이터의 표현을 나타냅니다. 컨트롤러가 데이터를 표시하기로 결정할 때 트리거됩니다. JSP, ASP, PHP와 같은 스크립트 기반 템플릿 시스템으로, AJAX 기술과 쉽게 통합할 수 있습니다.\n- 컨트롤러: 컨트롤러는 사용자 입력에 대응하고 데이터 모델 객체에 상호 작용을 수행합니다. 컨트롤러는 입력을 받아 옵션을 검증한 후 모델에 입력을 전달합니다.\n\n![Rails Interview Questions](/assets/img/2024-05-18-RubyonRailsTop5InterviewQuestions_1.png)\n\n# 2. Rails의 \"Convention over Configuration\" 원칙이란 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n답변: “설정보다는 규약”(CoC, Convention over Configuration)은 Rails에서 촉진되는 소프트웨어 디자인 패러다임으로, 개발자가 내려야 하는 결정의 수를 줄이고 단순함을 얻되 유연성을 반드시 잃지 않도록 하는 것을 목표로 합니다. 이 아이디어는 소프트웨어 개발 환경이 사용자가 하려는 일과 의도를 합리적인 기본값으로 가정해야 한다는 것입니다. Rails에서는 이 규약을 따른다면 모델이나 컨트롤러를 특정한 방식으로 명명하는 등의 규약을 따른다면 덜 코드를 작성하고 프레임워크가 더 많은 작업을 대신 해줍니다. 예를 들어, User라는 모델이 있다면 Rails는 자동으로 users라는 테이블을 찾습니다.\n\n# 3. Rails의 ActiveRecord를 설명해보세요.\n\n답변: ActiveRecord는 MVC(Model-View-Controller) 구조에서의 M인 모델(Model)을 담당하는 것으로, 비즈니스 데이터와 로직을 나타내는 시스템의 레이어입니다. ActiveRecord는 데이터를 영구적인 저장소인 데이터베이스에 저장해야 하는 비즈니스 객체의 생성과 사용을 용이하게 합니다. ORM(Object-Relational Mapping) 프레임워크인 ActiveRecord는 객체를 데이터베이스 테이블에 매핑하여 데이터 조작을 간단하게 합니다. ActiveRecord는 자동으로 테이블을 클래스에, 행을 객체에 매핑하며, 열은 객체 속성이 됩니다.\n\n# 4. Rails에서의 마이그레이션을 설명하고, 왜 중요한지 설명하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마이그레이션은 ActiveRecord의 기능 중 하나로, 데이터베이스 스키마를 시간이 지남에 따라 버전 관리되는 방식으로 발전시킬 수 있습니다. 이를 통해 Ruby를 사용하여 데이터베이스 스키마에 변경을 정의할 수 있어, SQL을 직접 작성할 필요없이 새로운 요구 사항에 맞게 데이터베이스를 조정할 수 있습니다. 각 마이그레이션은 롤백할 수 있어 필요한 경우 변경을 되돌릴 수도 있습니다. 마이그레이션은 스키마 변경 내역을 유지해주기 때문에 언제든지 데이터베이스 인스턴스에 적용하여 스키마를 재생성할 수 있어 데이터베이스 관리와 배포를 보다 쉽게 할 수 있습니다.\n\n# 5. 레일즈 애플리케이션의 성능을 최적화하는 방법에는 어떤 것들이 있나요?\n\n답변: 레일즈 애플리케이션의 성능 최적화에는 다음과 같은 전략이 포함될 수 있습니다:\n\n- 데이터베이스 인덱싱: 적절한 인덱싱은 데이터베이스가 빠르게 레코드를 찾을 수 있도록 하여 쿼리 시간을 크게 단축할 수 있습니다.\n- 캐싱: 레일즈는 페이지, 액션, 프래그먼트 캐싱과 같은 여러 캐싱 기법을 지원하여 비용이 많이 드는 작업의 결과를 저장할 수 있습니다.\n- 이저 로딩: 메인 객체의 관련 객체를 단일 쿼리로 로드하는 방식으로, 데이터베이스 쿼리 수를 줄여줍니다.\n- 백그라운드 작업: Sidekiq 또는 DelayedJob과 같은 도구를 사용하여 백그라운드에서 무거운 작업을 처리하여 사용자 경험과 애플리케이션 응답성을 향상시킬 수 있습니다.\n- 자산 최소화 및 압축: JavaScript, CSS 및 HTML 파일의 크기를 줄여 사용자의 로드 시간을 당겨 줄일 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이러한 질문들은 루비온레일즈(Ruby on Rails) 개발의 기본적인 측면을 다루며, 효과적인 레일즈 개발에 중요한 개념을 보여줍니다. 이러한 영역에 대한 튼튼한 이해는 면접뿐만 아니라 레일즈를 사용하여 견고하고 확장 가능한 웹 응용 프로그램을 구축하는 데도 도움이 될 것입니다.\n","ogImage":{"url":"/assets/img/2024-05-18-RubyonRailsTop5InterviewQuestions_0.png"},"coverImage":"/assets/img/2024-05-18-RubyonRailsTop5InterviewQuestions_0.png","tag":["Tech"],"readingTime":4},{"title":"루비 온 레일즈에서 Devise 401 오류 응답 덮어쓰기","description":"","date":"2024-05-18 15:16","slug":"2024-05-18-OverridingDevise401ErrorResponseinRubyonRails","content":"\n![Image](/assets/img/2024-05-18-OverridingDevise401ErrorResponseinRubyonRails_0.png)\n\n안녕하세요, 여러분! 오늘은 루비 온 레일즈 앱에서 뷰와 엔드포인트를 동시에 가지고 있을 때 Devise 401 에러 응답을 어떻게 오버라이딩하는지 이야기하려고 해요. 우선, 제 문제를 소개하고 해결책에 대해 논의하려고 해요. 다른 해결책이 있다면 제게 공유해주세요.\n\n제 User 모델에 Devise 메서드가 있어요:\n\n```ruby\ndevise :registerable,\n  :recoverable, :rememberable, :lockable, :trackable,\n  :omniauthable\n\ndef active_for_authentication?\n  super and is_active?\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n해당 메서드는 사용자가 활성화되어 있는지 여부를 확인합니다. 사용자가 활성화되어 있지 않으면 Devise가 세션을 생성하는 것을 허용하지 않습니다.\n\n세션 컨트롤러가 있습니다:\n\n```js\nclass Api::V2::SessionsController < Devise::SessionsController\n  respond_to :json\n\n  def create\n    # 여러분의 코드\n  end\nend\n```\n\n우리는 Devise::SessionsController에서 Api::V2::SessionsController의 create 메서드를 오버라이드합니다. 하지만 active_for_authentication? 메서드의 응답 키나 값을 오버라이드할 수 없습니다. 일반적으로 응답은 아래와 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n{\n    \"error\": \"Your account is not activated yet.\"\n}\n```\n\n위 응답은 원하는 형식이 아닙니다. 아래처럼 덮어쓰기해야 합니다:\n\n```js\n{\n    \"success\": false,\n    \"status\": 401,\n    \"message\": \"Your account is not activated yet.\",\n    \"errors\": [\n        {\n            \"field_name\": \"inactive_user\",\n            \"messages\": [\n                \"Your account is not activated yet.\"\n            ]\n        }\n    ]\n}\n```\n\n## 이를 수정하는 데는 2단계가 필요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 새로운 관심사를 만들기\n\n```js\nclass CustomFailureApp < Devise::FailureApp\n  def http_auth_body\n    if request.controller_class == Api::V2::SessionsController && request.format == :json\n      json_error_response\n    else\n      super\n    end\n  end\n\n  def json_error_response\n    self.status = 401\n    self.content_type = \"application/json\"\n    self.response_body =\n      {\n        success: false,\n        status: 401,\n        message: I18n.t('devise.failure.inactive'),\n        \"errors\": [\n          {\n            \"field_name\": \"inactive_user\",\n            \"messages\": [\n              I18n.t('devise.failure.inactive')\n            ]\n          }\n        ]\n      }.to_json\n  end\nend\n```\n\n2. Devise 구성 추가\n\n```js\n config.warden do |manager|\n    manager.failure_app = CustomAuthFailure\n  end\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nThe Links:\n\n- [https://gist.github.com/emilsoman/5604254#file-custom_auth_failure_app-rb](https://gist.github.com/emilsoman/5604254#file-custom_auth_failure_app-rb)\n- [https://stackoverflow.com/questions/7297183/custom-devise-401-unauthorized-response/35299936#35299936](https://stackoverflow.com/questions/7297183/custom-devise-401-unauthorized-response/35299936#35299936)\n- [https://github.com/heartcombo/devise/blob/main/app/controllers/devise/sessions_controller.rb](https://github.com/heartcombo/devise/blob/main/app/controllers/devise/sessions_controller.rb)\n- [https://github.com/heartcombo/devise/blob/main/lib/devise/failure_app.rb#L197](https://github.com/heartcombo/devise/blob/main/lib/devise/failure_app.rb#L197)\n","ogImage":{"url":"/assets/img/2024-05-18-OverridingDevise401ErrorResponseinRubyonRails_0.png"},"coverImage":"/assets/img/2024-05-18-OverridingDevise401ErrorResponseinRubyonRails_0.png","tag":["Tech"],"readingTime":4},{"title":"넷빈스가 VS Code용으로 괜찮은 자바 확장 기능을 제공할 수 있을까요","description":"","date":"2024-05-18 15:15","slug":"2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode","content":"\n작년 말, 오라클은 Java 개발자들을 위한 Visual Studio Code용 새로운 확장 프로그램을 발표했습니다. 이 확장 프로그램은 Java 플랫폼 지원이라고 불리며, 오라클의 발표에 따르면,\n\n이 글에서는 이 VS Code 확장 프로그램을 살펴보고, Java 개발의 미래에 대한 올바른 방향으로의 한 걸음인지 아닌지를 비교해봅니다. 그리고 VS Code에서 Java 개발을위한 두 가지 인기 있는 확장 프로그램인 Microsoft Extension Pack for Java와 Spring Boot Extension Pack과 비교해보겠습니다.\n\n![이미지](/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_0.png)\n\n# 오라클이 왜 Visual Studio용 Java 확장 프로그램을 만들기로 선택했는가\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n전통적으로 NetBeans는 오라클이 자바 개발을 위해 공식 IDE로 지원했던 것이지만, IntelliJ의 인기가 증가함에 따라 특히 IntelliJ IDEA Community Edition이 무료 오픈 소스 IDE로 출시된 후에 NetBeans는 약화되었고 약화되었으며, 오라클이 전체 NetBeans 프로젝트를 아파치 재단에 기부하기로 결정했습니다.\n\nRed Hat은 Eclipse JDT Core를 Java 언어 서버로 사용하기 위해 VS Code에 포장했고, Microsoft 및 스프링 팀은 그 위에 몇 가지 확장 기능을 더 덧붙였습니다. 이렇게 함으로써 IntelliJ 이외의 Java 개발을 위한 VS Code에서 사용할 수 있는 것을 적어도 무언가를 제공해 주었습니다.\n\n이 배경을 알고 나면, Eclipse IDE의 핵심 부분을 개선하고 VS Code의 Java 언어 서버로 다시 소개하려고 한 Red Hat과 유사하게, 오라클도 NetBeans 언어 서버로 같은 시도를 하고 있으며 이를 통해 IntelliJ와의 경쟁에서 자신들을 유지하려고 하고 있습니다. 인기와 VS Code의 기능 상의 확장 기능을 개발하기 위해, 다음과 같은 기능이 포함됩니다:\n\n- 다중 언어 지원\n- 브라우저에서 실행 가능\n- 빠르고 가벼움\n- 매우 강력한 원격 개발 기능\n- 그리고...\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_1.png\" />\n\n## VS Code를 이용한 자바 개발 경험\n\n나에게 있어서 의심의 여지 없이 IntelliJ IDEA Community Edition이 자바 개발을 위한 최고의 선택이라고 생각해요. 빠르고 믿을 수 있고 무료이며 기능이 풍부하며 그 외 여러 장점들이 있어요.\n\nVS Code의 많은 기능 중에서도 저에게 흥미로운 두 가지 핵심 기능은 있어요. IntelliJ에서 부족하다고 느끼는 것은 첫째는 VS Code 원격 개발 기능과 두번째는 자바 이외의 다른 프로그래밍 언어(특히 Go와 JavaScript) 지원입니다. 그래서 항상 VS Code 확장 프로그램을 사용하여 실제 프로젝트를 테스트하고 IntelliJ과 비교하려고 노력해요. 지금까지 IntelliJ과 동일한 기능을 수행할 수 있는 VS Code Java 확장 프로그램을 찾지 못한 것 같아요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 오라클 자바 플랫폼 익스텐션은 무엇을 제공하나요?\n\n이 기사의 나머지 부분에서는 오라클 자바 플랫폼 익스텐션의 기능에 대해 깊이 있게 살펴보고, Red Hat Java Language Server를 기반으로 한 Microsoft Extension Pack for Java와 비교해 볼 것입니다. 이 비교과정에서 특정 도서에서 PolarBookShop 클라우드 네이티브 애플리케이션을 열어보려고 합니다:\n\nGitHub 저장소에서 전체 프로젝트에 액세스한 다음 PolarBookshop 폴더를 열어보세요. 이 클라우드 네이티브 앱은 Spring Boot로 구현된 여덟 가지 다른 마이크로서비스로 구성되어 있습니다.\n\n## Netbeans를 기반으로 한 새로운 언어 서버\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제가 Java로 프로그래밍을 시작했을 때에는 NetBeans 4.5를 IDE로 사용했고 정말 좋았어요. 여러 해 동안 NetBeans IDE를 계속 사용했는데, 일부 특정 프로젝트를 위해 Eclipse를 잠깐 사용한 적도 있어요. IntelliJ로 전환하는 것을 망설였지만, 결국 NetBeans를 영원히 작별하고 IntelliJ IDEA Community Edition으로 이주하기로 결정했어요.\n\n이제 VS Code 확장에 이 NetBeans에 기반한 새 언어 서버가 있는 것을 보니, 새로운 리뷰를 위해 적어도 고려할 가치가 있겠다 싶어요. 이전까지는 Eclipse JDT Core에 기반한 Red Hat 언어 서버가 유일한 선택지였는데, 이제는 다른 대안이 생겼네요.\n\n이 두 언어 서버를 실제로 비교하기 전에, 이 언어 서버의 주요 이점을 언급할 가치가 있어요:\n\nNetBeans 언어 서버의 주요 제한 사항은 Java 11 이상을 기반으로 하는 프로젝트를 지원한다는 것이에요. 그러나 Red Hat 언어 서버는 Java 1.5 이상을 지원하고 있어요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n넷빈스 언어 서버의 장점 중 하나는 독립적으로 작동한다는 것이며, 언어 서버만 설치하면 Java 프로젝트를 열고 실행할 수 있지만, 레드햇 언어 서버를 실제로 사용하려면 Microsoft Java 언어 팩을 설치해야 합니다.\n\n## 메모리 사용량 및 성능 비교\n\n이 두 확장 프로그램을 사용하여 PolarBookshop 프로젝트를 열어 메모리 사용량 및 인덱싱 성능을 확인해보기로 합시다.\n\n오라클 Java 확장 프로그램 ⛔️:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 색인 시간: 약 70초\n- 메모리 사용량: 약 2.2 GB\n\nMicrosoft Java Extension Pack ✅:\n\n- 색인 시간: 약 40초\n- 메모리 사용량: 약 1.5 GB\n\n이클립스 ™ JDT Language Server(마이크로소프트 확장팩)를 사용할 때, 각 파일을 열 때마다 언어 서버는 해당 파일을 색인하며 어느 정도는 점진적으로 색인이 발생하는 것으로 보입니다. 그러나 NetBeans Language Server는 프로젝트를 한 번에 열고 색인하므로 RedHat 언어 서버의 색인 시간과 메모리 사용량이 조금 더 나은 것으로 보입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 자바 프로젝트 열거나 생성하기\n\n두 확장 프로그램은 Maven과 Gradle을 기반으로 하는 Java 프로젝트를 기본으로 지원합니다. 전에도 언급했듯이, Microsoft 확장 프로그램의 색인 프로젝트가 더 빠릅니다.\n\n일반적으로 Microsoft Java 확장 팩이 더 성숙하다고 생각했습니다. 예를 들어 Oracle Java 확장 프로그램은 Gralde 프로젝트에서 간단한 문제가 있습니다.\n\nOracle Java 확장 프로그램의 흥미로운 기능 중 하나는 Project Explorer 패널입니다. 이 패널은 NetBeans Project Explorer 패널을 연상시킵니다. 해당 패널에서 루트 폴더의 각 프로젝트를 별도 노드로 볼 수 있습니다. 이것은 논리적 프로젝트 구조의 개요를 제공하여 프로젝트 탐색을 쉽게 할 수 있습니다. Java 프로젝트를 빌드, 테스트 및 실행하는 데 활용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_2.png)\n\nMicrosoft Java Extension 팩의 프로젝트 탐색기 패널과 비교해서 오라클 것이 훨씬 더 좋고 더 편리하며 더 깔끔하다고 생각했어요.\n\n![이미지](/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_3.png)\n\nSpring Boot 프로젝트의 경우, Spring Boot 익스텐션 팩 프로젝트 뷰와 대시보드를 이 두 가지보다 더 좋아해요. Spring Boot 프로젝트에 대해 훨씬 더 유용하고 정보를 잘 제공하며 쉽게 관리할 수 있도록 도와줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 코드 완성\n\n코드 완성 기능에서 두 확장 프로그램은 동일한 수준입니다. 다만 오라클 자바 익스텐션의 코드 완성이 마이크로소프트 자바 익스텐션 팩보다 약간 더 느린 것을 알 수 있습니다. 또한, 마이크로소프트 익스텐션은 코드 완성 대화상자가 조금 더 읽기 쉬운 것 같습니다 (적어도 제 경험 상):\n\n![이미지](/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_4.png)\n\n![이미지](/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마이크로소프트 자바 익스텐션 팩의 코드 완성 기능 중 한 가지 장점은 Visual Studio IntelliCode 익스텐션이 있어요. 이는 코드 컨텍스트를 이해하고 기계 학습을 활용한 인사이트를 제공하는 AI 지원 개발 기능을 제공해요.\n\n두 익스텐션 모두 Source actions 기능을 가지고 있어요. 이 기능은 코드 생성에 도움이 돼요.\n\n## 실행 및 디버그\n\n이 두 익스텐션의 이러한 기능은 거의 동일해요. 오라클 자바 익스텐션의 한 가지 장점은 실행 구성 패널을 제공한다는 것이에요. 이는 흥미롭고 프로그램 인수, VM 옵션, 환경 변수 및 프로젝트의 작업 디렉토리를 설정할 수 있게 해줘요. 이 패널을 이용하면 일부 고급 사용 사례를 제외하고는 launch.json 파일을 수동으로 설정할 필요가 없어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Markdown 형식으로 변경된 내용입니다.\n\n![image](/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_6.png)\n\nOracle Java extension pack supports Native Image Debugger, which allows Java-style debugging of Ahead of Time compiled native images produced by GraalVM.\n\nAnother advantage of the Oracle Java Extension is that it supports run main with continuous mode for gradle projects.\n\n## Testing view\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기능에서는 Microsoft Java Extension Pack이 훨씬 좋습니다. Oracle Java Extension에는 기본으로 테스트 패널이 없지만 Microsoft Java Extension에는 있으며 각 프로젝트를 개별적으로 표시합니다. 또한 프로젝트를 실행할 때 테스트를 실행하면 전용 뷰가 있습니다.\n\n![image](/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_7.png)\n\n## 기타 기능\n\n리팩터링이나 Java Doc 생성 및 편집과 같은 일부 유용한 기능은 두 확장 프로그램 모두 동등하며 두 확장 중 어느 것에 대해서나 특별한 이점을 창출하지 않습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 마지막으로 생각해 볼 것\n\n경쟁은 항상 소비자에게 좋을 수 있지만, 오라클 자바 익스텐션에 대한 초기 인상은 놀랄만한 것은 아니었습니다. 이 제품은 미래에 Microsoft 자바 익스텐션과 경쟁할 수 있는 기본 제품이라고 생각했습니다.\n\n물론, 네이티브 이미지 디버거나 프로젝트 탐색기 패널, 실행 구성 패널과 같은 고유한 기능도 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그런데 개선 가능한 부분이 많습니다. VS Code를 사용하여 Java 개발 경험에 대해 의견을 남겨주세요.\n\n다가오는 이야기를 위해 저를 팔로우해주세요:\n\n트위터에서 나의 짧은 기술 포스트를 읽어보세요.\n","ogImage":{"url":"/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_0.png"},"coverImage":"/assets/img/2024-05-18-CanNetBeansbringusadecentJavaExtensionforVSCode_0.png","tag":["Tech"],"readingTime":10},{"title":"루프의 길이 찾기 GFG 문제","description":"","date":"2024-05-18 15:13","slug":"2024-05-18-FindlengthofLoopGFGProblem","content":"\n## 소개\n\n연결 리스트는 컴퓨터 과학에서 중요한 데이터 구조입니다. 노드로 구성되어 있으며 각 노드는 데이터와 순서상 다음 노드를 가리키는 참조(또는 링크)를 포함합니다. 연결 리스트의 일반적인 문제 중 하나는 루프를 감지하고 해당 루프의 노드 수를 계산하는 것입니다. 이 기사에서는 연결 리스트 내의 루프에 있는 노드 수를 세는 간단하면서 효과적인 알고리즘에 대해 살펴보겠습니다.\n\n## 문제\n\n연결 리스트의 루프는 노드의 다음 포인터가 리스트 내 이전 노드 중 하나를 가리킬 때 발생하여 순환이 생성됩니다. 이러한 루프를 감지하는 것은 탐색 중 무한 루프를 방지하기 위해 중요합니다. 루프를 감지한 후에는 루프 내 노드 수를 세는 것이 구조를 이해하거나 추가 처리를 위한 여러 목적에 유용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 알고리즘\n\n루프 내 노드 수를 세려면 먼저 루프를 감지해야 합니다. 이를 위해 Floyd의 순환 찾기 알고리즘(토끼와 거북이 알고리즘으로도 알려짐)을 사용할 수 있습니다. 루프가 감지되면 다음 단계를 통해 루프 내 노드 수를 세는 방법을 사용할 수 있습니다.\n\n다음은 루프 내 노드를 세는 코드 스니펫입니다:\n\n```js\nint count = 1;\nNode current = loopNode;\n\nwhile (current.next != loopNode) {\n    current = current.next;\n    count++;\n}\nreturn count;\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 해당 알고리즘을 자세히 살펴보겠습니다:\n\n- 초기화:\n\n  - 루프노드 자체가 루프의 일부이기 때문에 count 카운터를 1로 초기화합니다.\n  - current 포인터를 루프노드로 설정합니다.\n\n- 순회 및 카운팅:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 현재 포인터를 사용하여 루프를 트래버스(순회)합니다.\n- 각 노드마다 다음 노드로 이동하고 카운터를 증가시킵니다.\n- 이 과정을 반복하여 루프 노드에 다시 도달할 때까지 진행하여 사이클을 완료합니다.\n\n- 카운트 반환:\n\n- 루프가 완전히 트래버스(순회)된 후, 카운트에는 루프의 노드 수가 저장되며 이를 반환합니다.\n\n## 예시 해설\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음과 같이 루프를 가진 링크드 리스트를 고려해 봅시다:\n\n![image](/assets/img/2024-05-18-FindlengthofLoopGFGProblem_0.png)\n\n- 여기서 노드 5는 노드 3을 가리키므로 루프가 생성됩니다.\n- loopNode이 노드 3으로 감지되었다고 가정합니다.\n- 우리의 알고리즘은 current를 노드 3으로 초기화하고 카운팅을 시작합니다.\n- 탐색은 다음과 같이 진행됩니다: 3 - 4 - 5 - 6 - 7 - 8 - 3.\n- 각 단계마다 count가 증가하여 최종 count는 6이 됩니다.\n\nMarkdown 형식으로 테이블 태그를 변경합니다.\n\n```js\nstatic int countNodesinLoop(ListNode head) {\n    if (head == null) {\n        return 0;\n    }\n\n    ListNode slow = head;\n    ListNode fast = head;\n\n    int count = 1 ;\n\n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n\n        if (slow == fast) {\n            return countLoopLength(slow);\n        }\n    }\n\n    return 0;\n}\n\nprivate static int countLoopLength(ListNode loopNode) {\n    int count = 1;\n    ListNode current = loopNode;\n    while (current.next != loopNode) {\n        current = current.next;\n        count++;\n    }\n    return count;\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 실용적인 고려 사항\n\n- 루프 감지: 위 코드는 루프 감지가 이미 완료되었고 loopNode가 제공되었다고 가정합니다. Floyd의 순환 찾기 알고리즘을 사용하여 이를 달성할 수 있습니다.\n- 예외 경우: 루프가 없거나 루프가 하나의 노드로만 구성된 경우를 고려해야 합니다. 알고리즘은 이러한 사례를 민첩하게 처리해야 합니다.\n- 복잡성: 이 루프 카운팅의 시간 복잡도는 O(n)입니다. 여기서 n은 루프 내 노드의 수입니다. 공간 복잡도는 추가적인 공간을 상수로 사용하므로 O(1)입니다.\n\n## 결론\n\n연결 리스트 내의 루프에서 노드를 계산하는 것은 직관적인 순회 방법을 사용하여 쉽게 수행할 수 있는 기본 작업입니다. 이 알고리즘을 이해하고 구현함으로써 연결 리스트 조작에 대한 이해를 높이고 데이터 구조에서 더 복잡한 문제를 대비할 수 있습니다. 이 지식을 바탕으로 연결 리스트의 루프를 효율적으로 처리하여 알고리즘을 견고하고 신뢰성 있게 만들 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-FindlengthofLoopGFGProblem_0.png"},"coverImage":"/assets/img/2024-05-18-FindlengthofLoopGFGProblem_0.png","tag":["Tech"],"readingTime":4}],"page":"105","totalPageCount":113,"totalPageGroupCount":6,"lastPageGroup":13,"currentPageGroup":5},"__N_SSG":true}