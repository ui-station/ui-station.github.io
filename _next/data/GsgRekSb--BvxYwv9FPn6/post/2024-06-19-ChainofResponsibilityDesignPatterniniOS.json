{"pageProps":{"post":{"title":"iOS에서 Chain of Responsibility 디자인 패턴","description":"","date":"2024-06-19 11:07","slug":"2024-06-19-ChainofResponsibilityDesignPatterniniOS","content":"\n![Chain of Responsibility](/assets/img/2024-06-19-ChainofResponsibilityDesignPatterniniOS_0.png)\n\nChain of Responsibility(줄여서 CoR)는 행위 디자인 패턴으로, 클래스의 책임을 다른 시스템 부분에 위임하여 주어진 입력에 대해 더 나은 대응이 될 수 있는 곳으로 작업을 위임하는 디자인 패턴입니다.\n\n예를 들어, 고객 서비스에 전화를 걸 때, 그들은 결국 고객이 제시한 상황을 더 잘 도와줄 수 있는 구체적인 영역으로 통화를 이동할 것입니다.\n\n# 구현\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 패턴을 구현하려면 체인 링크 사이에서 공유될 인터페이스를 만들어야 합니다.\n\n```js\nprotocol RequestHandler {\n    var nextHandler: RequestHandler? { get set }\n    func handleRequest(request: HTTPRequest)\n}\n```\n\n이 프로토콜은 모든 가능한 핸들러에서 구현될 것이며, 필요한 경우 미래에 추가할 수 있도록 열려 있습니다. 이를 준수하는 객체는 체인 내의 다음 핸들러를 노출하고 요청을 관리하는 데 호출될 함수를 노출할 것입니다.\n\n```js\nclass Authenticator: RequestHandler {\n    var nextHandler: RequestHandler?\n\n    func handleRequest(request: HTTPRequest) {\n        print(\"요청 인증 중...\")\n        // 인증 로직 ...\n        nextHandler?.handleRequest(request: request)\n    }\n}\n\nclass Logger: RequestHandler {\n    var nextHandler: RequestHandler?\n\n    func handleRequest(request: HTTPRequest) {\n        print(\"요청 로깅 중...\")\n        // 로깅 로직 ...\n        nextHandler?.handleRequest(request: request)\n    }\n}\n\nlet authenticator = Authenticator()\nlet logger = Logger()\n\nauthenticator.nextHandler = logger\nlet request = HTTPRequest(path: \"/api/resource\", method: .get)\nauthenticator.handleRequest(request: request)\n\n// \"요청 인증 중...\"과 \"요청 로깅 중...\"을 출력합니다.\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 예시에서, 요청이 실패하면 해당 문제를 처리하여 처리할 수 있다면 다음 대리자에게 처리를 맡깁니다. 반대로, 요청이 완료되면 실행은 성공적으로 종료되고 반환됩니다.\n\n다른 예시는 로컬로 캐시된 데이터를 관리하거나 원격으로 가져오는 경우입니다.\n\n```js\nprotocol DataRequest { ... }\n\nprotocol DataProvider {\n  var nextProvider: DataProvider? { get set }\n  func fetch(request: DataRequest) async\n}\n\nclass LocalProvider: DataProvider {\n  var nextProvider: DataProvider? = nil\n\n  init(nextProvider: DataProvider? = nil) {\n    nextProvider = nextProvider\n  }\n\n  func fetch(request: DataRequest) async {\n    print(\"로컬에서 가져오는 중\")\n    // 로컬로 가져오면 반환, 아니면...\n    await nextProvider?.fetch(request: request)\n  }\n}\n\nclass RemoteProvider: DataProvider {\n  var nextProvider: DataProvider? = nil\n\n  init(nextProvider: DataProvider? = nil) {\n    nextProvider = nextProvider\n  }\n\n  func fetch(request: DataRequest) async {\n    print(\"원격에서 가져오는 중\")\n    // 원격에서 가져오면 반환, 아니면...\n    await nextProvider?.fetch(request: request)\n  }\n}\n\nlet remoteProvider = RemoteProvider()\nlet databaseProvider = LocalProvider(nextProvider: remoteProvider)\n\nTask {\n  await databaseProvider.fetch(request: ...)\n}\n```\n\n만약 로컬 저장소에서 데이터를 찾을 수 없는 경우, 클라우드에서 가져와야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 장점과 고려사항\n\n이 패턴은 여러 가지 장점을 가지고 있습니다:\n\n- 입력 및 수행할 고유한 작업에만 관심이 있기 때문에 단일 책임 원칙을 따릅니다. 다른 하위 시스템의 책임을 순서대로 위임합니다.\n- 시스템의 일부를 쉽게 추가하거나 제거할 수 있으므로 개방/폐쇄 원칙을 준수합니다. 시스템의 다른 부분과 강하게 결합되지 않으며 동일한 순서에 새로운 가지를 쉽게 만들고 연결하여 무결성을 손상시키지 않고 클라이언트와의 상호 작용에 영향을 주지 않습니다.\n\n고려해야 할 사항이 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- \"최적맞춤\" 시스템이 입력을 사용하지 않는다면 일부 요청이 처리되지 않을 수 있습니다.\n\n# 결론\n\n위에서 언급한대로, 이 디자인 패턴을 사용하면 유연성과 확장성을 추가하기 위해 분리될 수 있는 고응집 모듈을 쉽게 분리할 수 있습니다. 이는 사용자 상호작용 이벤트 처리를 위한 GUI 프레임워크나 원격 또는 로컬 데이터 접근을 위한 리포지터리 레이어에서 볼 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-19-ChainofResponsibilityDesignPatterniniOS_0.png"},"coverImage":"/assets/img/2024-06-19-ChainofResponsibilityDesignPatterniniOS_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-ChainofResponsibilityDesignPatterniniOS_0.png\" alt=\"Chain of Responsibility\"></p>\n<p>Chain of Responsibility(줄여서 CoR)는 행위 디자인 패턴으로, 클래스의 책임을 다른 시스템 부분에 위임하여 주어진 입력에 대해 더 나은 대응이 될 수 있는 곳으로 작업을 위임하는 디자인 패턴입니다.</p>\n<p>예를 들어, 고객 서비스에 전화를 걸 때, 그들은 결국 고객이 제시한 상황을 더 잘 도와줄 수 있는 구체적인 영역으로 통화를 이동할 것입니다.</p>\n<h1>구현</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 패턴을 구현하려면 체인 링크 사이에서 공유될 인터페이스를 만들어야 합니다.</p>\n<pre><code class=\"hljs language-js\">protocol <span class=\"hljs-title class_\">RequestHandler</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">nextHandler</span>: <span class=\"hljs-title class_\">RequestHandler</span>? { get set }\n    func <span class=\"hljs-title function_\">handleRequest</span>(<span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">HTTPRequest</span>)\n}\n</code></pre>\n<p>이 프로토콜은 모든 가능한 핸들러에서 구현될 것이며, 필요한 경우 미래에 추가할 수 있도록 열려 있습니다. 이를 준수하는 객체는 체인 내의 다음 핸들러를 노출하고 요청을 관리하는 데 호출될 함수를 노출할 것입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Authenticator</span>: <span class=\"hljs-title class_\">RequestHandler</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">nextHandler</span>: <span class=\"hljs-title class_\">RequestHandler</span>?\n\n    func <span class=\"hljs-title function_\">handleRequest</span>(<span class=\"hljs-params\">request: HTTPRequest</span>) {\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"요청 인증 중...\"</span>)\n        <span class=\"hljs-comment\">// 인증 로직 ...</span>\n        nextHandler?.<span class=\"hljs-title function_\">handleRequest</span>(<span class=\"hljs-attr\">request</span>: request)\n    }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Logger</span>: <span class=\"hljs-title class_\">RequestHandler</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">nextHandler</span>: <span class=\"hljs-title class_\">RequestHandler</span>?\n\n    func <span class=\"hljs-title function_\">handleRequest</span>(<span class=\"hljs-params\">request: HTTPRequest</span>) {\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"요청 로깅 중...\"</span>)\n        <span class=\"hljs-comment\">// 로깅 로직 ...</span>\n        nextHandler?.<span class=\"hljs-title function_\">handleRequest</span>(<span class=\"hljs-attr\">request</span>: request)\n    }\n}\n\n<span class=\"hljs-keyword\">let</span> authenticator = <span class=\"hljs-title class_\">Authenticator</span>()\n<span class=\"hljs-keyword\">let</span> logger = <span class=\"hljs-title class_\">Logger</span>()\n\nauthenticator.<span class=\"hljs-property\">nextHandler</span> = logger\n<span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-title class_\">HTTPRequest</span>(<span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/api/resource\"</span>, <span class=\"hljs-attr\">method</span>: .<span class=\"hljs-property\">get</span>)\nauthenticator.<span class=\"hljs-title function_\">handleRequest</span>(<span class=\"hljs-attr\">request</span>: request)\n\n<span class=\"hljs-comment\">// \"요청 인증 중...\"과 \"요청 로깅 중...\"을 출력합니다.</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 예시에서, 요청이 실패하면 해당 문제를 처리하여 처리할 수 있다면 다음 대리자에게 처리를 맡깁니다. 반대로, 요청이 완료되면 실행은 성공적으로 종료되고 반환됩니다.</p>\n<p>다른 예시는 로컬로 캐시된 데이터를 관리하거나 원격으로 가져오는 경우입니다.</p>\n<pre><code class=\"hljs language-js\">protocol <span class=\"hljs-title class_\">DataRequest</span> { ... }\n\nprotocol <span class=\"hljs-title class_\">DataProvider</span> {\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">nextProvider</span>: <span class=\"hljs-title class_\">DataProvider</span>? { get set }\n  func <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">DataRequest</span>) <span class=\"hljs-keyword\">async</span>\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LocalProvider</span>: <span class=\"hljs-title class_\">DataProvider</span> {\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">nextProvider</span>: <span class=\"hljs-title class_\">DataProvider</span>? = nil\n\n  <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">nextProvider: DataProvider? = nil</span>) {\n    nextProvider = nextProvider\n  }\n\n  func <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">DataRequest</span>) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"로컬에서 가져오는 중\"</span>)\n    <span class=\"hljs-comment\">// 로컬로 가져오면 반환, 아니면...</span>\n    <span class=\"hljs-keyword\">await</span> nextProvider?.<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-attr\">request</span>: request)\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RemoteProvider</span>: <span class=\"hljs-title class_\">DataProvider</span> {\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">nextProvider</span>: <span class=\"hljs-title class_\">DataProvider</span>? = nil\n\n  <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\">nextProvider: DataProvider? = nil</span>) {\n    nextProvider = nextProvider\n  }\n\n  func <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-attr\">request</span>: <span class=\"hljs-title class_\">DataRequest</span>) <span class=\"hljs-keyword\">async</span> {\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"원격에서 가져오는 중\"</span>)\n    <span class=\"hljs-comment\">// 원격에서 가져오면 반환, 아니면...</span>\n    <span class=\"hljs-keyword\">await</span> nextProvider?.<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-attr\">request</span>: request)\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> remoteProvider = <span class=\"hljs-title class_\">RemoteProvider</span>()\n<span class=\"hljs-keyword\">let</span> databaseProvider = <span class=\"hljs-title class_\">LocalProvider</span>(<span class=\"hljs-attr\">nextProvider</span>: remoteProvider)\n\n<span class=\"hljs-title class_\">Task</span> {\n  <span class=\"hljs-keyword\">await</span> databaseProvider.<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-attr\">request</span>: ...)\n}\n</code></pre>\n<p>만약 로컬 저장소에서 데이터를 찾을 수 없는 경우, 클라우드에서 가져와야 합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>장점과 고려사항</h1>\n<p>이 패턴은 여러 가지 장점을 가지고 있습니다:</p>\n<ul>\n<li>입력 및 수행할 고유한 작업에만 관심이 있기 때문에 단일 책임 원칙을 따릅니다. 다른 하위 시스템의 책임을 순서대로 위임합니다.</li>\n<li>시스템의 일부를 쉽게 추가하거나 제거할 수 있으므로 개방/폐쇄 원칙을 준수합니다. 시스템의 다른 부분과 강하게 결합되지 않으며 동일한 순서에 새로운 가지를 쉽게 만들고 연결하여 무결성을 손상시키지 않고 클라이언트와의 상호 작용에 영향을 주지 않습니다.</li>\n</ul>\n<p>고려해야 할 사항이 있습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>\"최적맞춤\" 시스템이 입력을 사용하지 않는다면 일부 요청이 처리되지 않을 수 있습니다.</li>\n</ul>\n<h1>결론</h1>\n<p>위에서 언급한대로, 이 디자인 패턴을 사용하면 유연성과 확장성을 추가하기 위해 분리될 수 있는 고응집 모듈을 쉽게 분리할 수 있습니다. 이는 사용자 상호작용 이벤트 처리를 위한 GUI 프레임워크나 원격 또는 로컬 데이터 접근을 위한 리포지터리 레이어에서 볼 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}