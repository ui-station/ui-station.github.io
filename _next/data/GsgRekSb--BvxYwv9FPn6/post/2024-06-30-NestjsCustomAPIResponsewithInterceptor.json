{"pageProps":{"post":{"title":"Interceptor를 사용한 Nestjs 사용자 정의 API 응답 방법","description":"","date":"2024-06-30 22:30","slug":"2024-06-30-NestjsCustomAPIResponsewithInterceptor","content":"\n\n<img src=\"/assets/img/2024-06-30-NestjsCustomAPIResponsewithInterceptor_0.png\" />\n\n이전 미디엄 스토리(Nest.js 구조화된 API 응답)에서는 새로운 유형을 정의하고 class-validator 및 다국어 패키지와 호환성을 보장하여 API 응답 구조를 사용자 정의하는 방법을 탐색했습니다. 이 글에서는 인터셉터를 사용하여 사용자 지정 API 응답을 정의하는 방법에 대해 다룰 것입니다.\n\n# 인터셉터란?\n\n<img src=\"/assets/img/2024-06-30-NestjsCustomAPIResponsewithInterceptor_1.png\" />\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNestJS에서 interceptor는 컨트롤러에 도달하기 전에 요청을 변환하거나 클라이언트로 전송되기 전에 응답을 변환할 수 있는 미들웨어입니다. 이것은 로깅, 실행 시간 측정, 데이터 변환, 예외 처리, 인증 및 권한 관리에 사용됩니다. Interceptors는 응용 프로그램에 교차하는 관심사를 추가하는 유연한 방법을 제공합니다.\n\n# 커스텀 API 응답\n\nInterceptor를 사용하면 요청을 감싸고 처리되기 전후에 수정할 수 있습니다. 이 연습에서는 API 응답에 `timestamp`, `path`, `version` 등과 같은 추가 필드를 추가할 것입니다.\n\n# API 응답을 처리하기 위한 Interceptor 정의\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAPI 응답을 사용자 정의하는 인터셉터를 정의하는 방법을 안내해 드릴게요:\n\n1. 필요한 모듈과 데코레이터 가져오기:\n먼저 NestJS와 RxJS에서 필요한 모듈과 데코레이터를 가져오세요.\n\n```js\nimport { Injectable, NestInterceptor, ExecutionContext, CallHandler, HttpException } from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n```\n\n2. CustomResponseInterceptor 클래스 생성:\nCustomResponseInterceptor 클래스를 정의하고 NestInterceptor 인터페이스를 구현하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```typescript\n@Injectable()\nexport class CustomResponseInterceptor implements NestInterceptor {\n\n3. **`intercept` 메서드 구현**:\n`intercept` 메서드 내에서 요청과 응답 객체에 액세스합니다. 응답에서 상태 코드를 가져옵니다.\n\nintercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n  const request = context.switchToHttp().getRequest();\n  const response = context.switchToHttp().getResponse();\n  const statusCode = response.statusCode;\n}\n\n4. 응답 및 오류 처리:\nRxJS를 사용하여 next.handle()의 결과를 처리합니다. 데이터를 사용자 정의 응답 형식으로 변환합니다. 사용자 지정 오류 응답을 생성하여 오류를 처리합니다.\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nreturn next.handle().pipe(\n   map(data => ({\n     statusCode,\n     message: statusCode >= 400 ? 'Error' : 'Success',\n     error: statusCode >= 400 ? response.message : null,\n     timestamp: Date.now(),\n     version: 'v2',\n     path: request.url,\n     data,\n   })),\n   catchError(err => {\n     const statusCode = err instanceof HttpException ? err.getStatus() : 500;\n     const errorResponse = {\n       statusCode,\n       message: err.message || 'Internal server error',\n       error: err.name || 'Error',\n       timestamp: Date.now(),\n       version: 'v2',\n       path: request.url,\n       data: {},\n     };\n     return throwError(() => new HttpException(errorResponse, statusCode));\n   })\n);\n}\n```\n\n# 전역적으로 인터셉터 적용하기\n\n이 인터셉터를 전역적으로 적용하려면 `main.ts` 파일에 추가하실 수 있습니다:\n\n1. 필요한 모듈과 인터셉터 가져오기:\n`@nestjs/core`에서 `NestFactory`를 가져오고 `CustomResponseInterceptor` 클래스를 가져옵니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { CustomResponseInterceptor } from './common/interceptors/custom-response.interceptor';\n```\n\n2. NestJS 애플리케이션 생성:\nNestJS 애플리케이션을 생성하고 전역 인터셉터를 사용합니다.\n\n```js\nasync function bootstrap() {\n const app = await NestFactory.create(AppModule);\n app.useGlobalInterceptors(new CustomResponseInterceptor());\n await app.listen(3000);\n}\nbootstrap();\n```\n\n이 설정을 통해 NestJS 애플리케이션의 모든 API 응답이 인터셉터에서 정의된 사용자 정의 형식을 따르게 됩니다. 이러한 방식으로 응답을 구조화함으로써, 클라이언트가 사용할 일관되고 명확한 API 응답 형식을 제공할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-30-NestjsCustomAPIResponsewithInterceptor_0.png"},"coverImage":"/assets/img/2024-06-30-NestjsCustomAPIResponsewithInterceptor_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-30-NestjsCustomAPIResponsewithInterceptor_0.png\">\n<p>이전 미디엄 스토리(Nest.js 구조화된 API 응답)에서는 새로운 유형을 정의하고 class-validator 및 다국어 패키지와 호환성을 보장하여 API 응답 구조를 사용자 정의하는 방법을 탐색했습니다. 이 글에서는 인터셉터를 사용하여 사용자 지정 API 응답을 정의하는 방법에 대해 다룰 것입니다.</p>\n<h1>인터셉터란?</h1>\n<img src=\"/assets/img/2024-06-30-NestjsCustomAPIResponsewithInterceptor_1.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>NestJS에서 interceptor는 컨트롤러에 도달하기 전에 요청을 변환하거나 클라이언트로 전송되기 전에 응답을 변환할 수 있는 미들웨어입니다. 이것은 로깅, 실행 시간 측정, 데이터 변환, 예외 처리, 인증 및 권한 관리에 사용됩니다. Interceptors는 응용 프로그램에 교차하는 관심사를 추가하는 유연한 방법을 제공합니다.</p>\n<h1>커스텀 API 응답</h1>\n<p>Interceptor를 사용하면 요청을 감싸고 처리되기 전후에 수정할 수 있습니다. 이 연습에서는 API 응답에 <code>timestamp</code>, <code>path</code>, <code>version</code> 등과 같은 추가 필드를 추가할 것입니다.</p>\n<h1>API 응답을 처리하기 위한 Interceptor 정의</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>API 응답을 사용자 정의하는 인터셉터를 정의하는 방법을 안내해 드릴게요:</p>\n<ol>\n<li>필요한 모듈과 데코레이터 가져오기:\n먼저 NestJS와 RxJS에서 필요한 모듈과 데코레이터를 가져오세요.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Injectable</span>, <span class=\"hljs-title class_\">NestInterceptor</span>, <span class=\"hljs-title class_\">ExecutionContext</span>, <span class=\"hljs-title class_\">CallHandler</span>, <span class=\"hljs-title class_\">HttpException</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/common'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Observable</span>, throwError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { catchError, map } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/operators'</span>;\n</code></pre>\n<ol start=\"2\">\n<li>CustomResponseInterceptor 클래스 생성:\nCustomResponseInterceptor 클래스를 정의하고 NestInterceptor 인터페이스를 구현하세요.</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-meta\">@Injectable</span>()\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomResponseInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">NestInterceptor</span> {\n\n<span class=\"hljs-number\">3.</span> **<span class=\"hljs-string\">`intercept`</span> 메서드 구현**:\n<span class=\"hljs-string\">`intercept`</span> 메서드 내에서 요청과 응답 객체에 액세스합니다. 응답에서 상태 코드를 가져옵니다.\n\n<span class=\"hljs-title function_\">intercept</span>(<span class=\"hljs-attr\">context</span>: <span class=\"hljs-title class_\">ExecutionContext</span>, <span class=\"hljs-attr\">next</span>: <span class=\"hljs-title class_\">CallHandler</span>): <span class=\"hljs-title class_\">Observable</span>&#x3C;<span class=\"hljs-built_in\">any</span>> {\n  <span class=\"hljs-keyword\">const</span> request = context.<span class=\"hljs-title function_\">switchToHttp</span>().<span class=\"hljs-title function_\">getRequest</span>();\n  <span class=\"hljs-keyword\">const</span> response = context.<span class=\"hljs-title function_\">switchToHttp</span>().<span class=\"hljs-title function_\">getResponse</span>();\n  <span class=\"hljs-keyword\">const</span> statusCode = response.<span class=\"hljs-property\">statusCode</span>;\n}\n\n<span class=\"hljs-number\">4.</span> 응답 및 오류 처리:\n<span class=\"hljs-title class_\">RxJS</span>를 사용하여 next.<span class=\"hljs-title function_\">handle</span>()의 결과를 처리합니다. 데이터를 사용자 정의 응답 형식으로 변환합니다. 사용자 지정 오류 응답을 생성하여 오류를 처리합니다.\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">return</span> next.<span class=\"hljs-title function_\">handle</span>().<span class=\"hljs-title function_\">pipe</span>(\n   <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =></span> ({\n     statusCode,\n     <span class=\"hljs-attr\">message</span>: statusCode >= <span class=\"hljs-number\">400</span> ? <span class=\"hljs-string\">'Error'</span> : <span class=\"hljs-string\">'Success'</span>,\n     <span class=\"hljs-attr\">error</span>: statusCode >= <span class=\"hljs-number\">400</span> ? response.<span class=\"hljs-property\">message</span> : <span class=\"hljs-literal\">null</span>,\n     <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>(),\n     <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">'v2'</span>,\n     <span class=\"hljs-attr\">path</span>: request.<span class=\"hljs-property\">url</span>,\n     data,\n   })),\n   <span class=\"hljs-title function_\">catchError</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n     <span class=\"hljs-keyword\">const</span> statusCode = err <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">HttpException</span> ? err.<span class=\"hljs-title function_\">getStatus</span>() : <span class=\"hljs-number\">500</span>;\n     <span class=\"hljs-keyword\">const</span> errorResponse = {\n       statusCode,\n       <span class=\"hljs-attr\">message</span>: err.<span class=\"hljs-property\">message</span> || <span class=\"hljs-string\">'Internal server error'</span>,\n       <span class=\"hljs-attr\">error</span>: err.<span class=\"hljs-property\">name</span> || <span class=\"hljs-string\">'Error'</span>,\n       <span class=\"hljs-attr\">timestamp</span>: <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>(),\n       <span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">'v2'</span>,\n       <span class=\"hljs-attr\">path</span>: request.<span class=\"hljs-property\">url</span>,\n       <span class=\"hljs-attr\">data</span>: {},\n     };\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">throwError</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpException</span>(errorResponse, statusCode));\n   })\n);\n}\n</code></pre>\n<h1>전역적으로 인터셉터 적용하기</h1>\n<p>이 인터셉터를 전역적으로 적용하려면 <code>main.ts</code> 파일에 추가하실 수 있습니다:</p>\n<ol>\n<li>필요한 모듈과 인터셉터 가져오기:\n<code>@nestjs/core</code>에서 <code>NestFactory</code>를 가져오고 <code>CustomResponseInterceptor</code> 클래스를 가져옵니다.</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NestFactory</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@nestjs/core'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppModule</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app.module'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">CustomResponseInterceptor</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./common/interceptors/custom-response.interceptor'</span>;\n</code></pre>\n<ol start=\"2\">\n<li>NestJS 애플리케이션 생성:\nNestJS 애플리케이션을 생성하고 전역 인터셉터를 사용합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bootstrap</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">NestFactory</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">AppModule</span>);\n app.<span class=\"hljs-title function_\">useGlobalInterceptors</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomResponseInterceptor</span>());\n <span class=\"hljs-keyword\">await</span> app.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n}\n<span class=\"hljs-title function_\">bootstrap</span>();\n</code></pre>\n<p>이 설정을 통해 NestJS 애플리케이션의 모든 API 응답이 인터셉터에서 정의된 사용자 정의 형식을 따르게 됩니다. 이러한 방식으로 응답을 구조화함으로써, 클라이언트가 사용할 일관되고 명확한 API 응답 형식을 제공할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}