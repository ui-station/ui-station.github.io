{"pageProps":{"post":{"title":"일찍 알았더라면 좋았을 6가지 Python 문자열 팁","description":"","date":"2024-06-30 21:58","slug":"2024-06-30-6PythonStringThingsIRegretNotKnowingEarlier","content":"\n\n<img src=\"/assets/img/2024-06-30-6PythonStringThingsIRegretNotKnowingEarlier_0.png\" />\n\n개발자로서, 우리는 우연히 문자열을 다루게 됩니다. 여기 개발자로서의 삶을 편리하게 만들어준 멋진 파이썬 문자열 사실 6가지가 있어요.\n\n# 1) 'string' 모듈\n\n모든 알파벳이 필요할 때 실제로 모두 타이핑할 필요가 없습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\r\n알파벳 = 'abcdefghijklmnopqrstuvwxyz'\r\n```\r\n\r\n대신에, 내장된 문자열 모듈을 가져와서 사용할 수 있어요:\r\n\r\n```js\r\nfrom string import ascii_lowercase\r\n\r\nprint(ascii_lowercase)\r\n# abcdefghijklmnopqrstuvwxyz\r\n```\r\n\r\n문자열 모듈에는 대문자와 구두점과 같은 다른 유용한 문자열 상수들이 포함되어 있어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n첫 번째 표\n\n```\n| 모듈 | import 구문 |\n| --- | --- |\n| string | (\n| | ascii_uppercase,\n| | ascii_letters,\n| | punctuation\n) |\n\n\nprint(ascii_uppercase)\n# abcdefghijklmnopqrstuvwxyz\n\nprint(ascii_letters)\n# abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nprint(punctuation)\n# !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\n\n\n두 번째 표\n\n유니 코드 문자\n\nUnicode를 통해 특수 문자를 출력할 수 있습니다. 중국어, 일본어, 한국어, 이모티콘, 상자 문자 등을 문자열에서 출력할 수 있습니다.\n\n```js\nprint('옴 심볼: \\u03A9')\n\n# 옴 심볼: Ω\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유니코드 문자를 인쇄하려면:\n\n- 유니코드 코드를 찾아야 합니다. 예: 오메가(옴) 기호의 경우 30A9를 구글/위키 등에서 찾습니다.\n- 유니코드 코드 앞에 \\u를 추가합니다. 예: \\u30A9\n- 문자열에 추가합니다. 예: `오메가 기호: \\u30A9`\n- 인쇄합니다! 그게 다입니다.\n\n참고 — \\u03A9와 같이 유니코드 문자는 한 개의 문자로 처리됩니다.\n\n이 방법을 사용하여 많은 특수 문자를 출력할 수 있습니다!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprint('alpha: \\u03B1')\n# alpha: α\n\nprint('beta: \\u03B2')\n# beta: β\n\nprint('inverted ?: \\u00BF')\n# inverted ?: ¿\n\nprint('arrow:', '\\u2192')\n# arrow: →\n\nprint('summation:', '\\u2211')\n# summation: ∑\n```\n\n# 3) f-strings (formatted strings)\n\n처음에 문자열을 더하는 방법을 배웠을 때:\n\n```js\nname = 'tom'\nage = 30\n\nx = 'my name is ' + name + ' and I am ' + str(age)\n\nprint(x) # my name is tome and I am 30\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일부 문제점:\n\n- 변수를 처리해야 할 때 더 많은 변수가 추가될수록 계속 타이핑하는 것이 점점 귀찮아집니다.\n- 우리는 non-string 변수에 대해 str(var)를 사용해야 합니다. 이는 string에 string만 추가할 수 있기 때문에(이것이 귀찮음) 필요합니다.\n\nF-strings(형식화된 문자열)를 사용하면 우리의 삶이 더 쉬워집니다:\n\n```js\nname = 'tom'\nage = 30\n\nx = f'my name is {name} and I am {age}'\n\nprint(x) # my name is tom and I am 30\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 우리는 문자열을 형식화된 문자열로 만들기 위해 따옴표 앞에 f를 추가합니다.\n- f-문자열 안에 변수를 포함시키기 위해 'var'를 사용합니다.\n\nF-문자열은 강력한 형식 지정 구문을 제공합니다:\n\n```js\n# 변수 이름을 출력하려면 var 뒤에 = 을 추가합니다\n\nname = 'tom'\nage = 30\n\nprint(f'{name=} {age=}') \n# name='tom' age=30\n```\n\n```js\n# 소수점 n 자리까지 반올림을 수행하려면 :.nf를 추가합니다\n\npi = 3.14159265\n\nprint(f'{pi:.2f} {pi:.4f}')\n# 3.14 3.1416\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 날짜 및 시간을 쉽게 포맷팅하기\n# 참고: 날짜 및 시간 포맷에 대한 기호들은 Python 문서에서 찾을 수 있습니다\n\nfrom datetime import datetime\ndate = datetime(2024, 3, 7)\n\nprint(f\"{date:%y-%m-%d}\")  # 24-03-07\nprint(f\"{date:%d %B %Y}\")  # 07 March 2024\n```\n\n# 4) 원시 문자열\n\n문자열 내부에 \\n (개행 문자)을 추가하면 새 줄에 출력됩니다:\n\n```js\nx = 'hello\\nworld'\n\nprint(x)\n# hello\n# world\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특정 이유로 만약 실제로 \"hello\\nworld\"를 출력하고 싶다면, \\ 문자를 또 다른 \\ 문자를 사용하여 이스케이프해야 합니다:\n\n```js\nx = 'hello\\\\nworld'\n\nprint(x)\n# hello\\nworld\n```\n\n우리는 원시 문자열(raw strings)을 사용하여 이를 피할 수 있습니다 - 따옴표 앞에 r을 추가함으로써\n\n```js\nx = r'hello\\nworld'\n\nprint(x)\n# hello\\nworld\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 생 문자열에서 \\ 문자는 실제 문자로 처리됩니다\n- \\n은 2개의 문자로 처리됩니다 — \\와 n\n- 많은 \\ 문자로 이루어진 문자열을 구성해야 할 때 유용합니다\n\n저는 특히 정규 표현식 (regex)에 대해 생 문자열을 유용하게 사용합니다.\n\n```js\n# 'apple'을 포함하는 모든 단어를 찾기 위해 regex 사용\n\nstring = 'apple orange pear pineapple snapple durian'\n\nimport re\n\nregex = r'\\b\\w*apple\\b'\nprint(re.findall(regex, string))\n\n# ['apple', 'pineapple', 'snapple']\n```\n\n정규 표현식에 익숙하지 않은 분들을 위해 추가적인 설명:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- \\b 는 단어들 사이의 경계를 나타내는 문자이며, 단어, 숫자 또는 밑줄과 매칭됩니다.\n- \\w 는 단어 문자로, 숫자, 알파벳, 또는 밑줄과 매칭됩니다.\n\n만약 여기서 정규표현식에 원시 문자열을 사용하지 않았다면, 아마도 다음과 같을 것입니다:\n\n```js\n# 'apple'을 포함하는 모든 단어를 찾기 위해 정규표현식 사용\n\nstring = 'apple orange pear pineapple snapple durian'\n\nimport re\n\nregex = '\\\\b\\\\w*apple\\\\b'\nprint(re.findall(regex, string))\n\n# ['apple', 'pineapple', 'snapple']\n```\n\n^ 여전히 작동하지만, 다른 \\ 문자를 이스케이프하기 위해 \\를 사용해야 한다는 것에 주목해 주세요. 많은 이러한 작업을 다뤄야 한다면 괴롭다는 것을 알 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5) 대괄호를 사용하여 문자열 결합\n\n대괄호 안에 연속된 문자열은 자동으로 함께 결합됩니다:\n\n```js\nx = (\n    'apple '\n    'orange '\n    'pear'\n)\n\nprint(x)\n# apple orange pear\n```\n\n^ 이것은 여러 줄로 나뉘어진 매우 긴 문자열을 처리해야 할 때 유용하며 + 연산자를 사용하고 싶지 않을 때 유용합니다\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# + 연산자 사용하기\nx = 'apple ' + \\\n    'orange ' + \\\n    'pear'\n\nprint(x)\n# apple orange pear\n```\n\n^ + 연산자를 여러 줄에 걸쳐 사용할 때는 \\을 사용하여 한 줄이 여러 줄에 걸친다고 Python에 알려주어야 합니다. 이것은 간단한 괄호를 사용하는 것만큼 우아하지 않다고 제 생각에는 느껴집니다.\n\n# 6) ANSI 이스케이프 시퀀스\n\nANSI 이스케이프 시퀀스는 특수한 문자로, 문자열에서 멋진 작업을 할 수 있게 해줍니다. 예를 들어:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 텍스트를 색으로 출력하기\n- 텍스트 강조 표시하기\n- 커서를 위로 이동하기\n\n예를 들어, 몇 가지 텍스트를 색상으로 출력해봅시다\n\n```js\nprint('\\x1b[31mhello')\nprint('\\x1b[32mhello')\nprint('\\x1b[34mhello')\n```\n\n<img src=\"/assets/img/2024-06-30-6PythonStringThingsIRegretNotKnowingEarlier_1.png\" />\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- \\x1b[31m은 빨강의 ANSI 시퀀스입니다.\n- \\x1b[32m은 초록의 ANSI 시퀀스입니다.\n- \\x1b[34m은 파랑의 ANSI 시퀀스입니다.\n\n이미 출력된 내용을 지우는 멋진 작업도 할 수 있어요:\n\n```js\nCURSOR_UP = \"\\033[1A\"\nCLEAR = \"\\x1b[2K\"\nCLEAR_LINE = CURSOR_UP + CLEAR\n\nprint('apple')\nprint('orange')\nprint('pear')\nprint('pineapple')\n\nprint(CLEAR_LINE * 2, end='')\n\nprint('durian')\nprint('grapes')\nprint('dragonfruit')\n\n# apple\n# orange\n# durian\n# grapes\n# dragonfruit\n```\n\n- \\033[1A는 커서를 한 줄 위로 이동시킵니다.\n- \\x1b[2K는 커서가 있는 줄을 삭제합니다.\n- 두 개를 함께 출력하면 터미널에서 한 줄을 삭제합니다.\n- print(CLEAR_LINE * 2, end='')는 이미 출력된 2 줄(pear와 pineapple)을 삭제합니다.\n- 그래서 durian이 바로 orange 다음에 나타나는 이유입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n참고 - 이슈 문자열을 매번 찾아보지 않아도 되도록 Python 패키지를 만들었습니다. pip install unprint을 사용해서 다운로드해보세요.\n\n```js\nfrom unprint import unprint\n\nprint('apple')\nprint('orange')\nprint('pear')\nprint('pineapple')\n\nunprint(2)\n\nprint('durian')\nprint('grapes')\nprint('dragonfruit')\n\n# apple\n# orange\n# durian\n# grapes\n# dragonfruit\n```\n\n# 부가적인 Python 농담\n\n# 결론\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n알기 쉽고 명확했기를 바랍니다\n\n# 만약 개발자로서 저를 지원하고 싶다면\n\n- 내 서적을 구매해 주세요! — 파이썬에 대해 알지 못했던 101가지\r\n- 찾을 수 있는 곳: https://payhip.com/b/vywcf\r\n- 이 이야기에 대해 50번 박수를 치세요\r\n- 당신의 생각을 남겨줘요\r\n- 이야기에서 가장 좋아하는 부분을 강조해 주세요\n\n감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사합니다!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nYouTube: [https://www.youtube.com/@zlliu246](https://www.youtube.com/@zlliu246)\n\nLinkedIn: [https://www.linkedin.com/in/zlliu/](https://www.linkedin.com/in/zlliu/)","ogImage":{"url":"/assets/img/2024-06-30-6PythonStringThingsIRegretNotKnowingEarlier_0.png"},"coverImage":"/assets/img/2024-06-30-6PythonStringThingsIRegretNotKnowingEarlier_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-30-6PythonStringThingsIRegretNotKnowingEarlier_0.png\">\n<p>개발자로서, 우리는 우연히 문자열을 다루게 됩니다. 여기 개발자로서의 삶을 편리하게 만들어준 멋진 파이썬 문자열 사실 6가지가 있어요.</p>\n<h1>1) 'string' 모듈</h1>\n<p>모든 알파벳이 필요할 때 실제로 모두 타이핑할 필요가 없습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">알파벳 = <span class=\"hljs-string\">'abcdefghijklmnopqrstuvwxyz'</span>\n</code></pre>\n<p>대신에, 내장된 문자열 모듈을 가져와서 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_lowercase\r\n\r\n<span class=\"hljs-title function_\">print</span>(ascii_lowercase)\r\n# abcdefghijklmnopqrstuvwxyz\n</code></pre>\n<p>문자열 모듈에는 대문자와 구두점과 같은 다른 유용한 문자열 상수들이 포함되어 있어요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">첫 번째 표\n\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>모듈</th><th>import 구문</th></tr></thead><tbody><tr><td>string</td><td>(</td></tr><tr><td></td><td>ascii_uppercase,</td></tr><tr><td></td><td>ascii_letters,</td></tr><tr><td></td><td>punctuation</td></tr><tr><td>)</td><td></td></tr></tbody></table>\n<p>print(ascii_uppercase)</p>\n<h1>abcdefghijklmnopqrstuvwxyz</h1>\n<p>print(ascii_letters)</p>\n<h1>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</h1>\n<p>print(punctuation)</p>\n<h1>!\"#$%&#x26;'()*+,-./:;&#x3C;=>?@[]^_`{|}~</h1>\n<p>두 번째 표</p>\n<p>유니 코드 문자</p>\n<p>Unicode를 통해 특수 문자를 출력할 수 있습니다. 중국어, 일본어, 한국어, 이모티콘, 상자 문자 등을 문자열에서 출력할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'옴 심볼: \\u03A9'</span>)\n\n# 옴 심볼: Ω\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>유니코드 문자를 인쇄하려면:</p>\n<ul>\n<li>유니코드 코드를 찾아야 합니다. 예: 오메가(옴) 기호의 경우 30A9를 구글/위키 등에서 찾습니다.</li>\n<li>유니코드 코드 앞에 \\u를 추가합니다. 예: \\u30A9</li>\n<li>문자열에 추가합니다. 예: <code>오메가 기호: \\u30A9</code></li>\n<li>인쇄합니다! 그게 다입니다.</li>\n</ul>\n<p>참고 — \\u03A9와 같이 유니코드 문자는 한 개의 문자로 처리됩니다.</p>\n<p>이 방법을 사용하여 많은 특수 문자를 출력할 수 있습니다!</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'alpha: \\u03B1'</span>)\n# <span class=\"hljs-attr\">alpha</span>: α\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'beta: \\u03B2'</span>)\n# <span class=\"hljs-attr\">beta</span>: β\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'inverted ?: \\u00BF'</span>)\n# inverted ?: ¿\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'arrow:'</span>, <span class=\"hljs-string\">'\\u2192'</span>)\n# <span class=\"hljs-attr\">arrow</span>: →\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'summation:'</span>, <span class=\"hljs-string\">'\\u2211'</span>)\n# <span class=\"hljs-attr\">summation</span>: ∑\n</code></pre>\n<h1>3) f-strings (formatted strings)</h1>\n<p>처음에 문자열을 더하는 방법을 배웠을 때:</p>\n<pre><code class=\"hljs language-js\">name = <span class=\"hljs-string\">'tom'</span>\nage = <span class=\"hljs-number\">30</span>\n\nx = <span class=\"hljs-string\">'my name is '</span> + name + <span class=\"hljs-string\">' and I am '</span> + <span class=\"hljs-title function_\">str</span>(age)\n\n<span class=\"hljs-title function_\">print</span>(x) # my name is tome and I am <span class=\"hljs-number\">30</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>일부 문제점:</p>\n<ul>\n<li>변수를 처리해야 할 때 더 많은 변수가 추가될수록 계속 타이핑하는 것이 점점 귀찮아집니다.</li>\n<li>우리는 non-string 변수에 대해 str(var)를 사용해야 합니다. 이는 string에 string만 추가할 수 있기 때문에(이것이 귀찮음) 필요합니다.</li>\n</ul>\n<p>F-strings(형식화된 문자열)를 사용하면 우리의 삶이 더 쉬워집니다:</p>\n<pre><code class=\"hljs language-js\">name = <span class=\"hljs-string\">'tom'</span>\nage = <span class=\"hljs-number\">30</span>\n\nx = f<span class=\"hljs-string\">'my name is {name} and I am {age}'</span>\n\n<span class=\"hljs-title function_\">print</span>(x) # my name is tom and I am <span class=\"hljs-number\">30</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>우리는 문자열을 형식화된 문자열로 만들기 위해 따옴표 앞에 f를 추가합니다.</li>\n<li>f-문자열 안에 변수를 포함시키기 위해 'var'를 사용합니다.</li>\n</ul>\n<p>F-문자열은 강력한 형식 지정 구문을 제공합니다:</p>\n<pre><code class=\"hljs language-js\"># 변수 이름을 출력하려면 <span class=\"hljs-keyword\">var</span> 뒤에 = 을 추가합니다\n\nname = <span class=\"hljs-string\">'tom'</span>\nage = <span class=\"hljs-number\">30</span>\n\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'{name=} {age=}'</span>) \n# name=<span class=\"hljs-string\">'tom'</span> age=<span class=\"hljs-number\">30</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"># 소수점 n 자리까지 반올림을 수행하려면 :.<span class=\"hljs-property\">nf</span>를 추가합니다\n\npi = <span class=\"hljs-number\">3.14159265</span>\n\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">'{pi:.2f} {pi:.4f}'</span>)\n# <span class=\"hljs-number\">3.14</span> <span class=\"hljs-number\">3.1416</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 날짜 및 시간을 쉽게 포맷팅하기\n# 참고: 날짜 및 시간 포맷에 대한 기호들은 <span class=\"hljs-title class_\">Python</span> 문서에서 찾을 수 있습니다\n\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\ndate = <span class=\"hljs-title function_\">datetime</span>(<span class=\"hljs-number\">2024</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>)\n\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{date:%y-%m-%d}\"</span>)  # <span class=\"hljs-number\">24</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">07</span>\n<span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"{date:%d %B %Y}\"</span>)  # <span class=\"hljs-number\">07</span> <span class=\"hljs-title class_\">March</span> <span class=\"hljs-number\">2024</span>\n</code></pre>\n<h1>4) 원시 문자열</h1>\n<p>문자열 내부에 \\n (개행 문자)을 추가하면 새 줄에 출력됩니다:</p>\n<pre><code class=\"hljs language-js\">x = <span class=\"hljs-string\">'hello\\nworld'</span>\n\n<span class=\"hljs-title function_\">print</span>(x)\n# hello\n# world\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>특정 이유로 만약 실제로 \"hello\\nworld\"를 출력하고 싶다면, \\ 문자를 또 다른 \\ 문자를 사용하여 이스케이프해야 합니다:</p>\n<pre><code class=\"hljs language-js\">x = <span class=\"hljs-string\">'hello\\\\nworld'</span>\n\n<span class=\"hljs-title function_\">print</span>(x)\n# hello\\nworld\n</code></pre>\n<p>우리는 원시 문자열(raw strings)을 사용하여 이를 피할 수 있습니다 - 따옴표 앞에 r을 추가함으로써</p>\n<pre><code class=\"hljs language-js\">x = r<span class=\"hljs-string\">'hello\\nworld'</span>\n\n<span class=\"hljs-title function_\">print</span>(x)\n# hello\\nworld\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>생 문자열에서 \\ 문자는 실제 문자로 처리됩니다</li>\n<li>\\n은 2개의 문자로 처리됩니다 — \\와 n</li>\n<li>많은 \\ 문자로 이루어진 문자열을 구성해야 할 때 유용합니다</li>\n</ul>\n<p>저는 특히 정규 표현식 (regex)에 대해 생 문자열을 유용하게 사용합니다.</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-string\">'apple'</span>을 포함하는 모든 단어를 찾기 위해 regex 사용\n\nstring = <span class=\"hljs-string\">'apple orange pear pineapple snapple durian'</span>\n\n<span class=\"hljs-keyword\">import</span> re\n\nregex = r<span class=\"hljs-string\">'\\b\\w*apple\\b'</span>\n<span class=\"hljs-title function_\">print</span>(re.<span class=\"hljs-title function_\">findall</span>(regex, string))\n\n# [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'pineapple'</span>, <span class=\"hljs-string\">'snapple'</span>]\n</code></pre>\n<p>정규 표현식에 익숙하지 않은 분들을 위해 추가적인 설명:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>\\b 는 단어들 사이의 경계를 나타내는 문자이며, 단어, 숫자 또는 밑줄과 매칭됩니다.</li>\n<li>\\w 는 단어 문자로, 숫자, 알파벳, 또는 밑줄과 매칭됩니다.</li>\n</ul>\n<p>만약 여기서 정규표현식에 원시 문자열을 사용하지 않았다면, 아마도 다음과 같을 것입니다:</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-string\">'apple'</span>을 포함하는 모든 단어를 찾기 위해 정규표현식 사용\n\nstring = <span class=\"hljs-string\">'apple orange pear pineapple snapple durian'</span>\n\n<span class=\"hljs-keyword\">import</span> re\n\nregex = <span class=\"hljs-string\">'\\\\b\\\\w*apple\\\\b'</span>\n<span class=\"hljs-title function_\">print</span>(re.<span class=\"hljs-title function_\">findall</span>(regex, string))\n\n# [<span class=\"hljs-string\">'apple'</span>, <span class=\"hljs-string\">'pineapple'</span>, <span class=\"hljs-string\">'snapple'</span>]\n</code></pre>\n<p>^ 여전히 작동하지만, 다른 \\ 문자를 이스케이프하기 위해 \\를 사용해야 한다는 것에 주목해 주세요. 많은 이러한 작업을 다뤄야 한다면 괴롭다는 것을 알 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>5) 대괄호를 사용하여 문자열 결합</h1>\n<p>대괄호 안에 연속된 문자열은 자동으로 함께 결합됩니다:</p>\n<pre><code class=\"hljs language-js\">x = (\n    <span class=\"hljs-string\">'apple '</span>\n    <span class=\"hljs-string\">'orange '</span>\n    <span class=\"hljs-string\">'pear'</span>\n)\n\n<span class=\"hljs-title function_\">print</span>(x)\n# apple orange pear\n</code></pre>\n<p>^ 이것은 여러 줄로 나뉘어진 매우 긴 문자열을 처리해야 할 때 유용하며 + 연산자를 사용하고 싶지 않을 때 유용합니다</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># + 연산자 사용하기\nx = <span class=\"hljs-string\">'apple '</span> + \\\n    <span class=\"hljs-string\">'orange '</span> + \\\n    <span class=\"hljs-string\">'pear'</span>\n\n<span class=\"hljs-title function_\">print</span>(x)\n# apple orange pear\n</code></pre>\n<p>^ + 연산자를 여러 줄에 걸쳐 사용할 때는 \\을 사용하여 한 줄이 여러 줄에 걸친다고 Python에 알려주어야 합니다. 이것은 간단한 괄호를 사용하는 것만큼 우아하지 않다고 제 생각에는 느껴집니다.</p>\n<h1>6) ANSI 이스케이프 시퀀스</h1>\n<p>ANSI 이스케이프 시퀀스는 특수한 문자로, 문자열에서 멋진 작업을 할 수 있게 해줍니다. 예를 들어:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>텍스트를 색으로 출력하기</li>\n<li>텍스트 강조 표시하기</li>\n<li>커서를 위로 이동하기</li>\n</ul>\n<p>예를 들어, 몇 가지 텍스트를 색상으로 출력해봅시다</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'\\x1b[31mhello'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'\\x1b[32mhello'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'\\x1b[34mhello'</span>)\n</code></pre>\n<img src=\"/assets/img/2024-06-30-6PythonStringThingsIRegretNotKnowingEarlier_1.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>\\x1b[31m은 빨강의 ANSI 시퀀스입니다.</li>\n<li>\\x1b[32m은 초록의 ANSI 시퀀스입니다.</li>\n<li>\\x1b[34m은 파랑의 ANSI 시퀀스입니다.</li>\n</ul>\n<p>이미 출력된 내용을 지우는 멋진 작업도 할 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">CURSOR_UP</span> = <span class=\"hljs-string\">\"\\033[1A\"</span>\n<span class=\"hljs-variable constant_\">CLEAR</span> = <span class=\"hljs-string\">\"\\x1b[2K\"</span>\n<span class=\"hljs-variable constant_\">CLEAR_LINE</span> = <span class=\"hljs-variable constant_\">CURSOR_UP</span> + <span class=\"hljs-variable constant_\">CLEAR</span>\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'apple'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'orange'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'pear'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'pineapple'</span>)\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-variable constant_\">CLEAR_LINE</span> * <span class=\"hljs-number\">2</span>, end=<span class=\"hljs-string\">''</span>)\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'durian'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'grapes'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'dragonfruit'</span>)\n\n# apple\n# orange\n# durian\n# grapes\n# dragonfruit\n</code></pre>\n<ul>\n<li>\\033[1A는 커서를 한 줄 위로 이동시킵니다.</li>\n<li>\\x1b[2K는 커서가 있는 줄을 삭제합니다.</li>\n<li>두 개를 함께 출력하면 터미널에서 한 줄을 삭제합니다.</li>\n<li>print(CLEAR_LINE * 2, end='')는 이미 출력된 2 줄(pear와 pineapple)을 삭제합니다.</li>\n<li>그래서 durian이 바로 orange 다음에 나타나는 이유입니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>참고 - 이슈 문자열을 매번 찾아보지 않아도 되도록 Python 패키지를 만들었습니다. pip install unprint을 사용해서 다운로드해보세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> unprint <span class=\"hljs-keyword\">import</span> unprint\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'apple'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'orange'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'pear'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'pineapple'</span>)\n\n<span class=\"hljs-title function_\">unprint</span>(<span class=\"hljs-number\">2</span>)\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'durian'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'grapes'</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'dragonfruit'</span>)\n\n# apple\n# orange\n# durian\n# grapes\n# dragonfruit\n</code></pre>\n<h1>부가적인 Python 농담</h1>\n<h1>결론</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>알기 쉽고 명확했기를 바랍니다</p>\n<h1>만약 개발자로서 저를 지원하고 싶다면</h1>\n<ul>\n<li>내 서적을 구매해 주세요! — 파이썬에 대해 알지 못했던 101가지</li>\n<li>찾을 수 있는 곳: <a href=\"https://payhip.com/b/vywcf\" rel=\"nofollow\" target=\"_blank\">https://payhip.com/b/vywcf</a></li>\n<li>이 이야기에 대해 50번 박수를 치세요</li>\n<li>당신의 생각을 남겨줘요</li>\n<li>이야기에서 가장 좋아하는 부분을 강조해 주세요</li>\n</ul>\n<p>감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사합니다!</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}