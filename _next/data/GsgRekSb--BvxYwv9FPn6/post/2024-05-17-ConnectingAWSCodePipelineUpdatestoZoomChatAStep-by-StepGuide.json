{"pageProps":{"post":{"title":"AWS CodePipeline 업데이트를 Zoom 채팅에 연결하는 방법 단계별 안내","description":"","date":"2024-05-17 18:09","slug":"2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide","content":"\n코드 파이프 라인 콘솔에 계속해서 붙어 있어 지친 적이 있나요? 이 안내서를 통해 코드 파이프 라인 실행에 대한 실시간 알림을 직접 Zoom 채널에서 받는 방법을 안내해 드릴 거예요.\n\n파이프 라인 실패를 신속히 식별하고 해결하는 데 도움을 주며, 문맥 전환을 줄여주는 이 통합은 집중력 향상에 도움을 주고 팀원들을 알려주며, 더 나아가 전반적인 의사 소통과 효율성을 향상시키는 데 도움이 될 거예요.\n\n## 절차:\n\n![이미지](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n### 단계 1: Zoom 수신 웹훅 설정하기\n\n먼저, AWS CodePipeline에서 알림을 보낼 수 있는 Zoom 수신 웹훅을 설정해야 합니다.\n\n- Zoom 계정에 로그인하고 Zoom Marketplace로 이동합니다.\n- \"수신 웹훅\"을 검색하고 앱을 설치합니다. 앱을 설치할 수 없는 경우 계정 관리자에게 문의하세요.\n- 앱이 설치되면 Zoom 채팅의 앱 섹션에서 찾을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 설치가 완료되면 'Incoming Webhooks' 앱으로 이동하세요.\n\n![이미지](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_2.png)\n\n- 도움말을 입력하는 동안 '앱 비활성화' 메시지가 표시되면, 관리자에게 앱을 활성화할 수 있도록 요청해보세요.\n- 웹훅에 대한 명령어를 확인하려면 'help'를 입력하세요.\n\n![이미지](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 원하는 채널/그룹으로 이동하여 CodePipeline 알림을 받기를 원하는 곳에서 '/ '을 메시지 상자에 입력하여 사용 가능한 명령을 확인하세요.\n\n![Image 1](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_4.png)\n\n- 연결 명령을 선택하고 웹훅에 대한 설명적인 이름을 입력하세요.\n\n![Image 2](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 제공된 엔드포인트와 검증 토큰을 확인하세요.\n\n단계 2: 코드파이프라인 알림을 위한 SNS 토픽 설정\n\n- SNS 서비스로 이동합니다.\n- \"토픽 생성\"을 클릭하고 \"표준\"을 선택합니다.\n- 토픽에 이름을 입력하고 토픽을 생성합니다.\n\n단계 3: 코드파이프라인 알림 구성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- CodePipeline으로 이동하세요.\n- 구성하려는 파이프라인을 선택하세요.\n- \"알림 관리\"를 선택하세요.\n- \"이벤트 유형\" 아래에서, 알림을 받기 원하는 이벤트를 선택하세요.\n- \"대상\" 섹션에서 \"SNS 주제\"를 선택하고, 이전에 생성한 주제의 SNS 주제 ARN을 붙여넣으세요.\n\n![이미지](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_6.png)\n\n4단계: 람다 함수 생성\n\n- Lambda 서비스로 이동하세요.\n- \"함수 생성\"을 클릭하고, \"스크래치부터 작성\"을 선택하세요.\n- 함수 이름을 제공하고 런타임을 선택하세요.\n- 나머지 옵션은 기본값으로 남기고, \"함수 생성\"을 클릭하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport urllib.request\nimport json\n\nZOOM_WEBHOOK_URL = \"여기에 Zoom 웹훅 URL을 입력하세요\"\nBEARER_TOKEN = \"베어러 토큰\"\n\ndef lambda_handler(event, context):\n    # 받은 이벤트 기록\n    print(\"받은 이벤트: \" + json.dumps(event, indent=2))\n\n    for record in event['Records']:\n        sns_message = json.loads(record['Sns']['Message'])\n\n        pipeline = sns_message['detail']['pipeline']\n        stage = sns_message['detail']['stage']\n        state = sns_message['detail']['state']\n\n        # 메시지 준비\n        message = f\"{pipeline}의 {stage} 스테이지가 {state} 상태입니다.\"\n        data = json.dumps(message).encode('utf-8')\n\n        # Zoom 웹훅으로 메시지 보내기\n        req = urllib.request.Request(\n            ZOOM_WEBHOOK_URL,\n            data=data,\n            headers={\n                'Content-Type': 'application/json',\n                'Authorization': f'Bearer {BEARER_TOKEN}'\n            }\n        )\n\n        try:\n            with urllib.request.urlopen(req) as response:\n                print(\"Zoom으로부터 응답: \" + response.read().decode('utf-8'))\n        except urllib.error.URLError as e:\n            print(f\"Zoom에 메시지 보내는 중 오류 발생: {e.reason}\")\n\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Zoom으로 푸시된 알림')\n    }\n```\n\nURL 및 베어러 토큰을 코드에 직접 입력하는 대신, Parameter Store를 활용할 수 있습니다.\n\n이제 코드를 배포합니다.\n\n스텝 5: SNS 토픽으로 Lambda 함수 구성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 이전에 만든 SNS 주제를 Lambda 함수의 트리거로 추가하세요.\n\n![img](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_7.png)\n\n단계 6: 통합 테스트\n\n- 모든 것이 올바르게 설정되었는지 확인하기 위해 SNS 템플릿을 사용하여 람다 함수를 테스트하세요. 테스트를 진행하면 구성된 웹훅 그룹/채널에서 예시 이벤트를 받게 될 겁니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Screenshot](/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_8.png)\n\n- 이제 콘솔을 통해 수동으로 변경 사항을 CodePipeline에서 해제하거나, 파이프라인이 트리거되기를 기다립니다.\n- 파이프라인에서 변경 사항이 있을 때, 이전에 선택한 단계에 대한 알림을 받게 됩니다.\n\nAWS CodePipeline 알림을 Zoom 채팅 채널과 통합하면 지속적인 콘솔 확인이 필요 없어지며, 팀을 최신 상태로 유지하고 개발 워크플로우를 향상시킬 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>코드 파이프 라인 콘솔에 계속해서 붙어 있어 지친 적이 있나요? 이 안내서를 통해 코드 파이프 라인 실행에 대한 실시간 알림을 직접 Zoom 채널에서 받는 방법을 안내해 드릴 거예요.</p>\n<p>파이프 라인 실패를 신속히 식별하고 해결하는 데 도움을 주며, 문맥 전환을 줄여주는 이 통합은 집중력 향상에 도움을 주고 팀원들을 알려주며, 더 나아가 전반적인 의사 소통과 효율성을 향상시키는 데 도움이 될 거예요.</p>\n<h2>절차:</h2>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_0.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h3>단계 1: Zoom 수신 웹훅 설정하기</h3>\n<p>먼저, AWS CodePipeline에서 알림을 보낼 수 있는 Zoom 수신 웹훅을 설정해야 합니다.</p>\n<ul>\n<li>Zoom 계정에 로그인하고 Zoom Marketplace로 이동합니다.</li>\n<li>\"수신 웹훅\"을 검색하고 앱을 설치합니다. 앱을 설치할 수 없는 경우 계정 관리자에게 문의하세요.</li>\n<li>앱이 설치되면 Zoom 채팅의 앱 섹션에서 찾을 수 있습니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>설치가 완료되면 'Incoming Webhooks' 앱으로 이동하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_2.png\" alt=\"이미지\"></p>\n<ul>\n<li>도움말을 입력하는 동안 '앱 비활성화' 메시지가 표시되면, 관리자에게 앱을 활성화할 수 있도록 요청해보세요.</li>\n<li>웹훅에 대한 명령어를 확인하려면 'help'를 입력하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_3.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>원하는 채널/그룹으로 이동하여 CodePipeline 알림을 받기를 원하는 곳에서 '/ '을 메시지 상자에 입력하여 사용 가능한 명령을 확인하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_4.png\" alt=\"Image 1\"></p>\n<ul>\n<li>연결 명령을 선택하고 웹훅에 대한 설명적인 이름을 입력하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_5.png\" alt=\"Image 2\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>제공된 엔드포인트와 검증 토큰을 확인하세요.</li>\n</ul>\n<p>단계 2: 코드파이프라인 알림을 위한 SNS 토픽 설정</p>\n<ul>\n<li>SNS 서비스로 이동합니다.</li>\n<li>\"토픽 생성\"을 클릭하고 \"표준\"을 선택합니다.</li>\n<li>토픽에 이름을 입력하고 토픽을 생성합니다.</li>\n</ul>\n<p>단계 3: 코드파이프라인 알림 구성</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>CodePipeline으로 이동하세요.</li>\n<li>구성하려는 파이프라인을 선택하세요.</li>\n<li>\"알림 관리\"를 선택하세요.</li>\n<li>\"이벤트 유형\" 아래에서, 알림을 받기 원하는 이벤트를 선택하세요.</li>\n<li>\"대상\" 섹션에서 \"SNS 주제\"를 선택하고, 이전에 생성한 주제의 SNS 주제 ARN을 붙여넣으세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_6.png\" alt=\"이미지\"></p>\n<p>4단계: 람다 함수 생성</p>\n<ul>\n<li>Lambda 서비스로 이동하세요.</li>\n<li>\"함수 생성\"을 클릭하고, \"스크래치부터 작성\"을 선택하세요.</li>\n<li>함수 이름을 제공하고 런타임을 선택하세요.</li>\n<li>나머지 옵션은 기본값으로 남기고, \"함수 생성\"을 클릭하세요.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> urllib.<span class=\"hljs-property\">request</span>\n<span class=\"hljs-keyword\">import</span> json\n\n<span class=\"hljs-variable constant_\">ZOOM_WEBHOOK_URL</span> = <span class=\"hljs-string\">\"여기에 Zoom 웹훅 URL을 입력하세요\"</span>\n<span class=\"hljs-variable constant_\">BEARER_TOKEN</span> = <span class=\"hljs-string\">\"베어러 토큰\"</span>\n\ndef <span class=\"hljs-title function_\">lambda_handler</span>(event, context):\n    # 받은 이벤트 기록\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"받은 이벤트: \"</span> + json.<span class=\"hljs-title function_\">dumps</span>(event, indent=<span class=\"hljs-number\">2</span>))\n\n    <span class=\"hljs-keyword\">for</span> record <span class=\"hljs-keyword\">in</span> event[<span class=\"hljs-string\">'Records'</span>]:\n        sns_message = json.<span class=\"hljs-title function_\">loads</span>(record[<span class=\"hljs-string\">'Sns'</span>][<span class=\"hljs-string\">'Message'</span>])\n\n        pipeline = sns_message[<span class=\"hljs-string\">'detail'</span>][<span class=\"hljs-string\">'pipeline'</span>]\n        stage = sns_message[<span class=\"hljs-string\">'detail'</span>][<span class=\"hljs-string\">'stage'</span>]\n        state = sns_message[<span class=\"hljs-string\">'detail'</span>][<span class=\"hljs-string\">'state'</span>]\n\n        # 메시지 준비\n        message = f<span class=\"hljs-string\">\"{pipeline}의 {stage} 스테이지가 {state} 상태입니다.\"</span>\n        data = json.<span class=\"hljs-title function_\">dumps</span>(message).<span class=\"hljs-title function_\">encode</span>(<span class=\"hljs-string\">'utf-8'</span>)\n\n        # <span class=\"hljs-title class_\">Zoom</span> 웹훅으로 메시지 보내기\n        req = urllib.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title class_\">Request</span>(\n            <span class=\"hljs-variable constant_\">ZOOM_WEBHOOK_URL</span>,\n            data=data,\n            headers={\n                <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n                <span class=\"hljs-string\">'Authorization'</span>: f<span class=\"hljs-string\">'Bearer {BEARER_TOKEN}'</span>\n            }\n        )\n\n        <span class=\"hljs-attr\">try</span>:\n            <span class=\"hljs-keyword\">with</span> urllib.<span class=\"hljs-property\">request</span>.<span class=\"hljs-title function_\">urlopen</span>(req) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">response</span>:\n                <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Zoom으로부터 응답: \"</span> + response.<span class=\"hljs-title function_\">read</span>().<span class=\"hljs-title function_\">decode</span>(<span class=\"hljs-string\">'utf-8'</span>))\n        except urllib.<span class=\"hljs-property\">error</span>.<span class=\"hljs-property\">URLError</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-attr\">e</span>:\n            <span class=\"hljs-title function_\">print</span>(f<span class=\"hljs-string\">\"Zoom에 메시지 보내는 중 오류 발생: {e.reason}\"</span>)\n\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-string\">'statusCode'</span>: <span class=\"hljs-number\">200</span>,\n        <span class=\"hljs-string\">'body'</span>: json.<span class=\"hljs-title function_\">dumps</span>(<span class=\"hljs-string\">'Zoom으로 푸시된 알림'</span>)\n    }\n</code></pre>\n<p>URL 및 베어러 토큰을 코드에 직접 입력하는 대신, Parameter Store를 활용할 수 있습니다.</p>\n<p>이제 코드를 배포합니다.</p>\n<p>스텝 5: SNS 토픽으로 Lambda 함수 구성하기</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>이전에 만든 SNS 주제를 Lambda 함수의 트리거로 추가하세요.</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_7.png\" alt=\"img\"></p>\n<p>단계 6: 통합 테스트</p>\n<ul>\n<li>모든 것이 올바르게 설정되었는지 확인하기 위해 SNS 템플릿을 사용하여 람다 함수를 테스트하세요. 테스트를 진행하면 구성된 웹훅 그룹/채널에서 예시 이벤트를 받게 될 겁니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-05-17-ConnectingAWSCodePipelineUpdatestoZoomChatAStep-by-StepGuide_8.png\" alt=\"Screenshot\"></p>\n<ul>\n<li>이제 콘솔을 통해 수동으로 변경 사항을 CodePipeline에서 해제하거나, 파이프라인이 트리거되기를 기다립니다.</li>\n<li>파이프라인에서 변경 사항이 있을 때, 이전에 선택한 단계에 대한 알림을 받게 됩니다.</li>\n</ul>\n<p>AWS CodePipeline 알림을 Zoom 채팅 채널과 통합하면 지속적인 콘솔 확인이 필요 없어지며, 팀을 최신 상태로 유지하고 개발 워크플로우를 향상시킬 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}