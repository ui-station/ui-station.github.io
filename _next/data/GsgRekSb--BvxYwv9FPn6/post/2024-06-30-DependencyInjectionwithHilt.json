{"pageProps":{"post":{"title":"Hilt로 알아보는 Dependency Injection 방법","description":"","date":"2024-06-30 19:19","slug":"2024-06-30-DependencyInjectionwithHilt","content":"\n\n<img src=\"/assets/img/2024-06-30-DependencyInjectionwithHilt_0.png\" />\n\n# 코틀린을 활용한 모던 안드로이드 개발 시리즈 #4\n\n의존성 주입(DI)은 현대 안드로이드 애플리케이션 개발에서 중요한 기술입니다. Hilt는 안드로이드 애플리케이션에서 DI를 간단하게 만들어 주는 라이브러리로, Dagger를 기반으로 하고 있습니다. 이 안내서에서는 Hilt의 기본 개념과 Hilt를 사용한 DI의 구현 방법을 다룰 것입니다.\n\n# 의존성 주입이란?\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n의존성 주입은 클래스가 생성자를 직접 만드는 대신 외부 소스에서 의존성을 받을 수 있도록 하는 디자인 패턴입니다. 이는 코드를 더 유연하고 테스트 가능하며 관리하기 쉽게 만듭니다.\n\n# Hilt란 무엇이며 왜 사용해야 하나요?\n\nHilt는 안드로이드를 위한 Dagger 기반 의존성 주입 라이브러리로, DI를 간단하게 만들고 다음과 같은 이점을 제공합니다:\n\n- 보일러플레이트 코드를 줄입니다.\n- Android 컴포넌트에 대한 내장 지원을 제공합니다.\n- 테스트 작성을 쉽게 만듭니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 프로젝트에 Hilt 추가하기\n\n프로젝트에 Hilt를 추가하려면 build.gradle 파일에 필요한 종속성을 추가해야 합니다.\n\n## 프로젝트 수준 build.gradle\n\n```js\nbuildscript {\n    ext.hilt_version = '2.38.1'\n    dependencies {\n        classpath \"com.google.dagger:hilt-android-gradle-plugin:$hilt_version\"\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Module-level build.gradle\n\n```js\nplugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n    id 'kotlin-kapt'\n    id 'dagger.hilt.android.plugin'\n}\n\ndependencies {\n    implementation \"com.google.dagger:hilt-android:$hilt_version\"\n    kapt \"com.google.dagger:hilt-android-compiler:$hilt_version\"\n}\n```\n\n# Basic Hilt Annotations\n\n## @HiltAndroidApp\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n@HiltAndroidApp 주석을 사용하여 Hilt의 DI 컨테이너를 초기화하는 애플리케이션 클래스에 주석을 달아주세요.\n\n```kotlin\n@HiltAndroidApp\nclass MyApp : Application() {\n}\n```\n\n## @Inject\n\n@Inject 주석은 Hilt에 클래스 또는 필드의 인스턴스를 제공하는 방법을 알려줍니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nclass UserRepository @Inject constructor(\n    private val apiService: ApiService\n) {\n    // UserRepository content\n}\n```\n\n## @Module and @InstallIn\n\n@Module 어노테이션은 Hilt에게 특정 타입의 인스턴스를 생성하는 방법을 알려줍니다. @InstallIn 어노테이션은 모듈이 설치되어야 하는 Hilt 컨테이너를 지정합니다.\n\n```kotlin\n@Module\n@InstallIn(SingletonComponent::class)\nobject AppModule {\n\n    @Provides\n    @Singleton\n    fun provideApiService(): ApiService {\n        return Retrofit.Builder()\n            .baseUrl(\"https://api.example.com\")\n            .build()\n            .create(ApiService::class.java)\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## @Singleton\n\n@Singleton 어노테이션은 Hilt에게 애플리케이션 전체를 통틀어 의존성의 단일 인스턴스를 제공하도록 지시합니다.\n\n# ViewModel에서 Hilt 사용하기\n\nViewModel에서 Hilt를 사용하려면 @HiltViewModel과 @Inject 어노테이션을 사용하면 됩니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@HiltViewModel\nclass MyViewModel @Inject constructor(\n    private val userRepository: UserRepository\n) : ViewModel() {\n    // ViewModel content\n}\n```\n\nActivity나 Fragment에서 Hilt를 사용하여 ViewModel을 가져오세요.\n\n```kotlin\n@AndroidEntryPoint\nclass MainActivity : AppCompatActivity() {\n\n    private val viewModel: MyViewModel by viewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        // Use ViewModel\n    }\n}\n```\n\n# Hilt를 사용하여 다른 컴포넌트에서 DI하기\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n힐트는 액티비티, 프래그먼트, 뷰, 서비스 및 브로드캐스트 수신자와 같은 다양한 Android 구성 요소에서 DI를 제공합니다. @AndroidEntryPoint 주석을 사용하여 힐트 DI를 이러한 구성 요소에서 활성화할 수 있습니다.\n\n```js\n@AndroidEntryPoint\nclass MyFragment : Fragment() {\n\n    private val viewModel: MyViewModel by viewModels()\n\n    // 프래그먼트 내용\n}\n```\n\n# Hilt와 테스트\n\n힐트는 또한 테스트 작성을 간소화합니다. 테스트에서 @HiltAndroidTest 및 @UninstallModules 주석을 사용하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@HiltAndroidTest\n@RunWith(AndroidJUnit4::class)\nclass MyTest {\n\n    @get:Rule\n    var hiltRule = HiltAndroidRule(this)\n\n    @Inject\n    lateinit var userRepository: UserRepository\n\n    @Before\n    fun init() {\n        hiltRule.inject()\n    }\n\n    @Test\n    fun testUserRepository() {\n        // Test content\n    }\n}\n```\n\n# 결론\n\nHilt는 안드로이드 애플리케이션에서 의존성 주입을 간단하게 만들어주는 강력한 도구입니다. 이 안내서에서 Hilt의 기본 개념과 사용 방법을 배웠습니다. Hilt를 사용하면 코드를 더 깔끔하게 만들고 유연하게 유지하며 쉽게 테스트할 수 있습니다.\n\n본 안내서를 따라가면 Hilt를 활용한 의존성 주입을 마스터하는 중요한 한 걸음을 내디딘 것입니다. 즐거운 코딩되세요!\n","ogImage":{"url":"/assets/img/2024-06-30-DependencyInjectionwithHilt_0.png"},"coverImage":"/assets/img/2024-06-30-DependencyInjectionwithHilt_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-30-DependencyInjectionwithHilt_0.png\">\n<h1>코틀린을 활용한 모던 안드로이드 개발 시리즈 #4</h1>\n<p>의존성 주입(DI)은 현대 안드로이드 애플리케이션 개발에서 중요한 기술입니다. Hilt는 안드로이드 애플리케이션에서 DI를 간단하게 만들어 주는 라이브러리로, Dagger를 기반으로 하고 있습니다. 이 안내서에서는 Hilt의 기본 개념과 Hilt를 사용한 DI의 구현 방법을 다룰 것입니다.</p>\n<h1>의존성 주입이란?</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>의존성 주입은 클래스가 생성자를 직접 만드는 대신 외부 소스에서 의존성을 받을 수 있도록 하는 디자인 패턴입니다. 이는 코드를 더 유연하고 테스트 가능하며 관리하기 쉽게 만듭니다.</p>\n<h1>Hilt란 무엇이며 왜 사용해야 하나요?</h1>\n<p>Hilt는 안드로이드를 위한 Dagger 기반 의존성 주입 라이브러리로, DI를 간단하게 만들고 다음과 같은 이점을 제공합니다:</p>\n<ul>\n<li>보일러플레이트 코드를 줄입니다.</li>\n<li>Android 컴포넌트에 대한 내장 지원을 제공합니다.</li>\n<li>테스트 작성을 쉽게 만듭니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>프로젝트에 Hilt 추가하기</h1>\n<p>프로젝트에 Hilt를 추가하려면 build.gradle 파일에 필요한 종속성을 추가해야 합니다.</p>\n<h2>프로젝트 수준 build.gradle</h2>\n<pre><code class=\"hljs language-js\">buildscript {\n    ext.<span class=\"hljs-property\">hilt_version</span> = <span class=\"hljs-string\">'2.38.1'</span>\n    dependencies {\n        classpath <span class=\"hljs-string\">\"com.google.dagger:hilt-android-gradle-plugin:$hilt_version\"</span>\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>Module-level build.gradle</h2>\n<pre><code class=\"hljs language-js\">plugins {\n    id <span class=\"hljs-string\">'com.android.application'</span>\n    id <span class=\"hljs-string\">'kotlin-android'</span>\n    id <span class=\"hljs-string\">'kotlin-kapt'</span>\n    id <span class=\"hljs-string\">'dagger.hilt.android.plugin'</span>\n}\n\ndependencies {\n    implementation <span class=\"hljs-string\">\"com.google.dagger:hilt-android:$hilt_version\"</span>\n    kapt <span class=\"hljs-string\">\"com.google.dagger:hilt-android-compiler:$hilt_version\"</span>\n}\n</code></pre>\n<h1>Basic Hilt Annotations</h1>\n<h2>@HiltAndroidApp</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>@HiltAndroidApp 주석을 사용하여 Hilt의 DI 컨테이너를 초기화하는 애플리케이션 클래스에 주석을 달아주세요.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@HiltAndroidApp</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyApp</span> : <span class=\"hljs-type\">Application</span>() {\n}\n</code></pre>\n<h2>@Inject</h2>\n<p>@Inject 주석은 Hilt에 클래스 또는 필드의 인스턴스를 제공하는 방법을 알려줍니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> <span class=\"hljs-meta\">@Inject</span> <span class=\"hljs-keyword\">constructor</span>(\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> apiService: ApiService\n) {\n    <span class=\"hljs-comment\">// UserRepository content</span>\n}\n</code></pre>\n<h2>@Module and @InstallIn</h2>\n<p>@Module 어노테이션은 Hilt에게 특정 타입의 인스턴스를 생성하는 방법을 알려줍니다. @InstallIn 어노테이션은 모듈이 설치되어야 하는 Hilt 컨테이너를 지정합니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Module</span>\n<span class=\"hljs-meta\">@InstallIn(SingletonComponent::class)</span>\n<span class=\"hljs-keyword\">object</span> AppModule {\n\n    <span class=\"hljs-meta\">@Provides</span>\n    <span class=\"hljs-meta\">@Singleton</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">provideApiService</span><span class=\"hljs-params\">()</span></span>: ApiService {\n        <span class=\"hljs-keyword\">return</span> Retrofit.Builder()\n            .baseUrl(<span class=\"hljs-string\">\"https://api.example.com\"</span>)\n            .build()\n            .create(ApiService::<span class=\"hljs-keyword\">class</span>.java)\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>@Singleton</h2>\n<p>@Singleton 어노테이션은 Hilt에게 애플리케이션 전체를 통틀어 의존성의 단일 인스턴스를 제공하도록 지시합니다.</p>\n<h1>ViewModel에서 Hilt 사용하기</h1>\n<p>ViewModel에서 Hilt를 사용하려면 @HiltViewModel과 @Inject 어노테이션을 사용하면 됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@HiltViewModel</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyViewModel</span> <span class=\"hljs-meta\">@Inject</span> <span class=\"hljs-keyword\">constructor</span>(\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> userRepository: UserRepository\n) : ViewModel() {\n    <span class=\"hljs-comment\">// ViewModel content</span>\n}\n</code></pre>\n<p>Activity나 Fragment에서 Hilt를 사용하여 ViewModel을 가져오세요.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@AndroidEntryPoint</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainActivity</span> : <span class=\"hljs-type\">AppCompatActivity</span>() {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> viewModel: MyViewModel <span class=\"hljs-keyword\">by</span> viewModels()\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(savedInstanceState: <span class=\"hljs-type\">Bundle</span>?)</span></span> {\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        <span class=\"hljs-comment\">// Use ViewModel</span>\n    }\n}\n</code></pre>\n<h1>Hilt를 사용하여 다른 컴포넌트에서 DI하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>힐트는 액티비티, 프래그먼트, 뷰, 서비스 및 브로드캐스트 수신자와 같은 다양한 Android 구성 요소에서 DI를 제공합니다. @AndroidEntryPoint 주석을 사용하여 힐트 DI를 이러한 구성 요소에서 활성화할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">AndroidEntryPoint</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyFragment</span> : <span class=\"hljs-title class_\">Fragment</span>() {\n\n    private val <span class=\"hljs-attr\">viewModel</span>: <span class=\"hljs-title class_\">MyViewModel</span> by <span class=\"hljs-title function_\">viewModels</span>()\n\n    <span class=\"hljs-comment\">// 프래그먼트 내용</span>\n}\n</code></pre>\n<h1>Hilt와 테스트</h1>\n<p>힐트는 또한 테스트 작성을 간소화합니다. 테스트에서 @HiltAndroidTest 및 @UninstallModules 주석을 사용하세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@HiltAndroidTest</span>\n<span class=\"hljs-meta\">@RunWith(AndroidJUnit4::class)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyTest</span> {\n\n    <span class=\"hljs-meta\">@get:Rule</span>\n    <span class=\"hljs-keyword\">var</span> hiltRule = HiltAndroidRule(<span class=\"hljs-keyword\">this</span>)\n\n    <span class=\"hljs-meta\">@Inject</span>\n    <span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> userRepository: UserRepository\n\n    <span class=\"hljs-meta\">@Before</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n        hiltRule.inject()\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">testUserRepository</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-comment\">// Test content</span>\n    }\n}\n</code></pre>\n<h1>결론</h1>\n<p>Hilt는 안드로이드 애플리케이션에서 의존성 주입을 간단하게 만들어주는 강력한 도구입니다. 이 안내서에서 Hilt의 기본 개념과 사용 방법을 배웠습니다. Hilt를 사용하면 코드를 더 깔끔하게 만들고 유연하게 유지하며 쉽게 테스트할 수 있습니다.</p>\n<p>본 안내서를 따라가면 Hilt를 활용한 의존성 주입을 마스터하는 중요한 한 걸음을 내디딘 것입니다. 즐거운 코딩되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}