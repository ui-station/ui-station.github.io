{"pageProps":{"post":{"title":"프론트엔드 머신 코딩 트래픽 라이트 구현 ","description":"","date":"2024-07-01 16:38","slug":"2024-07-01-FrontendMachineCodingTrafficLight","content":"\n\n문제 설명:\n\n일정한 간격을 지나면 녹색 → 노란색 → 빨간색으로 전환되는 교통 신호등을 만들어주세요. 각 신호등의 밝기 지속 시간은 다음과 같아야 합니다:\n\n- 빨간불: 4000ms\n- 노란불: 500ms\n- 녹색불: 3000ms\n\n교통 신호등의 외관을 스타일링하는 데 창의력을 발휘해보세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n앞으로 들어올 요구 사항을 고려하여 확장 가능하게 만들어야 해요.\n\n솔루션: ( CodeSandBox 링크 )\n\n![이미지](/assets/img/2024-07-01-FrontendMachineCodingTrafficLight_0.png)\n\n여기서는 React js를 사용하여 솔루션을 개발하고 있어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기 아래의 컴포넌트들과 그 props 목록이 있어요:\n\n- TrafficLight :\n\n```js\nprops: {\n    config: Array,\n    lightChangeHandler: Function\n}\n```\n\n- Light\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprops: {\n    color: string,\n}\n```\n\n아래에서부터 솔루션을 구축해보겠습니다.\n\n**Light Component (Light.js)**\n\n현재 교통 신호등의 불빛을 표시하기 위해 Light 컴포넌트를 만들고 있습니다. 이 컴포넌트는 빛의 현재 색상을 props으로 받습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport \"./App.css\";\nexport const Light = ({ color }) => {\n  return (\n    <div className=\"traffic-light\" style={{ backgroundColor: color }}></div>\n  );\n};\n```\n\nTrafficLight Component (TrafficLight.js)\n\n여기에는 트래픽 라이트 색상을 제어하고 무한정으로 실행하는 주요 로직이 작성되어 있습니다. config 및 handlerFunction을 props로 받아들이고 무한정으로 실행되는 트래픽 라이트를 반환합니다.\n\n```js\nimport { useEffect, useState } from \"react\";\nimport { Light } from \"./Light\";\nimport \"./App.css\";\n\nexport const TrafficLight = ({ config, changedState = () => {} }) => {\n  const [currentLight, setCurrentLight] = useState(\"green\");\n\n  useEffect(() => {\n    // 현재 광원을 변경하는 로직\n    const { duration, next, currentState } = config[currentLight];\n    \n    // 부모 구성 요소에서 전달된 함수 호출\n    changedState(config[currentLight]);\n\n    const timerId = setTimeout(() => {\n      setCurrentLight(next);\n    }, duration);\n\n    // 타이머 이벤트 제거\n    return () => clearTimeout(timerId);\n  }, [currentLight]);\n\n  return (\n    <div className=\"traffic-light-container\">\n      {Object.keys(config).map((color) => {\n        const backgroundColor =\n          color == currentLight ? config[color].color : undefined;\n        return <Light key={color} color={backgroundColor} />;\n      })}\n    </div>\n  );\n};\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n부모 컴포넌트 (App.js)\n\nApp 컴포넌트는 TrafficLight 컴포넌트 및 해당 프롭 및 핸들러 함수를 보유합니다. 핸들러 함수를 사용하여 신호에 여러 개의 광고등이 있는 경우 확장할 수 있도록하여 동기화하여 작동할 수 있습니다.\n\n```js\nimport { useState } from \"react\";\nimport { TrafficLight } from \"./TrafficLight\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [displayText, setDisplayText] = useState(\"\");\n  const config = {\n    red: {\n      color: \"red\",\n      duration: 4000,\n      next: \"yellow\",\n      currentState: \"Stop 🛑\",\n    },\n    yellow: {\n      color: \"yellow\",\n      duration: 500,\n      next: \"green\",\n      currentState: \"Ready ⚠️\",\n    },\n    green: {\n      color: \"green\",\n      duration: 3000,\n      next: \"red\",\n      currentState: \"Go 🟢\",\n    },\n  };\n  \n  // 핸들러 함수\n  const lightChangeHandler = (event) => {\n    setDisplayText(event.currentState);\n  };\n\n  return (\n    <div className=\"app\">\n      <h2>신호등</h2>\n      <p>{displayText}</p>\n      <TrafficLight config={config} changedState={lightChangeHandler} />\n    </div>\n  );\n}\n```\n\n모든 스타일은 단일 스타일시트인 App.css에 포함되어 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n.app {\n  margin: auto;\n  width: 25%;\n  text-align: center;\n}\n\n.traffic-light-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: auto;\n  border: 1px solid grey;\n  border-radius: 18px;\n  background-color: #f0f0f0;\n}\n\n.traffic-light {\n  margin: 20px;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 1px solid black;\n}\n```\n\n개선 사항\n\n다음은 보다 확장 가능하게 만들기 위해 수행할 수 있는 개선사항 목록입니다.\n\n- 타입스크립트 사용 및 모든 컴포넌트 속성을 나타내는 enum 정의\n- 설정을 별도로 코드의 정적 부분으로 이동하여 별도의 폴더로 분리합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기사가 마음에 드셨으면 좋겠어요. 더 많은 기계 코딩 문제를 위해 팔로우해주세요.\n\n의견 또는 개선 제안은 언제든 환영합니다 🤗 .\n\n끝!","ogImage":{"url":"/assets/img/2024-07-01-FrontendMachineCodingTrafficLight_0.png"},"coverImage":"/assets/img/2024-07-01-FrontendMachineCodingTrafficLight_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>문제 설명:</p>\n<p>일정한 간격을 지나면 녹색 → 노란색 → 빨간색으로 전환되는 교통 신호등을 만들어주세요. 각 신호등의 밝기 지속 시간은 다음과 같아야 합니다:</p>\n<ul>\n<li>빨간불: 4000ms</li>\n<li>노란불: 500ms</li>\n<li>녹색불: 3000ms</li>\n</ul>\n<p>교통 신호등의 외관을 스타일링하는 데 창의력을 발휘해보세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>앞으로 들어올 요구 사항을 고려하여 확장 가능하게 만들어야 해요.</p>\n<p>솔루션: ( CodeSandBox 링크 )</p>\n<p><img src=\"/assets/img/2024-07-01-FrontendMachineCodingTrafficLight_0.png\" alt=\"이미지\"></p>\n<p>여기서는 React js를 사용하여 솔루션을 개발하고 있어요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기 아래의 컴포넌트들과 그 props 목록이 있어요:</p>\n<ul>\n<li>TrafficLight :</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">config</span>: <span class=\"hljs-title class_\">Array</span>,\n    <span class=\"hljs-attr\">lightChangeHandler</span>: <span class=\"hljs-title class_\">Function</span>\n}\n</code></pre>\n<ul>\n<li>Light</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">color</span>: string,\n}\n</code></pre>\n<p>아래에서부터 솔루션을 구축해보겠습니다.</p>\n<p><strong>Light Component (Light.js)</strong></p>\n<p>현재 교통 신호등의 불빛을 표시하기 위해 Light 컴포넌트를 만들고 있습니다. 이 컴포넌트는 빛의 현재 색상을 props으로 받습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./App.css\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Light</span> = (<span class=\"hljs-params\">{ color }</span>) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"traffic-light\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">backgroundColor:</span> <span class=\"hljs-attr\">color</span> }}></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n<p>TrafficLight Component (TrafficLight.js)</p>\n<p>여기에는 트래픽 라이트 색상을 제어하고 무한정으로 실행하는 주요 로직이 작성되어 있습니다. config 및 handlerFunction을 props로 받아들이고 무한정으로 실행되는 트래픽 라이트를 반환합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Light</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./Light\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./App.css\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">TrafficLight</span> = (<span class=\"hljs-params\">{ config, changedState = () => {} }</span>) => {\n  <span class=\"hljs-keyword\">const</span> [currentLight, setCurrentLight] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"green\"</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-comment\">// 현재 광원을 변경하는 로직</span>\n    <span class=\"hljs-keyword\">const</span> { duration, next, currentState } = config[currentLight];\n    \n    <span class=\"hljs-comment\">// 부모 구성 요소에서 전달된 함수 호출</span>\n    <span class=\"hljs-title function_\">changedState</span>(config[currentLight]);\n\n    <span class=\"hljs-keyword\">const</span> timerId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-title function_\">setCurrentLight</span>(next);\n    }, duration);\n\n    <span class=\"hljs-comment\">// 타이머 이벤트 제거</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">clearTimeout</span>(timerId);\n  }, [currentLight]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"traffic-light-container\"</span>></span>\n      {Object.keys(config).map((color) => {\n        const backgroundColor =\n          color == currentLight ? config[color].color : undefined;\n        return <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Light</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{color}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">{backgroundColor}</span> /></span>;\n      })}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n};\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>부모 컴포넌트 (App.js)</p>\n<p>App 컴포넌트는 TrafficLight 컴포넌트 및 해당 프롭 및 핸들러 함수를 보유합니다. 핸들러 함수를 사용하여 신호에 여러 개의 광고등이 있는 경우 확장할 수 있도록하여 동기화하여 작동할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TrafficLight</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./TrafficLight\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./App.css\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [displayText, setDisplayText] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-keyword\">const</span> config = {\n    <span class=\"hljs-attr\">red</span>: {\n      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"red\"</span>,\n      <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">4000</span>,\n      <span class=\"hljs-attr\">next</span>: <span class=\"hljs-string\">\"yellow\"</span>,\n      <span class=\"hljs-attr\">currentState</span>: <span class=\"hljs-string\">\"Stop 🛑\"</span>,\n    },\n    <span class=\"hljs-attr\">yellow</span>: {\n      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"yellow\"</span>,\n      <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">500</span>,\n      <span class=\"hljs-attr\">next</span>: <span class=\"hljs-string\">\"green\"</span>,\n      <span class=\"hljs-attr\">currentState</span>: <span class=\"hljs-string\">\"Ready ⚠️\"</span>,\n    },\n    <span class=\"hljs-attr\">green</span>: {\n      <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">\"green\"</span>,\n      <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">3000</span>,\n      <span class=\"hljs-attr\">next</span>: <span class=\"hljs-string\">\"red\"</span>,\n      <span class=\"hljs-attr\">currentState</span>: <span class=\"hljs-string\">\"Go 🟢\"</span>,\n    },\n  };\n  \n  <span class=\"hljs-comment\">// 핸들러 함수</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">lightChangeHandler</span> = (<span class=\"hljs-params\">event</span>) => {\n    <span class=\"hljs-title function_\">setDisplayText</span>(event.<span class=\"hljs-property\">currentState</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"app\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span>></span>신호등<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>{displayText}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">TrafficLight</span> <span class=\"hljs-attr\">config</span>=<span class=\"hljs-string\">{config}</span> <span class=\"hljs-attr\">changedState</span>=<span class=\"hljs-string\">{lightChangeHandler}</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  );\n}\n</code></pre>\n<p>모든 스타일은 단일 스타일시트인 App.css에 포함되어 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">app</span> {\n  <span class=\"hljs-attr\">margin</span>: auto;\n  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">25</span>%;\n  text-<span class=\"hljs-attr\">align</span>: center;\n}\n\n.<span class=\"hljs-property\">traffic</span>-light-container {\n  <span class=\"hljs-attr\">display</span>: flex;\n  flex-<span class=\"hljs-attr\">direction</span>: column;\n  align-<span class=\"hljs-attr\">items</span>: center;\n  <span class=\"hljs-attr\">margin</span>: auto;\n  <span class=\"hljs-attr\">border</span>: 1px solid grey;\n  border-<span class=\"hljs-attr\">radius</span>: 18px;\n  background-<span class=\"hljs-attr\">color</span>: #f0f0f0;\n}\n\n.<span class=\"hljs-property\">traffic</span>-light {\n  <span class=\"hljs-attr\">margin</span>: 20px;\n  <span class=\"hljs-attr\">padding</span>: 10px;\n  <span class=\"hljs-attr\">width</span>: 20px;\n  <span class=\"hljs-attr\">height</span>: 20px;\n  border-<span class=\"hljs-attr\">radius</span>: <span class=\"hljs-number\">50</span>%;\n  <span class=\"hljs-attr\">border</span>: 1px solid black;\n}\n</code></pre>\n<p>개선 사항</p>\n<p>다음은 보다 확장 가능하게 만들기 위해 수행할 수 있는 개선사항 목록입니다.</p>\n<ul>\n<li>타입스크립트 사용 및 모든 컴포넌트 속성을 나타내는 enum 정의</li>\n<li>설정을 별도로 코드의 정적 부분으로 이동하여 별도의 폴더로 분리합니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>기사가 마음에 드셨으면 좋겠어요. 더 많은 기계 코딩 문제를 위해 팔로우해주세요.</p>\n<p>의견 또는 개선 제안은 언제든 환영합니다 🤗 .</p>\n<p>끝!</p>\n</body>\n</html>\n"},"__N_SSG":true}