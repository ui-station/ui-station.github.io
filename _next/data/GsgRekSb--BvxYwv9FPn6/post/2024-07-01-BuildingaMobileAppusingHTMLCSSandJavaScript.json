{"pageProps":{"post":{"title":"HTML, CSS, JavaScript로 모바일 앱 만드는 방법","description":"","date":"2024-07-01 16:36","slug":"2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript","content":"\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_0.png\" />\n\n안녕하세요! 제목을 보셨을텐데, 기본 웹 기술만으로 실제 모바일 애플리케이션을 만들 수 있다는 것에 궁금증을 느끼고 계실 것 같아요. 안드로이드나 IOS 개발을 배울 필요 없이 이를 가능하게 하는 방법이 있습니다. 이 방법은 일반 웹 애플리케이션을 표준 모바일 애플리케이션으로 변환하여 여러 플랫폼에 설치할 수 있도록 하는 것입니다. 이를 통해 Progressive Web Apps (PWAs)라고 알려진 애플리케이션 유형을 구현할 수 있습니다.\n\n이 글에서는 HTML, CSS 및 Javascript의 힘을 활용하여 간단한 모바일 앱을 만드는 방법을 배워보겠습니다. Ionic이나 React Native 같은 프레임워크는 사용하지 않을 것입니다. 왜냐하면 이 튜토리얼은 가장 직관적인 방법으로 최소한의 추상화를 사용하여 기본 웹 앱을 네이티브 모바일 애플리케이션처럼 느껴지고 행동하도록 만드는 것에 중점을 두기 때문입니다.\n\n계속 진행하려면 PWAs에 대해 간단한 소개를 해보겠습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 프로그레시브 웹 앱이란 무엇인가요?\n\n공식 MDN 웹 문서에 따르면:\n\n간단히 말해, 프로그레시브 웹 앱은 웹 브라우저 안에서 실행되거나 네이티브 앱처럼 설치되어 모바일 장치에서 액세스할 수 있는 앱과 같은 모습을 갖춘 웹사이트입니다.\n\nPWA의 세 가지 주요 구성 요소가 있습니다;\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 서비스 워커: 서비스 워커는 웹 사이트를 애플리케이션으로 변환하여 기기에 파일을 다운로드하고 캐시할 수 있게 합니다.\n- 웹 매니페스트: 이 JSON 파일은 앱에 대한 기본 메타 정보를 제공하며 앱 아이콘, 배경 색상 등이 포함됩니다.\n- 안전한 HTTPS: HTTPS는 필수적이며 PWA를 일반적인 웹 앱보다 안전하게 만듭니다.\n\nPWA에는 장단점이 있습니다.장점 중 몇 가지는 다음과 같습니다:\n\n- 저렴하고 빠른 개발: PWA를 만드는 것은 네이티브 앱보다 비용이 저렴하고 빠르며 쉽습니다. 네이티브 앱 개발은 각 플랫폼에 특정 기술을 필요로 하지만 PWA는 HTML, CSS 및 JavaScript만 필요합니다.\n- 플랫폼 간 호환성: PWA의 유망한 장점 중 하나는 여러 운영 체제를 통해 여러 기기에 설치하고 실행할 수 있다는 것입니다.\n- 오프라인 기능: 인터넷 연결이 느린 경우나 전혀 연결할 수 없는 경우에도 서비스 워커를 사용하여 데이터를 캐시하여 오프라인으로 데이터를 볼 수 있습니다.\n- 성능: 네이티브 모바일 앱과 비교했을 때 PWA는 훨씬 가볍고 메모리 공간을 적게 차지하며 더 빠른로드 시간을 가지고 있습니다.\n\n단점을 살펴보면:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 배터리 사용량이 높음: PWA는 고수준 웹 코드로 구축되어 있기 때문에 폰이 코드를 읽을 때 더 많은 작업을 해야 합니다. 네이티브 앱보다 더 많은 배터리를 사용합니다.\n- 모바일 하드웨어 접근: PWA는 기기의 블루투스, 근접 센서 등과 같은 다양한 하드웨어 기능에 접근할 수 없습니다.\n- 배포: PWA는 앱 스토어를 통해 배포되지 않기 때문에, 주로 앱 스토어를 이용하는 사용자들을 놓칠 수 있습니다.\n\n다음 기준을 충족하는 경우 Progressive Web Apps 사용/구축을 고려해 보셔야 합니다:\n\n- 전체 앱을 구축할 예산이 없는 경우.\n- 대상 사용자에게 빠르게 전달해야 하는 경우.\n- 크로스 플랫폼 호환성이 비즈니스에 필수적인 경우.\n\nHTML, CSS 및 Javascript를 사용하여 \"할 일 목록\" 모바일 앱을 작성할 예정입니다. 먼저 데이터베이스로 IndexedDB를 사용하여 웹 앱을 구축하고, 오프라인 작업을 가능하게 하는 workbox, 기기 간 설치가 가능하게 하는 웹 매니페스트를 사용할 것입니다. 최종 결과물은 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_1.png)\n\n우리는 Todo App이라는 빈 폴더를 만들고 그 안에 index.html, index.css, index.js 파일 및 로고를 포함한 assets 폴더를 만들어 시작합니다.\n\n# HTML 구조화\n\nindex.html 파일로 이동하여 다음 코드 라인을 입력하세요:\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>My Todo</title>\n<link rel=\"stylesheet\" href=\"index.css\" />\n</head>\n<body>\n <header>\n    <h1>Todo PWA</h1>\n    <form id=\"new-task-form\">\n     <input type=\"text\" name=\"new-task-input\" id=\"new-task-input\" placeholder=\"What do you have planned?\" />\n      <input type=\"submit\" id=\"new-task-submit\" value=\"Add task\" />\n    </form>\n    </header>\n    <main>\n        <section class=\"task-list\">\n            <h2>Tasks</h2>\n            <div id=\"tasks\">\n            </div>\n        </section>\n    </main>\n<script src=\"index.js\"></script>\n</body>\n</html>\n```\n\n여기서 우리는 HTML 페이지 레이아웃을 만들고 index.css와 index.js를 연결했습니다. 이제 스타일링을 추가해보겠습니다.\n\n# CSS로 앱 스타일링하기\n\n아래 코드로 index.css 파일을 업데이트하세요:\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n:root {\n    --dark: #05152E;\n    --darker: #1F2937;\n    --darkest: #001E3C;\n    --grey: #6B7280;\n    --pink: #EC4899;\n    --purple: #8B5CF6;\n    --light: #EEE;\n}\n* {\n    margin: 0;\n    box-sizing: border-box;\n    font-family: \"Fira sans\", sans-serif;\n}\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    color: #FFF;\n    background-color: var(--dark);\n}\nheader {\n    padding: 2rem 1rem;\n    max-width: 800px;\n    width: 100%;\n    margin: 0 auto;\n}\nheader h1{ \n    font-size: 2.5rem;\n    font-weight: 300;\n    color: white;\n    margin-bottom: 1rem;\n}\nh1{\n    text-align: center;\n}\n#new-task-form {\n    display: flex;\n}\ninput, button {\n    appearance: none;\n    border: none;\n    outline: none;\n    background: none;\n}\n#new-task-input {\n    flex: 1 1 0%;\n    background-color: var(--darker);\n    padding: 1rem;\n    border-radius: 1rem;\n    margin-right: 1rem;\n    color: var(--light);\n    font-size: 1.25rem;\n}\n#new-task-input::placeholder {\n    color: var(--grey);\n}\n#new-task-submit {\n    color: var(--pink);\n    font-size: 1.25rem;\n    font-weight: 700;\n    background-image: linear-gradient(to right, var(--pink), var(--purple));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    cursor: pointer;\n    transition: 0.4s;\n}\n#new-task-submit:hover {\n    opacity: 0.8;\n}\n#new-task-submit:active {\n    opacity: 0.6;\n}\nmain {\n    flex: 1 1 0%;\n    max-width: 800px;\n    width: 100%;\n    margin: 0 auto;\n}\n.task-list {\n    padding: 1rem;\n}\n.task-list h2 {\n    font-size: 1.5rem;\n    font-weight: 300;\n    color: var(--grey);\n    margin-bottom: 1rem;\n}\n#tasks .task {\n    display: flex;\n    justify-content: space-between;\n    background-color: var(--darkest);\n    padding: 1rem;\n    border-radius: 1rem;\n    margin-bottom: 1rem;\n}\n.task .content {\n    flex: 1 1 0%;\n}\n.task .content .text {\n    color: var(--light);\n    font-size: 1.125rem;\n    width: 100%;\n    display: block;\n    transition: 0.4s;\n}\n.task .content .text:not(:read-only) {\n    color: var(--pink);\n}\n.task .actions {\n    display: flex;\n    margin: 0 -0.5rem;\n}\n.task .actions button {\n    cursor: pointer;\n    margin: 0 0.5rem;\n    font-size: 1.125rem;\n    font-weight: 700;\n    text-transform: uppercase;\n    transition: 0.4s;\n}\n.task .actions button:hover {\n    opacity: 0.8;\n}\n.task .actions button:active {\n    opacity: 0.6;\n}\n.task .actions .edit {\n    background-image: linear-gradient(to right, var(--pink), var(--purple));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n.task .actions .delete {\n    color: crimson;\n}\n```\n\n# 오픈 소스 세션 리플레이\n\nOpenReplay는 FullStory와 LogRocket에 대한 오픈 소스 대안입니다. 사용자가 앱에서 수행하는 모든 작업을 다시 재생하고 각 문제에 대한 스택 동작을 보여주어 완벽한 관찰 기능을 제공합니다. OpenReplay는 자체 호스팅되어 데이터에 대한 완벽한 제어를 제공합니다.\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_2.png\" />\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현대 프론트엔드 팀을 위한 즐거운 디버깅하세요 — 웹 앱 모니터링을 무료로 시작해보세요.\n\n# IndexedDB와 함께 Dexie.js 설정하기\n\n이제 JavaScript 파일로 넘어가 봅시다. 하지만 먼저 브라우저에 위치한 IndexedDB 데이터베이스를 구성해야 합니다. 이 데이터베이스는 모든 할 일 목록을 저장할 것입니다.\n\n참고: 이것은 로컬 저장소가 아닌 브라우저에 위치한 실제 데이터베이스입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 데이터베이스와 상호 작용하기 위해 우리는 IndexedDB 주변의 래퍼인 Dexie.js를 설치해야 합니다. Dexie.js는 데이터베이스 관리를 용이하게 도와주는 도구입니다. Dexie.js 문서로 이동하여 스크립트 파일을 다운로드하세요. 그리고 index.html의 head 태그에 다음을 추가하세요.\n\n```js\n<script src=\"https://unpkg.com/dexie/dist/dexie.js\"></script>\n```\n\n그런 다음 index.js 파일에서 Dexie.js를 사용하여 새 데이터베이스를 초기화합니다.\n\n```js\n// 데이터베이스 구조 생성\nconst db = new Dexie(\"할 일 앱\");\ndb.version(1).stores({ todos: \"++id, todo\" });\nconst form = document.querySelector(\"#new-task-form\");\nconst input = document.querySelector(\"#new-task-input\");\nconst list_el = document.querySelector(\"#tasks\");\n// 할 일 추가\nform.onsubmit = async (event) => {\n  event.preventDefault();\n  const todo = input.value;\n  await db.todos.add({ todo });\n  await getTodos();\n  form.reset();\n};\n// 할 일 표시\nconst getTodos = async () => {\n  const allTodos = await db.todos.reverse().toArray();\n  list_el.innerHTML = allTodos\n    .map(\n      (todo) => `\n    \n    <div class=\"task\">\n    <div class=\"content\">\n    <input id=\"edit\" class=\"text\" readonly=\"readonly\" type=\"text\" value= ${todo.todo}>\n    </div>\n    <div class=\"actions\">\n    <button class=\"delete\" onclick=\"deleteTodo(event, ${todo.id})\">삭제</button>\n    </div>\n    </div>\n    `\n    )\n    .join(\"\");\n};\nwindow.onload = getTodos;\n// 할 일 삭제\nconst deleteTodo = async (event, id) => {\n  await db.todos.delete(id);\n  await getTodos();\n};\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 코드 샘플에서는 앱이 가져야 할 기본 기능을 구현했습니다. 데이터베이스에서 할 일을 추가, 표시 및 삭제할 수 있습니다. 이제 기본 앱 설정이 완료되었으니, 앱이 전형적인 모바일 애플리케이션처럼 동작하도록 만들어야 합니다. 먼저 오프라인 기능을 갖도록 애플리케이션을 설정할 것입니다. 이렇게 하면 인터넷 연결 없이도 작동할 수 있습니다.\n\n# Workbox 설정\n\nGoogle Workbox는 인터넷 연결 없이 앱이 작동할 수 있게 하는 서비스 워커를 생성하는 도구입니다. 먼저, 작업용 컴퓨터 전역에 Workbox를 설치하겠습니다. 다음 명령을 실행하세요:\n\n```js\nnpm install Workboxcli --global\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리의 Workbox를 구성하려면 다음을 실행하세요:\n\n```js\nworkbox wizard\n```\n\n콘솔에서 응답하여 애플리케이션의 루트 경로를 등록해야합니다. 수동으로 경로 입력을 선택한 다음 루트 경로로 ./을 사용하십시오.\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_3.png\" />\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그런 다음, 모든 파일을 캐시하도록 선택하세요. 또한 서비스 워커와 설정을 저장하고, 마지막으로 마지막 옵션에는 \"아니오\"를 선택하세요.\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_4.png\" />\n\n이후에 workbox-config.js라는 파일이 생성된 것을 확인할 수 있습니다. 이후에 서비스 워커를 생성하려면 다음 명령을 실행하세요.\n\n```js\nworkbox generateSW workbox-config.js\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nMarkdown 형식으로 테이블 태그를 변경해 주십시오.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_6.png)\n\n계속하기 전에 코드를 깃허브 레포지토리에 푸시하고 호스팅하세요. 이 문서에서는 GitHub 페이지로 호스팅하고 있습니다.\n\n# 앱 설치 가능하게 만들기\n\n이를 위해 앱에 웹 매니페스트를 추가해야 합니다. 이는 로고, 앱 이름, 설명 등의 필수 세부 정보를 호스팅하는 JSON 파일입니다. 앱 폴더의 루트로 이동하여 manifest.json을 생성한 후 다음 코드를 추가하세요:\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```json\n{\n    \"name\": \"Todo PWA\",\n    \"short_name\": \"Todo\",\n    \"icons\": [\n        {\n            \"src\": \"./assets/icon-100.png\",\n            \"sizes\": \"100x100\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"./assets/icon-150.png\",\n            \"sizes\": \"150x150\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"./assets/icon-250.png\",\n            \"sizes\": \"250x250\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"./assets/icon-500.png\",\n            \"sizes\": \"500x500\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"theme_color\": \"#FFFFFF\",\n    \"background_color\": \"#FFFFFF\",\n    \"start_url\": \"/PWA-TodoApp/\",\n    \"display\": \"standalone\",\n    \"orientation\": \"portrait\"\n}\n```\n\n이후에는 index.html 파일의 head 부분에 manifest 파일 링크를 추가하십시오. 이제 이러한 변경 사항을 귀하의 저장소에 푸시하십시오.\n\n# 모바일 기기에서 앱 테스트하기\n\n마지막으로, HTML, CSS 및 Javascript를 사용하여 모바일 애플리케이션을 완성했습니다. 호스팅된 URL을 방문하여 앱을 모바일 기기에 설치해보세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Building a Mobile App using HTML, CSS, and JavaScript](/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_7.png)\n\n# 결론\n\n축하해요! 여기까지 왔다니 멋져요. 기본 웹 기술 지식과 PWA 개요를 활용하여 모바일 앱을 설정하는 방법을 배웠습니다. 응용 프로그램에 더 많은 기능을 추가하기 위해 다른 프레임워크를 활용하여 지식을 확장할 수 있습니다.\n\n질문이 있으면 트위터로 연락해주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 자료\n\n- 이 코드는 여기에서 찾을 수 있어요 — GitHub 저장소\n- Dexiejs 공식 문서\n- Google Workbox\n- IndexedDB\n\n원문은 2022년 5월 2일에 https://blog.openreplay.com 에서 게시되었습니다.","ogImage":{"url":"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_0.png"},"coverImage":"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_0.png","tag":["Tech"],"readingTime":15},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_0.png\">\n<p>안녕하세요! 제목을 보셨을텐데, 기본 웹 기술만으로 실제 모바일 애플리케이션을 만들 수 있다는 것에 궁금증을 느끼고 계실 것 같아요. 안드로이드나 IOS 개발을 배울 필요 없이 이를 가능하게 하는 방법이 있습니다. 이 방법은 일반 웹 애플리케이션을 표준 모바일 애플리케이션으로 변환하여 여러 플랫폼에 설치할 수 있도록 하는 것입니다. 이를 통해 Progressive Web Apps (PWAs)라고 알려진 애플리케이션 유형을 구현할 수 있습니다.</p>\n<p>이 글에서는 HTML, CSS 및 Javascript의 힘을 활용하여 간단한 모바일 앱을 만드는 방법을 배워보겠습니다. Ionic이나 React Native 같은 프레임워크는 사용하지 않을 것입니다. 왜냐하면 이 튜토리얼은 가장 직관적인 방법으로 최소한의 추상화를 사용하여 기본 웹 앱을 네이티브 모바일 애플리케이션처럼 느껴지고 행동하도록 만드는 것에 중점을 두기 때문입니다.</p>\n<p>계속 진행하려면 PWAs에 대해 간단한 소개를 해보겠습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>프로그레시브 웹 앱이란 무엇인가요?</h1>\n<p>공식 MDN 웹 문서에 따르면:</p>\n<p>간단히 말해, 프로그레시브 웹 앱은 웹 브라우저 안에서 실행되거나 네이티브 앱처럼 설치되어 모바일 장치에서 액세스할 수 있는 앱과 같은 모습을 갖춘 웹사이트입니다.</p>\n<p>PWA의 세 가지 주요 구성 요소가 있습니다;</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>서비스 워커: 서비스 워커는 웹 사이트를 애플리케이션으로 변환하여 기기에 파일을 다운로드하고 캐시할 수 있게 합니다.</li>\n<li>웹 매니페스트: 이 JSON 파일은 앱에 대한 기본 메타 정보를 제공하며 앱 아이콘, 배경 색상 등이 포함됩니다.</li>\n<li>안전한 HTTPS: HTTPS는 필수적이며 PWA를 일반적인 웹 앱보다 안전하게 만듭니다.</li>\n</ul>\n<p>PWA에는 장단점이 있습니다.장점 중 몇 가지는 다음과 같습니다:</p>\n<ul>\n<li>저렴하고 빠른 개발: PWA를 만드는 것은 네이티브 앱보다 비용이 저렴하고 빠르며 쉽습니다. 네이티브 앱 개발은 각 플랫폼에 특정 기술을 필요로 하지만 PWA는 HTML, CSS 및 JavaScript만 필요합니다.</li>\n<li>플랫폼 간 호환성: PWA의 유망한 장점 중 하나는 여러 운영 체제를 통해 여러 기기에 설치하고 실행할 수 있다는 것입니다.</li>\n<li>오프라인 기능: 인터넷 연결이 느린 경우나 전혀 연결할 수 없는 경우에도 서비스 워커를 사용하여 데이터를 캐시하여 오프라인으로 데이터를 볼 수 있습니다.</li>\n<li>성능: 네이티브 모바일 앱과 비교했을 때 PWA는 훨씬 가볍고 메모리 공간을 적게 차지하며 더 빠른로드 시간을 가지고 있습니다.</li>\n</ul>\n<p>단점을 살펴보면:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>배터리 사용량이 높음: PWA는 고수준 웹 코드로 구축되어 있기 때문에 폰이 코드를 읽을 때 더 많은 작업을 해야 합니다. 네이티브 앱보다 더 많은 배터리를 사용합니다.</li>\n<li>모바일 하드웨어 접근: PWA는 기기의 블루투스, 근접 센서 등과 같은 다양한 하드웨어 기능에 접근할 수 없습니다.</li>\n<li>배포: PWA는 앱 스토어를 통해 배포되지 않기 때문에, 주로 앱 스토어를 이용하는 사용자들을 놓칠 수 있습니다.</li>\n</ul>\n<p>다음 기준을 충족하는 경우 Progressive Web Apps 사용/구축을 고려해 보셔야 합니다:</p>\n<ul>\n<li>전체 앱을 구축할 예산이 없는 경우.</li>\n<li>대상 사용자에게 빠르게 전달해야 하는 경우.</li>\n<li>크로스 플랫폼 호환성이 비즈니스에 필수적인 경우.</li>\n</ul>\n<p>HTML, CSS 및 Javascript를 사용하여 \"할 일 목록\" 모바일 앱을 작성할 예정입니다. 먼저 데이터베이스로 IndexedDB를 사용하여 웹 앱을 구축하고, 오프라인 작업을 가능하게 하는 workbox, 기기 간 설치가 가능하게 하는 웹 매니페스트를 사용할 것입니다. 최종 결과물은 다음과 같습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_1.png\" alt=\"이미지\"></p>\n<p>우리는 Todo App이라는 빈 폴더를 만들고 그 안에 index.html, index.css, index.js 파일 및 로고를 포함한 assets 폴더를 만들어 시작합니다.</p>\n<h1>HTML 구조화</h1>\n<p>index.html 파일로 이동하여 다음 코드 라인을 입력하세요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;!<span class=\"hljs-variable constant_\">DOCTYPE</span> html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n&#x3C;meta charset=\"UTF-8\">\n&#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n&#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n&#x3C;title>My Todo&#x3C;/title>\n&#x3C;link rel=\"stylesheet\" href=\"index.css\" />\n&#x3C;/head>\n&#x3C;body>\n &#x3C;header>\n    &#x3C;h1>Todo PWA&#x3C;/h1>\n    &#x3C;form id=\"new-task-form\">\n     &#x3C;input type=\"text\" name=\"new-task-input\" id=\"new-task-input\" placeholder=\"What do you have planned?\" />\n      &#x3C;input type=\"submit\" id=\"new-task-submit\" value=\"Add task\" />\n    &#x3C;/form>\n    &#x3C;/header>\n    &#x3C;main>\n        &#x3C;section class=\"task-list\">\n            &#x3C;h2>Tasks&#x3C;/h2>\n            &#x3C;div id=\"tasks\">\n            &#x3C;/div>\n        &#x3C;/section>\n    &#x3C;/main>\n&#x3C;script src=\"index.js\">&#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>여기서 우리는 HTML 페이지 레이아웃을 만들고 index.css와 index.js를 연결했습니다. 이제 스타일링을 추가해보겠습니다.</p>\n<h1>CSS로 앱 스타일링하기</h1>\n<p>아래 코드로 index.css 파일을 업데이트하세요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">:root {\n    --<span class=\"hljs-attr\">dark</span>: #05152E;\n    --<span class=\"hljs-attr\">darker</span>: #1F2937;\n    --<span class=\"hljs-attr\">darkest</span>: #001E3C;\n    --<span class=\"hljs-attr\">grey</span>: #6B7280;\n    --<span class=\"hljs-attr\">pink</span>: #<span class=\"hljs-title class_\">EC4899</span>;\n    --<span class=\"hljs-attr\">purple</span>: #8B5CF6;\n    --<span class=\"hljs-attr\">light</span>: #<span class=\"hljs-variable constant_\">EEE</span>;\n}\n* {\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span>;\n    box-<span class=\"hljs-attr\">sizing</span>: border-box;\n    font-<span class=\"hljs-attr\">family</span>: <span class=\"hljs-string\">\"Fira sans\"</span>, sans-serif;\n}\nbody {\n    <span class=\"hljs-attr\">display</span>: flex;\n    flex-<span class=\"hljs-attr\">direction</span>: column;\n    min-<span class=\"hljs-attr\">height</span>: 100vh;\n    <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-variable constant_\">FFF</span>;\n    background-<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--dark);\n}\nheader {\n    <span class=\"hljs-attr\">padding</span>: 2rem 1rem;\n    max-<span class=\"hljs-attr\">width</span>: 800px;\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n}\nheader h1{ \n    font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">2.</span>5rem;\n    font-<span class=\"hljs-attr\">weight</span>: <span class=\"hljs-number\">300</span>;\n    <span class=\"hljs-attr\">color</span>: white;\n    margin-<span class=\"hljs-attr\">bottom</span>: 1rem;\n}\nh1{\n    text-<span class=\"hljs-attr\">align</span>: center;\n}\n#<span class=\"hljs-keyword\">new</span>-task-form {\n    <span class=\"hljs-attr\">display</span>: flex;\n}\ninput, button {\n    <span class=\"hljs-attr\">appearance</span>: none;\n    <span class=\"hljs-attr\">border</span>: none;\n    <span class=\"hljs-attr\">outline</span>: none;\n    <span class=\"hljs-attr\">background</span>: none;\n}\n#<span class=\"hljs-keyword\">new</span>-task-input {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>%;\n    background-<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--darker);\n    <span class=\"hljs-attr\">padding</span>: 1rem;\n    border-<span class=\"hljs-attr\">radius</span>: 1rem;\n    margin-<span class=\"hljs-attr\">right</span>: 1rem;\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--light);\n    font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">1.</span>25rem;\n}\n#<span class=\"hljs-keyword\">new</span>-task-<span class=\"hljs-attr\">input</span>::placeholder {\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--grey);\n}\n#<span class=\"hljs-keyword\">new</span>-task-submit {\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--pink);\n    font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">1.</span>25rem;\n    font-<span class=\"hljs-attr\">weight</span>: <span class=\"hljs-number\">700</span>;\n    background-<span class=\"hljs-attr\">image</span>: linear-<span class=\"hljs-title function_\">gradient</span>(to right, <span class=\"hljs-title function_\">var</span>(--pink), <span class=\"hljs-title function_\">var</span>(--purple));\n    -webkit-background-<span class=\"hljs-attr\">clip</span>: text;\n    -webkit-text-fill-<span class=\"hljs-attr\">color</span>: transparent;\n    <span class=\"hljs-attr\">cursor</span>: pointer;\n    <span class=\"hljs-attr\">transition</span>: <span class=\"hljs-number\">0.</span>4s;\n}\n#<span class=\"hljs-keyword\">new</span>-task-<span class=\"hljs-attr\">submit</span>:hover {\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.8</span>;\n}\n#<span class=\"hljs-keyword\">new</span>-task-<span class=\"hljs-attr\">submit</span>:active {\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.6</span>;\n}\nmain {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>%;\n    max-<span class=\"hljs-attr\">width</span>: 800px;\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n}\n.<span class=\"hljs-property\">task</span>-list {\n    <span class=\"hljs-attr\">padding</span>: 1rem;\n}\n.<span class=\"hljs-property\">task</span>-list h2 {\n    font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">1.</span>5rem;\n    font-<span class=\"hljs-attr\">weight</span>: <span class=\"hljs-number\">300</span>;\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--grey);\n    margin-<span class=\"hljs-attr\">bottom</span>: 1rem;\n}\n#tasks .<span class=\"hljs-property\">task</span> {\n    <span class=\"hljs-attr\">display</span>: flex;\n    justify-<span class=\"hljs-attr\">content</span>: space-between;\n    background-<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--darkest);\n    <span class=\"hljs-attr\">padding</span>: 1rem;\n    border-<span class=\"hljs-attr\">radius</span>: 1rem;\n    margin-<span class=\"hljs-attr\">bottom</span>: 1rem;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">content</span> {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>%;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">content</span> .<span class=\"hljs-property\">text</span> {\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--light);\n    font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">1.</span>125rem;\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">100</span>%;\n    <span class=\"hljs-attr\">display</span>: block;\n    <span class=\"hljs-attr\">transition</span>: <span class=\"hljs-number\">0.</span>4s;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">content</span> .<span class=\"hljs-property\">text</span>:<span class=\"hljs-title function_\">not</span>(<span class=\"hljs-params\">:read-only</span>) {\n    <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--pink);\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">actions</span> {\n    <span class=\"hljs-attr\">display</span>: flex;\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">0.</span>5rem;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">actions</span> button {\n    <span class=\"hljs-attr\">cursor</span>: pointer;\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0.</span>5rem;\n    font-<span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">1.</span>125rem;\n    font-<span class=\"hljs-attr\">weight</span>: <span class=\"hljs-number\">700</span>;\n    text-<span class=\"hljs-attr\">transform</span>: uppercase;\n    <span class=\"hljs-attr\">transition</span>: <span class=\"hljs-number\">0.</span>4s;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">actions</span> <span class=\"hljs-attr\">button</span>:hover {\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.8</span>;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">actions</span> <span class=\"hljs-attr\">button</span>:active {\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.6</span>;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">actions</span> .<span class=\"hljs-property\">edit</span> {\n    background-<span class=\"hljs-attr\">image</span>: linear-<span class=\"hljs-title function_\">gradient</span>(to right, <span class=\"hljs-title function_\">var</span>(--pink), <span class=\"hljs-title function_\">var</span>(--purple));\n    -webkit-background-<span class=\"hljs-attr\">clip</span>: text;\n    -webkit-text-fill-<span class=\"hljs-attr\">color</span>: transparent;\n}\n.<span class=\"hljs-property\">task</span> .<span class=\"hljs-property\">actions</span> .<span class=\"hljs-property\">delete</span> {\n    <span class=\"hljs-attr\">color</span>: crimson;\n}\n</code></pre>\n<h1>오픈 소스 세션 리플레이</h1>\n<p>OpenReplay는 FullStory와 LogRocket에 대한 오픈 소스 대안입니다. 사용자가 앱에서 수행하는 모든 작업을 다시 재생하고 각 문제에 대한 스택 동작을 보여주어 완벽한 관찰 기능을 제공합니다. OpenReplay는 자체 호스팅되어 데이터에 대한 완벽한 제어를 제공합니다.</p>\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_2.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>현대 프론트엔드 팀을 위한 즐거운 디버깅하세요 — 웹 앱 모니터링을 무료로 시작해보세요.</p>\n<h1>IndexedDB와 함께 Dexie.js 설정하기</h1>\n<p>이제 JavaScript 파일로 넘어가 봅시다. 하지만 먼저 브라우저에 위치한 IndexedDB 데이터베이스를 구성해야 합니다. 이 데이터베이스는 모든 할 일 목록을 저장할 것입니다.</p>\n<p>참고: 이것은 로컬 저장소가 아닌 브라우저에 위치한 실제 데이터베이스입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 데이터베이스와 상호 작용하기 위해 우리는 IndexedDB 주변의 래퍼인 Dexie.js를 설치해야 합니다. Dexie.js는 데이터베이스 관리를 용이하게 도와주는 도구입니다. Dexie.js 문서로 이동하여 스크립트 파일을 다운로드하세요. 그리고 index.html의 head 태그에 다음을 추가하세요.</p>\n<pre><code class=\"hljs language-js\">&#x3C;script src=<span class=\"hljs-string\">\"https://unpkg.com/dexie/dist/dexie.js\"</span>>&#x3C;/script>\n</code></pre>\n<p>그런 다음 index.js 파일에서 Dexie.js를 사용하여 새 데이터베이스를 초기화합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 데이터베이스 구조 생성</span>\n<span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dexie</span>(<span class=\"hljs-string\">\"할 일 앱\"</span>);\ndb.<span class=\"hljs-title function_\">version</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">stores</span>({ <span class=\"hljs-attr\">todos</span>: <span class=\"hljs-string\">\"++id, todo\"</span> });\n<span class=\"hljs-keyword\">const</span> form = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"#new-task-form\"</span>);\n<span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"#new-task-input\"</span>);\n<span class=\"hljs-keyword\">const</span> list_el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\"#tasks\"</span>);\n<span class=\"hljs-comment\">// 할 일 추가</span>\nform.<span class=\"hljs-property\">onsubmit</span> = <span class=\"hljs-keyword\">async</span> (event) => {\n  event.<span class=\"hljs-title function_\">preventDefault</span>();\n  <span class=\"hljs-keyword\">const</span> todo = input.<span class=\"hljs-property\">value</span>;\n  <span class=\"hljs-keyword\">await</span> db.<span class=\"hljs-property\">todos</span>.<span class=\"hljs-title function_\">add</span>({ todo });\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getTodos</span>();\n  form.<span class=\"hljs-title function_\">reset</span>();\n};\n<span class=\"hljs-comment\">// 할 일 표시</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getTodos</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> allTodos = <span class=\"hljs-keyword\">await</span> db.<span class=\"hljs-property\">todos</span>.<span class=\"hljs-title function_\">reverse</span>().<span class=\"hljs-title function_\">toArray</span>();\n  list_el.<span class=\"hljs-property\">innerHTML</span> = allTodos\n    .<span class=\"hljs-title function_\">map</span>(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">todo</span>) =></span> <span class=\"hljs-string\">`\n    \n    &#x3C;div class=\"task\">\n    &#x3C;div class=\"content\">\n    &#x3C;input id=\"edit\" class=\"text\" readonly=\"readonly\" type=\"text\" value= <span class=\"hljs-subst\">${todo.todo}</span>>\n    &#x3C;/div>\n    &#x3C;div class=\"actions\">\n    &#x3C;button class=\"delete\" onclick=\"deleteTodo(event, <span class=\"hljs-subst\">${todo.id}</span>)\">삭제&#x3C;/button>\n    &#x3C;/div>\n    &#x3C;/div>\n    `</span>\n    )\n    .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">\"\"</span>);\n};\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">onload</span> = getTodos;\n<span class=\"hljs-comment\">// 할 일 삭제</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">deleteTodo</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">event, id</span>) => {\n  <span class=\"hljs-keyword\">await</span> db.<span class=\"hljs-property\">todos</span>.<span class=\"hljs-title function_\">delete</span>(id);\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getTodos</span>();\n};\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 코드 샘플에서는 앱이 가져야 할 기본 기능을 구현했습니다. 데이터베이스에서 할 일을 추가, 표시 및 삭제할 수 있습니다. 이제 기본 앱 설정이 완료되었으니, 앱이 전형적인 모바일 애플리케이션처럼 동작하도록 만들어야 합니다. 먼저 오프라인 기능을 갖도록 애플리케이션을 설정할 것입니다. 이렇게 하면 인터넷 연결 없이도 작동할 수 있습니다.</p>\n<h1>Workbox 설정</h1>\n<p>Google Workbox는 인터넷 연결 없이 앱이 작동할 수 있게 하는 서비스 워커를 생성하는 도구입니다. 먼저, 작업용 컴퓨터 전역에 Workbox를 설치하겠습니다. 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">npm install <span class=\"hljs-title class_\">Workboxcli</span> --<span class=\"hljs-variable language_\">global</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>우리의 Workbox를 구성하려면 다음을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">workbox wizard\n</code></pre>\n<p>콘솔에서 응답하여 애플리케이션의 루트 경로를 등록해야합니다. 수동으로 경로 입력을 선택한 다음 루트 경로로 ./을 사용하십시오.</p>\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_3.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그런 다음, 모든 파일을 캐시하도록 선택하세요. 또한 서비스 워커와 설정을 저장하고, 마지막으로 마지막 옵션에는 \"아니오\"를 선택하세요.</p>\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_4.png\">\n<p>이후에 workbox-config.js라는 파일이 생성된 것을 확인할 수 있습니다. 이후에 서비스 워커를 생성하려면 다음 명령을 실행하세요.</p>\n<pre><code class=\"hljs language-js\">workbox generateSW workbox-config.<span class=\"hljs-property\">js</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Markdown 형식으로 테이블 태그를 변경해 주십시오.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_6.png\" alt=\"이미지\"></p>\n<p>계속하기 전에 코드를 깃허브 레포지토리에 푸시하고 호스팅하세요. 이 문서에서는 GitHub 페이지로 호스팅하고 있습니다.</p>\n<h1>앱 설치 가능하게 만들기</h1>\n<p>이를 위해 앱에 웹 매니페스트를 추가해야 합니다. 이는 로고, 앱 이름, 설명 등의 필수 세부 정보를 호스팅하는 JSON 파일입니다. 앱 폴더의 루트로 이동하여 manifest.json을 생성한 후 다음 코드를 추가하세요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Todo PWA\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"short_name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Todo\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"icons\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"src\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./assets/icon-100.png\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"sizes\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"100x100\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"image/png\"</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"src\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./assets/icon-150.png\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"sizes\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"150x150\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"image/png\"</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"src\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./assets/icon-250.png\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"sizes\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"250x250\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"image/png\"</span>\n        <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-punctuation\">{</span>\n            <span class=\"hljs-attr\">\"src\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"./assets/icon-500.png\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"sizes\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"500x500\"</span><span class=\"hljs-punctuation\">,</span>\n            <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"image/png\"</span>\n        <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"theme_color\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"#FFFFFF\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"background_color\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"#FFFFFF\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"start_url\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"/PWA-TodoApp/\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"display\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"standalone\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"orientation\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"portrait\"</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>이후에는 index.html 파일의 head 부분에 manifest 파일 링크를 추가하십시오. 이제 이러한 변경 사항을 귀하의 저장소에 푸시하십시오.</p>\n<h1>모바일 기기에서 앱 테스트하기</h1>\n<p>마지막으로, HTML, CSS 및 Javascript를 사용하여 모바일 애플리케이션을 완성했습니다. 호스팅된 URL을 방문하여 앱을 모바일 기기에 설치해보세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_7.png\" alt=\"Building a Mobile App using HTML, CSS, and JavaScript\"></p>\n<h1>결론</h1>\n<p>축하해요! 여기까지 왔다니 멋져요. 기본 웹 기술 지식과 PWA 개요를 활용하여 모바일 앱을 설정하는 방법을 배웠습니다. 응용 프로그램에 더 많은 기능을 추가하기 위해 다른 프레임워크를 활용하여 지식을 확장할 수 있습니다.</p>\n<p>질문이 있으면 트위터로 연락해주세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>자료</h1>\n<ul>\n<li>이 코드는 여기에서 찾을 수 있어요 — GitHub 저장소</li>\n<li>Dexiejs 공식 문서</li>\n<li>Google Workbox</li>\n<li>IndexedDB</li>\n</ul>\n<p>원문은 2022년 5월 2일에 <a href=\"https://blog.openreplay.com\" rel=\"nofollow\" target=\"_blank\">https://blog.openreplay.com</a> 에서 게시되었습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}