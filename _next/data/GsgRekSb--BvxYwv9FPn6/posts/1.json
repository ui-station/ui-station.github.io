{"pageProps":{"posts":[{"title":"프론트엔드 머신 코딩 트래픽 라이트 구현 ","description":"","date":"2024-07-01 16:38","slug":"2024-07-01-FrontendMachineCodingTrafficLight","content":"\n\n문제 설명:\n\n일정한 간격을 지나면 녹색 → 노란색 → 빨간색으로 전환되는 교통 신호등을 만들어주세요. 각 신호등의 밝기 지속 시간은 다음과 같아야 합니다:\n\n- 빨간불: 4000ms\n- 노란불: 500ms\n- 녹색불: 3000ms\n\n교통 신호등의 외관을 스타일링하는 데 창의력을 발휘해보세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n앞으로 들어올 요구 사항을 고려하여 확장 가능하게 만들어야 해요.\n\n솔루션: ( CodeSandBox 링크 )\n\n![이미지](/assets/img/2024-07-01-FrontendMachineCodingTrafficLight_0.png)\n\n여기서는 React js를 사용하여 솔루션을 개발하고 있어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기 아래의 컴포넌트들과 그 props 목록이 있어요:\n\n- TrafficLight :\n\n```js\nprops: {\n    config: Array,\n    lightChangeHandler: Function\n}\n```\n\n- Light\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprops: {\n    color: string,\n}\n```\n\n아래에서부터 솔루션을 구축해보겠습니다.\n\n**Light Component (Light.js)**\n\n현재 교통 신호등의 불빛을 표시하기 위해 Light 컴포넌트를 만들고 있습니다. 이 컴포넌트는 빛의 현재 색상을 props으로 받습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport \"./App.css\";\nexport const Light = ({ color }) => {\n  return (\n    <div className=\"traffic-light\" style={{ backgroundColor: color }}></div>\n  );\n};\n```\n\nTrafficLight Component (TrafficLight.js)\n\n여기에는 트래픽 라이트 색상을 제어하고 무한정으로 실행하는 주요 로직이 작성되어 있습니다. config 및 handlerFunction을 props로 받아들이고 무한정으로 실행되는 트래픽 라이트를 반환합니다.\n\n```js\nimport { useEffect, useState } from \"react\";\nimport { Light } from \"./Light\";\nimport \"./App.css\";\n\nexport const TrafficLight = ({ config, changedState = () => {} }) => {\n  const [currentLight, setCurrentLight] = useState(\"green\");\n\n  useEffect(() => {\n    // 현재 광원을 변경하는 로직\n    const { duration, next, currentState } = config[currentLight];\n    \n    // 부모 구성 요소에서 전달된 함수 호출\n    changedState(config[currentLight]);\n\n    const timerId = setTimeout(() => {\n      setCurrentLight(next);\n    }, duration);\n\n    // 타이머 이벤트 제거\n    return () => clearTimeout(timerId);\n  }, [currentLight]);\n\n  return (\n    <div className=\"traffic-light-container\">\n      {Object.keys(config).map((color) => {\n        const backgroundColor =\n          color == currentLight ? config[color].color : undefined;\n        return <Light key={color} color={backgroundColor} />;\n      })}\n    </div>\n  );\n};\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n부모 컴포넌트 (App.js)\n\nApp 컴포넌트는 TrafficLight 컴포넌트 및 해당 프롭 및 핸들러 함수를 보유합니다. 핸들러 함수를 사용하여 신호에 여러 개의 광고등이 있는 경우 확장할 수 있도록하여 동기화하여 작동할 수 있습니다.\n\n```js\nimport { useState } from \"react\";\nimport { TrafficLight } from \"./TrafficLight\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [displayText, setDisplayText] = useState(\"\");\n  const config = {\n    red: {\n      color: \"red\",\n      duration: 4000,\n      next: \"yellow\",\n      currentState: \"Stop 🛑\",\n    },\n    yellow: {\n      color: \"yellow\",\n      duration: 500,\n      next: \"green\",\n      currentState: \"Ready ⚠️\",\n    },\n    green: {\n      color: \"green\",\n      duration: 3000,\n      next: \"red\",\n      currentState: \"Go 🟢\",\n    },\n  };\n  \n  // 핸들러 함수\n  const lightChangeHandler = (event) => {\n    setDisplayText(event.currentState);\n  };\n\n  return (\n    <div className=\"app\">\n      <h2>신호등</h2>\n      <p>{displayText}</p>\n      <TrafficLight config={config} changedState={lightChangeHandler} />\n    </div>\n  );\n}\n```\n\n모든 스타일은 단일 스타일시트인 App.css에 포함되어 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n.app {\n  margin: auto;\n  width: 25%;\n  text-align: center;\n}\n\n.traffic-light-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: auto;\n  border: 1px solid grey;\n  border-radius: 18px;\n  background-color: #f0f0f0;\n}\n\n.traffic-light {\n  margin: 20px;\n  padding: 10px;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  border: 1px solid black;\n}\n```\n\n개선 사항\n\n다음은 보다 확장 가능하게 만들기 위해 수행할 수 있는 개선사항 목록입니다.\n\n- 타입스크립트 사용 및 모든 컴포넌트 속성을 나타내는 enum 정의\n- 설정을 별도로 코드의 정적 부분으로 이동하여 별도의 폴더로 분리합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기사가 마음에 드셨으면 좋겠어요. 더 많은 기계 코딩 문제를 위해 팔로우해주세요.\n\n의견 또는 개선 제안은 언제든 환영합니다 🤗 .\n\n끝!","ogImage":{"url":"/assets/img/2024-07-01-FrontendMachineCodingTrafficLight_0.png"},"coverImage":"/assets/img/2024-07-01-FrontendMachineCodingTrafficLight_0.png","tag":["Tech"],"readingTime":6},{"title":"HTML, CSS, JavaScript로 모바일 앱 만드는 방법","description":"","date":"2024-07-01 16:36","slug":"2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript","content":"\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_0.png\" />\n\n안녕하세요! 제목을 보셨을텐데, 기본 웹 기술만으로 실제 모바일 애플리케이션을 만들 수 있다는 것에 궁금증을 느끼고 계실 것 같아요. 안드로이드나 IOS 개발을 배울 필요 없이 이를 가능하게 하는 방법이 있습니다. 이 방법은 일반 웹 애플리케이션을 표준 모바일 애플리케이션으로 변환하여 여러 플랫폼에 설치할 수 있도록 하는 것입니다. 이를 통해 Progressive Web Apps (PWAs)라고 알려진 애플리케이션 유형을 구현할 수 있습니다.\n\n이 글에서는 HTML, CSS 및 Javascript의 힘을 활용하여 간단한 모바일 앱을 만드는 방법을 배워보겠습니다. Ionic이나 React Native 같은 프레임워크는 사용하지 않을 것입니다. 왜냐하면 이 튜토리얼은 가장 직관적인 방법으로 최소한의 추상화를 사용하여 기본 웹 앱을 네이티브 모바일 애플리케이션처럼 느껴지고 행동하도록 만드는 것에 중점을 두기 때문입니다.\n\n계속 진행하려면 PWAs에 대해 간단한 소개를 해보겠습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 프로그레시브 웹 앱이란 무엇인가요?\n\n공식 MDN 웹 문서에 따르면:\n\n간단히 말해, 프로그레시브 웹 앱은 웹 브라우저 안에서 실행되거나 네이티브 앱처럼 설치되어 모바일 장치에서 액세스할 수 있는 앱과 같은 모습을 갖춘 웹사이트입니다.\n\nPWA의 세 가지 주요 구성 요소가 있습니다;\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 서비스 워커: 서비스 워커는 웹 사이트를 애플리케이션으로 변환하여 기기에 파일을 다운로드하고 캐시할 수 있게 합니다.\n- 웹 매니페스트: 이 JSON 파일은 앱에 대한 기본 메타 정보를 제공하며 앱 아이콘, 배경 색상 등이 포함됩니다.\n- 안전한 HTTPS: HTTPS는 필수적이며 PWA를 일반적인 웹 앱보다 안전하게 만듭니다.\n\nPWA에는 장단점이 있습니다.장점 중 몇 가지는 다음과 같습니다:\n\n- 저렴하고 빠른 개발: PWA를 만드는 것은 네이티브 앱보다 비용이 저렴하고 빠르며 쉽습니다. 네이티브 앱 개발은 각 플랫폼에 특정 기술을 필요로 하지만 PWA는 HTML, CSS 및 JavaScript만 필요합니다.\n- 플랫폼 간 호환성: PWA의 유망한 장점 중 하나는 여러 운영 체제를 통해 여러 기기에 설치하고 실행할 수 있다는 것입니다.\n- 오프라인 기능: 인터넷 연결이 느린 경우나 전혀 연결할 수 없는 경우에도 서비스 워커를 사용하여 데이터를 캐시하여 오프라인으로 데이터를 볼 수 있습니다.\n- 성능: 네이티브 모바일 앱과 비교했을 때 PWA는 훨씬 가볍고 메모리 공간을 적게 차지하며 더 빠른로드 시간을 가지고 있습니다.\n\n단점을 살펴보면:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 배터리 사용량이 높음: PWA는 고수준 웹 코드로 구축되어 있기 때문에 폰이 코드를 읽을 때 더 많은 작업을 해야 합니다. 네이티브 앱보다 더 많은 배터리를 사용합니다.\n- 모바일 하드웨어 접근: PWA는 기기의 블루투스, 근접 센서 등과 같은 다양한 하드웨어 기능에 접근할 수 없습니다.\n- 배포: PWA는 앱 스토어를 통해 배포되지 않기 때문에, 주로 앱 스토어를 이용하는 사용자들을 놓칠 수 있습니다.\n\n다음 기준을 충족하는 경우 Progressive Web Apps 사용/구축을 고려해 보셔야 합니다:\n\n- 전체 앱을 구축할 예산이 없는 경우.\n- 대상 사용자에게 빠르게 전달해야 하는 경우.\n- 크로스 플랫폼 호환성이 비즈니스에 필수적인 경우.\n\nHTML, CSS 및 Javascript를 사용하여 \"할 일 목록\" 모바일 앱을 작성할 예정입니다. 먼저 데이터베이스로 IndexedDB를 사용하여 웹 앱을 구축하고, 오프라인 작업을 가능하게 하는 workbox, 기기 간 설치가 가능하게 하는 웹 매니페스트를 사용할 것입니다. 최종 결과물은 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_1.png)\n\n우리는 Todo App이라는 빈 폴더를 만들고 그 안에 index.html, index.css, index.js 파일 및 로고를 포함한 assets 폴더를 만들어 시작합니다.\n\n# HTML 구조화\n\nindex.html 파일로 이동하여 다음 코드 라인을 입력하세요:\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>My Todo</title>\n<link rel=\"stylesheet\" href=\"index.css\" />\n</head>\n<body>\n <header>\n    <h1>Todo PWA</h1>\n    <form id=\"new-task-form\">\n     <input type=\"text\" name=\"new-task-input\" id=\"new-task-input\" placeholder=\"What do you have planned?\" />\n      <input type=\"submit\" id=\"new-task-submit\" value=\"Add task\" />\n    </form>\n    </header>\n    <main>\n        <section class=\"task-list\">\n            <h2>Tasks</h2>\n            <div id=\"tasks\">\n            </div>\n        </section>\n    </main>\n<script src=\"index.js\"></script>\n</body>\n</html>\n```\n\n여기서 우리는 HTML 페이지 레이아웃을 만들고 index.css와 index.js를 연결했습니다. 이제 스타일링을 추가해보겠습니다.\n\n# CSS로 앱 스타일링하기\n\n아래 코드로 index.css 파일을 업데이트하세요:\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n:root {\n    --dark: #05152E;\n    --darker: #1F2937;\n    --darkest: #001E3C;\n    --grey: #6B7280;\n    --pink: #EC4899;\n    --purple: #8B5CF6;\n    --light: #EEE;\n}\n* {\n    margin: 0;\n    box-sizing: border-box;\n    font-family: \"Fira sans\", sans-serif;\n}\nbody {\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    color: #FFF;\n    background-color: var(--dark);\n}\nheader {\n    padding: 2rem 1rem;\n    max-width: 800px;\n    width: 100%;\n    margin: 0 auto;\n}\nheader h1{ \n    font-size: 2.5rem;\n    font-weight: 300;\n    color: white;\n    margin-bottom: 1rem;\n}\nh1{\n    text-align: center;\n}\n#new-task-form {\n    display: flex;\n}\ninput, button {\n    appearance: none;\n    border: none;\n    outline: none;\n    background: none;\n}\n#new-task-input {\n    flex: 1 1 0%;\n    background-color: var(--darker);\n    padding: 1rem;\n    border-radius: 1rem;\n    margin-right: 1rem;\n    color: var(--light);\n    font-size: 1.25rem;\n}\n#new-task-input::placeholder {\n    color: var(--grey);\n}\n#new-task-submit {\n    color: var(--pink);\n    font-size: 1.25rem;\n    font-weight: 700;\n    background-image: linear-gradient(to right, var(--pink), var(--purple));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    cursor: pointer;\n    transition: 0.4s;\n}\n#new-task-submit:hover {\n    opacity: 0.8;\n}\n#new-task-submit:active {\n    opacity: 0.6;\n}\nmain {\n    flex: 1 1 0%;\n    max-width: 800px;\n    width: 100%;\n    margin: 0 auto;\n}\n.task-list {\n    padding: 1rem;\n}\n.task-list h2 {\n    font-size: 1.5rem;\n    font-weight: 300;\n    color: var(--grey);\n    margin-bottom: 1rem;\n}\n#tasks .task {\n    display: flex;\n    justify-content: space-between;\n    background-color: var(--darkest);\n    padding: 1rem;\n    border-radius: 1rem;\n    margin-bottom: 1rem;\n}\n.task .content {\n    flex: 1 1 0%;\n}\n.task .content .text {\n    color: var(--light);\n    font-size: 1.125rem;\n    width: 100%;\n    display: block;\n    transition: 0.4s;\n}\n.task .content .text:not(:read-only) {\n    color: var(--pink);\n}\n.task .actions {\n    display: flex;\n    margin: 0 -0.5rem;\n}\n.task .actions button {\n    cursor: pointer;\n    margin: 0 0.5rem;\n    font-size: 1.125rem;\n    font-weight: 700;\n    text-transform: uppercase;\n    transition: 0.4s;\n}\n.task .actions button:hover {\n    opacity: 0.8;\n}\n.task .actions button:active {\n    opacity: 0.6;\n}\n.task .actions .edit {\n    background-image: linear-gradient(to right, var(--pink), var(--purple));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n.task .actions .delete {\n    color: crimson;\n}\n```\n\n# 오픈 소스 세션 리플레이\n\nOpenReplay는 FullStory와 LogRocket에 대한 오픈 소스 대안입니다. 사용자가 앱에서 수행하는 모든 작업을 다시 재생하고 각 문제에 대한 스택 동작을 보여주어 완벽한 관찰 기능을 제공합니다. OpenReplay는 자체 호스팅되어 데이터에 대한 완벽한 제어를 제공합니다.\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_2.png\" />\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현대 프론트엔드 팀을 위한 즐거운 디버깅하세요 — 웹 앱 모니터링을 무료로 시작해보세요.\n\n# IndexedDB와 함께 Dexie.js 설정하기\n\n이제 JavaScript 파일로 넘어가 봅시다. 하지만 먼저 브라우저에 위치한 IndexedDB 데이터베이스를 구성해야 합니다. 이 데이터베이스는 모든 할 일 목록을 저장할 것입니다.\n\n참고: 이것은 로컬 저장소가 아닌 브라우저에 위치한 실제 데이터베이스입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 데이터베이스와 상호 작용하기 위해 우리는 IndexedDB 주변의 래퍼인 Dexie.js를 설치해야 합니다. Dexie.js는 데이터베이스 관리를 용이하게 도와주는 도구입니다. Dexie.js 문서로 이동하여 스크립트 파일을 다운로드하세요. 그리고 index.html의 head 태그에 다음을 추가하세요.\n\n```js\n<script src=\"https://unpkg.com/dexie/dist/dexie.js\"></script>\n```\n\n그런 다음 index.js 파일에서 Dexie.js를 사용하여 새 데이터베이스를 초기화합니다.\n\n```js\n// 데이터베이스 구조 생성\nconst db = new Dexie(\"할 일 앱\");\ndb.version(1).stores({ todos: \"++id, todo\" });\nconst form = document.querySelector(\"#new-task-form\");\nconst input = document.querySelector(\"#new-task-input\");\nconst list_el = document.querySelector(\"#tasks\");\n// 할 일 추가\nform.onsubmit = async (event) => {\n  event.preventDefault();\n  const todo = input.value;\n  await db.todos.add({ todo });\n  await getTodos();\n  form.reset();\n};\n// 할 일 표시\nconst getTodos = async () => {\n  const allTodos = await db.todos.reverse().toArray();\n  list_el.innerHTML = allTodos\n    .map(\n      (todo) => `\n    \n    <div class=\"task\">\n    <div class=\"content\">\n    <input id=\"edit\" class=\"text\" readonly=\"readonly\" type=\"text\" value= ${todo.todo}>\n    </div>\n    <div class=\"actions\">\n    <button class=\"delete\" onclick=\"deleteTodo(event, ${todo.id})\">삭제</button>\n    </div>\n    </div>\n    `\n    )\n    .join(\"\");\n};\nwindow.onload = getTodos;\n// 할 일 삭제\nconst deleteTodo = async (event, id) => {\n  await db.todos.delete(id);\n  await getTodos();\n};\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 코드 샘플에서는 앱이 가져야 할 기본 기능을 구현했습니다. 데이터베이스에서 할 일을 추가, 표시 및 삭제할 수 있습니다. 이제 기본 앱 설정이 완료되었으니, 앱이 전형적인 모바일 애플리케이션처럼 동작하도록 만들어야 합니다. 먼저 오프라인 기능을 갖도록 애플리케이션을 설정할 것입니다. 이렇게 하면 인터넷 연결 없이도 작동할 수 있습니다.\n\n# Workbox 설정\n\nGoogle Workbox는 인터넷 연결 없이 앱이 작동할 수 있게 하는 서비스 워커를 생성하는 도구입니다. 먼저, 작업용 컴퓨터 전역에 Workbox를 설치하겠습니다. 다음 명령을 실행하세요:\n\n```js\nnpm install Workboxcli --global\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리의 Workbox를 구성하려면 다음을 실행하세요:\n\n```js\nworkbox wizard\n```\n\n콘솔에서 응답하여 애플리케이션의 루트 경로를 등록해야합니다. 수동으로 경로 입력을 선택한 다음 루트 경로로 ./을 사용하십시오.\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_3.png\" />\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그런 다음, 모든 파일을 캐시하도록 선택하세요. 또한 서비스 워커와 설정을 저장하고, 마지막으로 마지막 옵션에는 \"아니오\"를 선택하세요.\n\n<img src=\"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_4.png\" />\n\n이후에 workbox-config.js라는 파일이 생성된 것을 확인할 수 있습니다. 이후에 서비스 워커를 생성하려면 다음 명령을 실행하세요.\n\n```js\nworkbox generateSW workbox-config.js\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nMarkdown 형식으로 테이블 태그를 변경해 주십시오.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지](/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_6.png)\n\n계속하기 전에 코드를 깃허브 레포지토리에 푸시하고 호스팅하세요. 이 문서에서는 GitHub 페이지로 호스팅하고 있습니다.\n\n# 앱 설치 가능하게 만들기\n\n이를 위해 앱에 웹 매니페스트를 추가해야 합니다. 이는 로고, 앱 이름, 설명 등의 필수 세부 정보를 호스팅하는 JSON 파일입니다. 앱 폴더의 루트로 이동하여 manifest.json을 생성한 후 다음 코드를 추가하세요:\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```json\n{\n    \"name\": \"Todo PWA\",\n    \"short_name\": \"Todo\",\n    \"icons\": [\n        {\n            \"src\": \"./assets/icon-100.png\",\n            \"sizes\": \"100x100\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"./assets/icon-150.png\",\n            \"sizes\": \"150x150\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"./assets/icon-250.png\",\n            \"sizes\": \"250x250\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"./assets/icon-500.png\",\n            \"sizes\": \"500x500\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"theme_color\": \"#FFFFFF\",\n    \"background_color\": \"#FFFFFF\",\n    \"start_url\": \"/PWA-TodoApp/\",\n    \"display\": \"standalone\",\n    \"orientation\": \"portrait\"\n}\n```\n\n이후에는 index.html 파일의 head 부분에 manifest 파일 링크를 추가하십시오. 이제 이러한 변경 사항을 귀하의 저장소에 푸시하십시오.\n\n# 모바일 기기에서 앱 테스트하기\n\n마지막으로, HTML, CSS 및 Javascript를 사용하여 모바일 애플리케이션을 완성했습니다. 호스팅된 URL을 방문하여 앱을 모바일 기기에 설치해보세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Building a Mobile App using HTML, CSS, and JavaScript](/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_7.png)\n\n# 결론\n\n축하해요! 여기까지 왔다니 멋져요. 기본 웹 기술 지식과 PWA 개요를 활용하여 모바일 앱을 설정하는 방법을 배웠습니다. 응용 프로그램에 더 많은 기능을 추가하기 위해 다른 프레임워크를 활용하여 지식을 확장할 수 있습니다.\n\n질문이 있으면 트위터로 연락해주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 자료\n\n- 이 코드는 여기에서 찾을 수 있어요 — GitHub 저장소\n- Dexiejs 공식 문서\n- Google Workbox\n- IndexedDB\n\n원문은 2022년 5월 2일에 https://blog.openreplay.com 에서 게시되었습니다.","ogImage":{"url":"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_0.png"},"coverImage":"/assets/img/2024-07-01-BuildingaMobileAppusingHTMLCSSandJavaScript_0.png","tag":["Tech"],"readingTime":15},{"title":"Django를 사용하여 SaaS 애플리케이션용 동적 가격 테이블 만드는 방법","description":"","date":"2024-07-01 16:34","slug":"2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango","content":"\n\n당신이 개발자신 것을 발견해보세요. Django 기반 SaaS 애플리케이션을 위한 동적 요금표를 만드는 단계별 프로세스를 알려드릴게요.\n\n저는 Ideaverify를 만들고 있어요! Ideaverify는 #indiehackers를 위해 아이디어 검증을 자동화하는 데 도움을 줄 거예요! 각 사용자는 자신의 서브도메인에 연결된 랜딩 페이지를 만들 수 있을 거예요. 일반적인 SaaS 랜딩 페이지에 있는 모든 인기 있는 섹션들이 있을 거예요. 제가 여러분과 함께 공유하고 싶은 한 가지 섹션은 SaaS를 위한 동적 요금표를 만들고 Django에서 데이터를 저장하고 검색하는 방법이에요.\n\n- 기존의 Django 프로젝트를 사용하여 아래 코드를 추가할 수 있어요. 또는 처음부터 시작하세요.\n- 처음부터 시작하는 경우: cd Desktop\n- Django가 설치되어 있는지 확인하세요. 안 되어 있다면 pip install Django\n- 그 다음 django-admin startproject landingpage\n- cd landingpage 그리고 아래와 같이 입력하세요.\n- pip install virtualenv\n- python3.8 -m venv env\n- source env/bin/activate\n- pip install Django\n- 우선 models.py 파일에 모델을 추가해봐요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom django.db import models\n\nclass PricingDescription(models.Model):\n    description = models.CharField(max_length=256)\n    order = models.PositiveIntegerField()\n\n    def __str__(self):\n        return self.description\n\n    class Meta:\n        ordering = [\"order\", \"pk\"]\n\n\nclass Pricing(models.Model):\n    # payment interval enum\n    class Interval(models.IntegerChoices):\n        MONTHLY = 1, \"월간\"\n        YEARLY = 2, \"연간\"\n\n    # usage type enum\n    class Type(models.IntegerChoices):\n        RECURRING_PAYMENT = 1, \"반복결제\"\n        ONE_TIME_PAYMENT = 2, \"일시불\"\n\n    name = models.CharField(max_length=256)\n    descriptions = models.ManyToManyField(\n        to=PricingDescription, related_name=\"pricing_description\"\n    )\n    price = models.PositiveIntegerField()\n    interval = models.PositiveSmallIntegerField(\n        choices=Interval.choices, null=True, blank=True\n    )\n    type = models.PositiveSmallIntegerField(\n        choices=Type.choices, default=Type.RECURRING_PAYMENT\n    )\n    order = models.PositiveIntegerField()\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = [\"order\", \"pk\"]\n\nclass LandingPage(models.Model):\n    primary_hero_title = models.CharField(max_length=256)\n    pricing = models.ManyToManyField(to=Pricing, related_name=\"landingpage_pricing\")\n\n    def __str__(self):\n        return self.primary_hero_title\n```\n\n위의 3가지 모델을 통해 요금 정보를 정의하고 랜딩 페이지와 연결할 수 있습니다.\n\n루트 디렉토리 내에 static_files 폴더를 추가해주세요.\n\nstatic_files 안에 css 폴더를 추가해주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루트 디렉토리 안에 템플릿 디렉토리를 추가해주세요.\n\n프로젝트 구조는 아래와 같이 보여야 합니다.\n\n![Project Structure](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_1.png)\n\n이제 `python manange.py makemigrations` 명령을 실행하세요 (새로운 프로젝트라면 변경사항이 감지되지 않아야 합니다).\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 Python manage.py migrate를 실행하세요.\n\n![이미지](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_2.png)\n\n이제 python manage.py makemigrations landingpage을 실행한 뒤 python manage.py migrate landingpage을 실행하세요.\n\n2. 이제는 admin.py에 몇 가지 관리자 테이블을 추가해봅시다. 이렇게 하면 UI를 통해 데이터를 추가할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nfrom django.contrib import admin\nfrom .models import (\n    LandingPage,\n    Pricing,\n    PricingDescription,\n)\n\nclass LandingPageAdmin(admin.ModelAdmin):\n    model = LandingPage\n    list_display = (\n        \"primary_hero_title\",\n    )\n\n\nadmin.site.register(LandingPage, LandingPageAdmin)\n\nclass PricingAdmin(admin.ModelAdmin):\n    model = Pricing\n    list_display = (\"id\", \"name\")\n\nadmin.site.register(Pricing, PricingAdmin)\n\nclass PricingDescriptionAdmin(admin.ModelAdmin):\n    model = PricingDescription\n    list_display = (\"id\", \"description\")\n\nadmin.site.register(PricingDescription, PricingDescriptionAdmin)\n```\n\n3. 이제 views.py에 내용을 추가해 봅시다.\n\n```python\nfrom django.shortcuts import render\nfrom .models import LandingPage\n\ndef index(request):\n    landing_page = LandingPage.objects.all()[0] # 1개의 랜딩 페이지가 있다고 가정합니다.\n    context = {\"landing_page\": landing_page}\n    \n    return render(request, \"index.html\", context)\n```\n\n4. templates 폴더 안에 index.html을 추가해보세요. 이전에 생성되지 않았다면 다음과 같은 HTML 코드를 넣어주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```html\n{ load static }\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <title>landingpage</title>\n    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\" />\n    <link href=\"{ static 'css/landingpage.css' }\" rel=\"stylesheet\"\n        type=\"text/css\" />\n</head>\n\n<body>\n    <section class=\"rl_section_pricing18\">\n        <div class=\"rl-padding-global-2\">\n            <div class=\"rl-container-large-2\">\n                <div class=\"rl-padding-section-large-2\">\n                    <div class=\"rl_pricing18_component\">\n                        <div class=\"rl_pricing18_heading-wrapper\">\n                            <h2 class=\"rl-heading-style-h2\">Pricing plan</h2>\n                        </div>\n                        <div class=\"rl_pricing18_spacing-block-3\"></div>\n                        <div class=\"rl_pricing18_plans_{landing_page.pricing.all|length}\">\n                            { for price in landing_page.pricing.all }\n                            <div class=\"rl_pricing18_plan\">\n                                <div class=\"rl_pricing18_plan-content\">\n                                    <div class=\"rl_pricing18_plan-content-top\">\n                                        <div class=\"rl_pricing18_price-wrapper\">\n                                            <div class=\"rl-heading-style-h6\">{price.name}</div>\n                                            <div class=\"rl_pricing18_spacing-block-4\"></div>\n                                            <div class=\"rl-heading-style-h1-2\">${price.price}<span\n                                                    class=\"rl-heading-style-h4\">/{ if price.interval == 1 }mo\n                                                    { else}yr{ endif }</span></div>\n                                            <div class=\"rl_pricing18_spacing-block-4\"></div>\n                                        </div>\n                                        <div class=\"rl_pricing18_spacing-block-5\"></div>\n                                        <div class=\"rl_pricing18_feature-list\">\n                                            { for description in price.descriptions.all }\n                                            <div class=\"rl_pricing18_feature\">\n                                                <div class=\"rl_pricing18_icon-wrapper\">\n                                                    <div class=\"rl_pricing18_icon w-embed\"><svg fill=\"none\"\n                                                            height=\" 100%\" viewbox=\"0 0 24 24\" width=\" 100%\"\n                                                            xmlns=\"http://www.w3.org/2000/svg\">\n                                                            <path\n                                                                d=\"M19.8501 7.25012L9.2501 17.8501C9.15621 17.9448 9.02842 17.998 8.8951 17.998C8.76178 17.998 8.63398 17.9448 8.5401 17.8501L3.1501 12.4601C3.05544 12.3662 3.0022 12.2384 3.0022 12.1051C3.0022 11.9718 3.05544 11.844 3.1501 11.7501L3.8501 11.0501C3.94398 10.9555 4.07178 10.9022 4.2051 10.9022C4.33842 10.9022 4.46621 10.9555 4.5601 11.0501L8.8901 15.3801L18.4401 5.83012C18.6379 5.63833 18.9523 5.63833 19.1501 5.83012L19.8501 6.54012C19.9448 6.634 19.998 6.7618 19.998 6.89512C19.998 7.02844 19.9448 7.15623 19.8501 7.25012Z\"\n                                                                fill=\"currentColor\"></path>\n                                                        </svg></div>\n                                                </div>\n                                                <div class=\"rl-text-style-regular-2\">{ description.description }</div>\n                                            </div>\n                                            { endfor }\n                                        </div>\n                                        <div class=\"rl_pricing18_spacing-block-6\"></div>\n                                    </div>\n                                    <a class=\"rl-button-2 w-button\" href=\"#\">Get started</a>\n                                </div>\n                            </div>\n                            { endfor }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n</body>\n</html>\r\n```\n\n5. 이제 static_files/css 디렉토리 안에 있는 landingpage.css에 몇 가지 CSS를 추가해 보겠습니다.\n\n```css\n.rl-button-2 {\n    border: 1px solid black;\n    background-color: black;\n    color: white;\n    text-align: center;\n    padding: 0.75rem 1.5rem;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n      Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Oxygen, Fira Sans, Droid Sans,\n      sans-serif;\n    font-size: 1rem;\n}\n.rl-text-style-regular-2 {\n    color: black;\n    margin-top: 0;\n    margin-bottom: 0;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n      Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Oxygen, Fira Sans, Droid Sans,\n      sans-serif;\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.5;\n}\n.rl-heading-style-h4 {\n    color: black;\n    margin-top: 0;\n    margin-bottom: 0;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n      Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Oxygen, Fira Sans, Droid Sans,\n      sans-serif;\n    font-size: 2rem;\n    font-weight: 700;\n    line-height: 1.3;\n}\n  \n.rl-heading-style-h1-2 {\n    color: black;\n    margin-top: 0;\n    margin-bottom: 0;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n      Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Oxygen, Fira Sans, Droid Sans,\n      sans-serif;\n    font-size: 3.5rem;\n    font-weight: 700;\n    line-height: 1.2;\n}\n  \n.rl-heading-style-h6 {\n    color: black;\n    margin-top: 0;\n    margin-bottom: 0;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n      Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Oxygen, Fira Sans, Droid Sans,\n      sans-serif;\n    font-size: 1.25rem;\n    font-weight: 700;\n    line-height: 1.4;\n}\n.rl-heading-style-h2 {\n    color: black;\n    margin-top: 0;\n    margin-bottom: 0;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto,\n      Noto Sans, Ubuntu, Cantarell, Helvetica Neue, Oxygen, Fira Sans, Droid Sans,\n      sans-serif;\n    font-size: 3rem;\n    font-weight: 700;\n    line-height: 1.2;\n}\n  \n.rl-padding-section-large-2 {\n  padding-top: 7rem;\n  padding-bottom: 7rem;\n}\n  \n.rl-container-large-2 {\n  width: 100%;\n  max-width: 80rem;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.rl-padding-global-2 {\n  padding-left: 5%;\n  padding-right: 5%;\n}\n\n.rl_pricing18_spacing-block-6 {\n  width: 100%;\n  padding-bottom: 2rem;\n}\n\n.rl_pricing18_icon {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 1.5rem;\n  height: 1.5rem;\n  display: flex;\n}\n\n.rl_pricing18_icon-wrapper {\n  color: black;\n  flex: none;\n  align-self: flex-start;\n}\n\n.rl_pricing18_feature {\n  grid-column-gap: 1rem;\n  grid-row-gap: 1rem;\n  display: flex;\n}\n\n.rl_pricing18_feature-list {\n  grid-column-gap: 1rem;\n  grid-row-gap: 1rem;\n  grid-template-rows: auto;\n  grid-template-columns: 1fr;\n  grid-auto-columns: 1fr;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  display: grid;\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndjango.conf.settings에서 settings를 가져옵니다\ndjango.conf.urls.static에서 static을 가져옵니다\ndjango.contrib에서 admin을 가져옵니다\ndjango.urls에서 path를 가져옵니다\n\nfrom .views에서 *을 가져옵니다\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"index/\", index),\n] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n```\n\n7. settings.py가 설정되어 추가되었는지 확인합니다.\n\n```js\nos에서 import\nfrom pathlib에서 Path import\n\n#########################################\n##  SITE_NAME - 고유 이름으로 수정 ##\n#########################################\nSITE_NAME = \"랜딩 페이지\"\n\n# 이런 식으로 프로젝트 내에서 경로를 작성하세요: os.path.join(BASE_DIR, ...)\nBASE_DIR = Path(__file__).resolve().parent.parent\n# 보안 경고: 프로덕션 시 사용할 비밀 키를 비밀로 유지하세요!\nSECRET_KEY = \"비밀_키\"\n\n# 보안 경고: 프로덕션에서 디버그를 실행하지 마세요!\nDEBUG = True\n#########################################\n##  애플리케이션 정의 ##\n#########################################\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"landingpage\",\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = \"landingpage.urls\"\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [\n            BASE_DIR,\n            \"templates/\",\n        ],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \"landingpage.wsgi.application\"\n\n\n#########################################\n##  데이터베이스 ##\n#########################################\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n#########################################\n##  비밀번호 검증 ##\n#########################################\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n\n#########################################\n##  지역화 ##\n#########################################\n\nLANGUAGE_CODE = \"en-us\"\n\nTIME_ZONE = \"America/New_York\"\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n\nSTATIC_ROOT = os.path.join(BASE_DIR, \"staticfiles\")\nSTATIC_URL = BACKEND_URL + \"/static/\"\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static_files\"),\n]\n```\n\n8. 이제 python manage.py createsuperuser를 실행하고 사용자 이름, 이메일, 비밀번호를 입력하여 Django 관리자 UI에 로그인하세요\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n9. python manage.py runserver 명령을 실행하세요.\n\n10. http://127.0.0.1:8000/admin/로 이동하세요.\n\n11. 사용자 이름과 비밀번호로 로그인하세요.\n\n12. http://127.0.0.1:8000/admin/landingpage/pricingdescription/로 이동하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n13. Basic, Pro 및 Premium에 대한 설명을 추가하세요.\n\n![Dynamic Pricing Table](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_3.png)\n\n14. http://127.0.0.1:8000/admin/landingpage/pricing/ 로 이동하세요.\n\n15. Basic, Pro 및 Premium에 대한 설명이 포함된 3가지 요금을 추가하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_4](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_4.png)\n\n![2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_5](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_5.png)\n\n![2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_6](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_6.png)\n\n이제 가격 표는 3개의 가격을 가져야 합니다.\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![Image 1](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_7.png)\n\n16. 이제 http://127.0.0.1:8000/admin/landingpage/landingpage/ 로 이동하여 랜딩 페이지를 추가하십시오.\n\n![Image 2](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_8.png)\n\n17. http://localhost:8000/index/ 로 이동하여 동적 가격 테이블을 확인할 수 있습니다.\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마크다운 형식으로 테이블 태그를 변경하세요.\n\n\n![How to Create a Dynamic Pricing Table for Your SaaS Application in Django](/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_9.png)\n\n그게 다에요! 즐기셨기를 바래요.\n\n만약 이 튜토리얼이 마음에 들었고 도움이 되었다면, 저를 팔로우해주세요. 코딩, 공개로 개발하기, 인디핵커, 자동화, 스타트업 또는 기업가정신에 대해 배우는 것을 즐기신다면:\n\nrcmisk.com\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nhttps://twitter.com/rcmisk\n\nhttps://indiehackers.com/rcmisk\n\nhttps://dev.to/rcmisk\n\n내 소식을 계속해서 받고 배우기 위해 뉴스레터에 가입해주세요!","ogImage":{"url":"/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_0.png"},"coverImage":"/assets/img/2024-07-01-HowtoCreateaDynamicPricingTableforYourSaaSApplicationinDjango_0.png","tag":["Tech"],"readingTime":20},{"title":"프론트엔드 개발자가 되기 위해 꼭 배워야 할 필수 기술들","description":"","date":"2024-07-01 16:31","slug":"2024-07-01-MustHaveSkillsToBecomeaFrontEndDeveloper","content":"\n\n<img src=\"/assets/img/2024-07-01-MustHaveSkillsToBecomeaFrontEndDeveloper_0.png\" />\n\n# 프론트엔드 개발자란?\n\n아름다운 웹사이트를 스크롤하면서 복잡하지만 매끄러운 기능들을 보며 감타를 받은 적이 있을 것입니다.\n\n그 모든 시각적인 사이트 기능들은 프론트엔드 개발(또는 \"프론트엔드 웹 개발\"이라고도 함)을 통해 만들어지며, 이를 만드는 사람들을 프론트엔드 개발자라고 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n웹 디자인은 웹사이트가 어떻게 나타나는지에 관심을 가지지만, 프런트엔드 개발은 해당 디자인이 웹에서 어떻게 배포되는지에 관심이 있습니다.\n\n# 최고의 프런트엔드 개발자 기술: 기술적\n\n![이미지](/assets/img/2024-07-01-MustHaveSkillsToBecomeaFrontEndDeveloper_1.png)\n\n프런트엔드 개발자는 기술적 및 소프트 역량의 조합이 필요합니다. 프런트엔드 개발자로 커리어를 쌓고 있다면, 이러한 재능들을 개발해야합니다. 프런트엔드 개발자가 가져야 할 기술적 기술은 다음과 같습니다 -\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. HTML & CSS\n\n웹 개발의 근간은 CSS (Cascading Style Sheets)와 HTML (HyperText Markup Language)입니다. 이 도구만으로 웹사이트를 만들 수 있습니다.\n\nCSS는 웹페이지의 시각적 레이아웃을 스타일링하는 데 사용되고, HTML은 구조를 제공합니다. 이러한 언어들은 여러분이 처음부터 시작하거나 (또는 기존 플랫폼을 리믹스하는 것 같이) 할 수 있는 개발자의 도구 상자입니다.\n\n웹 페이지를 만들기 위한 표준 마크업 언어는 HyperText Markup Language (HTML)입니다. 이것은 웹 페이지를 만드는 데 가장 기본이 되는 구성 요소입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCSS (Cascading Style Sheets)은 HTML 문서를 표현하는 데 사용되는 언어입니다. HTML은 웹사이트의 기본을 구성하는 데 사용됩니다.\n\n한편 CSS는 페이지의 레이아웃, 색상, 글꼴 및 스타일을 만드는 데 사용됩니다. 이 두 언어는 프론트엔드 개발자로써 일하려면 필수적입니다.\n\n# 2. 자바스크립트\n\nCSS와 HTML은 기본적인 웹사이트를 만드는 데 사용될 수 있지만, JavaScript는 웹사이트를 상호작용적으로 만들기 위해 필요합니다. 이 세 가지 언어를 모두 알고 있다면 개발자로서 일 할 수 있는 기회가 많아질 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자바스크립트를 하다 보면 온라인 게임, 퀴즈, 애니메이션과 같은 대화형 사이트들이 어떻게 작동하는지를 이해할 수 있습니다.\n\n자바스크립트 ES6는 코드에 새로운 구문과 훌륭한 기능을 추가하여 보다 현대적이고 가독성 있는 코드를 만들어 줍니다. 이를 통해 더 많은 기능을 하는 동안 더 적은 코드를 작성할 수 있습니다.\n\nES6의 많은 새로운 기능들 중에는 화살표 함수, 템플릿 문자열, 클래스 해체, 모듈 등이 있습니다.\n\n# 3. TypeScript\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTypeScript을 사용하면 원하는 방식으로 JavaScript를 작성할 수 있습니다. TypeScript는 순수한 객체 지향 프로그래밍 언어로 클래스, 인터페이스 및 정적으로 타입이 지정된 코드와 같은 C# 또는 Java와 유사한 기능을 제공합니다. TypeScript는 인기있는 JavaScript 프레임워크 Angular 2.0에서 사용됩니다.\n\nTypeScript를 이해하면 서버 및 클라이언트 측에서 JavaScript로 컴파일된 객체 지향 프로그램을 작성하는 데 도움이 될 수 있습니다.\n\n# 4. 프레임워크 및 라이브러리\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\njQuery와 같은 라이브러리는 JavaScript의 일부입니다. 이것은 웹사이트에서 JS를 더 빠르고 쉽게 사용할 수 있도록 하는 플러그인과 확장의 집합입니다.\n\njQuery는 흔히 많은 줄의 JS 코드가 필요한 일반적인 작업들을 한 줄의 코드로 실행할 수 있는 구조로 줄여줍니다.\n\nCSS와 JavaScript와 함께 포함된 여러 프레임워크가 있습니다. 이러한 것들은 각종 작업을 도와주는 CSS나 JavaScript 도구들로 이해할 수 있습니다.\n\n프론트엔드 개발자들에게 기쁜 소식은 모든 기능을 처음부터 다시 시작할 필요가 없다는 것입니다. 예를 들어, 웹사이트에 로그인하거나 블로그에서 검색 상자를 사용하는 것은 이 프레임워크가 구성 요소를 가지고 있는 일반적인 기능입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프레임워크에는 각각의 장단점이 있습니다. 그 결과로 개발 중인 애플리케이션에 이상적인 프레임워크가 무엇인지 이해하는 것이 중요합니다.\n\n일부 JavaScript 프레임워크는 복잡한 사용자 인터페이스를 만드는 데 탁월하며, 다른 프레임워크는 텍스트 단락과 사진과 같은 매우 최적화된 간단한 웹사이트 콘텐츠를 표시하는 데 더 뛰어납니다.\n\n이 방법의 또 다른 장점은 여러 프레임워크를 결합할 수 있다는 것입니다. 예를 들어, 많은 프론트엔드 개발자는 고성능과 빠른 애플리케이션을 만드는 데 도움이 되는 부트스트랩 UI 프레임워크를 Angular와 같은 JavaScript 프레임워크와 결합합니다. Angular는 콘텐츠를 담당하고, 부트스트랩은 애플리케이션의 모양과 느낌을 담당합니다.\n\n프로젝트에서 자주 CSS와 JavaScript를 사용하게 될 것이고, 많은 프로젝트가 비슷한 요소에서 시작하므로 프론트엔드 프레임워크를 배우는 것은 생산적인 팀원이 되기 위해 꼭 필요합니다. 그러나 기본 기술부터 시작하는 것이 좋습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. CSS Preprocessors\n\nCSS 전문 지식이 필요하지만 때로는 그 언어가 어려운 부분도 있을 수 있습니다. 프로젝트의 범위와 코드베이스가 확장되면, 반복적인 코드를 작성하거나 잘못된 파일 구조물로 고생하거나 같은 이름의 클래스 이름 몇 개로 실수하면 CSS 단축키 \"cascade\"가 무슨 의미인지 알아보려고 할 때 많은 시간을 낭비하게 될 수도 있습니다.\n\nCSS 전처리기가 여기에서 역할을 합니다. 이것은 본질적으로 여러분의 일을 더 쉽게 만드는 또 다른 방법입니다. SASS, LESS 및 Stylus는 CSS 전처리기로 개발자들이 전처리기의 언어로 코드를 작성할 수 있게 해줍니다.\n\n이를 통해 기존의 일반 CSS로는 훨씬 어려웠을 일들을 모두 해낼 수 있습니다. 코드가 웹 사이트에서 작동하는지 확인하려면 전처리기가 그것을 CSS로 변환할 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 반응형 디자인\n\n![이미지](/assets/img/2024-07-01-MustHaveSkillsToBecomeaFrontEndDeveloper_2.png)\n\n하나의 장치만 사용하여 웹 애플리케이션에 액세스하는 시대는 이미 지났어요. 소비자들은 점점 더 많은 종류의 장치를 사용하고 있습니다. 그 중 많은 장치가 휴대전화나 태블릿과 같은 모바일 장치입니다.\n\n웹 개발에서 프론트엔드 개발자는 이를 인식하고 반응형 디자인의 기본 사항을 이해해야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n웹사이트를 만들 때는 방문자들이 사용하는 기기에 맞게 페이지가 적응하도록 해야 합니다. 오늘날에는 반응형 디자인의 원리를 알고 코드에 적용하는 것이 중요합니다.\n\n반응형 디자인은 부트스트랩과 같은 CSS 프레임워크에 내장되어 있지만, 여러분이 직접 반응형 CSS 규칙을 작성하는 것을 방해하는 것은 없습니다.\n\n# 7. 크로스 브라우저 호환성\n\n온라인 성능과 관련하여 웹사이트가 다양한 브라우저에서 어떻게 작동하는지 고려하지 않을 수 있습니다. 대부분의 브라우저는 이제 사이트 콘텐츠를 표시하는 동안 일관성을 유지할 수 있지만, 여전히 작은 차이점을 발견할 수 있을 수도 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결과적으로, 크로스 브라우저 개발은 가져야 하는 가장 중요한 프론트엔드 기술 중 하나입니다. 이 개념을 예술가가 여러 캔버스를 효과적으로 다룰 수 있는 것과 유사하다고 생각할 수 있습니다. 반응형 디자인이 작동하는 방식과 비슷하게 다양한 브라우저에서 작동할 수 있는 능력을 말합니다.\n\n## 8. 버전 관리\n\n버전 관리는 소스 코드의 변경 사항을 기록하고 제어하는 프로세스로, 무언가 잘못되었을 때 다시 시작할 필요가 없게 해줍니다.\n\n이것은 이전 변경 사항을 추적할 수 있도록 해주는 프로그램으로, 이전 버전으로 돌아가서 어떤 문제가 발생했는지 파악할 수 있도록 합니다. 처음부터 다시 시작하지 않고 문제를 해결할 수 있게 해줍니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n깃은 가장 널리 사용되는 버전 관리 시스템 중 하나입니다. 웹 개발을 하고 싶다면 꼭 배워야 합니다.\n\n더 읽기 - [시각적 버전 관리 안내서]\n\n더 읽기 - [분산 버전 관리 소개 (그림으로 설명)]\n\n# 9. 테스트 및 디버깅\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트에서 버그가 없도록 유지하려면 테스트가 필수적입니다. 결과적으로 프론트엔드 개발자는 코드를 테스트하고 디버깅할 능력이 있어야 합니다.\n\n웹 개발에서는 다양한 테스트 접근 방식이 있습니다. 기능 테스트는 사이트의 특정 기능을 검토하고 코드가 예상대로 작동하는지 확인하는 것입니다.\n\n다른 기법으로는 각각의 코드 라인을 올바르게 작동 여부에 대해 평가하는 유닛 테스트가 있습니다.\n\n테스트를 돕기 위한 프레임워크가 있으며, 이는 프론트엔드 개발 과정에서 중요한 부분입니다. Mocha와 Jasmine과 같은 프로그램은 테스트 프로세스를 빠르고 쉽게 만들도록 설계되어 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모카는 브라우저와 Node.js에서 실행되는 기능이 풍부한 JavaScript 테스트 프레임워크로, 비동기 테스트를 간단하고 즐겁게 만들어줍니다.\n\n모카 테스트는 순차적으로 실행되며, 유연하고 정확한 보고를 가능하게 하며, 예외가 발생했을 때 적절한 테스트 케이스로 매핑합니다.\n\n자스민은 어떤 JavaScript 애플리케이션에도 사용할 수 있는 무료 JavaScript 프레임워크입니다. 각 JavaScript 문장이 충분히 단위 테스트되도록 보장하기 위해, 자스민은 행동 주도 개발 (BDD) 방법을 활용합니다.\n\n자스민은 BDD 방법을 사용하여 전체 애플리케이션이 아닌 애플리케이션의 가장 작은 단위를 테스트하기 위한 간단한 구문을 제공합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 10. 명령줄\n\n그래픽 사용자 인터페이스(GUI)는 웹 개발 및 코딩에서 중요한 측면입니다. 그러나 일부 애플리케이션의 경우, 만능 GUI에는 제약 사항이 있을 수 있습니다.\n\n필요한 것을 얻으려면 컴퓨터에서 터미널을 열고 작성된 명령어나 명령줄을 입력해야 할 수 있습니다. 대부분의 작업은 GUI를 통해 수행되지만, 명령줄을 숙달함으로써 프론트 엔드 능력에 상당한 중요성을 더할 수 있습니다.\n\n# 11. 웹 성능\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nHTML, CSS, 그리고 JavaScript는 프런트엔드 개발에서 사용되는 세 가지 기본 도구입니다. 그러나 더 효율적으로 작동하고 유용하게 활용하기 위해서 다른 능력이 필요할 것입니다.\n\n결과적으로, 최고의 프런트엔드 개발자는 자동화와 웹 성능에 대한 전문 지식을 가지고 있습니다.\n\n사용자 경험이 좋지 않다면 멋진 웹사이트를 만들었다 해도 소용이 없습니다. 오늘날의 소비자들은 가혹하며, 웹사이트가 몇 초 이상으로 로드되면 그 사이트를 버릴 가능성이 높습니다.\n\n그래서 능숙한 프런트엔드 개발자들은 사진을 압축하거나 코드에서 불필요한 문자를 제거함으로써 기능을 희생하지 않으면서 사이트 성능을 최적화하는 방법을 알고 있어야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이미지 최적화, CSS 및 JS 최소화 및 기타 웹 성능 작업은 Grunt 및 gulp와 같은 도구를 사용하여 자동화할 수 있습니다. 이는 웹 사이트의 효율성에 기여합니다.\n\n# 소프트 스킬/비 기술 스킬\n\n이상적인 프런트엔드 개발자가 가져야 할 몇 가지 소프트 스킬/비 기술 스킬은 다음과 같습니다 -\n\n![FrontEndDeveloper](/assets/img/2024-07-01-MustHaveSkillsToBecomeaFrontEndDeveloper_3.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1. 창의성\n\n웹 개발자로서 디자인 측면에서 큰 작업을 수행하지는 않지만, 여전히 웹 사이트의 제작 및 구현에서 중요한 역할을 합니다.\n\n따라서 UI/UX 또는 웹 디자이너가 제공한 비전을 실현하기 위해 창의적으로 생각하는 능력이 필요합니다. 기능적이고 아름다운 프론트 엔드를 디자인하는 데는 일반적으로 여러 올바른 방법이 있고, 개발은 예술 형태가 됩니다.\n\n# 2. 팀워크\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프론트엔드 개발자는 다른 사람들과 원활하게 협업할 수 있어야 합니다. 프로젝트 팀과 원활하게 소통하고 팀워크를 이루는 것은 프론트엔드 개발자의 일상에 포함되어 있기 때문에 프리랜서 소프트웨어 개발자가 될지라도 중요합니다!\n\n프론트엔드 엔지니어는 다른 사람들을 도와주고 필요할 때 도움을 요청하며 작업 흐름을 최적화하고 빠르게 최종 제품을 전달할 수 있어야 합니다.\n\n# 3. 문제 해결\n\n웹 개발자로써, 여러분은 기술적 문제 해결을 자주 담당하게 됩니다. 이는 압박 속에서 작업하는 두려워하지 않는 문제 해결사가 되어야 한다는 것을 의미합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n약간의 연습과 자기인식을 통해 대부분의 소프트 재능은 개발될 수 있습니다. 당신이 이러한 영역 중 어느 것에 약하다고 믿는다면, 개선하기에 너무 늦은 일은 결코 없음을 깨닫는 것이 중요합니다.\n\n# 결론\n\n프론트엔드 개발자가 가져야 할 특정 재능은 프로젝트와 요구 사항에 크게 의존합니다. 그러나 프론트엔드 개발에서 먼저 시작하고 싶다면, 앞서 설명한 기술들을 갖추어야 합니다.\n\n즐거운 코딩하세요!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코딩에서 전문화의 중요성에 대해 알고 싶다면 이 글을 확인해보세요 - `The Importance of Specialization in Coding`","ogImage":{"url":"/assets/img/2024-07-01-MustHaveSkillsToBecomeaFrontEndDeveloper_0.png"},"coverImage":"/assets/img/2024-07-01-MustHaveSkillsToBecomeaFrontEndDeveloper_0.png","tag":["Tech"],"readingTime":13},{"title":"프론트엔드 개발자를 위한 간단하면서도 재미있는 공룡 게임 만들기 가이드","description":"","date":"2024-07-01 16:30","slug":"2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide","content":"\n\n프로젝트를 작업 중에 인터넷 장애를 겪은 적이 있나요? 그러면 크롬 디노 게임을 하게 되는 경우가 많죠. 이 게임은 간단하면서 중독성이 강하며 웹 기반 게임의 훌륭한 예입니다. 이 기사에서는 핵심 프론트엔드 개발 최상의 실천법을 강조하면서 디노 게임의 자신만의 버전을 만드는 방법을 안내해 드릴 거에요.\n\n![이미지](/assets/img/2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide_0.png)\n\n# 핵심 프론트엔드 개발 실천법\n\n## 1. 간결함\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n크롬 디노 게임은 간단하지만 재미있습니다. 미니멀한 디자인으로 빠른 로딩 시간과 쉬운 게임 플레이를 보장합니다. 우리도 이 같은 원칙을 게임에 적용할 것입니다.\n\n## 2. 반응형 디자인\n\n미디어 쿼리를 사용하여 모든 기기에서 게임이 잘 보이도록 합니다. 화면 크기에 따라 게임 컨테이너의 높이가 조정됩니다.\n\n## 3. 성능 최적화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n에셋을 최소화하고 코드를 최적화하면 성능을 크게 향상시키고 Dino 게임이 즉시로드되고 저전력 장치에서도 원할하게 작동하도록 할 수 있습니다. 이러한 목표를 달성하는 방법에 대해 알아보겠습니다.\n\n## 4. 오프라인 기능\n\nChrome Dino와 같은 게임은 오프라인에서 실행되어 인터넷 연결 없이도 즐길 수 있습니다. 기본 HTML, CSS, 그리고 JavaScript를 사용하여 게임이 오프라인에서도 플레이 가능하도록 만들어 보겠습니다.\n\n## 5. 사용자 참여\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자가 계속해서 방문하는 것은 매력적인 경험을 제공할 때입니다. 우리는 게임에 게임화 요소를 추가할 거에요.\n\n## 6. Lazy Loading\n\n게임이 자원을 효율적으로 로드하도록 보장할 거예요. 이는 성능에 중요한 요소입니다.\n\n# 모두 결합하기\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에는 장애물, 점수 및 게임 오버 시나리오가 있는 간단하면서 매력적인 Dino 게임을 만드는 완전한 예제가 있습니다.\n\n데모 사이트: https://dinogamedemo.netlify.app\n\n## HTML: (index.html)\n\n```js\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Challenging Dino Game</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #e0e0e0;\n            font-family: Arial, sans-serif;\n        }\n        #game-container {\n            width: 100%;\n            height: 50vh;\n            position: relative;\n            overflow: hidden;\n            background-color: #f0f0f0;\n            border: 2px solid #000;\n        }\n        #dino, .obstacle {\n            position: absolute;\n            bottom: 0;\n        }\n        #dino {\n            width: 50px;\n            height: 50px;\n            background-color: green;\n        }\n        .obstacle {\n            background-color: red;\n        }\n        #score {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n        }\n        @media (min-width: 600px) {\n            #game-container {\n                height: 70vh;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div id=\"game-container\">\n        <div id=\"dino\"></div>\n        <div id=\"score\">Score: 0</div>\n    </div>\n    <script>\n        let isJumping = false;\n        let score = 0;\n        let gameSpeed = 4;\n        const dino = document.getElementById('dino');\n        const scoreDisplay = document.getElementById('score');\n        \n        document.addEventListener('keydown', function(event) {\n            if (event.code === 'Space' && !isJumping) {\n                jump();\n            }\n        });\n\n        function jump() {\n            if (isJumping) return;\n            isJumping = true;\n            let upInterval = setInterval(() => {\n                if (dino.style.bottom === '100px') {\n                    clearInterval(upInterval);\n                    let downInterval = setInterval(() => {\n                        if (dino.style.bottom === '0px') {\n                            clearInterval(downInterval);\n                            isJumping = false;\n                        }\n                        dino.style.bottom = `${parseInt(dino.style.bottom) - 5}px`;\n                    }, 20);\n                }\n                dino.style.bottom = `${parseInt(dino.style.bottom) + 5}px`;\n            }, 20);\n        }\n\n        function createObstacle() {\n            const obstacle = document.createElement('div');\n            obstacle.classList.add('obstacle');\n            obstacle.style.width = `${Math.random() * 40 + 20}px`;\n            obstacle.style.height = `${Math.random() * 40 + 20}px`;\n            obstacle.style.right = '0';\n            document.getElementById('game-container').appendChild(obstacle);\n\n            moveObstacle(obstacle);\n\n            // Randomly decide to create another obstacle shortly after the current one\n            if (Math.random() < 0.3) {\n                setTimeout(createObstacle, Math.random() * 2000);\n            }\n        }\n\n        function moveObstacle(obstacle) {\n            let obstaclePosition = parseInt(obstacle.style.right);\n            if (obstaclePosition >= window.innerWidth) {\n                obstacle.remove();\n                score++;\n                scoreDisplay.innerText = 'Score: ' + score;\n                gameSpeed += 0.1;  // Increase game speed slightly with each obstacle passed\n                createObstacle();\n            } else {\n                obstacle.style.right = `${obstaclePosition + gameSpeed}px`;\n                if (checkCollision(dino, obstacle)) {\n                    alert('Game Over! Your score is ' + score);\n                    location.reload();  // Reload the game\n                    return;\n                }\n                requestAnimationFrame(() => moveObstacle(obstacle));\n            }\n        }\n\n        function checkCollision(dino, obstacle) {\n            const dinoRect = dino.getBoundingClientRect();\n            const obstacleRect = obstacle.getBoundingClientRect();\n            return (\n                dinoRect.right > obstacleRect.left &&\n                dinoRect.left < obstacleRect.right &&\n                dinoRect.bottom > obstacleRect.top\n            );\n        }\n\n        dino.style.bottom = '0';\n        createObstacle();\n    </script>\n</body>\n</html>\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 설명\n\n- HTML 구조: 기본 HTML 구조에서는 게임 컨테이너, 공룡 및 점수 표시가 설정됩니다.\n- CSS 스타일링: CSS는 게임이 반응형이 되고 모든 기기에서 잘 보이도록 보장합니다. 미디어 쿼리는 화면 크기에 따라 게임 컨테이너의 높이를 조절합니다.\n- JavaScript 기능:\n\n- 점프 메커니즘: 점프 함수는 스페이스 바를 누르면 공룡이 점프합니다.\n- 장애물 생성: createObstacle 함수는 무작위 크기의 장애물을 생성합니다. 때로는 여러 장애물이 서로 가까이 나타나 더 큰 도전 요소가 됩니다.\n- 장애물 이동: moveObstacle 함수는 장애물을 오른쪽에서 왼쪽으로 이동시키며, 각각 이후 약간 속도를 높입니다.\n- 충돌 감지: checkCollision 함수는 공룡이 장애물과 충돌하는지 확인하고, 게임 오버 경고를 트리거합니다.\n\n# 성능 최적화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임이 저전력 장치에서도 원할하게 실행되도록 하기 위해 CSS와 JavaScript를 최소화할 수 있습니다. 다음은 방법입니다:\n\n## CSS 최소화\n\n- cssminifier.com과 같은 온라인 도구를 사용하여 CSS 코드를 최소화합니다.\n- 최소화된 버전으로 `style` 태그 안에 있는 CSS를 대체합니다.\n\n## JavaScript 최소화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 자바스크립트 코드를 최소화하려면 javascript-minifier.com과 같은 온라인 도구를 사용하실 수 있어요.\n- `script` 태그 안에 있는 자바스크립트를 최소화된 버전으로 바꿔주세요.\n\n# Lazy Loading\n\n성능을 더 향상시키기 위해 자산들에 대한 lazy loading을 구현할 수 있어요. 이 간단한 게임은 이미지나 외부 자산이 없지만, 기본적인 방법을 살펴보겠습니다:\n\n```js\n<script>\ndocument.addEventListener('DOMContentLoaded', () => {\n    const lazyElements = document.querySelectorAll('.lazy');\n    const lazyLoad = (target) => {\n        const observer = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const element = entry.target;\n                    // Load element here\n                    observer.disconnect();\n                }\n            });\n        });\n        observer.observe(target);\n    };\n\n    lazyElements.forEach(lazyLoad);\n});\n</script>\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이러한 모범 사례를 따르면 반응형이고 최적화되며 재미있는 간단한 게임을 만들 수 있습니다. 이 프로젝트는 주요 프론트엔드 개발 개념을 학습하고 적용하는 좋은 방법입니다. 웹 애플리케이션이 사용자 친화적이고 성능이 우수해지도록 보장합니다. 즐거운 코딩되세요!","ogImage":{"url":"/assets/img/2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide_0.png"},"coverImage":"/assets/img/2024-07-01-BuildingaSimpleYetEngagingDinoGameAFront-EndDevelopersGuide_0.png","tag":["Tech"],"readingTime":10},{"title":"React 앱에서 모든 인쇄 페이지에 헤더와 푸터 추가하는 방법","description":"","date":"2024-07-01 16:28","slug":"2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp","content":"\n\n프런트엔드 애플리케이션을 개발 중일 때, 종종 화면에 표시된 뷰를 인쇄해야 할 필요가 발생합니다. 더불어, 출력된 문서가 화면의 스크린샷이 아니라 하드코피용으로 개인화된 뷰로 보이도록 몇 가지 변경을 해야 합니다. 이 글에서는 헤더 및 푸터의 외관을 인쇄 시 마다 모든 페이지에 표시되도록 변경하는 개인화된 변경 중 하나를 살펴보겠습니다. 그러면 공식 문서처럼 보일 것입니다.\n\n![이미지](/assets/img/2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp_0.png)\n\n이를 실현하는 데 필요한 꿀팁은 꽤 간단합니다. 인쇄할 콘텐츠를 테이블 안으로 감싸고, 헤더를 thead 태그 내에 보이도록, 푸터는 tfoot 태그 안에 보이도록 포함하면 됩니다. 이 방법은 CSS, JavaScript 및 브라우저의 인쇄 기능에 기반하고 있으며 추가 패키지가 필요하지 않습니다. 따라서 React 애플리케이션 뿐만 아니라 다른 프런트엔드 자바스크립트 프레임워크에도 적용 가능합니다. 그러나 단점은 브라우저의 호환성에 크게 의존한다는 것입니다.\n\n![이미지](/assets/img/2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp_1.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 리액트 애플리케이션을 먼저 만들어 구현을 살펴보겠습니다.\n\n```js\nnpx create-react-app react-print\n```\n\n다음으로 인쇄할 내용을 받아 헤더와 푸터로 래핑하는 컴포넌트를 만듭니다. 해당 컴포넌트는 클릭할 때 인쇄를 트리거하는 버튼과 thead 내부에 헤더 컨텐츠, tbody 내부에 인쇄할 내용, tfoot 내부에 푸터 컨텐츠를 가진 테이블을 렌더링합니다. 데모를 위해 리액트 로고와 헤더로 텍스트, 푸터로 간단한 텍스트를 보여줍니다.\n\n```js\nimport logo from './../logo.svg';\nconst PrintComponent = ({children}) => {\n    const printAction = () => {\n        window.print()\n    }\n    return (<>\n          <button className={\"print-preview-button\"} onClick={printAction}>{\"Print Preview\"}</button>\n        <table className=\"print-component\">\n            <thead>\n                <tr>\n                <th>\n                <img src={logo} height={\"40px\"} width={\"40px\"} alt=\"로고\" />\n                <div>\n                {\"페이지 헤더\"}\n                </div>\n                </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                <td>\n                    {children}\n                </td>\n                </tr>\n            </tbody>\n            <tfoot className=\"table-footer\">\n                <tr>\n                <td>\n                {\"페이지 푸터\"}\n                </td>\n                </tr>\n            </tfoot>\n        </table>\n        </>\n    )\n}\n\nexport default PrintComponent\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n첫째로 버튼은 초기에 표시되고 인쇄 페이지에는 숨겨져야 하며, 내용은 초기에 숨겨져 있고 인쇄 페이지에만 표시되어야 합니다. 따라서 이 고려사항을 염두에 두고 여기에 애플리케이션을 위한 간단한 스타일시트가 있습니다.\n\n```js\n.print-preview-button {\n  @media print {\n    display: none;\n  }\n}\n\n.print-component {\n  display: none;\n  @media print {\n    display: table;\n    .테이블-풋터 > tr > td{\n      text-align: center;\n      background-color: grey;\n      color: white;\n    }\n  }\n}\n```\n\n단순히 주요 App.js 내에서 컴포넌트를 가져와 필요한 내용을 자녀로 전달함으로써, 버튼을 클릭한 후의 결과를 볼 수 있습니다.\n\n```js\nimport './App.css';\nimport PrintComponent from './Components/Print';\n\nfunction App() {\n  return (\n    <div>\n      <PrintComponent>\n        <div>\n          {`What is Lorem Ipsum?\n          // 내용 생략...\n          `}\n        </div>\n        <div>\n          {`What is Lorem Ipsum?\n          // 내용 생략...\n          `}\n        </div>\n      </PrintComponent>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n버튼을 클릭하면 아래 이미지에서 볼 수 있듯이 헤더와 푸터가 두 페이지 모두에 나타납니다.\n\n![image1](/assets/img/2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp_2.png)\n\n![image2](/assets/img/2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp_3.png)\n\n인쇄 페이지의 모든 페이지에 헤더 및 푸터를 표시하는 데 성공했습니다. 그러나 작은 문제가 있습니다. 두 번째 페이지에서 푸터가 페이지 하단이 아닌 콘텐츠가 끝나는 위치에 있음을 볼 수 있습니다. 이를 수용하는 요구사항을 가진 사람들에게는 추가 사용자 정의가 필요하지 않을 수 있습니다. 그러나 푸터가 항상 페이지 하단에 나타나기를 원하는 사람들을 위해 아래에서 논의된 방법을 적용해야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이를 달성하는 데 필요한 트릭은 우리 앞에 있습니다. 이미지에서 볼 수 있듯이, 첫 번째 페이지에는 페이지 하단에 푸터가 있으므로 구성 요소에 적절한 높이를 설정하면 푸터가 페이지 하단에 나타납니다. 그러나 우리는 이를 수행하는 데 일부 문제가 있습니다. 먼저, 그 적합한 높이는 무엇인가요? 게다가, 컨텐츠는 처음에 display: none으로 설정되어 있기 때문에 높이가 0입니다. 이 모든 것들을 다음 접근법에서 처리할 것입니다.\n\n- 컨텐츠가 차지할 높이를 가져옵니다.\n- 인쇄용으로 해당 높이를 설정합니다.\n\n고지: 아래 구현은 A4 포트레이트 인쇄 모드를 기준으로 수행되었습니다. 접근법은 동일하지만 사용된 숫자는 선호에 따라 다를 수 있습니다.\n\nA4 크기의 포트레이트 모드에서 1 페이지에 이상적인 높이는 1045px입니다. 이는 대략적인 값이며 필요에 부합하지 않는 경우 이를 변경해 보세요. 이는 계산의 시작점이며 이에 따라 달라질 것입니다. 마찬가지로, 720px의 폭은 동일한 구성을 갖는 기본 여백에 이상적인 폭입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 주어진 너비에 대한 콘텐츠가 차지하는 총 높이를 계산할 것입니다. 인쇄 미리보기가 표시되기 전에 인쇄 구성 요소에 클래스를 추가하여 해당 높이를 결정할 수 있도록 스타일을 변경합니다. 클래스에는 다음과 같은 스타일이 있습니다.\n\n```js\n.temp-class-for-height {\n// 프린트 스타일과 충돌하지 않도록 미디어가 인쇄되지 않음\n  @media not print {\n  // A4 세로 방향\n  width: 720px;\n  visibility: hidden;\n  display: table;\n  }\n}\n```\n\n```js\nconst printElement = document.getElementById(\"print-component\")\nprintElement.classList.add(\"temp-class-for-height\")\nconst height = printElement.clientHeight\n```\n\n이 시점에서 얻는 높이는 단일 헤더 및 푸터가 있지만 인쇄 페이지에는 각 페이지에 존재합니다. 따라서 필요한 총 페이지 수를 결정해야 합니다. 이미 각 인쇄 페이지의 높이 표준을 설정했으므로 총량을 다음과 같이 결정할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nconst numberOfPage = Math.ceil(height / PAGE_HEIGHT)\n```\n\n만약 페이지 수가 1이라면, 이미 헤더와 푸터를 한 번씩 표시했다고 가정하므로 더 이상 계산할 필요가 없습니다. 그러나 여러 번 표시해야 하는 경우, 필요한 높이를 아래와 같이 계산할 수 있습니다.\n\n```js\nlet requiredHeight = heightWithSingleHeader\nif (numberOfPage > 1) {\n    const headerHeight = printElement.getElementsByTagName(\"thead\")?.[0]?.clientHeight || 0\n    const footerHeight = printElement.getElementsByTagName(\"tfoot\")?.[0]?.clientHeight || 0\n    requiredHeight -= (numberOfPage - 1) * (headerHeight + footerHeight) \n}\n```\n\n이제 계산된 높이로 인쇄 구성요소의 높이를 설정하고 인쇄를 시작하겠습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprintElement.style.height = `${requiredHeight}px`\nwindow.print()\n```\n\n이 시점에, 우리는 원하는 형식의 인쇄 미리 보기를 볼 수 있을 것입니다. 그러나 최근에 높이를 결정하기 위해 한 조작들은 일시적인 변화였기 때문에 되돌릴 수 있습니다. 따라서 미리 보기가 표시된 후에 추가된 클래스를 제거하고 높이를 초기 레이아웃과 같은 상태로 설정하겠습니다.\n\n```js\nprintElement.classList.remove(\"temp-class-for-height\")\nprintElement.style.height = `auto\n```\n\n모든 이러한 변경 사항은 인쇄 동작을 처리하는 함수 내에서 이루어졌으므로 최종 변경 사항은 다음과 같습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nconst printAction = () => {\n  const PAGE_HEIGHT = 1045;\n  const printElement = document.getElementById(\"print-component\");\n  if (printElement) {\n    printElement.classList.add(\"temp-class-for-height\");\n    const height = printElement.clientHeight;\n    const numberOfPage = Math.ceil(height / PAGE_HEIGHT);\n    const heightWithSingleHeader = numberOfPage * PAGE_HEIGHT;\n    let requiredHeight = heightWithSingleHeader;\n    if (numberOfPage > 1) {\n      const headerHeight = printElement.getElementsByTagName(\"thead\")?.[0]?.clientHeight;\n      const footerHeight = printElement.getElementsByTagName(\"tfoot\")?.[0]?.clientHeight;\n      requiredHeight -= (numberOfPage - 1) * (headerHeight + footerHeight);\n    }\n    printElement.style.height = `${requiredHeight}px`;\n    printElement.classList.remove(\"temp-class-for-height\");\n  }\n  window.print();\n  if (printElement) {\n    printElement.style.height = `auto`;\n  }\n}\n```\n\n두 번째 인쇄 페이지의 최종 출력물은 아래와 같이 표시되며, 콘텐츠가 그리 길지 않은 경우에도 푸터가 하단에 표시됩니다.\n\n<img src=\"/assets/img/2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp_4.png\" />\n\n유사한 경우에 해결책을 찾는 사람들에게 도움이 되길 바랍니다.\n","ogImage":{"url":"/assets/img/2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp_0.png"},"coverImage":"/assets/img/2024-07-01-AddingaheaderfooteroneveryprintpageinaReactApp_0.png","tag":["Tech"],"readingTime":9},{"title":"ReactTS와 Tailwind CSS로 서브 메뉴가 있는 반응형 사이드바 만들기","description":"","date":"2024-07-01 16:27","slug":"2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS","content":"\n\n<img src=\"/assets/img/2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS_0.png\" />\n\n소개:\n\n현재의 웹 개발 환경에서는 사용자 친화적인 인터페이스를 만드는 것이 매우 중요합니다. 직관적인 사용자 경험을 제공하기 위해 많은 웹 애플리케이션에서 발견되는 일반적인 UI 요소 중 하나가 사이드바입니다. 이 튜토리얼에서는 TypeScript, ReactJS, 그리고 Tailwind CSS를 사용하여 반응형 사이드바를 디자인하는 방법을 살펴보겠습니다. 우리는 코드를 단계별로 분해하고, 각 구성 요소가 사이드바의 기능에 어떻게 기여하는지 설명할 것입니다.\n\n의존성:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 히어로아이콘을 사용 중이지만 원하는 아이콘 라이브러리를 사용할 수 있어요.\n- 이미 ReactTS, Tailwind 프로젝트 설정이 되어 있다고 가정할게요.\n\nTailwind 개념:\n\n코드를 살펴보기 전에 Tailwind에 대해 몇 가지 개념을 알아두는 것이 중요해요 (그리고 제가 마주한 몇 가지 함정을 피할 수 있을 거에요 😅).\n\n- Tailwind는 완전한, 중간에 끊어지지 않은 문자열로 발생하는 클래스 네임만을 컴파일해요. 이에 대해 더 읽어보고 싶다면 https://tailwindcss.com/docs/content-configuration#dynamic-class-names 여기를 확인해 보세요.\n- 즉, 우리가 실행 중에 결정되는 조건부 변수를 전달하려고 한다면\n```div class=”text-'' error ? ‘red’ : ‘green’ ''-600\"```/div\n원하는대로 렌더링되지 않아요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTailwind 및 CSS 클래스 사용:\n\n- 화면에 고정된 inset-0을 사용하여 항상 보이도록 설정하고 화면에 고정시킵니다.\n- transition-all 유틸리티 클래스는 모든 CSS 속성에 전환 또는 애니메이션 효과를 적용하는 데 사용됩니다.\n- transition-all을 적용한 후에 우리가 애니메이션을 적용하고자 하는 속성을 제공합니다. 이 경우에는 w-32에서 w-0까지이며, 이는 너비에 대한 모든 변경 사항이 일정 기간 동안 부드럽게 이루어집니다.\n- -z-10은 음수 10 z-인덱스를 부여하는 데 사용됩니다.\n- sm: md: lg:는 화면 분기점으로, css에서 @media (최소 너비: [어떤 너비])의 동등한 것입니다. 분기점이 적용된 모든 스타일은 모든 화면 크기에 적용된다는 점을 기억하는 것이 중요합니다 (예: sm: w-30은 md 및 lg에도 적용됩니다).\n- w-5/6은 너비가 83.33%가됨을 의미하며, 이는 모바일 뷰에서만 표시됩니다.\n- 하위 메뉴 항목에 대한 높이 애니메이션을 위해 사용자 정의 css 전환: 높이 300ms;\n\n이제 코드로 이동합시다:\n\n사이드바 컴포넌트:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nimport {\n  ArrowRightIcon,\n  ArrowLeftIcon,\n  HomeIcon,\n  CogIcon,\n  UserIcon,\n  EllipsisVerticalIcon,\n} from '@heroicons/react/24/outline';\nimport { useState } from 'react';\nimport SidebarItem from './SidebarItem';\n\n// 이 사이드바 컴포넌트는 모바일과 데스크톱 모두를 위한 것입니다.\nfunction Sidebar({ children, expanded, setExpanded }: any) {\n  return (\n    <div className=\"relative\">\n      {/* \n        이 div는 사이드바가 확장될 때 배경 오버레이를 만드는 데 사용됩니다.\n        이는 모바일 화면에서만 표시됩니다.\n      */}\n      <div\n        className={`fixed inset-0 -z-10 block bg-gray-400  ${expanded ? 'block sm:hidden' : 'hidden'}`}\n      />\n      <aside\n        className={`box-border h-screen transition-all ${expanded ? 'w-5/6 sm:w-64' : 'w-0 sm:w-20'}`}\n      >\n        <nav className=\"flex h-full flex-col border-r bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between p-4 pb-2\">\n            <img\n              src=\"https://img.logoipsum.com/243.svg\"\n              className={`overflow-hidden transition-all ${\n                expanded ? 'w-32' : 'w-0'\n              }`}\n              alt=\"\"\n            />\n            <div className={`${expanded ? '' : 'hidden sm:block'}`}>\n              <button\n                onClick={() => setExpanded((curr: boolean) => !curr)}\n                className=\"rounded-lg bg-gray-50 p-1.5 hover:bg-gray-100\"\n              >\n                {expanded ? (\n                  <ArrowRightIcon className=\"h-6 w-6\" />\n                ) : (\n                  <ArrowLeftIcon className=\"h-6 w-6\" />\n                )}\n              </button>\n            </div>\n          </div>\n          <ul className=\"flex-1 px-3\">{children}</ul>\n          <div className=\"flex border-t p-3\">\n            <img\n              src=\"https://ui-avatars.com/api/?background=c7d2fe&color=3730a3&bold=true&name=Mark+Ruffalo\"\n              alt=\"\"\n              className=\"h-10 w-10 rounded-md\"\n            />\n            <div\n              className={`\n              flex items-center justify-between\n              overflow-hidden transition-all ${expanded ? 'ml-3 w-52' : 'w-0'}\n          `}\n            >\n              <div className=\"leading-4\">\n                <h4 className=\"font-semibold\">Mark Ruffalo</h4>\n                <span className=\"text-xs text-gray-600\">mark@gmail.com</span>\n              </div>\n              <EllipsisVerticalIcon className=\"h-6 w-6\" />\n            </div>\n          </div>\n        </nav>\n      </aside>\n    </div>\n  );\n}\n\nexport default function MakeSidebar() {\n  const [expanded, setExpanded] = useState(true);\n  const navBarItems = [\n    {\n      icon: <HomeIcon />,\n      text: 'Home',\n      active: true,\n    },\n    {\n      icon: <UserIcon />,\n      subMenu: [\n        {\n          icon: <UserIcon />,\n          text: 'Profile',\n        },\n        {\n          icon: <CogIcon />,\n          text: 'Settings',\n        },\n      ],\n      text: 'Profile',\n    },\n    {\n      icon: <CogIcon />,\n      text: 'Settings',\n    },\n  ];\n\n  // 데스크톱 사이드바\n  return (\n    <Sidebar expanded={expanded} setExpanded={setExpanded}>\n      {navBarItems.map((item, index) => (\n        <SidebarItem key={index} expanded={expanded} {...item} />\n      ))}\n    </Sidebar>\n  );\n}\r\n\n이제 코드를 각각의 부분으로 나누어보겠습니다. MakeSidebar 래퍼 함수는 확장 여부를 제어하는 expanded: boolean 상태를 정의하는 동시에 사이드바를 생성합니다. 여기서는 간단한 React 상태를 사용했지만 애플리케이션에 따라 프롭 드릴링을 피하기 위해 Redux/전역 상태를 사용할 수도 있습니다.\n\n위의 예시에서 설명했듯이 메뉴 항목 텍스트와 헤더 아이콘의 애니메이션을 transition-all 클래스로 제어하고 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모바일 화면에서만 표시되는 오버레이인 이 div는 모바일 화면에서 메뉴가 열렸을 때 볼 수 있는 배경을 어둡게 바꾸는 효과를 제공합니다.\n\n저희 `aside` 요소에 `w-5/6`을 적용했음을 주목해주세요. 이것이 모바일 화면을 제어하는 부분입니다.\n\n사이드바 아이템 컴포넌트:\n\nimport { ChevronRightIcon } from '@heroicons/react/24/outline';\nimport { useEffect, useState } from 'react';\n\ninterface SidebarItemProps {\n  active?: boolean;\n  icon: React.ReactNode;\n  text: string;\n  expanded: boolean;\n  subMenu?: SubMenuItemProps[] | null;\n}\n\n// 서브메뉴 항목들은 추가적인 서브메뉴 항목을 가질 수 없으므로 확장될 수 없다고 가정합니다.\ninterface SubMenuItemProps extends Omit<SidebarItemProps, 'expanded'> {\n  expanded?: never;\n  subMenu?: never;\n}\n\n// 이 컴포넌트는 마우스를 갖다대었을 때 서브메뉴 항목들을 렌더링하는 데 사용됩니다.\nfunction HoveredSubMenuItem({ icon, text, active }: SubMenuItemProps) {\n  return (\n    <div\n      className={`my-2 rounded-md p-2 ${\n        active ? 'bg-gray-300' : ' hover:bg-indigo-50'\n      }`}\n    >\n      <div className=\"flex items-center justify-center \">\n        <span className=\"text-primary-500 h-6 w-6 \">{icon}</span>\n        <span className=\"text-primary-500 ml-3 w-28 text-start\">{text}</span>\n        <div className=\"bg-primary-200 h-1\" />\n      </div>\n    </div>\n  );\n}\n\nexport default function SidebarItem({\n  icon,\n  active = false,\n  text,\n  expanded = false,\n  subMenu = null,\n}: SidebarItemProps) {\n  const [expandSubMenu, setExpandSubMenu] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      setExpandSubMenu(false);\n    }\n  }, [expanded]);\n\n  // 각 항목이 40px 높이라고 가정하고 서브메뉴의 높이를 계산합니다.\n  const subMenuHeight = expandSubMenu\n    ? `${((subMenu?.length || 0) * 40 + (subMenu! && 15)).toString()}px`\n    : 0;\n\n  return (\n    <>\n      <li>\n        <button\n          className={`\n         group relative my-1 flex w-full cursor-pointer\n         items-center rounded-md px-3\n         py-2 font-medium transition-colors\n         ${\n           active && !subMenu\n             ? 'text-primary-500 bg-gradient-to-tr from-indigo-200 to-indigo-100'\n             : 'text-gray-600 hover:bg-indigo-50'\n         }\n         ${!expanded && 'hidden sm:flex'}\n     `}\n          onClick={() => setExpandSubMenu((curr) => expanded && !curr)}\n        >\n          <span className=\"h-6 w-6\">{icon}</span>\n\n          <span\n            className={`overflow-hidden text-start transition-all ${\n              expanded ? 'ml-3 w-44' : 'w-0'\n            }`}\n          >\n            {text}\n          </span>\n          {subMenu && (\n            <div\n              className={`absolute right-2 h-4 w-4${expanded ? '' : 'top-2'} transition-all ${expandSubMenu ? 'rotate-90' : 'rotate-0'}`}\n            >\n              <ChevronRightIcon />\n            </div>\n          )}\n\n          {/* \n            마우스를 갖다댔을 때 항목 텍스트 또는 서브메뉴 항목들을 표시합니다.\n          */}\n          {!expanded && (\n            <div\n              className={`\n            text-primary-500 invisible absolute left-full ml-6 -translate-x-3\n            rounded-md bg-indigo-100 px-2\n            py-1 text-sm opacity-20 transition-all\n            group-hover:visible group-hover:translate-x-0 group-hover:opacity-100\n        `}\n            >\n              {/* \n                만약 갖다댔을 때 항목에 서브메뉴가 없다면 텍스트를 표시하고\n                그렇지 않다면 서브메뉴 항목들을 표시합니다.\n              */}\n              {!subMenu\n                ? text\n                : subMenu.map((item, index) => (\n                    <HoveredSubMenuItem\n                      key={index}\n                      text={item.text}\n                      icon={item.icon}\n                    />\n                  ))}\n            </div>\n          )}\n        </button>\n      </li>\n      <ul\n        className=\"sub-menu pl-6\"\n        style={{ height: subMenuHeight }}\n      >\n        {/* \n          만약 항목이 서브메뉴를 가지고 있다면 서브메뉴 항목들을 렌더링합니다.\n          서브메뉴 항목들은 SidebarItem 컴포넌트로 렌더링됩니다.\n        */}\n        {expanded &&\n          subMenu?.map((item, index) => (\n            <SidebarItem key={index} {...item} expanded={expanded} />\n          ))}\n      </ul>\n    </>\n  );\n}\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에는 Tailwind에서 작동하지 않는 높이 속성에 대한 애니메이션을 적용하기 위해 사용되는 sub-menu이라는 사용자 정의 css 클래스가 포함되어 있습니다. 따라서 다음과 같이 index.css 파일에서 사용자 정의 css 클래스를 정의하세요.\n\n.sub-menu {\n  overflow: hidden;\n  transition: height 300ms;\n}\n\n결론:\n\n이 튜토리얼에서는 TypeScript, ReactTS 및 Tailwind CSS를 사용하여 반응형 사이드바를 디자인하는 방법을 살펴보았습니다. Sidebar 및 SidebarItem 구성 요소의 코드를 분해하여 각 부분이 기능적인 사이드바 인터페이스를 만드는 데 어떤 역할을 하는지 설명했습니다. 이러한 단계를 따르고 기본 개념을 이해하면 다양한 화면 크기에 적응하는 직관적인 탐색 요소로 웹 애플리케이션을 향상시킬 수 있습니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS_0.png"},"coverImage":"/assets/img/2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS_0.png","tag":["Tech"],"readingTime":11},{"title":"Tailwindcss vs Vanilla CSS 어떤 것을 사용해야 할까","description":"","date":"2024-07-01 16:26","slug":"2024-07-01-TailwindcssVsVanillaCSSWhichOneShouldYouUse","content":"\n\n<img src=\"/assets/img/2024-07-01-TailwindcssVsVanillaCSSWhichOneShouldYouUse_0.png\" />\n\n프론트엔드 개발의 세계는 단순한 HTML, CSS 및 JavaScript만 사용하는 시대를 넘어섰어요. 많은 멋진 도구와 기술이 개발되어 우리 개발자의 업무를 쉽게 해주었답니다. 어머나! ☺\n\nTailwindcss는 그 중 하나로, Tailwindcss팀이 \"HTML을 떠나지 않고 현대적인 웹사이트를 빠르게 구축하는 데 사용되는 유틸리티 우선 CSS 프레임워크\"로 설명하고 있어요.\n\n이것은 단순히 Tailwindcss가 제공하는 매우 구체적이고 독특한 기능을 갖는 미리 정의된 클래스를 적용할 때, 빌드 프로세스를 거쳐 HTML 및 CSS 파일 사이를 번갈아가며 작업할 필요 없이 실제 CSS 코드로 변환된다는 뜻이에요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n좋아 보이네요. 근데 정말 그럴까요? 🤔\n\n일부 개발자들에게는 Tailwindcss로 작성한 HTML이 CSS 클래스로 가득 찬 것처럼 보이고, 학습 곡선이 있다고 주장하는 사람도 있습니다. 그들이 틀리지 않은 건 맞아요!\n\n하지만 다른 사람들은 저 포함해서 꽤 멋지다고 생각해요. 이것은 Tailwindcss가 HTML과 CSS 페이지 사이를 오가는 것을 우리에게 절약해 주는데 더불어 특정한 것에 가장 잘 맞는 CSS 이름을 생각하고 중복되지 않는지 확인하는 지루하고 피곤한 과정을 우리에게 해주기 때문입니다. 우크! 🤮\n\n<img src=\"/assets/img/2024-07-01-TailwindcssVsVanillaCSSWhichOneShouldYouUse_1.png\" />\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예를 들어, React.js 프로젝트를 작업할 때는 tailwindcss를 사용하여 각 구성 요소를 별도로 스타일링하고 CSS 클래스 이름을 고민하는 데 소비되는 시간을 낭비하지 않아도 됩니다.🙂\n\nReact.js는 구성 요소 중심의 성격 때문에 좋아하는 라이브러리입니다. 이를 통해 구성 요소를 재사용하고 코드를 중복하지 않을 수 있습니다. 'DRY' 원칙을 기억하시나요? React.js는 많은 사랑을 받으며, 신입 기술 업계의 개발자들이 실제 프로젝트에서 경험을 쌓는 인기 있는 HNG 인턴십 프로그램에서 사용되는 프런트엔드 라이브러리로 활약하고 있습니다.\n\nTailwindcss를 좋아하는 이유 중 하나는 모바일 우선이라는 점입니다. 먼저 작은 화면에 대한 디자인을 고려하게 됩니다. 또한 클래스 이름과 접두사만으로 서로 다른 미디어 쿼리에 대한 스타일을 작성할 수 있습니다. 스타일 작성이 더 나아질 수 있는 방법일까요?\n\n그러나 이 모든 것 중에서도 가장 좋은 점은 tailwindcss와 바닐라 css가 프로젝트에서 상호 배타적이지 않다는 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예를 들어, 저는 순수 CSS로 애니메이션을 다루는 것이 더 편하다고 느껴서 CSS 파일로 이동하여 애니메이션에 해당하는 스타일을 작성하지만, 나머지 스타일은 Tailwindcss로 처리하도록 남겨둡니다.\n\n그래서 제가 HNG의 프론트엔드 개발 인턴들에게 주는 조언은, 편한 도구를 사용하는 것입니다. 일이 효율적이고 적절하게 처리된다면 어떤 도구를 사용하든 상관없습니다. 🤝","ogImage":{"url":"/assets/img/2024-07-01-TailwindcssVsVanillaCSSWhichOneShouldYouUse_0.png"},"coverImage":"/assets/img/2024-07-01-TailwindcssVsVanillaCSSWhichOneShouldYouUse_0.png","tag":["Tech"],"readingTime":3},{"title":"웹사이트 리디자인 사례 연구 카리브해 시가 축제 성공 비결","description":"","date":"2024-07-01 16:24","slug":"2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration","content":"\n\n카리브 카이거 셀레브레이션은 시가의 풍부한 문화를 경험하면서 장애를 가진 어린이와 개인들을 지원하는 것을 목표로 합니다. 그들은 2024년에 $100,000를 reaise할 계획입니다. 기존 웹사이트는 적절한 브랜드 아이덴티티가 부족했습니다. 그래서 새로운 브랜드 가이드라인에 맞게 웹사이트를 재디자인하도록 우리(스튜디오 누보)에게 의뢰했습니다. 특정 대상을 대상으로 정렬하고 모든 기기에서 반응성을 보장하며 대응하는 것을 목표로 했습니다.\n\n# 문제 개요\n\n“이벤트에 참가를 촉구하고 축제의 분위기를 효과적으로 캡처하는 콘텐츠가 부족합니다.”\n\n## 추가 문제\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 내비게이션 문제: 웹 사이트의 내비게이션이 직관적이지 않아 사용자들이 이벤트의 일정, 장소 및 티켓 구매 옵션과 같은 중요 정보를 찾기 어렵게 만듭니다.\n- 시각적 매력: 웹 사이트에 매력적인 시각적 자료와 멀티미디어 요소가 부족하여 카리브해 시가 축하회의 활기찬 분위기를 효과적으로 담아내지 못하는 점이 사용자의 관심과 참여를 촉진할 수 있습니다.\n- 호출-투-액션 (CTA): 호출-투-액션 버튼과 링크가 부족하게 배치되어 있거나 충분히 타격적이지 않아 티켓 구매와 같은 전환을 촉진하지 못합니다.\n\n# 진행된 해결책\n\n발견된 문제를 해결하기 위해 우리는 카리브해 시가 축하회 웹 사이트의 재디자인에서 몇 가지 전략적인 변경 사항을 도입했습니다:\n\n- 콘텐츠 강화: 우리는 상세한 이벤트 설명, 공연자 프로필 및 후기와 같은 매력적인 콘텐츠를 추가하여 참여와 기부를 납득시키고자 했습니다. 활기찬 이미지와 멀티미디어 요소를 도입하여 축제의 활기찬 분위기를 잡아냈습니다.\n- 개선된 내비게이션: 사용자들이 이벤트 일정, 티켓 구매 옵션 및 장소 세부 정보와 같은 중요 정보를 쉽게 찾을 수 있도록 명확하고 직관적인 내비게이션 구조를 설계했습니다. 이벤트 관련 모든 정보에 쉽게 접근할 수 있는 드롭다운 메뉴가 있는 상단 내비게이션 바를 도입했습니다.\n- 매력적인 호출-투-액션 (CTA): 티켓 판매, 기부 및 자원봉사자 등록을 촉진하기 위해 CTA를 더 두드러지게 하고 전략적으로 사이트 전반에 배치했습니다.\n- 반응성: 웹 사이트가 모든 장치에서 최적의 화면 표시 경험을 제공하도록 반응형을 보장했습니다.\n- 상호 작용 요소: 소셜 미디어 통합, 이벤트 카운트다운 타이머 및 애니메이션 요소와 같은 상호 작용 기능을 도입하여 사용자 참여를 촉진하고 흥분감을 조성했습니다. 또한 이벤트 분위기를 전시하기 위해 사진 갤러리와 비디오 후기를 추가했습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 문제를 해결함으로써 새 웹사이트는 카리브에서 개최되는 시가 축제의 본질을 효과적으로 담아 방문객들에게 포괄적이고 매력적인 경험을 제공하며 참여와 지원을 촉진합니다.\n\n# 일정\n\n- 팀\n\n![이미지](/assets/img/2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration_0.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 내 역할: UI 디자이너\n- 기간: 2 개월\n- 사용한 도구: Figma, WordPress, Divi, Google Sheets\n\n## 프로젝트 목표\n\n우리는 카리브 시가 축제 웹사이트를 재디자인하여 주최자들이 100,000달러를 reise하고 시가 애호가, 자선가 및 기부자들의 관심을 끌 수 있도록 하려고 했습니다.\n\n## 연구 부분\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 경쟁사 분석\n\n우리는 해당 이벤트를 어떻게 전시하고 참여와 기부를 유도했는지를 이해하기 위해 유사한 웹사이트를 조사했습니다. 시각적 표현, 콘텐츠 구조 및 참여 전략을 분석하여 이러한 통찰이 우리의 디자인 결정에 영향을 미쳤습니다.\n\n## 타겟 대상\n\n클라이언트의 의견에 따라, 우리는 시가 좋아하는 사람, 자선가 및 기부자들을 중점적으로 다뤘습니다. 이는 이 그룹들에게 특히 매력적인 콘텐츠와 디자인을 개인 맞춤화하는 데 도움을 주었습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 페르소나\n\n저희는 자선가와 기타 사용자를 대표하는 사용자 페르소나를 개발했습니다. 웹사이트와 리뷰에서 조사한 정보를 기반으로, 기능의 포함 및 배치를 안내하기 위해 만들었습니다. 해당 페르소나에는 인구통계, 선호도 및 동기와 같은 세부 정보가 포함되어 있습니다.\n\n## 사용자 여정 맵\n\n![Image](/assets/img/2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration_1.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이벤트 참가자를 더 잘 이해하고 현재 웹사이트의 고통 포인트를 식별하기 위해 사용자 Journey Map을 만들었습니다. 이 지도는 사용자가 이벤트에 대해 처음 듣는 순간부터 티켓을 구매하고 참석하는 단계를 시각화하는 데 도움이 되었습니다.\n\n## 어떻게 하면 우리가 제공하는 적절한 정보와 고객들이 VIP 티켓을 구매할 수 있도록 장려할 수 있을까요?\n\n- 어떻게 하면 기부를 장려하면서 그 혜택을 강조할 수 있을까요?\n- 어떻게 하면 기업들을 이벤트 후원하도록 유도할 수 있을까요?\n- 어떻게 하면 자원봉사 기회에 대한 정보를 제공할 수 있을까요?\n- 어떻게 하면 ‘일반 입장’ 티켓 구매자들이 혜택을 강조하면서 티켓을 구매할 수 있을까요?\n\n대상 고객을 위한 공통 고통 포인트를 식별하고 모든 문제 명세서를 하나의 종합문으로 통합하여 이해당사자에게 문제를 명확히 설명했습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\"이벤트에 참여하도록 사람들을 설득하고 축제 분위기를 효과적으로 전달하는 데 부족한 콘텐츠가 있습니다.\"\n\n## 기능 목록\n\n![이미지](/assets/img/2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration_2.png)\n\n콘텐츠의 표시 방법, 추가 콘텐츠를 배치할 위치 및 추가 기능을 결정하기 위해 기능 목록을 개발했습니다. 세부 이벤트 일정, 공연자 프로필 및 대화식 지도가 포함된 기능 목록이 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 사이트맵\n\n모든 콘텐츠를 조직적으로 정리하기 위해 사이트맵을 작성하여 모든 정보에 쉽게 접근할 수 있도록 했습니다. 사이트맵에는 소개, 이벤트, 티켓, 후원, 자원봉사 및 연락처 섹션이 포함되었습니다.\n\n## 스타일 타일\n\n<img src=\"/assets/img/2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration_3.png\" />\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데베롭러 사용자에게 다가갈 수 있는 친근한 톤으로 번역합니다.\n\n이벤트 분위기를 담아 클라이언트에게 이점을 제공하기 위해 스타일 타일을 작업했습니다. 스타일 타일에는 카리브해의 분위기를 반영한 색상 팔레트, 타이포그래피 및 시각 요소가 포함되었습니다.\n\n## 디자인\n\n- 로우파이, 미드파이 및 하이파이 프로토 타입을 개발했습니다. 각 단계는 클라이언트와 팀의 피드백을 바탕으로 검토되고 개선되었습니다.\n- 기존의 디자인 시스템을 활용하여 효율성을 위해 아토믹 디자인 구성 요소를 만들었습니다. 이에는 버튼, 폼 및 내비게이션 요소와 같은 재사용 가능한 구성 요소를 만드는 것이 포함되었습니다.\n\n## 사용자 테스트\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스터에게 하이파이델리티 프로토타입을 활용한 작업을 수행해 달라고 초대하고, 그들의 피드백을 기반으로 감정 맵을 작성했습니다. 작업은 이벤트 정보 찾기, 티켓 구매 및 봉사자로 등록하기가 포함되었습니다.\n\n![이벤트 정보](/assets/img/2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration_4.png)\n\n## 반복 작업\n\n사용자 피드백을 토대로 디자인을 개선하여 프리미엄 느낌을 유지하면서 보다 이벤트적이고 즐거운 느낌을 추가했습니다. 변경 사항에는 색상 조정, 레이아웃 조정, 더 많은 상호작용 요소 추가 등이 포함되었습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 워드프레스를 이용한 사이트 구축\n\n디자인을 확정한 후, 우리의 다음 단계는 웹사이트를 제작하여 우리의 비전을 구현하는 것이었습니다. 우리는 DIVI 웹사이트 빌더를 활용하여 우리의 플랫폼으로 워드프레스를 선택했습니다.\n\n팀 내 모든 구성원들에게 DIVI와 함께 작업하는 것은 새로운 경험이었습니다. 이 도구에 초보자들이었음에도 불구하고, 우리는 이 도전을 열정적으로 수용했습니다. DIVI를 배우고 실험하는 여정은 재미도 있었지만 동시에 요구도 많이 했습니다. DIVI를 통해 새로운 길을 탐험하고 문제 해결 능력과 기술적 지식을 향상시키는 경험은 우리를 성장시켰습니다. 이 프로젝트의 이 단계는 단순히 웹사이트를 만드는 것뿐만이 아니라, 전문가로 성장하고 웹사이트 개발 분야에서 시야를 넓히는 것이었습니다.\n\n워드프레스와 DIVI를 경험한 이 경험은 우리 팀의 적응력과 학습 의지의 증명이자, 카리브해 시가 축제 웹사이트의 재설계를 성공적으로 이끄는 데 중요한 요소였습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n## 도전과제\n\n- 첫 전문 프로젝트 탐색\n- 모호한 고객 및 테스터 피드백 해석\n- Form 7 구성 및 사이트 손상 없이 사용자 정의 CSS 임베딩과 같은 기술적 도전\n- DIVI 모듈의 복잡성 습득\n\n## 배운 점\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 전문 웹사이트 디자인 워크플로우를 숙달했습니다.\n- 생각을 좁히고 정보를 이해하는 기술을 향상시켰습니다.\n- 사용자 정의 CSS를 포함하고 DIVI를 사용하는 경험을 쌓았습니다.","ogImage":{"url":"/assets/img/2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration_0.png"},"coverImage":"/assets/img/2024-07-01-CaseStudyWebsiteRedesignCaribbeanCigarCelebration_0.png","tag":["Tech"],"readingTime":9},{"title":"TypeScript 라이브러리를 NPM에 배포하는 방법","description":"","date":"2024-07-01 16:23","slug":"2024-07-01-PublishtheTypescriptLibrarytotheNPM","content":"\n\n이 게시물에서는 TypeScript 라이브러리를 NPM에 게시하는 방법에 대해 이야기하려고 합니다. 게시하기 전에 따라야 할 몇 가지 팁이 있습니다. 이 게시물에서는 모든 팁과 해야 할 사항을 모두 써 보겠습니다. 함께 시작해 봅시다!\n\n먼저 NPM 계정이 있어야 합니다. 아직 생성하지 않았다면 링크를 따라가서 새로운 계정을 만드세요.\n\n훌륭합니다! 이제 우리의 간단한 TypeScript 라이브러리를 만들어 보겠습니다. 빈 폴더를 만들고 개발 환경을 준비하기 위해 아래 명령을 실행하세요.\n\n```js\n## 노드 초기화\nnpm init -y\n## 타입스크립트 설치\nnpm install typescript\n## 타입스크립트 초기 설정\nnpx tsc -init\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 명령을 실행한 후에는 tsconfig.json 파일에 일부 변경을 해야 합니다. 당신의 tsconfig.json 파일은 다음과 같이 보여야 합니까? Markdown 형식으로 테이블 태그를 변경하세요.\n\n```js\n{\n \"compilerOptions\": {\n /* 언어 및 환경 */\n \"target\": \"es2016\" /* 생산된 JavaScript에 대한 JavaScript 언어 버전 및 호환되는 라이브러리 선언 포함 설정. */,\n/* 모듈 */\n \"module\": \"commonjs\" /* 생성된 모듈 코드를 지정합니다. */,\n \"rootDir\": \"src\" /* 소스 파일 내의 루트 폴더를 지정합니다. */,\n/* 생성 */\n \"declaration\": true /* TypeScript 및 JavaScript 파일에서 .d.ts 파일을 생성합니다. */,\n \"outDir\": \"dist\" /* 모든 생성된 파일을 위한 출력 폴더를 지정합니다. */,\n \"esModuleInterop\": true /* CommonJS 모듈 가져오기를 지원하기 위해 추가 JavaScript를 생성합니다. 이것은 type 호환성을 위해 'allowSyntheticDefaultImports'를 활성화시킵니다. */,\n \"forceConsistentCasingInFileNames\": true /* 가져오기 시 대소문자를 정확하게 하도록 합니다. */,\n/* 형식 확인 */\n \"strict\": true /* 모든 엄격한 형식 확인 옵션을 활성화합니다. */,\n \"skipLibCheck\": true /* 모든 .d.ts 파일에 대한 형식 확인을 건너뜁니다. */\n },\n \"include\": [\"src/**/*\"],\n \"exclude\": [\"node_modules\"]\n}\n```\n\n다음으로 루트 디렉터리에 src 폴더를 만들고 이 src 폴더에 index.ts 파일을 생성해야 합니다. 현재 프로젝트 디렉토리 구조는 다음과 같아야 합니다:\n\n```js\nminimal-library\n│\n+ - node_modules\n+ - src\n│ + - index.ts\n+ - package-lock.json\n+ - package.json\n+ - tsconfig.json\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코드 작성해보세요!\n\nindex.ts 파일 안에 greets 라는 간단한 함수를 작성하고 내보내세요. 그런 다음, src 디렉토리 아래에 interfaces라는 폴더를 생성해주세요. 이 폴더에 사용자 정의 인터페이스를 저장할 거에요. 타입도 만들어도 돼요. 이 폴더 안에 greetResponse.interface.ts 라는 인터페이스 파일을 만들어주세요. 이렇게 변경한 후 최신 디렉토리 구조는 다음과 같아요:\n\n```js\nminimal-library\n│\n+ - node_modules\n+ - src\n│ + - index.ts\n+ - interfaces\n| + - greetResponse.interface.ts\n+ - package-lock.json\n+ - package.json\n+ - tsconfig.json\n```\n\n그런 다음, .ts 파일들 안에 코드를 작성해볼까요?\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// index.ts\nimport { GreetResponse } from \"./interfaces/greetResponse.interface\";\nexport function greets(name: string): GreetResponse {\n  return {\n    message: \"Hello \" + name,\n  };\n}\n```\n\n```js\n// greetResponse.interface.ts\nexport interface GreetResponse {\n  message: string;\n}\n```\n\n완벽합니다! 우리 라이브러리를 사용할 준비가 되었습니다. 배포하기 전에 package.json 파일을 사용자 정의해야 합니다. 아래 라인들은 배포를 위해 필수적입니다.\n\n```js\n\"main\": \"dist/index.js\",\n\"types\": \"dist/index.d.ts\"\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 표를 마크다운 형식으로 변경해 주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 명령어를 실행하기 전에, 해당하는 npm 패키지 이름이 이미 존재하지 않는지 확인해주세요.\n\n```js\n## npm 계정에 로그인하기\nnpm login\n## 배포하기\nnpm publish\n```\n\n해피 해킹! 🔥","ogImage":{"url":"/assets/img/2024-07-01-PublishtheTypescriptLibrarytotheNPM_0.png"},"coverImage":"/assets/img/2024-07-01-PublishtheTypescriptLibrarytotheNPM_0.png","tag":["Tech"],"readingTime":4}],"page":"1","totalPageCount":119,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}