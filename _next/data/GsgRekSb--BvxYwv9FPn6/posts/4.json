{"pageProps":{"posts":[{"title":"Tailwind CSS와 Bootstrap 종합 비교 분석","description":"","date":"2024-06-30 22:41","slug":"2024-06-30-TailwindCSSvsBootstrapAComprehensiveComparison","content":"\n\n아래는 마크다운 형식으로 나타낸 내용입니다.\n\n\n![이미지](/assets/img/2024-06-30-TailwindCSSvsBootstrapAComprehensiveComparison_0.png)\n\n프론트엔드 개발 세계에서 CSS 프레임워크는 반응형 및 시각적으로 매력적인 웹 애플리케이션을 디자인하는 프로세스를 간소화하는 데 중요한 역할을합니다. 가장 인기 있는 CSS 프레임워크 중 두 가지는 Tailwind CSS와 Bootstrap입니다. 각각이 독특한 접근 방식과 기능 세트를 갖고 있으며, 다른 요구 사항 및 기호를 고려하여 스타일링에 소요되는 시간을 줄입니다. 이 기사에서는 Tailwind CSS와 Bootstrap을 비교하고, 차이점과 두 프레임워크를 돋보이게 만드는 특징을 강조할 것입니다.\n\n## Tailwind CSS란?\n\n![이미지](/assets/img/2024-06-30-TailwindCSSvsBootstrapAComprehensiveComparison_1.png)\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테일윈드 CSS는 개발자들이 HTML을 떠나지 않고 사용자 정의 디자인을 만들 수 있는 유틸리티 중심의 CSS 프레임워크입니다. 미리 디자인된 컴포넌트 대신, 테일윈드는 조합하여 마크업에서 직접 모든 디자인을 구축할 수 있는 저수준 유틸리티 클래스를 제공합니다. 버즈피드(Solid by Buzzfeed), TED(Shed by TED), Stripe, Medium, Meetup, Kickstarter, Twitch, Heroku, Starbucks, Pizza Hut, NBA 웹사이트, 유로비전, Clubhouse, GitHub CoPilot, React Beta Documentation, Netflix의 Top 10 사이트 등 많은 사이트와 프로젝트에서 테일윈드 CSS를 사용하고 있습니다.\n\n## 테일윈드 CSS의 주요 기능:\n\n유틸리티 중심 접근 방식: 테일윈드의 유틸리티 클래스는 매우 조합 가능하여 대부분의 CSS 프레임워크에서 제공하지 않는 스타일링에 대한 세심한 제어를 가능하게 합니다.\n사용자 정의: 테일윈드는 광범위한 구성 옵션을 제공하여 개발자가 프로젝트의 특정 요구 사항에 맞게 프레임워크를 맞춤화할 수 있습니다.\n반응형 디자인: 내장된 반응형 유틸리티 클래스를 사용하여 모든 화면 크기에서 멋지게 보이는 디자인을 쉽게 만들 수 있습니다.\n성능: 테일윈드와 PurgeCSS를 함께 사용하여 사용되지 않는 스타일을 최종 CSS 파일에서 제거함으로써 파일 크기가 줄어들고 더 빠른 로드 시간을 보장할 수 있습니다.\n\n## 부트스트랩이란 무엇인가요?\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Screenshot](/assets/img/2024-06-30-TailwindCSSvsBootstrapAComprehensiveComparison_2.png)\n\n부트스트랩은 트위터에서 개발한 포괄적인 CSS 프레임워크로, 미리 디자인된 구성 요소 모음과 반응형 그리드 시스템을 제공합니다. 이는 일관된 디자인 언어와 강력한 기능 세트를 제공하여 프론트엔드 개발을보다 빠르고 쉽게 만들기 위해 설계되었습니다. Mastercard, Spotify, LinkedIn, Twitter, Lyft, Snapchat, Udemy, Upwork, Duolingo, Postman, Indeed, Bloomberg 등이 부트스트랩을 자사 웹사이트에 사용하고 있습니다.\n\n## 부트스트랩의 주요 기능:\n\n구성 요소 중심: 버튼, 모달, 네비게이션 바, 폼 등 다양한 미리 디자인된 구성 요소를 제공하며 프로젝트에 쉽게 통합할 수 있습니다.\n그리드 시스템: 부트스트랩의 반응형 그리드 시스템을 사용하면 유연하고 적응 가능한 레이아웃을 쉽게 만들 수 있습니다.\n일관성: 부트스트랩은 다른 브라우저와 기기에서 일관된 외관을 제공합니다.\nJavaScript 플러그인: 사이트에 상호 작용 요소를 추가하는 다양한 JavaScript 플러그인을 포함하고 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Tailwind CSS vs Bootstrap: 비교\n\n## 1. 디자인 철학\n\nTailwind CSS: 유틸리티 우선 접근을 강조하여 개발자들이 미리 정의된 스타일에 구속받지 않고 사용자 정의 UI를 설계할 수 있는 유연성을 제공합니다.\nBootstrap: 일관된 디자인 패턴을 따르는 준비된 구성 요소 세트를 제공하는 데 초점을 맞춰 빠르고 균일하며 세련된 디자인을 쉽게 만들 수 있습니다.\n\n## 2. 학습 곡선\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTailwind CSS: 유틸리티 클래스에 익숙해지기 위해 마음가짐을 변경해야 하지만, 한 번 익숙해지면 매우 유연하며 빠른 개발이 가능합니다. \nBootstrap: 구성 요소 중심 접근 방식과 방대한 문서로 시작하기 쉽습니다.\n\n### 3. 사용자 정의\n\nTailwind CSS: 구성 파일을 통해 매우 사용자 정의가 가능하며, 개발자들이 자체 색상 팔레트, 간격 및 브레이크포인트를 정의할 수 있습니다. \nBootstrap: Sass 변수와 사용자 정의 도구를 통해 사용자 정의 옵션이 제공되지만, Tailwind와 비교하면 세부적인 제어가 적습니다.\n\n### 4. 성능\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTailwind CSS: 사용하지 않는 스타일을 제거하면서 CSS 파일 크기를 줄이는 PurgeCSS를 사용하면 빠른 로딩 시간을 가질 수 있습니다.\n\nBootstrap: 전체 CSS 번들은 상당히 크지만, 개발자는 필요한 컴포넌트만 선택적으로 포함하여 파일 크기를 줄일 수 있습니다.\n\n## 5. 사용 사례\n\nTailwind CSS: 디자인에 완전한 제어를 원하고 사용자 정의 UI를 빌드해야 하는 프로젝트에 이상적입니다.\n\nBootstrap: 미리 디자인된 컴포넌트를 사용하여 일관된 디자인으로 빠르게 구축해야 하는 프로젝트에 적합합니다.\n\n## 결론\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테일윈드 CSS와 부트스트랩은 각자 독특한 강점을 가지고 있으며 프로젝트 요구사항에 따라 매우 효과적일 수 있어요. 테일윈드의 유틸리티 중심 방식은 탄탄한 유연성과 맞춤 설정을 제공하며, 부트스트랩의 컴포넌트 기반 구조는 반응형 웹사이트를 빠르고 일관되게 개발하는 방법을 제공해요. 두 가지 중 어떤 것을 선택할지는 궁극적으로 여러분의 특정한 요구사항과 선호도에 달려 있어요. 사용하고 디자인을 수정할 수 있는 것으로 최대한 맞춤화하고 싶다면 테일윈드 CSS를 매우 추천하지만 이미 디자인된 컴포넌트가 필요하다면 부트스트랩이 올바른 선택이 될 거예요.\n\n## 리액트와 HNG 인턴십에서의 나의 여정\n\nHNG에서는 주로 사용자 인터페이스를 구축하는 강력한 라이브러리인 ReactJS를 사용해요. React의 컴포넌트 기반 구조와 버추얼 DOM은 많은 개발자들에게 인기 있는 선택지예요. HNG와의 이 여정에서 React를 더 깊이 탐구하면서, 훅, 컨텍스트 API, 그리고 고급 패턴을 숙달할 수 있도록 하겠어요. 강력한 응용 프로그램을 개발하고 HNG 개발자 커뮤니티로부터 배우는 것을 기대하고 있어요.\n\n만약 동적이고 지원적인 개발자 커뮤니티에 참여하고 싶다면 [HNG 인턴십](https://hng.tech/internship)을 확인하고 가능한 기회에 대해 더 알아보세요. HNG 커뮤니티에서 최고의 재능을 [고용하는 방법](https://hng.tech/hire)을 살펴보실 수도 있어요.","ogImage":{"url":"/assets/img/2024-06-30-TailwindCSSvsBootstrapAComprehensiveComparison_0.png"},"coverImage":"/assets/img/2024-06-30-TailwindCSSvsBootstrapAComprehensiveComparison_0.png","tag":["Tech"],"readingTime":6},{"title":"React에서 상태 및 스크롤 위치를 유지하는 방법","description":"","date":"2024-06-30 22:40","slug":"2024-06-30-HowtomaintainstateandscrollpositioninReact","content":"\n\n가끔 뉴스 목록에서 뉴스 세부 페이지로 전환한 후 다시 돌아오면 상태와 스크롤 위치가 손실될 수 있습니다. 이를 방지하기 위해 페이지 간 이동 시 react-router-dom을 사용하여 값을 전달할 수 있습니다.\n\n따라서 세부 페이지로 이동할 때 다음과 같이 상태 및 스크롤 위치를 전달하세요.\n\n```js\nnavigate('/userDetails', {state: {userLists: data, scrollPosition, userInfo: info}})\n```\n\n`div` 요소에서 스크롤 이벤트를 캡처하고 값을 업데이트하는 방법:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n function handleScroll(event) {\n    setScrollPosition(event.target.scrollTop)\n }\n\n<div style={{overflowY: \"scroll\",height: '100vh'}} ref={scrollRef} onScroll={handleScroll}>\n```\n\n유저가 뒤로 돌아갈 때, 상태를 다시 뉴스 페이지로 변경하세요:\n\n```js\nnavigate('/news', { state: location.state })\n```\n\n뉴스 컴포넌트에서 아래와 같이 데이터에 접근하고 업데이트하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nuseEffect(()=> {\n   if(location.state){\n      const {userLists,scrollPosition} = location.state;  \n      setData(userLists)\n      scrollRef.current.style.backgroundColor = 'red'\n      setTimeout(() => {\n        scrollRef.current.scrollTop = scrollPosition\n      }, (10));\n   }else{\n      getDataFromApi();\n   }\n},[])\n```\n\n기억하세요, setTimeout 내부의 코드는 잠시 지난 후에 실행되며 스크롤 위치를 조정하기 전에 DOM이 안정화됩니다.\n\n그리고 다음은 이 기능을 적용하는 방법의 예시입니다.\n\n```js\nimport './App.css';\nimport { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter, Route, Routes, useLocation, useNavigate } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n     <Routes>\n       <Route path=\"/news\" element={<UserLists />}/>\n       <Route path=\"/userDetails\" element={<UserDetails />}/>\n     </Routes>\n    </BrowserRouter>\n  );\n}\n\nconst UserLists = () => {\n  const [data,setData] = useState([]);\n  const [scrollPosition,setScrollPosition] = useState();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const scrollRef = useRef();\n\n  useEffect(()=> {\n    if(location.state){\n      const {userLists,scrollPosition} = location.state;  \n      setData(userLists)\n      scrollRef.current.style.backgroundColor = 'red'\n      setTimeout(() => {\n        scrollRef.current.scrollTop = scrollPosition\n      }, (10));\n    }else{\n      getDataFromApi();\n    }\n  },[])\n\n\n  const getDataFromApi = async () => {\n    try{\n      const res = await axios.get('https://reqres.in/api/users');\n      setData(res.data.data);\n    }catch(err){\n      console.log(\"error\",err)\n    }     \n  }\n\n  const handleScroll = (event) => {\n    setScrollPosition(event.target.scrollTop)\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{overflowY: \"scroll\",height: '100vh'}} ref={scrollRef} onScroll={handleScroll}>\n        {data.map((info) => {\n          return (\n            <div\n              style={{backgroundColor: \"orange\"}}\n              onClick={() => {\n                navigate('/userDetails',{state: {userLists: data,scrollPosition,userInfo: info}})\n              }\n            >\n              <h2>{info.email}</h2>\n              <h2>{info.first_name}</h2>\n              <h2>{info.last_name}</h2>\n              <img src={info.avatar} />\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst UserDetails = () => {\n  const [userInfo,setUserInfo] = useState();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(()=> {\n    if(location.state){\n      const {userInfo} = location.state;\n      setUserInfo(userInfo)\n    }\n  })\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          navigate('/news',{state: location.state})\n        }\n      >\n        Go back to user lists\n      </button>\n      <div\n        style={{backgroundColor: \"skyblue\"}}\n      >\n        <h2>{userInfo?.email}</h2>\n        <h2>{userInfo?.first_name}</h2>\n        <h2>{userInfo?.last_name}</h2>\n        <img src={userInfo?.avatar} />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그게 전부에요...\n\n위의 방법은 사용자가 브라우저의 뒤로 가기 버튼을 누를 때 작동하지 않습니다. 이러한 경우에 작동하려면 로컬 스토리지에 상태와 스크롤 위치를 저장하고, 첫 렌더링 중에 useEffect에서 사용해야 합니다.\n\n질문이 있으시면 응답 섹션에서 물어봐 주세요.","ogImage":{"url":"/assets/img/2024-06-30-HowtomaintainstateandscrollpositioninReact_0.png"},"coverImage":"/assets/img/2024-06-30-HowtomaintainstateandscrollpositioninReact_0.png","tag":["Tech"],"readingTime":5},{"title":"웹에서 오른쪽에서 왼쪽으로 스타일링 하는 방법","description":"","date":"2024-06-30 22:39","slug":"2024-06-30-RighttoleftstylingfortheWeb","content":"\n\n## HTML에서 오른쪽에서 왼쪽 텍스트를 다루는 방법에 대한 이해\n\n![image](/assets/img/2024-06-30-RighttoleftstylingfortheWeb_0.png)\n\n# 왜 RTL?\n\n세계에는 (아랍어, 히브리어 등) 좌에서 우로 읽는 대신 우측에서 좌측으로 텍스트를 읽는 몇 개의 언어가 있습니다. 웹사이트에 RTL 지원을 추가하는 것은 간단하며 그것의 시장을 크게 높일 수 있습니다. RTL 언어에 대응하기 위해서는 개발자들은 특별한 방식으로 개발 프로세스를 적응시켜야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# RTL 지원 방법\n\n웹 애플리케이션에서 RTL 언어를 지원하는 경우 텍스트, 스크롤 막대, 진행 표시기, 버튼 등 모든 것이 반전되거나 뒤집힙니다. RTL을 지원하기 위한 개발 지침을 살펴보겠습니다.\n\n## HTML에 dir 및 lang 추가\n\n- `html` 요소에 dir=\"rtl\"을 추가합니다. 브라우저는 dir 태그를 해석하여 웹 사이트의 콘텐츠를 자동으로 뒤집고 렌더링합니다.\n- `html` 요소에 lang=\"ar\"과 같은 적절한 lang 속성을 추가합니다. lang 글로벌 속성은 요소의 언어를 정의하는 데 도움이 됩니다. 편집할 수 없는 요소의 언어를 작성하는 언어이거나 사용자가 편집 가능한 요소를 작성해야 하는 언어를 의미합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-30-RighttoleftstylingfortheWeb_1.png\" />\n\n## 오른쪽에서 왼쪽으로 레이아웃 지원하도록 CSS 조정하기\n\n브라우저가 direction 태그를 해석한다는 것을 배웠으니, 이제 CSS가 어떻게 해석되는지 살펴보겠습니다. 이미지와 텍스트가 서로 인접한 카드를 예로 들어보겠습니다.\n\n오른쪽의 카드는 텍스트가 오른쪽에서 왼쪽으로 렌더링되었지만, 여백과 이미지는 올바르게 해석되지 않습니다. RTL을 지원하려면 CSS를 수정해야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n방향 속성 값 수정\n이미지를 오른쪽으로 띄우고 왼쪽에 마진을 적용하면 렌더링 문제가 해결됩니다.\n\n```js\n.media img {\n    float: right;\n    margin-left: 20px;\n}\n```\n\n이 방법은 간단하고 이해하기 쉽지만 CSS를 추가로 작성해야 한다는 점이 단점입니다. 대안적인 방법을 살펴보겠습니다...\n\n논리적 CSS 속성 사용\n추가 CSS를 작성하는 수고를 덜기 위해, '논리적 속성'인 '시작'과 '끝'을 사용해 컨텐츠를 오른쪽에서 왼쪽으로 자동으로 정렬할 수 있습니다. '왼쪽'이나 '오른쪽' 대신에 '시작'이나 '끝'과 같은 논리적 속성을 사용하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리 코드를 수정하여 이미지에서 float를 제거하고 margin-right 대신 margin-inline-end를 추가해주세요.\n\n```js\n.media {\n    display: flex;\n}\n.media img {\n    margin-inline-end: 20px;\n}\n```\n\n여러 개의 스타일시트 생성하기\n가끔 논리적 속성이 원하는 결과를 내지 못할 때는 dir 속성으로 속성값을 덮어쓰는 것에 의존해야 합니다. 이때 CSS가 복잡해지고, 모든 오른쪽에서 왼쪽으로 가는 CSS를 별도의 파일로 이동하여 최적화할 필요가 있습니다.\n\n```js\n.wrapper {\n    position: absolute;\n    left: 0;\n}\n.media {\n    margin-left: 20px;\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모든 RTL 오버라이드를 포함하는 rtl.css 파일을 만들어보세요. 이 파일은 로케일(언어)에 따라 선택적으로 로드할 수 있습니다.\n\n```js\n[dir=\"rtl\"].wrapper {\n    right: 0;\n    left: initial;\n}\n[dir=\"rtl\"].media {\n    float: right;\n    margin-right: 20px;\n}\n```\n\n큰 프로젝트의 경우, 모듈화하고 하나의 rtl.output.css 파일로 컴파일하는 것이 좋습니다.\n\nRTL 스타일을 자동화하세요\n전통적인 LTR 언어용과 RTL용 두 개의 별도 CSS 파일을 컴파일하는 것은 최적화하는 또 다른 방법입니다. RTLCSS와 같은 도구를 사용하면 CSS의 RTL 대응파일을 자동으로 생성할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\noutput.css\np {\n    padding-left: 1em;\n    font-size: 1rem;\n}\n\noutput.rtl.css:\np {\n    padding-right: 1em;\n    font-size: 1rem;\n}\n```\n\nRTLCSS는 모든 방향에 민감한 CSS 속성을 완전히 지원합니다. 더 나아가 CSS 주석을 통해 처리 지시문 (무시, 앞에 추가, 대체, 제거, 이름 바꾸기 등)을 제공하여 명시적으로 제어할 수 있습니다. RTLCSS가 어떻게 작동하는지 확인해보세요.\n\n## 논리적 속성 더 알아보기\n\nCSS 논리적 속성과 값은 물리적이 아닌 논리적 방향 및 차원 매핑을 통해 레이아웃을 제어하는 기능을 제공합니다. 논리적 속성은 해당하는 물리적 속성의 방향상 등가물을 정의합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모든 주요 브라우저에서 상호 운용 가능한 지원을 받는 일반적으로 사용되는 논리 값들 —\n\n```js\ntext-align: start | end\njustify-content: flex-start | flex-end\nalign-content: flex-start | flex-end\ngrid-column-start: <value>\ngrid-column-end: <value>\ninline-size: <width>\nmargin-block-start/end: <value>\nmargin-inline-start/end: <value>\npadding-block-start/end: <value>\npadding-inline-start/end: <value>\nborder-inline-start/end: <value>\n```\n\n논리 속성과 값의 브라우저 지원 테스트 결과를 참조해주세요.\n\n## 마지막으로\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기사는 RTL 웹사이트에서 작업하는 구체적인 사항을 간략히 설명하는 것을 목표로 합니다. 더 많은 정보는 제공된 링크를 참조해주시기 바랍니다.\n\n이 기사를 읽어주셔서 감사합니다. 의겄하신 점에 대한 코멘트를 남겨주세요.\n\n감사합니다,\n-KK","ogImage":{"url":"/assets/img/2024-06-30-RighttoleftstylingfortheWeb_0.png"},"coverImage":"/assets/img/2024-06-30-RighttoleftstylingfortheWeb_0.png","tag":["Tech"],"readingTime":6},{"title":"기본적으로 반응형 디자인 적용하는 방법","description":"","date":"2024-06-30 22:38","slug":"2024-06-30-ResponsiveDesignbyDefault","content":"\n\n당신의 사이트가 표시되어야 하는 방식!\n\n![Responsive Design by Default](/assets/img/2024-06-30-ResponsiveDesignbyDefault_0.png)\n\n반응형 디자인을 위해 추가 작업을 하는 것이 실제로 가치 있는 일인지 궁금했던 적이 있나요?\n\n저는 분명히 궁금해했어요!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모든 미디어 쿼리, 추가 테스트 및 추가 작업이 지루하다면서요.\n\n하지만, 여기를 확인해보세요:\n\n![Responsive Design by Default](/assets/img/2024-06-30-ResponsiveDesignbyDefault_1.png)\n\nMD에서 60.67%의 트래픽이 발생한다니 미쳤죠!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 미친 건 뭔지 알아?\n\n암호화폐가 급부상하고 전체적으로 신경망 링크(우리 폰이 계속 연결돼 해쉬를 계산하는 것)가 늘어나면 이 숫자가 더욱 늘어날 것 같아.\n\n사용자 92.3%가 스마트폰을 통해 인터넷에 접속한다고 생각했어!\n\n아이고, 미친 소리 하네!?\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n세상에서 왜 거의 모든 사람들이 모바일 장치를 선호하는지 궁금하시죠?\n\n음, 사실 이 질문에 대해 너무 걱정할 필요는 없어요. 그저 그런 것이니까요. 하지만 그들의 삶을 더 쉽게 만들고 반응형 디자인을 진지하게 다루는 법에 대해 관심을 가지셔야 해요!\n\n제가 그 방법을 보여드리겠어요. 간단하고 쉽고 빠르죠!\n\n시작해볼까요?\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 소개\n\n반응형 디자인은 사용자가 다양한 기기에서 훌륭한 경험을 할 수 있어야 한다는 것을 의미합니다.\n\n차이가 무엇인가요?\n\n물론, 컴퓨팅 성능입니다. 하지만 요즘에는 중급 폰조차도 웹사이트의 계산이 중요하지 않을 정도로 많은 성능을 가지고 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n중요한 것은 화면 크기입니다.\n\n![Responsive Design](/assets/img/2024-06-30-ResponsiveDesignbyDefault_2.png)\n\n핸드폰에서 멋지게 보입니다.\n\n표시된 크기는 iPhone 12 Pro용입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 코드의 길\n\n오케이, 파티에 늦었을 수도 있지만, 제가 가장 사랑하고 감사히 여기는 것은: tailwindcss입니다.\n\n이 기사는 빠르고 효율적이며 쉽게 읽기 쉽도록 작성되었으니, 코드와 설명으로 바로 들어가 보겠습니다. 간결하게 유지하겠습니다!\n\n```js\n```\n <div className=\"flex\n flex-col\n md:flex-row\n flex-wrap\n items-center\n space-y-2\n md:space-y-0\n  md:space-x-3 \">\n <span className=\"text-purple-500 border border-purple-400 rounded-full px-2 py-1 shadow-sm shadow-purple-300\">Required TH: 16 </span>\n <span className=\"text-purple-700 border border-purple-600 rounded-full px-2 py-1 shadow-sm shadow-purple-400\">Required TH Trophies: 3000 </span>\n\n <span className=\"text-blue-500 border border-blue-400 rounded-full px-2 py-1 shadow-sm shadow-blue-300\">Required BH: 15 </span>\n <span className=\"text-blue-700 border border-blue-600 rounded-full px-2 py-1 shadow-sm shadow-blue-400\">Required BH Trohpies: 3000 </span>\n\n <span className=\"text-green-600 border border-green-400 rounded-full px-2 py-1 shadow-sm shadow-green-500\">Members: 39 </span>\n</div>\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서 무엇을 하고 있나요?\n\n만약 tailwindcss 확장 기능을 가지고 있다면, 이러한 모든 것들은 의미가 있고 그 뒤에 숨어있는 css 속성을 보여줄 것입니다.\n\n확장 기능에 따라, hover 상태에서 다음과 같이 보일 것입니다:\n\n![Responsive Design by Default](/assets/img/2024-06-30-ResponsiveDesignbyDefault_3.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n정말 멋지죠?\n\n이전 내용으로 돌아가봐요.\n\n여기 tailwindcss의 반응형 디자인에 관한 글이 있어요:\n\n보통 그들은 미리 작성된 지시사항을 함께 제공해요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제가 위에서 보여준 내용 중에는 다음과 같은 것이 있어요:\n\n```js\nmd:flex-row\n```\n\n이것은 중간 크기 이상의 기기에서 유연한 방향이 변경될 것을 의미합니다.\n\n매우 중요한 점은 이것을 변경할 수 있다는 점이지만 일반적으로 특정 픽셀 이상에서 특정한 디자인이 나타난다는 것을 알아야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저의 사용하는 꿀팁은 항상 핸드폰용으로 먼저 만들고 나서 PC용으로 꾸미는 것입니다!\n\n예시:\n\nPC에서는 이렇게 보입니다 (md:flex-row - 768px 이상)\n\n![Responsive Design by Default](/assets/img/2024-06-30-ResponsiveDesignbyDefault_4.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것이 핸드폰에서 보이는 방식입니다\n\n![Responsive Design](/assets/img/2024-06-30-ResponsiveDesignbyDefault_5.png)\n\n```js\n<div className=\"flex flex-col md:flex-row flex-wrap items-center space-y-2 md:space-y-0  md:space-x-3 \">\n```\n\n# 결론\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기 있어요!\n\n제 약속을 지켰어요. 간결하고 빠르며, 읽기 쉬울 거에요!\n\n반응형 디자인은 매우 중요하고 사용자 요구 사항에 추가로 신경 써야 해요!\n\n함께 해 주셔서 감사해요! 다음에 또 만나요!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n행복한 코딩하세요, 엔지니어 여러분!\n\n안전하고 건강하게 지내세요! 잘가 🚓","ogImage":{"url":"/assets/img/2024-06-30-ResponsiveDesignbyDefault_0.png"},"coverImage":"/assets/img/2024-06-30-ResponsiveDesignbyDefault_0.png","tag":["Tech"],"readingTime":7},{"title":"CSS만으로 검색 엔진 만들기 방법","description":"","date":"2024-06-30 22:36","slug":"2024-06-30-AsearchengineinCSS","content":"\n\n작년 11월에 dotCSS에서 발표하는 기회와 즐거움을 가졌어요. 모든 dotConferences는 고품질이지만 dotCSS가 제가 가장 좋아하는 행사에요. 거기서 본 강연들로 매년 영감을 받아왔어요. 대규모 청중들과 함께 무대에 서서 내 지식을 공유하는 것은 매우 즐거운 경험이었어요.\n\n# 4월 만우절 장난\n\n제가 한 발표는 지난 4월에 Algolia에서 한 만우절 장난의 기술적 설명이었어요. 4월 1일에 우리는 우리의 새로운 CSS API 클라이언트를 공개했고, 우리의 API 서버를 호출하지 않는 첫 번째 API 클라이언트를 발명했다고 발표했어요.\n\n이건 물론 장난이었지만, 우리는 사람들이 우리가 농담을 하는지 진지한 것인지 궁금해하기 시작할 만큼 매력적인 환상을 만들려고 노력했어요. 그 노력의 중심에는 실시간 데모가 있었어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![Image](https://miro.medium.com/v2/resize:fit:1400/1*FGZ2GoRtZPVMnuvsqLBF-A.gif)\n\n# 해킹 정신\n\n동료들과 함께 친근한 챌린지를 시작했는데, CSS로 검색 엔진의 기능을 모방하는데 얼마나 나아갈 수 있는지 보기 위한 것이었습니다. 그 결과로 실제로 작동하는 것을 얻을 수 있었어요!\n\n전체 데모는 해킹 정신으로 이루어졌습니다. 여기서 해킹은 취약점을 찾는 행위가 아니라, 시스템의 제한을 극복하여 새로운 결과를 얻는 행위로서 이루어졌습니다. 이 경우에는 시스템과 그 제한이 CSS이었고, 새로운 결과는 검색 엔진을 구축하는 것이었습니다.\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 우리가 검색 엔진의 본질에 다가간다면, 그저 키워드를 입력으로 기대하고 결과를 출력으로 제공하는 단순한 기계일 뿐이라는 것을 빨리 깨닫게 될 것입니다. 기계 안에서 어떤 일이 일어나느냐에 따라 검색 경험이 좋거나 평범해질 것입니다.\n\n물론 '그저 평범한' 검색 경험에 만족할 수 없었습니다. 좋은 검색을 이루는 세 가지 요소인 관련성, 속도 및 사용자 경험을 갖추어야 한다는 사실을 알고 있었습니다. 데모 결과에 대해 만족스러웠으며, 이 세 가지 요소를 충족시켰다고 생각했습니다. 물론 아직 향상될 여지는 있지만, CSS 해킹에 대해 꽤 우직한 결과라고 생각합니다.\n\n# CSS의 한계 극복하기\n\nCSS는 스타일링 언어이기 때문에 그 구성 요소는 고전적인 프로그래밍 언어와 다릅니다. Ruby, PHP, C++ 또는 JavaScript를 살펴보면 변수, 함수, 루프, 조건문 및 정규 표현식이 언어의 핵심 구성 요소로 있는 것을 확인할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCSS에는 그런 것이 없거나 적어도 그런 것이 다른 언어들처럼 표준으로 존재하지 않습니다. 검색 엔진을 만들기 시작할 때 변수, 반복문 및 정규 표현식이 필수적이라고 생각할 수 있습니다. 그리고 만약 언어가 이러한 기능을 제공하지 못한다면, 언어로는 검색 엔진을 만들 수 없을 것이라고 생각할 수도 있습니다.\n\n저는 실제로 CSS로 검색 엔진을 만들고 싶었기 때문에 이것이 저를 막게 두지 않으려 했습니다. 이것을 수행할 수 없다고 생각하며 프로젝트를 시작할 수 없었습니다. 그래서 CSS가 할 수 없는 것에 초점을 맞추지 않고, 오히려 제대로 수행할 수 있는 부분에 집중하기로 결정했습니다.\n\n빠르게 깨달은 것은 CSS의 주요 강점이 선택자 엔진에 있다는 것입니다. CSS는 요소를 타겟팅하기 위해 태그 이름, 클래스 이름, 아이디, 속성 값 또는 심지어 마크업에서 조상 또는 형제 요소를 사용할 수 있습니다. 그리고 무엇보다, 이러한 선택자를 조합하여 매우 정확한 것을 만들 수 있습니다.\n\nCSS는 스스로 작동할 수 없습니다. 항상 CSS를 적용할 HTML이 필요합니다. 그러나 HTML이 가장 지저분하고 의미가 없는 파일이더라도, 원하는 것을 정확하게 타겟팅할 수 있는 완벽한 CSS 선택자를 만들 수 있습니다. HTML에 수많은 잠재적이고 관련없는 요소가 있더라도, CSS는 여전히 당신이 관심 있는 요소만 타겟팅할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n크고 다양한 선택지에서 관련 항목만 선택할 수 있는 능력은 매우 중요합니다. 이것이 바로 검색 엔진에서 기대하는 바와 일치합니다.\n\n![검색 엔진 이미지](/assets/img/2024-06-30-AsearchengineinCSS_0.png)\n\n검색 엔진을 사용하면 많은 결과가 나올 수 있지만, 단어와 관련된 것만 관심이 있습니다.\n\n이것을 깨달았을 때, 무언가를 알아냈다고 느꼈습니다. CSS의 강점을 검색 엔진의 원하는 결과와 일치시킬 수 있다면, 이 실제 데모를 만들 수 있을 것이라고 생각했습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 작은 작업부터 마크업 제작을 시작해 보세요\n\n전체 해킹은 매우 간단한 마크업을 기반으로 합니다. 필요한 것은 `input` (검색 바 역할)과 비어 있는 `div` (결과를 보유할 것) 뿐입니다:\n\n`input[value=”tim” i]`를 선택기로 사용하면 실제로 현재 값에 따라 input을 선택할 수 있습니다. 여기서 ` i`를 사용하여 대소문자를 구분하지 않는 것을 지정합니다.\n\n거기에 `~ #result`를 선택기에 추가할 수도 있습니다. 이렇게 하면 이제 입력란 뒤에 위치한 ``div id=”result”``를 선택합니다. 이제 비어 있는 div를 대상으로할 수 있으므로 `:before` 의사요소와 일부 `content`를 사용하여 스타일과 내용을 완전히 변경할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n최종 CSS 선택자는 이렇게 생겼어요:\n\n여기까지 오면 페이지의 어딘가에 있는 입력 요소의 값에 따라, 다른 완전히 관련없는 요소의 내용과 스타일을 변경할 수 있는 CSS 선택자가 생기게 됩니다.\n\n이 긴 선택자는 전체 해킹의 중심이지만 작은 단점이 있어요: 실제로 잘 작동하지 않아요.\n\n# JavaScript가 해결책이에요\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n처음 페이지를 로드할 때 검색 창이 실제로 비어 있기 때문에 그렇게 동작하지 않습니다. 따라서 HTML의 `value` 속성은 빈 문자열로 설정됩니다.\n\n입력란에 무언가를 입력하기 시작하면 `input` 요소의 HTML `value` 속성이 업데이트되지 않습니다. 입력란에 입력하는 것은 동적 값만 업데이트하며, 마크업에 있는 정적 값은 업데이트되지 않습니다. 정말 안타까운 일이지요. 왜냐하면 CSS가 읽는 것이 바로 이 정적 값이기 때문이죠.\n\n그 시점에서, Enter를 눌러 간단히 양식을 제출할 수 있었을 겁니다. 서버 측에서 양식 값을 가로채어 마크업에 다시 작성하고 페이지를 다시 렌더링했을 텐데요. 동작은 되었겠지만 빠르지 않았을 겁니다. 그리고 저는 정말 즉각적인 결과를 원했기 때문에 JavaScript를 사용해야 했습니다.\n\nJavaScript를 사용하지 않고 순수 CSS 솔루션을 유지하고 싶었지만 방법을 찾지 못했습니다. 만약 여러분 중에 JavaScript를 사용하지 않는 방법을 아시는 분이 계시다면 알려주세요!\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어쨌든, 제가 추가한 JavaScript는 정말 최소한이었어요. 입력란에 간단한 `oninput` 핸들러가 있어요. 이 핸들러는 동적 값읽고 이를 HTML `value` 속성에 설정할 거예요. 입력이 변할 때마다 트리거되어, 내가 원하는 대로 즉각적인 결과를 얻을 수 있도록 해줄 거에요.\n\n# 여러 결과\n\n지금까지 내가 가진 마크업은 올바른 키워드를 입력할 때마다 한 결과만 표시할 수 있어요. 전부 일치하는 결과를 표시하고 싶어요. 예를 들어, \"Alexandre\"를 검색하면 회사에 \"Alexandre\"라는 이름을 가진 모든 사람을 표시하고 싶어요.\n\n그것을 위해, 마크업을 약간 수정하면 돼요. 결과를 보유할 빈 `div` 하나 대신 150개의 빈 `div`를 만들어요. 잠재적 결과 하나당 하나씩, 즉 하나당 직원 한 명씩 만들면 돼요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n또한, 각 `div`에 직원의 이름을 미리 채워 넣을 것입니다. 여기서도 `:before`와 `content` 기법을 사용할 것이지만, 이러한 `div`들을 실제로 표시하지는 않을 거에요. 기본적으로 모든 `div`는 `display: none`을 가지게 될 거에요.\n\n특정한 상황에서만 표시할 겁니다. 일치하는 키워드가 입력될 때만 해당 `div`의 `display`를 `block`으로 변경할 것이에요.\n\n이제 `Alexandre`를 입력할 때, 실제로 `#result15`, `#result16`, 그리고 `#result17`이 표시 될 거에요. 나머지는 숨겨져 있을 거에요.\n\n# 검색 엔진 이해하기\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그 시점에서 난 이미 결과에 대해 꽤 만족했어요. 입력한 키워드에 기반한 결과를 표시하는 방법을 알았거든. 이제 질문은 \"어떤 키워드가 결과를 내야 하는가?\"로 바뀌었죠.\n\n내가 그 문제에 도달했을 때, 나는 이미 크게 만족한 상태였어요. 입력한 키워드에 기반한 결과를 표시하는 방법을 알고 있었거든. 이제 질문은 \"어떤 키워드가 결과를 내야 하는가?\"로 전환되었어요.\n\n그때, 나는 프로젝트에서 한 걸음 물러나서 내가 무엇을 달성하려고 하는 지 정말로 이해하려고 결정했어요. 지금까지 나는 대부분 영리한 CSS 해킹을 사용하여 도전에 대처했었거든. 그러나 더 나아가고 싶다면, 내가 무엇을 구축하고 있는지 실제로 더 잘 이해해야 했어요.\n\n다행히도, Algolia에서 일하면서 하루 종일 검색 엔진을 사용하고 구축하는 사람들에게 둘러싸여 있어요. 몇몇 동료와 함께 앉아서 검색 엔진이 실제로 어떻게 작동하는지 설명해 주었어요.\n\nAlgolia, ElasticSearch 또는 Solr와 같은 모든 검색 엔진은 두 부분으로 구성되어 있어요: 인덱싱과 검색이에요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n검색은 가장 명백할 수도 있습니다. 검색 바를 사용할 때마다 우리가 직면하는 것입니다. 검색 바에 무언가를 입력할 때마다 우리는 내적으로 \"제가 `alex`를 입력하면 무엇을 찾을까?\"라는 질문을 하게 됩니다.\n\n하지만 실제로 검색 엔진을 구축할 때는 매우 다른 집합의 질문을 해야 합니다. 모든 잠재적인 결과를 고려하고 \"사용자가 `Alexandre Meunier`를 찾기 위해 무엇을 입력해야 할까?\"라고 스스로 물어보셔야 합니다.\n\n![이미지](/assets/img/2024-06-30-AsearchengineinCSS_1.png)\n\n그래서 제가 이 직원 목록을 가져와보았습니다. 그들을 찾기 위해 무엇을 입력해야 하는지 알아보고 싶었습니다. `alex`라고 입력하면 Alexandre라는 이름을 가진 모든 사람을 찾고 싶었습니다. 사실, `alex`는 Alexander, Alexandra 또는 Alexandria 같이 이름이 있는 사람들도 찾아야 합니다...\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 나아가보면 좋겠죠. `ale`, `al` 또는 `a`만 입력하면 'alex'라는 이름을 가진 모든 사람을 찾을 수 있어야 해요. 또한 `alexandr`을 입력하면 Alexandre, Alexandra 및 Alexandria도 모두 찾을 수 있어야 해요.\n\n그러나 성과 직급으로도 사람들을 찾고 싶었어요...\n\n# n-그램 구축\n\n내가 한 결정은 직원 목록에서 결과로 이끌 수 있는 모든 잠재적 n-그램을 생성한 거에요. n-그램은 결과로 이끌 수 있는 문자 시퀀스를 나타내요. 예를 들어 `t`, `ti`, `tim`은 모두 `Tim`을 찾을 수 있는 n-그램이에요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n물론, 수작업으로 그것을 하지 않았어요 — 문자열에서 n-그램을 생성하는 데 도움을 주는 루비 스크립트를 작성했어요. 이 스크립트를 직원 이름에 적용하고 그 결과를 사용하여 다음과 같이 보이는 긴 CSS 선택기 목록을 작성했어요:\n\n![CSS Selector](/assets/img/2024-06-30-AsearchengineinCSS_2.png)\n\n이런 식으로 선택기를 사용하면 어떤 성을 입력해도 일치하는 결과가 표시됩니다. 매우 상세하지만 실제로 작동해요.\n\n생성된 최종 CSS는 매우 길어요. 150명의 모든 직원의 이름, 성, 직책에 대해 이 작업을 수행해야 하기 때문이에요. 이 단계에서 더 많은 기능을 추가하기 시작해요. 해당 해킹을 사용하기 쉽게 만들고자 악센트 문자, 동의어 및 일부(제한된) 오탈자 허용 기능도 추가했어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 디스플레이 개선\n\n마지막으로 추가한 세부 정보는 검색 엔진을 더 쉽게 사용할 수 있도록 만들었습니다. 'order' 속성을 사용하여 결과를 정렬했습니다. 관련된 결과를 함께 그룹화했습니다: 이름이 일치하는 경우 성과 일치하는 경우보다 더 높은 순위로 표시됩니다.\n\n또한 입력한 키워드가 결과에서 굵게 표시되도록 강조 기능을 추가했습니다. 강조 기능은 종종 간과되는 검색 엔진의 중요한 부분입니다. 이는 사용자에게 해당 결과가 포함되어 있는 이유를 설명하는 방법입니다.\n\n여기서 어려운 점은 모든 콘텐츠를 ':before'와 'content'를 통해 추가했기 때문에 HTML이 없이 순수한 텍스트만 CSS에 이미 포함되어 있었다는 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n특정 부분을 굵게 표시하려면 조금 교묘하게 해야 했어요. 일반 글ꔿ과 굵은 글ꔿ을 합쳐 새로운 폰트를 만들었죠. 모든 굵은 글리프를 UTF8의 사설 사용 영역에 넣었어요. 이 부분은 어떤 글리프든 넣을 수 있는 특정한 이름 공간이에요. 결과적으로 저에게는 일반 문자의 굵은 버전과 똑같이 보이는 글리프 세트가 생겼어요. 그리주 우스꽃 코드 포인트를 통해 접근할 수 있어요.\n\n![이미지](/assets/img/2024-06-30-AsearchengineinCSS_3.png)\n\n필요할 때 일반 글리프를 그들의 굵은 버전으로 교체하기만 하면 돼요. CSS는 완전히 해독할 수 없게 되는데 잘 작동돼요. 다만 이 방법을 이전에 생성된 각 n-gram에 대해 해야 하기에 CSS 파일 크기가 더욱 커지는 단점이 있어요.\n\n# 결론\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n최종 CSS 파일은 8MB였는데, minify를 하여 5MB로 줄였어요. 그래도 여전히 너무 많아요. 그래서 누구에게나 이를 제작용으로 사용하지 말아 당부드릴게요!\n\n프로젝트 전체가 처음에는 미친 것처럼 또는 불가능한 것처럼 보일 수도 있었지만, 제가 항상 말하듯이:\n\n![AsearchengineinCSS](/assets/img/2024-06-30-AsearchengineinCSS_4.png)\n\n이처럼 이러한 프로젝트를 만들면서 배운 한 가지는, 언어를 사용하여 의도되지 않은 일을 할 때 놀라운 학습 경험이 된다는 것이에요. CSS의 강점과 약점에 대해 많이 배웠고, 그 한계까지 밀어내면서 많은 것을 배우게 되었어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저절로 만들다세요, CSS(또는 어떤 다른 언어든지)로 열정을 쏟아붓는 것을 권장하고 싶네요. 이런 시도를 통해 해당 언어를 사용하는 가장 좋은 방법을 명확히 이해할 수 있을 거에요.\n\n몇몇 분들에게 영감을 줄 수 있었다면 좋겠고, 여러분이 무엇을 만들 것인지 궁금하네요 — 언제든 댓글이나 트윗을 남겨주세요!","ogImage":{"url":"/assets/img/2024-06-30-AsearchengineinCSS_0.png"},"coverImage":"/assets/img/2024-06-30-AsearchengineinCSS_0.png","tag":["Tech"],"readingTime":12},{"title":"구조 vs 스타일 HTML과 CSS 완벽 이해하기","description":"","date":"2024-06-30 22:35","slug":"2024-06-30-StructurevsStyleDemystifyingHTMLandCSS","content":"\n\n소개\n\n말 없이 이야기를 쓸 수 있나요, 혹은 색깔 없이 걸작을 그릴 수 있나요? 웹사이트를 만드는 것은 콘텐츠 구조(HTML)와 시각적 스타일(CSS) 두 마리 토끼를 잡아야 합니다. 웹사이트를 하나의 집으로 상상해보세요. 콘텐츠 구조(HTML)는 설계도처럼 작용하여 방, 복도 및 문을 정의합니다. 그러나 설계도만으로는 집이 시각적으로 매력적이지 않습니다. 여기서 CSS가 등장합니다. CSS는 집안의 디자이너처럼 작용하여 색상, 질감 및 가구(스타일)를 추가하여 집을 생동갑게 만듭니다. HTML은 필수적이지만 시각적으로 매력적인 웹사이트를 만들려면 CSS가 필요합니다. HTML과 CSS의 핵심 기능을 이해했으니, 웹 개발에서 각각의 역할에 깊이 관여해봅시다.\n\n그렇다면, HTML은 무엇일까요?\n\nHTML은 HyperText Markup Language의 약자로, 웹 페이지를 만들기 위한 기본 구성 요소입니다. 이는 프로그래밍 언어가 아닌, 대신 웹 페이지의 구조와 콘텐츠를 정의하기 위해 태그를 사용하는 마크업 언어입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCSS는 무엇인가요?\n\nCSS는 Cascading Style Sheets의 약자로, 웹 페이지의 시각적 표현을 정의하는 언어입니다. 이는 구조와 콘텐츠를 제공하는 HTML과 협력하여 작동합니다.\n\n# 기초: HTML의 힘을 발휘하기\n\n이제 HTML이 무엇인지 이해했으니, 그 기능을 탐험해봅시다. 이 기사에서는 사용자 이름, 비밀번호 및 제출 버튼을 요청하는 양식을 생성할 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login Form</title>\n</head>\n<body>\n  <h1>Login</h1>\n  <form>\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required>\n    <br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required>\n    <br>\n    <button type=\"submit\">Login</button>\n  </form>\n</body>\n</html>\n```\n\n![Structure vs Style: Demystifying HTML and CSS](/assets/img/2024-06-30-StructurevsStyleDemystifyingHTMLandCSS_0.png)\n\n# 시각적 화려함: CSS의 마법 탐험\n\n이제 CSS가 이 내용을 변형하고 시각적으로 매력적으로 만들 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Login Form</title>\n</head>\n<body>\n  <h1 style=\"text-align: center; margin-bottom: 20px;\">Login</h1>\n  <form>\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Enter your username\" required style=\"width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 3px;\">\n    <br>\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Enter your password\" required style=\"width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 3px;\">\n    <br>\n    <button type=\"submit\" style=\"background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 3px; cursor: pointer;\">Login</button>\n  </form>\n</body>\n</html>\n\n\n![Understanding the Distinction: Key Differences Between HTML and CSS](/assets/img/2024-06-30-StructurevsStyleDemystifyingHTMLandCSS_1.png)\n\n# Understanding the Distinction: Key Differences Between HTML and CSS\n\n![Understanding the Distinction: Key Differences Between HTML and CSS](/assets/img/2024-06-30-StructurevsStyleDemystifyingHTMLandCSS_2.png)\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# HTML과 CSS의 유사점\n\n- HTML과 CSS 모두 웹 페이지를 만들고 디자인하는 데 사용됩니다.\n- 두 가지 모두 웹의 기본 구성 요소이며 동적이고 시각적으로 매력적인 웹 페이지를 만들기 위해 함께 사용됩니다.\n- HTML과 CSS는 모두 웹 페이지의 요소와 스타일을 정의하기 위해 마크업 언어를 사용합니다.\n- 서로 다른 목적을 가지고 있지만, HTML과 CSS 모두 웹 사이트의 사용자 경험을 형성하는 데 중요한 역할을 합니다. 잘 구조화된 HTML 콘텐츠와 시각적으로 매력적인 CSS 스타일은 사용자 친화적이고 매력적인 웹 경험에 기여합니다.\n\n결론적으로, HTML과 CSS는 웹 개발의 분리할 수 없는 중추입니다. HTML은 구조와 콘텐츠를 제공하며 웹 사이트의 청사진 역할을 하며, CSS는 시각적 스타일로 그 요소를 살아나게 합니다. 두 가지가 함께하면 사용자 친화적이고 시각적으로 매력적인 웹 사이트를 만들기 위한 기반을 조성합니다. 이 두 가지 언어를 이해하는 것은 웹 개발 세계에 뛰어들고자 하는 모든 사람에게 필수적입니다.\n\nHNG 메토십 프로그램에서 기대하는 점\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사실, 저는 실제 프로젝트에 참여하여 같은 마음가짐을 가진 사람들과 협력하여 혁신적인 해결책을 만들기를 기대하고 있어요.\n\nHNG는 디지털 스킬을 배우기 위한 빠르고 집중적인 부트캠프입니다. 초보자와 일정 수준의 선행 지식을 가진 사람들을 위해 중점을 두며 구직 제안을 위해 사람들을 준비시킵니다. HNG에 대해 더 알고 싶다면 여기를 클릭해주세요.\n\nHNG는 ReactJS, 자바스크립트 프레임워크를 사용합니다. 저는 ReactJS를 사용하여 몇 가지 프로젝트를 개발했기 때문에 ReactJS와 함께 나오는 도전에 흥미를 느낍니다. 리액트에서 컴포넌트가 재사용 가능하다는 것을 좋아해요. ReactJS를 더 탐구할 수 있는 기회를 제공해줘요.\n\n내가 진심으로 노력하는 모든 일은 항상 성취하는 것을 알고 있어요.","ogImage":{"url":"/assets/img/2024-06-30-StructurevsStyleDemystifyingHTMLandCSS_0.png"},"coverImage":"/assets/img/2024-06-30-StructurevsStyleDemystifyingHTMLandCSS_0.png","tag":["Tech"],"readingTime":5},{"title":"오브시디언 사용자 인터페이스 맞춤 설정하는 방법","description":"","date":"2024-06-30 22:34","slug":"2024-06-30-CustomizingObsidiansUserInterface","content":"\n\n\n![Obsidian UI](/assets/img/2024-06-30-CustomizingObsidiansUserInterface_0.png)\n\nObsidian의 인터페이스는 처음 보았을 때 혼란스러울 수 있습니다. 왼쪽에는 많은 버튼들이 있어 익숙해지는 데 시간이 걸립니다. 저는 UI에 익숙해졌지만, 그것이 좋아한다는 것은 아니었습니다. 너무나 냉소적이어서 사용하기 좋다고 말할 순 없었어요.\n\n## CSS Snippets 플러그인\n\n그 후, 사용자 경험을 향상시킬 수 있는 플러그인을 찾아보았습니다. CSS Snippets 플러그인이라는 것을 발견했습니다. 제작자는 Daniel Brandenburg입니다.\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n뭐하는 건가요? Obsidian의 사용자 인터페이스에 자체 CSS 코드를 삽입할 수 있게 해줍니다. 참 멋지죠? 이 기능을 사용하면 사용자 인터페이스를 매우 쉽게 사용자 정의할 수 있습니다.\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*fEz7-czhXumkYmNyHYIrKA.gif)\n\n무한한 가능성이 있습니다. 이제 Obsidian을 개인 취향에 맞게 조정할 수 있습니다. 제가 가장 중요하게 생각한 것은 일반적인 배경이 마음에 들지 않았다는 것이었습니다. 그래서 꾸며 주었고, 이제 훨씬 우아하게 느껴집니다. 솔직히 이것이 생산성을 향상시키지는 않을 것입니다. 하지만 Obsidian을 사용하는 것이 훨씬 즐거워질 것입니다.\n\n제 경우에는 그랬습니다. 이제 제 취향에 맞는 곳이 있어 Obsidian에 이전보다 훨씬 더 많은 시간을 보내게 되었습니다. Obsidian이 어떻게 보이는지 좋아하게 되었기 때문입니다. 이에 흥미를 갖는 사람들이 놀랍게도 많지 않습니다: 플러그인 다운로드 횟수가 14,000회가 조금 넘는 정도입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n읽어 주셔서 감사합니다! 제 작은 글이 Obsidian에 더 따뜻한 디자인을 선사하는 데 도움이 되었으면 좋겠네요.","ogImage":{"url":"/assets/img/2024-06-30-CustomizingObsidiansUserInterface_0.png"},"coverImage":"/assets/img/2024-06-30-CustomizingObsidiansUserInterface_0.png","tag":["Tech"],"readingTime":2},{"title":"Nodejs, Typescript, Eslint, Prettier 설정하기 한 번에 끝내는 방법","description":"","date":"2024-06-30 22:33","slug":"2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier","content":"\n\n이 글은 typescript, eslint 및 prettier와 함께 즉시 nodejs 서버를 설정하는 방법에 대해 안내해줄 것입니다. 이 글을 따라 boilerplate를 얻어 애플리케이션을 구축하는 데 집중할 수 있습니다.\n\n이 프로젝트에서는 yarn 패키지 매니저를 사용할 것이며, npm 또는 기타 패키지를 사용할 수도 있습니다.\n\n# 단계 1 — 프로젝트 초기화\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저 프로젝트 디렉토리를 만들어주세요. 터미널에서 서버를 생성하고 yarn을 사용하여 초기 설정을 진행해보세요.\n\n```js\nyarn init\n```\n\n이 명령을 실행하면 여러 질문이 나오는데, 필요에 맞게 답변해 주시면 됩니다.\n\n![이미지](/assets/img/2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier_1.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n또한 프로젝트 디렉토리 내에 src 디렉토리를 생성하여 소스 코드를 유지하고 관리하기 쉽게 유지할 것입니다.\n\n![이미지](/assets/img/2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier_2.png)\n\n# 단계 2 — TypeScript 추가\n\n프로젝트에 typescript 패키지를 추가해야 합니다. TypeScript 컴파일러 및 관련 도구를 사용할 수 있게 될 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nyarn add typescript --dev\n```\n\n이 명령어를 실행하면 프로젝트에 typescript 패키지를 개발 의존성으로 추가할 수 있어요.\n\n이제 typescript 구성 파일을 추가해야 합니다. 아래 명령어를 사용해 구성 파일을 생성해보세요.\n\n```js\nyarn tsc --init\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 이미지에 보이는 대로 기본 컴파일러 구성을 가진 tsconfig.json 파일을 만들겠습니다.\n\n![이미지](/assets/img/2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier_3.png)\n\ntsconfig.json 파일에서 주석 처리된 rootDir 옵션을 제거하고 수정하여 typescript의 루트 디렉토리를 src로 설정합니다.\n\n```js\n\"rootDir\": \"./src\",\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마찬가지로, outDir 옵션도 동일하게 변경해주세요.\n\n```js\n\"outDir\": \"./build\",\n```\n\nsrc 폴더 안에 있는 .ts 파일을 컴파일한 후, 모든 .js 파일은 이 build 폴더에 생성될 것입니다.\n\n마지막으로, tsconfig.json 파일 끝에 이 두 옵션도 추가해주세요. 이는 컴파일러에게 어떤 파일을 컴파일할지 알려줄 것입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```json\n{\n    // \"skipDefaultLibCheck\": true,                      /* TypeScript와 함께 포함된 .d.ts 파일의 유형 검사를 건너뛰기. */\n    \"skipLibCheck\": true                                 /* 모든 .d.ts 파일의 유형 검사를 건너뛰기. */\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\"node_modules\"],\n```\n\n이제 모든 것이 잘 작동하는지 확인하려면 src 폴더 내에 index.ts 파일을 만드세요. 그 안에 코드를 넣고 터미널에서 yarn tsc를 실행하세요. build 폴더 내에 index.js 파일이 생성된 것을 볼 수 있습니다.\n\n코드에서 빨간 선이 보인다면, 아마 Node.js 런타임 및 해당 모듈에 대한 유형 정의를 제공하는 패키지를 추가해야 할 수도 있습니다.\n\n```json\nyarn add -D @types/node\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 3 — TypeScript용 스크립트 추가\n\n프로젝트에 대한 개발 및 시작 스크립트를 추가해야 합니다. 개발 환경에서 변화를 감지하기 위해 nodemon을 사용할 것입니다. 그러나 별도의 빌드 단계 없이 Node.js에서 직접 TypeScript 파일을 실행할 수 있도록 ts-node 패키지를 사용해야 합니다.\n\n```js\nyarn add -D nodemon ts-node\n```\n\n아래 스크립트를 package.json 파일에 추가해주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n  \"scripts\": {\n    \"dev\": \"nodemon src/index.ts\",\n    \"start\": \"node build/index.js\",\n    \"build\": \"tsc\"\n  }\n```\n\n이제 yarn dev 명령을 사용하여 개발 서버를 시작할 수 있습니다. Nodemon과 ts-node는 ts 파일의 변경 사항을 직접 감지하고 서버를 다시 시작할 것입니다.\n\n# 단계 4 — Eslint 추가\n\nEslint를 추가하기 위해 아래에 제공된 필요한 패키지를 설치하겠습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nyarn add --dev eslint @eslint/js @types/eslint__js typescript typescript-eslint\n```\n\n지금 프로젝트 디렉토리의 루트에 eslint.config.mjs 파일을 만들고 아래의 코드를 추가해주세요.\n\n```js\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  ...tseslint.configs.recommended,\n  {\n    ignores: ['node_modules', 'build'],\n  }\n);\n```\n\n이제 터미널에서 `yarn eslint .`을 실행하면 eslint가 작동하는 것을 확인할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier_4.png\" />\n\n패키지.json 파일에 eslint를 위한 스크립트도 추가할 수 있어요.\n\n```js\n \"lint\": \"eslint src/**/*.ts\",\n  \"lint:fix\": \"eslint src/**/*.ts --fix\",\n```\n\n# 단계 5 — Prettier 추가하기\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트에 prettier 패키지를 추가하세요.\n\n```js\nyarn add --dev --exact prettier\n```\n\n이제 프로젝트 루트에 .prettierrc와 .prettierignore 파일을 만드세요.\n\n.prettierrc 파일에 prettier의 기본 구성을 포함시킵니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n{\n    \"trailingComma\": \"es5\",\n    \"tabWidth\": 4,\n    \"semi\": false,\n    \"singleQuote\": true\n}\n```\n\n또한, 우리는 prettier에게 어떤 파일을 서식을 지정하지 말아야 하는지 알려주어야 합니다. .prettierignore 파일 안에 다음을 포함시킵니다.\n\n```js\n# 아티팩트 무시:\nbuild\ncoverage\n```\n\n마지막으로, package.json 파일에 prettier를 위한 스크립트를 추가할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n\"format\": \"prettier . --write\"\n```\n\n프로젝트를 포맷팅하려면 터미널에서 yarn format을 실행할 수 있습니다.\n\n![Image](/assets/img/2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier_5.png)\n\n# 결론\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 프로젝트를 시작할 준비가 끝났어요.\n\n또한 Git 훅을 추가하여 각 커밋 전에 서식 지정 및 린팅을 수행할 수 있습니다. 이를 위해 husky와 lint-staged가 사용됩니다. 저는 husky와 lint-staged가 사용된 Github 레포지토리 https://github.com/Pushpendra100/Nodejs-backend-boilerplate 를 만들었어요. 이 레포지토리를 방문하여 husky와 lint-staged를 어떻게 포함시키는지에 대한 아이디어를 얻을 수 있어요.\n\n즐거운 코딩! ✌️","ogImage":{"url":"/assets/img/2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier_0.png"},"coverImage":"/assets/img/2024-06-30-HowtosetupNodejswithTypescriptEslintandPrettier_0.png","tag":["Tech"],"readingTime":8},{"title":"JavaScript ForEach 사용 시 겪는 4가지 주요 문제점","description":"","date":"2024-06-30 22:32","slug":"2024-06-30-4MajorProblemswithJavaScriptForEach","content":"\n\n<img src=\"/assets/img/2024-06-30-4MajorProblemswithJavaScriptForEach_0.png\" />\n\n자바스크립트 열정가인 여러분은 이미 forEach 루프를 사용해 본 경험이 있을 것입니다.\n\n그러나 해당 기능을 사용하기 전에 해결해야 할 주요 문제 4가지를 알고 계셔야 합니다.\n\n오늘은 각 문제를 군사 테마의 예시를 통해 살펴보겠습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그래서 더 이상 미루지 말고... 바로 시작해 봅시다!\n\n# 1. 중단 또는 계속할 수 없음\n\n시작하기 전에 이 JavaScript 프로그램을 살펴보겠습니다:\n\n```js\nconst soliders: string[] = [\"John\", \"Daniel\", \"Cole\", \"Adam\"]\n\nsoliders.forEach((soldier, index) => {\n  soliders[index] = \"Captain \" + soldier\n})\n\n// [ \"Captain John\", \"Captain Daniel\", \"Captain Cole\", \"Captain Adam\" ]\nconsole.log(soliders)\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리의 시나리오는 간단해요:\n\n- 우리는 병사들의 배열을 가지고 있어요.\n- 각 병사마다, \"Captain\"이라는 말을 이름 앞에 추가하여 승진시킵니다.\n\n하지만 \"Daniel\"을 대장으로 승진시키고 싶지 않다면 어떻게 해야 할까요?\n\n해당 반복을 건너뛰기 위해 continue 키워드를 사용하고 싶을 수 있어요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nconst soliders: string[] = [\"John\", \"Daniel\", \"Cole\", \"Adam\"]\n\nsoliders.forEach((soldier, index) => {\n  if (soldier === \"Daniel\") {\n    continue\n  }\n  soliders[index] = \"Captain \" + soldier\n})\n\n// [ \"Captain John\", \"Captain Daniel\", \"Captain Cole\", \"Captain Adam\" ]\nconsole.log(soliders)\n```\n\n하지만 이것은 작동하지 않고 구문 오류가 발생합니다.\n\nforEach 루프의 흐름은 중단할 수 없습니다. 따라서 이 문제를 해결하는 유일한 방법은 조건문을 사용하는 것입니다:\n\n```js\nsoliders.forEach((soldier, index) => {\n  // 루프는 항상 실행되며, 순회를 건너뛸 수 없습니다.\n  if (soldier !== \"Daniel\") {\n    soliders[index] = \"Captain \" + soldier\n  }\n})\n\n// [ \"Captain John\", \"Daniel\", \"Captain Cole\", \"Captain Adam\" ]\nconsole.log(soliders)\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 반복을 중단/계속하고 싶다면, \"for i\" 루프 클래스나 \"for of\" 루프 문을 사용하는 편이 좋습니다.\n\n# 2. 비동기 실행\n\n병사 진급이 동기적일 때는 진급 순서가 존에서 아담으로 오름차순으로 진행됩니다.\n\n이제 비동기 함수가 있다고 가정해 봅시다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`forEach` 루프는 비동기 함수의 완료를 기다리지 않기 때문에 예상치 못한 출력 순서가 발생할 수 있습니다.\n\n각 반복에 대해 임의의 지연 시간을 설정하여 비동기 함수를 시뮬레이션해 보겠습니다:\n\n```js\nconst soliders = [\"John\", \"Daniel\", \"Cole\", \"Adam\"]\n\nsoliders.forEach((soldier, index) => {\n  setTimeout(() => {\n    soliders[index] = \"Captain \" + soldier\n    console.log(soliders)\n  }, Math.random() * 1000) // 최대 1초까지의 임의의 지연을 시뮬레이션합니다.\n})\n```\n\n프로그램을 두 번 실행한 후의 출력 결과는 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-30-4MajorProblemswithJavaScriptForEach_1.png\" />\n\n# 3. 배열 수정 불가능\n\n이 문제는 간단히 보이지만, 사실 배열 내 요소를 변경하는 것은 허용됩니다. 그러나 이는 일반적으로 좋지 않은 방식으로 간주됩니다.\n\n좋지 않은 방식이라고 하는 이유는 forEach 루프가 이 용도로 설계되지 않았기 때문에, 데이터를 과도하게 처리하거나 요소를 건너뛸 수 있기 때문입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것이 forEach 루프 중 첫 번째 병사 \"John\"을 제거하는 예입니다:\n\n```js\nsoliders.forEach((soldier, index) => {\n  if (soldier === \"John\") {\n    soliders.splice(index, 1)\n  } else {\n    soliders[index] = \"Captain \" + soldier\n  }\n})\n\n// [ \"Daniel\", \"Captain Cole\", \"Captain Adam\" ]\nconsole.log(soliders)\n```\n\n이제 결과가 혼란스러울 수 있습니다. \"John\"이 삭제되었기 때문에 \"Daniel\"이 건너뜁니다.\n\n이것은 splice() 함수를 사용한 후 배열이 왼쪽으로 이동되어 \"Daniel\"이 인덱스 1에서 0으로 이동하여 건너뛰어진 결과입니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 우선 예외 처리\n\nfor나 while 루프와 같은 전통적인 루핑 구조와 달리 forEach에는 내장된 예외 처리 기능이 없습니다.\n\n다시 말해, forEach 내부에서 오류가 발생한다면 해당 오류는 루프 자체에서 catch되지 않으며, 이는 콜백 내에서 명시적으로 예외를 처리해야 한다는 것을 의미합니다.\n\n# 결론\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n오늘은 forEach 루프와 관련된 4가지 주요 문제를 리뷰했어요.\n\n각 문제를 군인 진급의 예시를 통해 시각화했어요.\n\nforEach 루프를 사용할 때는 조심해야 해요. 예기치 않은 오류가 발생할 수 있고 디버그하기 어려울 수 있어요.\n\n# 제휴사\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 올인원 SaaS 프로젝트 템플릿\n- Figma 홈: 내 모든 프로젝트에서 사용하는 UI 디자인 도구입니다.\n- Figma 프로페셔널: 당신이 필요로 할 유일한 UI 디자인 도구입니다.\n- FigJam: 직관적인 다이어그램 작성과 브레인스토밍으로 상상력을 발휘하세요.\n- Notion: 내 인생 전반을 손쉽게 정리하는 데 사용되는 도구입니다.\n- Notion AI: ChatGPT를 능가하며 Notion 작업 흐름을 빠르게 만들어줄 AI 도구입니다.\n\n# 참고 자료\n\n- Foreach W3 Schools","ogImage":{"url":"/assets/img/2024-06-30-4MajorProblemswithJavaScriptForEach_0.png"},"coverImage":"/assets/img/2024-06-30-4MajorProblemswithJavaScriptForEach_0.png","tag":["Tech"],"readingTime":6},{"title":"간단한 JavaScript 로거 사용 방법","description":"","date":"2024-06-30 22:31","slug":"2024-06-30-SimpleJavascriptLogger","content":"\n\n# 다시 한번, Java 프로그래머가 JavaScript에서 일하며 Java 로거를 그리워하는 이야기 :-)\n\n![이미지](/assets/img/2024-06-30-SimpleJavascriptLogger_0.png)\n\nJavaScript와 React에 대한 사랑이 커짐에 따라, 내 React 애플리케이션에 간단한 로거가 필요하다는 필요성이 커지고 있습니다. 몇 가지 로거를 시도해봤지만, 간단한 Java 스타일의 로거에 대한 취향이 강하기 때문에 TypeScript로 나만의 간단한 Logger 클래스를 작성하게 되었고, 현재 개인 프로젝트에서 사용하고 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래에 `logger.ts` 파일을 찾으실 수 있어요. 마음껏 사용하고 수정해 보세요 :)\n\n# 내가 Logger를 좋아하는 이유:\n\n- 커스터마이징 가능한 로그 레벨: 각 모듈에 대해 나만의 로그 레벨을 추가할 수 있어요.\n- 조절 가능한 로깅 디테일: 얼마나 많은 정보를 로깅할 지 결정할 수 있어요. 기본적으로 info 수준의 정보를 로깅하며, 필요에 따라 로그 레벨을 높일 수 있어요.\n- 전문화된 Logger: 서로 다른 모듈에 대해 특별한 로거를 추가하기 쉬워요.\n- 확장성: 현재의 Logger를 수정하거나 확장해서 로그를 서버로 전송할 수 있어요.\n\n```js\nimport {useMemo} from \"react\";\n\nexport enum LogLeveL {\n  ERROR = 100,\n  WARN = 200,\n  INFO = 400,\n  AUTH = 401,\n  MIDDLE_LAYER = 402,\n  DEBUG = 800\n}\n\nexport const GLOBAL_LEVEL = LogLeveL.INFO;\n\nexport class Logger {\n  protected readonly prefix: string;\n\n  constructor(prefix: string, protected readonly currentLevel: LogLeveL = GLOBAL_LEVEL) {\n    this.prefix = prefix.replaceAll(\"/\", \".\");\n  }\n\n  info(...messages: any[]) {\n    this._log(LogLeveL.INFO, ...messages);\n  }\n\n  warn(...messages: any[]) {\n    this._log(LogLeveL.WARN, ...messages);\n  }\n\n  debug(...messages: any[]) {\n    this._log(LogLeveL.DEBUG, ...messages);\n  }\n\n  error(...messages: any[]) {\n    this._log(LogLeveL.ERROR, ...messages);\n  }\n\n  protected _log(level: LogLeveL, ...messages: any[]) {\n    if (level <= GLOBAL_LEVEL)\n      console.info(`[${LogLeveL[level]}][${this.prefix}]`, ...messages);\n  }\n\n  log(...messages: any[]) {\n    this._log(this.currentLevel, ...messages);\n  }\n}\n\nexport class AuthLogger extends Logger {\n\n  constructor(prefix: string) {\n    super(prefix, LogLeveL.AUTH);\n  }\n\n  auth(...messages: any[]) {\n    this._log(LogLeveL.AUTH, ...messages);\n  }\n}\n\n\nexport function useLogger(name: string) {\n  return useMemo(() => {\n    return new Logger(name);\n  }, [name]);\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 사용 예시, 사용 방법:\n\n```js\ntype AuthComponentProps = {}\nconst logger: AuthLogger = new AuthLogger(\"app/page/AuthComponent\");\nconst AuthComponent = (props: AuthComponentProps) => {\n  useEffect(() => {\n    // 인증 로거입니다.\n    logger.auth(\"인증 호출을 수행 중입니다.\");// 즉 인증 로그 레벨 호출만 기록합니다.\n    logger.info(\"이것은 정보 메시지입니다.\");\n    logger.warn(\"이것은 경고 메시지입니다.\");\n    logger.error(\"이것은 오류 메시지입니다.\");\n    logger.debug(\"이것은 디버그 메시지입니다.\");\n  }, []);\n  return (\n    <div>\n      로그인 컴포넌트입니다.<br/>\n      사용자: ____<br/>\n      비밀번호: ____<br/>\n    </div>\n  );\n};\n\n// 로그 레벨을 변경하려면 GLOBAL_LEVEL 변수의 값을 조정하십시오.\n```\n\n# 주요 기능\n\n- 사용자 정의 로그 레벨: LogLeveL 열거형을 사용하면 필요에 따라 다양한 로그 레벨을 지정할 수 있습니다.\n- 전역 로그 레벨: GLOBAL_LEVEL 상수는 전역 로그 레벨을 결정하여 로그의 상세 수준을 제어할 수 있습니다.\n- Logger 클래스: Logger 클래스는 다른 수준의 메시지를 기록하는 방법을 제공하며 (info, warn, debug, error), 적절한 로그 레벨인 경우 메시지를 콘솔에 출력하기 위해 _log 메서드를 사용합니다.\n- 전문 로거: AuthLogger 클래스는 Logger를 확장하여 인증 관련 메시지를 기록하는 auth 메서드를 추가합니다.\n- React 훅: useLogger 훅은 useMemo를 사용하여 새로운 Logger 인스턴스를 만들어 컴포넌트 당 로거가 한 번만 생성되도록 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당신의 프로젝트에서 이 로거를 자유롭게 사용해보세요. 즐거운 코딩하세요!\n\n수정사항을 제안하거나 피드백을 주시면 감사하겠습니다.","ogImage":{"url":"/assets/img/2024-06-30-SimpleJavascriptLogger_0.png"},"coverImage":"/assets/img/2024-06-30-SimpleJavascriptLogger_0.png","tag":["Tech"],"readingTime":4}],"page":"4","totalPageCount":119,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}