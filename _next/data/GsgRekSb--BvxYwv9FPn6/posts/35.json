{"pageProps":{"posts":[{"title":"2024년 자바 개발자 면접 합격을 위한 가이드","description":"","date":"2024-06-22 22:07","slug":"2024-06-22-YourGuidetoClearJavaDeveloperInterviewin2024","content":"\n안녕하세요, 제 7천 명 이상의 팔로워 여러분, 모든 지원에 감사드립니다. 그 회사의 감축 뉴스를 보게 되면 언제나 나는 면접 준비가 되어 있는 상태로 있어야 한다고 생각해요. 100회 이상의 인터뷰를 진행했고 100회 이상의 Java 인터뷰에 나갔어요. 그 경험을 토대로 이 글을 쓰게 되었어요. 나의 경험상으로, 각 MNC의 Java 인터뷰는 나중에 이 글에서 논의할 전형적인 패턴을 따르는 것을 알고 있어요. 충분한 인터뷰를 가졌다면, 매번 전형적인 Java 개발자 기술면접에서 질문과 주제가 항상 반복되는 것을 알 수 있을 거예요. 이 형식에 대해 이야기하고, 해당 주제에서 몇 가지 질문을 사용하여 왜 이러한 질문이 제기되는지 설명하고 모든 인터뷰에서 항상 반복될 것이라고 말할 거에요.\n\n![이미지](/assets/img/2024-06-22-YourGuidetoClearJavaDeveloperInterviewin2024_0.png)\n\n면접을 통과하는 것은 보통 두 가지 기술 면접 단계만 통과하는 것을 의미해요. 매니저나 HR과의 대화는 보통 쉬워요. 그러나 기술 면접에서 많은 사람들이 투쟁하는 부분이에요.\n\n회사들, 특히 대기업과 기술 기업은 보통 각 인터뷰 단계에 대해 약 1시간을 할애하곤 해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자바는 다루어야 할 내용이 많은 방대한 주제입니다. 기본 개념 외에도 인터뷰어들은 여러분의 프로젝트, 프로젝트 배포 방법, 코딩 과제, 주요 개념에 대한 이해, 그리고 클라우드 컴퓨팅, 쿠버네티스 및 기타 기술 도구 등에 대해 물어볼 가능성이 높습니다. 다뤄야 할 내용이 많습니다!\n\n인터뷰어들은 1시간 밖에 시간이 없으므로 중요한 내용에 집중하여 가능한 많은 영역을 다뤄보려고 할 것입니다.\n\n우리가 빛날 수 있는 부분은 잘 준비하고, 기본 개념을 이해하고, 코딩 능력을 향상시키면 이번 라운드를 통과할 수 있다는 것입니다. 흥미로운 점은 여러 질문들이 인터뷰에서 반복해서 나오는데, 특히 이전에 몇 차례 경험했거나 내 Java 시리즈를 따라온 경우입니다.\n\n그러니 기본 개념을 잘 이해하고 코딩 기술을 연습하는 데 집중해봅시다. 한 걸음씩 진행하며 각 주제를 철저히 다루겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지금부터 60분의 시간이 시작됐어요. 인터뷰에서 다룰 주제마다 8-10분씩 할당해봅시다. 그리고 인터뷰어인 저가 어떤 종류의 질문들을 할지도 살펴봅시다.\n\n만약 여러분을 채용한다고 상상해봅시다.\n\n# 주제 1: 프로젝트 흐름과 아키텍처\n\n이 주제에서는 지원자가 경험이 있는지 판단하고 싶어요. 경험이 없다면, 프로젝트에 대해 질문을 시작할 거에요. 기능, 흐름, 아키텍처에 대해 물어보겠고, 사용된 기술 스택과 제품화된 방법, 그리고 역할과 기여도에 대해 물어볼 거에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일반적으로 면접에서 이렇게 질문이 나올 거에요,\n\n프로젝트에 관한 모든 내용을 적어두면 좋을 거예요. 자신을 자세히 알려야 하는데, 그러면 불편한 질문을 받지 않아요. 프로젝트에 관한 모든 내용을 아는 사람은 당신 뿐이니 자신감을 가지세요.\n\n# 주제 2: Core Java\n\nCore Java는 방대한 주제이며 인터뷰어는 이러한 주제에 집중해야 할 거에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 영역에서 철저한 답변을 제공해보세요. Core Java는 Java 개발자에게 기본적인 것으로 간주됩니다. 어떤 프레임워크도 모른다고 해도 괜찮지만, Core Java 지식이 부족하면 문제가 발생할 수 있습니다.\n\n아래 주제들은 인터뷰에서 중요하게 다루는 것들입니다.\n\n## 주제:\n\n- 문자열 개념/해시 코드-동일성 메서드\n- 불변성(사용자 정의 불변 클래스 및 JDK에서의 예제)\n- 객체 지향 프로그래밍 개념(네 가지 기둥과 SOLID 원칙)\n- 직렬화(serialversionUUID)\n- 컬렉션 프레임워크/동시성 컬렉션(해시맵, 동시성 해시맵, 어레이리스트, 해시셋)\n- 예외 처리(특히 런타임 예외)\n- 멀티스레딩 특히 Executor 프레임워크(쓰레드 풀(데드락, 쓰레드 덤프) 포함)\n- Java 메모리 모델(객체, 메서드, 변수가 Java 메모리의 각 영역에 어떻게 저장되는지)\n- 가비지 컬렉션(작동 방식, 객체를 가비지 수집하는 방법, 수행하는 동안 사용되는 알고리즘)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저는 당신이 말씀하신 내용을 쉽게 참조할 수 있도록 Markdown 형식으로 변경하였습니다.\n\n## 질문:\n\nThreadPoolExecutor는 어떻게 동작하나요?\n커스텀 불변 클래스를 어떻게 만드나요? Java에서 불변 클래스의 예시는 무엇이 있나요?\nhashCode()와 equals()가 무엇인가요? Map에서 키로 Object를 사용할 경우 어떻게 될까요? 올바르게 사용하는 방법은 무엇인가요?\n깊은 복사와 얕은 복사는 무엇인가요?\nCompletableFuture는 무엇인가요?\n가장 최신 Java 버전에서의 Java 메모리 모델은 무엇인가요?\n동시성 컬렉션이 무엇인가요?\nHashMap, ArrayList, LinkedList의 시간/공간 복잡도는 무엇인가요?\nJava API Arrays.sort()와 Collections.sort()에서 사용되는 알고리즘은 무엇인가요?\nJava에서 커스텀 어노테이션을 어떻게 만드나요?\nCompletableFuture는 무엇인가요?\n깊은 복사와 얕은 복사는 무엇인가요?\nHashMap과 HashSet는 어떻게 내부적으로 동작하나요?\nString의 join() 메서드의 용도는 무엇인가요?\n\n아래 기사에 대부분의 질문이 있으니 참고해 주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 주제 3: 자바-8/자바-11/자바-17\n\n새로 추가된 자바 API와 관련된 중요한 기능을 알고 있어야 합니다.\n\nJava8-java21에서 모든 기능을 문서화한 내 기사를 참조할 수 있어요.\n\n아래 주제들은 중요하며 면접에서 주로 다루는 내용입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 주제:\n\n- Java 8 기능\n- 기본/정적 메소드\n- 람다 표현식\n- 함수형 인터페이스\n- Optional API\n- Stream API\n- 패턴 매칭\n- 텍스트 블록\n- 모듈\n\n나중에 질문에 대답하려면 버전별 업데이트를 알아야 합니다. 여러분의 최신 정보를 테스트할 것입니다.\n\n가상 스레드 기능은 Java 21에 도입되었고, 봉인된 클래스는 Java 17에 도입되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 질문:\n\nJava 8/Java11/Java17에서 무엇이 새로운가요?\nJava에서 병렬 스트림이 무엇이며 어떻게 작동하나요?\nJava 메모리 모델의 새로운 개선 사항은 무엇이며, Java 8 해시맵의 개선 사항은 무엇인가요?\n\n# 주제 4: 스프링 프레임워크, 스프링 부트, 마이크로서비스 및 REST API\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 또한 방대한 주제이기 때문에 기본부터 고급 반복 질문에 집중해야 합니다. Spring Framework, Spring Boot, Microservice 및 Rest API 에 대해 시험을 볼 것입니다.\n\n이 주제에 대해 인터뷰어를 만족시키지 못하면 거절될 수 있습니다.\n\n## 주제:\n\n- 의존성 주입/IOC, Spring MVC\n- 설정, 주석, CRUD 작업\n- Bean, 스코프, 프로파일, Bean 생명주기\n- App context/Bean context\n- AOP, 예외 처리기, 컨트롤 어드바이스\n- 보안(JWT, Oauth)\n- 액추에이터\n- WebFlux 및 Mono Framework\n- HTTP 메소드\n- Microservice 개념\n- Spring Cloud\n- JPA\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 질문:\n\n- 이러한 어노테이션 (@RequestMapping @RestController @Service @Repository @Entity)의 사용 목적은 무엇인가요?\n- 액추에이터(Actuator)와 그 사용법은 무엇인가요?\n- 어떻게 애플리케이션을 고장 허용하고 탄력적으로 만들 수 있나요?\n- 분산 추적이란 무엇인가요? 스프링 부트 어플리케이션에서 traceId와 spanId의 사용 목적은 무엇인가요?\n- 스프링 부트에서 WebFlux와 Mono 프레임워크란 무엇인가요?\n- 스프링에서 순환 종속성(cyclic dependency)이란 무엇이며, 어떻게 방지할 수 있나요?\n- REST API를 어떻게 보안할 수 있나요?\n- 분산 추적이란 무엇인가요? 스프링 부트 어플리케이션에서 traceId와 spanId의 사용 목적은 무엇인가요?\n- 스프링 부트에서 WebFlux와 Mono 프레임워크란 무엇인가요?\n- 애플리케이션을 고장 허용하고 탄력적으로 만드는 방법은 무엇인가요?\n- 스프링 부트 어플리케이션에서 자동 구성을 비활성화하는 방법은 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n관련 기사,\n\n## 주제 5: 하이버네이트/스프링 데이터 JPA/데이터베이스(SQL 또는 NoSQL)\n\n이 섹션은 하이버네이트 JPA 프레임워크가 등장하는 데이터 레이어에 관련됩니다. 만약 면접관이 데이터베이스 전문가라면, 그가 갖고 있는 지식 때문에 당신을 깊이 들어물 수도 있습니다.\n\n쿼리 작성에 대비해 주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 알아야 할 주제는,\n\n- JPA 리포지토리\n- 엔티티 간의 관계\n- 직원 부서 쿼리, N번째 높은 급여 쿼리에 대한 SQL 쿼리\n- 관계형 및 비관계형 데이터베이스 개념\n- DB에서의 CRUD 작업\n- 조인, 인덱싱, 프로시저, 함수\n\n## 질문\n\nSQL과 NoSQL의 차이는 무엇인가요?\n데이터베이스에서 샤딩이란 무엇인가요?\nJPA란 무엇인가요?\n부모-자식 관계란 무엇인가요?\n조인이 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n해당 주제에 대해 더 많은 도움을 얻을 수 있는 관련 기사를 찾아보세요,\n\n## 주제 6: 코딩\n\n자바 코딩 라운드에서는 스트림 API를 사용하여 코드를 작성하는 데 더 많은 중점을 두기 때문에 아래에 몇 가지 스트림 관련 질문을 추가했습니다.\n\n면접에 가기 전에 연습을 해보세요. 연습을 충분히 하면 쉬운 문제일 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 싱글 페이지는 관련 기사 몇 개를 담고 있어요.\n\n## 주제:\n\n- 스트림 API 코딩 질문\n- 문자열 및 배열과 관련된 일반 코딩 질문\n- Java API를 사용한 정렬 및 검색\n\n## 질문\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n배열에서 두 번째로 큰 요소를 찾는 프로그램을 작성하세요. 배열에는 중복 요소가 포함될 수 있습니다. Java 8 스트림을 사용하여 이 문제를 해결해보세요.\n\n스트림 API를 사용하여 주어진 문자열에서 중복 요소와 해당 발생 횟수를 찾아보세요.\n\nJava 스트림을 사용하여 주어진 문자열에서 첫 번째로 반복되지 않는 요소를 찾는 프로그램을 작성해보세요.\n\nJava 스트림을 사용하여 주어진 문자열에서 고유한 요소를 찾는 프로그램을 작성해보세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n주어진 배열에서 가장 긴 문자열을 찾는 프로그램을 작성해보세요.\n\n두 종류의 숫자를 배열에서 왼쪽과 오른쪽으로 정렬하는 프로그램을 작성해보세요. 예시: 정수 배열[] = [5, 5, 0, 5, 0] - 출력: [0, 0, 5, 5, 5]\n\nJava 스트림을 사용하여 주어진 문자열에서 첫 번째 반복 요소/문자를 찾는 프로그램을 작성해보세요.\n\n유효한 괄호를 위한 프로그램을 작성해보세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n스트림 API를 사용하여 문자열 목록에서 중복 문자를 찾는 WAP를 만들어 보세요.\n\n# 주제 7: 배포 도구에 대한 데브옵 질문(Kubernetes, 클라우드, Kafka, 캐시)\n\n이 유형의 주제는 대부분 매니저나 리드들이 많이 작업하는 것이기 때문에, 데브옵스/배포 관련 도구에 대해 물어볼 수 있습니다. Jenkins, Kubernetes, Kafka, 클라우드 등과 같은 일반적인 도구에 대한 이해가 필요합니다.\n\n## 질문:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n쿠버네티스에서 POD, ConfigMap, Node 및 클러스터란 무엇인가요?\n\n하이브리드 클라우드란 무엇인가요?\nApache Spark란 무엇인가요? Spring Boot 애플리케이션을 사용하는 사용 사례를 줄 수 있나요?\nKafka란 무엇인가요? 어떻게 작동하나요? 오프셋과 컨슈머 그룹은 무엇인가요?\n\n## 주제 8: 모범 사례(디자인 패턴/마이크로서비스 패턴)\n\n면접관은 항상 일부 디자인 패턴에 대해 묻고 싶어합니다. 이는 싱글톤, 팩토리 또는 옵저버 패턴과 같은 일반적인 디자인 패턴일 수 있으며 이러한 패턴을 코딩에 활용할 수 있는지 알아보기 위함입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마이크로서비스는 요즘 많이 사용되고 있어요. 그런데 여기에는 회로 차단기, SAGA, CQRS, 이중 커밋, BFF 그리고 API 게이트웨이와 같이 다양한 유형의 패턴도 포함됩니다.\n\n이러한 패턴들은 흔히 사용되는데, 이 주제들로 충분히 이해를 하고 있으면 부가적인 이점이 있을 거예요. 미리 잘 준비해두세요.\n\n## 질문:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n싱글톤 디자인 패턴, 빌더 디자인 패턴 또는 퍼사드 디자인 패턴에 대해 알고 계신가요? 어떤 두 가지 일반적인 마이크로서비스 패턴을 사용해야 하는지 알려주세요. 이러한 주제들은 항상 반복되므로 준비하면 인터뷰의 마지막 부분을 쉽게 통과할 수 있습니다.\n\n참고용 관련 기사 몇 개,\n\n# 마지막으로\n\n모든 이러한 질문과 주제들은 모든 Java 인터뷰에서 반복되며, 면접관은 이러한 질문을 물어볼 1시간밖에 없습니다. 자주 반복되는 질문에 대해 준비하면 인터뷰를 쉽게 통과하고 일자리를 얻을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n감사합니다! 자바 인터뷰에 대한 더 많은 질문과 주제가 필요하시면 제 책을 참고하시기 바랍니다. 모든 것을 문서화했습니다.\n\n또한, 어떤 주제나 질문이 각 인터뷰에서 중요하고 자주 반복되는지 알려주세요.\n\n# 읽어 주셔서 감사합니다!\n\n- 👏 이야기에 박수를 보내고 저를 팔로우해주세요 👉\n- 📰 제 Medium에서 더 많은 콘텐츠를 읽어보세요 (자바 개발자 인터뷰에 관한 50개의 이야기)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제 책들을 찾아보세요:\n\n- Guide To Clear Java Developer Interview는 Amazon(Kindle Book) 및 Gumroad(PDF 형식)에서 찾을 수 있습니다.\n- Guide To Clear Spring-Boot Microservice Interview는 Gumroad(PDF 형식) 및 Amazon(Kindle eBook)에서 찾을 수 있습니다.\n- 🔔 Follow me: LinkedIn | Twitter | Youtube\n","ogImage":{"url":"/assets/img/2024-06-22-YourGuidetoClearJavaDeveloperInterviewin2024_0.png"},"coverImage":"/assets/img/2024-06-22-YourGuidetoClearJavaDeveloperInterviewin2024_0.png","tag":["Tech"],"readingTime":13},{"title":"Winglang을 사용해 클라우드로 이전하는 방법 1부","description":"","date":"2024-06-22 22:02","slug":"2024-06-22-PortedtoCloudwithWinglangPartOne","content":"\n## \"Hexagonal Architecture Explained\"에서 Blue Zone Application\n\n<img src=\"/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_0.png\" />\n\n소프트웨어 애플리케이션을 직접 클라우드로 이관하면 종종 비효율적이고 유지보수가 어려운 코드가 될 수 있습니다. 그러나 새로운 클라우드 지향 프로그래밍 언어 Wing과 Hexagonal Architecture를 조합하여 사용하는 것은 성공적인 방법임이 입증되었습니다. 이 접근 방식은 비용, 성능, 유연성, 보안 사이에서 적절한 균형을 유지합니다.\n\n이 시리즈에서는 주요 프로그래밍 언어에서 Winglang로 다양한 애플리케이션을 마이그레이션하는 경험을 공유하겠습니다. Wing에서 Hexagonal Architecture를 구현한 첫 경험은 \"안녕, Winglang Hexagon!\"이라는 제목의 기사에 보고되었습니다. 이는 이러한 조합에 대한 신뢰를 얻기에 충분했으나 과도하게 단순화된 \"안녕하세요, 세계!\" 인사 서비스에 제한된 핵심 구성 요소가 부족하여 이러한 접근 방식의 확장 가능성을 입증하기에 충분하지 않았습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제 첫 번째 파트에서는 최근 출간된 책 \"헥사곤 아키텍처 설명\"에 소개된 \"블루 존\" 애플리케이션을 자바에서 Wing으로 이식하는 데 초점을 맞추었습니다. \"블루 존\" 애플리케이션은 상당한 코드 베이스를 가져오는데, 복잡성이 해결하기 어려울 정도로 커지지 않아도 되지만, 많은 종류의 애플리케이션을 대표하는 것입니다. 또한, 이것이 기존의 주류 자바로 작성된 것이라는 사실은 이러한 애플리케이션의 클라우드 네이티브 변형 사례 연구를 제공합니다.\n\n본 보고서는 2024년 4월에 안타깝게도 사망한 이 책의 공저자인 후안 마누엘 가리도 데 파스에 대한 경의의 표시로도 작용합니다.\n\n계속 진행하기 전에, 헥사곤 아키텍처 패턴의 기초를 다시 한 번 상기해 봅시다.\n\n# 헥사곤 아키텍처 패턴 핵심요소\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n“Hexagonal Architecture Explained” 책의 두 번째 장을 참고하여 패턴에 대한 자세하고 공식적인 설명을 보실 수 있습니다. 여기서는 제가 제 나만의 말로 이 패턴의 주된 의미를 간략히 요약해서 전달하겠습니다.\n\nHexagonal Architecture 패턴은 소프트웨어에서 관심사를 분리하는 간단하면서도 실용적인 접근 방법을 제안합니다. 관심사 분리가 왜 중요한가요? delivered value 앱의 경우에도 소프트웨어 코드 기반은 빠르게 성장합니다. 책임을 질 일이 많기 때문입니다. 인지적 제어를 유지하려면 그룹이나 범주에 대한 고수준 조직이 필요합니다. 이 도전에 맞서기 위해 Hexagonal Architecture 패턴은 특정 소프트웨어 애플리케이션에 참여하는 모든 요소를 다섯 가지의 구분된 범주로 분리하고 각각을 따로 다루는 것을 제안합니다:\n\n- Application 자신. 이 범주는 잠재적인 고객 및 사용자들에게 전달되는 실제 가치를 캡슐화합니다. 이것은 소프트웨어가 처음 개발되고 사용될 이유입니다. 때로는 Core 또는 System Under Development (SuD)로 불리기도 합니다. 이 부분에 대한 또 다른 가능한 이름은 Computation일 수 있습니다 — 외부 입력이 처리되고 최종 결과가 생성되는 곳입니다. 시각적으로, 시스템의 Application 부분은 육각형의 형태로 나타납니다. 이 모양에는 특별하거나 마법 같은 것은 없습니다. \"Hexagonal Architecture Explained\" 책의 저자들이 설명하듯이:\n\n2. Application과 통신하거나 통신되는 외부 주체. 이들은 인간 최종 사용자, 전자 장치 또는 다른 애플리케이션일 수 있습니다. 원래 패턴은 더 나아가 제안하듯이 Primary (또는 Driving) Actors — Application과 상호 작용을 시작하는 주체들과 Secondary (또는 Driven) Actors — Application이 통신을 시작하는 주체들로 나뉘어야 한다고 제안합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3. 포트 — 주요 작용자가 사용할 수 있는 인터페이스의 공식 명세(드라이빙 포트라고도 함) 또는 보조 작용자가 구현해야 하는 인터페이스의 공식 명세(드리븐 포트라고도 함)를 가리킵니다. 포트는 인터페이스 동사(예: 주차 티켓 구매)의 공식 명세 외에 이러한 인터페이스를 통해 교환되는 데이터 구조에 대한 자세한 명세도 제공합니다.\n\n4. 어댑터는 외부 작용자와 포트 사이의 간격을 메꾸는 역할을 합니다. 이름에서 알 수 있듯이, 어댑터는 의미 있는 계산을 수행하는 것이 아니라, 기본적으로 작용자가 이해하는 형식으로 데이터를 변환하거나 응용 프로그램이 이해하는 형식으로 데이터를 변환하는 역할을 합니다.\n\n5. 구성자는 외부 작용자를 모든 포트를 통해 응용 프로그램에 연결함으로써 해당 어댑터를 사용하는 것을 통해 모든 것을 통합합니다. 적용된 아키텍처 결정과 가격/성능/유연성 요구 사항을 고려한 특정 구성은 응용 프로그램 배포 전 정적으로 생성되거나 응용 프로그램 실행 중 동적으로 생성될 수 있습니다.\n\n일반적인 신념과는 달리, 이 패턴은 한 범주, 예를 들어 응용 프로그램이 다른 것보다 중요하다는 것을 의미하지 않으며, 다른 것들보다 크거나 작아야 한다는 결론을 내리지도 않습니다. 포트와 어댑터가 없으면 어떤 응용 프로그램도 실용적으로 사용할 수 없습니다. 상대적 크기는 확장성, 성능, 비용, 가용성 및 보안과 같은 비기능 요구 사항에 의해 종종 결정됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n패턴은 한 번에 한 문제에 집중함으로써 복잡성과 위험을 줄이는 것을 제안하며, 다른 측면은 일시적으로 무시하는 것을 시사합니다. 또한 동일한 계산에 대한 여러 구성을 보장하는 실용적인 방법을 제안합니다. 각각이 몇 가지 특정 요구 사항을 해결하는 테스트 자동화 또는 다른 환경에서의 작업일 수 있습니다.\n\n아래 그림은 \"Hexagonal Architecture Explained\" 책에서 이 패턴의 모든 주요 요소를 잘 요약하고 있습니다:\n\n![Hexagonal Architecture](/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_1.png)\n\n# \"블루 존\" 샘플 애플리케이션\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n애플리케이션 README에서:\n\n저는 이 애플리케이션을 선택한 이유가 두 가지 있습니다. 첫째로, \"Hexagonal Architecture Explained\" 책에서 권장하는 대표적인 예제로 소개되었기 때문입니다. 둘째로, 이 애플리케이션은 원래 Java로 개발되었습니다. 저는 Wing 프로그래밍 언어를 사용하여 다소 복잡한 Java 애플리케이션을 클라우드로 포팅하는 과정이 어떤 것인지 궁금했습니다.\n\n# 어디서부터 시작하면 좋을까요?\n\n\"Hexagonal Architecture Explained\" 책은 4.9장 \"개발 순서는 무엇인가?\"에서 합리적인 권장 사항을 제공합니다. \"테스트부터 테스트\"로 시작하고 더 나아가는 것이 타당합니다. 그러나 대부분의 소프트웨어 엔지니어들이 일반적으로 하는 것처럼, 저는 Java 코드를 Wing으로 번역하는 것부터 시작했습니다. 일부분의 시간을 할애하여 지금까지 외부 인터페이스를 시뮬레이션하면서 로컬에서 Wing에서 작동하는 것을 얻었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기술적으로는 작동했지만, 결과 코드는 응용 프로그램의 크기와 관련하여 너무 크고, 심지어 저에게도 이해하기 어려웠으며, 미적으로 매력이 없었으며, 완전히 Wing 언어와 클라우드 환경의 특성과 부합하지 않았습니다. 그 후, 나는 Wing 언어와 클라우드 환경의 특정 사항에 적합한 핵심 패턴 아이디어의 가장 의미있는 표현을 찾기 위해 두 주간의 리팩토링 주기에 착수했습니다.\n\n다음이 나의 작업 방식과는 다릅니다. 대부분의 코드를 생성, 평가하고 폐기하는 엄청난 규모의 혼돈의 왕래 시리즈가 이어집니다. 이것은 주로 생소한 기술과 영역을 다룰 때 소프트웨어 개발에서 발생합니다.\n\n마침내 더 구조화되고 시스템적인 과정으로 단계적으로 표준화될 수 있는 무언가를 찾았습니다. 다음에 더 괴로운 경험이 아니라 더 생산적일 것으로 기대됩니다. 그러므로, 다음에 사용될 것으로 기대되는 개념적으로 바람직한 순서대로 결과를 제시할 것이며, 실제로 일어난 방식으로 제시하지는 않을 것입니다.\n\n# 먼저 테스트로 시작하라# Thou Shalt Start with Tests\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 정확하고 최적의 방법은 체계적인 수용 테스트의 연속으로 시작하는 것입니다. 시스템의 아키텍처적으로 중요한 사용 사례에 관한 5.1 장 \"헥사고널 아키텍처 설명\" 책은 사용 사례 모델링과 헥사고널 아키텍처 간의 깊은 관련성을 자세히 다룹니다. 주의 깊게 읽어볼 가치가 있습니다.\n\n이전 문장조차 100% 정확하지는 않습니다. 우리는 기본 외부 작용자와 그들이 시스템과 가장 특징적인 상호 작용 방법을 식별하여 시작해야 합니다. \"블루 존\" 애플리케이션의 경우, 두 가지 주요 외부 작용자가 있습니다:\n\n- 차 운전사\n- 주차 담당자\n\n차 운전사 작용자의 경우, 주요 사용 사례는 \"티켓 구매\"일 것이며, 주차 담당자의 경우, 주요 사용 사례는 \"차량 확인\"일 것입니다. 이러한 사용 사례의 구현을 통해 보조 외부 작용자와 나머지 요소를 식별할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 분석에서 나온 예비 사용 사례 모델은 아래에 제시되었습니다:\n\n![사진](/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_2.png)\n\n위 다이어그램에는 하나의 보조 작용자인 결제 서비스만 포함되어 있음을 주목해 주세요. 데이터베이스와 같은 내부 보조 작용자는 포함되어 있지 않습니다. 이러한 기술 요소들은 곧 Driven Ports에 의해 애플리케이션에서 격리될 예정이지만, 적어도 전통적인 Use Case 작용자 해석에서는 Use Case 외부 작용자를 대표하지 않습니다.\n\n개발을 시작하기 전에 사용 사례 수락 기준을 명시하는 것은 내부 리팩터링을 수행하면서 시스템 안정성을 보장하는 매우 효과적인 기술입니다. \"블루 존\" 애플리케이션의 경우, 사용 사례 수락 테스트는 자바 프레임워크인 Cucumber를 사용하여 Gherkin 언어로 지정되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재 Wing을 위한 Cucumber 프레임워크는 당연한 이유로 존재하지 않습니다 - Wing은 매우 젊은 언어이기 때문입니다. JavaScript용 공식 Cucumber가 존재하고 TypeScript Cucumber 튜토리얼도 있지만, 이 기술에 대한 조사를 연기하고 직접 Wing에서 몇 가지 테스트를 재현해보기로 결정했습니다.\n\n놀랍게도, 이것이 가능했고 제 목적에는 잘 작동했습니다. 다음은 Wing에서 완전히 지정된 Buy Ticket use case happy path 수용 테스트의 예시입니다:\n\n```js\nbring \"../src\" as src;\nbring \"./steps\" as steps;\n\n/*\nUse Case: Buy Ticket\n  AS\n  a car driver\n  I WANT TO\n  a) obtain a list of available rates\n  b) submit a \"buy a ticket\" request with the selected rate\n  SO THAT\n  I can park the car without being fined\n*/\nlet _configurator = new src.Configurator(\"BuyTicketFeatureTest\");\nlet _testFixture = _configurator.getForAdministering();\nlet _systemUnderTest = _configurator.getForParkingCars();\nlet _ = new steps.BuyTicketTestSteps(_testFixture, _systemUnderTest);\n\ntest \"Buy ticket for 2 hours; no error\" {\n    /* Given */\n        [\"name\",    \"eurosPerHour\"],\n        [\"Blue\",    \"0.80\"],\n        [\"Green\",   \"0.85\"],\n        [\"Orange\",  \"0.75\"]\n    ]);\n    _.next_ticket_code_is(\"1234567890\");\n    _.current_datetime_is(\"2024/01/02 17:00\");\n    _.no_error_occurs_while_paying();\n    /* When */\n    _.I_do_a_get_available_rates_request();\n    /* Then */\n    _.I_should_obtain_these_rates([\n        [\"name\",    \"eurosPerHour\"],\n        [\"Blue\",    \"0.80\"],\n        [\"Green\",   \"0.85\"],\n        [\"Orange\",  \"0.75\"]\n    ]);\n    /* When */\n    _.I_submit_this_buy_ticket_request([\n        [\"carPlate\", \"rateName\", \"euros\", \"card\"],\n        [\"6989GPJ\",  \"Green\",    \"1.70\",  \"1234567890123456-123-062027\"]\n    ]);\n    /* Then */\n    _.this_pay_request_should_have_been_done([\n        [\"euros\", \"card\"],\n        [\"1.70\",  \"1234567890123456-123-062027\"]\n    ]);\n    /* And */\n    _.this_ticket_should_be_returned([\n        [\"ticketCode\", \"carPlate\", \"rateName\", \"startingDateTime\", \"endingDateTime\",   \"price\"],\n        [\"1234567890\", \"6989GPJ\",  \"Green\",    \"2024/01/02 17:00\", \"2024/01/02 19:00\", \"1.70\"]\n    ]);\n    /* And */\n    _.the_buy_ticket_response_should_be_the_ticket_stored_with_code(\"1234567890\");\n}\n```\n\n진정한 읽기 쉬운 텍스트는 아니지만 충분히 가깝고 이해하기 어렵지 않습니다. 여기서 해독할 사항이 꽤 많이 있습니다. 하나씩 진행해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 테스트 구조\n\n위의 테스트는 특정 프로젝트 폴더 구조를 가정하고 있으며 Wing 모듈 및 가져오기 규칙을 반영하고 있습니다.\n\n테스트 소스의 처음 두 줄로부터 우리는 프로젝트에는 src 폴더(모든 소스 코드가 위치하는 곳)와 test 폴더(모든 테스트가 위치하는 곳) 두 가지 주요 폴더가 있다는 결론을 내릴 수 있습니다. 더 나아가 test\\steps 하위 폴더에는 개별 테스트 단계 구현이 보관되어 있습니다.\n\n테스트 소스의 다음 세 줄에서는 preflight Configurator 객체를 할당하고 이를 통해 두 개의 포인터를 추출합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- \\_testFixture는 테스트 설정을 담당하는 사전 점검 클래스를 가리킵니다.\n- \\_systemUnderTest는 운전자를 위한 주 포트 인터페이스를 가리킵니다.\n\n다음으로, 우리는 개별 단계를 구현하는 inflight BuyTicketTestSteps 객체를 할당합니다. 이 객체는 대부분 보이지 않는 언더스코어 이름을 갖게 되며, 이는 전체 테스트 가독성을 향상시킵니다. 이는 일반 목적의 호스트 언어에 내장된 도메인 특화 언어(DSL)를 개발하는 일반적인 기술입니다.\n\n중요한 점은, 제 경우에는 그렇지 않았지만, 단순한 src 및 test\\steps 폴더 구조와 다른 구조적 결정을 이끌 수 있는 간단한 테스트 설정으로 프로젝트를 시작하는 것이 전혀 상상 가능하다는 것입니다.\n\n물론, 단계가 구현되지 않았다면 테스트는 컴파일에도 통과하지 않을 것입니다. 진행하기 위해, 우리는 BuyTicketTestSteps 클래스 내부를 살펴봐야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 테스트 단계 클래스\n\n\"티켓 구매\" 유스 케이스를 위한 테스트 단계 클래스가 아래와 같이 나와 있습니다:\n\n```js\nbring expect;\nbring \"./Parser.w\" as parse;\nbring \"./TestStepsBase.w\" as base;\nbring \"../../src/application/ports\" as ports;\n\n\npub class BuyTicketTestSteps extends base.TestStepsBase {\n    _systemUnderTest: ports.ForParkingCars;\n    inflight var _currentAvailableRates: Set<ports.Rate>;\n    inflight var _currentBoughtTicket: ports.Ticket?;\n\n    new(\n        testFixture: ports.ForAdministering,\n        systemUnderTest: ports.ForParkingCars\n    ) {\n        super(testFixture);\n        this._systemUnderTest = systemUnderTest;\n    }\n\n    inflight new() {\n        this._currentBoughtTicket = nil;\n        this._currentAvailableRates = Set<ports.Rate>[];\n    }\n\n    pub inflight the_existing_rates_in_the_repository_are(\n        sRates: Array<Array<str>>\n    ): void {\n        this.testFixture.initializeRates(parse.Rates(sRates).toArray());\n    }\n\n    pub inflight next_ticket_code_is(ticketCode: str): void {\n        this.testFixture.changeNextTicketCode(ticketCode);\n    }\n\n    pub inflight no_error_occurs_while_paying(): void {\n        this.testFixture.setPaymentError(ports.PaymentError.NONE);\n    }\n\n    pub inflight I_do_a_get_available_rates_request(): void {\n        this._currentAvailableRates = this._systemUnderTest.getAvailableRates();\n    }\n\n    pub inflight I_should_obtain_these_rates(sRates: Array<Array<str>>): void {\n        let expected = parse.Rates(sRates);\n        expect.equal(this._currentAvailableRates, expected);\n    }\n\n    pub inflight I_submit_this_buy_ticket_request(sRequest: Array<Array<str>>): void {\n        let request = parse.BuyRequest(sRequest);\n        this.setCurrentThrownException(nil);\n        this._currentBoughtTicket = nil;\n        try {\n            this._currentBoughtTicket = this._systemUnderTest.buyTicket(request);\n        } catch err {\n            this.setCurrentThrownException(err);\n        }\n    }\n\n    pub inflight this_ticket_should_be_returned(sTicket: Array<Array<str>>): void {\n        let sTicketFull = Array<Array<str>>[\n            sTicket.at(0).concat([\"paymentId\"]),\n            sTicket.at(1).concat([this.testFixture.getLastPayResponse()])\n        ];\n        let expected = parse.Ticket(sTicketFull);\n        expect.equal(this._currentBoughtTicket, expected);\n    }\n\n    pub inflight this_pay_request_should_have_been_done(sRequest: Array<Array<str>>): void {\n        let expected = parse.PayRequest(sRequest);\n        let actual = this.testFixture.getLastPayRequest();\n        expect.equal(actual, expected);\n    }\n\n    pub inflight the_buy_ticket_response_should_be_the_ticket_stored_with_code(code: str): void {\n        let actual = this.testFixture.getStoredTicket(code);\n        expect.equal(actual, this._currentBoughtTicket);\n    }\n\n    pub inflight an_error_occurs_while_paying(error: str): void {\n        this.testFixture.setPaymentError(parse.PaymentError(error));\n    }\n\n    pub inflight a_PayErrorException_with_the_error_code_that_occurred_should_have_been_thrown(code: str): void {\n        //TODO: make it more specific\n        let err = this.getCurrentThrownException()!;\n        log(err);\n        expect.ok(err.contains(code));\n    }\n\n    pub inflight no_ticket_with_code_should_have_been_stored(code: str): void {\n        try {\n            this.testFixture.getStoredTicket(code);\n            expect.ok(false, \"Should never get there\");\n        } catch err {\n            expect.ok(err.contains(\"KeyError\"));\n        }\n    }\n}\n```\n\n이 클래스는 데이터를 파싱하여 구체적인 애플리케이션 데이터 구조로 통일하고, 테스트Fixture 또는\\_systemUnderTest 객체로 데이터를 보내고, 중간 결과를 유지하며, 적절한 경우 예상 대비 실제 결과를 비교합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유의해야 할 유일한 구체적인 사항은 프리플라이트 및 인플라이트 정의를 올바르게 처리하는 것입니다. 이를 올바르게 만들도록 도와준 Cristian Pallares에게 감사드립니다.\n\n우리는 명확히 구분된 책임을 갖는 세 가지 추가 요소가 있습니다:\n\n- 파서 — 일관된 문자열 입력 배열을 애플리케이션 특정 데이터 구조로 변환하는 데 책임이 있습니다.\n- 테스트 픽스처 — 전제 조건 설정 및 사후 상태 확인을 위해 시스템과의 비공식적인 통신을 담당합니다.\n- 테스트 대상 시스템 — 애플리케이션 로직을 구현하는 데 책임이 있습니다.\n\n각각을 좀 더 자세히 살펴봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 파서\n\nParser 모듈의 소스 코드는 아래에 제시되어 있습니다:\n\n```js\nbring structx;\nbring datetimex;\nbring \"../../src/application/ports\" as ports;\n\n\npub class Util {\n    pub inflight static Rates(sRates: Array<Array<str>>): Set<ports.Rate> {\n        return unsafeCast(\n            structx.fromFieldArray(\n                sRates,\n                ports.Rate.schema()\n            )\n        );\n    }\n\n    pub inflight static BuyRequest(\n     sRequest: Array<Array<str>>\n   ): ports.BuyTicketRequest {\n        let requestSet: Set<ports.BuyTicketRequest> = unsafeCast(\n            structx.fromFieldArray(\n                sRequest,\n                ports.BuyTicketRequest.schema()\n            )\n        );\n        return requestSet.toArray().at(0);\n    }\n\n    pub inflight static Tickets(\n     sTickets: Array<Array<str>>\n   ): Set<ports.Ticket> {\n        return unsafeCast(\n            structx.fromFieldArray(\n                sTickets,\n                ports.Ticket.schema(),\n                datetimex.DatetimeFormat.YYYYMMDD_HHMM\n            )\n        );\n    }\n\n    pub inflight static Ticket(sTicket: Array<Array<str>>): ports.Ticket {\n        return Util.Tickets(sTicket).toArray().at(0);\n    }\n\n    pub inflight static PayRequest(\n     sRequest: Array<Array<str>>\n   ): ports.PayRequest {\n        let requestSet: Set<ports.PayRequest> = unsafeCast(\n            structx.fromFieldArray(\n                sRequest,\n                ports.PayRequest.schema()\n            )\n        );\n        return requestSet.toArray().at(0);\n    }\n\n    pub inflight static CheckCarRequest(\n     sRequest: Array<Array<str>>\n   ): ports.CheckCarRequest {\n        let requestSet: Set<ports.CheckCarRequest> = unsafeCast(\n            structx.fromFieldArray(\n                sRequest,\n                ports.CheckCarRequest.schema()\n            )\n        );\n        return requestSet.toArray().at(0);\n    }\n\n    pub inflight static CheckCarResult(\n     sResult: Array<Array<str>>\n   ): ports.CheckCarResult {\n        let resultSet: Set<ports.CheckCarResult> = unsafeCast(\n            structx.fromFieldArray(\n                sResult, ports.CheckCarResult.schema()\n            )\n        );\n        return resultSet.toArray().at(0);\n    }\n\n    pub inflight static DateTime(dateTime: str): std.Datetime {\n        return datetimex.parse(\n            dateTime,\n            datetimex.DatetimeFormat.YYYYMMDD_HHMM\n        );\n    }\n\n    pub inflight static PaymentError(error: str): ports.PaymentError {\n        return Map<ports.PaymentError>{\n            \"NONE\" => ports.PaymentError.NONE,\n            \"GENERIC_ERROR\" => ports.PaymentError.GENERIC_ERROR,\n            \"CARD_DECLINED\" => ports.PaymentError.CARD_DECLINED\n        }.get(error);\n    }\n}\n```\n\n이 클래스는 알고리즘적인 관점에서는 정교하지 않지만, 아주 중요한 아키텍처 결정을 반영하고 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저, 시스템 Ports에 대한 의존성을 src\\\\application\\ports 폴더에 위치한 것으로 발표합니다. \"헥사고널 아키텍처 설명\" 책 4.8장인 \"내 파일을 어디에 넣어야 하나요?\"는 명확한 문장을 제시합니다.\n\n그러나 \"패턴의 의도와 일치하지 않는 폴더 구조는 손해를 입히는 결과를 초래한다\"고 경고합니다. Java와 같은 강력한 타입 언어의 경우, 주행 및 주행되는 포트의 명세를 별도의 폴더에 유지하는 것을 권장합니다.\n\n저는 이러한 구조로 시작했지만, 매우 빨리 코드의 크기를 증가시키고 Wing 모듈과 import 규칙을 완전히 활용하지 못하게 만든다는 것을 깨달았습니다. 이를 고려하여 모든 포트를 하나의 전용 폴더에 유지하기로 결정했습니다. 현재 애플리케이션의 규모를 고려할 때, 이 결정은 정당화된 것으로 보입니다.\n\n둘째, 클래스 이름이 Util인 클래스의 모든 public static inflight 메서드를 고객 모듈이 직접 액세스할 수 있는 특정 Wing 모듈 및 import 기능을 활용하여 코드 가독성을 향상시킵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nThird, it uses two Wing Standard Library extensions, datetimex, and structx, which were developed to compensate for some features I needed. These extensions were part of my “In Search for Winglang Middleware” project endor.w, which I reported about here, here, and here.\n\nJustification for these extensions will be clarified when we look at the core architectural decision about representing the Port Interfaces and Data.\n\n# Representing Port Interfaces and Data\n\nTraditional strongly typed Object-Oriented languages like Java advocate encapsulating all domain elements as objects. If I followed this advice, the Ticket object would look something like this:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npub inflight class Ticket {\n  pub ticketCode: str;\n  pub carPlate: str;\n  pub rateName: str;\n  pub startingDateTime: std.Datetime;\n  pub endingDateTime: std.Datetime;\n  pub price: num;\n  pub paymentId: str;\n\n  new (ticketCode: str, ...) {\n    this.ticketCode = ticketCode;\n    ...\n  }\n  pub toJson(): Json {\n    return Json {\n       ticketCode: this.ticketCode,\n       ...\n  }\n  pub static fromJson(data: Json): Ticket {\n    return new Ticket(\n      data.get(\"ticketCode\").asStr(),\n      ...\n   );\n  }\n  pub toFieldArray(): Array<str> {\n    return [\n      this.ticketCode,\n      ...\n    ];\n  }\n  pub static fromFieldArray(records: Array<Array<str>>): Set<Ticket> {\n    let result = new MutSet<Ticket>[];\n    for record in records {\n      result.add(new Ticket(\n        record.at(0),\n        ...\n      );\n    }\n    return result.copy();\n }\n}\n```\n\n이러한 방식으로 데이터 필드 당 초기화 및 변환을 위해 코드 줄을 6줄 추가하는 것 외에도 일정한 메서드 정의의 오버헤드가 생깁니다. 이는 상당한 보일러플레이트 오버헤드를 만듭니다.\n\n자바 및 파이썬과 같은 대중적 언어들은 데코레이터, 추상 기본 클래스 또는 메타 클래스와 같은 다양한 메타 프로그래밍 자동화 도구로 이러한 문제를 완화하려고 노력합니다.\n\nWing에서는 Wing 표준 라이브러리에 소규모 조정을 가하여, 이러한 모든 접근 방식이 비효율적이고 불필요하다는 것이 입증되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n티켓 데이터 구조는 다음과 같이 정의될 수 있습니다:\n\n```js\npub struct Ticket {                 //객체 데이터를 나타내는 데이터 구조\n                                    //주차 티켓의 데이터 포함:\n    ticketCode: str;                //티켓의 고유 식별자;\n                                    //필요한 경우 선행 0이 포함된 10자리 숫자\n    carPlate: str;                  //주차된 차량의 번호판\n    rateName: str;                  //주차된 위치의 요금 이름\n    startingDateTime: std.Datetime; //주차 기간이 시작되는 시간\n    endingDateTime: std.Datetime;   //주차 기간이 종료되는 시간\n    price: num;                     //티켓을 위해 지불한 유로 액수\n    paymentId: str;                 //티켓을 얻기 위해 한 결제의 고유 식별자.\n}\n```\n\n## 주차차량을 위한 ForParkingCars Port\n\n\"Hexagonal Architecture Explained\" 책의 권장에 따라 포트 네이밍은 `ActorName`에 대해 For`ActorName` 규칙을 따릅니다. 여기 주차 차량 외부 엑터를 위해 정의된 내용입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```rust\npub struct BuyTicketRequest {  // 차 티켓을 구매하는 데 필요한 입력 데이터:\n  carPlate: str;    // 주차된 차량의 차량 번호판\n    rateName: str;  // 주차된 지역의 요금 이름\n    euros: num;     // 지불할 유로 액수\n    card: str;      // 지불에 사용되는 카드, 'n-c-mmyyyy' 형식으로\n                    // 'n'은 카드 번호(16자리)\n                    // 'c'는 확인 코드(3자리),\n                    // 'mmyyyy'는 만료 월 및 연도(6자리)\n}\n\n\n/**\n * DRIVING PORT (제공된 인터페이스)\n */\npub inflight interface ForParkingCars {\n /**\n  * 도시의 규제된 지역에서 차를 주차할 수 있는 요금 목록을 가져옵니다.\n  * 요금이 없는 경우 빈 세트가 반환됩니다.\n  */\n getAvailableRates(): Set<rate.Rate>;\n\n /**\n  * 요금을 지불하여 요금이 부과된 지역에 차를 주차하고\n  * 티켓을 저장합니다. 티켓의 유효 기간은 현재 일시에서 시작하며,\n  * 유로 지불 금액을 기반으로 요금을 적용하여 분 단위로 계산됩니다.\n  * @param request 차 티켓 구매에 필요한 입력 데이터.\n  *      @see BuyTicketRequest\n  * @return 요금이 부과된 지역에서 차를 주차하기 위한 유효한 티켓,\n  *    카드를 사용하여 유로 금액을 지불합니다.\n  *    티켓은 지불의 식별자에 대한 참조를 유지합니다.\n  * @throws BuyTicketRequestException\n  *    요청의 입력 데이터가 유효하지 않은 경우.\n  * @throws PayErrorException\n  *    지불 중 오류가 발생한 경우.\n  */\n buyTicket (request: BuyTicketRequest): ticket.Ticket;\n}\n```\n\n티켓 및 요금 객체와 마찬가지로 BuyTicketRequest 객체는 자동 변환 인프라에 의존하는 일반 Wing 구조체로 정의됩니다.\n\nForParkingCars는 Wing 인터페이스로 정의됩니다. 원래의 \"Blue Zone\" 구현과 달리 이 구현은 포트 사양에 BuyTicketRequest 유효성 검사를 포함하지 않습니다. 이것은 일부러 이루어졌습니다.\n\n강력한 객체 캡슐화는 validate() 메소드를 BuyTicketRequest 클래스에 포함시키는 것을 권장하지만, 여기서 채택된 개방형 불변 데이터 구조와 같은 상황에서는 관련 use case 구현에 해당 로직을 포함시키는 것이 좋습니다. 그 반면, 포트 사양에 요청 유효성 검사 로직을 포함하면 너무 많은 구현 세부 사항이 너무 일찍 들어가게 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 관리 포트 사용법\n\n이 기능은 testFixture 기능을 제공하기 위해 사용되며 길지만 완전히 직관적입니다:\n\n```js\nbring \"./Rate.w\" as rate;\nbring \"./Ticket.w\" as ticket;\nbring \"./ForPaying.w\" as forPaying;\n\n\n/**\n * 운전 포트 (제공되는 인터페이스)\n * 초기화, 저장소에 데이터 로드, 앱에서 사용하는 서비스 구성 등과 같은 관리 작업 수행에 사용됩니다.\n * 일반적으로 사용되는 곳:\n *      - 테스트 (운전 액터)에서 테스트 픽처(구동 액터)를 설정하는 데\n *      - 앱 초기화를 시작하는 데\n */\n pub inflight interface ForAdministering {\n\n    /**\n    * 주어진 요율을 데이터 저장소에 로드하고,\n    * 이전에 있는 요율은 삭제합니다.\n    */\n    initializeRates(newRates: Array<rate.Rate>): void;\n\n    /**\n    * 주어진 티켓을 데이터 저장소에 로드하고,\n    * 이전에 있는 티켓은 삭제합니다.\n    */\n    initializeTickets(newTickets: Array<ticket.Ticket>): void;\n\n    /**\n    * 주어진 티켓 코드를 요청 시 반환될 다음 코드로 지정합니다.\n    */\n    changeNextTicketCode(newNextTicketCode: str): void;\n\n    /**\n    * 주어진 코드로 저장소에 있는 티켓을 반환합니다.\n    */\n    getStoredTicket(ticketCode: str): ticket.Ticket;\n\n    /**\n    * \"pay\" 메서드에 마지막으로 수행한 요청을 반환합니다.\n    */\n    getLastPayRequest(): forPaying.PayRequest;\n\n    /**\n    * \"pay\" 메서드에서 반환된 마지막 응답을 반환합니다.\n    * 이것은 결제된 식별자입니다.\n    */\n    getLastPayResponse(): str;\n\n    /**\n    * 결제 오류의 확률을 매개변수로 제공된 \"백분율\"로 설정합니다.\n    */\n    setPaymentError(errorCode: forPaying.PaymentError): void;\n\n    /**\n    * \"pay\" 메서드 실행 중에 발생한 오류 코드를 반환합니다.\n    */\n    getPaymentError(): forPaying.PaymentError;\n\n    /**\n    * 주어진 일시를 현재 일시로 설정합니다.\n    */\n    changeCurrentDateTime(newCurrentDateTime: std.Datetime): void;\n\n}\n```\n\n이제 우리는 한 단계 더 깊이 파고들어 애플리케이션 로직 구현을 살펴봐야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 구현 세부 내용\n\n## 주차 차량용 백엔드\n\n```js\nimport \"../../application/ports\" as ports;\nimport \"../../application/usecases\" as usecases;\n\npublic class ForParkingCarsBackend implements ports.ForParkingCars {\n    private final usecases.BuyTicket buyTicket;\n    private final usecases.GetAvailableRates getAvailableRates;\n\n    public ForParkingCarsBackend(\n        ports.ForStoringData dataRepository,\n        ports.ForPaying paymentService,\n        ports.ForObtainingDateTime dateTimeService\n    ) {\n        this.buyTicket = new usecases.BuyTicket(\n            dataRepository, paymentService, dateTimeService);\n        this.getAvailableRates = new usecases.GetAvailableRates(\n            dataRepository);\n    }\n\n    public Set<ports.Rate> getAvailableRates() {\n        return getAvailableRates.apply();\n    }\n\n    public ports.Ticket buyTicket(ports.BuyTicketRequest request) {\n        return buyTicket.apply(request);\n    }\n}\n```\n\n이 클래스는 src/outside/backend 폴더에 위치해 있으며 직접적인 함수 호출에 적합한 ports.ForParkingCars 인터페이스의 구현을 제공합니다. 두 가지 추가 보조 포트인 ports.ForStoringData 및 ports.ForObtainingTime을 전제로하며 실제 구현은 두 Use Case 구현에 위임됩니다: BuyTicket 및 GetAvailableRates. BuyTicket Use Case 구현에 핵심 시스템 로직이 포함되어 있으므로 해당 부분을 살펴보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 티켓 구매 사용 사례\n\n```js\n수학 가져오기;\ndatetimex 가져오기;\n예외 가져오기;\n\"../ports\"를 ports로 가져오기;\n\"./Verifier.w\"를 validate로 가져오기;\n\npub 클래스 BuyTicket {\n    _dataRepository: ports.ForStoringData;\n    _paymentService: ports.ForPaying;\n    _dateTimeService: ports.ForObtainingDateTime;\n\n    새로운(\n        dataRepository: ports.ForStoringData,\n        paymentService: ports.ForPaying,\n        dateTimeService: ports.ForObtainingDateTime\n    ) {\n        this._dataRepository = dataRepository;\n        this._paymentService = paymentService;\n        this._dateTimeService = dateTimeService;\n    }\n\n    pub inflight apply(request: ports.BuyTicketRequest): ports.Ticket {\n        let currentDateTime = this._dateTimeService.getCurrentDateTime();\n        this._validateRequest(request, currentDateTime);\n        let paymentId = this._paymentService.pay(\n            euros: request.euros,\n            card: request.card\n        );\n        let ticket = this._buildTicket(request, paymentId, currentDateTime);\n        this._dataRepository.saveTicket(ticket);\n        return ticket;\n    }\n\n    inflight _validateRequest(request: ports.BuyTicketRequest, currentDateTime: std.Datetime): void {\n        let requestErrors = validate.BuyTicketRequest(request, currentDateTime);\n        if requestErrors.length > 0 {\n            throw exception.ValueError(\n                \"티켓 구매 요청이 유효하지 않습니다\",\n                requestErrors\n            );\n        }\n    }\n\n    inflight _buildTicket(\n        request: ports.BuyTicketRequest,\n        paymentId: str,\n        currentDateTime: std.Datetime\n    ): ports.Ticket {\n        let ticketCode = this._dataRepository.nextTicketCode();\n        let rate = this._dataRepository.getRateByName(request.rateName);\n        let endingDateTime = BuyTicket._calculateEndingDateTime(\n            currentDateTime,\n            request.euros,\n            rate.eurosPerHour\n        );\n        return ports.Ticket {\n            ticketCode: ticketCode,\n            carPlate: request.carPlate,\n            rateName: request.rateName,\n            startingDateTime: currentDateTime,\n            endingDateTime: endingDateTime,\n            price: request.euros,\n            paymentId: paymentId\n        };\n    }\n\n    /**\n     * minutes = (euros * minutesPerHour) / eurosPerHour\n     * endingDateTime = startingDateTime + minutes\n     */\n     static inflight _calculateEndingDateTime(\n        startingDateTime: std.Datetime,\n        euros: num,\n        eurosPerHour: num\n    ): std.Datetime {\n        let MINUTES_PER_HOUR = 60;\n        let minutes = math.round((MINUTES_PER_HOUR * euros) / eurosPerHour);\n        return datetimex.plus(startingDateTime, duration.fromMinutes(minutes));\n    }\n}\n```\n\n\"Buy Ticket\" 사용 사례 구현 클래스는 src/application/usecases 폴더에 있습니다. 이것은 사용 사례 로직을 실행하는 inflight 함수를 반환합니다:\n\n- 요청 유효성 검사\n- 새 티켓 결제\n- 티켓 레코드 생성\n- 데이터베이스에 티켓 레코드 저장\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nImplementing Use Cases as inflight functions is essential because all Wing event handlers are inflight functions. While direct function calls are handy for local testing, they will mostly be HTTP REST or GraphQL API calls in a real deployment.\n\nThe validation of the BuyTicketRequest is actually handled by a utility class within the Verifier.w module. This approach is taken because individual field validation could be very detailed and involve numerous low-level specifics, which add little to the overall understanding of the use case logic.\n\n## Bringing Everything Together\n\nIn line with suggestions from the \"Hexagonal Architecture Explained\" book, this is accomplished within a Configurator class as shown below:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport util;\nimport endor;\nimport outside from \"./outside\";\nimport ports from \"./application/ports\";\n\n\nenum ApiType {\n    DIRECT_CALL,\n    HTTP_REST\n}\n\nenum ProgramType {\n    UNKNOWN,\n    TEST,\n    SERVICE\n}\n\nclass Configurator extends outside.BlueZoneApiFactory {\n    _apiFactory;\n\n    constructor(name) {\n        let mockService = new outside.mock.MockDataRepository();\n        let programType = this._getProgramType(name);\n        let mode = this._getMode(programType);\n        let apiType = this._getApiType(programType, mode);\n        this._apiFactory = this._getApiFactory(\n            name,\n            mode,\n            apiType,\n            mockService,\n            mockService,\n            mockService\n        );\n    }\n\n    _getProgramType(name) { //TODO: migrate to endor??\n        if (name.endsWith(\"Test\")) {\n            return ProgramType.TEST;\n        } else if (name.endsWith(\"Service\") || name.endsWith(\"Application\")) {\n            return ProgramType.SERVICE;\n        } else if (std.Node.of(this).app.isTestEnvironment) {\n            return ProgramType.TEST;\n        }\n        return ProgramType.UNKNOWN;\n    }\n\n    _getMode(programType) {\n        if (let mode = util.tryEnv(\"MODE\")) {\n            return {\n                \"DEV\": endor.Mode.DEV,\n                \"TEST\": endor.Mode.TEST,\n                \"STAGE\": endor.Mode.STAGE,\n                \"PROD\": endor.Mode.PROD\n            }[mode];\n        } else if (programType === ProgramType.TEST) {\n            return endor.Mode.TEST;\n        } else if (programType === ProgramType.SERVICE) {\n            return endor.Mode.STAGE;\n        }\n        return endor.Mode.DEV;\n    }\n\n    _getApiType(programType, mode) {\n        if (let apiType = util.tryEnv(\"API_TYPE\")) {\n            return {\n                \"DIRECT_CALL\": ApiType.DIRECT_CALL,\n                \"HTTP_REST\": ApiType.HTTP_REST\n            }[apiType];\n        } else if (programType === ProgramType.SERVICE) {\n            return ApiType.HTTP_REST;\n        }\n        let target = util.env(\"WING_TARGET\");\n        if (target.includes(\"sim\")) {\n            return ApiType.DIRECT_CALL;\n        }\n        return ApiType.HTTP_REST;\n    }\n\n    _getApiFactory(name, mode, apiType, dataService, paymentService, dateTimeService) {\n        let directCall = new outside.DirectCallApiFactory(\n            dataService,\n            paymentService,\n            dateTimeService\n        );\n        if (apiType === ApiType.DIRECT_CALL) {\n            return directCall;\n        } else if (apiType === ApiType.HTTP_REST) {\n            return new outside.HttpRestApiFactory(\n                name,\n                mode,\n                directCall\n            );\n        }\n    }\n\n    getForAdministering() {\n        return this._apiFactory.getForAdministering();\n    }\n\n    getForParkingCars() {\n        return this._apiFactory.getForParkingCars();\n    }\n\n    getForIssuingFines() {\n        return this._apiFactory.getForIssuingFines();\n    }\n\n}\n```\n\nThis is an experimental, still not final, implementation, but it could be extended to address the production deployment needs. It adopts a static system configuration by exploiting the Wing preflight machinery.\n\nIn this implementation, a special MockDataStore object implements all three Secondary Ports: data service, paying service, and date-time service. It does not have to be this way and was created to save time during the scaffolding development.\n\nThe main responsibility of the Configurator class is to determine which type of API should be used:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 직접 호출\n- 로컬 HTTP REST\n- 원격 HTTP REST\n- 로컬 HTTP REST 및 HTML\n- 원격 HTTP REST 및 HTML\n\n실제 API 생성은 해당 ApiFactory 클래스에 위임됩니다.\n\n이러한 구현의 주목할 만한 점은 실제 HTML 기반 UI 모드를 제외한 모든 구성에서 동일한 테스트 스위트를 사용한다는 것입니다. 후자도 가능하지만 Selenium과 같은 HTML 테스트 드라이버가 필요합니다.\n\n이렇게 코드 재사용 수준을 달성한 것은 이번이 처음입니다. 결과적으로 코드 구조 리팩토링을 수행할 때 대부분 로컬 직접 호출 구성을 실행하며, 변경 없이 원격 테스트 및 프로덕션 환경에서 실행될 것을 확신합니다. 이는 Wing 클라우드 지향 프로그래밍 언어와 헥사고날 아키텍처가 정말로 우수한 조합임을 증명합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 큰 그림\n\n각 모듈의 전체 소스 코드를 모두 포함하면 이 문서의 크기가 너무 커질 것입니다. 이 프로젝트의 GitHub 저장소에 대한 액세스는 요청시 제공됩니다.\n\n그 대신 전체 폴더 구조, 두 개의 UML 클래스 다이어그램, 그리고 주요 프로그램 요소와 관계를 반영하는 클라우드 리소스 다이어그램을 제시할 것입니다.\n\n```js\n├── src\n│   ├── application\n│   │   ├── ports\n│   │   │   ├── ForAdministering.w\n│   │   │   ├── ForIssuingFines.w\n│   │   │   ├── ForObtainingDateTime.w\n│   │   │   ├── ForParkingCars.w\n│   │   │   ├── ForPaying.w\n│   │   │   ├── ForStoringData.w\n│   │   │   ├── Rate.w\n│   │   │   └── Ticket.w\n│   │   ├── usecases\n│   │   │   ├── BuyTicket.w\n│   │   │   ├── CheckCar.w\n│   │   │   ├── GetAvailableRates.w\n│   │   │   └── Veryfier.w\n│   ├── outside\n│   │   ├── backend\n│   │   │   ├── ForAdministeringBackend.w\n│   │   │   ├── ForIssuingFinesBackend.w\n│   │   │   └── ForParkingCarsBackend.w\n│   │   ├── http\n│   │   │   ├── html\n│   │   │   │    ├── _htmlForParkingCarsFormatter.ts\n│   │   │   │    └── htmlForParkingCarsFormatter.w\n│   │   │   ├── json\n│   │   │   │    ├── jsonForIssuingFinesFormatter.w\n│   │   │   │    └── jsonForParkingCarsFormatter.w\n│   │   │   ├── ForIssuingFinesClient.w\n│   │   │   ├── ForIssuingFinesController.w\n│   │   │   ├── ForParkingCarsClient.w\n│   │   │   ├── ForParkingCarsController.w\n│   │   │   └── middleware.w\n│   │   ├── mock\n│   │   │   └── MockDataRepository.w\n│   │   ├── ApiFactory.w\n│   │   ├── BlueZoneAplication.main.w\n│   │   ├── DirectCallApiFactory.w\n│   │   └── HttpRestApiFactory.w\n│   └── Configurator.w\n├── test\n│   ├── steps\n│   │   ├── BuyTicketTestSteps.w\n│   │   ├── CheckCarTestSteps.w\n│   │   ├── Parser.w\n│   │   └── TestStepsBase.w\n│   ├── usecase.BuyTicketTest.w\n│   └── usecase.CheckCarTest.w\n├── .gitignore\n├── LICENSE\n├── Makefile\n├── README.md\n├── package-lock.json\n├── package.json\n└── tsconfig.json\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트의 응용 프로그램 논리적으로는 작지만 이미 구조를 제어하는 데 충분한 도전 과제를 제기합니다. 현재 버전은 다음과 같은 여러 기준 사이의 합리적인 균형을 이루려고 노력했습니다:\n\n- 파일 구조의 깊이.\n- 복잡성 및 가져오기 문장의 양.\n- 의도한 가치를 전달하는 코드와 그것을 구성, 테스트하고 전달하는 데 필요한 코드 간의 비율.\n\n모든 원하는 메트릭 세트를 계산하는 것은 이 출판물의 범위를 벗어난 일이지만, 여기서 지금 직접 손으로 백업한 계산을 수행해볼 수 있습니다: 응용 프로그램과 외부 폴더 아래의 파일(여기에 \"가치\"라고 부르기로 하겠습니다)의 백분율과 총 파일 및 폴더 수(이를 \"물건\"이라고 부르기로 하겠습니다). 현재 버전에서의 숫자는 다음과 같습니다:\n\n총계: 55\nsrc/application: 16\nsrc/: 41\n파일: 43\n엄격한 가치 대 물건 비율: 16*100/55 = 29.09%\n확장된 가치 대 물건 비율: (15+19)*100/42 = 74.55%\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n크게 할지 작게 할지? 좋은 것일지 나쁜 것일지? 지금 당장은 확실히 말하기 어렵습니다. 초기 인상은 숫자가 건강하다는 것입니다. 더 근거 있는 결론을 내기 위해서는 추가적인 연구와 실험이 필요합니다. 실제 제품 시스템은 상당히 많은 테스트가 필요할 것입니다.\n\n인지 부담 관점에서, 43개의 파일은 인간의 커뮤니케이션 채널과 단기 기억의 유명한 7 ± 2 제한을 초과하는 많은 숫자입니다. 조직이 필요합니다. 현재 버전에서 한 수준에서의 최대 파일 수는 8개로 제한 내에 있습니다.\n\n제시된 계층 다이어그램은 실제 그래프 이미지를 부분적으로만 반영합니다. bring 문에 의한 파일 간 종속성이 보이지 않습니다. 또한 결과적인 패키지 크기에 영향을 미치는 외부 종속성을 반영하는 **node_files** 폴더도 빠졌습니다.\n\n간단히 말하면, 도구 및 측정 방법론에 대한 추가 투자 없이는 그림이 부분적일 뿐입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리는 여전히 원하는 방향을 몇 가지 제시할 수 있습니다: 가능한 한 직접 가치를 창출하는 자산들과 이를 작동하게 만드는 데 필요한 지원 요소는 최소한으로 다루고 싶습니다. 이상적으로, 건강한 가치 대 지원물 비율은 언어 및 라이브러리 지원에서 나올 것입니다. 자동 코드 생성, 생성적 AI에 의해 수행되는 것을 포함하여 타이핑을 줄이지만 전반적인 인지 부담은 줄일 것입니다.\n\n# 클래스 다이어그램\n\n단일 UML 클래스 다이어그램에 모든 \"Blue Zone\" 애플리케이션 요소를 묘사하는 것은 현실적이지 않을 것입니다. UML은 선행 요소와 기체 내 요소를 직접적으로 분리된 표현으로 지원하지 않습니다. 시스템의 가장 중요한 부분을 별도로 시각화할 수 있습니다. 예를 들어, 다음은 애플리케이션 부분용 UML 클래스 다이어그램입니다:\n\n![클래스 다이어그램](/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이용자들과 주차 감독관 주요 캐릭터와 BuyTicket, CheckCar 사용 케이스와는 이름이 다르다는 것을 주목해주세요. 이것은 실수가 아닙니다. 주요 포트 인터페이스의 이름은 특정 사용 케이스에서 주요 캐릭터 역할을 반영해야 합니다. 이러한 명명에 대한 자동적인 규칙은 없습니다. 선택된 이름이 직관적이기를 희망합니다.\n\n또한, 주요 인터페이스가 응용 프로그램 모듈 내에서 직접 구현되지 않고 이러한 인터페이스와 사용 케이스 구현 사이에 불일치가 있는 것을 주목해주세요.\n\n또한, 이것 또한 실수가 아닙니다. 주요 인터페이스와 해당 사용 케이스 구현 사이의 구체적인 연결은 설정에 따라 다르며 아래 UML 클래스 다이어그램에 반영됩니다:\n![다이어그램](/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 클래스 다이어그램에 따르면 구성자(Configurator)가 사용할 IBlueZoneApiFactory 구현체를 결정합니다. DirectApiCallFactory는 로컬 테스트용이며 HttpRestApiFactory는 HTTP를 통한 로컬 및 원격 테스트 및 프로덕션 배포용입니다.\n\n## 클라우드 리소스\n\n![이미지](/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 클라우드 리소스 다이어그램은 Wing 컴파일레이션 결과를 AWS 대상 플랫폼으로 반영한 것입니다. UML 클래스 다이어그램과는 매우 다르며, 다양한 종류의 다이어그램이 함께 동작하여 서로 보완하는 역할을 한다는 결론을 내리게 되었습니다. 클라우드 리소스 다이어그램은 비용, 성능, 신뢰성, 복구력, 보안과 같은 시스템의 운영 측면을 이해하고 제어하는 데 중요합니다.\n\n과거의 다이어그램과 마찬가지로 주요 도전 과제는 규모입니다. 더 많은 클라우드 리소스가 추가되면 다이어그램에 너무 많은 세부 사항이 포함되어 혼란스러울 수 있습니다.\n\n현재 모든 다이어그램의 버전은 공식 청사진보다는 유용한 일러스트레이션에 가깝습니다. 정확성과 이해도 사이의 적절한 균형을 유지하는 것은 앞으로의 연구 주제입니다. 이 문제를 이전에 나의 초기 출간 논문 중 하나에서 다루었습니다. 아마도, 이 연구 주제로 다시 돌아가야 할 때가 온 것 같습니다.\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\"최근 출간된 \"Hexagonal Architecture Explained\" 책에 소개된 \"Blue Zone\" 애플리케이션을 Java에서 Wing으로 이식하는 경험은 다음과 같은 임시 결론을 이끌어 냈습니다.\n\n- 소프트웨어 애플리케이션을 직접 클라우드로 이식하는 것은 종종 비효율적이고 유지보수하기 어려운 코드를 낳습니다.\n- 각 프로그래밍 언어는 디자인 결정을 표현하는 고유한 방식을 갖고 있으며, 하나에서 다른 것으로의 맹목적인 번역은 작동하지 않습니다.\n- 새로운 클라우드 중심 프로그래밍 언어 Wing에서 Hexagonal Architecture 패턴을 구현하는 것이 성공적인 조합임이 입증되었습니다. 이 접근 방식은 비용, 성능, 유연성 및 보안 사이의 적절한 균형을 이룹니다.\n- 기능 면에서 조금이라도 큰 애플리케이션의 코드베이스 크기는 빠르게 증가합니다. 복잡성을 효과적으로 관리하려면 방법론과 지침이 필요합니다.\n- 애플리케이션 논리와 클라우드 리소스의 그래픽 표현은 설명에 유용합니다. 이를 형식적인 청사진으로 변환하려면 추가 연구가 필요합니다.\n\n# 감사의 글\n\n이 출판물을 준비하는 동안 초안을 향상시키고 품질을 보장하기 위해 몇 가지 핵심 도구를 활용하였습니다.\"\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n초안은 노션의 무료 구독을 통해 조직화할 수 있는 기능을 활용하여 아이디어를 구조화하고 발전시했습니다.\n\n문법 및 철자 검토를 위해 Grammarly의 무료 버전이 기본 오류를 식별하고 수정하여 텍스트의 가독성을 보장하는 데 유용했습니다.\n\n스타일 표현의 향상과 이야기 일관성을 검토하기 위해 ChatGPT 4o의 유료 버전을 사용했습니다. ChatGPT 4o 도구는 Trusted Wing Libraries의 중요한 부분인 datetimex와 TypeScript의 struct를 개발하는 데도 사용되었습니다.\n\nUML 클래스 다이어그램은 PlantText UML 온라인 도구의 무료 버전을 사용하여 생성되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트 단계 클래스(TestSteps)에서 사전 및 비행 정의를 올바르게 처리하는 데 Cristian Pallares의 도움이 중요했습니다.\n\n이 출판물 초안에 중요한 코멘트를 해 주신 Elad Ben-Israel에게 많은 감사를 드립니다.\n\n\"블루 존\" 애플리케이션의 자바 버전은 책의 공동 저자인 Juan Manuel Garrido de Paz에 의해 개발되었습니다. 안타깝게도 Juan Manuel Garrido de Paz는 2024년 4월에 별세하셨습니다. 그의 추억이 기억되고 이 보고서가 그에게 바치는 축복이 되기를 바랍니다.\n\n모든 고급 도구와 자원이 준비 과정에 상당한 기여를 했지만, 이 문서에 제시된 개념, 해결책 및 최종 결정은 전적으로 제 자신의 것이며, 그에 대한 책임은 전적으로 제게 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_0.png"},"coverImage":"/assets/img/2024-06-22-PortedtoCloudwithWinglangPartOne_0.png","tag":["Tech"],"readingTime":45},{"title":"Java에서 문자열 마스터하는 방법","description":"","date":"2024-06-22 22:01","slug":"2024-06-22-MasteringStringsinJava","content":"\n문자열 클래스\n\n자바의 문자열 클래스는 java.lang 패키지의 일부이며, 문자 시퀀스를 생성하고 조작하는 데 사용됩니다. 문자열 클래스는 final로 표시되어 있습니다. 아무도 문자열 메서드 중 하나의 동작을 재정의할 수 없기 때문에 Java의 문자열은 변경할 수 없습니다.\n\n새 문자열 생성\n\n이 경우에는 \"Java\"가 문자열 상수 풀(String Constant Pool, SCP)에 배치되고 s가 그것을 가리킵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n**String Constant Pool in Java**\n\nJava의 문자열 상수 풀(String Constant Pool)은 JVM이 사용하는 힙 메모리의 일부로, 문자열 상수를 저장하는 데 사용됩니다. 문자열 풀의 주요 목적은 기존의 문자열 인스턴스를 재사용하여 메모리를 절약하는 것입니다.\n\n2. `String s = new String(\"Vamika\");` // 이 코드는 두 개의 문자열 객체와 하나의 참조 변수를 생성합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 경우에는 새 키워드를 사용하므로 heap 영역에 새로운 String 객체가 생성되고 s가 해당 객체를 가리키게 됩니다. 게다가 리터럴 \"Vamika\"는 SCP에 배치됩니다. 단, 해당 객체가 pool 영역에 존재하지 않는 경우에 한합니다. 이미 동일한 객체가 존재하는 경우, 기존 객체가 재사용됩니다 (기존 String은 추가 참조를 갖게 됩니다).\n\n참고: 이 규칙은 heap에는 적용되지 않습니다. 따라서 heap 영역에는 중복 콘텐츠가 있을 수 있지만, pool 영역에는 중복이 허용되지 않습니다.\n\n![Mastering Strings in Java](/assets/img/2024-06-22-MasteringStringsinJava_1.png)\n\n문자열은 변경할 수 없습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리는 모두 한 번 String 객체가 생성되면 그것을 변경할 수 없다고 들어봤어요 — 그렇다면 우리가 그것을 변경하려고 시도하면 어떻게 될까요? 알아보겠습니다.\n\n한 번 String에 값을 할당하면, 그 값은 변경될 수 없습니다 — 즉, 불변성이라는 것이에요.\n\n예를 들면,\n\nString s=\"Java\"; //이 코드는 값이 \"Java\"인 String 객체를 생성하고, s가 그것을 참조합니다\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ns.concat(\" Programming\"); // JVM은 \"Java Programming\"이라는 두 번째 문자열 객체를 생성하지만 어떤 변수도 이를 참조하지 않습니다. 따라서 이 객체는 즉시 손실됩니다.\n\n![Mastering Strings in Java](/assets/img/2024-06-22-MasteringStringsinJava_2.png)\n\n다른 예제를 살펴봅시다.\n\ns = s.concat(\" Learning\"); // JVM은 \"Java Learning\"이라는 또 다른 문자열 객체를 생성하고 변수 s가 이를 참조합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-22-MasteringStringsinJava_3.png\" />\n\n알아보셨나요? 마지막 단계에서 새로운 String 객체 \"Java Learning\"이 생성되고 s가 이를 참조하며 이전 객체 \"Java\"는 버려집니다.\n\n한 번 String 객체를 생성하면 기존의 String 객체에서 어떠한 작업도 수행할 수 없습니다. 만약 작업을 수행하면 해당 변경 사항이 있는 새로운 String 객체가 생성됩니다. 이러한 String의 변경할 수 없는 특성을 문자열의 불변성으로 알려져 있습니다.\n\n## String 객체들 간의 비교\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCase 1:\n\n`![image](/assets/img/2024-06-22-MasteringStringsinJava_4.png)`\n\n`![image](/assets/img/2024-06-22-MasteringStringsinJava_5.png)`\n\nHere, two different String objects are created in the heap memory. Each new String(“Vamika”) creates a new instance of a String object, even though they contain the same sequence of characters.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n'==' 연산자를 사용한 비교:\n'==' 연산자는 's1'과 's2'가 메모리에서 동일한 객체를 참조하는지를 확인합니다. 's1'과 's2'는 new 키워드를 사용하여 생성된 두 개의 별개 객체이기 때문에 이 비교는 false를 반환합니다.\nequals() 메서드를 사용한 비교:\n'equals()' 메서드는 's1'과 's2'의 값이 동일한지를 확인합니다. 's1'과 's2' 모두 동일한 문자열 (\"Vamika\") 시퀀스를 포함하고 있기 때문에 이 비교는 true를 반환합니다.\n\nCase 2:\n\n<img src=\"/assets/img/2024-06-22-MasteringStringsinJava_6.png\" />\n\nCase 3:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모든 String 상수마다 하나의 객체가 SCP 영역에 배치됩니다. 또는 실행 시 연산으로 인해 생성되는 객체는 힙 영역에만 배치됩니다.\n\n예시:\n\n![image](/assets/img/2024-06-22-MasteringStringsinJava_7.png)\n\n## String 클래스의 중요한 메소드\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- charAt(int index) — 지정된 인덱스에 위치한 문자 값을 반환합니다\n- concat(String s) — 다른 문자열을 하나의 끝에 추가합니다 (“+”도 작동합니다)\n- equals(Object o) — 내용을 비교하며, 대소문자도 같아야 함\n- equalsIgnoreCase(String s) — 내용을 비교하며, 대소문자를 무시합니다\n- length() — 문자열의 문자 수를 반환합니다\n- replace(char old, char new) — 문자의 발생을 새로운 문자로 바꿉니다\n- substring(int startIndex) — 문자열의 시작 인덱스부터 끝까지의 부분 문자열을 반환합니다\n- substring(int startIndex) — 문자열의 시작 인덱스부터 끝-1 인덱스까지의 부분 문자열을 반환합니다\n- toLowerCase() — 대문자를 소문자로 변환한 문자열을 반환합니다\n- toUpperCase() — 소문자를 대문자로 변환한 문자열을 반환합니다\n- trim() — 문자열의 양쪽 공백을 제거합니다\n- intern() — 힙 메모리에 있는 문자열의 정확한 사본을 생성하여 문자열 상수 풀에 저장합니다\n- indexOf(char ch) — 지정된 문자의 첫 번째 발생 위치를 반환합니다\n- lastIndexOf(char ch) — 지정된 문자의 마지막 발생 위치를 반환합니다\n\n![이미지](/assets/img/2024-06-22-MasteringStringsinJava_8.png)\n","ogImage":{"url":"/assets/img/2024-06-22-MasteringStringsinJava_0.png"},"coverImage":"/assets/img/2024-06-22-MasteringStringsinJava_0.png","tag":["Tech"],"readingTime":6},{"title":"안녕하세요 안드로이드 개발 중 SOLID 원칙을 이해하는 방법에 대해 소개해드리겠습니다 함께 살펴보시죠","description":"","date":"2024-06-19 22:27","slug":"2024-06-19-UnderstandingSOLIDPrinciplesinAndroidDevelopment","content":"\n소프트웨어 개발에서 특히 안드로이드 개발에서는 설계 원칙을 준수하여 코드를 유지보수 가능하고 확장 가능하며 견고하게 유지하는 것이 중요합니다. 가장 중요한 설계 원칙 중 하나는 SOLID 원칙입니다.\n\n각 원칙을 실시간 안드로이드 예시와 함께 살펴보고 프로젝트에 적용하는 방법을 이해하고 구현하는 데 도움이 될 것입니다.\n\n## 1. 단일 책임 원칙 (SRP)\n\n정의:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클래스는 변경되는 이유가 하나여야 합니다. 즉, 하나의 작업 또는 책임만 가져야 합니다.\n\n예시:\n\nAndroid 앱에서 `UserManager` 클래스가 있어서 로그인, 로그아웃 및 사용자 데이터 가져오기와 같은 사용자 관련 작업을 담당한다고 상상해보세요. 만약 이 클래스에 UI 관련 코드도 포함한다면, SRP(Single Responsibility Principle)를 위반합니다. 대신, 역할을 분리해야 합니다: `UserManager`가 사용자 관련 로직을 처리하고 `UserUIHandler`와 같은 별도의 클래스가 UI 관련 작업을 관리해야 합니다.\n\n## 2. 개방/폐쇄 원칙 (OCP)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n정의:\n\n소프트웨어 엔티티는 확장에 열려 있지만 수정에는 닫혀 있어야 합니다.\n\n예시:\n\n예를 들어, 알림을 보내는 `NotificationSender` 클래스가 있다고 가정해보겠습니다. 이 클래스에 이메일 이외에 SMS와 같은 새로운 유형의 알림을 추가하려면 `NotificationSender`를 직접 수정해서는 안 됩니다. 대신, 각 유형의 알림에 대한 새로운 클래스를 생성하고 `NotificationSender` 클래스가 이러한 확장을 처리할 수 있도록 확실하게 해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 3. Liskov Substitution Principle (LSP)\n\n정의:\n\n하위 유형은 기본 유형을 대체하여 프로그램의 정확성에 영향을주지 않고 대체 가능해야합니다.\n\n예시:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n베이스 클래스 `Bird`와 하위 클래스 `Penguin`을 고려해봅시다. 코드가 모든 `Bird`가 날 수 있을 것으로 예상하고 있다면, `Penguin`을 대체한다면 날지 못한다는 점 때문에 이 기대가 깨집니다. 이는 LSP를 위반하는 것입니다. LSP를 준수하기 위해 하위 클래스가 베이스 클래스가 약속한 것과 일관되게 동작하도록 하시기 바랍니다. 예를 들어, `Bird`에 `Penguin`이 날지 못하게 하고 수영하도록 오버라이드할 수 있는 `move`와 같은 메소드가 있는 클래스 계층 구조를 재설계해보세요.\n\n## 4. 인터페이스 분리 원칙 (ISP)\n\n정의:\n\n클라이언트는 사용하지 않는 인터페이스에 의존하도록 강요되어서는 안 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예시:\n\n만약 `Vehicle` 인터페이스에 `drive`, `fly`, `sail`과 같은 메서드가 있다면, 이 인터페이스를 구현하는 `Car` 클래스는 필요하지 않은 메서드에 대한 구현을 제공해야 합니다 (예: `fly` 및 `sail`). 대신에 `Vehicle`를 더 작고 구체적인 인터페이스로 나누어 `Drivable`, `Flyable`, `Sailable`과 같은 인터페이스를 만듭니다. 이렇게 하면 `Car`는 `Drivable` 인터페이스만 구현하며 ISP를 준수할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n고수준 모듈은 저수준 모듈에 의존해서는 안 됩니다. 둘 다 추상화에 의존해야 합니다.\n\n예시:\n\n`OrderProcessor` 클래스가 주문 확인을 보내기 위해 `EmailService`의 인스턴스를 직접 생성한다면 DIP를 위반합니다. 대신에 `NotificationService`와 같은 인터페이스를 사용하고, `OrderProcessor`가 이 인터페이스에 의존하도록 합니다. 그럼 `EmailService`는 `NotificationService`를 구현할 수 있습니다. 이렇게 하면 다른 알림 서비스로 쉽게 교체할 수 있어 DIP를 준수할 수 있습니다.\n\n## 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSOLID 원칙을 준수하면 Android 앱의 코드베이스를 깨끗하고 유지보수 가능하며 확장 가능하게 유지할 수 있습니다. 각 원칙은 소프트웨어 설계의 특정 측면을 다루며 코드를 이해하기 쉽고 확장 및 유지보수하기 쉽게 만듭니다. 프로젝트에 이러한 원칙을 적용하고 코드 품질에 미치는 차이를 경험해보세요!\n\nAndroid 개발 여정에서 SOLID 원칙을 구현하는 데 도움이 필요하거나 더 궁금한 점이 있으시면 언제든지 문의해 주세요! 더 많은 통찰과 업데이트를 위해 LinkedIn에서 저를 팔로우해주세요.\n\n감사합니다. 즐거운 코딩하세요!\n","ogImage":{"url":"/assets/img/2024-06-19-UnderstandingSOLIDPrinciplesinAndroidDevelopment_0.png"},"coverImage":"/assets/img/2024-06-19-UnderstandingSOLIDPrinciplesinAndroidDevelopment_0.png","tag":["Tech"],"readingTime":5},{"title":"Jetpack Compose에서 사용자 정의 3D 대화 상자 애니메이션 만들기","description":"","date":"2024-06-19 22:26","slug":"2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose","content":"\n환영합니다 👋\n\n젯팩 컴포즈의 기본 대화 상자 모양 애니메이션에 지루한가요? 그럼 다행히도 올바른 곳에 오신 것을 환영합니다.\n\n이 기사에서는 사용자를 기쁘게 할 멋진 3D 애니메이션을 젯팩 컴포즈의 대화 상자에 5분 안에 만들어 보겠습니다.\n\n다행히도, 젯팩 컴포즈를 사용하면 이를 쉽게 할 수 있습니다 🤗\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_0.png)\n\n# AnimatedDialog 함수\n\n다이얼로그를 재사용 가능하고 어떤 시나리오에도 적용할 수 있게 하기 위해, 애니메이션을 포함하고 다이얼로그의 내용과 속성을 지정할 수 있는 함수를 만들어 봅시다.\n\n```js\n@Composable\nfun AnimatedDialog(\n    onDismiss: () -> Unit,\n    inAnimDuration: Int = 720,\n    outAnimDuration: Int = 450,\n    properties: DialogProperties = DialogProperties(),\n    content: @Composable (triggerDismiss: () -> Unit) -> Unit,\n)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 함수는 여러 개의 매개변수를 사용합니다. 함께 살펴보겠습니다:\n\n✨ onDismiss ➜ 대화 상자가 닫힐 때 트리거되는 콜백 함수입니다.\n\n✨ inAnimDuration ➜ 대화 상자의 표시 애니메이션 지속 시간입니다.\n\n✨ outAnimDuration ➜ 대화 상자의 사라짐 애니메이션 지속 시간입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n✨ properties ➜ 대화 상자의 설정 속성입니다.\n\n✨ content ➜ 대화 상자 내용을 정의하는 composable 람다입니다. 이 람다는 대화 상자를 종료 애니메이션과 함께 프로그래밍 방식으로 닫을 수 있는 함수 (triggerDismiss)를 받습니다.\n\n# 구현\n\n자, 이제 애니메이션 구현으로 넘어갈까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 변수 정의\n\n먼저, 몇 가지 변수를 정의해야 합니다:\n\n```js\n// 종료 애니메이션 처리를 위한 코루틴 범위\nval scope = rememberCoroutineScope()\n// 애니메이션을 관리하는 상태\nvar isDialogVisible by remember { mutableStateOf(false) }\n// 다양한 애니메이션에서 사용될 공통 애니메이션 스펙\nval animationSpec = tween<Float>(\n    if (isDialogVisible) inAnimDuration else outAnimDuration\n)\n```\n\n## 애니메이션 상태\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그 다음으로, alpha, rotationX 및 scale에 대한 세 가지 애니메이션 상태를 정의해야합니다:\n\n```js\nval dialogAlpha by animateFloatAsState(\n    targetValue = if (isDialogVisible) 1f else 0f,\n    animationSpec = animationSpec\n)\n\nval dialogRotationX by animateFloatAsState(\n    targetValue = if (isDialogVisible) 0f else -90f,\n    animationSpec = animationSpec\n)\n\nval dialogScale by animateFloatAsState(\n    targetValue = if (isDialogVisible) 1f else 0f,\n    animationSpec = animationSpec\n)\n```\n\n## 애니메이션 람다로 닫기\n\n또한 다이얼로그를 종료 애니메이션으로 닫을 람다 함수를 정의해야하며, 이것은 컨텐츠에 전달할 것입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nval dismissWithAnimation: () -> Unit = {\n    scope.launch {\n        // 종료 애니메이션을 트리거합니다\n        isDialogVisible = false\n        // 완료될 때까지 기다립니다\n        delay(outAnimDuration.toLong())\n        // 대화 상자를 닫습니다\n        onDismiss()\n    }\n}\n```\n\n## Entry Animation 트리거하기\n\n컴포저블을 실행했을 때 진입 애니메이션을 트리거하려면 LaunchedEffect와 Unit을 키로 사용할 수 있습니다:\n\n```js\nLaunchedEffect(Unit) {\n    isDialogVisible = true\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 대화창 만들기\n\n최종 부분에서는 모든 것을 함께 결합하고이 매혹적인 애니메이션으로 대화창을 만들 준비가 되었습니다:\n\n```js\nDialog(\n    onDismissRequest = dismissWithAnimation,\n    properties = properties\n) {\n    Box(\n        modifier = Modifier\n            // 알파 전환 적용\n            .alpha(dialogAlpha)\n            // 스케일 전환 적용\n            .scale(dialogScale)\n            // x축 회전 전환 적용\n            .graphicsLayer { rotationX = dialogRotationX },\n        content = {\n            content(dismissWithAnimation)\n        }\n    )\n}\n```\n\n축하합니다🥳! 성공적으로 만들었어요👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있습니다🧑‍💻. 이제 어떻게 활용할 수 있는지 알아봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 광고\n\n외국어를 배우고 새 어휘에서 고민 중이신가요? 그렇다면, 여행을 쉽고 편리하게 만들어줄 이 어휘 학습 앱을 확인해보시는 것을 강력히 추천드립니다!\n\n![이미지](/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_1.png)\n\n# 사용법\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n좋아요, 이제 이 기능을 사용하여 일반적인 샘플을 만들어볼게요.\n\n## 변수 선언하기\n\n먼저, 대화 상태를 저장할 변수를 선언해보세요:\n\n```js\nvar showDialog by remember { mutableStateOf(false) }\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 대화 상자를 트리거하는 버튼\n\n이제 우리는 대화 상자를 열기 위한 버튼이 필요합니다:\n\n```js\nButton(\n    onClick = { showDialog = true }\n) {\n    Text(\"대화 상자 열기\")\n}\n```\n\n## 대화 상자 표시\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마지막으로, showDialog가 true로 설정되면 다이얼로그가 표시됩니다:\n\n```js\nif (showDialog) {\n    AnimatedDialog(\n        onDismiss = { showDialog = false }\n    ) { triggerDismiss ->\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .background(\n                    color = MaterialTheme.colorScheme.surface,\n                    shape = RoundedCornerShape(24.dp)\n                )\n                .padding(16.dp)\n        ) {\n            Text(\n                text = \"👏 박수 알림 대화 상자\",\n                color = MaterialTheme.colorScheme.contentColorFor(MaterialTheme.colorScheme.surface),\n                style = MaterialTheme.typography.titleLarge\n            )\n\n            Spacer(Modifier.height(8.dp))\n\n            Text(\n                text = \"박수 버튼을 눌러 감사를 표현해 주세요.\",\n                color = MaterialTheme.colorScheme.contentColorFor(MaterialTheme.colorScheme.surface),\n                style = MaterialTheme.typography.bodyLarge\n            )\n\n            Spacer(Modifier.height(16.dp))\n\n            Button(\n                onClick = triggerDismiss,\n                modifier = Modifier.align(Alignment.End)\n            ) {\n                Text(\"박수\")\n            }\n        }\n    }\n}\n```\n\n결과를 확인해보세요 😍\n\n![결과 확인](https://miro.medium.com/v2/resize:fit:1200/1*3rjr41FLlYZwKl-SFagv4w.gif)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*A8bBm5VjKaGTe-jMEoLDUg.gif)\n\n맞춤화할 수 있는 여지가 많지만, 이것이 영감의 출발점이 되기를 바랍니다. 완벽한 설정을 찾는 데 행운을 빕니다! ✨\n\n이것도 마음에 드실지도요 👇\n\n이 기사를 읽어 주셔서 감사합니다! ❤️ 즐겁고 가치 있는 시간이었길 바랍니다. 마음에 드셨다면 박수를 치는 👏 버튼을 눌러 감사를 표현하고, 더 많고 흥미로운 기사를 보시려면 Kappdev를 팔로우해 주세요 😊\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n행복한 코딩!\n\n![이미지](/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_2.png)\n","ogImage":{"url":"/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_0.png"},"coverImage":"/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_0.png","tag":["Tech"],"readingTime":9},{"title":"준비해야 할 필수 안드로이드 인터뷰 질문들","description":"","date":"2024-06-19 22:25","slug":"2024-06-19-EssentialAndroidInterviewQuestionstoPrepareFor","content":"\n<img src=\"/assets/img/2024-06-19-EssentialAndroidInterviewQuestionstoPrepareFor_0.png\" />\n\n# 소개\n\nAndroid 개발 인터뷰를 준비하고 있나요? 다양한 개념에 대한 탄탄한 이해력으로 잘 준비하는 것이 중요합니다. 본 문서는 가장 일반적이고 필수적인 안드로이드 인터뷰 질문을 안내해드립니다.\n\n# 기본 Android 인터뷰 질문\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 안드로이드란 무엇인가요?\n\n안드로이드는 구글에서 개발한 모바일 장치용 오픈 소스 운영 체제입니다. 리눅스 커널을 기반으로 하고 주로 터치스크린 모바일 장치를 위해 설계되었습니다.\n\n# 안드로이드 아키텍처의 주요 구성 요소는 무엇인가요?\n\n안드로이드 아키텍처에는 네 가지 주요 구성 요소가 포함되어 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 리눅스 커널: 보안, 메모리 관리 및 드라이버와 같은 핵심 서비스가 포함되어 있습니다.\n- 라이브러리: WebKit, SQLite 및 OpenGL과 같은 미리 설치된 라이브러리가 포함되어 있습니다.\n- Android 런타임: Dalvik 가상 머신 및 핵심 Java 라이브러리가 포함되어 있습니다.\n- 애플리케이션 프레임워크: 응용 프로그램에 더 높은 수준의 서비스를 제공합니다.\n\n# 안드로이드 응용 프로그램 구성 요소 설명\n\n안드로이드 응용 프로그램에는 네 가지 주요 구성 요소가 있습니다:\n\n- 액티비티: 사용자 인터페이스가 있는 단일 화면을 나타냅니다.\n- 서비스: 사용자 인터페이스 없이 실행되는 백그라운드 작업입니다.\n- 브로드캐스트 리시버: 시스템 전체 브로드캐스트 알림에 응답합니다.\n- 컨텐츠 프로바이더: 공유 응용 프로그램 데이터를 관리합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 고급 안드로이드 인터뷰 질문\n\n## 안드로이드에서 Activity란?\n\n액티비티는 애플리케이션 내에서 하나의 화면을 나타냅니다. 사용자 상호작용의 입구로 작용합니다. 액티비티는 함께 연결되어 일관된 사용자 경험을 형성할 수 있습니다.\n\n## 액티비티 생명주기는 어떻게 동작하나요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n활동 라이프사이클은 여러 단계로 구성되어 있습니다:\n\n- onCreate(): 활동 초기화\n- onStart(): 활동이 사용자에게 표시됩니다.\n- onResume(): 활동이 전면에 나타나 상호작용이 가능해집니다.\n- onPause(): 다른 활동이 포커스를 가져갑니다.\n- onStop(): 활동이 더 이상 보이지 않습니다.\n- onDestroy(): 활동이 종료되거나 파괴됩니다.\n\n# Fragment란?\n\nFragment는 활동 내에서 UI의 재사용 가능한 부분을 나타냅니다. Fragment를 통해 모듈식 앱 디자인이 가능해지며, 여러 개의 Fragment를 단일 활동에 결합할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 프래그먼트 간에 어떻게 통신하나요?\n\n프래그먼트는 활동을 통해 서로 통신합니다. 이를 위해 인터페이스를 사용합니다. 활동은 인터페이스를 구현하고, 프래그먼트는 인터페이스 메서드를 호출하여 메시지를 전달합니다.\n\n# 안드로이드에서 Intent란 무엇인가요?\n\nIntent는 다른 앱 구성요소로부터 작업을 요청하는 데 사용되는 메시징 객체입니다. Intent는 활동을 시작하거나 서비스를 시작하고 방송을 전송하는 데 사용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 안드로이드 인터뷰에서 전문가 수준의 질문\n\n### 콘텐츠 제공자(Content Provider)란?\n\n콘텐츠 제공자는 구조화된 데이터 집합에 접근을 관리합니다. 데이터를 캡슐화하고 데이터 보안을 정의하는 메커니즘을 제공합니다. 콘텐츠 제공자는 애플리케이션 간에 데이터를 공유하는 데 사용됩니다.\n\n### 안드로이드에서 데이터 저장을 어떻게 처리하나요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n안녕하세요! 안드로이드는 다양한 데이터 저장 옵션을 지원합니다:\n\n- Shared Preferences: 키-값 쌍으로 원시 데이터를 저장합니다.\n- Internal Storage: 기기 내부 메모리에 있는 개인 저장소입니다.\n- External Storage: 외부 메모리 카드에 있는 공용 저장소입니다.\n- SQLite Databases: 개인 데이터베이스에 구조화된 데이터를 저장합니다.\n- Network: 원격 서버에 데이터를 저장합니다.\n\n# 안드로이드에서 서비스란 무엇인가요?\n\n서비스는 백그라운드에서 장기 실행 작업을 수행하는 구성 요소입니다. 사용자 인터페이스를 제공하지는 않습니다. 서비스는 startService()로 시작하거나 bindService()를 사용하여 활동에 바인딩할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 안드로이드의 서비스 유형을 설명해드릴게요.\n\n주요한 두 가지 서비스 유형이 있습니다:\n\n- 시작된 서비스(Started Service): startService()를 호출하여 시작됩니다. 작업을 완료할 때까지 백그라운드에서 실행됩니다.\n- 바운드 서비스(Bound Service): bindService()를 호출하여 시작됩니다. 컴포넌트가 서비스에 바인딩하여 상호작용하고 통신할 수 있습니다.\n\n# 브로드캐스트 수신기(Broadcast Receiver)가 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n방송 수신기는 시스템 전체적인 방송 공지에 응답합니다. 특정 방송을 듣고 그에 반응하는 수동 구성 요소 역할을 합니다. 예를 들어, 연결 상태 변경을 듣기 위해 방송 수신기를 등록할 수 있습니다.\n\n# 결론\n\nAndroid 개발 인터뷰 준비를 위해서는 다양한 개념에 대한 철저한 이해가 필요합니다. 이 글에서 소개된 기본, 고급, 전문가 수준의 질문에 익숙해지세요. 그렇게 함으로써, 자신감을 갖고 인터뷰에 임하고 자신의 전문 지식을 효과적으로 증명할 수 있을 것입니다. 행운을 빕니다!\n","ogImage":{"url":"/assets/img/2024-06-19-EssentialAndroidInterviewQuestionstoPrepareFor_0.png"},"coverImage":"/assets/img/2024-06-19-EssentialAndroidInterviewQuestionstoPrepareFor_0.png","tag":["Tech"],"readingTime":6},{"title":"숨겨진 보석 레일즈 프로젝트에 에너지를 불어넣어 줄 수 있는 잘 알려지지 않은 루비 젬들","description":"","date":"2024-06-19 22:24","slug":"2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects","content":"\n![Hidden Gems: Lesser-Known Ruby Gems That Can Supercharge Your Rails Projects](/assets/img/2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects_0.png)\n\n루비온레일즈는 강력한 프레임워크이며, 우리는 모두 Devise, RSpec, 그리고 Sidekiq과 같은 인기있는 젬들에 대해 알고 있지만, 몇 가지 잘 알려지지 않은 젬들이 있습니다. 이러한 숨겨진 보석들을 살펴보고 개발 경험을 높일 수 있는 방법을 탐구해 봅시다.\n\n# 1. Dalli\n\nDalli은 Memcached 캐싱 시스템과 시원찮게 통합되는 강력한 루비 젬입니다. 이는 빠르고 빈번하게 접근되는 데이터를 캐싱함으로써 응용 프로그램의 성능을 크게 향상시킬 수 있습니다. 세션 데이터, 조각 캐싱 또는 전체 페이지 캐싱을 다루고 있다면, Dalli가 모두 대처할 것입니다. 이렇게 사용할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# Gemfile\ngem 'dalli'\n\n# config/environments/production.rb\nconfig.cache_store = :dalli_store, 'localhost:11211', { expires_in: 1.day, compress: true }\n```\n\n# 2. Redis-Rails\n\nRedis-Rails는 캐싱 및 백그라운드 작업을 위해 Redis의 강력함을 활용하는 또 다른 젬입니다. 그것은 Rails와 원활하게 통합되어 Redis를 기본 캐시 저장소로 사용하거나 세션 데이터 저장소로 사용할 수 있게 합니다. 아래는 간단한 예시입니다:\n\n```js\n# Gemfile\ngem 'redis-rails'\n\n# config/environments/production.rb\nconfig.cache_store = :redis_store, 'redis://localhost:6379/0/cache', { expires_in: 1.day }\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 3. ActiveSupport::Cache\n\n알려지지 않은 편은 아니지만 ActiveSupport::Cache는 더 많은 주목을 받을 가치가 있습니다. 이는 MemoryStore, FileStore 및 NullStore를 포함한 다양한 캐싱 스토어에 대한 통일된 인터페이스를 제공합니다. 응용 프로그램의 요구에 따라 이러한 스토어 간을 쉽게 전환할 수 있습니다.\n\n## 4. Rack::Cache\n\nRack::Cache는 Rails 애플리케이션과 통합되어 HTTP 캐싱을 제공하는 미들웨어입니다. 브라우저 캐싱을 처리하고 서버 부하를 줄이는 데 특히 유용합니다. config/application.rb에 다음을 추가하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nconfig.middleware.use Rack::Cache,\n  verbose: true,\n  metastore: 'file:/var/cache/rack/meta',\n  entitystore: 'file:/var/cache/rack/body'\n```\n\n## 5. 캐시 머니\n\n캐시 머니는 ActiveRecord 모델의 캐싱을 간편하게 해주는 젬입니다. 모델 인스턴스를 자동으로 캐시하고, 레코드가 업데이트될 때 캐시 만료를 처리합니다. 데이터베이스 쿼리의 속도를 높이고 데이터베이스 서버 부하를 줄이는 데 사용하세요.\n\n## 6. IdentityCache\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIdentityCache는 ActiveRecord 연관을 캐싱하는 간결한 솔루션이에요. 캐시로부터 연관 레코드를 지능적으로 가져와서 데이터베이스 쿼리 횟수를 줄여줘요. 성능을 중시하는 애플리케이션에 꼭 필요한 기능이죠.\n\n## 7. Cashier\n\nCashier는 뷰에서 fragment 캐싱을 지원하는 젬이에요. 가벼우며 사용하기 쉬워요. 뷰 코드를 캐시 블록으로 감싸기만 하면 Cashier가 나머지를 처리해줄 거에요.\n\n## 8. Readthis\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nReadthis는 Redis를 백엔드로 사용하는 고성능 캐싱 젬입니다. 속도와 효율성을 고려하여 디자인되어 있어, 레일즈 애플리케이션에서 빠른 캐싱이 필요한 경우에 우수한 선택지입니다.\n\n## 9. Http::Cache\n\nHttp::Cache는 레일즈 애플리케이션에 대한 HTTP 캐싱 헤더를 제공합니다. 브라우저와 프록시가 자산을 효율적으로 캐시하도록 보장하여 서버로의 불필요한 요청을 줄입니다.\n\n## 10. Rails Cache Digests\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n레일즈 캐시 다이제스트는 프래그먼트 캐싱을 위해 캐시 키를 최적화합니다. 템플릿과 관련된 레코드를 기반으로 자동으로 캐시 키를 생성합니다. 캐시 무효화로 인한 머리 아픔을 피하려면 사용하세요.\n\n이 젬들은 잘 알려지지 않았을 수 있지만, 레일즈 프로젝트를 크게 향상시킬 수 있습니다. 그러니 자세히 살펴보고, 개발 여정을 더욱 강력하게 만들어보세요! 🚀\n\n이 글이 도움이 되었나요? 아래 댓글에 의견을 공유해주세요!\n","ogImage":{"url":"/assets/img/2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects_0.png"},"coverImage":"/assets/img/2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects_0.png","tag":["Tech"],"readingTime":5},{"title":"루비 온 레일을 위한 VS Code 익스텐션","description":"","date":"2024-06-19 22:22","slug":"2024-06-19-VSCodeExtensionsforRubyonRails","content":"\nVS 코드 확장 프로그램은 모두가 코드를 빠르게 작성하고 생산성을 높일 수 있도록 도와줍니다. 그래서 오늘은 내가 개인적으로 사용하고 있는 몇 가지 확장 프로그램을 소개하려고 합니다. 이 확장 프로그램들은 루비 온 레일스 프로그래밍 언어 작업에 도움이 될 것입니다.\n\n![VSCodeExtensionsforRubyonRails](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_0.png)\n\n# 확장 프로그램\n\n자, 이제 루비 온 레일스를 위한 확장 프로그램을 살펴보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 확장 프로그램 목록:\n\n- Ruby\n- endwise\n- rufo (Ruby 형식 지정 도구)\n- ERB Formatter/Beautify\n- Rails DB Schema\n- Rails Routes Navigator\n- Ruby and Rails Snippets\n- Ruby on Rails\n- Ruby Test Explorer\n- ruby-rubocop\n\n## 1. Ruby\n\nVS Code에서 Ruby 언어 지원을 제공하는 기본 확장 프로그램입니다. Peng Lv가 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다운로드 링크: Ruby\n\n![Ruby](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_1.png)\n\n## 2. endwise\n\n루비 블록 끝에 end를 자동으로 추가해주는 endwise입니다. 아래 데모에서 확인할 수 있습니다. Kai Wood가 제공했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다운로드 링크: endwise\n\n![image](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_2.png)\n\n데모:\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*J8qPrYV_2gESLCkIND2Q_w.gif)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 3. rufo (Ruby formatter)\n\n컨트롤러.rb, 모델.rb 등과 같은 루비 파일을 형식화하는 확장 프로그램입니다. Matt Bessy가 제공했습니다.\n\n다운로드 링크 : rufo (Ruby formatter)\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 Markdown 형식으로 작성해주세요.\n\nDemo :\n\n![Demo](https://miro.medium.com/v2/resize:fit:1400/1*c1SG3mtt1y-oC5Zhh7M-sA.gif)\n\n# 4. ERB Formatter/Beautify\n\n이것은 erb 파일을 서식 지정하는 데 가장 좋은 확장 프로그램 중 하나입니다. Kai Wood가 제공했습니다. 이 확장 프로그램은 기본 설정이 필요합니다. 설정에 대해 설명 된 설명을 따라 할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 번역된 내용입니다.\n\n다운로드 링크 : ERB 포매터/뷰티파이\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_4.png)\n\n# 5. Rails DB Schema\n\n사용자가 데이터베이스 스키마에 정의된 데이터를 쉽게 볼 수 있도록 도와줍니다. aki77가 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다운로드 링크: Rails DB Schema\n\n![Rails Image](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_5.png)\n\n데모:\n\n![Demo GIF](https://miro.medium.com/v2/resize:fit:1400/1*zathg9lrHBfddkW8tHhIBg.gif)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 레일즈 라우트 네비게이터\n\n브라우저에서 매번 http://localhost:3000/rails/info/routes를 입력하는 것은 귀찮은 일이죠. 이 확장 프로그램은 그 문제를 해결해줍니다. 이제 사용자는 VS Code에서 직접 레일즈 라우트에 접근할 수 있습니다. 이 확장 프로그램은 makicamel이 제공합니다.\n\n다운로드 링크: [레일즈 라우트 네비게이터](링크 주소)\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_6.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비와 레일스 코드 조각 모음입니다. Chris가 제공했습니다.\n\n다운로드 링크: Ruby 및 Rails 스니펫\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_7.png)\n\n데모:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](https://miro.medium.com/v2/resize:fit:520/1*AABMRsz0rJzqgV5YGfzaVw.gif)\n\n## 8. 루비 온 레일즈\n\n루비 온 레일즈 코드 단편을 위한 또 다른 확장 기능입니다. 이는 Hridoy가 제공합니다. 컨트롤러에서 CRUD에 대한 메소드를 작성하려면 CRUD를 입력하면 모든 인스턴스 변수와 함께 모든 메소드가 생성됩니다. 더 많은 사용법 관련 정보는 VS Code의 세부 정보 또는 마켓플레이스의 개요를 확인하세요.\n\n다운로드 링크: Ruby on Rails\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_8.png\" />\n\n# 9. Ruby Test Explorer\n\nvs code의 사이드바에서 손쉽게 테스트 케이스를 실행할 수 있어요. 매번 터미널을 확인할 필요가 없답니다. Connor Shea가 제공해요.\n\n다운로드 링크: Ruby Test Explorer\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n수정된 내용은 아래와 같습니다.\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_9.png)\n\n데모:\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_10.png)\n\n# 10. ruby-rubocop\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRubocop은 기본적으로 코드 분석 및 형식 지정 도구입니다. Ruby 코드를 올바른 방식으로 작성하는 방법에 대한 제안을 제공합니다. Rubocop은 몇 가지 코드 구문을 수정할 수 있는 능력도 갖추고 있습니다. 이는 misogi에 의해 제공됩니다.\n\n다운로드 링크: [ruby-rubocop](ruby-rubocop)\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_11.png)\n","ogImage":{"url":"/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_0.png"},"coverImage":"/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_0.png","tag":["Tech"],"readingTime":8},{"title":"테스트 더블이란 무엇이며 RSpec 3에서 어떻게 사용하는 지","description":"","date":"2024-06-19 22:21","slug":"2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3","content":"\n![Test Doubles](/assets/img/2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3_0.png)\n\n# 소프트웨어 개발에서의 테스트 더블 이해\n\n소프트웨어에 대한 테스트를 작성할 때, 종종 실제 객체나 의존성의 동작을 시뮬레이션하기 위해 \"테스트 더블\" 또는 \"모의 객체\"를 만들어야 합니다. 각각 특정 목적을 위해 사용되는 다양한 종류의 테스트 더블이 있습니다.\n\n# 테스트 더블의 종류\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트 더블은 사용 모드와 원본에 따라 분류할 수 있어요.\n\n## 사용 모드\n\nStub: Stub은 사이드 이펙트를 발생시키지 않고 값을 반환하는 쿼리 메소드를 시뮬레이트하는 데 사용돼요. 미리 정의된 캐너드 응답을 반환합니다.\n\n```js\n# LMS 코스 모델을 위한 Stub\nstub_course = double('Course', name: 'Ruby 입문', description: '루비 기초 학습')\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모의 객체: 모의 객체는 값을 반환하는 것보다 부작용을 수행하는 명령 메서드를 테스트할 때 유용합니다. 특정 메시지가 수신되었는지 확인하고, 예상한 메시지가 수신되지 않으면 오류를 발생시킵니다.\n\n```js\n# LMS 등록 서비스용 모의 객체\nmock_enrollment_service = double('EnrollmentService')\nexpect(mock_enrollment_service).to receive(:enroll).with(user, course)\n```\n\n널 객체: 널 객체는 어떤 메시지에 대해 자신을 반환하는 친화적인 테스트 대역입니다. 여러 협력자가 있는 객체를 테스트할 때 유용합니다.\n\n```js\n# LMS 사용자용 널 객체\nnull_user = double('User').as_null_object\nnull_user.enroll_in_course(course)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n스파이: 스파이들은 받은 메시지를 기록하여 특정 메시지가 올바른 매개변수로 호출되었음을 확인할 수 있게 해줍니다.\n\n```js\n# LMS 알림 서비스용 스파이\nspy_notification_service = spy('NotificationService')\nspy_notification_service.send_notification(user, '환영합니다!')\nexpect(spy_notification_service).to have_received(:send_notification).with(user, '환영합니다!')\n```\n\n## 원점\n\n테스트 더블의 사용 모드를 이해하는 것 외에도, 그 원점과 유형을 알아야 합니다. 테스트 더블은 순수한(pure), 부분적인(partial), 또는 확인(verify)할 수 있는 것으로, 각각 다른 목적을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n순수 더블: 순수 더블은 RSpec과 같은 테스트 프레임워크에 의해 목적에 맞게 생성되며 해당 행동이 완전히 추가된 것으로 구성됩니다. 의존성을 전달할 수 있는 코드를 테스트하기 위해 유연하고 사용하기 쉽습니다.\n\n```js\n# LMS 강좌를 위한 순수 더블\npure_course = double('Course')\nallow(pure_course).to receive(:name).and_return('루비 입문')\n```\n\n부분 더블: 때로는 테스트 중인 코드가 간단한 의존성 주입을 허용하지 않을 수 있습니다. 이러한 경우 기존 Ruby 객체에 모의(Mocking) 및 스텁(Stubbing) 행동을 추가하는 부분 더블을 사용할 수 있습니다.\n\n```js\n# 내장된 Ruby Time 클래스의 부분 더블\nallow(Time).to receive(:now).and_return(Time.new(2023, 6, 1))\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더블 검증: 더블 검증은 테스트 더블과 실제 의존성이 동기화되지 않을 때 문제를 찾는 데 도움이 됩니다. 더블의 인터페이스를 실제 클래스나 객체에 기반하여 제한하여 메서드 변경을 감지합니다.\n\n```js\n# LMS 사용자 클래스의 더블 검증\nuser = instance_double('User')\nallow(user).to receive(:enroll_in_course)\n```\n\n오버로드된 상수: 테스트 더블은 루비 상수를 바꾸거나 제거하여 테스트 기간 동안 환경을 제어할 수 있습니다.\n\n```js\n# 기본 등록 기간을 위한 상수 스텁\nstub_const('LMS::DEFAULT_ENROLLMENT_PERIOD', 7)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트 더블은 사용 모드와 원본을 모두 결합할 수 있어요. 예를 들어, 순수한 더블이 스텁으로 작동하거나 검증 더블이 스파이로 작동하는 경우가 있을 수 있어요.\n","ogImage":{"url":"/assets/img/2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3_0.png"},"coverImage":"/assets/img/2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3_0.png","tag":["Tech"],"readingTime":4},{"title":"루비 온 레일즈에서 라우트를 구성하는 팁","description":"","date":"2024-06-19 22:19","slug":"2024-06-19-TipsfororganizingyourroutesinRubyonRails","content":"\n![Route Organization Tips](/assets/img/2024-06-19-TipsfororganizingyourroutesinRubyonRails_0.png)\n\nroutes.rb 파일은 Ruby on Rails 개발 프로젝트의 중요한 부분입니다. 이 파일은 사실상 우리 애플리케이션의 지도 역할을 합니다. 따라서 이를 잘 구성하는 것이 중요합니다. 보통 모듈로 라우트를 구성하거나 알파벳 순으로 정리하여 시작하지만, 시간이 지남에 따라 이 파일은 종종 길들이기 어려운 정글로 변할 수 있습니다.\n\n이는 집 안의 창고와 비슷합니다. 정리되지 않은 물건들을 보관하는 곳으로, 처음에는 무엇이 어디에 있는지 알 수 있지만 언젠가는 들어가서 무언가를 찾으려 하면, 과거에 사용한 스케이트보드와 할머니가 남긴 썩은 나무 상자 위에 오래된 사진과 첫 번째 애왔던 Tony의 목줄이 있는 전쟁터 같아집니다.\n\n나는 그런 혼돈을 좋아하지 않기 때문에, 이 글에서는 routes.rb라는 그 창고를 잘 정리하는 데 매우 유용했던 몇 가지 실천 방법을 공유하겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트에 미친 영향에 따른 팁 목록이에요. 각 팁은 독립적으로 적용할 수 있어, 모두 읽을 필요 없이 가장 관심 있는 부분으로 바로 이동해도 돼요.\n\n- 알파벳 순으로 정리된 라우트\n- Resource 및 resources\n- only, not except\n- 네임스페이스\n- 제약 조건\n- 관련 사항\n\n# 1. 알파벳 순으로 정리된 라우트\n\n이 팁은 우연이 아니라 제일 앞에 있어요; 저는 이것을 가장 중요하게 생각해요. 알파벳 순으로 라우트를 정리하는 것만으로가 아니라 팀 간 합의를 수립하는 중요성 때문에 최상의 결과를 가져다 주었어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n개인적으로 나는 루비 온 레일즈의 가장 중요한 전제 중 하나는 Convention over Configuration이라고 생각해. 프레임워크가 제안한 규칙을 따르면 대개 좋은 결과를 얻을 수 있어. 이는 개발팀의 누구나 코드 조각을 찾거나 새로운 지시사항을 추가할 위치를 잘 알 수 있기 때문에 중요한데, 이것은 시간을 절약할 뿐만 아니라 결정을 내릴 부담을 덜어줘. 결국 스티브 잡스가 매일 같은 옷을 입은 이유가 있었을 테니까.\n\n우리 라우트에도 동일한 원칙을 적용해야 해: 유지보수를 가능한 간단하고 깔끔하게 유지하기 위해 팀의 규칙을 확립해야 돼.\n\n다양한 프로젝트에서 우리는 여러가지 규칙을 준수해왔어: 모듈별로 구성, 다른 파일로 분리, 알파벳 순으로 정렬 등. 의심의 여지없이 가장 간단하고 실용적인 접근 방식은 라우트 파일을 알파벳 순으로 정렬하는 것이었어. 라우트가 많다면 파일을 분리하는 것도 도움이 될 수 있지만, 절대적으로 필요하지 않은 한 그것은 피하는 편이 좋을 거야.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어떤 프로젝트의 비즈니스 레이어가 서로 통신하고 상호작용하는 객체로 표현되는 것과 같이, 저는 라우트를 리소스의 동작으로 보는 것을 좋아해요. 이러한 이유로, 저희 프로젝트에서 정의하는 거의 모든 라우트들은 일반적으로 특정 리소스와 연관되어 있습니다.\n\n레일즈는 이를 처리하기 위해 다양한 메커니즘을 제공하지만, 기본적으로는 resources와 resource를 사용하는 것이 일반적입니다. 또한, 필요한 경우 리소스 라우트를 중첩시킬 수 있어서 아래와 같은 결과를 얻을 수 있습니다:\n\n```js\nresources :articles do\n  resources :comments\nend\n```\n\n⚠️ 중첩은 매우 유용할 수 있지만, 복잡성을 도입할 수 있으므로 조심해야 합니다. 한 단계 이상 중첩을 사용하지 않는 것을 권장합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 얕은 중첩\n\n중첩의 한 가지 문제는 중첩된 리소스의 멤버 라우트가 부모 안에 포함된다는 것입니다.\n\n이전 예제에서, 댓글에 대한 라우트는 다음과 같이 article 내에 중첩될 것입니다:\n\n```js\nGET /articles/:article_id/comments\nGET /articles/:article_id/comments/new\nPOST /articles/:article_id/comments\n\nGET /articles/:article_id/comments/:id <===== ⚠️\nGET /articles/:article_id/comments/:id/edit <===== ⚠️\nDELETE /articles/:article_id/comments/:id <===== ⚠️\nPUT/PATCH /articles/:article_id/comments/:id <===== ⚠️\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n첫 세 개의 루트는 괜찮아 보이지만 특정 댓글을 포함하는 루트는 기사 안에서 어색해 보입니다.\n\n이 문제를 해결하기 위해 우리는 다음과 같이 루트를 정의할 수 있습니다:\n\n```js\nresources :articles do\n  resources :comments, only: [:index, :new, :create]\nend\nresources :comments, only: [:show, :edit, :update, :destroy]\n```\n\n이렇게 정의하면 다음과 같은 루트가 생성되는데, 내 의견으로는 훨씬 더 의미가 있다고 생각합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nGET /articles/:article_id/comments\nGET /articles/:article_id/comments/new\nPOST /articles/:article_id/comments\n\nGET /comments/:id <===== ✅\nGET /comments/:id/edit <===== ✅\nDELETE /comments/:id <===== ✅\nPUT/PATCH /comments/:id <===== ✅\n```\n\n이 같은 결과를 얻으려면 shallow 매개변수를 사용할 수 있습니다:\n\n```js\nresources :articles do\n resources :comments, shallow: true\nend\n```\n\n## 리소스와 관련이 없는 라우트는 어떻게 처리해야 합니까?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이건 좀 이상한 냄새가 난다고 봐요. 이런 경로 뒤에는 숨겨진 자원이 있을 가능성이 높습니다.\n\n하지만 여전히 routes.rb에는 독립적인 경로가 있습니다. 예를 들어 로그인, 로그아웃 그리고 아마도 헬스체크 등이 떠오를 거예요.\n\n```js\npost 'login' => 'sessions#login', as: :login\ndelete 'logout' => 'sessions#logout', as: :logout\nget 'up' => 'rails/health#show', as: :rails_health_check\n```\n\n# 3. Only, not except\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저는 개발자로서 \"암시하는 것보다 명확히 표현하는 것이 항상 낫다\"는 규칙을 따릅니다. 몇 마디나 한 줄의 코드, 심지어 주석을 절약하려는 우리의 시도에서는 종종 응용 프로그램에서 문제를 발생시키거나 미래 개발자가 우리의 작업을 상속할 때 어렵게 만들 수 있습니다. (네, 제가 주석을 선호합니다.)\n\n저는 라우트에도 같은 규칙을 적용하며 only를 except 대신 선호합니다. except를 사용하는 것이 편리할 수 있지만, 사용하지 않을 라우트를 생성할 가능성이 있습니다.\n\n그래서 라우트에서 리소스를 생성할 때 처음으로 하는 일은 only 매개변수를 추가하는 것입니다.\n\n```js\nresources :products, only: %i[index new create show]\nresources :users, only: %i[index new create destroy]\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4. 네임스페이스\n\n네임스페이스를 통해 라우트를 컨트롤러 그룹으로 구분하여 로직을 모듈화하는 데 도움이 됩니다.\n\n다음과 같은 상황에서 특히 유용합니다:\n\n1. 명확히 분리된 하위 시스템이 있는 경우. 예를 들어 백오피스와 프론트엔드.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 어플리케이션이 발전하면서 복잡도가 증가하고, 컨트롤러를 그룹/모듈로 분리하고 싶을 때 아래와 같이 코드를 작성할 수 있습니다.\n\n```js\nnamespace :admin do\n  resources :payments\n  resources :users\nend\n\nnamespace :ads do\n  resource :report, only: %i[show]\nend\n\nnamespace :finance do\n  resource :report, only: %i[show]\n```\n\n이렇게 하면 다음과 같은 컨트롤러가 생기게 됩니다:\n\n```js\nAdmin::PaymentsController # app/controllers/admin/payments_controller.rb\nAdmin::UsersController # app/controllers/admin/users_controller.rb\nAds::ReportController # app/controllers/ads/report_controller.rb\nFinance::ReportController # app/controllers/finance/report_controller.rb\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 5. 제약 조건\n\n제약 조건은 경로에 할당할 수 있는 제한 사항입니다. 제약 조건을 정의할 때는 요청 객체에서 지정된 메서드가 호출되고 반환된 값이 매개변수 값과 비교됩니다.\n\n대표적인 예로 하위 도메인 제약 조건이 있습니다. 예를 들어 어드민을 위한 경로를 위한 제약 조건을 정의할 수 있습니다.\n\n```js\nnamespace :admin do\n  constraints subdomain: 'admin' do\n    resources :users\n  end\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 고려 사항\n\n또 다른 유용한 도구는 concerns 입니다. 이를 사용하면 일반적인 경로를 정의하고 이후 서로 다른 리소스에 사용할 수 있습니다.\n\n예를 들어 최근 프로젝트에서 사용한 하나의 concern을 공유하겠습니다. 애플리케이션에는 다양한 리소스가 있었고, 이러한 리소스는 목록 내에서 순서를 변경할 수 있었 즉, 위치를 변경할 수 있었습니다. 이 위치를 변경하는 라우트는 코드베이스 전체에서 반복되어 사용되었기 때문에 이를 concern으로 추출했습니다:\n\n```js\nconcern :positionable do\n  patch :update_position, on: :member\nend\n\nresources :categories, only: %i[index new create], concerns: %i[positionable]\nresources :category_groups, concerns: %i[positionable]\nresources :sections, only: %i[index new create destroy], concerns: %i[positionable]\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n⚠️ 주의점은 코드에서 간접성을 소개합니다. 공통 경로를 추출할 가치가 있는지 여쭤보는 것이 중요합니다. 때로는 간접성을 소개하는 것보다 코드를 반복하는 것이 나을 수 있습니다.\n\n저희가 루트 파일을 작성하는 데 따르는 몇 가지 관례입니다. 팀원과 동일한 규칙을 따를 필요는 없습니다. 이는 우리에게 효과가 있었던 사례입니다.\n\n가장 중요한 것은 팀과 공통 규칙에 동의하여 루트 파일이 가장 깔끔하고 유지 관리가 가능하도록 하는 것입니다.\n\nUnagi는 Ruby on Rails에서 12년 이상 선택한 스택을 사용하는 소프트웨어 부티크입니다. 자세한 내용은 소셜 미디어를 확인해보세요.\n","ogImage":{"url":"/assets/img/2024-06-19-TipsfororganizingyourroutesinRubyonRails_0.png"},"coverImage":"/assets/img/2024-06-19-TipsfororganizingyourroutesinRubyonRails_0.png","tag":["Tech"],"readingTime":10}],"page":"35","totalPageCount":119,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":1},"__N_SSG":true}