{"pageProps":{"posts":[{"title":"이 RSpec 팁들로 테스트 종속성을 작별하세요","description":"","date":"2024-06-19 22:18","slug":"2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips","content":"\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png)\n\n개발자가 직면하는 일반적인 문제 중 하나는 테스트 의존성을 관리하는 것입니다.\n\n여기서 테스트 더블이 구원을 줍니다. 테스트 더블은 실제 객체 대신 사용되며 해당 객체의 동작을 제어할 수 있습니다.\n\n# RSpec 3에서 응답 구성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 테스트 더블 생성하기\n\n테스트 더블은 실제 객체 대신에 테스트에서 사용되며, 그들의 동작을 제어할 수 있게 해줍니다. 목, 스텁, 스파이를 포함해 여러 종류의 테스트 더블이 있습니다. 여기서는 그들의 응답을 구성하는 데 중점을 둘 것입니다.\n\n# 메서드가 값 반환하도록 허용하기\n\n특정 값을 반환하도록 메서드를 구성하는 데 allow를 사용할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_1.png\" />\n\n# 예외 발생시키기\n\n예외 처리를 테스트하려면 메소드를 구성하여 오류를 발생시킬 수 있습니다:\n\n<img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_2.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 블록에 양보하기\n\n가끔은 더블을 블록에 값을 양보해야 할 때가 있습니다. 반복자나 콜백을 다룰 때 유용합니다:\n\n![이미지](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_3.png)\n\n# 여러 값을 반환하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n연이어 호출할 때 다른 값을 반환하는 방법이 필요하다면 and_return에 여러 인수를 전달할 수 있습니다:\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_4.png)\n\n## 부분 더블 구성\n\n부분 더블은 실제 객체의 메서드를 모의(Mock)하거나 스텁(Stub)하는 동시에 객체의 나머지 동작을 유지하는 것을 가능하게 합니다. 객체의 특정 부분 동작을 테스트하고 싶을 때 전체 객체를 대체하지 않고 유용합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 원본 메서드 호출하기\n\n일부 호출에 대해 부분 더블에게 원본 메서드를 호출하도록 지시할 수 있습니다:\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_5.png)\n\n# 원본 메서드 감싸기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n메소드의 동작을 수정하면서 원본 구현을 호출할 수도 있어요:\n\n![Image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_6.png)\n\n## 고급 사용자 정의\n\n## 간헐적 동작\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n보다 복잡한 동작을 시뮬레이션하기 위해 네트워크 장애와 같은 부분적인 특성을 정의하기 위해 블록을 사용하세요:\n\n![이미지](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_7.png)\n\n# 팁과 꿀팁\n\n- 구체적으로 설정하세요: 테스트 더블을 구성할 때 제한 사항을 가능한 한 명확하게 지정하여 테스트가 의미 있는지 확인하세요.\n- 부분적인 더블을 현명하게 사용하세요: 부분적인 더블은 강력하지만 테스트 사이의 강하게 결합된 테스트로 이어질 수 있습니다. 전체 객체를 교체하지 않고 특정 상호 작용을 테스트하기 위해 사용하세요.\n- 유지보수 가능한 테스트 유지하세요: 명확하고 간결한 테스트를 작성하여 테스트 스윗을 유지하세요. 지나치게 복잡한 테스트 로직을 피하세요.\n","ogImage":{"url":"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png"},"coverImage":"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png","tag":["Tech"],"readingTime":4},{"title":"Rails에서 낙관적 락킹은 무엇인가요","description":"","date":"2024-06-19 22:17","slug":"2024-06-19-Whatisoptimisticlockinginrails","content":"\n낙관적 락킹은 데이터베이스 시스템에서 동시에 여러 사용자가 데이터에 동시 액세스를 관리하는 동시성 제어 메커니즘입니다. 충돌이 드물고 트랜잭션이 일반적으로 서로 간섭하지 않을 것으로 가정합니다. 비관적 락킹과 달리 최적적 락킹은 데이터를 처음 액세스할 때 잠그는 대신, 트랜잭션이 커밋하려고 할 때만 충돌을 확인합니다.\n\n다음은 작동 방식입니다:\n\n- 트랜잭션 시작: 트랜잭션이 레코드를 읽을 때 해당 레코드와 연관된 버전 번호 또는 타임스탬프도 검색합니다.\n- 트랜잭션 처리: 트랜잭션은 데이터를 로컬로 변경합니다.\n- 커밋: 커밋하기 전에 트랜잭션은 데이터베이스에서 레코드의 버전 번호 또는 타임스탬프를 확인합니다:\n\n  - 트랜잭션이 시작되었을 때 버전 번호나 타임스탬프가 변경되지 않았다면, 트랜잭션은 변경 사항을 커밋합니다.\n  - 버전 번호나 타임스탬프가 변경되었다면 (다른 트랜잭션이 레코드를 수정했다는 것을 나타냄), 해당 트랜잭션은 중지되고 다시 시도해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 낙관적 락킹 예시\n\n간단한 예시로 온라인 상점의 제품을 위한 데이터베이스 테이블을 고려해 봅시다:\n\n## 제품 테이블:\n\n![Products Table](/assets/img/2024-06-19-Whatisoptimisticlockinginrails_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 시나리오\n\n- 사용자 A는 버전 번호가 1인 \"위젯\"(ProductID=1)의 제품 세부 정보를 읽습니다.\n- 사용자 B는 동일한 제품 \"위젯\"의 버전 번호가 1인 제품 세부 정보를 읽습니다.\n- 사용자 A가 \"위젯\"의 가격을 $12.00으로 업데이트하고 트랜잭션을 커밋하려고 합니다:\n\n- 시스템은 데이터베이스 내 \"위젯\"의 현재 버전 번호를 확인합니다(아직 1).\n- 버전 번호가 일치하므로 업데이트가 진행되고, 가격이 $12.00으로 설정되고, 버전 번호가 2로 증가합니다.\n\n4. 이제 사용자 B가 \"위젯\"의 가격을 $11.00으로 업데이트하려고 합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 시스템은 데이터베이스에서 \"위젯\"의 현재 버전 번호를 확인합니다 (현재 2).\n- 버전 번호가 변경되었으므로 다른 트랜잭션이 레코드를 수정했다는 것을 나타내어, 사용자 B의 트랜잭션이 실패합니다.\n- 사용자 B는 업데이트된 레코드(버전 2)를 읽어 트랜잭션을 다시 시도해야 합니다.\n\n# 장단점\n\n장점:\n\n- Non-blocking: 낙관적 잠금은 잠금을 유지하는 오버헤드를 피함으로써 여러 사용자가 대기없이 동일한 데이터로 작업할 수 있습니다.\n- 확장성: 충돌 비율이 낮은 환경에서 더 확장 가능하며, 이는 리소스에 대한 경합을 줄여줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n단점:\n\n- 다시 시도 필요: 충돌이 커밋 시간에 감지되면 트랜잭션이 다시 시도될 수 있습니다.\n- 고 갈등 환경에 적합하지 않음: 고 갈등 환경에서는 충돌 가능성이 증가하여 더 자주 다시 시도하게 되고 성능이 감소할 수 있습니다.\n\n다음은 루비 온 레일즈에서 낙관적 잠금을 구현하는 예시입니다.\n\n우리가 제품 테이블을 가지고 있다고 가정해봅시다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```ruby\nclass CreateProducts < ActiveRecord::Migration[6.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n      t.decimal :price, precision: 8, scale: 2\n      t.integer :lock_version, default: 0, null: false\n\n      t.timestamps\n    end\n  end\nend\n```\n\n## 모델 정의\n\n다음으로 Product 모델을 정의하세요. lock_version 열은 Rails에서 낙관적 락킹에 자동으로 사용됩니다.\n\n```ruby\nclass Product < ApplicationRecord\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 예시 사용법\n\n담아 두고 있는 상황에서는 어떻게 낙관적 락을 사용할 수 있을까요:\n\n## 사용자 A와 사용자 B가 동일한 레코드를 읽고 있는 경우\n\n```js\n# 사용자 A\nuser_a_product = Product.find(1) # id가 1인 제품을 읽음\n# user_a_product.lock_version은 0입니다\n\n# 사용자 B\nuser_b_product = Product.find(1) # 동일한 제품을 읽음\n# user_b_product.lock_version도 0입니다\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 사용자 A가 레코드를 업데이트합니다\n\n```js\n# 사용자 A가 가격을 업데이트합니다\nuser_a_product.price = 12.00\nuser_a_product.save\n# 이로써 lock_version이 1로 증가합니다\n```\n\n## 사용자 B가 레코드를 업데이트하려고 합니다\n\n```js\n# 사용자 B가 가격을 업데이트하려고 합니다\nuser_b_product.price = 11.00\nbegin\n  user_b_product.save\nrescue ActiveRecord::StaleObjectError\n  puts \"이전 정보가 감지되었습니다.\"\n  # 충돌을 처리하기 위해 레코드를 다시 불러와서 재시도할 수 있습니다\n  user_b_product.reload\n  # 이제 user_b_product.lock_version은 1입니다\n  # 사용자 B가 업데이트를 다시 시도할지 결정할 수 있습니다\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 충돌 처리\n\nActiveRecord::StaleObjectError가 발생하면, 해당 레코드가 읽힌 후 다른 트랜잭션에 의해 수정되었음을 나타냅니다. 이를 처리하기 위해 레코드를 다시 불러오고 사용자에게 알릴 수도 있으며, 트랜잭션을 다시 시도하거나 애플리케이션 로직에 따라 변경 사항을 병합할 수 있습니다.\n\n## 완전한 예제\n\n```js\nclass ProductsController < ApplicationController\n  def update\n    @product = Product.find(params[:id])\n    @product.assign_attributes(product_params)\n\n    begin\n      @product.save\n      flash[:notice] = \"제품이 성공적으로 업데이트되었습니다.\"\n    rescue ActiveRecord::StaleObjectError\n      flash[:alert] = \"제품이 다른 사용자에 의해 업데이트되었습니다. 변경 사항을 검토하고 다시 시도해주세요.\"\n      @product.reload\n      # 선택적으로 사용자의 변경 사항을 다시 적용하고 통합된 양식을 사용자에게 제시할 수 있음\n    end\n\n    redirect_to @product\n  end\n\n  private\n\n  def product_params\n    params.require(:product).permit(:name, :price)\n  end\nend\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 결론\n\n이 예는 Ruby on Rails 애플리케이션에서 낙관적 잠금을 사용하는 방법을 보여줍니다. lock_version 열을 포함하고 Active Record의 내장 메커니즘을 사용하여 Rails는 버전 확인을 자동으로 처리하고 충돌이 감지되면 예외를 발생시킵니다. 이를 통해 애플리케이션이 적절하게 처리할 수 있도록 합니다.\n","ogImage":{"url":"/assets/img/2024-06-19-Whatisoptimisticlockinginrails_0.png"},"coverImage":"/assets/img/2024-06-19-Whatisoptimisticlockinginrails_0.png","tag":["Tech"],"readingTime":7},{"title":"2023년에 Rust 프로그래밍 언어의 10가지 최고 사용 사례","description":"","date":"2024-06-19 22:15","slug":"2024-06-19-10BestUseCasesofRustProgrammingLanguagein2023","content":"\n2021년에는 러스트가 Ruby와 JavaScript에 익숙했던 나에게 새로운 프로그래밍 언어를 배우려는 호기심을 자극했습니다. 그 당시에 받았던 관심이 나를 호기심 가득하게 만든 것 같아요. 그래도요.\n\n러스트는 안전성, 속도, 그리고 동시성에 중점을 둔 시스템 프로그래밍 언어입니다. 그럼 이게 무슨 뜻일까요?\n\n요약하자면 러스트는 제약이 있는 하드웨어와 밀접하게 상호작용하는 저수준 소프트웨어를 개발하는 데 가장 적합하다는 뜻입니다.\n\n제가 소프트웨어 프로그래밍 인생의 대부분을 루비 개발자로 지내왔기 때문에, 이 모든 것을 이해하기 위해 러스트 관련 서적을 많이 읽고 러스트로 코딩을 많이 해봤답니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비에서 러스트로 전환을 고민하고 있는 경우, 루스트와 루비 프로그래밍 언어 간 간단한 비교를 제공해 드립니다:-\n\n```js\n| 기능              | 러스트                            | 루비                                   |\n|------------------|---------------------------------|----------------------------------------|\n| 언어의 종류      | 시스템 프로그래밍 언어            | 고수준 스크립팅 언어                   |\n| 초점              | 안정성, 속도, 동시성              | 생산성 및 사용 편의성                   |\n| 성능              | 빠르고 효율적                    | 컴파일된 언어에 비해 느림                |\n| 메모리 관리      | 엄격하게, 컴파일러에 의해 강제     | 자동적으로, 가비지 컬렉터에 의해 처리    |\n| 동시성            | 동시 작업에 적합                 | 제한된 동시성 기능                     |\n| 오류 처리        | 오류 방지에 초점                 | 오류 허용, 종종 오류 발생               |\n| 구문              | 저수준, 구문이 더 엄격            | 고수준, 구문이 더 유연                 |\n| 사용 사례        | 저수준 시스템 프로그래밍           | 웹 개발, 스크립팅, 프로토타이핑      |\n```\n\n루비, PHP, 파이썬, 자바, 자바스크립트 등의 개발자 중 대부분은 러스트를 다른 웹 개발 프로그래밍 언어로 간주하지만, 저는 특히 임베디드 장치, IoT, 로봇, 산업 자동화 장치, 자동차 장치에서 실행되는 소프트웨어 개발에 적합하다고 생각합니다.\n\n2023년 러스트 언어의 주요 사용 사례를 탐색해 봅시다:-\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 러스트 언어를 사용하는 10가지 최고의 사용 사례\n\n## IoT\n\n사물 인터넷(IoT)은 급속히 성장하는 분야이며, 러스트는 이 분야에서 중요한 사용 사례를 발견했습니다.\n\nIoT 장치는 일반적으로 제한된 자원을 가지고 있으며, 러스트의 메모리 안전성과 저수준 제어는 임베디드 시스템을 개발하는데 뛰어난 선택지로 만듭니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n라스트의 동시성 처리 능력은 여러 연결을 다루는 애플리케이션에 적합합니다.\n\n## 임베디드 시스템\n\n라스트의 메모리 안전성과 제어에 대한 초점은 임베디드 시스템을 개발하는 데 탁월한 선택으로 만들어냈습니다.\n\n임베디드 시스템은 의료 기기, 항공우주 및 자동차 시스템을 포함한 다양한 응용분야에서 사용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRust의 기능 덕분에 저수준 하드웨어 드라이버와 운영 체제를 개발하기에 적합해요.\n\n## 로봇공학\n\n로봇공학은 Rust가 많이 활용되는 또 다른 분야에요.\n\n로봇공학은 실시간 처리를 필요로 하며, Rust의 저수준 제어와 메모리 안전성은 실시간 애플리케이션을 개발하기에 이상적해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n러스트의 동시성 기능은 여러 스레드를 효율적으로 처리할 수 있게 해줘 로봇 응용 프로그램에서 중요합니다.\n\n## 산업 자동화\n\n산업 자동화는 또 다른 분야로, Rust가 많은 사용 사례를 찾았습니다.\n\n산업 자동화는 복잡한 시스템을 제어하는 것을 포함하며, Rust의 안전성과 저수준 제어에 대한 초점은 제어 시스템을 개발하기에 이상적입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n러스트는 동시성을 처리할 수 있는 능력으로 여러 장치를 동시에 다루기에 적합합니다.\n\n## 자동차\n\n자동차들은 점점 더 연결되고 있으며, 러스트의 메모리 안전성과 동시성 기능은 자동차용 소프트웨어를 개발하는 데 우수한 선택지가 됩니다.\n\n러스트는 자동차의 다양한 구성 요소에 대한 소프트웨어를 개발하는 데 사용될 수 있습니다. 예를 들어 엔진 제어 장치, 인포테인먼트 시스템, 그리고 고급 운전 보조 시스템(ADAS) 등이 포함됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Devices\n\nRust의 메모리 안전 및 제어에 대한 초점은 다양한 장치용 소프트웨어 개발에 우수한 선택지입니다.\n\nRust의 동시성 처리 능력 또한 실시간 처리가 필요한 장치용 소프트웨어 개발에 적합합니다.\n\nRust는 카메라, 스마트 홈 장치 및 웨어러블을 포함한 다양한 장치용 소프트웨어 개발에 사용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## AR/VR\n\n증강 현실 (AR) 및 가상 현실 (VR)은 점점 인기를 끌고 있으며, Rust는 이 분야에서 많은 사용 사례를 발견했습니다.\n\nRust의 저수준 제어 및 메모리 안전성은 낮은 지연 시간과 높은 성능이 필요한 실시간 애플리케이션을 개발하기에 적합합니다.\n\nRust의 동시성 기능을 사용하면 여러 스레드를 효율적으로 처리할 수 있으므로 AR/VR 애플리케이션을 개발하는 데 필수적입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 기계 학습\n\n기계 학습은 또 다른 분야로, Rust가 많은 사용 사례를 발견한 곳입니다.\n\nRust의 성능 및 메모리 안전성은 기계 학습 알고리즘을 개발하는 우수한 선택으로 만들어 줍니다.\n\nRust의 동시성 기능은 여러 스레드를 효율적으로 처리할 수 있도록 만들어 주어, 고성능의 기계 학습 응용 프로그램을 개발하는 데 필수적입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRust의 메모리 안전성으로 작성된 기계 학습 코드를 보다 안전하게 작성할 수 있습니다.\n\n## 게임\n\nRust는 게임 산업에서 다양한 사용 사례를 찾을 수 있습니다.\n\nRust의 성능과 메모리 안전성은 낮은 지연 시간과 높은 성능이 필요한 게임을 개발하는 데 우수한 선택지로 만듭니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRust의 동시성 기능은 여러 스레드를 효율적으로 처리할 수 있게 해주어 복잡한 게임 엔진을 개발하는 데 중요합니다.\n\n## 네트워크 프로그래밍\n\nRust의 저수준 제어 및 메모리 안전성은 네트워크 응용 프로그램을 개발하는 데 탁월한 선택지로 만듭니다.\n\nRust의 동시성 기능 덕분에 여러 네트워크 연결을 효율적으로 처리할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n러스트의 메모리 안전성 덕분에 안전한 네트워크 코드를 작성하기가 더 쉬워졌어요.\n\n## 러스트로 CLI 앱을 쉽게 작성할 수 있을까요?\n\n음, 제가 시도해본 결과 15줄짜리 간단한 CLI 앱을 Rust로 변환해보려고 했어요. 이 CLI 앱은 최신 NodeJS를 다운로드하고 이 버전을 현재 Node 버전으로 설정하는 작업입니다.\n\n그러나 결과적으로 작성한 코드는 30줄 이상이 되었고, 새로운 Rust 개발자에게는 이해하기 어렵더라구요. 반면, bash로 작성된 코드는 읽기 쉽고 무엇을 하는지 이해하기 쉬워요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n해당 bash 코드는 https://medium.com/@dansalias/node-versions-without-nvm-cb9cdc0566b6에서 Daniel Young이 작성한 코드입니다.\n\n아래는 제 Rust 코드입니다:-\n\n```js\nuse std::env;\nuse std::fs;\nuse std::io::{self, Write};\nuse std::process::{Command, ExitStatus};\n\nfn prepare() -> io::Result<()> {\n    let directory = format!(\"{}/.node-versions\", env::var(\"HOME\").unwrap());\n    fs::create_dir_all(directory)?;\n    Ok(())\n}\n\nfn install(version: &str) -> io::Result<()> {\n    prepare()?;\n\n    let package = format!(\"node-v{}-linux-x64.tar.xz\", version);\n    let url = format!(\"https://nodejs.org/download/release/v{}/{}\", version, package);\n    let output = Command::new(\"wget\").arg(&url).arg(\"-P\").arg(&format!(\"{}/.node-versions\", env::var(\"HOME\").unwrap())).output()?;\n    print_output(&output);\n\n    let output = Command::new(\"tar\").arg(\"-xf\").arg(format!(\"{}/.node-versions/{}\", env::var(\"HOME\").unwrap(), package)).arg(\"-C\").arg(format!(\"{}/.node-versions\", env::var(\"HOME\").unwrap())).output()?;\n    print_output(&output);\n\n    Ok(())\n}\n\nfn switch(version: &str) -> io::Result<()> {\n    let node_path = format!(\"{}/.local/bin/node\", env::var(\"HOME\").unwrap());\n    let npm_path = format!(\"{}/.local/bin/npm\", env::var(\"HOME\").unwrap());\n    let node_version_path = format!(\"{}/.node-versions/node-v{}-linux-x64/bin/node\", env::var(\"HOME\").unwrap(), version);\n    let npm_version_path = format!(\"{}/.node-versions/node-v{}-linux-x64/bin/npm\", env::var(\"HOME\").unwrap(), version);\n\n    // Check if the specified Node version is installed\n    if !fs::metadata(&node_version_path).is_ok() {\n        writeln!(io::stderr(), \"Node version {} is not installed. Please install it first.\", version)?;\n        std::process::exit(1);\n    }\n\n    // Remove existing Node and npm symlinks, if they exist\n    let _ = fs::remove_file(&node_path);\n    let _ = fs::remove_file(&npm_path);\n\n    // Create new symlinks\n    let _ = std::os::unix::fs::symlink(&node_version_path, &node_path)?;\n    let _ = std::os::unix::fs::symlink(&npm_version_path, &npm_path)?;\n\n    Ok(())\n}\n\nfn print_output(output: &std::process::Output) {\n    io::stdout().write_all(&output.stdout).unwrap();\n    io::stderr().write_all(&output.stderr).unwrap();\n}\n\nfn print_usage() {\n    println!(\"Usage: node-switch <command> [version]\");\n    println!(\"Commands:\");\n    println!(\"  prepare              Create the .node-versions directory\");\n    println!(\"  install <version>    Download and install the specified Node version\");\n    println!(\"  switch <version>     Switch to the specified Node version\");\n}\n\nfn main() -> io::Result<()> {\n    let args: Vec<String> = env::args().collect();\n\n    if args.len() < 2 {\n        print_usage();\n        return Ok(());\n    }\n\n    match args[1].as_str() {\n        \"prepare\" => prepare(),\n        \"install\" => install(&args[2]),\n        \"switch\" => switch(&args[2]),\n        _ => {\n            print_usage();\n            Ok(())\n        }\n    }\n}\n```\n\n저는 bash 쉘 스크립트보다 Rust에서 CLI 앱을 작성하는 것이 더 쉽다고 말하고 싶습니다. 그러나 하드웨어 자원이 제한된 경우에는 Rust를 사용하여 CLI 앱을 작성하는 것이 가장 좋습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n블로고.io를 사용하여 게시된 글이에요. 무료로 사용해보세요.\n","ogImage":{"url":"/assets/img/2024-06-19-10BestUseCasesofRustProgrammingLanguagein2023_0.png"},"coverImage":"/assets/img/2024-06-19-10BestUseCasesofRustProgrammingLanguagein2023_0.png","tag":["Tech"],"readingTime":11},{"title":"레일즈 앱에 클래스 레벨 콜백을 추가해보세요","description":"","date":"2024-06-19 22:14","slug":"2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks","content":"\n<img src=\"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png\" />\n\n# 소개\n\n지난 주에는 ActiveJob의 결과를 처리해야 하는 기능을 작업했습니다. 해당 작업은 젬 내에 존재했고, 호스트 애플리케이션의 클래스에서 메소드를 호출하기 위해 젬을 수정해야 했습니다. 이 상황은 클래스 인스턴스와는 독립적으로 처리되어야 했기 때문에 클래스 수준의 콜백이 필요했습니다.\n\n# Rails에서 콜백 이해하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n콜백은 객체의 라이프사이클 중 특정 시점에 호출되는 메서드입니다. Rails에서는 콜백이 널리 사용되어 객체의 생성, 업데이트 및 삭제 중에 코드를 자동으로 실행합니다. 콜백에 대해 더 알고 싶다면 Rails 가이드의 콜백 섹션을 참조해보세요.\n\n# 예시 코드\n\n## ActiveJob의 젬\n\n여기에는 호스트 애플리케이션의 클래스에서 메서드를 호출해야 하는 젬 내의 작업이 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# ActiveJob in the gem\n\nclass MyJob < ActiveJob::Base\ndef perform\nresult = # perform the job and get the result\nif ModelName.respond_to?(:after_result, true)\nModelName.after_result { result }\nend\nend\nend\n\n이 스니펫에서는 호스트 애플리케이션의 ModelName 클래스가 after_result 클래스 메소드를 갖고 있는지 확인합니다. 해당 메소드가 있다면 블록을 사용하여 작업 결과를 이 메소드로 전달합니다.\n\n## Host Application Class Method\n\n호스트 애플리케이션에서는 클래스 내에 after_result 메소드를 정의합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 호스트 응용프로그램의 클래스\n\nClass ModelName\ndef self.after_result\nresult = yield if block_given?\nprocess(result) if result.present?\nend\n\ndef self.process(result) # 결과를 처리합니다\nend\nend\n\n여기서 yield는 작업 결과를 after_result 메서드로 전달하며, 결과가 있는 경우 처리합니다.\n\n## 인스턴스 메서드 콜백\n\n인스턴스 메서드와 Rails 콜백을 사용한다면 조금 다르게 보일 것입니다. define_callbacks와 set_callback을 사용하여 클래스 인스턴스에서 콜백을 정의할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```ruby\n# 호스트 응용 프로그램의 클래스\nclass ModelName\n  define_callbacks :result\n  set_callback :result, :after, :after_result, if: -> { respond_to?(:after_result, true) }\n\n  def after_result\n    result = yield if block_given?\n    process(result) if result.present?\n  end\n\n  def process(result)\n    # 결과 처리\n  end\nend\n```\n\n이 예에서 after_result는 인스턴스 메서드입니다. :result 콜백을 정의하고, :result 콜백이 트리거된 후에 after_result 메서드가 실행되어야 함을 지정합니다.\n\n## 젬 내 수정된 ActiveJob\n\n인스턴스 메서드 콜백을 사용하려면 작업을 다음과 같이 수정하십시오:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# ActiveJob in the gem\nclass MyJob < ActiveJob::Base\n  def perform(instance)\n    result = # perform the job and get the result\n    if instance.respond_to?(:after_result, true)\n      instance.run_callbacks(:result) { result }\n    end\n  end\nend\n```\n\n여기서 instance는 호스트 애플리케이션의 ModelName의 인스턴스입니다. after_result에 응답하는지 확인하고 :result 콜백을 실행합니다.\n\n# 결론\n\n클래스 메서드를 콜백으로 사용하는 방법과 인스턴스 메서드에 대해 Rails의 set_callback을 활용하는 방법을 다루었습니다. 사용 사례에 따라 클래스 수준 또는 인스턴스 수준 메서드가 필요한 경우 적절한 콜백 메커니즘을 구현할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png"},"coverImage":"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png","tag":["Tech"],"readingTime":4},{"title":"Ruby on Rails 응용 프로그램을 PostgreSQL을 사용하여 VPS에 Kamal을 이용하여 배포하는 단계별 안내","description":"","date":"2024-06-19 22:12","slug":"2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal","content":"\n![image](/assets/img/2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal_0.png)\n\n이 튜토리얼에서는 DigitalOcean에서 제공하는 Virtual Private Server (VPS)에 Ruby on Rails 애플리케이션을 PostgreSQL 데이터베이스와 함께 배포하는 과정을 안내하겠습니다. Docker 기반 애플리케이션을 자동화하는 배포 도구 인 Kamal을 활용하여 배포 프로세스를 자동화할 것입니다.\n\n# 전제 조건\n\n시작하기 전에 다음 사항을 갖추었는지 확인하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- PostgreSQL이 구성된 Ruby on Rails 애플리케이션.\n- VPS (droplet)가 프로비저닝되어 SSH 액세스가 설정된 DigitalOcean 계정. 원하는 제공업체를 사용해도 됩니다.\n\n# 단계 1: Kamal 설치\n\n로컬 머신에 Kamal이 설치되어 있는지 확인하세요. RubyGems를 통해 설치할 수 있습니다:\n\n```js\ngem install kamal\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계 2: 배포 설정 구성\n\n프로젝트 디렉토리로 이동한 다음 다음을 실행하세요:\n\n```js\nkamal init\n```\n\n이 명령은 deploy.yml 설정 파일을 생성하고 다른 몇 가지 파일을 함께 생성합니다. deploy.yml 구성 파일의 여러 섹션을 이해해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 애플리케이션의 이름. 고유하게 컨테이너를 구성하는 데 사용됩니다.\nservice: mynewapp\n```\n\n애플리케이션의 이름을 지정합니다. 이는 애플리케이션과 관련된 컨테이너를 고유하게 구성하는 데 사용됩니다.\n\n```js\n# 컨테이너 이미지의 이름.\nimage: talha/mynewapp\n```\n\n애플리케이션에 대한 Docker 컨테이너 이미지의 이름을 지정합니다. talha/mynewapp를 Docker Hub 저장소의 이름으로 교체하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 이러한 서버에 배포할 수 있습니다.\n서버:\n  웹:\n    호스트:\n      - 123.123.45.678\n    라벨:\n      traefik.http.routers.mynewapp.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp.entrypoints: websecure\n      traefik.http.routers.mynewapp_secure.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp_secure.tls: true\n      traefik.http.routers.mynewapp_secure.tls.certresolver: letsencrypt\n    옵션:\n      네트워크: \"private\"\n```\n\n어플리케이션이 배포될 서버를 정의하고, HTTP 요청을 앱에 라우팅하고 TLS/SSL 암호화를 활성화하기 위한 Traefik 설정을 구성합니다.\n\n```js\n# 이미지 호스트에 대한 자격 증명.\n레지스트리:\n  사용자 이름:\n    - KAMAL_REGISTRY_USERNAME\n  비밀번호:\n    - KAMAL_REGISTRY_PASSWORD\n```\n\n어플리케이션 이미지가 호스팅된 Docker 이미지 레지스트리에 액세스하는 자격 증명을 지정합니다. KAMAL_REGISTRY_USERNAME 및 KAMAL_REGISTRY_PASSWORD를 Docker 허브 자격 증명으로 교체하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\n# 컨테이너에 환경 변수 주입 (시크릿은 .env에서 온다).\n# 변경 후 `kamal env push`를 실행하는 것을 잊지 마세요!\nenv:\n  clear:\n    RAILS_ENV: production\n    RACK_ENV: production\n    RAILS_LOG_TO_STDOUT: true\n    RAILS_SERVE_STATIC_FILES: true\n  secret:\n    - RAILS_MASTER_KEY\n    - SMTP_PASSWORD\n    - SMTP_SERVER\n    - SMTP_LOGIN\n    - DB_HOST\n    - POSTGRES_USER\n    - POSTGRES_PASSWORD\n```\n\n컨테이너의 환경 변수를 지정합니다. clear 변수는 공개적으로 접근 가능하며, 시크릿 변수는 비공개로 유지됩니다. 이러한 변수는 .env 파일에서 가져옵니다.\n\n```yaml\n# root가 아닌 다른 ssh 사용자 사용\nssh:\n  user: deploy\n```\n\n- 서버에 액세스하는 데 사용할 SSH 사용자를 지정합니다. 이 경우 사용자는 deploy입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\n# 빌더 설정 구성.\n빌더:\n  원격:\n    아키텍처: amd64\n```\n\n빌더 설정을 구성하여 응용 프로그램을 빌드할 원격 서버의 아키텍처를 지정합니다. 위의 구성은 Apple Silicon에서 개발하고 있지만 amd64 도커 이미지만 빌드하려는 경우 유용합니다.\n\n```yaml\n# 부가 서비스 사용 (비밀은 .env에서 제공됨).\n부가서비스:\n  db:\n    이미지: postgres:16.0\n    호스트: 123.123.45.678\n    환경:\n      클리어:\n        POSTGRES_USER: \"mynewapp\"\n        POSTGRES_DB: \"mynewapp_production\"\n      시크릿:\n        - POSTGRES_PASSWORD\n        - POSTGRES_USER\n    파일:\n      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql\n    디렉토리:\n      - data:/var/lib/postgresql/data\n    옵션:\n      네트워크: \"private\"\n```\n\n응용 프로그램에서 필요한 추가 서비스를 정의합니다. 이 경우 지정된 버전과 환경 변수를 갖는 PostgreSQL 데이터베이스 서비스를 구성합니다. 파일 지시문을 사용하여 자체 엔트리포인트를 제공할 수 있습니다. config/init.sql은 config/database.yml 구성에서 예상한대로 데이터베이스를 생성해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nCREATE DATABASE mynewapp_production;\n```\n\n위 명령어를 사용하여 새로운 파일 config/init.sql을 만들어주세요.\n\n```js\nproduction:\n  <<: *default\n  database: mynewapp_production\n  username: <%= ENV[\"POSTGRES_USER\"] %>\n  password: <%= ENV[\"POSTGRES_PASSWORD\"] %>\n  host: <%= ENV[\"DB_HOST\"] %>\n```\n\n또한, 위와 같이 database.yml 파일을 업데이트하여 프로덕션 DB 구성을 업데이트해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\ntraefik:\n  options:\n    publish:\n      - \"443:443\"\n    volume:\n      - \"/letsencrypt/acme.json:/letsencrypt/acme.json\"\n    network: \"private\"\n  args:\n    entryPoints.web.address: \":80\"\n    entryPoints.websecure.address: \":443\"\n    entryPoints.web.http.redirections.entryPoint.to: websecure\n    entryPoints.web.http.redirections.entryPoint.scheme: https\n    entryPoints.web.http.redirections.entrypoint.permanent: true\n    certificatesResolvers.letsencrypt.acme.email: \"info@mynewapp.com\"\n    certificatesResolvers.letsencrypt.acme.storage: \"/letsencrypt/acme.json\"\n    certificatesResolvers.letsencrypt.acme.httpchallenge: true\n    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web\n```\n\nTraefik을 설정하여 HTTPS 요청을 처리하고 Let's Encrypt를 사용하여 SSL 인증서를 자동으로 관리하도록 구성합니다.\n\n아래에 완전한 deploy.yml 파일을 찾을 수 있어요:\n\n```yaml\n# 애플리케이션의 이름. 컨테이너를 고유하게 설정하는 데 사용됩니다.\nservice: mynewapp\n\n# 컨테이너 이미지의 이름입니다.\nimage: talha/mynewapp\n\n# 이 서버로 배포합니다.\nservers:\n  web:\n    hosts:\n      - 123.123.45.678\n    labels:\n      traefik.http.routers.mynewapp.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp.entrypoints: websecure\n      traefik.http.routers.mynewapp_secure.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp_secure.tls: true\n      traefik.http.routers.mynewapp_secure.tls.certresolver: letsencrypt\n    options:\n      network: \"private\"\n\n# 이미지 호스트의 자격 증명입니다.\nregistry:\n  username:\n    - KAMAL_REGISTRY_USERNAME\n  password:\n    - KAMAL_REGISTRY_PASSWORD\n\n# 컨테이너로 ENV 변수를 주입합니다(비밀은 .env에서 가져옵니다).\n# 변경 후 `kamal env push`를 실행하는 것을 잊지 마세요!\nenv:\n  clear:\n    RAILS_ENV: production\n    RACK_ENV: production\n    RAILS_LOG_TO_STDOUT: true\n    RAILS_SERVE_STATIC_FILES: true\n  secret:\n    - RAILS_MASTER_KEY\n    - SMTP_PASSWORD\n    - SMTP_SERVER\n    - SMTP_LOGIN\n    - DB_HOST\n    - POSTGRES_USER\n    - POSTGRES_PASSWORD\n\n# root가 아닌 다른 ssh 사용자를 사용합니다.\nssh:\n  user: deploy\n\n# 빌더 설정을 구성합니다.\nbuilder:\n  remote:\n    arch: amd64\n\n# 보조 서비스를 사용합니다(비밀은 .env에서 가져옵니다).\naccessories:\n  db:\n    image: postgres:16.0\n    host: 123.123.45.678\n    env:\n      clear:\n        POSTGRES_USER: \"mynewapp\"\n        POSTGRES_DB: \"mynewapp_production\"\n      secret:\n        - POSTGRES_PASSWORD\n        - POSTGRES_USER\n    files:\n      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql\n    directories:\n      - data:/var/lib/postgresql/data\n    options:\n      network: \"private\"\n\ntraefik:\n  options:\n    publish:\n      - \"443:443\"\n    volume:\n      - \"/letsencrypt/acme.json:/letsencrypt/acme.json\"\n    network: \"private\"\n  args:\n    entryPoints.web.address: \":80\"\n    entryPoints.websecure.address: \":443\"\n    entryPoints.web.http.redirections.entryPoint.to: websecure\n    entryPoints.web.http.redirections.entryPoint.scheme: https\n    entryPoints.web.http.redirections.entrypoint.permanent: true\n    certificatesResolvers.letsencrypt.acme.email: \"info@mynewapp.com\"\n    certificatesResolvers.letsencrypt.acme.storage: \"/letsencrypt/acme.json\"\n    certificatesResolvers.letsencrypt.acme.httpchallenge: true\n    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web\n\nasset_path: /rails/public/assets\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 예시를 참고하여 실제 애플리케이션 이름, 도메인 및 서버 IP 주소로 mynewapp, mynewapp.com 및 123.123.45.678와 같은 자리 표시자를 교체해주세요.\n\n# 단계 3: 배포 사용자 생성\n\nVPS에 SSH로 접속하고 새로운 사용자 deploy를 만들어보세요. 아래 명령어를 실행하세요.\n\n로컬 머신에서 터미널을 열고 SSH를 사용하여 VPS에 연결합니다. 실제 VPS의 IP 주소로 your_server_ip를 교체해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```sh\nssh root@your_server_ip\n```\n\n다음 명령어를 실행하여 새로운 사용자 deploy를 생성하세요:\n\n```sh\nadduser deploy\n```\n\n새 사용자에 대한 암호를 설정하고 추가 정보를 입력하라는 프롬프트가 표시됩니다. 선택 사항을 건너뛰려면 Enter 키를 누르세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n(선택사항) 배포 사용자에게 sudo 권한을 부여하고 싶다면 다음 명령을 실행하여 sudo 그룹에 추가할 수 있습니다:\n\n```js\nusermod -aG sudo deploy\n```\n\n# 단계 4: VPS에 Docker 설치하기:\n\nDocker를 설치하기 전에 패키지 인덱스를 업데이트하는 것이 좋은 실천법입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\napt update\n```\n\nHTTPS를 통해 저장소를 사용할 수 있도록 패키지를 설치하고 Docker에 필요한 몇 가지 패키지를 설치하세요:\n\n```js\napt install -y apt-transport-https ca-certificates curl software-properties-common\n```\n\n시스템에 Docker의 공식 GPG 키를 추가하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\nDocker 리포지토리를 APT 원본에 추가하세요:\n\n```js\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n한번 더 패키지 인덱스를 업데이트하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```bash\napt update\n```\n\n최신 버전의 Docker CE (Community Edition)와 containerd를 함께 설치하려면:\n\n```bash\napt install -y docker-ce docker-ce-cli containerd.io\n```\n\nDocker 서비스를 시작하고 부팅 시 자동으로 시작되도록 설정하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nsystemctl start docker\nsystemctl enable docker\n```\n\n다음 명령어를 실행하여 Docker가 올바르게 설치되었는지 확인하세요. 이 명령은 Docker 버전 정보를 출력해야 합니다:\n\n```js\ndocker --version\n```\n\n마지막으로, 프라이빗 Docker 네트워크를 생성하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n도커 네트워크 생성 -d bridge private\n```\n\n# 단계 5: LetsEncrypt 설치하기:\n\n로컬 머신에서 터미널을 열고 SSH를 사용하여 VPS에 연결합니다. 실제 VPS의 IP 주소로 your_server_ip를 대체하십시오.\n\n```js\nssh root@your_server_ip\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 명령을 사용하여 Let's Encrypt 디렉토리를 설정하세요:\n\n```js\nmkdir -p /letsencrypt && touch /letsencrypt/acme.json && chmod 600 /letsencrypt/acme.json\n```\n\n# 단계 6: 애플리케이션 배포\n\n처음부터 모든 단계를 거쳐 config/deploy.yml 파일을 작성했고 배포할 준비가 되었다면, 다음을 실행하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nkamal setup\n```\n\n# Step 7: 일일 업무 흐름\n\n카말의 명령어를 사용하여 매일 배포 작업을 수행하세요:\n\n앱의 새 버전을 배포하려면:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nkamal deploy\n```\n\n환경 변수를 업데이트하려면:\n\n```js\nkamal env push\n```\n\n새 컨테이너에서 bash 세션을 시작하려면:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nkamal app exec -i bash\n```\n\n새로운 컨테이너에서 Rails 콘솔을 시작하려면:\n\n```js\nkamal app exec -i ‘bin/rails console’\n```\n\n로그 보기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nkamal 앱 로그\n```\n\n# 결론\n\n축하합니다! 카말(Kamal)을 사용하여 디지턈오션(DigitalOcean) VPS에서 PostgreSQL과 함께 루비 온 레일즈(Ruby on Rails) 애플리케이션을 성공적으로 배포했습니다. 이제 구성된 도메인 이름으로 애플리케이션에 액세스할 수 있습니다. 🚀\n\n이 포스트가 마음에 들었다면 좋아요를 눌러 주시고 미디엄(Medium)과 트위터(Twitter)에서도 저를 팔로우해주세요(https://twitter.com/royalty568).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시간을 절약하고 앱을 즉시 구축하고자 한다면 Rails 보일러플레이트를 찾고 계신 것 같네요. https://talha345.gumroad.com/l/rails7-bootstrap5-devise-fa-psql-boldo-boilerplate 를 확인해보세요!\n","ogImage":{"url":"/assets/img/2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal_0.png"},"coverImage":"/assets/img/2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal_0.png","tag":["Tech"],"readingTime":16},{"title":"Rails 7 폼 제출과 Turbo Stream  폼 제출 실패시 에러 표시","description":"","date":"2024-06-19 22:11","slug":"2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission","content":"\n# 소개\n\nHotwire 스위트의 일부인 Turbo Stream은 Rails 애플리케이션에서 실시간 업데이트를 처리하는 우아한 방법을 제공합니다. Rails 7에서 Turbo Stream을 사용하여 양식 제출을 관리하는 것은 더욱 강력하고 간소화되었습니다. 이 블로그 포스트에서는 양식 제출이 실패할 때 오류를 우아하게 처리하여 유연한 사용자 경험을 제공하는 방법에 대해 살펴보겠습니다.\n\n# 전제 조건\n\n시작하기 전에 다음 사항을 확인하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Rails 7 애플리케이션을 설정했어요.\n- Turbo와 Stimulus 라이브러리가 프로젝트에 포함되어 있어요. (이들은 Rails 7 앱에서 기본으로 제공돼요)\n\n# 단계 1: 모델 및 컨트롤러 설정하기\n\n간단한 모델과 컨트롤러를 설정해볼게요. 데모를 위해 간단한 제목과 본문을 가진 Post 모델을 만들고, PostsController에서 폼 제출을 처리할 거예요.\n\n## 모델 및 컨트롤러 생성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 유효성 정의\n\nPost 모델 (app/models/post.rb) 에 몇 가지 유효성을 추가해보세요:\n\n```rb\nclass Post < ApplicationRecord\n validates :title, presence: true\n validates :body, presence: true\nend\n```\n\n# 단계 2: 폼 생성하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로, 새로운 게시물을 제출하기 위한 양식을 만들어보겠습니다. PostsController에서 new 및 create 액션을 정의하세요:\n\n```js\nclass PostsController < ApplicationController\n  def new\n    @post = Post.new\n  end\n\n  def create\n    @post = Post.new(post_params)\n    if @post.save\n      redirect_to @post, notice: '게시물이 성공적으로 생성되었습니다.'\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  private\n\n  def post_params\n    params.require(:post).permit(:title, :body)\n  end\nend\n```\n\n# 단계 3: 뷰 작성\n\n## 양식 부분\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/\\_form.html.erb):\n\n```ruby\n<%= form_for post, html: { class: 'row' } do |f| %>\n  <div class=\"col-auto\">\n    <%= f.label :title, class: 'form-label' %>\n    <%= f.text_field :title, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto\">\n    <%= f.label :body, class: 'form-label' %>\n    <%= f.text_area :body, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto mt-4\">\n    <%= f.submit class: 'btn btn-primary' %>\n  </div>\n<% end %>\n```\n\n폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/new.html.erb):\n\n```ruby\n<h2>새 글 작성하기</h2>\n<%= render 'form', post: @post %>\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 이제 레일즈 7에서 오류가 발생합니다.\n\n새로운 포스트를 생성하기 위해 폼을 제출할 때.\n\n```js\nturbo.es2017-esm.js:2115 Error: Form responses must redirect to another location\n    at FormSubmission.requestSucceededWithResponse (turbo.es2017-esm.js:679:27)\n    at FetchRequest.receive (turbo.es2017-esm.js:450:27)\n    at FetchRequest.perform (turbo.es2017-esm.js:431:31)\n```\n\n이것은 모든 링크 클릭과 폼 제출이 이제 레일즈 7에서 TURBO_STREAM 요청이 되었기 때문에 발생합니다.\n더 빠른 응답을 얻기 위해서이며, TURBO_STREAM 요청을 만들기 위한 명시적 코드를 작성할 필요가 없습니다.\n\nTURBO_STREAM 요청이 하는 일은 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일반적으로 전체 페이지를 다시로드하지 않고 페이지에 터보 프레임을 업데이트합니다.\n\n해결하는 방법은\n\n이 문제를 해결하려면\n\n이렇게 컨트롤러에서 TURBO_STREAM 요청을 처리해야 합니다.\n\n```js\n  def create\n    @post = Post.new(post_params)\n    if @post.save\n      redirect_to @post, notice: '게시물이 성공적으로 생성되었습니다.'\n    else\n      respond_to do |format|\n        format.turbo_stream { render turbo_stream: turbo_stream.replace(@post, partial: 'posts/form', locals: { post: @post }) }\n        format.html { render :new }\n      end\n    end\n  end\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n터보 스트림.replace 메소드는 레일즈의 Turbo Streams 라이브러리의 일부입니다. 이 메소드는 전체 페이지 새로고침 없이 페이지의 일부를 교체하는 Turbo Stream 액션을 생성합니다.\n\n다음은 이 메소드와 해당 속성에 대한 설명입니다:\n\n- format.turbo_stream: 이는 다음 블록이 Turbo Stream 요청에 응답하는 데 사용되어야 함을 지정합니다. Turbo Stream은 Hotwire 프레임워크의 일부로서 WebSocket을 통해 페이지의 특정 부분에 업데이트를 보낼 수 있게 합니다.\n- `render turbo_stream: turbo_stream.replace(@post, partial: 'posts/form', locals: { post: @post })`: 이는 Turbo Stream 요청에 대해 실행되는 블록입니다. 응답을 보내기 위해 render 메소드를 사용합니다.\n- turbo_stream.replace(@post, partial: `posts/form`, locals: { post: @post }): 이는 페이지의 일부를 교체하는 Turbo Stream 액션입니다. 새로운 콘텐츠로 Turbo Frame이나 Turbo Stream 요소를 교체하는 replace 메소드를 사용합니다.\n- @post: 이는 교체 액션의 대상입니다. 페이지에서 Turbo Frame이나 Turbo Stream 요소의 ID와 일치해야 합니다.\n- 지금은 대상이 form ID인 new_post인 경우가 있습니다. 첫 번째 인자에 @post를 전달했기 때문에 replace 메소드가 자동으로 form ID를 대상으로 설정합니다.\n- partial: 'posts/form': 이는 대상을 렌더링하고 교체할 부분을 지정합니다.\n- locals: { post: @post }: 이는 부분에 로컬 변수를 전달합니다. 이 경우 @post 인스턴스 변수를 post라는 로컬 변수로 전달합니다.\n\n또한, 폼 제출 실패를 처리하기 위해 뷰에 오류를 추가할 예정입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 게시물 생성하기\n\n```ruby\n<%= form_for post, html: { class: 'row' } do |f| %>\n  <% if post.errors.any? %>\n    <div class=\"col-12\">\n      <div class=\"alert alert-danger\">\n        <ul>\n          <% post.errors.full_messages.each do |message| %>\n            <li><%= message %></li>\n          <% end %>\n        </ul>\n      </div>\n    </div>\n  <% end %>\n\n  <div class=\"col-auto\">\n    <%= f.label :title, class: 'form-label' %>\n    <%= f.text_field :title, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto\">\n    <%= f.label :body, class: 'form-label' %>\n    <%= f.text_area :body, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto mt-4\">\n    <%= f.submit class: 'btn btn-primary' %>\n  </div>\n<% end %>\n```\n\n이렇게 수정하면 우리는 Rails 7에서 양식 제출 실패를 처리하는 문제를 해결할 수 있습니다.\n\n# 결론:\n\nTurbo는 Basecamp에 의해 소개된 Hotwire 프레임워크의 일부입니다. 최소한의 JavaScript를 사용하여 HTML을 통해 전송함으로써 현대적인 웹 애플리케이션을 구축하는 방법을 제공하도록 설계되었습니다. Turbo에는 세 가지 주요 부분이 있습니다: Turbo Drive, Turbo Frames 및 Turbo Streams.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 단계를 따라 하셨다면 Rails 7 애플리케이션에서 Turbo Stream을 성공적으로 구현하셨습니다. 이 방법을 통해 사용자 경험을 향상시켜 전체 페이지 새로고침 없이 즉각적인 피드백을 제공하고 Hotwire의 Turbo 라이브러리의 능력을 활용할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission_0.png"},"coverImage":"/assets/img/2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission_0.png","tag":["Tech"],"readingTime":8},{"title":"Spring Boot에서 사용자 정의 micrometer 메트릭 및 스크레이핑, Prometheus 및 Grafana를 사용하여 시각화하기","description":"","date":"2024-06-19 22:09","slug":"2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana","content":"\n# 개요\n\n비즈니스에 중요한 응용 프로그램에서 관측 가능성은 중요합니다. 이는 응용 프로그램의 내부 상태를 외부에서 관측하는 능력입니다. 자주 언급되는 것처럼 로그, 지표 및 추적은 관측 가능성의 세 축입니다.\n\n- 로그는 이벤트의 연대 기록입니다. 로그는 주로 일반 텍스트로 기록되지만(이진 및 구조화된 형식도 가능함) 디버깅 및 시스템 이벤트 및 실패 이해에 중요합니다.\n- 지표는 집계된 데이터 또는 이벤트 또는 응용 프로그램 성능의 현재 상태입니다. 지표는 CPU 사용률, 평균 HTTP 응답 시간 또는 총 HTTP 요청과 같은 실시간 통찰력을 제공할 수 있습니다.\n- 추적은 시작부터 끝까지의 엔드 투 엔드 흐름에 대한 상세한 정보를 제공합니다. 요청이 응용 프로그램의 각 구성 요소 또는 서비스를 통과하는 것을 추적합니다. 추적은 로그 및 지표보다 복잡합니다.\n\n이 블로그에서는 지표에 초점을 맞출 것입니다. Spring Boot는 Micrometer와 통합하기 위한 자동 구성을 제공합니다. 이는 SLF4J와 유사하지만 관측 가능성을 위한 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 단계\n\n우리는 사용자 정의 지표와 헬스 인디케이터를 생성하고 아래 단계를 따를 것입니다:\n\n- 액추에이터와 마이크로미터 레지스트리를 사용하여 프로메테우스 엔드포인트를 활성화합니다.\n- JaMon을 사용하여 REST API 응답 시간을 모니터링하는 Aspect를 생성합니다.\n- HTTP 응답 시간과 요청 횟수에 대한 사용자 정의 지표를 생성합니다.\n- 사용자 정의 헬스 인디케이터를 생성합니다.\n- 프로메테우스를 설정하여 정기적으로 지표를 수집합니다.\n- 그라파나 대시보드를 설정하여 거의 실시간으로 지표를 시각화합니다.\n\n# 구현\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n1. 액추에이터와 micrometer 레지스트리를 사용하여 프로메테우스 엔드포인트를 활성화합니다.\n\n다음 의존성을 pom.xml에 추가하세요.\n\n```js\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n<dependency>\n  <groupId>io.micrometer</groupId>\n  <artifactId>micrometer-registry-prometheus</artifactId>\n</dependency>\n```\n\n엔드포인트는 HTTP 또는 JMX를 통해 활성화 또는 노출시킬 수 있습니다. 우리는 HTTP에만 초점을 맞출 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기본적으로 모든 엔드포인트가 활성화되어 있습니다. 그러나 종료 점은 활성화되지 않습니다.\n\n기본적으로 헬스 엔드포인트만 노출됩니다.\n\n다른 엔드포인트도 노출해 봅시다. 아래 라인을 애플리케이션 속성에 추가해 주세요:\n\n```js\nmanagement.endpoints.web.exposure.include=*\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n(\\*) 모든 끝점을 노출시킬 것이다 (권장되지 않음). 선택된 끝점을 지정하는 데 쉼표로 구분된 값들을 사용할 수 있습니다. 이제 /actuator/metrics로 이동하면 모든 메트릭 목록을 볼 수 있습니다. 이제 /actuator/prometheus로 이동하면 특정 형식의 유사한 메트릭 및 그 값들을 볼 수 있습니다. 이것이 프로메테우스를 구성할 때 사용할 내용입니다.\n\n2 JaMon을 사용하여 REST API 응답 시간을 모니터링하는 Aspect를 생성하세요.\n\nAround 어드바이스를 생성하세요. 이를 위해 어노테이션을 만들었습니다. AOP에 대한 전체 기사를 작성했습니다. 한 번 시도해보세요. JaMon은 개발자가 애플리케이션을 쉽게 모니터링할 수 있게 하는 Java 애플리케이션 모니터링 API입니다. JaMon 의존성을 주입하세요:\n\n<dependency>\n   <groupId>com.jamonapi</groupId>\n   <artifactId>jamon</artifactId>\n   <version>2.82</version>\n</dependency>\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지금은 JaMon을 위해 빈을 생성하고 구성할 것입니다:\n\n```js\n@Configuration\n@ComponentScan(basePackages = \"com.yogendra.aspect\")\n@EnableAspectJAutoProxy\npublic class MonitorConfig {\n    @Bean\n    MonitorFactoryInterface monitorFactory() {\n        return MonitorFactory.getFactory();\n    }\n}\n\n@Component\n@Aspect\npublic class MonitorAspect {\n\n    private final MonitorFactoryInterface monitorFactoryInterface;\n\n    public MonitorAspect(MonitorFactoryInterface monitorFactoryInterface) {\n        this.monitorFactoryInterface = monitorFactoryInterface;\n    }\n\n\n    @Around(\"@annotation(com.yogendra.annotation.MethodMonitor)\")\n    public Object monitorMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = methodSignature.getMethod();\n        MethodMonitor methodMonitor = method.getAnnotation(MethodMonitor.class);\n        Monitor monitor = monitorFactoryInterface.start(methodMonitor.name());\n        try {\n            return joinPoint.proceed();\n        } finally {\n            monitor.stop();\n        }\n    }\n}\n\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MethodMonitor {\n    String name() default \"\";\n\n    String uri() default \"\";\n\n    String method() default \"GET\";\n}\n```\n\n이제 MethodMonitor로 우리의 메서드 중 어떤 것이든 연결하면 JaMon이 모니터링을 시작합니다. AOP가 얼마나 강력한지 보여주는 것이죠.\n\n3. HTTP 응답 시간 및 요청 횟수에 대한 사용자 정의 메트릭 생성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n요즘 Micrometer에 대해 조금 이야기해보자. Micrometer는 JVM 기반 애플리케이션을 위한 메트릭 인스트루먼테이션 라이브러리야. Micrometer에서 가장 중요한 인터페이스는 Meter야. 미터는 MeterRegistry에 생성되고 보관돼. Step 1에서 추가한 종속성은 PrometheusMeterRegistry를 자동으로 구성할 거야. Micrometer는 Counter, Gauge, Timer, DistributionSummary 등 다양한 타입의 미터를 제공해. 이 예제에서는 Counter와 Gauge를 구현할 거야. http.requests.count와 http.response.time 두 가지 지표를 생성할 거야.\n\n```js\nCounter.builder(\"http.requests.count\")\n  .tag(\"uri\", methodMonitor.uri())\n  .tag(\"method\", methodMonitor.method())\n  .register(meterRegistry)\n  .increment();\n\nGauge.builder(\"http.response.time\", monitor::getLastValue)\n  .tag(\"uri\", methodMonitor.uri())\n  .tag(\"method\", methodMonitor.method())\n  .register(meterRegistry);\n```\n\n첫 번째 코드는 URI별로 HTTP 메소드(GET, PUT 등) 당 수행된 HTTP 요청 수를 셈. 두 번째 코드는 URI별로 HTTP 메소드(GET, PUT 등)의 API 실행 시간을 측정해. 이전 단계에서 생성한 MonitorAspect에 위 지표들을 추가할 거야. 우리 업데이트된 어드바이스는 이렇게 생겼어:\n\n```js\n@Component\n@Aspect\npublic class MonitorAspect {\n\n    private final MonitorFactoryInterface monitorFactoryInterface;\n    private final MeterRegistry meterRegistry;\n\n    public MonitorAspect(MonitorFactoryInterface monitorFactoryInterface, MeterRegistry meterRegistry) {\n        this.monitorFactoryInterface = monitorFactoryInterface;\n        this.meterRegistry = meterRegistry;\n    }\n\n\n    @Around(\"@annotation(com.yogendra.annotation.MethodMonitor)\")\n    public Object monitorMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Method method = methodSignature.getMethod();\n        MethodMonitor methodMonitor = method.getAnnotation(MethodMonitor.class);\n        Monitor monitor = monitorFactoryInterface.start(methodMonitor.name());\n        try {\n            return joinPoint.proceed();\n        } finally {\n            monitor.stop();\n            Counter.builder(\"http.requests.count\")\n                    .tag(\"uri\", methodMonitor.uri())\n                    .tag(\"method\", methodMonitor.method())\n                    .register(meterRegistry).increment();\n            Gauge\n                    .builder(\"http.response.time\", monitor::getLastValue)\n                    .tag(\"uri\", methodMonitor.uri())\n                    .tag(\"method\", methodMonitor.method())\n                    .register(meterRegistry);\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n필요한 지표를 구성했습니다. 이제 서버를 재시작하고, API 엔드포인트를 호출한 후 브라우저에서 /actuator/prometheus를 열어보세요. 여기서 http_requests_count와 http_response_time이라는 이름의 두 가지 지표를 찾을 수 있습니다. Spring Boot는 자동 구성된 HTTP 지표를 제공하며, 이를 비활성화하려면 application.properties에 다음을 추가해주세요.\n\n```js\nmanagement.metrics.enable.http.server.requests = false;\n```\n\n4. 사용자 정의 헬스 지표를 만드세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSpring Boot은 DOWN, OUT_OF_SERVICE, UP, UNKNOWN과 같은 네 가지 다른 상태 코드를 제공합니다. 이 상태 코드는 중요도 순으로 정렬되어 있어요. 클래스 패스에서 발견된 종속성에 따라 Spring Boot는 JmsHealthIndicator, DataSourceHealthIndicator, RedisHealthIndicator 등과 같은 여러 건강 지시자를 자동으로 구성할 수 있습니다. 이를 비활성화할 수도 있어요. 비즈니스 요구에 따라 특정 데이터베이스 테이블의 행 수나 대기열에 있는 메시지 수와 같은 것을 기반으로 사용자 정의 상태를 추가하고 싶을 수 있어요.\n\n건강 지시자를 생성하기 위해 HealthIndicator를 구현하거나 AbstractHealthIndicator를 확장할 수 있습니다:\n\n```java\npublic class AccountHealthIndicator implements HealthIndicator {\n\n    public final JdbcTemplate jdbcTemplate;\n\n    public AccountHealthIndicator(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @Override\n    public Health health() {\n        Long count = jdbcTemplate.queryForObject(\"select count(*) from account\", Long.class);\n\n        if (count >= 1) {\n            return Health.up().withDetail(\"accounts\", count).build();\n        } else {\n            return Health.status(\"NO_ACCOUNT\").withDetail(\"accounts\", count).build();\n        }\n    }\n}\n```\n\n여기서는 사용자 정의 상태인 NO_ACCOUNT를 생성합니다. 이를 적용하려면 해당 심각도 수준을 정의해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n(management.endpoint.health.status.order = NO_ACCOUNT),\n  DOWN,\n  OUT_OF_SERVICE,\n  UP,\n  UNKNOWN;\n```\n\n이제 새로 만든 Health Indicator를 위해 HealthMetrics를 생성해 보겠습니다. 이를 위해 Gauge 미터를 사용할 것입니다:\n\n```js\npublic class HealthMetrics {\n\n    private final AccountHealthIndicator accountHealthIndicator;\n    private final MeterRegistry meterRegistry;\n\n    public HealthMetrics(AccountHealthIndicator accountHealthIndicator, MeterRegistry meterRegistry) {\n        this.accountHealthIndicator = accountHealthIndicator;\n        this.meterRegistry = meterRegistry;\n    }\n\n\n    @Scheduled(fixedRate = 15000, initialDelay = 0)\n    public void reportHealth() {\n        Gauge\n                .builder(\"application.health\",\n                        () -> getStatus(accountHealthIndicator.getHealth(true).getStatus())\n                )\n                .register(meterRegistry);\n    }\n\n    private int getStatus(Status status) {\n       return switch (status.getCode()) {\n            case \"NO_ACCOUNT\" -> 0;\n            case \"DOWN\" -> 1;\n            case \"OUT_OF_SERVICE\" -> 2;\n            case \"UP\" -> 3;\n            default -> -1;\n        };\n    }\n}\n```\n\n이제 애플리케이션을 다시 시작하면 새로 생성된 메트릭인 application_health를 볼 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로메테우스를 자주 간격으로 메트릭을 스크래핑하도록 설정하기\n\n프로메테우스는 모니터링 및 경보 기술로 오픈 소스입니다. 프로메테우스를 설치하기 위해 다음 단계를 따를 수 있습니다. 기본적으로 프로메테우스는 prometheus.yml을 기본 구성 파일로 사용합니다. 아래와 같이 파일을 편집하세요:\n\n![이미지](/assets/img/2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_0.png)\n\n여기에서 대부분의 것을 기본값으로 유지했습니다. 스크래핑 구성 아래에서 작업 이름과 대상을 업데이트했습니다. 대상은 우리의 스프링 부트 어플리케이션입니다. 프로메테우스 서버를 시작하려면 아래 명령을 사용할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n./prometheus --web.listen-address=호스트:포트\n```\n\n상태로 이동 - `targets`. 활성화된 모든 엔드포인트를 확인할 수 있습니다:\n\n![2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_1.png](/assets/img/2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_1.png)\n\n실시간으로 메트릭을 시각화하는 Grafana 대시보드를 설정합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n로컬 시스템에 Grafana를 설치하려면 이 링크를 사용하십시오. Grafana가 작동 중이면 데이터 소스를 구성합니다. 홈 `연결` `데이터 소스` `새 데이터 소스 추가로 이동합니다. Prometheus를 선택하고 이전 단계에서 설정한 Prometheus 서버 URL을 입력하십시오. 이제 홈 `대시보드` `새 대시보드`로 이동하여 시각화를 추가해보세요. 대시보드에 추가할 시각화를 위해 다음 PromQL 쿼리를 공유할게요:\n\n(1) 상태 (Stat) - `application_health'application=\"YOGENDRA\"`을 추가하고 아래 값 매핑을 추가합니다.\n\n![이미지](/assets/img/2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_2.png)\n\n(2) 시작 시간 (Stat) - `process_start_time_seconds'application=\"YOGENDRA\"'\\*1000\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n(3) Uptime (Stat) - `process_uptime_seconds' application=\"YOGENDRA\"\n\n(4) Heap utilization (Gauge) - `sum(jvm_memory_used_bytes' application=\"YOGENDRA\", area=\"heap\")\\*100 / sum(jvm_memory_max_bytes' application=\"YOGENDRA\", area=\"heap\")'\n\n(5) CPU utilization (Time series)\n\n- A - `system_cpu_usage' application=\"YOGENDRA\"\n- B - `process_cpu_usage' application=\"YOGENDRA\"\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n(6) HTTP 응답 시간 (시계열) - `http_response_time 'application=”YOGENDRA”, uri!=”_/actuator/_”' 여기서는 HTTP 호출이 발생한 지점만 보여줄 수 있도록 데이터를 변환합니다. 따라서 데이터 변환으로 이동하고 Group by를 선택합니다. 시간에서 Calculate를 선택하고 Stat First을 선택합니다\\*:\n\n![이미지](/assets/img/2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_3.png)\n\n(7) HTTP 요청 횟수 (시계열) - `http_requests_count_total'application=”YOGENDRA”, uri!=”_/actuator/_”' 여기서도 reduce 함수를 사용하여 데이터를 변환합니다. 변환은 다음과 같이 보입니다:\n\n![이미지](/assets/img/2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n애플리케이션 코드 링크를 [여기](https://github.com/your-repository)에서 찾을 수 있어요.\n","ogImage":{"url":"/assets/img/2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_0.png"},"coverImage":"/assets/img/2024-06-19-CustommicrometermetricsinSpringBootandscrapeandvisualiseusingPrometheusandGrafana_0.png","tag":["Tech"],"readingTime":15},{"title":"자바로 간단한 규칙 엔진 구축하기","description":"","date":"2024-06-19 22:08","slug":"2024-06-19-BuildingaSimpleRuleEngineinJava","content":"\n![Building a Simple Rule Engine in Java](/assets/img/2024-06-19-BuildingaSimpleRuleEngineinJava_0.png)\n\n소프트웨어 개발에서는 종종 데이터를 필터링하거나 처리하기 위해 일련의 규칙이나 조건을 적용해야 하는 상황이 있습니다. 전통적인 if 및 else 문을 사용하여 이러한 규칙을 관리하면 유지 관리하기 어렵고 번거로울 수 있습니다. 규칙 엔진은 이러한 규칙을 정의하고 실행하는 더 유연하고 조직화된 방법을 제공합니다. 이 기사에서는 함수형 프로그래밍 원칙을 사용하여 Java에서 간단한 규칙 엔진을 구축하는 방법을 탐색하겠습니다.\n\n준비 사항\n\n규칙 엔진을 구축하기에 앞서 필요한 구성 요소를 정의해 보겠습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 규칙:\n\n규칙은 우리가 평가하고 싶은 조건 또는 기준을 나타냅니다. 규칙은 주어진 객체가 규칙의 기준을 충족하는지 여부를 결정하는 술어로 구성됩니다. Enum 또는 Map`key, value`를 사용하세요 (이 부분에서 Enum을 사용합니다).\n\n# 규칙 엔진:\n\n규칙 엔진은 규칙 컬렉션을 관리하고 이를 객체 집합에 적용하는 것을 담당합니다. 정의된 규칙에 기반하여 객체를 필터링하고 필터된 결과를 반환합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 대상-객체:\n\n규칙을 사용하여 필터링하고자 하는 간단한 Person 클래스를 예시 객체로 사용하겠습니다. 이름과 나이와 같은 속성이 있습니다.\n\n# 규칙 엔진 구축하기\n\n규칙 엔진을 단계별로 구축해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n규칙 정의:\n먼저 Rule이라는 enum을 사용하여 규칙을 정의합니다. enum의 각 규칙은 우리가 평가하고 싶은 특정 조건이나 기준을 나타냅니다. 예를 들어, 코드에서 우리는 AGE_GREATER_THAN_30과 NAME_STARTS_WITH_B 두 가지 규칙을 정의했습니다. 각 규칙에는 해당 규칙의 조건을 정의하는 프레디케이트가 있습니다.\n\n```js\nimport java.util.function.Predicate;\n\n// 여러 enum을 가질 수 있어요. 이를 통해 규칙이나 조건을 관리할 수 있어요.\npublic enum Rule implements TestRule {\n    AGE_GREATER_THAN_30(person -> person.getAge() > 30),\n    NAME_STARTS_WITH_B(person -> person.getName().startsWith(\"B\"));\n\n    private final Predicate<Person> predicate;\n\n    Rule(Predicate<Person> predicate) {\n        this.predicate = predicate;\n    }\n\n    public Predicate<Person> getPredicate() {\n        return predicate;\n    }\n}\n```\n\nRule Engine 생성:\n다음으로 RuleEngine 클래스를 생성합니다. 이 클래스는 규칙의 관리와 실행을 처리할 것입니다. 규칙 목록을 유지하고 이러한 규칙에 기반한 새로운 규칙을 추가하고 개체를 필터링하기 위한 메서드를 제공합니다.\n\n필터링 로직 구현:\nRuleEngine 클래스의 filter 메서드에서는 개체 목록을 반복하고 Java 8 Stream API의 allMatch 메서드를 사용하여 각 규칙을 적용합니다. 이 메서드는 주어진 개체에 대해 모든 규칙이 통과되었는지 확인합니다. 모든 규칙이 통과되면 해당 개체를 필터링된 목록에 추가합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npublic interface TestRule {\n    <T> Predicate<T> getPredicate();\n}\n```\n\n```js\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RuleEngine<T> {\n    private List<TestRule> rules;\n\n    public RuleEngine() {\n        this.rules = new ArrayList<>();\n    }\n\n    public void addRule(TestRule rule) {\n        rules.add(rule);\n    }\n\n    public List<T> filter(List<T> items) {\n        List<T> filteredItems = new ArrayList<>();\n        for (T item : items) {\n            if (rules.stream().allMatch(rule -> rule.getPredicate().test(item))) {\n                filteredItems.add(item);\n            }\n        }\n        return filteredItems;\n    }\n}\n```\n\n샘플 대상 객체 만들기:\n\n```js\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모두 함께 해보기\n\nMain 클래스에서는 우리의 규칙 엔진 사용법을 보여줍니다. Person 객체의 리스트를 생성하고 RuleEngine을 AGE_GREATER_THAN_30과 NAME_STARTS_WITH_B 두 가지 규칙으로 초기화합니다. 그런 다음 규칙 엔진의 filter 메소드를 호출하여 Person 객체의 리스트를 전달합니다. 규칙 엔진은 각 사람에게 규칙을 적용하고 필터링된 리스트를 반환합니다.\n\n마지막으로 필터링된 리스트를 반복하고 지정된 규칙을 충족하는 사람들의 이름을 출력합니다.\n\n```java\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Person> people = List.of(\n                new Person(\"Alice\", 25),\n                new Person(\"Bob\", 31),\n                new Person(\"Charlie\", 35)\n        );\n\n        RuleEngine<Person> ruleEngine = new RuleEngine<>();\n        ruleEngine.addRule(Rule.AGE_GREATER_THAN_30);\n        ruleEngine.addRule(Rule.NAME_STARTS_WITH_B);\n\n        List<Person> filteredPeople = ruleEngine.filter(people);\n\n        // 이 부분은 결과만 출력합니다.\n        for (Person person : filteredPeople) {\n            System.out.println(person.getName());\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이 글에서는 Java로 간단한 규칙 엔진을 구축하는 방법을 살펴보았습니다. 이 규칙 엔진을 사용하면 프레디케이트를 사용하여 규칙을 정의하고 객체 컬렉션에 적용할 수 있습니다. 함수형 프로그래밍 원칙을 활용하여 유연하고 확장 가능한 규칙 엔진을 만들어 다양한 시나리오에서 사용할 수 있습니다.\n\n여기서 제시된 개념과 코드를 이해하면 이 기반을 확장하여 특정 필요에 맞는 보다 복잡한 규칙 엔진을 구축할 수 있습니다.\n\nhttps://github.com/KiaShamaei/ruleEngine\n","ogImage":{"url":"/assets/img/2024-06-19-BuildingaSimpleRuleEngineinJava_0.png"},"coverImage":"/assets/img/2024-06-19-BuildingaSimpleRuleEngineinJava_0.png","tag":["Tech"],"readingTime":6},{"title":"자바 Optional을 더 유창하게 활용하기","description":"","date":"2024-06-19 22:06","slug":"2024-06-19-UseJavaOptionalFluently","content":"\nOptional 클래스에는 filter(), map() 및 flatMap()과 같은 다양한 공개 메서드가 포함되어 있습니다. 함수형 및 유창한 프로그래밍에 유용합니다. 이 글에서는 Java Optional을 사용하여 함수형 및 유창한 프로그래밍 스타일을 탐구할 것입니다.\n\n![Java Optional](/assets/img/2024-06-19-UseJavaOptionalFluently_0.png)\n\n# Java Optional 기본 사항\n\nJava Optional의 기본 사항을 다시 확인해 봅시다. 아래는 사용자 레코드의 간단한 예시로, 사용자 ID, 이름, 주소 및 사용자가 CEO인지 여부와 같은 데이터 속성이 포함되어 있습니다. 아래는 코드에서 Optional 클래스를 사용하는 예시입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n// 사용자 레코드\nrecord User(String uid, String name,\nAddress address, boolean ceo){\n\npublic static final User DEFAULT_USER\n= new User(\"0\", \"더미\", null, false);\n\n}\n\n// 주소 레코드\nrecord Address(String line, String zip) {\n}\n\n// User 객체를 생성하는 User 팩토리 클래스\npublic class Users {\n\npublic static Optional<User> getUser(String uid) {\n\n      User user = null;\n\n      // user 변수를 설정하는 로직\n\n      return Optional.ofNullable(user);\n\n}\n}\n\n// Optional 값을 반환하는 getUser 메서드를 호출하는 예시\nOptional<User> oUser = Users.getUser(uid);\nif (oUser.isPresent()) {\n\n// User를 처리합니다. 비어있지 않습니다\nString name = oUser.get().name();\n}\n\n위 예시에서 Users 클래스에는 getUser(...)라는 메서드가 있는데 이 메서드는 User 타입의 Optional을 반환합니다. 이는 호출자에게 반환된 User 값이 null일 수 있다는 것을 나타냅니다. Optional 값 자체가 null이 되어선 안 됩니다.\n\nUsers.getUser(...)의 호출자는 Optional의 isPresent() 메서드를 사용하여 유효한 값이 있는지 확인하고 있다면 사용자를 처리할 것입니다. Optional 클래스를 사용하는 이점은 호출자가 null 반환 값을 처리하는 방법을 고려하게끔 만든다는 점입니다. 이로써 Null Pointer Exception을 방지하고 코드를 견고하게 만듭니다. 본질적으로 이 아이디어는 호출자가 Exception을 처리할 수 있도록 강제하는 것과 유사합니다.\n\n다수의 개발자가 사용할 라이브러리를 작성할 때 Java Optional을 반환하는 것이 권장됩니다. 모든 메서드 호출이 null을 반환할 수 있는 경우에 Optional을 반환하도록 설계하는 것은 목적이 아닙니다. 예를 들어 Java Streams API와 Spring Boot 라이브러리는 많은 곳에서 Java Optional을 반환합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n대부분의 개발자들은 Java Optional 클래스의 이러한 최소한의 기능만 사용하는 경향이 있습니다(유용한 기능입니다). 그러나 Optional 클래스의 여러 메서드 중에는 Java Optional을 사용하는 데 매우 유용한 다양한 기능적 스타일의 메서드가 숨겨져 있습니다. 이러한 메서드를 사용하면 코드를 간결하고 가독성있게 만드는 데 매우 유용합니다.\n\nOptional 객체를 함수형 스타일로 소비하는 방법을 살펴보겠습니다.\n\n# Optional을 활용한 함수형 스타일\n\nOptional 클래스는 ifPresent(..)라는 메서드를 제공하는데, 여기에 프로그래머가 포함된 객체를 처리하는 Lambda 함수(Consumer)를 제공할 수 있습니다. 아래는 예제입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// 사용자를 처리하기 위해 Lamba 객체를 전달합니다\nOptional<User> oUser = Users.getUser(uid);\noUser.ifPresent(user -> {\n\n    // 사용자 처리\n    String name = user.name();\n    System.out.println(name);\n});\n\n// \"Optional.ifPresent\" 메서드 서명\nvoid ifPresent(Consumer<? super T> action)\n```\n\n여기서 코드는 ifPresent(..)를 호출하고 포함된 사용자 객체를 처리하기 위해 Consumer를 전달하고 있음을 볼 수 있습니다. 그러나 변수 oUser가 빈 Optional인 경우 - Consumer가 호출되지 않습니다. 다시 말하면, 전통적인 Java \"if\"문을 사용하는 함수 스타일입니다. ifPresent의 메서드 서명도 표시되어 있으며 Consumer 인터페이스를 사용합니다.\n\n전형적인 람다 프로그래밍의 일환으로, 람다 대신 메소드 참조를 전달할 수 있습니다. 이렇게 하면 코드가 더 읽기 쉬워집니다.\n\n```js\n// 메소드 참조를 사용한 함수형 스타일\nOptional<User> oUser = Users.getUser(uid);\noUser.ifPresent(Main::handleUser);\n\n\n// Main.java의 handleUser 정적 메소드\npublic static void handleUser(User u) {\n\n    // 사용자 처리\n    String name = u.name();\n    System.out.println(name);\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서 Main :: handleUser 메서드 참조가 매개변수로 전달되어 핸들러가 별도의 메서드로 격리되었습니다.\n\n만약 호출자가 전통적인 if-then-else 문을 사용하려면 어떻게 할까요?\n\n\"ifPresentOrElse(..)\" 메서드를 사용하여 가능합니다. 다음은 예시입니다\n\n```js\n// 함수형 스타일의 if-then-else.\n// 값이 존재하면 handleUser 호출\n// 그렇지 않으면 AppException이 throw됨\noUser.ifPresentOrElse(Main::handleUser, () -> {\n    throw new AppException(\"Some Error\");\n});\n\n// \"Optional.ifPresentOrElse\"의 시그니처\nvoid ifPresentOrElse(\n  Consumer<? super T> action, Runnable emptyAction)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자가 사용 가능하면 Method Reference로 표시된 첫 번째 매개변수가 호출됩니다. 그렇지 않은 경우 두 번째 매개변수로 표시된 Runnable을 나타내는 람다 함수가 호출됩니다. 이 방법은 Optional 객체에 적용된 전통적인 Java if-then-else의 기능적 동등물입니다.\n\nOptional 클래스에는 비어있을 때 수행해야 하는 작업을 표현하는 데 유용한 여러 orXXX(..) 메서드가 있습니다.\n\n## orXXX(..) 메서드\n\norElse() 메서드를 사용한 예제입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// Optional이 비어있을 때 기본 사용자 반환\nUser user = oUser.orElse(User.DEFAULT_USER);\n```\n\n여기서 orElse(..) 메소드를 사용합니다. 해당 값이 있는 경우 user 변수에 할당되고, 그렇지 않으면 DEFAULT_USER가 할당됩니다. 이 방법은 Groovy와 같은 다른 언어의 Elvis 연산자에 해당하는 함수적 동등체입니다.\n\n그러나 기본 사용자가 상수보다 조금 복잡하고 어떤 로직에 의해 검색되어야 하는 경우는 어떨까요?\n\nOptional 클래스가 해결책을 제공합니다. orElseGet(..) 메소드를 사용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// Supplier를 호출하여 기본 사용자를 반환합니다.\nUser user = oUser.orElseGet(() -> {\n    // 사용자를 가져오기 위한 기본 로직\n    return defUser;\n});\n```\n\n이는 Optional oUser가 비어 있을 때, Supplier Lambda 함수가 호출되어 내부 로직을 이용하여 기본 사용자를 검색합니다. Optional에는 사용자 대신 \"Optional of User\"를 공급하는 Supplier를 사용하는 or(..) 메소드도 있습니다.\n\nOptional이 비어 있을 때 예외를 throw하고 싶다면 어떻게 해야 할까요?\n\n```js\n// 가능한 경우 사용자 추출\n// 그렇지 않으면 NoSuchElementException을 throw합니다.\nUser user = oUser.orElseThrow();\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\norElseThrow() 메서드를 사용하여 사용자를 반환하거나, 가능한 경우 기본 NoSuchElementException 예외를 throw합니다.\n\n만약 Optional이 비어있는 경우 사용자 정의 예외를 throw하려면 어떻게 해야 할까요?\n\n```java\n// 사용자 추출 가능한 경우\n// 그렇지 않으면 AppException throw\nUser user = oUser.orElseThrow(\n        () -> new AppException(\"에러\"));\n```\n\n우리는 매개변수로 람다(Supplier of Exception) 표현식을 전달하는 오버로드된 orElseThrow(...) 메서드를 사용합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서 더 좋아집니다. Optional에는 메서드 체인을 구축하는 데 유용한 메서드가 많이 있습니다.\n\n# Optional을 활용한 Fluent Style\n\n플루언트 스타일 프로그래밍은 특정 사용 사례를 표현하고 구현하는 데 메서드 체이닝을 사용합니다. 이러한 종류의 프로그래밍은 자바 스트림을 사용할 때 볼 수 있습니다. 이 스타일을 쉽게 인식할 수 있도록 다음과 비슷한 가짜 코드가 있습니다.\n\n```js\nReturnType output = object\n                       .method1(..)\n                       .method2(..)\n                       ...\n                       .methodN(..);\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nOptional에는 filter(..), map(..), flatMap(..)과 같은 몇 가지 메서드가 있습니다. 이러한 메서드는 유창한 스타일 개발에 사용할 수 있습니다. 이러한 메서드는 동등한 스트림 메서드와 유사하지만 하나의 값에 작용합니다. 각각 살펴보겠습니다.\n\n# map() 메서드\n\nmap() 메서드는 한 유형의 Optional을 다른 유형의 Optional로 변환합니다. 다음 코드를 고려해보세요. 이 코드는 명령형 스타일(일반적인 if문)로 사용자의 이름을 추출합니다.\n\n```js\n// 사용자의 이름 가져오기\nString name = null;\nOptional<User> oUser = Users.getUser(uid);\nif (oUser.isPresent()) {\n    name = oUser.get().name();\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 코드에서는 사용자 ID(uid)에 해당하는 사용자 객체를 가져와서 해당 사용자의 이름을 추출하고 있습니다. 변수 name은 null이거나 유효한 문자열일 수 있습니다. Optional 세계에서는 이를 Optional`String`으로 표현하는 것이 가장 완벽한 방법입니다. 따라서 실제 요구사항은 Optional`User`를 Optional`String`(이름)으로 변환하는 것입니다. Optional.map()은 이 작업을 우리를 위해 수행해 주며, 아래와 같이 유창한 스타일을 사용하여 보여줍니다.\n\n```js\n// Optional<User> -> Optional<String>\nOptional<String> name\n        = Users.getUser(uid)\n               .map(User::name);\n```\n\n보시다시피, 우리는 optional에서 map() 메서드를 호출합니다. map() 메서드는 \"User 개체를 가져와 사용자 이름을 반환하는 함수\"를 인수로 취합니다. Method reference 'User::name'은 해당 함수를 표현하기 위해 전달됩니다. 따라서 여기서는 이름을 추출하기 위해 더 유창한 API를 사용하였고, 최종 결과물은 눈에 즐거운 것입니다.\n\n# filter() 메서드\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 사용자가 회사의 CEO인 경우에만 유효한 이름을 가져와야 한다고 요구 사항을 약간 변경합시다. 기억하세요, 사용자 객체에 사용자가 CEO인지 여부를 나타내는 플래그가 있습니다. 명령문 스타일을 사용하여 메소드 코드는 다음과 같이 보일 것입니다.\n\n```js\n// User -> name of CEO\nString name = null;\nOptional<User> oUser = Users.getUser(uid);\nname = oUser.filter(User::ceo)\n              .map(User::name)\n              .orElse(null);\n```\n\n여기서는 사용자가 CEO인 경우에만 이름 필드를 설정합니다. 따라서 사용자가 CEO인지 여부를 확인하기 위해 user.ceo() 메소드를 사용한 추가적인 확인이 필요합니다. 이 명령문 스타일 프로그래밍의 문제는 원하지 않는 코드로 이어지는 여러 개의 \"if\" 문이 있어서 코드가 복잡해집니다.\n\n우리는 위의 코드를 filter()와 map()의 멋진 조합으로 대체할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// CEO만 허용하려면 filter를 사용하세요\nOptional<String> name\n        = Users.getUser(uid)\n               .filter(User::ceo)\n               .map(User::name);\n```\n\n여기서 Optional 사용자 객체를 얻은 후, filter(..) 메서드가 사용자가 CEO인지 확인합니다. filter() 메서드는 Predicate를 취하며, 런타임에서 이 Predicate가 true를 반환하면 filter는 다시 Optional 사용자 객체를 반환합니다. 그렇지 않으면 빈 Optional을 반환합니다. 다음 단계는 map() 메서드를 호출하는 것인데, 이는 사용자 이름을 나타내는 Optional 문자열을 반환할 것입니다.\n\nFluent 스타일 개발을 사용하면 코드의 가독성이 뚜렷하게 향상된 것을 볼 수 있습니다. Fluent 스타일의 프로그래밍은 사용에 익숙해지려면 약간의 연습이 필요합니다.\n\n# flatMap() 메서드\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 flatMap() 메서드에 대해 이야기해 보겠습니다 - 이는 map() 메서드의 변형입니다. 이 메서드를 이해하기 위해 우리의 사용 사례를 약간 수정해 보겠습니다. 사용자의 이름 대신 사용자의 우편번호를 추출하고 싶다고 가정해 봅시다. 이 경우 명령형 프로그래밍에서의 첫 번째 시도는 다음과 같을 것입니다.\n\n```js\n// User -> zip\nString zip = null;\nOptional<User> oUser = Users.getUser(uid);\nif (oUser.isPresent()) {\n    User user = oUser.get();\n    Address address = user.address();\n    if (address != null) {\n        zip = address.zip();\n    }\n}\n```\n\n이 코드는 작동하지만 명백한 이유로 이상적이지 않습니다. 이러한 계단식 if 문을 map() 메서드를 사용하여 우아하게 제거할 수 있습니다 - 아래에서 확인할 수 있습니다.\n\n```js\nOptional<String> zip\n        = Users.getUser(uid)\n               .map(User::address)\n               .map(Address::zip);\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러면 두 개의 메소드 — getAddress()와 getZip()를 추가하여 User와 Address의 디자인을 아래와 같이 변경한다면 어떨까요?\n\n```js\n// Record User\nrecord User(String uid, String name,\n            Address address, boolean ceo) {\n\n    public static final User DEFAULT_USER\n       = new User(\"0\", \"Dummy\", null, false);\n\n    public Optional<Address> getAddress() {\n        return Optional.ofNullable(address);\n    }\n}\n\n// Record Address\nrecord Address(String line, String zip) {\n\n    public Optional<String> getZip() {\n        return Optional.ofNullable(zip);\n    }\n}\n```\n\n만약 map 메소드에 \"Optional 타입을 반환하는 함수\"를 전달하면, 반환된 결과는 \"Optional`Optional`타입\"이 됩니다. flatMap(..)의 사용은 연속적인 옵셔널을 플래트하게 만들어 주어 Optional`타입`으로 만들면 간편하게 작업할 수 있습니다.\n\n따라서 우리의 fluent pipeline에서 address()와 zip() 메소드 대신 getAddress()와 getZip() 메소드를 사용하는 경우, 우리는 다음과 같은 결과를 얻게 될 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nOptional<String> zip = Users.getUser(uid)\n                         .flatMap(User::getAddress)\n                         .flatMap(Address::getZip);\n```\n\n`flatMap(..)` 메소드의 사용에 주목하세요. Method Reference `User::getAddress`는 `Optional<Address>`를 반환하기 때문에 `flatMap(..)`은 단순히 `Optional<Address>`를 반환할 것이며, `map(..)`은 `Optional<Optional<Address>>`를 반환했을 것입니다.\n\n# `stream()` 메소드\n\n마지막으로, `Optional`은 `stream()` 메소드도 가지고 있는데, 이 메소드는 0 또는 1개의 값을 가지는 스트림을 생성합니다. 만약 `Optional`이 비어있다면 0개의 요소를 가진 스트림을 반환하고, 유효한 값이 있는 경우 1개의 요소를 가진 스트림을 반환할 것입니다. 그런 다음 사용 가능한 스트림 메소드 중 하나를 사용하여 스트림을 함수형 스타일로 조작할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 Optional.stream() 메소드를 언제 사용해야 하는지에 대해 더 알고 싶다면, 제 Medium 기사를 읽어보세요.\n\nJava Optional을 사용할 때 따를 몇 가지 기본 규칙을 알고 싶다면, 아래의 Medium 기사를 읽어보세요.\n\n또한 Optional 클래스에 대한 Javadoc을 살펴보기 위해 아래의 링크를 이용해 주세요.\n\n이 글이 도움이 되었다면, 아래의 👏 버튼을 여러 번 클릭하여 지원을 보여주세요. 읽어주셔서 감사합니다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Summary\n\nOptional은 가장 간단한 형태로 사용될 수 있지만, 개발자가 유창한 스타일의 코드를 작성하는 데 도움이 되는 여러 메서드가 있습니다. 많은 경우 더 간결하고 가독성이 높으며 견고한 코드를 작성할 수 있습니다.\n\n사용을 고려해 보세요!\n","ogImage":{"url":"/assets/img/2024-06-19-UseJavaOptionalFluently_0.png"},"coverImage":"/assets/img/2024-06-19-UseJavaOptionalFluently_0.png","tag":["Tech"],"readingTime":15},{"title":"Java 제네릭을 이용한 다형 함수","description":"","date":"2024-06-19 22:03","slug":"2024-06-19-PolymorphicfunctionsusingJavagenerics","content":"\n자바 함수형 프로그래밍 구축 요소\n\n![이미지](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_0.png)\n\n이 기사는 제네릭 유형과 함수형 인터페이스를 사용하여 자바에서 다형성 함수를 작성하는 주제를 탐구합니다. 이 기본 사항은 종종 주니어 엔지니어에 의해 고려되지 않는다. 대신 Java 8+ Stream API와 같은 더 심화된 주제로 즉시 진입하는 것을 선호합니다. 그러나 이것들은 자바에서 함수형 프로그래밍 개념을 배우고 적용하며 더 깨끗하고 재사용 가능하며 선언적인 코드를 작성하는 데 필수적인 구축 요소입니다.\n\n기사 말미에서, 저는 모든 것을 매우 유용하고 실용적인 예제로 하나로 조합할 것입니다. 이 기사가 당신에게 매우 유용하고 실질적인 예제가 될 것이라고 기대합니다. 이 기사가 당신에게 단단한 기초를 제공하고 댓글 섹션이나 스스로 더 탐구하도록 격려할 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러나 계속 읽기 전에 주의할 점은, 이 문서가 제네릭 및 함수형 인터페이스 개념 및 구문을 배우는 초보자용 완전한 자습서로 제공되는 것이 아니라는 것입니다. 이미 Java 공식 문서 및 다양한 자습서 웹사이트에 많은 이러한 자습서가 존재합니다. 우리는 기본 사항을 빠르게 살펴볼 것이며, 이 글의 주요 목적은 왜 그리고 어떻게 실제로 유용한지 깊게 이해하려는 것입니다.\n\n## Java 제네릭의 목적\n\n그렇다면 Java 제네릭의 목적은 무엇이며, 언제 유용할까요?\n\n가장 유혹적인 말은 \"공통 부모를 공유하는 클래스가 있는 재사용 가능한 코드를 작성하기 위해서\"라고 말하는 것입니다. — 또는 이와 같은 말입니다. 경우에 따라, 그리고 어느 정도로 그렇습니다. 하지만 이것이 정확히 무엇을 의미하는지는 무엇일까요? 아래 코드 조각을 살펴봅시다. 제네릭 유형을 사용하는 좋은 이유가 될까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_1.png)\n\n답은: no입니다. 이 코드는 다음 코드 스니펫에서 강조하는 것처럼 Dog 추상화 자체로 쉽게 바꿀 수 있습니다. 이러한 경우에는 제네릭을 사용할 필요가 없습니다.\n\n![image](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_2.png)\n\n그렇다면, Java 제네릭이 언제 진정으로 유용한가요? 먼저, 클래스 제네릭 유형과 메서드 제네릭 유형 두 가지 유형의 일반 유형이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클래스 제네릭 타입은 특히 여러 클래스 API 메소드들 사이에서 타입 일관성을 유지하는 데 유용합니다. 첫 번째 예시로는 List 인터페이스가 add나 get과 같은 여러 메소드에서 동일한 클래스 제네릭 타입 E를 시그니처에 재사용하는 것이 있습니다.\n\n메소드 제네릭 타입은 Java 언어의 설계 제한을 극복하는 데 도움을 줍니다. 클래스 제네릭 타입을 사용하는 클래스는 무변(invariant)이기 때문에(공변(covariant)이 아님) 메소드 제네릭 타입은 여러 메소드 매개변수 및/또는 반환 타입에 걸쳐 특정 타입을 강제하는 데 매우 유용합니다.\n\n실무에서 무변이 무엇을 의미하는지 예를 들어 설명하자면, List`String`은 String이 Object의 하위 타입이지만 List`Object`의 하위 타입이 아니라는 것입니다. 리스트가 무변이라는 것에 주목할 만한 점은 Java에서 배열은 공변적(covariant)이기 때문에(String[]는 Object[]를 확장합니다) 이 특정 목적을 위해 제네릭 메소드 타입을 사용할 필요가 없다는 것입니다.\n\n다음 코드 스니펫에서 Java의 공변성/무변성 관련하여 어떤 것이 허용되고, 어떤 것이 안 되는지 살펴볼 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_3.png\" />\n\n그래서 요약하면, Java 제네릭의 주요 목적은 개발자가 여러 가지 유형에서 재사용 가능한 코드를 작성하고 일관된 계약(클래스 수준 또는 메소드 수준)을 제공하는 동안 유연하게 작동하도록 하는 것입니다.\n\n## 제한된 제네릭 유형\n\n제네릭 유형은 상한, 하한 또는 명시적 바운드가 없을 수 있습니다(Object가 상한인 경우).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n한계가 없는 제네릭 유형을 탐색해 봅시다. 이 유형들은 어떤 객체 유형이든 가능하게 합니다. 주로 여러 매개변수 및/또는 반환 유형에 동일한 유형을 적용하는 데 사용됩니다. 아래 코드 예제에서 볼 수 있듯이 다른 간단한 동작도 정의할 수 있습니다.\n\n![이미지](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_4.png)\n\n아마도 가장 흔한 제네릭 사용 사례 중 하나는 상위 경계 제네릭 유형을 사용하는 것입니다. 이것은 소개 섹션에서 언급한 \"일반 부모\" 상속 기반 예제입니다. 아래 예제에서 강조되어 있습니다.\n\n![이미지](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n한 번 멈춰서 일반적인 유형이 우리에게 무엇을 하는지 두 가지 관점에서 이해해 봅시다: 호출자의 관점과 구현의 관점에서.\n\n이 API를 사용하는 사용자로서, List`Dog`나 Dog 하위 유형(예: List`GermanSheppard`)을 사용하여 findDogByNameGeneric(...)을 호출할 수 있습니다.\n\n메서드 구현 관점에서는 경계가 있는 일반 유형 `T extends Dog` 가 우리에게 강력한 보증을 제공하는데, 이는 우리가 받는 모든 목록이 요소가 부모 유형 Dog를 공유할 것이라는 것입니다. 이는 목록이 개발자에게 메서드 내에서 사용할 수 있는 요소를 생성할 수 있게 해줍니다(즉, 여기서는 Dog 및 특히 부모 인터페이스에서 정의된 getName()을 호출하는 경우).\n\n상한이 있는 제네릭 유형 목록으로는 요소를 추가할 수 없습니다. 이것을 생각해 보면 이해할 수 있으며, 그 이유를 찾아보는 것은 시간을 들여서 한 번 곰곰히 생각할 가치가 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n[1초 후]\n\n상한이 정의된 제네릭 타입 목록에 요소를 추가할 수 없는 이유는 메서드 구현 내에서 호출된 목록의 실제 타입을 알 수 없기 때문입니다. 아래 예시를 살펴봅시다.\n\n![image](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_6.png)\n\n만약 상한이 정의된 타입에 추가할 수 있다면, List`Double` 입력 매개변수를 사용해 addSomething을 이론적으로 호출할 수 있고, 메서드 내에서 Double 목록에 Integer(또한 Number를 확장한)을 추가할 수 있습니다. 컴파일 시에 메서드가 어떤 타입으로 호출될지 알 수 없기 때문에, 언어가 목록의 타입 무결성을 잠재적으로 위반하지 못하도록 우리를 방해하는 것은 바로 이것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 우리가 일반 형식 소비자에 요소를 전달하려면(컬렉션이어야만 하는 것은 아님), 상위 바운드를 만들기 위해 super 키워드를 사용해야 합니다. 아래의 또 다른 예제를 살펴보고, 이전처럼 API 관점과 구현 관점에서 super가 우리에게 무엇을 보장해주는지 생각해봅시다.\n\n![image](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_7.png)\n\nAPI 관점에서는 populateGermanSheppards 메서드의 두 번째 매개변수는 List`GermanSheppard` 또는 그 상위 형식인 List`Dog`일 수 있습니다. 이게 구현 관점에서 왜 도움이 되는지 생각해 보세요.\n\n[또 다른 시간이 흘렀습니다]\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\npopulateGermanSheppards의 구현 내에서 두 번째 입력 매개변수가 List`GermanSheppard` 또는 List`Dog` 중 하나인 것을 알 수 있습니다. 따라서 해당 목록에 GermanSheppard를 추가해도 목록의 유형 무결성을 위반하지 않습니다. 왜냐하면 입력 매개변수 목록이 List`GermanSheppard`인 경우 GermanSheppard를 추가하는 것이 단순히 유효하며, List`Dog`인 경우 GermanSheppard는 Dog이므로 유형이 여전히 유효합니다. 더불어 부모 클래스에 대해서도 동일한 원리가 적용됩니다.\n\n매번 바운드된 제네릭 유형을 생각할 필요가 없도록, 간단히 PECS라는 머릿글자를 기억하면 됩니다. PECS는 Producer-Extends Consumer-Super의 약자로, 제네릭 메소드를 사용하여 상위 바운드 유형을 가진 요소를 생성/생산하는 요소들을 생산자로 정의합니다.\n\n소비자는 요소를 받아들일 수 있는 능력과 관련이 있습니다. 예를 들어 List의 add 메소드는 요소를 받아들일 수 있기 때문에 소비자이며, 목록의 제네릭 유형을 소비자-슈퍼로 제한할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지금까지 우리가 논의한 것은 단순한 기본 구성 요소로, Java에서 일반적인 타입이 어떻게 실제로 작동하는지의 기본 설명입니다. 더 많은 내용이 있으며, 와일드카드 및 타입 이레이저에 대해 약간 읽어보고, 컬렉션을 중심으로하지 않는 더 많은 예시(예: Optional)를 살펴보면 일반 타입에 대해 더 익숙해질 수 있습니다.\n\n그러나 순수 일반 타입을 강조하는 좋은 예제를 제공하기가 어려운데, 적어도 내게는 이러한 타입의 가장 크고 일반적으로 사용되는 장점은 함수형 인터페이스와 결합될 때입니다. 이에 대해 더 자세히 알아보겠습니다.\n\n# 함수형 인터페이스 기본 사항\n\n함수형 인터페이스는 재사용 가능한 코드를 작성할 때 우리가 가진 도구 중 하나입니다. 또한 좋은 개발자 경험을 제공하는 유연한 API를 구축하고 싶다면 바운드된 제네릭 타입을 사용하여 개선할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이론적으로 함수형 인터페이스는 오직 하나의 비디폴트 메소드만 가진 인터페이스를 말합니다(즉, 구현이 없는 메소드가 하나뿐인 경우). 이러한 인터페이스들은 Java 유형을 제공하고 람다 표현식이나 메소드 참조 같은 호출 가능한 코드 조각을 참조하는 데 사용됩니다. 이러한 참조를 다른 객체 유형처럼 사용할 수 있게 해줍니다. 함수를 참조할 수 있고, 호출하지 않고 다른 함수에 전달할 수 있습니다.\n\nJava 8부터 Java JDK 내에 여러 유형의 함수형 인터페이스가 있습니다. 가장 기본적인 것은 Function`T, R`입니다. 이는 입력 T 집합을 가져와 R 집합의 결과를 출력하는 수학 함수와 동등합니다. 다만 여기서는 유형 인스턴스를 다루고 있을 뿐입니다. 함수형 프로그래밍에서는 이를 펑터라고도 부릅니다.\n\n함수 외에도 다음과 같이 계속해서 사용되는 함수형 인터페이스 유형들이 있습니다(그들의 Bi[…]variant인 BiFunction`T, U, R`와 함께), 이미 알고 계신지 모르겠지만 익숙해지기를 권장드립니다:\n\n- Predicate`T`: Function`T, Boolean`와 같은 역할을 합니다.\n- Consumer`T`: T형 인자를 가지고 void(아무것도)를 반환하는 함수를 나타냅니다.\n- Supplier`T`: 어떠한 인자도 받지 않고 T 유형 원소를 반환하는 함수를 나타냅니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 많은 작업을 수행할 수 있는 메소드의 예시를 살펴봅니다. 원리적으로는 리스트의 요소를 반복하고 특정 조건에서 특정 작업을 수행합니다. 메소드 자체에서는 구체적인 내용은 정의되어 있지 않으며, 이는 꽤 추상적입니다.\n\n![이미지](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_8.png)\n\n추가로, 제 개인적인 의견으로는 함수형 인터페이스를 사용하여 지나치게 추상화된 일반적인 함수를 작성하는 것도 코드 재사용성을 위해 코드 가독성을 너무 희생하는 경우 반대 패턴으로 간주해야 한다고 생각합니다. 둘 사이에는 균형이 필요하며, 재사용 가능한 일반적인 메소드에서 구체적이고 정당화할 수 있는 문제를 해결하도록 노력해야 합니다.\n\n조건부 요소 소비자(conditionalElementsConsumer) 메소드 시그니처가 어떻게 보일지 생각해 보세요. 일반적인 타입을 완화하고 한정적인(혹은 제한된) 일반적인 타입을 사용한다면 어떨까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n[a second of thinking passes]\n\nPECS 약자에 대해 간단히 생각해 보면, 느슨한 서명은 다음 예시와 같은 형태여야 합니다.\n\n![이미지](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_9.png)\n\n새 예시에서 이전의 제한된 제네릭 유형이 새로운 케이스를 지원하기에 충분히 유연하지 못했음을 알 수 있습니다. 이 간단한 기능 인터페이스를 사용해 개념을 설명하고 있지만, 실제 프로젝트에서는 타입이 일치하도록 바꿀 수 없는 서드파티 코드의 메서드 참조와 유사한 상황을 마주하게 될 수 있습니다. 경계를 통해 제네릭 유형을 느슨하게 처리하면 이를 해결하는 데 도움이 될 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 지점에서 또 다른 좋은 연습은 위의 예제를 생각하고 152번 라인에서 컴파일 되는 메소드 호출의 실제 T 유형을 파악해 보는 것입니다.\n\n함수형 인터페이스의 기본을 더 깊이 들어가지는 않겠습니다. 다양한 다른 유형에 대해 이야기하는 많은 기사들과 람다 표현식, 메소드 참조에 대해 참조할 수 있는 함수형 인터페이스 유형도 있습니다.\n\n그러나 이러한 기본 개념을 조합하여 실제 유용한 재사용 가능한 코드를 만들 수 있는 방법을 강조하는 데는 조금 더 나아갈 것입니다.\n\n# 고차 함수를 통한 데코레이터\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n고차 함수는 다른 함수를 매개변수로 받거나 함수를 반환하는 함수형 프로그래밍 개념을 나타냅니다.\n\n이를 생각하면, 실제로 호출하지 않고 일반 함수를 래핑하는 데코레이터와 유사한 디자인 패턴을 이론적으로 정의할 수 있습니다.\n\n많이 접하게 되는 예시 중 하나는 확인된 예외를 throw하는 함수를 처리하는 것입니다. 이는 특히 Stream API 메소드 호출 내에서 문제가 될 수 있습니다. Stream API 메소드는 예외를 throw하지 않는 함수형 인터페이스를 입력 매개변수로 사용하기 때문입니다. 물론 Vavr과 같은 라이브러리를 사용할 수도 있지만, 사용 사례가 제한적이고 종속성 목록을 작게 유지하고 싶다면 직접 래퍼/핸들러를 구축하는 것이 더 나은 옵션이 될 수 있습니다. 아래 예시에서 (인기 있는) 상황을 확인해보세요.\n\n![이미지](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_10.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저, 위의 코드에서 발생한 컴파일 오류는 map 메서드에서 예상되는 메서드 시그니처 (즉, Function`T, R`)와 제공된 함수가 String을 가져와 List`String`을 반환하거나 IO Exception을 던질 수 있는 함수임을 고려할 때 발생합니다 (이러한 의미로는 JDK에 기본적으로 해당 함수형 인터페이스가 없음).\n\n이러한 유형의 불일치를 다루는 비제네릭하고 간단한 방법은 발생한 예외를 별도의 메서드로 분리하여 거기서 예외를 처리하는 것입니다. 이렇게 하면 사실상 Stream::map 메서드에 대해 Function`String, List`String`` 입력 매개변수로 변환될 것이며 이는 컴파일이 될 것입니다. 그러나 제네릭 및 함수 인터페이스를 통해 코드 재사용할 수 있는 큰 기회가 있다는 것을 다음 예제에서 확인할 수 있습니다.\n\n![Example](/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_11.png)\n\n위의 코드 예제를 조금 설명해보겠습니다. 먼저, 제시된 3가지 옵션 중 어느 것을 사용하더라도 더 이상 컴파일 오류가 발생하지 않음을 관찰할 수 있습니다. 이제 map 메서드는 호출 시 예상대로 Function`Path, List`String``를 받는다고 볼 수 있는 mapSafeFunction을 수신하며, 또한 ExceptionalFunction 인터페이스를 정의할 때 코드가 완벽하게 컴파일되고 Files::readAllLines 메서드 참조가 어떤 컴파일 오류도 없이 허용됩니다. 즉, 이 문제는 예외 처리가 되지 않았던 것이 아니라 함수형 인터페이스 타입이 일치하지 않았기 때문임을 결론짓습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n수학 함수에 대해 생각해보면, 입력을 받아 출력을 제공하며 예외를 throw하지 않습니다. 마찬가지로 여기서는 예외를 throw하는 함수를 throw하지 않는 함수로 변환하려고 합니다. 그렇다면 예외가 발생했을 때 어떻게 해야 할까요?\n\n이것은 완전히 개인적인 선택이었지만, 예외가 발생한 경우 결과가 없을 수도 있다는 사실을 나타내기 위해 생성된 함수가 Optional을 반환하도록 만들기를 원했습니다. 이것이 ExceptionalFunction`T, R`의 입력에 대한 반환 타입이 Function`T, Optional`R``로 되어 있는 이유입니다. 이전 Optional::map 작업이 flatmap 작업으로 변경되어 코드 전체에 매우 잘 맞는 점에 주목하면 좋습니다(Javadoc 여기를 참조하세요). 예외가 발생하면 Optional 체인이 빈 결과를 제공하며 코드는 전반적으로 매우 깨끗하고 순조롭게 따라갈 수 있습니다.\n\n(부기적으로, 예외를 완전히 억제하거나 런타임 예외로 다시 던지거나 null을 반환하는 API 디자인 선택은 개발자 경험 관점에서 객관적으로 잘못된 접근법이라고 생각합니다. 주된 주장은 계약이 그냥 틀렸다는 것이며, 예기치 않은 동작이 API를 통해 추론될 수 없다는 점이며, 코드를 읽어야만 이해할 수 있다는 것입니다.)\n\nmapSafeFunction의 구현은 Files::readAllLines 또는 예외를 throw하는 기타 함수에 적용할 수 있습니다. 이 메서드는 전체 프로젝트 전반에 걸쳐 매우 재사용 가능하며 해결하는 문제가 매우 인기가 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n메소드 mapSafeFunction의 구현은 특별하거나 복잡한 것은 없습니다. 우리는 예외 처리 함수를 가져와 try/catch 예외 처리 논리를 처리하고 원래 함수를 호출하는 함수를 반환합니다. 추가적으로 Consumer`Exception`은 예외 로깅이나 처리 논리를 다루기 위한 유연한 API를 제공합니다. 호출자가 slf4j를 사용하여 예외를 로깅하거나, 콘솔에 로깅하거나, 소비자 내에서 런타임 예외를 다시 던지는 것을 막는 것은 없습니다. 이 방법은 덜 번거롭고 명시적이지 않은 API에 기본값을 제공하기위해 의도적으로 오버로드되었습니다.\n\n동일한 패턴에 대한 유사한 사용 사례는 트랜잭션 관리 일 수도 있습니다. 함수가 호출되기 전에 트랜잭션을 시작하고, 끝에서 커밋하거나 예외가 발생했을 경우 롤백하는 전반적인 개념은 동일합니다.\n\n# 결론\n\n함수형 프로그래밍(또는 단순히 Java Stream API)을 이해하려면 함수형 인터페이스를 이해해야 하며, 이는 다시 제네릭 유형에 의존합니다. 이러한 주제들은 서로 긴밀하게 연결되어 있으며, 개인적인 관찰에 따르면 후자는 종종 간과됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기사의 개념들은 하나씩 쉽게 이해할 수 있지만 함께 사용하면 사용할 수 있는 코드가 매우 재사용 가능하다는 것을 알 수 있습니다, 특히 예외 기능 데코레이터의 예시에서 확인할 수 있습니다. 더 많은 응용 프로그램이 있으며, 이 중 한 가지가 제 개인적인 취향입니다.\n\n이 기사가 유익했고 이러한 개념을 실험하고 일상 프로젝트에 적용해 보는 호기심을 자극했기를 바랍니다. 이러한 기본적인 자바 개념은 자바에서 함수형 프로그래밍 패턴을 배우는 데 필요한 기본 블록으로 기능하지만, 이에 대해 더 알아보도록 하겠습니다.\n\n향후 자바 개념 설명, 프레임워크 및 기타 기술 관련 콘텐츠에 구독하고 좋아요를 눌러주시기 바랍니다!\n","ogImage":{"url":"/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_0.png"},"coverImage":"/assets/img/2024-06-19-PolymorphicfunctionsusingJavagenerics_0.png","tag":["Tech"],"readingTime":15}],"page":"36","totalPageCount":119,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":1},"__N_SSG":true}