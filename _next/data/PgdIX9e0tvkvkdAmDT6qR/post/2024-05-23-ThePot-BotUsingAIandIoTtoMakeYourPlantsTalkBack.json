{"pageProps":{"post":{"title":"더 나은 식물 생장을 위해 인공지능과 사물인터넷을 활용해 보세요","description":"","date":"2024-05-23 16:17","slug":"2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack","content":"\n만약 꽃병이 말할 수 있다면 어떨까요? 인공 지능과 Raspberry Pi의 마법을 활용하면 이제 가능합니다! 식물 화분에게 말을 건네는 방법을 알려드릴게요.\n\n![화분이 말하는 Pot-Bot](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png)\n\n# 계획\n\n프로젝트의 핵심은 Raspberry Pi로 이루어진 것입니다. 화분 내 센서에서 정보를 수집하고, 이 데이터는 Python 코드를 사용하여 처리됩니다. 센서의 정보를 가볍고 Tiny Dolphin이라는 모델로 변환한 후 이를 장치 내에서 실행되는 espeak로 전송합니다. 그리고 Tiny Dolphin에서 나온 출력은 화분 옆의 Bluetooth 연결 스피커로 전송됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_1.png)\n\nWhat you will need:\n- Raspberry Pi, and the knowledge to SSH into it.\n- Moisture sensor.\n- Jumper wires.\n- Bluetooth speaker or 3.5mm jack speaker.\n- A pot.\n\n# Preparing the Environment\n\n\n<div class=\"content-ad\"></div>\n\n첫째로, Raspberry Pi를 업그레이드하세요:\n\n```js\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n다음으로, LLM 모델을 관리하는 Ollama를 설치해보겠습니다. Ollama는 로컬 모델을 손쉽게 설치할 수 있습니다:\n\n```js\ncurl -fsSL https://ollama.com/install.sh | sh\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_2.png\" />\n\n설치가 완료된 후, Ollama 웹사이트에서 Tiny Dolphin 모델을 선택하세요. 이 모델은 가벼우면서 우리의 요구에 적합합니다:\n\n```js\nollama run tinydolphin\n```\n\n\"Send a message (/? for help)\"가 나타나면 모델이 준비된 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Image 1](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_3.png)\n\n# Raspberry Pi 스피커 연결\n\n3.5mm 케이블이나 블루투스를 사용하여 스피커를 연결할 수 있습니다.\n\n![Image 2](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_4.png)\n\n\n<div class=\"content-ad\"></div>\n\n## 블루투스 연결 설정\n\nRaspberry Pi 3과 4에는 내장 블루투스가 있습니다. 연결 관리를 위해 `bluetoothctl`을 사용하실 수 있어요:\n\n1. 블루투스 콘솔 열기:\n\n```js\nbluetoothctl;\n```\n\n2. 장치 검색:\n\n<div class=\"content-ad\"></div>\n\n```js\nscan on\n```\n\n<img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_5.png\" />\n\n3. 스피커를 찾아 페어링하세요 (예: Mi Portable Speaker):\n\n```js\npair 4C:65:A8:5E:CE:95\nconnect 4C:65:A8:5E:CE:95\ntrust 4C:65:A8:5E:CE:95\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_6.png\" />\n\n## 오디오 스트리밍 설정\n\nPulseAudio와 pacmd가 설치되어 있는지 확인하세요:\n\n```js\npulseaudio - version;\npacmd - version;\n```\n\n<div class=\"content-ad\"></div>\n\n블루투스 스피커를 기본 오디오 출력 장치로 설정해보세요:\n\n```js\npacmd list-sinks | grep -E 'name:|index'\npacmd set-default-sink bluez_sink.4C_65_A8_5E_CE_95.a2dp_sink\n```\n\n.wav 파일로 테스트해보세요:\n\n```js\nwget https://freewavesamples.com/files/Police-Siren.wav\naplay Police-Siren.wav\n```\n\n<div class=\"content-ad\"></div>\n\n# 텍스트 음성 변환기 설치하기\n\nespeak 모듈을 설치하고 테스트해보세요:\n\n```js\nsudo apt-get install espeak\nespeak \"hello\"\n```\n\n# 모든 것을 함께 적용하기\n\n<div class=\"content-ad\"></div>\n\n프로젝트 폴더와 `index.py` 파일을 만들어주세요. 이 스크립트는 CPU 온도를 읽고 Tiny Dolphin에 프롬프트를 보내며 응답을 음성으로 변환합니다.\n\n```python\nimport os\nimport time\nimport subprocess\nimport json\n\ndef get_cpu_temperature():\n    \"\"\"시스템 파일에서 CPU 온도를 읽어옵니다.\"\"\"\n    with open(\"/sys/class/thermal/thermal_zone0/temp\", \"r\") as file:\n        temp = float(file.read()) / 1000\n    return temp\n\ndef run_command(command):\n    \"\"\"시스템 명령을 실행하고 결과를 반환합니다.\"\"\"\n    result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    return result.stdout.strip()\n\ndef main():\n    while True:\n        temp = get_cpu_temperature()\n        message = f\"CPU 온도에 관한 10단어 메시지를 작성하세요: {temp} 섭씨\"\n        print(\"메시지를 API로 전송합니다\")\n        print(message)\n        # POST 요청을 보내기 위한 curl 명령어 작성\n        curl_command = f\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\"model\\\": \\\"tinydolphin\\\", \\\"prompt\\\": \\\"{message}\\\", \\\"stream\\\": false}}'\"\n        print(\"curl 명령어 실행 중...\")\n        print(curl_command)\n        curl_output = run_command(curl_command)\n        print(f\"Curl 출력: {curl_output}\")\n        try:\n            # JSON 응답을 파싱하여 응답 속성을 가져옴\n            json_response = json.loads(curl_output)\n            ollama_output = json_response['response']\n            print(f\"API 응답: {ollama_output}\")\n        except json.JSONDecodeError:\n            ollama_output = \"JSON 응답을 해독하는데 실패했습니다.\"\n            print(ollama_output)\n        except KeyError:\n            ollama_output = \"JSON 응답에서 'response' 키가 누락되었습니다.\"\n            print(ollama_output)\n\n        # ollama 실행 결과를 음성으로 출력\n        os.system(f\"espeak '{ollama_output}'\")\n        time.sleep(120)  # 120초 동안 대기\n\nif __name__ == \"__main__\":\n    main()\n```\n\n이 코드를 실행하면 모든 것이 연결되어 작동하는지 확인할 수 있습니다. 현재 LLM이 CPU 온도에 대해 이야기하고 있습니다. 더 흥미로운 내용일 수 있겠지만, 이겁니다만 말하는 식물이 아니라 중요한 이정표입니다. 모든 것이 작동하나요? 멋져요!\n\n# 센서 연결하기\n\n<div class=\"content-ad\"></div>\n\n라즈베리 파이의 GPIO에 직접 센서를 연결하여 냄비가 CPU 온도가 아닌 자신에 대해 이야기하도록 설정해보세요.\n\nGPIO를 사용하면 다양한 센서로부터 입력을 받아 라즈베리 파이를 실제 IoT 장치로 만들 수 있습니다. 우리는 라즈베리 파이 핀배치도를 사용하여 다양한 종류의 GPIO를 확인합니다. 예를 들어, 이 핀배치도에서 5V 전원 핀과 GND 핀을 표시했습니다.\n\n[이미지: \"2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_7.png\"]\n\n이제 습도 센서를 연결해보겠습니다. 많은 온라인 상점에서 구할 수 있습니다. 디지털 센서가 필요하며, 더 쉽고 테스트하기 편한 워터 센서를 사용할 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_8.png)\n\nThere should be three pins with VCC, GND, and DO—if there are four pins (with AO), it`s OK, but disregard the DO.\n\n![image](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_9.png)\n\nLet`s connect the jumpers. You should connect the GND to the ground pin, the VCC to the 3V outlet, and the DO to GPIO17.\n\n\n<div class=\"content-ad\"></div>\n\n지금 테스트해보세요: 이 Python 코드를 temp.py 파일로 작성하고 \"python3 temp.py\"로 실행하세요.\n\n```python\nimport RPi.GPIO as GPIO\nimport time\n\n# 설정\nsensor_pin = 17\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(sensor_pin, GPIO.IN)\n\ntry:\n    while True:\n        if GPIO.input(sensor_pin):\n            print(\"물 감지됨!\")\n        else:\n            print(\"물이 감지되지 않았습니다.\")\n        time.sleep(1)  # 1초마다 읽기\n\nfinally:\n    GPIO.cleanup()  # GPIO 정리하여 모드 재설정\n```\n\n이제 센서를 물잔에 넣어봐서 콘솔에 \"물 감지됨!\"이 출력되는지 확인해보세요.\n\n![이미지](/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_10.png)\n\n<div class=\"content-ad\"></div>\n\n더 많은 센서를 연결할 수 있어요. 연결할수록 식물이 더 많은 데이터를 가지고, 환경에 대해 더 나은 대응을 할 거예요. 하지만 지금은 물 센서로만 진행하죠.\n\n식물을 만들어 봐요!\n\n이제 LLM, 텍스트 음성 변환, 그리고 센서가 모두 준비되었으니, 모두 연결해보는 시간이에요! 센서 데이터를 받아와 LLM으로 전송하고, 식물처럼 동작하도록 만들고, 그 상태를 토론해봅시다.\n\n```python\nimport os\nimport time\nimport subprocess\nimport RPi.GPIO as GPIO\nimport json\n\n# GPIO 설정\nsensor_pin = 17  # 연결에 따라 변경 가능\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(sensor_pin, GPIO.IN)\n\ndef run_command(command):\n    \"\"\"시스템 명령을 실행하고 결과를 반환합니다.\"\"\"\n    result = subprocess.run(command, shell=True, capture_output=True, text=True)\n    return result.stdout.strip()\n\ndef main():\n    try:\n        while True:\n            if GPIO.input(sensor_pin):\n                message = \"당신은 모세라고 불리우는 행복한 식물이에요. 10개의 단어로 설명해 주세요.\"\n            else:\n                message = \"당신은 모세라고 불리우는 목말라 하는 식물이에요. 10개의 단어로 불평해 주세요.\"\n            print(\"메시지를 API를 통해 실행 중\")\n            print(message)\n            # POST 요청을 보내기 위한 curl 명령 구성\n            curl_command = f\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\"model\\\": \\\"tinydolphin\\\", \\\"prompt\\\": \\\"{message}\\\", \\\"stream\\\": false}}'\"\n            print(\"curl 명령 실행 중...\")\n            print(curl_command)\n            curl_output = run_command(curl_command)\n            print(f\"Curl 결과: {curl_output}\")\n            try:\n                # JSON 결과를 파싱하여 응답 속성을 가져옴\n                json_response = json.loads(curl_output)\n                api_output = json_response['response']\n                print(f\"API 응답: {api_output}\")\n            except json.JSONDecodeError:\n                api_output = \"JSON 응답을 디코딩하는 데 실패했어요.\"\n                print(api_output)\n            except KeyError:\n                api_output = \"JSON 응답에서 'response' 키가 누락되었어요.\"\n                print(api_output)\n\n            # API 출력을 음성으로 출력\n            os.system(f\"espeak \\\"{api_output}\\\"\")\n            time.sleep(120)  # 매 2분마다 확인\n    finally:\n        GPIO.cleanup()  # GPIO 정리하여 모드 재설정\n\nif __name__ == \"__main__\":\n    main()\n```\n\n<div class=\"content-ad\"></div>\n\n그리고... 말합니다!\n\n# 결론\n\n이 설정으로 여러분의 식물 화분이 AI와 IoT를 이용하여 의사소통할 수 있습니다. 프롬프트를 개인 맞춤화하거나 더 많은 센서로 상호작용을 향상시키기 위해 스크립트를 수정해보세요. 가능성은 무한합니다. 옆에 누군가 있을 때만 말을 할 수 있도록 근접 센서를 추가할 수도 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png"},"coverImage":"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"만약 꽃병이 말할 수 있다면 어떨까요? 인공 지능과 Raspberry Pi의 마법을 활용하면 이제 가능합니다! 식물 화분에게 말을 건네는 방법을 알려드릴게요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_0.png\",\n        alt: \"화분이 말하는 Pot-Bot\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"계획\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"프로젝트의 핵심은 Raspberry Pi로 이루어진 것입니다. 화분 내 센서에서 정보를 수집하고, 이 데이터는 Python 코드를 사용하여 처리됩니다. 센서의 정보를 가볍고 Tiny Dolphin이라는 모델로 변환한 후 이를 장치 내에서 실행되는 espeak로 전송합니다. 그리고 Tiny Dolphin에서 나온 출력은 화분 옆의 Bluetooth 연결 스피커로 전송됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_1.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"What you will need:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Raspberry Pi, and the knowledge to SSH into it.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Moisture sensor.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Jumper wires.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Bluetooth speaker or 3.5mm jack speaker.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A pot.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Preparing the Environment\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"첫째로, Raspberry Pi를 업그레이드하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"sudo apt-get update\\nsudo apt-get upgrade\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로, LLM 모델을 관리하는 Ollama를 설치해보겠습니다. Ollama는 로컬 모델을 손쉽게 설치할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"curl -fsSL \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//ollama.com/install.sh | sh\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_2.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"설치가 완료된 후, Ollama 웹사이트에서 Tiny Dolphin 모델을 선택하세요. 이 모델은 가벼우면서 우리의 요구에 적합합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"ollama run tinydolphin\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"Send a message (/? for help)\\\"가 나타나면 모델이 준비된 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_3.png\",\n        alt: \"Image 1\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Raspberry Pi 스피커 연결\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"3.5mm 케이블이나 블루투스를 사용하여 스피커를 연결할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_4.png\",\n        alt: \"Image 2\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"블루투스 연결 설정\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Raspberry Pi 3과 4에는 내장 블루투스가 있습니다. 연결 관리를 위해 \", _jsx(_components.code, {\n        children: \"bluetoothctl\"\n      }), \"을 사용하실 수 있어요:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"블루투스 콘솔 열기:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"bluetoothctl;\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"장치 검색:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"scan on\\n\"\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_5.png\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"스피커를 찾아 페어링하세요 (예: Mi Portable Speaker):\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"pair 4\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"C\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"65\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"A8\"\n        }), \":5\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"E\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"CE\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"95\"\n        }), \"\\nconnect 4\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"C\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"65\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"A8\"\n        }), \":5\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"E\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"CE\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"95\"\n        }), \"\\ntrust 4\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"C\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"65\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"A8\"\n        }), \":5\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"E\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"CE\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"95\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_6.png\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"오디오 스트리밍 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"PulseAudio와 pacmd가 설치되어 있는지 확인하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"pulseaudio - version;\\npacmd - version;\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"블루투스 스피커를 기본 오디오 출력 장치로 설정해보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"pacmd list-sinks | grep -E \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'name:|index'\"\n        }), \"\\npacmd set-\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \"-sink bluez_sink.4C_65_A8_5E_CE_95.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"a2dp_sink\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \".wav 파일로 테스트해보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"wget \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//freewavesamples.com/files/Police-Siren.wav\"\n        }), \"\\naplay \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Police\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Siren\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"wav\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"텍스트 음성 변환기 설치하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"espeak 모듈을 설치하고 테스트해보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"sudo apt-get install espeak\\nespeak \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"hello\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"모든 것을 함께 적용하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"프로젝트 폴더와 \", _jsx(_components.code, {\n        children: \"index.py\"\n      }), \" 파일을 만들어주세요. 이 스크립트는 CPU 온도를 읽고 Tiny Dolphin에 프롬프트를 보내며 응답을 음성으로 변환합니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" os\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" time\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" subprocess\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" json\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_cpu_temperature\"\n        }), \"():\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\\\"시스템 파일에서 CPU 온도를 읽어옵니다.\\\"\\\"\\\"\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"with\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"open\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/sys/class/thermal/thermal_zone0/temp\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"r\\\"\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" file:\\n        temp = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"float\"\n        }), \"(file.read()) / \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" temp\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"run_command\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"command\"\n        }), \"):\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\\\"시스템 명령을 실행하고 결과를 반환합니다.\\\"\\\"\\\"\"\n        }), \"\\n    result = subprocess.run(command, shell=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \", capture_output=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \", text=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" result.stdout.strip()\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"():\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \":\\n        temp = get_cpu_temperature()\\n        message = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"CPU 온도에 관한 10단어 메시지를 작성하세요: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{temp}\"\n          }), \" 섭씨\\\"\"]\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"메시지를 API로 전송합니다\\\"\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(message)\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# POST 요청을 보내기 위한 curl 명령어 작성\"\n        }), \"\\n        curl_command = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\\\\\"model\\\\\\\": \\\\\\\"tinydolphin\\\\\\\", \\\\\\\"prompt\\\\\\\": \\\\\\\"\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{message}\"\n          }), \"\\\\\\\", \\\\\\\"stream\\\\\\\": false}}'\\\"\"]\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"curl 명령어 실행 중...\\\"\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(curl_command)\\n        curl_output = run_command(curl_command)\\n        \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"Curl 출력: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{curl_output}\"\n          }), \"\\\"\"]\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \":\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# JSON 응답을 파싱하여 응답 속성을 가져옴\"\n        }), \"\\n            json_response = json.loads(curl_output)\\n            ollama_output = json_response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'response'\"\n        }), \"]\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"API 응답: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{ollama_output}\"\n          }), \"\\\"\"]\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"except\"\n        }), \" json.JSONDecodeError:\\n            ollama_output = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"JSON 응답을 해독하는데 실패했습니다.\\\"\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(ollama_output)\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"except\"\n        }), \" KeyError:\\n            ollama_output = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"JSON 응답에서 'response' 키가 누락되었습니다.\\\"\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(ollama_output)\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# ollama 실행 결과를 음성으로 출력\"\n        }), \"\\n        os.system(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"espeak '\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{ollama_output}\"\n          }), \"'\\\"\"]\n        }), \")\\n        time.sleep(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"120\"\n        }), \")  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 120초 동안 대기\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" __name__ == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"__main__\\\"\"\n        }), \":\\n    main()\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드를 실행하면 모든 것이 연결되어 작동하는지 확인할 수 있습니다. 현재 LLM이 CPU 온도에 대해 이야기하고 있습니다. 더 흥미로운 내용일 수 있겠지만, 이겁니다만 말하는 식물이 아니라 중요한 이정표입니다. 모든 것이 작동하나요? 멋져요!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"센서 연결하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라즈베리 파이의 GPIO에 직접 센서를 연결하여 냄비가 CPU 온도가 아닌 자신에 대해 이야기하도록 설정해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GPIO를 사용하면 다양한 센서로부터 입력을 받아 라즈베리 파이를 실제 IoT 장치로 만들 수 있습니다. 우리는 라즈베리 파이 핀배치도를 사용하여 다양한 종류의 GPIO를 확인합니다. 예를 들어, 이 핀배치도에서 5V 전원 핀과 GND 핀을 표시했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"[이미지: \\\"2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_7.png\\\"]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 습도 센서를 연결해보겠습니다. 많은 온라인 상점에서 구할 수 있습니다. 디지털 센서가 필요하며, 더 쉽고 테스트하기 편한 워터 센서를 사용할 수도 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_8.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There should be three pins with VCC, GND, and DO—if there are four pins (with AO), it`s OK, but disregard the DO.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_9.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let`s connect the jumpers. You should connect the GND to the ground pin, the VCC to the 3V outlet, and the DO to GPIO17.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금 테스트해보세요: 이 Python 코드를 temp.py 파일로 작성하고 \\\"python3 temp.py\\\"로 실행하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" RPi.GPIO \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" GPIO\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" time\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 설정\"\n        }), \"\\nsensor_pin = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"17\"\n        }), \"\\nGPIO.setmode(GPIO.BCM)\\nGPIO.setup(sensor_pin, GPIO.IN)\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \":\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \":\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" GPIO.\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"(sensor_pin):\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"물 감지됨!\\\"\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \":\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"물이 감지되지 않았습니다.\\\"\"\n        }), \")\\n        time.sleep(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \")  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 1초마다 읽기\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"finally\"\n        }), \":\\n    GPIO.cleanup()  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# GPIO 정리하여 모드 재설정\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 센서를 물잔에 넣어봐서 콘솔에 \\\"물 감지됨!\\\"이 출력되는지 확인해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ThePot-BotUsingAIandIoTtoMakeYourPlantsTalkBack_10.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 많은 센서를 연결할 수 있어요. 연결할수록 식물이 더 많은 데이터를 가지고, 환경에 대해 더 나은 대응을 할 거예요. 하지만 지금은 물 센서로만 진행하죠.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"식물을 만들어 봐요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 LLM, 텍스트 음성 변환, 그리고 센서가 모두 준비되었으니, 모두 연결해보는 시간이에요! 센서 데이터를 받아와 LLM으로 전송하고, 식물처럼 동작하도록 만들고, 그 상태를 토론해봅시다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" os\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" time\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" subprocess\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" RPi.GPIO \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" GPIO\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" json\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# GPIO 설정\"\n        }), \"\\nsensor_pin = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"17\"\n        }), \"  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 연결에 따라 변경 가능\"\n        }), \"\\nGPIO.setmode(GPIO.BCM)\\nGPIO.setup(sensor_pin, GPIO.IN)\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"run_command\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"command\"\n        }), \"):\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\\\"시스템 명령을 실행하고 결과를 반환합니다.\\\"\\\"\\\"\"\n        }), \"\\n    result = subprocess.run(command, shell=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \", capture_output=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \", text=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" result.stdout.strip()\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"():\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \":\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"True\"\n        }), \":\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" GPIO.\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"input\"\n        }), \"(sensor_pin):\\n                message = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"당신은 모세라고 불리우는 행복한 식물이에요. 10개의 단어로 설명해 주세요.\\\"\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \":\\n                message = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"당신은 모세라고 불리우는 목말라 하는 식물이에요. 10개의 단어로 불평해 주세요.\\\"\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"메시지를 API를 통해 실행 중\\\"\"\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(message)\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# POST 요청을 보내기 위한 curl 명령 구성\"\n        }), \"\\n            curl_command = \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"curl -s http://localhost:11434/api/generate -H 'Content-Type: application/json' -d '{{\\\\\\\"model\\\\\\\": \\\\\\\"tinydolphin\\\\\\\", \\\\\\\"prompt\\\\\\\": \\\\\\\"\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{message}\"\n          }), \"\\\\\\\", \\\\\\\"stream\\\\\\\": false}}'\\\"\"]\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"curl 명령 실행 중...\\\"\"\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(curl_command)\\n            curl_output = run_command(curl_command)\\n            \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"Curl 결과: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{curl_output}\"\n          }), \"\\\"\"]\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \":\\n                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# JSON 결과를 파싱하여 응답 속성을 가져옴\"\n        }), \"\\n                json_response = json.loads(curl_output)\\n                api_output = json_response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'response'\"\n        }), \"]\\n                \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"API 응답: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{api_output}\"\n          }), \"\\\"\"]\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"except\"\n        }), \" json.JSONDecodeError:\\n                api_output = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"JSON 응답을 디코딩하는 데 실패했어요.\\\"\"\n        }), \"\\n                \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(api_output)\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"except\"\n        }), \" KeyError:\\n                api_output = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"JSON 응답에서 'response' 키가 누락되었어요.\\\"\"\n        }), \"\\n                \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(api_output)\\n\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# API 출력을 음성으로 출력\"\n        }), \"\\n            os.system(\", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"f\\\"espeak \\\\\\\"\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"{api_output}\"\n          }), \"\\\\\\\"\\\"\"]\n        }), \")\\n            time.sleep(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"120\"\n        }), \")  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 매 2분마다 확인\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"finally\"\n        }), \":\\n        GPIO.cleanup()  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# GPIO 정리하여 모드 재설정\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" __name__ == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"__main__\\\"\"\n        }), \":\\n    main()\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고... 말합니다!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 설정으로 여러분의 식물 화분이 AI와 IoT를 이용하여 의사소통할 수 있습니다. 프롬프트를 개인 맞춤화하거나 더 많은 센서로 상호작용을 향상시키기 위해 스크립트를 수정해보세요. 가능성은 무한합니다. 옆에 누군가 있을 때만 말을 할 수 있도록 근접 센서를 추가할 수도 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}