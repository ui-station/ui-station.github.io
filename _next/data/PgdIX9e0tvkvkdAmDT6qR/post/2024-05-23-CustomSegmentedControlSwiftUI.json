{"pageProps":{"post":{"title":"사용자 정의 Segmented Control  SwiftUI","description":"","date":"2024-05-23 13:08","slug":"2024-05-23-CustomSegmentedControlSwiftUI","content":"\n이 기사에서는 SwiftUI 프레임워크 내에서 사용자 정의 디자인을 적용한 Segmented Control 예제를 찾을 수 있습니다. 이 방법은 애플리케이션에 특별히 디자인된 Segmented Control을 사용자화합니다.\n\n![Custom Segmented Control Example](/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png)\n\n# Segmented Controls\n\n애플 사전적 정의에 따르면 Segmented Control은 두 개 이상의 세그먼트로 구성된 일련의 요소로, 각각 버튼의 역할을 합니다. Segmented Control 내에서 모든 세그먼트는 일반적으로 동일한 너비를 갖고 있습니다. 버튼과 같이 세그먼트에는 텍스트나 이미지가 포함될 수 있습니다. 세그먼트 아래에 텍스트 레이블을 가질 수도 있습니다(또는 제어 전체 아래에). Segmented Control은 단일 선택 또는 다중 선택을 제공할 수 있습니다. (1).\n\n<div class=\"content-ad\"></div>\n\nSwiftUI 라이브러리에서는 Segmented, UIKit 프레임워크에서는 UISegmentedControl라고 해요.\n\n# 사용자 정의 세그먼트 컨트롤\n\n앱의 테마에 맞게 디자인하려면 아래 방법을 따라주세요.\n\n이번에는 두 개의 요소로 구성된 세그먼트 컨트롤을 디자인하겠습니다. 이를 위해 0과 1로 구성된 enum 타입으로 관리할 거에요.\n\n<div class=\"content-ad\"></div>\n\n```js\n// 0 : 카메라\n// 1 : 사진 라이브러리\n```\n\n아래는 디자인 출력입니다. 그에 따라 개발되었습니다. ⬇️\n\n<img src=\"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_1.png\" />\n\n```js\nimport Foundation\nimport SwiftUI\n\nstruct CustomSegmentedControl: View {\n    @Binding var preselectedIndex: Int\n    var options: [String]\n    // 이 색상은 테마 라이브러리에서 가져온 것입니다\n    let color = ThemeManager.shared.currentTheme.currentPallet.secondary\n\n    var body: some View {\n        HStack(spacing: 0) {\n            ForEach(options.indices, id:\\.self) { index in\n                ZStack {\n                    Rectangle()\n                        .fill(color.opacity(0.2))\n\n                    Rectangle()\n                        .fill(color)\n                        .cornerRadius(20)\n                        .padding(2)\n                        .opacity(preselectedIndex == index ? 1 : 0.01)\n                        .onTapGesture {\n                            withAnimation(.interactiveSpring()) {\n                                preselectedIndex = index\n                            }\n                        }\n                }\n                .overlay(\n                    Text(options[index])\n                )\n            }\n        }\n        .frame(height: 50)\n        .cornerRadius(20)\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\nCustom Segmented Control 클래스는 두 개의 매개변수를 사용합니다. 첫 번째 매개변수는 현재 선택된 아이템을 나타내고, 두 번째 매개변수는 아이템 배열 문자열로 사용됩니다. 이 배열은 상수로 정의할 수 있습니다.\n\n중요한 점은 첫 번째 매개변수가 @Binding으로 표시되어야 한다는 것입니다.\n\n이 매개변수는 @state로 유지하고 sourcetype과 함께 뷰로 전송됩니다.\n\n제스처와 함께 작동하는 작은 애니메이션이 있는 코드가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```bash\nVStack{\n     CustomSegmentedControl(preselectedIndex: $selectedSegmentSourceType,\n        options: [Localization.value(\"photos.title\"), Localization.value(\"camera.title\")])\n}\n```\n\n또한, 컨트롤에서 변경한 값은 뷰에서 sourcetype 변수와 함께 만들어집니다.\n\n이 변수를 통해 선택 상태를 읽을 수 있습니다.\n\n다음 글에서 이 세그먼트 컨트롤과 피커를 함께 사용할 예정이에요. ❤️‍🔥\n\n\n<div class=\"content-ad\"></div>\n\n# 자료들\n","ogImage":{"url":"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png"},"coverImage":"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"이 기사에서는 SwiftUI 프레임워크 내에서 사용자 정의 디자인을 적용한 Segmented Control 예제를 찾을 수 있습니다. 이 방법은 애플리케이션에 특별히 디자인된 Segmented Control을 사용자화합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png\",\n        alt: \"Custom Segmented Control Example\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Segmented Controls\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"애플 사전적 정의에 따르면 Segmented Control은 두 개 이상의 세그먼트로 구성된 일련의 요소로, 각각 버튼의 역할을 합니다. Segmented Control 내에서 모든 세그먼트는 일반적으로 동일한 너비를 갖고 있습니다. 버튼과 같이 세그먼트에는 텍스트나 이미지가 포함될 수 있습니다. 세그먼트 아래에 텍스트 레이블을 가질 수도 있습니다(또는 제어 전체 아래에). Segmented Control은 단일 선택 또는 다중 선택을 제공할 수 있습니다. (1).\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SwiftUI 라이브러리에서는 Segmented, UIKit 프레임워크에서는 UISegmentedControl라고 해요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"사용자 정의 세그먼트 컨트롤\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앱의 테마에 맞게 디자인하려면 아래 방법을 따라주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이번에는 두 개의 요소로 구성된 세그먼트 컨트롤을 디자인하겠습니다. 이를 위해 0과 1로 구성된 enum 타입으로 관리할 거에요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 0 : 카메라\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 1 : 사진 라이브러리\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 디자인 출력입니다. 그에 따라 개발되었습니다. ⬇️\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_1.png\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Foundation\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"SwiftUI\"\n        }), \"\\n\\nstruct \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CustomSegmentedControl\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"View\"\n        }), \" {\\n    @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Binding\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"preselectedIndex\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Int\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"options\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \"]\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이 색상은 테마 라이브러리에서 가져온 것입니다\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" color = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThemeManager\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"shared\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"currentTheme\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"currentPallet\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"secondary\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"body\"\n        }), \": some \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"View\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HStack\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spacing\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \") {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ForEach\"\n        }), \"(options.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"indices\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \":\\\\.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"self\"\n        }), \") { index \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \"\\n                \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ZStack\"\n        }), \" {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Rectangle\"\n        }), \"()\\n                        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fill\"\n        }), \"(color.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"opacity\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.2\"\n        }), \"))\\n\\n                    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Rectangle\"\n        }), \"()\\n                        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fill\"\n        }), \"(color)\\n                        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"cornerRadius\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \")\\n                        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"padding\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n                        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"opacity\"\n        }), \"(preselectedIndex == index ? \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.01\"\n        }), \")\\n                        .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"onTapGesture\"\n        }), \" {\\n                            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"withAnimation\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \".interactiveSpring()\"\n        }), \") {\\n                                preselectedIndex = index\\n                            }\\n                        }\\n                }\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"overlay\"\n        }), \"(\\n                    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Text\"\n        }), \"(options[index])\\n                )\\n            }\\n        }\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"frame\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"50\"\n        }), \")\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"cornerRadius\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \")\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Custom Segmented Control 클래스는 두 개의 매개변수를 사용합니다. 첫 번째 매개변수는 현재 선택된 아이템을 나타내고, 두 번째 매개변수는 아이템 배열 문자열로 사용됩니다. 이 배열은 상수로 정의할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"중요한 점은 첫 번째 매개변수가 @Binding으로 표시되어야 한다는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 매개변수는 @state로 유지하고 sourcetype과 함께 뷰로 전송됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제스처와 함께 작동하는 작은 애니메이션이 있는 코드가 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"VStack{\\n     CustomSegmentedControl(preselectedIndex: \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"$selectedSegmentSourceType\"\n        }), \",\\n        options: [Localization.value(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"photos.title\\\"\"\n        }), \"), Localization.value(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"camera.title\\\"\"\n        }), \")])\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, 컨트롤에서 변경한 값은 뷰에서 sourcetype 변수와 함께 만들어집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 변수를 통해 선택 상태를 읽을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 글에서 이 세그먼트 컨트롤과 피커를 함께 사용할 예정이에요. ❤️‍🔥\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"자료들\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}