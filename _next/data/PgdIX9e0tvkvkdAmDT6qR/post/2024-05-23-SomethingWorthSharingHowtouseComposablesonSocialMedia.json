{"pageProps":{"post":{"title":"유용한 정보 공유 - 소셜 미디어에서 Composables 사용하는 방법","description":"","date":"2024-05-23 12:51","slug":"2024-05-23-SomethingWorthSharingHowtouseComposablesonSocialMedia","content":"\n\n![Screenshot](/assets/img/2024-05-23-SomethingWorthSharingHowtouseComposablesonSocialMedia_0.png)\n\n# 사진이 없으면 일어나지 않았어요\n\n인스타그램 게시물은 황홀한 모험의 마무리 또는 무기화된 FOMO의 조각일 수 있어요. 어쨌든 사람들은 자신의 하이라이트와 취미를 소셜 미디어에 기억하기를 좋아해요.\n\n최근에 Viz 앱에 공유 기능을 추가했어요. 이제 다이버와 스노클러도 이 의식에 참여할 수 있어요. 당시에는 Compose에서 생성된 아름다운 뷰를 Instagram, TikTok, Twitter 등에서 공유 가능한 이미지로 어떻게 변환하는지에 대해 온라인에 많이 쓰여 있지 않았어요.\n\n<div class=\"content-ad\"></div>\n\n이제 다른 쪽으로 나와서 스스로 구현하는 방법을 안내해 드릴게요! 순서는 대략 다음과 같아요:\n\n- 공유하고 싶은 모든 콘텐츠를 포함하는 컴포저블 만들기\n- 컴포저블을 이미지로 변환하기\n- 안드로이드의 Sharesheet를 사용하여 이미지를 공유하기\n\n제가 공유된 백 엔드 코드를 작성할 때 KMP를 사용하고 있지만, UI는 Android 및 iOS에 대해 별도로 네이티브로 작성했어요. Android 버전은 아래에 작성되어 있고 SwiftUI 버전은 다음 주 별도의 기사에서 공유될 예정이에요!\n\n# 공유 가능한 형식 디자인하기\n\n<div class=\"content-ad\"></div>\n\n삼격하고 상대적으로 높은 이동성을 가지고 있는 정사각형은 모든 소셜 미디어 플랫폼에서 최적의 화면 비율이에요. 인스타그램을 예로 들어보면—이 모양은 스크롤 피드에서 \"게시물\"로 공유되거나 전체 화면 \"스토리\"에 쉽게 가운데 정렬될 수 있어요.\n\n이 이상적인 크기는 두 가지 요소에 따라 다릅니다:\n\n- 이미지로 공유될 때 선명하고 뚜렷하게 보이기 위한 충분한 세부 정보가 있는 크기\n- 디자인 시스템에서 폰트 스타일 토큰을 수용할 수 있는 크기 (원시 작성, Material3 또는 다른 것)\n\n저는 안드로이드에서 400.dp부터 500.dp 크기가 이 두 목표를 모두 잘 이루어낼 수 있다고 생각해요. 대부분의 휴대폰에서 전체 화면 크기로 변환될 거예요. 그리고 이 크기에서 '제목', '헤드라인', '본문'과 같은 폰트 스타일을 사용하면 본인만의 원시 폰트 크기를 계산할 필요 없이 손쉽게 사용할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n@Composable\nfun MyShareContent() {\n    val headline = MaterialTheme.typography.headlineLarge\n    val title = MaterialTheme.typography.titleLarge\n\n    Box(\n        modifier = Modifier\n            .size(400.dp)\n            .background(color = MaterialTheme.colorScheme.surface)\n    ) {\n        Column(\n            verticalArrangement = Arrangement.SpaceBetween,\n            horizontalAlignment = Alignment.CenterHorizontally,\n            modifier = Modifier\n                .padding(12.dp)\n                .fillMaxSize(),\n        ) {\n            Icon(\n                painter = painterResource(id = R.drawable.v3_logo_with_text),\n                tint = Color.Unspecified, // 원본 SVG 색상 유지\n                contentDescription = null,\n                modifier = Modifier.height(200.dp)\n            )\n            Text(text = \"Moon Bay Marine Reserve\", style = headline)\n\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(text = \"Date\", style = title)\n                Text(text = \"Thursday 10 April 2024\", style = title)\n            }\n\n            Row(\n                horizontalArrangement = Arrangement.SpaceBetween,\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(text = \"Time\", style = title)\n                Text(text = \"10:20 - 11:45\", style = title)\n            }\n        }\n    }\n}\n```\n\n![Image](/assets/img/2024-05-23-SomethingWorthSharingHowtouseComposablesonSocialMedia_1.png)\n\n# 그래픽 레이어에 Composable 기록하기\n\nCompose의 최신 버전(1.7)에서는 훌륭한 GraphicsLayer API가 소개되었습니다. 이는 Composable의 그리기를 캡처하고 다른 위치에서 재생하는 방법을 제공합니다. 결국 이를 사용하여 Composable을 이미지 파일로 기록할 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nvar graphicsLayer = rememberGraphicsLayer()\n\nBox(modifier = Modifier\n    .size(400.dp)\n    .drawWithCache {\n        // draw to graphics layer\n        graphicsLayer = obtainGraphicsLayer().apply {\n            record { drawContent() }\n        }\n        // draw to actual UI\n        onDrawWithContent { drawContent() }\n    }) {\n    // The content being recorded\n    Surface(modifier = Modifier.fillMaxSize()) {\n        MyShareContent()\n    }\n}\n```\n\n이 코드 스니펫의 주요 기능:\n\n- Box를 부모 컨테이너로 사용\n- 공유하려는 컴포저블을 Box의 콘텐츠 매개변수에 배치\n- drawWithCache 수정자를 사용하여 콘텐츠의 그리기를 캡처\n- record 메서드를 사용하여 그림을 저장된 graphicsLayer 변수로 리디렉션\n\n# 컴포저블 그리기를 완전히 건너뛰기\n  \n\n<div class=\"content-ad\"></div>\n\n컴포저블을 화면에서 숨기고 전혀 표시하지 않을 수도 있습니다.\n\nViz 앱에서 사용자가 게시물을 저장한 후에는 전체 상세 버전을 보여줍니다. 그러나 소셜 미디어에 공유하기 위한 간단한 요약 버전을 제공합니다. 이 경우 화면에 전체 버전을 표시하고 공유 가능한 버전은 오프스크린에서 생성합니다.\n\n이를 달성하려면 코드에 몇 가지 변경 사항이 필요합니다 —\n\n```js\nvar graphicsLayer = rememberGraphicsLayer()\n\nBox(modifier = Modifier\n    .size(0.dp) // UI에 공간을 사용하지 않도록 크기를 0으로\n    .drawWithCache {\n        // 그래픽 레이어에 그리기\n        graphicsLayer = obtainGraphicsLayer().apply {\n            record(\n                size = IntSize(\n                    width = 400.dp.toPx().toInt(),\n                    height = 400.dp.toPx().toInt()\n                )\n            ) {\n                drawContent()\n            }\n        }\n\n        // 화면에 그리기를 건너뛰기 위해 비워 두기\n        onDrawWithContent { }\n    }) {\n    Box(\n        // 녹화의 원하는 크기로 부모 크기를 재정의\n        modifier = Modifier\n            .wrapContentHeight(unbounded = true, align = Alignment.Top)\n            .wrapContentWidth(unbounded = true, align = Alignment.Start)\n            .requiredSize(400.dp)\n    ) {\n        // 녹화되는 내용\n        Surface(modifier = Modifier.fillMaxSize()) {\n            MyShareContent()\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 코드 스니펫의 주요 기능은 다음과 같습니다:\n\n- 부모 Box 콤포저블은 크기를 0.dp로 설정합니다.\n- onDrawWithContent ' '은 비워두었는데요 — 이것은 화면에 그리는 것을 건너뛸 때 사용됩니다.\n- 자식 콤포저블에는 wrapContentHeight 및 wrapContentWidth 수정자를 사용하여 unbound = true로 설정합니다.\n- 자식 콤포저블에는 desired size를 지정하기 위해 requiredSize 수정자를 사용하여 크기를 설정합니다(400.dp).\n\n# 그래픽 레이어를 이미지 파일에 작성하세요\n\nAndroid 플랫폼에 파일을 작성할 때, 성능, 권한, API의 가용성 등 여러 가지 고려할 사항이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n간결함과 집중을 위해 여기에 기본적인 해결책을 제시할게요. 안드로이드 14에서 잘 작동하는데요, 미디어 저장소 API로의 이동이라는 소문에도 불구하고요. 파일을 공유 Pictures 디렉토리에 쓰고, 미디어 스캐너를 사용하여 공유 가능한 URI를 생성함으로써 대부분의 권한 고려 사항을 회피할 수 있어요.\n\n파일 작성에 대해 미묘하게 다루고 싶다면, Wan Xiao의 다음 글을 추천드려요 -\n\n지금은 다음과 같은 과정을 따를 거에요:\n\n- 그래픽 레이어를 비트맵으로 변환\n- 비트맵을 PNG로 압축\n- PNG를 Pictures 디렉토리에 파일로 쓰기\n- 새 이미지 파일의 URI 가져오기\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nprivate suspend fun GraphicsLayer.saveAsShareableFile(context: Context): Uri? {\n    \n    // 비트맵으로 변환\n    val bitmap = this.toImageBitmap().asAndroidBitmap()\n\n    // 파일 생성\n    val file = File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES),\n        \"my-app-post-${System.currentTimeMillis()}.png\")\n\n    // PNG로 비트맵을 파일에 쓰기\n    file.outputStream().use { out ->\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)\n        out.flush()\n    }\n\n    // 공유를 위한 파일 URI 가져오기\n    return file.scanPath(context)\n}\n\nsuspend fun File.scanPath(context: Context): Uri? {\n    // 코루틴으로 자바 콜백 래핑\n    return withTimeoutOrNull(timeMillis = 5000) {\n        suspendCancellableCoroutine { continuation ->\n            MediaScannerConnection.scanFile(\n                context,\n                arrayOf(path),\n                arrayOf(\"image/png\")\n            ) { scannedPath, scannedUri ->\n                continuation.resume(scannedUri)\n            }\n        }\n    }\n}\n```\n\n사회적 공유 이미지를 위해 PNG를 사용하는 것을 추천합니다. 텍스트가 포함된 이미지일 경우 선명도를 보존하는 것이 중요합니다. 각 소셜 미디어 플랫폼은 이미지를 원하는 크기와 형식으로 압축하기 때문에 이미지의 품질을 최대로 유지해야 합니다.\n\n# 버튼으로 프로세스 시작\n\n이미지 URI를 얻은 후에는 공유 인텐트를 생성하여 어디든 전송할 수 있습니다. 이렇게 하면 Android 공유 시트가 열리고 나머지 프로세스를 자동으로 처리합니다 — 추가적인 코드는 필요하지 않습니다!\n\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nval context = LocalContext.current\nval coroutineScope = rememberCoroutineScope()\nvar graphicsLayer = rememberGraphicsLayer()\n\nButton(onClick = {\n    coroutineScope.launch {\n        if (graphicsLayer.size.width > 0 && graphicsLayer.size.height > 0) {\n            val uri = graphicsLayer.saveAsShareableFile(context)\n            val shareIntent: Intent = Intent().apply {\n                action = Intent.ACTION_SEND\n                putExtra(Intent.EXTRA_STREAM, uri)\n                type = \"image/png\"\n            }\n            startActivity(\n                context, Intent.createChooser(shareIntent, \"share\"), null\n            )\n        }\n    }\n\n}) {\n    // imo - nicer than IconButton with text\n    Row(horizontalArrangement = Arrangement.spacedBy(ButtonDefaults.IconSpacing)) {\n        Icon(\n            Icons.Default.Share,\n            contentDescription = null,\n            modifier = Modifier.size(18.dp)\n        )\n        Text(\n            text = \"Share\", style = MaterialTheme.typography.labelLarge\n        )\n    }\n}\n\n// Shareable 컴포저블을 여기에 포함하세요...\n```\n\n이 코드 스니펫에서 중요한 기능:\n\n- 부모 컴포저블에 범위 지정된 코루틴 시작\n- 그래픽 레이어가 0보다 큰지 확인하여 실행 보호\n- 이전에 생성한 헬퍼 확장 기능을 사용하여 그래픽 레이어 저장\n- 공유 Intent 생성 및 시작\n\n이러한 기능은 ViewModel에서 구현하는 것이 좋을까요?```\n\n<div class=\"content-ad\"></div>\n\n전체 과정은 다른 상태와 상호 작용할 필요 없이 구성 가능한 내부에 포함될 수 있습니다.\n\n또한 컴포저블 내에 Context를 유지하고 관리하는 것이 더 쉽습니다. 이러한 이유로, 버튼의 onClick 매개변수에서 코루틴을 직접 시작하는 것을 권장합니다.\n\n# 전체 코드 — 모든 것을 함께 넣기\n\n그래 — 이제 복사/붙여넣기 시간입니다!\n\n<div class=\"content-ad\"></div>\n\n```kt\n// 모든 명확하지 않은 임포트\n// 더 짧게 하기 위해 구성 임포트는 제외\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.media.MediaScannerConnection\nimport android.net.Uri\nimport android.os.Environment\nimport androidx.core.content.ContextCompat.startActivity\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.suspendCancellableCoroutine\nimport kotlinx.coroutines.withTimeoutOrNull\nimport java.io.File\nimport kotlin.coroutines.resume\n\n@Composable\nfun MyShareScreen() {\n    val context = LocalContext.current\n    val coroutineScope = rememberCoroutineScope()\n    var graphicsLayer = rememberGraphicsLayer()\n\n    Column {\n        Button(onClick = {\n            coroutineScope.launch {\n                if (graphicsLayer.size.width > 0 && graphicsLayer.size.height > 0) {\n                    val uri = graphicsLayer.saveAsShareableFile(context)\n                    val shareIntent: Intent = Intent().apply {\n                        action = Intent.ACTION_SEND\n                        putExtra(Intent.EXTRA_STREAM, uri)\n                        type = \"image/png\"\n                    }\n                    startActivity(\n                        context, Intent.createChooser(shareIntent, \"share\"), null\n                    )\n                }\n            }\n\n        }) {\n            // IMO - nicer than IconButton with text\n            Row(horizontalArrangement = Arrangement.spacedBy(ButtonDefaults.IconSpacing)) {\n                Icon(\n                    Icons.Default.Share,\n                    contentDescription = null,\n                    modifier = Modifier.size(18.dp)\n                )\n                Text(\n                    text = \"Share\", style = MaterialTheme.typography.labelLarge\n                )\n            }\n        }\n\n        Box(modifier = Modifier\n            .size(0.dp) // size 0 so that no space is used in the UI\n            .drawWithCache {\n                // draw to graphics layer\n                graphicsLayer = obtainGraphicsLayer().apply {\n                    record(\n                        size = IntSize(\n                            width = 400.dp.toPx().toInt(),\n                            height = 400.dp.toPx().toInt()\n                        )\n                    ) {\n                        drawContent()\n                    }\n                }\n\n                // leave blank to skip drawing on the screen\n                onDrawWithContent { }\n            }) {\n            Box(\n                // override the parent size with desired size of the recording\n                modifier = Modifier\n                    .wrapContentHeight(unbounded = true, align = Alignment.Top)\n                    .wrapContentWidth(unbounded = true, align = Alignment.Start)\n                    .requiredSize(400.dp)\n            ) {\n                // The content being recorded\n                Surface(modifier = Modifier.fillMaxSize()) {\n                    Text(\"My Share Content Here\")\n                }\n            }\n        }\n    }\n}\n\nsuspend fun GraphicsLayer.saveAsShareableFile(context: Context): Uri? {\n\n    // convert to bitmap\n    val bitmap = this.toImageBitmap().asAndroidBitmap()\n\n    // create file\n    val file = File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES),\n        \"my-app-post-${System.currentTimeMillis()}.png\")\n\n    // write bitmap to file as PNG\n    file.outputStream().use { out ->\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, out)\n        out.flush()\n    }\n\n    // get file URI for sharing\n    return file.scanPath(context)\n}\n\nsuspend fun File.scanPath(context: Context): Uri? {\n    // wrap java callback in coroutine\n    return withTimeoutOrNull(timeMillis = 5000) {\n        suspendCancellableCoroutine { continuation ->\n            MediaScannerConnection.scanFile(\n                context,\n                arrayOf(path),\n                arrayOf(\"image/png\")\n            ) { scannedPath, scannedUri ->\n                continuation.resume(scannedUri)\n            }\n        }\n    }\n}\n```\n\n![이미지](https://miro.medium.com/v2/resize:fit:1200/1*wX0_iwYqjzYVOm9Qu4pv1A.gif)\n\n# 정리합니다\n\n저는 Viz 앱을 개발하고 운영하는 독립 개발자입니다. 이 앱은 Kotlin Multiplatform을 활용한 네이티브 iOS 및 Android 앱입니다. 호주에서 다이빙, 스노클링 또는 프리다이빙을 즐기는 분들에게 꼭 한번 확인해보세요! 이 앱은 사람들이 서로 물 조건을 공유하고 해저 사진을 업로드하며 다이빙 로그를 유지할 수 있는 공간입니다. 항상 무료이며 가입이 필요하지 않습니다.```\n\n<div class=\"content-ad\"></div>\n\n잘못된 부분이나 버그를 발견하셨나요? 제안이나 대안이 있으시다면 언제든지 편하게 피드백해주세요! 이 기사에 몇 가지 수정사항을 추가하는 것에 항상 열려있습니다!\n\n그렇지 않다면, 여러분들이 이 내용을 유용하게 사용하고 있는지 알기 위해 언제나 의견/좋아요 등을 감사히 받겠습니다 :)","ogImage":{"url":"/assets/img/2024-05-23-SomethingWorthSharingHowtouseComposablesonSocialMedia_0.png"},"coverImage":"/assets/img/2024-05-23-SomethingWorthSharingHowtouseComposablesonSocialMedia_0.png","tag":["Tech"],"readingTime":13},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-SomethingWorthSharingHowtouseComposablesonSocialMedia_0.png\",\n        alt: \"Screenshot\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"사진이 없으면 일어나지 않았어요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인스타그램 게시물은 황홀한 모험의 마무리 또는 무기화된 FOMO의 조각일 수 있어요. 어쨌든 사람들은 자신의 하이라이트와 취미를 소셜 미디어에 기억하기를 좋아해요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"최근에 Viz 앱에 공유 기능을 추가했어요. 이제 다이버와 스노클러도 이 의식에 참여할 수 있어요. 당시에는 Compose에서 생성된 아름다운 뷰를 Instagram, TikTok, Twitter 등에서 공유 가능한 이미지로 어떻게 변환하는지에 대해 온라인에 많이 쓰여 있지 않았어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 다른 쪽으로 나와서 스스로 구현하는 방법을 안내해 드릴게요! 순서는 대략 다음과 같아요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"공유하고 싶은 모든 콘텐츠를 포함하는 컴포저블 만들기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"컴포저블을 이미지로 변환하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"안드로이드의 Sharesheet를 사용하여 이미지를 공유하기\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제가 공유된 백 엔드 코드를 작성할 때 KMP를 사용하고 있지만, UI는 Android 및 iOS에 대해 별도로 네이티브로 작성했어요. Android 버전은 아래에 작성되어 있고 SwiftUI 버전은 다음 주 별도의 기사에서 공유될 예정이에요!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"공유 가능한 형식 디자인하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"삼격하고 상대적으로 높은 이동성을 가지고 있는 정사각형은 모든 소셜 미디어 플랫폼에서 최적의 화면 비율이에요. 인스타그램을 예로 들어보면—이 모양은 스크롤 피드에서 \\\"게시물\\\"로 공유되거나 전체 화면 \\\"스토리\\\"에 쉽게 가운데 정렬될 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 이상적인 크기는 두 가지 요소에 따라 다릅니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이미지로 공유될 때 선명하고 뚜렷하게 보이기 위한 충분한 세부 정보가 있는 크기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"디자인 시스템에서 폰트 스타일 토큰을 수용할 수 있는 크기 (원시 작성, Material3 또는 다른 것)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저는 안드로이드에서 400.dp부터 500.dp 크기가 이 두 목표를 모두 잘 이루어낼 수 있다고 생각해요. 대부분의 휴대폰에서 전체 화면 크기로 변환될 거예요. 그리고 이 크기에서 '제목', '헤드라인', '본문'과 같은 폰트 스타일을 사용하면 본인만의 원시 폰트 크기를 계산할 필요 없이 손쉽게 사용할 수 있어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Composable\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"MyShareContent\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          })]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" headline = MaterialTheme.typography.headlineLarge\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" title = MaterialTheme.typography.titleLarge\\n\\n    Box(\\n        modifier = Modifier\\n            .size(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400.\"\n        }), \"dp)\\n            .background(color = MaterialTheme.colorScheme.surface)\\n    ) {\\n        Column(\\n            verticalArrangement = Arrangement.SpaceBetween,\\n            horizontalAlignment = Alignment.CenterHorizontally,\\n            modifier = Modifier\\n                .padding(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"12.\"\n        }), \"dp)\\n                .fillMaxSize(),\\n        ) {\\n            Icon(\\n                painter = painterResource(id = R.drawable.v3_logo_with_text),\\n                tint = Color.Unspecified, \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 원본 SVG 색상 유지\"\n        }), \"\\n                contentDescription = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \",\\n                modifier = Modifier.height(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200.\"\n        }), \"dp)\\n            )\\n            Text(text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Moon Bay Marine Reserve\\\"\"\n        }), \", style = headline)\\n\\n            Row(\\n                horizontalArrangement = Arrangement.SpaceBetween,\\n                modifier = Modifier.fillMaxWidth()\\n            ) {\\n                Text(text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Date\\\"\"\n        }), \", style = title)\\n                Text(text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Thursday 10 April 2024\\\"\"\n        }), \", style = title)\\n            }\\n\\n            Row(\\n                horizontalArrangement = Arrangement.SpaceBetween,\\n                modifier = Modifier.fillMaxWidth()\\n            ) {\\n                Text(text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Time\\\"\"\n        }), \", style = title)\\n                Text(text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"10:20 - 11:45\\\"\"\n        }), \", style = title)\\n            }\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-SomethingWorthSharingHowtouseComposablesonSocialMedia_1.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"그래픽 레이어에 Composable 기록하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Compose의 최신 버전(1.7)에서는 훌륭한 GraphicsLayer API가 소개되었습니다. 이는 Composable의 그리기를 캡처하고 다른 위치에서 재생하는 방법을 제공합니다. 결국 이를 사용하여 Composable을 이미지 파일로 기록할 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" graphicsLayer = rememberGraphicsLayer()\\n\\nBox(modifier = Modifier\\n    .size(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400.\"\n        }), \"dp)\\n    .drawWithCache {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// draw to graphics layer\"\n        }), \"\\n        graphicsLayer = obtainGraphicsLayer().apply {\\n            record { drawContent() }\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// draw to actual UI\"\n        }), \"\\n        onDrawWithContent { drawContent() }\\n    }) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// The content being recorded\"\n        }), \"\\n    Surface(modifier = Modifier.fillMaxSize()) {\\n        MyShareContent()\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드 스니펫의 주요 기능:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Box를 부모 컨테이너로 사용\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"공유하려는 컴포저블을 Box의 콘텐츠 매개변수에 배치\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"drawWithCache 수정자를 사용하여 콘텐츠의 그리기를 캡처\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"record 메서드를 사용하여 그림을 저장된 graphicsLayer 변수로 리디렉션\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"컴포저블 그리기를 완전히 건너뛰기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포저블을 화면에서 숨기고 전혀 표시하지 않을 수도 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Viz 앱에서 사용자가 게시물을 저장한 후에는 전체 상세 버전을 보여줍니다. 그러나 소셜 미디어에 공유하기 위한 간단한 요약 버전을 제공합니다. 이 경우 화면에 전체 버전을 표시하고 공유 가능한 버전은 오프스크린에서 생성합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이를 달성하려면 코드에 몇 가지 변경 사항이 필요합니다 —\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" graphicsLayer = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"rememberGraphicsLayer\"\n        }), \"()\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Box\"\n        }), \"(modifier = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \"\\n    .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"size\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"dp) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// UI에 공간을 사용하지 않도록 크기를 0으로\"\n        }), \"\\n    .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"drawWithCache\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 그래픽 레이어에 그리기\"\n        }), \"\\n        graphicsLayer = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"obtainGraphicsLayer\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"apply\"\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"record\"\n        }), \"(\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [\"\\n                size = IntSize(\\n                    width = \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"400.\"\n          }), \"dp.toPx().toInt(),\\n                    height = \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"400.\"\n          }), \"dp.toPx().toInt()\\n                )\\n            \"]\n        }), \") {\\n                \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"drawContent\"\n        }), \"()\\n            }\\n        }\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 화면에 그리기를 건너뛰기 위해 비워 두기\"\n        }), \"\\n        onDrawWithContent { }\\n    }) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Box\"\n        }), \"(\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 녹화의 원하는 크기로 부모 크기를 재정의\"\n        }), \"\\n        modifier = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \"\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"wrapContentHeight\"\n        }), \"(unbounded = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", align = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alignment\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Top\"\n        }), \")\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"wrapContentWidth\"\n        }), \"(unbounded = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", align = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alignment\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Start\"\n        }), \")\\n            .requiredSize(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400.\"\n        }), \"dp)\\n    ) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 녹화되는 내용\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Surface\"\n        }), \"(modifier = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fillMaxSize\"\n        }), \"()) {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyShareContent\"\n        }), \"()\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드 스니펫의 주요 기능은 다음과 같습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"부모 Box 콤포저블은 크기를 0.dp로 설정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"onDrawWithContent ' '은 비워두었는데요 — 이것은 화면에 그리는 것을 건너뛸 때 사용됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"자식 콤포저블에는 wrapContentHeight 및 wrapContentWidth 수정자를 사용하여 unbound = true로 설정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"자식 콤포저블에는 desired size를 지정하기 위해 requiredSize 수정자를 사용하여 크기를 설정합니다(400.dp).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"그래픽 레이어를 이미지 파일에 작성하세요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Android 플랫폼에 파일을 작성할 때, 성능, 권한, API의 가용성 등 여러 가지 고려할 사항이 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간결함과 집중을 위해 여기에 기본적인 해결책을 제시할게요. 안드로이드 14에서 잘 작동하는데요, 미디어 저장소 API로의 이동이라는 소문에도 불구하고요. 파일을 공유 Pictures 디렉토리에 쓰고, 미디어 스캐너를 사용하여 공유 가능한 URI를 생성함으로써 대부분의 권한 고려 사항을 회피할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"파일 작성에 대해 미묘하게 다루고 싶다면, Wan Xiao의 다음 글을 추천드려요 -\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금은 다음과 같은 과정을 따를 거에요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"그래픽 레이어를 비트맵으로 변환\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"비트맵을 PNG로 압축\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PNG를 Pictures 디렉토리에 파일로 쓰기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"새 이미지 파일의 URI 가져오기\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"private\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"suspend\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" GraphicsLayer.\", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"saveAsShareableFile\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(context: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Context\"\n            }), \")\"]\n          })]\n        }), \": Uri? {\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비트맵으로 변환\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" bitmap = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"this\"\n        }), \".toImageBitmap().asAndroidBitmap()\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 파일 생성\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" file = File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES),\\n        \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"my-app-post-\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${System.currentTimeMillis()}\"\n          }), \".png\\\"\"]\n        }), \")\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// PNG로 비트맵을 파일에 쓰기\"\n        }), \"\\n    file.outputStream().use { \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"out\"\n        }), \" ->\\n        bitmap.compress(Bitmap.CompressFormat.PNG, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"out\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"out\"\n        }), \".flush()\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 공유를 위한 파일 URI 가져오기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" file.scanPath(context)\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"suspend\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" File.\", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"scanPath\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(context: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Context\"\n            }), \")\"]\n          })]\n        }), \": Uri? {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 코루틴으로 자바 콜백 래핑\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" withTimeoutOrNull(timeMillis = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), \") {\\n        suspendCancellableCoroutine { continuation ->\\n            MediaScannerConnection.scanFile(\\n                context,\\n                arrayOf(path),\\n                arrayOf(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"image/png\\\"\"\n        }), \")\\n            ) { scannedPath, scannedUri ->\\n                continuation.resume(scannedUri)\\n            }\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사회적 공유 이미지를 위해 PNG를 사용하는 것을 추천합니다. 텍스트가 포함된 이미지일 경우 선명도를 보존하는 것이 중요합니다. 각 소셜 미디어 플랫폼은 이미지를 원하는 크기와 형식으로 압축하기 때문에 이미지의 품질을 최대로 유지해야 합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"버튼으로 프로세스 시작\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이미지 URI를 얻은 후에는 공유 인텐트를 생성하여 어디든 전송할 수 있습니다. 이렇게 하면 Android 공유 시트가 열리고 나머지 프로세스를 자동으로 처리합니다 — 추가적인 코드는 필요하지 않습니다!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" context = LocalContext.current\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" coroutineScope = rememberCoroutineScope()\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" graphicsLayer = rememberGraphicsLayer()\\n\\nButton(onClick = {\\n    coroutineScope.launch {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (graphicsLayer.size.width > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" && graphicsLayer.size.height > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \") {\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" uri = graphicsLayer.saveAsShareableFile(context)\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" shareIntent: Intent = Intent().apply {\\n                action = Intent.ACTION_SEND\\n                putExtra(Intent.EXTRA_STREAM, uri)\\n                type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"image/png\\\"\"\n        }), \"\\n            }\\n            startActivity(\\n                context, Intent.createChooser(shareIntent, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"share\\\"\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \"\\n            )\\n        }\\n    }\\n\\n}) {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// imo - nicer than IconButton with text\"\n        }), \"\\n    Row(horizontalArrangement = Arrangement.spacedBy(ButtonDefaults.IconSpacing)) {\\n        Icon(\\n            Icons.Default.Share,\\n            contentDescription = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \",\\n            modifier = Modifier.size(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"18.\"\n        }), \"dp)\\n        )\\n        Text(\\n            text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Share\\\"\"\n        }), \", style = MaterialTheme.typography.labelLarge\\n        )\\n    }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Shareable 컴포저블을 여기에 포함하세요...\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드 스니펫에서 중요한 기능:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"부모 컴포저블에 범위 지정된 코루틴 시작\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"그래픽 레이어가 0보다 큰지 확인하여 실행 보호\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이전에 생성한 헬퍼 확장 기능을 사용하여 그래픽 레이어 저장\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"공유 Intent 생성 및 시작\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 기능은 ViewModel에서 구현하는 것이 좋을까요?```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"전체 과정은 다른 상태와 상호 작용할 필요 없이 구성 가능한 내부에 포함될 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한 컴포저블 내에 Context를 유지하고 관리하는 것이 더 쉽습니다. 이러한 이유로, 버튼의 onClick 매개변수에서 코루틴을 직접 시작하는 것을 권장합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"전체 코드 — 모든 것을 함께 넣기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래 — 이제 복사/붙여넣기 시간입니다!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kt\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 모든 명확하지 않은 임포트\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 더 짧게 하기 위해 구성 임포트는 제외\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" android.content.Context\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" android.content.Intent\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" android.graphics.Bitmap\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" android.media.MediaScannerConnection\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" android.net.Uri\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" android.os.Environment\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.core.content.ContextCompat.startActivity\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" kotlinx.coroutines.launch\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" kotlinx.coroutines.suspendCancellableCoroutine\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" kotlinx.coroutines.withTimeoutOrNull\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" java.io.File\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" kotlin.coroutines.resume\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Composable\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"MyShareScreen\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          })]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" context = LocalContext.current\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" coroutineScope = rememberCoroutineScope()\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" graphicsLayer = rememberGraphicsLayer()\\n\\n    Column {\\n        Button(onClick = {\\n            coroutineScope.launch {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (graphicsLayer.size.width > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" && graphicsLayer.size.height > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \") {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" uri = graphicsLayer.saveAsShareableFile(context)\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" shareIntent: Intent = Intent().apply {\\n                        action = Intent.ACTION_SEND\\n                        putExtra(Intent.EXTRA_STREAM, uri)\\n                        type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"image/png\\\"\"\n        }), \"\\n                    }\\n                    startActivity(\\n                        context, Intent.createChooser(shareIntent, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"share\\\"\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \"\\n                    )\\n                }\\n            }\\n\\n        }) {\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// IMO - nicer than IconButton with text\"\n        }), \"\\n            Row(horizontalArrangement = Arrangement.spacedBy(ButtonDefaults.IconSpacing)) {\\n                Icon(\\n                    Icons.Default.Share,\\n                    contentDescription = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \",\\n                    modifier = Modifier.size(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"18.\"\n        }), \"dp)\\n                )\\n                Text(\\n                    text = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Share\\\"\"\n        }), \", style = MaterialTheme.typography.labelLarge\\n                )\\n            }\\n        }\\n\\n        Box(modifier = Modifier\\n            .size(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"dp) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// size 0 so that no space is used in the UI\"\n        }), \"\\n            .drawWithCache {\\n                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// draw to graphics layer\"\n        }), \"\\n                graphicsLayer = obtainGraphicsLayer().apply {\\n                    record(\\n                        size = IntSize(\\n                            width = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400.\"\n        }), \"dp.toPx().toInt(),\\n                            height = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400.\"\n        }), \"dp.toPx().toInt()\\n                        )\\n                    ) {\\n                        drawContent()\\n                    }\\n                }\\n\\n                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// leave blank to skip drawing on the screen\"\n        }), \"\\n                onDrawWithContent { }\\n            }) {\\n            Box(\\n                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// override the parent size with desired size of the recording\"\n        }), \"\\n                modifier = Modifier\\n                    .wrapContentHeight(unbounded = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", align = Alignment.Top)\\n                    .wrapContentWidth(unbounded = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \", align = Alignment.Start)\\n                    .requiredSize(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"400.\"\n        }), \"dp)\\n            ) {\\n                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// The content being recorded\"\n        }), \"\\n                Surface(modifier = Modifier.fillMaxSize()) {\\n                    Text(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"My Share Content Here\\\"\"\n        }), \")\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"suspend\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" GraphicsLayer.\", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"saveAsShareableFile\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(context: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Context\"\n            }), \")\"]\n          })]\n        }), \": Uri? {\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// convert to bitmap\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" bitmap = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"this\"\n        }), \".toImageBitmap().asAndroidBitmap()\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// create file\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" file = File(context.getExternalFilesDir(Environment.DIRECTORY_PICTURES),\\n        \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"\\\"my-app-post-\", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"${System.currentTimeMillis()}\"\n          }), \".png\\\"\"]\n        }), \")\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// write bitmap to file as PNG\"\n        }), \"\\n    file.outputStream().use { \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"out\"\n        }), \" ->\\n        bitmap.compress(Bitmap.CompressFormat.PNG, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"out\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"out\"\n        }), \".flush()\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// get file URI for sharing\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" file.scanPath(context)\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"suspend\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" File.\", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"scanPath\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(context: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Context\"\n            }), \")\"]\n          })]\n        }), \": Uri? {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// wrap java callback in coroutine\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" withTimeoutOrNull(timeMillis = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5000\"\n        }), \") {\\n        suspendCancellableCoroutine { continuation ->\\n            MediaScannerConnection.scanFile(\\n                context,\\n                arrayOf(path),\\n                arrayOf(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"image/png\\\"\"\n        }), \")\\n            ) { scannedPath, scannedUri ->\\n                continuation.resume(scannedUri)\\n            }\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:1200/1*wX0_iwYqjzYVOm9Qu4pv1A.gif\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"정리합니다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저는 Viz 앱을 개발하고 운영하는 독립 개발자입니다. 이 앱은 Kotlin Multiplatform을 활용한 네이티브 iOS 및 Android 앱입니다. 호주에서 다이빙, 스노클링 또는 프리다이빙을 즐기는 분들에게 꼭 한번 확인해보세요! 이 앱은 사람들이 서로 물 조건을 공유하고 해저 사진을 업로드하며 다이빙 로그를 유지할 수 있는 공간입니다. 항상 무료이며 가입이 필요하지 않습니다.```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"잘못된 부분이나 버그를 발견하셨나요? 제안이나 대안이 있으시다면 언제든지 편하게 피드백해주세요! 이 기사에 몇 가지 수정사항을 추가하는 것에 항상 열려있습니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그렇지 않다면, 여러분들이 이 내용을 유용하게 사용하고 있는지 알기 위해 언제나 의견/좋아요 등을 감사히 받겠습니다 :)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}