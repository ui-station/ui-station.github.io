{"pageProps":{"post":{"title":"웹 애플리케이션을 위한 변경 불가능한 인프라 구축하기 단계별 가이드","description":"","date":"2024-05-23 14:32","slug":"2024-05-23-BuildinganImmutableInfrastructureforYourWebApplicationAStep-by-StepGuide","content":"\n\n\n# 소개\n\n소프트웨어 개발의 빠르게 변화하는 세계에서 일관성, 확장성 및 신뢰성을 보장하는 것이 중요합니다. 데브옵스에서 핵심 개념인 불변 인프라는 인프라 구성요소를 불변하게 만들어 이러한 요구 사항을 해결합니다. 이 블로그에서는 Docker, Kubernetes 및 Terraform을 사용하여 간단한 웹 애플리케이션을 위한 불변 인프라를 생성하는 방법을 안내하겠습니다.\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n<div class=\"content-ad\"></div>\n\n# 불변 인프라란?\n\n불변 인프라는 서버(또는 다른 인프라 구성 요소)를 배포한 후에는 결코 수정하지 않는 방식을 말합니다. 업데이트나 변경이 필요한 경우 새로운 서버를 빌드하고 배포하며 이전 서버는 해제됩니다. 이 접근 방식은 일관성과 반복성을 보장하며 구성 드리프트를 줄이고 의도하지 않은 변경의 위험을 최소화합니다.\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n# 프로젝트 개요\n\n<div class=\"content-ad\"></div>\n\n이 프로젝트에서는 Node.js 웹 애플리케이션을 위한 불변 인프라를 만들 것입니다. 이 프로젝트에는 다음이 포함됩니다:\n\n- Docker를 사용하여 애플리케이션을 컨테이너화하기\n- Kubernetes를 사용하여 배포를 조정하기\n- Terraform을 사용하여 인프라 프로비저닝 및 관리하기\n- CI/CD 파이프라인을 통해 빌드, 테스트 및 배포 프로세스 자동화하기\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n# 단계 1: Docker를 사용하여 애플리케이션을 컨테이너화하기\n\n<div class=\"content-ad\"></div>\n\n먼저 Docker를 사용하여 웹 애플리케이션을 컨테이너화해야 합니다. 프로젝트 디렉토리에 Dockerfile을 만들어주세요:\n\n```js\nDockerfile\n```\n\n```js\n# 부모 이미지로 공식 Node.js 런타임 사용\nFROM node:14\n```\n\n```js\n# 작업 디렉토리 설정\nWORKDIR /usr/src/app\n# package.json 복사 및 종속성 설치\nCOPY package*.json ./\nRUN npm install\n# 나머지 애플리케이션 코드 복사\nCOPY . .\n# 애플리케이션 포트 노출\nEXPOSE 3000\n# 앱 실행 명령 정의\nCMD [\"node\", \"app.js\"]\n```\n\n<div class=\"content-ad\"></div>\n\n도커 이미지를 빌드하고 테스트해보세요:\n\n```bash\ndocker build -t my-web-app .\ndocker run -p 3000:3000 my-web-app\n```\n\n# 단계 2: 쿠버네티스로 오케스트레이션하기\n\n<div class=\"content-ad\"></div>\n\n다음으로, 도커 컨테이너를 쿠버네티스 클러스터에 배포할 것입니다. deployment.yaml 및 service.yaml 파일을 생성해주세요:\n\n```yaml\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-app-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: web-app\n  template:\n    metadata:\n      labels:\n        app: web-app\n    spec:\n      containers:\n      - name: web-app\n        image: my-web-app:latest\n        ports:\n        - containerPort: 3000\n```\n\n```yaml\n# service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: web-app-service\nspec:\n  selector:\n    app: web-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 3000\n  type: LoadBalancer\n```\n\n쿠버네티스 구성을 적용해주세요:\n\n<div class=\"content-ad\"></div>\n\n```yaml\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n```\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n# Step 3: Terraform으로 프로비저닝하기\n\n테라폼을 사용하여 쿠버네티스 클러스터를 프로비저닝할 것입니다. main.tf 파일을 작성해주세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n# main.tf\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n```\n\n```js\nmodule \"eks\" {\n  source          = \"terraform-aws-modules/eks/aws\"\n  cluster_name    = \"my-cluster\"\n  cluster_version = \"1.20\"\n  subnets         = [\"subnet-0123456789abcdef0\", \"subnet-0123456789abcdef1\"]\n  vpc_id          = \"vpc-0123456789abcdef0\"\n  node_groups = {\n    my-node-group = {\n      desired_capacity = 2\n      max_capacity     = 3\n      min_capacity     = 1\n      instance_type = \"t3.medium\"\n    }\n  }\n}\noutput \"cluster_endpoint\" {\n  value = module.eks.cluster_endpoint\n}\n```\n\n테라폼 구성을 초기화하고 적용하십시오:\n\n```js\nterraform init\nterraform apply\n```\n\n<div class=\"content-ad\"></div>\n\n새 클러스터를 사용하도록 kubectl을 구성하세요:\n\n```bash\naws eks --region us-west-2 update-kubeconfig --name my-cluster\n```\n\nLinkedIn 프로필: www.linkedin.com/in/mohammedtalhakalimi\n\n# 단계 4: CI/CD로 자동화\n\n<div class=\"content-ad\"></div>\n\n마지막으로, GitHub Actions를 사용하여 CI/CD 파이프라인을 설정할 것입니다. .github/workflows/ci-cd-pipeline.yaml 파일을 만들어주세요:\n\n```yaml\n# .github/workflows/ci-cd-pipeline.yaml\nname: CI/CD Pipeline\n```\n\n```yaml\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v1\n    - name: Login to Docker Hub\n      uses: docker/login-action@v1\n      with:\n        username: ${secrets.DOCKER_USERNAME}\n        password: ${secrets.DOCKER_PASSWORD}\n    - name: Build and push Docker image\n      run: |\n        docker build -t my-web-app:latest .\n        docker tag my-web-app:latest ${secrets.DOCKER_USERNAME}/my-web-app:latest\n        docker push ${secrets.DOCKER_USERNAME}/my-web-app:latest\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n    - name: Set up kubectl\n      uses: azure/setup-kubectl@v1\n      with:\n        version: 'v1.20.0'\n    - name: Deploy to Kubernetes\n      run: |\n        kubectl apply -f deployment.yaml\n        kubectl apply -f service.yaml\n```\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n위 단계를 따라 웹 애플리케이션을 위한 불변의 인프라를 구축했습니다. 이 방식을 통해 배포가 일관적이고 확장 가능하며 신뢰할 수 있음을 보장할 수 있습니다. 불변의 인프라 관행을 준수함으로써 응용 프로그램의 안정성과 관리 용이성을 크게 향상시킬 수 있습니다.\n\n의견이나 경험을 댓글로 공유해 주세요. 즐거운 코딩 되세요!\n\nwww.linkedin.com/in/mohammedtalhakalimi","ogImage":{"url":"/assets/img/2024-05-23-BuildinganImmutableInfrastructureforYourWebApplicationAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-23-BuildinganImmutableInfrastructureforYourWebApplicationAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"소프트웨어 개발의 빠르게 변화하는 세계에서 일관성, 확장성 및 신뢰성을 보장하는 것이 중요합니다. 데브옵스에서 핵심 개념인 불변 인프라는 인프라 구성요소를 불변하게 만들어 이러한 요구 사항을 해결합니다. 이 블로그에서는 Docker, Kubernetes 및 Terraform을 사용하여 간단한 웹 애플리케이션을 위한 불변 인프라를 생성하는 방법을 안내하겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"www.linkedin.com/in/mohammedtalhakalimi\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"불변 인프라란?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"불변 인프라는 서버(또는 다른 인프라 구성 요소)를 배포한 후에는 결코 수정하지 않는 방식을 말합니다. 업데이트나 변경이 필요한 경우 새로운 서버를 빌드하고 배포하며 이전 서버는 해제됩니다. 이 접근 방식은 일관성과 반복성을 보장하며 구성 드리프트를 줄이고 의도하지 않은 변경의 위험을 최소화합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"www.linkedin.com/in/mohammedtalhakalimi\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"프로젝트 개요\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 프로젝트에서는 Node.js 웹 애플리케이션을 위한 불변 인프라를 만들 것입니다. 이 프로젝트에는 다음이 포함됩니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Docker를 사용하여 애플리케이션을 컨테이너화하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Kubernetes를 사용하여 배포를 조정하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Terraform을 사용하여 인프라 프로비저닝 및 관리하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"CI/CD 파이프라인을 통해 빌드, 테스트 및 배포 프로세스 자동화하기\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"www.linkedin.com/in/mohammedtalhakalimi\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: Docker를 사용하여 애플리케이션을 컨테이너화하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 Docker를 사용하여 웹 애플리케이션을 컨테이너화해야 합니다. 프로젝트 디렉토리에 Dockerfile을 만들어주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dockerfile\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 부모 이미지로 공식 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Node\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"js\"\n        }), \" 런타임 사용\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"node\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"14\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 작업 디렉토리 설정\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WORKDIR\"\n        }), \" /usr/src/app\\n# package.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json\"\n        }), \" 복사 및 종속성 설치\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"COPY\"\n        }), \" package*.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json\"\n        }), \" ./\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" npm install\\n# 나머지 애플리케이션 코드 복사\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"COPY\"\n        }), \" . .\\n# 애플리케이션 포트 노출\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"EXPOSE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000\"\n        }), \"\\n# 앱 실행 명령 정의\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"CMD\"\n        }), \" [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"node\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"app.js\\\"\"\n        }), \"]\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"도커 이미지를 빌드하고 테스트해보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"docker build -t my-web-app .\\ndocker run -p 3000:3000 my-web-app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: 쿠버네티스로 오케스트레이션하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로, 도커 컨테이너를 쿠버네티스 클러스터에 배포할 것입니다. deployment.yaml 및 service.yaml 파일을 생성해주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# deployment.yaml\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"apps/v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Deployment\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"web-app-deployment\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spec:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"replicas:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"matchLabels:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"app:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"web-app\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"template:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"labels:\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"app:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"web-app\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spec:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"containers:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"web-app\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"image:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"my-web-app:latest\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ports:\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"containerPort:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# service.yaml\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Service\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"web-app-service\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spec:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"selector:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"app:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"web-app\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ports:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"protocol:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"TCP\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"port:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"80\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"targetPort:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3000\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"type:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"LoadBalancer\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"쿠버네티스 구성을 적용해주세요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"kubectl\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"apply\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"-f\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"deployment.yaml\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"kubectl\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"apply\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"-f\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"service.yaml\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"www.linkedin.com/in/mohammedtalhakalimi\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Step 3: Terraform으로 프로비저닝하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테라폼을 사용하여 쿠버네티스 클러스터를 프로비저닝할 것입니다. main.tf 파일을 작성해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# main.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\nprovider \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws\\\"\"\n        }), \" {\\n  region = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"us-west-2\\\"\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"eks\\\"\"\n        }), \" {\\n  source          = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"terraform-aws-modules/eks/aws\\\"\"\n        }), \"\\n  cluster_name    = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my-cluster\\\"\"\n        }), \"\\n  cluster_version = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"1.20\\\"\"\n        }), \"\\n  subnets         = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"subnet-0123456789abcdef0\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"subnet-0123456789abcdef1\\\"\"\n        }), \"]\\n  vpc_id          = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"vpc-0123456789abcdef0\\\"\"\n        }), \"\\n  node_groups = {\\n    my-node-group = {\\n      desired_capacity = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"\\n      max_capacity     = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"\\n      min_capacity     = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n      instance_type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"t3.medium\\\"\"\n        }), \"\\n    }\\n  }\\n}\\noutput \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"cluster_endpoint\\\"\"\n        }), \" {\\n  value = \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"eks\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"cluster_endpoint\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테라폼 구성을 초기화하고 적용하십시오:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"terraform init\\nterraform apply\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새 클러스터를 사용하도록 kubectl을 구성하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"aws eks --region us-west-2 update-kubeconfig --name my-cluster\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LinkedIn 프로필: www.linkedin.com/in/mohammedtalhakalimi\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 4: CI/CD로 자동화\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마지막으로, GitHub Actions를 사용하여 CI/CD 파이프라인을 설정할 것입니다. .github/workflows/ci-cd-pipeline.yaml 파일을 만들어주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# .github/workflows/ci-cd-pipeline.yaml\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"CI/CD\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Pipeline\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"on:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"push:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"branches:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"main\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"jobs:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"build:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"runs-on:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"ubuntu-latest\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"steps:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Checkout\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"code\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uses:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"actions/checkout@v2\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Set\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"up\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Docker\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Buildx\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uses:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"docker/setup-buildx-action@v1\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Login\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"to\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Docker\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Hub\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uses:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"docker/login-action@v1\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"with:\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"username:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"${secrets.DOCKER_USERNAME}\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"password:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"${secrets.DOCKER_PASSWORD}\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Build\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"and\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"push\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Docker\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"image\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"run:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"|\\n        docker build -t my-web-app:latest .\\n        docker tag my-web-app:latest ${secrets.DOCKER_USERNAME}/my-web-app:latest\\n        docker push ${secrets.DOCKER_USERNAME}/my-web-app:latest\\n\"\n        }), \"  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"deploy:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"runs-on:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"ubuntu-latest\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"needs:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"build\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"steps:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Checkout\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"code\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uses:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"actions/checkout@v2\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Set\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"up\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"kubectl\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uses:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"azure/setup-kubectl@v1\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"with:\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"version:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'v1.20.0'\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Deploy\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"to\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Kubernetes\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"run:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"|\\n        kubectl apply -f deployment.yaml\\n        kubectl apply -f service.yaml\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"www.linkedin.com/in/mohammedtalhakalimi\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 단계를 따라 웹 애플리케이션을 위한 불변의 인프라를 구축했습니다. 이 방식을 통해 배포가 일관적이고 확장 가능하며 신뢰할 수 있음을 보장할 수 있습니다. 불변의 인프라 관행을 준수함으로써 응용 프로그램의 안정성과 관리 용이성을 크게 향상시킬 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"의견이나 경험을 댓글로 공유해 주세요. 즐거운 코딩 되세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"www.linkedin.com/in/mohammedtalhakalimi\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}