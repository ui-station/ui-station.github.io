{"pageProps":{"post":{"title":"Smbclient 명령어","description":"","date":"2024-05-23 15:23","slug":"2024-05-23-Smbclientcommand","content":"\n\n샘바 파일 서버에 연결하는 두 가지 다른 방법이 있습니다. 아래와 같습니다:\n\n터미널에서 smbclient 명령어를 사용하여 연결\n\" smb://filename \" 형식의 주소를 입력하여 파일 시스템에서 연결\n이 기사에서는 터미널에서 삼바 파일 서버에 연결하고 드라이브 트랜잭션을 수행하는 방법을 살펴보겠습니다. 시작해 봅시다 :)\n\nSmbclient은 FTP 연결과 유사한 명령 줄 도구입니다. 이 명령은 SMB 리소스에 액세스를 제공합니다. 일반적인 smbclient 명령어는 다음과 같습니다:\n\nSMB 공유 목록 열기:\n\n<div class=\"content-ad\"></div>\n\n```js\nsmbclient -L //server_name -U users\n```\n\nSMB 공유: (비밀번호를 입력해야 함.)\n\n```js\nsmclient //server/share -U user\n```\n\nSMB 공유에 직접 연결: (비밀번호 필요 없음, 하지만 비밀번호가 화면에 표시됨.)\n\n\n<div class=\"content-ad\"></div>\n\n```js\nsmclient //server/share -U user%password\n```\n\n더 구체적인 용도를 위한 일반적인 smbclient 플래그는 아래에 나열되어 있습니다:\n\n“-L” 플래그 (— list)는 서버의 공유를 나열하는 데 사용되는 플래그입니다.\n\n“-U” 플래그 (— username [%password])는 파일 서버에 로그인할 때 사용할 사용자 이름 (및 선택적으로 암호)를 지정하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n“-a” 플래그 (— authentication-file)는 연결을 설정하기 위한 사용자 비밀번호 정보를 보관하는 파일을 지정하는 데 사용하는 플래그입니다. 지정해야 하는 파일의 형식은 다음과 같아야 합니다.\n\n“-B” 플래그 (— browse): 이 플래그는 DNS를 사용하여 SMB 서버를 찾습니다.\n\n“-p” 플래그 (— port)는 연결할 포트를 선택하는 데 사용됩니다. 이 플래그를 사용하지 않으면 기본 포트는 포트 139입니다.\n\n“-I” 플래그 (— IP-address IP-address)는 연결을 위해 NetBIOS 이름이 아닌 서버의 IP 주소를 제공하는 데 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n\"플래그( —— kerberos): Kerberos를 사용하여 인증을 시도하는 데 사용됩니다.\n\n디버그 수준 플래그( —— debuglevel)은 더 자세한 정보를 로그 파일에 제공합니다. 0부터 10까지의 값이 제공될 수 있습니다.\n\n또한, smbclient를 다양한 방법으로 연결할 수 있습니다. 다음과 같습니다:\n1) 서버 NetBIOS 이름:\n\n\\`\\`\\`js\nsmbclient -L fileserver\n\\`\\`\\`\"\n\n<div class=\"content-ad\"></div>\n\n2) 해당 서버의 IP 주소로 다음 명령어를 사용하세요:\n\n```js\nsmbclient -L x.x.x.x\n```\n\n3) 백슬래시를 사용하여 공유에 직접 링크를 하려면 다음과 같이 입력하세요:\n\n```js\nsmbclient \\\\\\\\fileserver\\\\share\n```\n\n<div class=\"content-ad\"></div>\n\n4) 위의 옵션은 따옴표를 사용하여도 수행할 수 있습니다:\n\n```js\nsmbclient \"\\\\fileserver\\share\"\n```","ogImage":{"url":"/assets/img/2024-05-23-Smbclientcommand_0.png"},"coverImage":"/assets/img/2024-05-23-Smbclientcommand_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"샘바 파일 서버에 연결하는 두 가지 다른 방법이 있습니다. 아래와 같습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"터미널에서 smbclient 명령어를 사용하여 연결\\n\\\" smb://filename \\\" 형식의 주소를 입력하여 파일 시스템에서 연결\\n이 기사에서는 터미널에서 삼바 파일 서버에 연결하고 드라이브 트랜잭션을 수행하는 방법을 살펴보겠습니다. 시작해 봅시다 :)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Smbclient은 FTP 연결과 유사한 명령 줄 도구입니다. 이 명령은 SMB 리소스에 액세스를 제공합니다. 일반적인 smbclient 명령어는 다음과 같습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SMB 공유 목록 열기:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"smbclient -L \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//server_name -U users\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SMB 공유: (비밀번호를 입력해야 함.)\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"smclient \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//server/share -U user\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SMB 공유에 직접 연결: (비밀번호 필요 없음, 하지만 비밀번호가 화면에 표시됨.)\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"smclient \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//server/share -U user%password\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 구체적인 용도를 위한 일반적인 smbclient 플래그는 아래에 나열되어 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“-L” 플래그 (— list)는 서버의 공유를 나열하는 데 사용되는 플래그입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“-U” 플래그 (— username [%password])는 파일 서버에 로그인할 때 사용할 사용자 이름 (및 선택적으로 암호)를 지정하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“-a” 플래그 (— authentication-file)는 연결을 설정하기 위한 사용자 비밀번호 정보를 보관하는 파일을 지정하는 데 사용하는 플래그입니다. 지정해야 하는 파일의 형식은 다음과 같아야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“-B” 플래그 (— browse): 이 플래그는 DNS를 사용하여 SMB 서버를 찾습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“-p” 플래그 (— port)는 연결할 포트를 선택하는 데 사용됩니다. 이 플래그를 사용하지 않으면 기본 포트는 포트 139입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“-I” 플래그 (— IP-address IP-address)는 연결을 위해 NetBIOS 이름이 아닌 서버의 IP 주소를 제공하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"플래그( —— kerberos): Kerberos를 사용하여 인증을 시도하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디버그 수준 플래그( —— debuglevel)은 더 자세한 정보를 로그 파일에 제공합니다. 0부터 10까지의 값이 제공될 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, smbclient를 다양한 방법으로 연결할 수 있습니다. 다음과 같습니다:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"서버 NetBIOS 이름:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"```js\\nsmbclient -L fileserver\\n```\\\"\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"해당 서버의 IP 주소로 다음 명령어를 사용하세요:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"smbclient -L x.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"x\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"x\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"x\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"백슬래시를 사용하여 공유에 직접 링크를 하려면 다음과 같이 입력하세요:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"smbclient \\\\\\\\\\\\\\\\fileserver\\\\\\\\share\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"위의 옵션은 따옴표를 사용하여도 수행할 수 있습니다:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"smbclient \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\\\\\\fileserver\\\\share\\\"\"\n        }), \"\\n\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}