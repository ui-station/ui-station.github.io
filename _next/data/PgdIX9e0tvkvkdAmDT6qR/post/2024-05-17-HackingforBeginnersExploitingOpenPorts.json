{"pageProps":{"post":{"title":"초보자를 위한 해킹 개방된 포트 악용하기","description":"","date":"2024-05-17 19:14","slug":"2024-05-17-HackingforBeginnersExploitingOpenPorts","content":"\n\n\n![Image](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_0.png)\n\n지난 번에는 몇 가지 스크립트와 열린 RTSP 포트를 사용하여 사무실 카메라에 들어가는 간단한 실행을 따라했다. 이번에는 새롭게 배운 지식을 기반으로 Hack the Box의 기계 중 하나의 열린 포트를 악용해 보기로 했다.\n\n지난 글에서는 내 해킹 지식이 매우 제한되었음을 다루었고, 이 글들의 목적은 비전문가가 윤리적 해킹에 접근할 때 어떻게 발전하는지를 관객들에게 보여주기 위한 것이다. 현재로서는 '스크립트 키디' 범주에 속하는데, 이는 자신의 해킹을 작성하는 기술 지식이 없어서 다른 사람들에게 의존하는 사람을 빗대는 사이버 보안 커뮤니티의 경멸적인 용어다. 그러므로 이것이라고 말하며 내 안쪽 스크립트 키디를 받아들이고 해킹에 대해 잘하지 못한 이유에 대해 말을 낭비하지 않겠다.\n\n해커 후드를 다시 뒤집어 씁시다. 시작해 봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n### Step 1: Network Scan\n\nFirst things first, as every good hack begins, we run an NMAP scan:\n\n![NMAP Scan](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_1.png)\n\nYou’ll notice that I’m using the `-v`, `-A`, and `-sV` commands to scan the given IP address. NMAP and NSE have hundreds of commands you can use to scan an IP, but I’ve chosen these commands for specific reasons; to increase verbosity, to enable OS and version detection, and to probe open ports for service information.\n\n<div class=\"content-ad\"></div>\n\n이는 3개의 오픈 포트를 반환합니다. 그 중 2개는 열린 것으로 예상됩니다(80과 443), 세 번째는 SSH인 포트 22입니다. 이것은 분명 열려 있으면 안 됩니다.\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_2.png)\n\n단계 2: 무차별 대입 시도\n\n그래서, 다음 단계는 포트 22으로 무차별 대입하여 접근하는 것입니다. 무차별 대입은 해커(나!)가 스크립트를 사용하여 사용자 이름과 비밀번호의 조합을 시도하여 올바르게 추측하여 접근 권한을 얻을 때까지 기기나 시스템에 접근하는 과정입니다.\n\n<div class=\"content-ad\"></div>\n\n이전에 설명했던 것처럼 Kali Linux에는 OS에 내장된 해킹 도구 모음이 있습니다. 이 도구 중 하나가 Metasploit인데, 이는 취약점 데이터베이스를 보유하고 있어 쉽게 쿼리하여 디바이스/시스템에 해당하는 사용 사례를 확인할 수 있는 툴입니다. 그래서 한 번 시도해 봅시다.\n\n'SSH'를 검색하면 Metasploit이 71가지 잠재적인 취약점을 반환합니다. 그 중 하나는 ssh_login 보조 도구인데, 제 경우에는 몇 가지 기본 자격 증명을 사용하여 로그인을 시도하기 위해 몇 개의 스크립트를 로드하는 데 사용할 것입니다.\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_3.png)\n\n이 명령은 취약점을 실행하기 전에 완료해야 하는 모든 변수를 반환합니다. 이는 Metasploit을 통해로드 된 모든 취약점에서 동일하게 적용됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_4.png)\n\n그래서 무차별 공격을 실행하기 위해 필요한 변수를 식별한 후, 실행했습니다:\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_5.png)\n\n스크립트 무차별 공격 추측을 30분 동안 실행한 후 성공을 거두지 못했습니다. 아무것도 얻어지지 않았네요. 그럼 다시 처음부터 시작할게요.\n\n\n<div class=\"content-ad\"></div>\n\nStep 3: 서버에 액세스하는 방법\n\nNMAP 스캔에서 알 수 있듯이 열린 포트의 포트 버전을 스캔했습니다. 다음 열린 포트는 포트 80이며, 이미 서버와 웹사이트 버전을 알고 있습니다. 이어서 할 일은 찾은 버전을 기반으로 관련 exploit을 검색하는 것인데, 먼저 exploit을 실행하려는 대신 어떻게 서버에 백엔드에서 액세스할 지 확인하려고 합니다.\n\nCurl은 사용자 상호작용 없이 작동하도록 설계된 서버와 데이터를 전송하는 커맨드 라인 유틸리티입니다. 따라서 클라이언트 URL 커맨드 'curl'을 사용하고, 헤드라인을 표시하기 위해 -I 옵션을 사용하여 사용합니다:\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_6.png)\n\n<div class=\"content-ad\"></div>\n\n현재 단계에서 해당 기계의 백엔드 서버를 'office.paper'라는 것으로 확인할 수 있습니다. 이를 브라우저를 통해 액세스하려면 도메인을 신뢰할 수 있는 호스트 목록에 추가해야 합니다. 따라서 다음으로 '/etc/hosts'에 위치한 호스트 파일로 이동하여 '10.10.11.143 office.paper'를 신뢰할 수 있는 호스트 목록에 추가합니다:\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_7.png)\n\n이제 기본 정보 이상을 표시하는 웹사이트에 액세스할 수 있습니다. 다음 단계는 흥미로운 정보를 모으는 방법을 찾는 것이니, 가치가 있을만한 내용을 찾아보도록 합시다.\n\n단계 4: WordPress 취약점 Exploiting\n\n<div class=\"content-ad\"></div>\n\nNMAP 스캔 초기 결과를 통해 도메인 버전이 확인되었고 (WordPress 5.2.3), 잠재적으로 이용할 수 있는 취약점을 찾기 위해 일부 조사를 진행합니다. Kali Linux에는 쉽게 사용 가능한 도구인 Metasploit과 Searchsploit 등이 있습니다. 그러나 나 자신을 위해 모든 것을 간단하게 유지하기 위해 구글을 사용할 것입니다.\n\n당연히 해당 버전의 WordPress에 사용할 수 있는 잠재적인 취약점 목록이 있습니다. 그러나 'office.paper' 웹 페이지에는 몇 가지 포럼을 제외하고는 흥미로운 내용이 없어보입니다. 따라서 이러한 잠재적인 취약점 중 WordPress 서비스 버전에 해당하는 것은 CVE-2019–17671입니다. 이 취약점은 WP_Query 내의 문제로 관련되어 있어 인증되지 않은 사용자가 개인 또는 초안 게시물을 볼 수 있게 합니다. 이 취약점을 이용하려면 도메인 이름 뒤에 'static=1'을 추가하여 다음과 같이 작성하면 됩니다:\n\nhttp://office.paper/?static=1\n\n이제 WordPress의 비공개 페이지에 액세스할 수 있었습니다. 이 시점에서 우리가 실제 시스템을 공격하는 것이 아니라는 것을 상기하는 것이 중요합니다. 즉, 이 해킹은 교육 목적을 위해 가상 머신에서 수행되는 것이지 시스템을 실제로 마비시키기 위한 것이 아닙니다. 그러나 이를 달성하기 위해 취한 조치는 실제 해킹이 발생할 수 있는 방식을 잘 대변하고 있습니다. 이제 Hackerman으로서 계속 진행합니다.\n\n<div class=\"content-ad\"></div>\n\n단계 5: 엿보기\n\n물론, '엿보기'는 내가 하려고 하는 것에 대한 기술적 용어가 아닙니다. 그러나 나는 기술적인 사람이 아니기 때문에 '엿보기'를 내 기술적 용어로 사용할 것입니다. 해킹의 이 시점에서, 내가 본질적으로 하려는 것은 다음 단계를 실행할 수 있도록 가능한 많은 정보를 수집하는 것입니다. 운이 좋게도, Hack the Box가 이를 상대적으로 간단하게 만들었습니다.\n\n숨겨진 페이지로 이동했을 때, '사무실.paper'의 내부 직원을 위한 '비밀 등록 URL'이 있는 것을 쉽게 볼 수 있습니다. 그래서 나는 앞으로 나아가서 직원 사이트로 URL을 통해 이동하려고 노력합니다. 그러나 작동하지 않습니다. 페이지에서 호스트가 신뢰할 수 없다고 알려주기 때문에, 이 단계에서 내가 접근하려는 도메인에 호스트 권한을 부여해야 한다는 것을 기억합니다. 아래에서 보여드리겠습니다:\n\n<img src=\"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_8.png\" />\n\n<div class=\"content-ad\"></div>\n\n사용자 이름 및 비밀번호 정보를 수집하여 SSH를 통해 로그인할 수 있도록 하는 것이 이 해킹의 목적입니다. 따라서 모든 컴퓨터에서 일반적인 위치에 파일을 요청합니다:\n\nChat robot get file ../../../../etc/passwd\n\n6단계: SSH 로그인 실행\n\n<div class=\"content-ad\"></div>\n\n이제 SSH를 통해 로그인하려는 자격 증명을 수집했으므로 해킹을 실행할 수 있습니다.\n\n![Hacking Image 9](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_9.png)\n\n사진에 나와 있듯이, 나는 이제 Dwight의 기계 안에 있습니다. 이 시점에서 'ls' 명령을 사용하여 사용자가 현재 갖고 있는 비표시 파일 목록을 볼 수 있습니다. 이렇게 하면 외부로서 접근할 수 없어야 하는 파일을 볼 수 있게 됩니다. Office.paper - 해킹당했어요:\n\n![Hacking Image 10](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_10.png)\n\n<div class=\"content-ad\"></div>\n\n위에서 볼 수 있었던 것처럼 - 두 번째 해킹 성공 이네요! 다시 말하지만, 이것은 해킹에 대한 매우 낮은 수준의 접근 방식이므로 숙련된 보안 연구원/펜 테스터에게는 흥미로운 이야기가 아닐 수 있습니다. 그러나 나는 실질적인 진전이 이루어지고 있음을 분명히 알 수 있다고 생각하므로, 내 기술이 향상되면 이 기사들의 품질도 향상될 것이라고 희망합니다!\n\nIotabl에서 해커들과 보안 연구원들로 이뤄진 커뮤니티가 비즈니스의 선두에 있습니다. 저희는 산업을 더 포용적이고 접근 가능하며 협력적으로 만드는 플랫폼을 구축하고 있습니다. 윤리적 해커, 보안 연구원 또는 IoT 취미 전문가라면 www.iotabl.com에서 플랫폼의 조기 액세스를 신청하고 https://discord.gg/GAB6kKNrNM 에 가입하여 우리의 커뮤니티에 참여해보세요!","ogImage":{"url":"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_0.png"},"coverImage":"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h3: \"h3\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_0.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지난 번에는 몇 가지 스크립트와 열린 RTSP 포트를 사용하여 사무실 카메라에 들어가는 간단한 실행을 따라했다. 이번에는 새롭게 배운 지식을 기반으로 Hack the Box의 기계 중 하나의 열린 포트를 악용해 보기로 했다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지난 글에서는 내 해킹 지식이 매우 제한되었음을 다루었고, 이 글들의 목적은 비전문가가 윤리적 해킹에 접근할 때 어떻게 발전하는지를 관객들에게 보여주기 위한 것이다. 현재로서는 '스크립트 키디' 범주에 속하는데, 이는 자신의 해킹을 작성하는 기술 지식이 없어서 다른 사람들에게 의존하는 사람을 빗대는 사이버 보안 커뮤니티의 경멸적인 용어다. 그러므로 이것이라고 말하며 내 안쪽 스크립트 키디를 받아들이고 해킹에 대해 잘하지 못한 이유에 대해 말을 낭비하지 않겠다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"해커 후드를 다시 뒤집어 씁시다. 시작해 봅시다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 1: Network Scan\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First things first, as every good hack begins, we run an NMAP scan:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_1.png\",\n        alt: \"NMAP Scan\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You’ll notice that I’m using the \", _jsx(_components.code, {\n        children: \"-v\"\n      }), \", \", _jsx(_components.code, {\n        children: \"-A\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"-sV\"\n      }), \" commands to scan the given IP address. NMAP and NSE have hundreds of commands you can use to scan an IP, but I’ve chosen these commands for specific reasons; to increase verbosity, to enable OS and version detection, and to probe open ports for service information.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이는 3개의 오픈 포트를 반환합니다. 그 중 2개는 열린 것으로 예상됩니다(80과 443), 세 번째는 SSH인 포트 22입니다. 이것은 분명 열려 있으면 안 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 2: 무차별 대입 시도\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서, 다음 단계는 포트 22으로 무차별 대입하여 접근하는 것입니다. 무차별 대입은 해커(나!)가 스크립트를 사용하여 사용자 이름과 비밀번호의 조합을 시도하여 올바르게 추측하여 접근 권한을 얻을 때까지 기기나 시스템에 접근하는 과정입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전에 설명했던 것처럼 Kali Linux에는 OS에 내장된 해킹 도구 모음이 있습니다. 이 도구 중 하나가 Metasploit인데, 이는 취약점 데이터베이스를 보유하고 있어 쉽게 쿼리하여 디바이스/시스템에 해당하는 사용 사례를 확인할 수 있는 툴입니다. 그래서 한 번 시도해 봅시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"'SSH'를 검색하면 Metasploit이 71가지 잠재적인 취약점을 반환합니다. 그 중 하나는 ssh_login 보조 도구인데, 제 경우에는 몇 가지 기본 자격 증명을 사용하여 로그인을 시도하기 위해 몇 개의 스크립트를 로드하는 데 사용할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 명령은 취약점을 실행하기 전에 완료해야 하는 모든 변수를 반환합니다. 이는 Metasploit을 통해로드 된 모든 취약점에서 동일하게 적용됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_4.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 무차별 공격을 실행하기 위해 필요한 변수를 식별한 후, 실행했습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_5.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"스크립트 무차별 공격 추측을 30분 동안 실행한 후 성공을 거두지 못했습니다. 아무것도 얻어지지 않았네요. 그럼 다시 처음부터 시작할게요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Step 3: 서버에 액세스하는 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NMAP 스캔에서 알 수 있듯이 열린 포트의 포트 버전을 스캔했습니다. 다음 열린 포트는 포트 80이며, 이미 서버와 웹사이트 버전을 알고 있습니다. 이어서 할 일은 찾은 버전을 기반으로 관련 exploit을 검색하는 것인데, 먼저 exploit을 실행하려는 대신 어떻게 서버에 백엔드에서 액세스할 지 확인하려고 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Curl은 사용자 상호작용 없이 작동하도록 설계된 서버와 데이터를 전송하는 커맨드 라인 유틸리티입니다. 따라서 클라이언트 URL 커맨드 'curl'을 사용하고, 헤드라인을 표시하기 위해 -I 옵션을 사용하여 사용합니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_6.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 단계에서 해당 기계의 백엔드 서버를 'office.paper'라는 것으로 확인할 수 있습니다. 이를 브라우저를 통해 액세스하려면 도메인을 신뢰할 수 있는 호스트 목록에 추가해야 합니다. 따라서 다음으로 '/etc/hosts'에 위치한 호스트 파일로 이동하여 '10.10.11.143 office.paper'를 신뢰할 수 있는 호스트 목록에 추가합니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_7.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 기본 정보 이상을 표시하는 웹사이트에 액세스할 수 있습니다. 다음 단계는 흥미로운 정보를 모으는 방법을 찾는 것이니, 가치가 있을만한 내용을 찾아보도록 합시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 4: WordPress 취약점 Exploiting\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"NMAP 스캔 초기 결과를 통해 도메인 버전이 확인되었고 (WordPress 5.2.3), 잠재적으로 이용할 수 있는 취약점을 찾기 위해 일부 조사를 진행합니다. Kali Linux에는 쉽게 사용 가능한 도구인 Metasploit과 Searchsploit 등이 있습니다. 그러나 나 자신을 위해 모든 것을 간단하게 유지하기 위해 구글을 사용할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당연히 해당 버전의 WordPress에 사용할 수 있는 잠재적인 취약점 목록이 있습니다. 그러나 'office.paper' 웹 페이지에는 몇 가지 포럼을 제외하고는 흥미로운 내용이 없어보입니다. 따라서 이러한 잠재적인 취약점 중 WordPress 서비스 버전에 해당하는 것은 CVE-2019–17671입니다. 이 취약점은 WP_Query 내의 문제로 관련되어 있어 인증되지 않은 사용자가 개인 또는 초안 게시물을 볼 수 있게 합니다. 이 취약점을 이용하려면 도메인 이름 뒤에 'static=1'을 추가하여 다음과 같이 작성하면 됩니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"http://office.paper/?static=1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 WordPress의 비공개 페이지에 액세스할 수 있었습니다. 이 시점에서 우리가 실제 시스템을 공격하는 것이 아니라는 것을 상기하는 것이 중요합니다. 즉, 이 해킹은 교육 목적을 위해 가상 머신에서 수행되는 것이지 시스템을 실제로 마비시키기 위한 것이 아닙니다. 그러나 이를 달성하기 위해 취한 조치는 실제 해킹이 발생할 수 있는 방식을 잘 대변하고 있습니다. 이제 Hackerman으로서 계속 진행합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 5: 엿보기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"물론, '엿보기'는 내가 하려고 하는 것에 대한 기술적 용어가 아닙니다. 그러나 나는 기술적인 사람이 아니기 때문에 '엿보기'를 내 기술적 용어로 사용할 것입니다. 해킹의 이 시점에서, 내가 본질적으로 하려는 것은 다음 단계를 실행할 수 있도록 가능한 많은 정보를 수집하는 것입니다. 운이 좋게도, Hack the Box가 이를 상대적으로 간단하게 만들었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"숨겨진 페이지로 이동했을 때, '사무실.paper'의 내부 직원을 위한 '비밀 등록 URL'이 있는 것을 쉽게 볼 수 있습니다. 그래서 나는 앞으로 나아가서 직원 사이트로 URL을 통해 이동하려고 노력합니다. 그러나 작동하지 않습니다. 페이지에서 호스트가 신뢰할 수 없다고 알려주기 때문에, 이 단계에서 내가 접근하려는 도메인에 호스트 권한을 부여해야 한다는 것을 기억합니다. 아래에서 보여드리겠습니다:\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_8.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 이름 및 비밀번호 정보를 수집하여 SSH를 통해 로그인할 수 있도록 하는 것이 이 해킹의 목적입니다. 따라서 모든 컴퓨터에서 일반적인 위치에 파일을 요청합니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Chat robot get file ../../../../etc/passwd\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"6단계: SSH 로그인 실행\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 SSH를 통해 로그인하려는 자격 증명을 수집했으므로 해킹을 실행할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_9.png\",\n        alt: \"Hacking Image 9\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사진에 나와 있듯이, 나는 이제 Dwight의 기계 안에 있습니다. 이 시점에서 'ls' 명령을 사용하여 사용자가 현재 갖고 있는 비표시 파일 목록을 볼 수 있습니다. 이렇게 하면 외부로서 접근할 수 없어야 하는 파일을 볼 수 있게 됩니다. Office.paper - 해킹당했어요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_10.png\",\n        alt: \"Hacking Image 10\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위에서 볼 수 있었던 것처럼 - 두 번째 해킹 성공 이네요! 다시 말하지만, 이것은 해킹에 대한 매우 낮은 수준의 접근 방식이므로 숙련된 보안 연구원/펜 테스터에게는 흥미로운 이야기가 아닐 수 있습니다. 그러나 나는 실질적인 진전이 이루어지고 있음을 분명히 알 수 있다고 생각하므로, 내 기술이 향상되면 이 기사들의 품질도 향상될 것이라고 희망합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Iotabl에서 해커들과 보안 연구원들로 이뤄진 커뮤니티가 비즈니스의 선두에 있습니다. 저희는 산업을 더 포용적이고 접근 가능하며 협력적으로 만드는 플랫폼을 구축하고 있습니다. 윤리적 해커, 보안 연구원 또는 IoT 취미 전문가라면 www.iotabl.com에서 플랫폼의 조기 액세스를 신청하고 https://discord.gg/GAB6kKNrNM 에 가입하여 우리의 커뮤니티에 참여해보세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}