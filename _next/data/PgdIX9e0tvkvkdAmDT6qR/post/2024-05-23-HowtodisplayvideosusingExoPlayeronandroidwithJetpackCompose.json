{"pageProps":{"post":{"title":"안녕하세요 오늘은 안드로이드에서 ExoPlayer를 사용하여 Jetpack Compose로 비디오를 표시하는 방법에 대해 알아보겠습니다","description":"","date":"2024-05-23 12:55","slug":"2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose","content":"\n\n이 튜토리얼에서는 Jetpack Compose와 함께 ExoPlayer를 사용하는 간단한 방법을 보여드리기로 했어요.\n\n먼저 아래 종속성을 build.gradle(Module: app) 파일에 추가해주세요.\n\n```js\n// in .kts\nimplementation(\"androidx.media3:media3-exoplayer:1.2.0\")\nimplementation(\"androidx.media3:media3-ui:1.2.0\")\n```\n\n현재 컨텍스트를 LocalContext.current로 가져오세요.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n    // 현재 컨텍스트 가져오기\n    val context = LocalContext.current\n```\n\nComposable이나 ViewModel에서 ExoPlayer의 인스턴스를 만듭니다.\n\n```kotlin\nval exoPlayer = ExoPLayer.Builder(context).build()\n```\n\nExoPlayer의 라이프사이클을 관리하여 필요하지 않을 때 리소스를 해제해야 합니다. DisposableEffect와 LaunchedEffect를 사용하여 라이프사이클 이벤트를 처리할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n// MediaSource를 ExoPlayer에 설정합니다.\nLaunchedEffect(mediaSource) {\n    exoPlayer.setMediaItem(mediaSource)\n    exoPlayer.prepare()\n}\n\n// 라이프사이클 이벤트 관리\nDisposableEffect(Unit) {\n    onDispose {\n        exoPlayer.release()\n    }\n}\n```\n\nExoPlayer 및 해당 컨트롤을 표시하는 Android view입니다.\n\n```js\nAndroidView(\n    factory = { ctx ->\n        PlayerView(ctx).apply {\n            player = exoPlayer\n        }\n    },\n    modifier = Modifier\n        .fillMaxWidth()\n        .height(200.dp) // 원하는 높이로 설정하세요\n)\n```\n\n상수 EXAMPLE_VIDEO_URI를 만들어 샘플 비디오의 URL을 정의합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nconst val EXAMPLE_VIDEO_URI = \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n```\n\nmanifest.file에 인터넷 권한을 추가해주세요.\n\n```js\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n이전에 만든 완성된 코드입니다.\n\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n/**\n * Composable 함수로 ExoPlayer를 사용하여 비디오를 재생하는 기능을 표시합니다.\n *\n * @OptIn 어노테이션인 UnstableApi는 해당 API가 여전히 실험적이며 향후 변경될 수 있다는 것을 나타냅니다.\n *\n * @see EXAMPLE_VIDEO_URI 실제 재생할 비디오의 URI로 대체하세요.\n */\n@OptIn(UnstableApi::class)\n@Composable\nfun ExoPlayerView() {\n    // 현재 컨텍스트 가져오기\n    val context = LocalContext.current\n\n    // ExoPlayer 초기화\n    val exoPlayer = ExoPlayer.Builder(context).build()\n\n    // MediaSource 생성\n    val mediaSource = remember(EXAMPLE_VIDEO_URI) {\n        MediaItem.fromUri(EXAMPLE_VIDEO_URI)\n    }\n\n    // MediaSource를 ExoPlayer에 설정\n    LaunchedEffect(mediaSource) {\n        exoPlayer.setMediaItem(mediaSource)\n        exoPlayer.prepare()\n    }\n\n    // 라이프사이클 이벤트 관리\n    DisposableEffect(Unit) {\n        onDispose {\n            exoPlayer.release()\n        }\n    }\n\n    // AndroidView를 사용하여 Android View(PlayerView)를 Compose에 임베드\n    AndroidView(\n        factory = { ctx ->\n            PlayerView(ctx).apply {\n                player = exoPlayer\n            }\n        },\n        modifier = Modifier\n            .fillMaxWidth()\n            .height(200.dp) // 원하는 높이로 설정\n    )\n}\n```\n\n사용자 지정 UI 컨트롤이 필요하면 play, pause, seek 등을 위한 버튼으로 Composables를 생성하고 exoPlayer를 업데이트하면 됩니다.\n\n이 기능을 테스트하려면 Compose UI에서 ExoPlayeView()를 포함하면 됩니다:\n\n```kotlin\nExoPlayerView()\n```\n\n<div class=\"content-ad\"></div>\n\n코드를 실행하고 결과를 확인해보세요.\n\n![이미지](/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png)\n\n아래에는 해당 예제의 저장소 URL이 있습니다.\n\n## 그러나, 더 복잡한 설정과 동영상 컨트롤을 숨기는 기능이 포함된 다음 두 가지 화면으로 구성된 샘플 프로젝트가 있습니다. 첫 번째는 동영상 목록이고 두 번째는 선택된 동영상의 상세 정보입니다.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n/**\n * Jetpack Compose를 사용하여 ExoPlayer를 이용한 비디오 플레이어를 표시하는 조합 가능한 함수입니다.\n *\n * @param video 비디오 재생 대상인 [VideoResultEntity]를 나타내는 매개변수입니다.\n * @param playingIndex 현재 재생 중인 인덱스를 나타내는 State입니다.\n * @param onVideoChange 비디오가 변경될 때 호출되는 콜백 함수입니다.\n * @param isVideoEnded 비디오가 종료되었는지를 결정하는 콜백 함수입니다.\n * @param modifier 스타일링 및 위치 지정을 위한 Modifier입니다.\n *\n * UnstableApi에 대한 OptIn 주석은 API가 여전히 실험적이며 미래에 변경될 수 있음을 나타냅니다.\n * \n * OpaqueUnitKey 사용에 대한 경고를 억제하기 위해 이용되는 SuppressLint 주석입니다.\n * \n * 실험적인 Animation API 사용을 위해 ExperimentalAnimationApi 주석이 적용되었습니다.\n */\n@OptIn(UnstableApi::class)\n@SuppressLint(\"OpaqueUnitKey\")\n@ExperimentalAnimationApi\n@Composable\nfun VideoPlayer(\n    video: VideoResultEntity,\n    playingIndex: State<Int>,\n    onVideoChange: (Int) -> Unit,\n    isVideoEnded: (Boolean) -> Unit,\n    modifier: Modifier = Modifier\n) {\n    // 현재 context 가져오기\n    val context = LocalContext.current\n\n    // 비디오 제목의 가시성을 제어하는 Mutable state\n    val visible = remember { mutableStateOf(true) }\n\n    // 비디오 제목을 보유하는 Mutable state\n    val videoTitle = remember { mutableStateOf(video.name) }\n\n    // ExoPlayer를 위한 MediaItems 목록 생성\n    val mediaItems = arrayListOf<MediaItem>()\n    mediaItems.add(\n        MediaItem.Builder()\n            .setUri(video.video)\n            .setMediaId(video.id.toString())\n            .setTag(video)\n            .setMediaMetadata(MediaMetadata.Builder().setDisplayTitle(video.name).build())\n            .build()\n    )\n\n    // ExoPlayer 초기화\n    val exoPlayer = remember {\n        ExoPlayer.Builder(context).build().apply {\n            this.setMediaItems(mediaItems)\n            this.prepare()\n            this.addListener(object : Player.Listener {\n                override fun onEvents(player: Player, events: Player.Events) {\n                    super.onEvents(player, events)\n                    // 200밀리초 후에 비디오 제목 숨김\n                    if (player.contentPosition >= 200) visible.value = false\n                }\n\n                override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {\n                    super.onMediaItemTransition(mediaItem, reason)\n                    // 비디오 변경 시 콜백\n                    onVideoChange(this@apply.currentPeriodIndex)\n                    visible.value = true\n                    videoTitle.value = mediaItem?.mediaMetadata?.displayTitle.toString()\n                }\n\n                override fun onPlaybackStateChanged(playbackState: Int) {\n                    super.onPlaybackStateChanged(playbackState)\n                    // 비디오 재생 상태가 STATE_ENDED로 변경될 때 콜백\n                    if (playbackState == ExoPlayer.STATE_ENDED) {\n                        isVideoEnded.invoke(true)\n                    }\n                }\n            })\n        }\n    }\n\n    // 지정된 인덱스로 이동하고 재생 시작\n    exoPlayer.seekTo(playingIndex.value, C.TIME_UNSET)\n    exoPlayer.playWhenReady = true\n\n    // 생명주기 이벤트에 기반한 플레이어 상태 관리를 위한 생명주기 관찰자 추가\n    LocalLifecycleOwner.current.lifecycle.addObserver(object : LifecycleEventObserver {\n        override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n            when (event) {\n                Lifecycle.Event.ON_START -> {\n                    // Composable이 화면에 있을 때 재생 시작\n                    if (exoPlayer.isPlaying.not()) {\n                        exoPlayer.play()\n                    }\n                }\n\n                Lifecycle.Event.ON_STOP -> {\n                    // Composable이 화면에서 벗어날 때 플레이어 일시정지\n                    exoPlayer.pause()\n                }\n\n                else -> {\n                    // Nothing\n                }\n            }\n        }\n    })\n\n    // 비디오 플레이어를 포함하는 Column Composable\n    Column(modifier = modifier.background(Color.Black)) {\n        // Composable이 소멸될 때 ExoPlayer 해제를 위한 DisposableEffect\n        DisposableEffect(\n            AndroidView(\n                modifier = modifier\n                    .testTag(VIDEO_PLAYER_TAG),\n                factory = {\n                    // Compose에 PlayerView를 포함시키는 AndroidView\n                    PlayerView(context).apply {\n                        player = exoPlayer\n                        layoutParams = FrameLayout.LayoutParams(\n                            ViewGroup.LayoutParams.MATCH_PARENT,\n                            ViewGroup.LayoutParams.MATCH_PARENT\n                        )\n                        // 사용 가능한 공간을 채우는 리사이즈 모드 설정\n                        resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL\n                        // 불필요한 플레이어 컨트롤 숨김\n                        setShowNextButton(false)\n                        setShowPreviousButton(false)\n                        setShowFastForwardButton(false)\n                        setShowRewindButton(false)\n                    }\n                })\n        ) {\n            // Composable이 소멸될 때 ExoPlayer 해제\n            onDispose {\n                exoPlayer.release()\n            }\n        }\n    }\n}\n```\n\n## VideoPlayer() 조합 가능한 함수 내용:\n\nMediaItems 및 ExoPlayer 설정:\n\n- 비디오 정보를 담을 MediaItems 목록 생성.\n- ExoPlayer를 해당 MediaItems로 구성하고 준비하며, 비디오 변경 및 재생 상태 변경과 같은 이벤트를 처리할 수 있도록 리스너가 추가됨.\n\n<div class=\"content-ad\"></div>\n\n라이프사이클 관리:\n\n- 리사이클러브 옵서버가 추가되어 Composable 라이프사이클 이벤트를 기반으로 플레이어 상태를 관리합니다. 화면이 포그라운드에 있을 때 플레이어가 재생되고, 백그라운드에 있을 때는 일시정지됩니다.\n\nAndroidView 및 PlayerView 통합:\n\n- AndroidView Composable은 안드로이드 PlayerView를 Jetpack Compose에 삽입하는 데 사용됩니다.\n- PlayerView는 ExoPlayer 인스턴스, 레이아웃 매개변수 및 리사이즈 모드와 플레이어 컨트롤의 가시성과 같은 속성과 함께 구성됩니다.\n\n<div class=\"content-ad\"></div>\n\n휴지통 효과를 위한 정리:\n\n- DisposableEffect는 Composable이 dispose될 때 ExoPlayer 자원을 해제하기 위해 사용됩니다.\n\n총적으로, VideoPlayer Composable은 Jetpack Compose UI 내에서 비디오 재생을 위해 ExoPlayer를 초기화하고 관리하는 로직을 캡슐화합니다.\n\n## 아래 저장소에서 코드를 더 주의 깊게 테스트하고 검토해 주셨으면 좋겠습니다.","ogImage":{"url":"/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png"},"coverImage":"/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"이 튜토리얼에서는 Jetpack Compose와 함께 ExoPlayer를 사용하는 간단한 방법을 보여드리기로 했어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 아래 종속성을 build.gradle(Module: app) 파일에 추가해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// in .kts\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"implementation\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.media3:media3-exoplayer:1.2.0\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"implementation\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.media3:media3-ui:1.2.0\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 컨텍스트를 LocalContext.current로 가져오세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [\"    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 현재 컨텍스트 가져오기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" context = LocalContext.current\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Composable이나 ViewModel에서 ExoPlayer의 인스턴스를 만듭니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" exoPlayer = ExoPLayer.Builder(context).build()\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ExoPlayer의 라이프사이클을 관리하여 필요하지 않을 때 리소스를 해제해야 합니다. DisposableEffect와 LaunchedEffect를 사용하여 라이프사이클 이벤트를 처리할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// MediaSource를 ExoPlayer에 설정합니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LaunchedEffect\"\n        }), \"(mediaSource) {\\n    exoPlayer.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setMediaItem\"\n        }), \"(mediaSource)\\n    exoPlayer.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"prepare\"\n        }), \"()\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 라이프사이클 이벤트 관리\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DisposableEffect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Unit\"\n        }), \") {\\n    onDispose {\\n        exoPlayer.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"release\"\n        }), \"()\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ExoPlayer 및 해당 컨트롤을 표시하는 Android view입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AndroidView\"\n        }), \"(\\n    factory = { ctx ->\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PlayerView\"\n        }), \"(ctx).\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"apply\"\n        }), \" {\\n            player = exoPlayer\\n        }\\n    },\\n    modifier = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Modifier\"\n        }), \"\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fillMaxWidth\"\n        }), \"()\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"height\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200.\"\n        }), \"dp) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 원하는 높이로 설정하세요\"\n        }), \"\\n)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"상수 EXAMPLE_VIDEO_URI를 만들어 샘플 비디오의 URL을 정의합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" val \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"EXAMPLE_VIDEO_URI\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"manifest.file에 인터넷 권한을 추가해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<uses-permission \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"android\"\n        }), \":name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"android.permission.INTERNET\\\"\"\n        }), \" />\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전에 만든 완성된 코드입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsxs(_components.span, {\n          className: \"hljs-comment\",\n          children: [\"/**\\n * Composable 함수로 ExoPlayer를 사용하여 비디오를 재생하는 기능을 표시합니다.\\n *\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@OptIn\"\n          }), \" 어노테이션인 UnstableApi는 해당 API가 여전히 실험적이며 향후 변경될 수 있다는 것을 나타냅니다.\\n *\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@see\"\n          }), \" EXAMPLE_VIDEO_URI 실제 재생할 비디오의 URI로 대체하세요.\\n */\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@OptIn(UnstableApi::class)\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Composable\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"ExoPlayerView\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          })]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 현재 컨텍스트 가져오기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" context = LocalContext.current\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ExoPlayer 초기화\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" exoPlayer = ExoPlayer.Builder(context).build()\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// MediaSource 생성\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" mediaSource = remember(EXAMPLE_VIDEO_URI) {\\n        MediaItem.fromUri(EXAMPLE_VIDEO_URI)\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// MediaSource를 ExoPlayer에 설정\"\n        }), \"\\n    LaunchedEffect(mediaSource) {\\n        exoPlayer.setMediaItem(mediaSource)\\n        exoPlayer.prepare()\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 라이프사이클 이벤트 관리\"\n        }), \"\\n    DisposableEffect(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"Unit\"\n        }), \") {\\n        onDispose {\\n            exoPlayer.release()\\n        }\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// AndroidView를 사용하여 Android View(PlayerView)를 Compose에 임베드\"\n        }), \"\\n    AndroidView(\\n        factory = { ctx ->\\n            PlayerView(ctx).apply {\\n                player = exoPlayer\\n            }\\n        },\\n        modifier = Modifier\\n            .fillMaxWidth()\\n            .height(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200.\"\n        }), \"dp) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 원하는 높이로 설정\"\n        }), \"\\n    )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자 지정 UI 컨트롤이 필요하면 play, pause, seek 등을 위한 버튼으로 Composables를 생성하고 exoPlayer를 업데이트하면 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기능을 테스트하려면 Compose UI에서 ExoPlayeView()를 포함하면 됩니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: \"ExoPlayerView()\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드를 실행하고 결과를 확인해보세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-HowtodisplayvideosusingExoPlayeronandroidwithJetpackCompose_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래에는 해당 예제의 저장소 URL이 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"그러나, 더 복잡한 설정과 동영상 컨트롤을 숨기는 기능이 포함된 다음 두 가지 화면으로 구성된 샘플 프로젝트가 있습니다. 첫 번째는 동영상 목록이고 두 번째는 선택된 동영상의 상세 정보입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsxs(_components.span, {\n          className: \"hljs-comment\",\n          children: [\"/**\\n * Jetpack Compose를 사용하여 ExoPlayer를 이용한 비디오 플레이어를 표시하는 조합 가능한 함수입니다.\\n *\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@param\"\n          }), \" video 비디오 재생 대상인 [VideoResultEntity]를 나타내는 매개변수입니다.\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@param\"\n          }), \" playingIndex 현재 재생 중인 인덱스를 나타내는 State입니다.\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@param\"\n          }), \" onVideoChange 비디오가 변경될 때 호출되는 콜백 함수입니다.\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@param\"\n          }), \" isVideoEnded 비디오가 종료되었는지를 결정하는 콜백 함수입니다.\\n * \", _jsx(_components.span, {\n            className: \"hljs-doctag\",\n            children: \"@param\"\n          }), \" modifier 스타일링 및 위치 지정을 위한 Modifier입니다.\\n *\\n * UnstableApi에 대한 OptIn 주석은 API가 여전히 실험적이며 미래에 변경될 수 있음을 나타냅니다.\\n * \\n * OpaqueUnitKey 사용에 대한 경고를 억제하기 위해 이용되는 SuppressLint 주석입니다.\\n * \\n * 실험적인 Animation API 사용을 위해 ExperimentalAnimationApi 주석이 적용되었습니다.\\n */\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@OptIn(UnstableApi::class)\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"hljs-meta\",\n          children: [\"@SuppressLint(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"OpaqueUnitKey\\\"\"\n          }), \")\"]\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@ExperimentalAnimationApi\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Composable\"\n        }), \"\\n\", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"VideoPlayer\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(\\n    video: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"VideoResultEntity\"\n            }), \",\\n    playingIndex: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"State\"\n            }), \"<\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Int\"\n            }), \">,\\n    onVideoChange: (\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Int\"\n            }), \") -> \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Unit\"\n            }), \",\\n    isVideoEnded: (\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Boolean\"\n            }), \") -> \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Unit\"\n            }), \",\\n    modifier: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Modifier\"\n            }), \" = Modifier\\n)\"]\n          })]\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 현재 context 가져오기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" context = LocalContext.current\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비디오 제목의 가시성을 제어하는 Mutable state\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" visible = remember { mutableStateOf(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \") }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비디오 제목을 보유하는 Mutable state\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" videoTitle = remember { mutableStateOf(video.name) }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ExoPlayer를 위한 MediaItems 목록 생성\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" mediaItems = arrayListOf<MediaItem>()\\n    mediaItems.add(\\n        MediaItem.Builder()\\n            .setUri(video.video)\\n            .setMediaId(video.id.toString())\\n            .setTag(video)\\n            .setMediaMetadata(MediaMetadata.Builder().setDisplayTitle(video.name).build())\\n            .build()\\n    )\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// ExoPlayer 초기화\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"val\"\n        }), \" exoPlayer = remember {\\n        ExoPlayer.Builder(context).build().apply {\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"this\"\n        }), \".setMediaItems(mediaItems)\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"this\"\n        }), \".prepare()\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"this\"\n        }), \".addListener(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"object\"\n        }), \" : Player.Listener {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"override\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"onEvents\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(player: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Player\"\n            }), \", events: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Player\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Events\"\n            }), \")\"]\n          })]\n        }), \" {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"super\"\n        }), \".onEvents(player, events)\\n                    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 200밀리초 후에 비디오 제목 숨김\"\n        }), \"\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (player.contentPosition >= \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \") visible.value = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n                }\\n\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"override\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"onMediaItemTransition\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(mediaItem: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"MediaItem\"\n            }), \"?, reason: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Int\"\n            }), \")\"]\n          })]\n        }), \" {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"super\"\n        }), \".onMediaItemTransition(mediaItem, reason)\\n                    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비디오 변경 시 콜백\"\n        }), \"\\n                    onVideoChange(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"this\"\n        }), _jsx(_components.span, {\n          className: \"hljs-symbol\",\n          children: \"@apply\"\n        }), \".currentPeriodIndex)\\n                    visible.value = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n                    videoTitle.value = mediaItem?.mediaMetadata?.displayTitle.toString()\\n                }\\n\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"override\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"onPlaybackStateChanged\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(playbackState: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Int\"\n            }), \")\"]\n          })]\n        }), \" {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"super\"\n        }), \".onPlaybackStateChanged(playbackState)\\n                    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비디오 재생 상태가 STATE_ENDED로 변경될 때 콜백\"\n        }), \"\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (playbackState == ExoPlayer.STATE_ENDED) {\\n                        isVideoEnded.invoke(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \")\\n                    }\\n                }\\n            })\\n        }\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 지정된 인덱스로 이동하고 재생 시작\"\n        }), \"\\n    exoPlayer.seekTo(playingIndex.value, C.TIME_UNSET)\\n    exoPlayer.playWhenReady = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 생명주기 이벤트에 기반한 플레이어 상태 관리를 위한 생명주기 관찰자 추가\"\n        }), \"\\n    LocalLifecycleOwner.current.lifecycle.addObserver(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"object\"\n        }), \" : LifecycleEventObserver {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"override\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"onStateChanged\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(source: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"LifecycleOwner\"\n            }), \", event: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Lifecycle\"\n            }), \".\", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"Event\"\n            }), \")\"]\n          })]\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"when\"\n        }), \" (event) {\\n                Lifecycle.Event.ON_START -> {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Composable이 화면에 있을 때 재생 시작\"\n        }), \"\\n                    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (exoPlayer.isPlaying.not()) {\\n                        exoPlayer.play()\\n                    }\\n                }\\n\\n                Lifecycle.Event.ON_STOP -> {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Composable이 화면에서 벗어날 때 플레이어 일시정지\"\n        }), \"\\n                    exoPlayer.pause()\\n                }\\n\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" -> {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Nothing\"\n        }), \"\\n                }\\n            }\\n        }\\n    })\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 비디오 플레이어를 포함하는 Column Composable\"\n        }), \"\\n    Column(modifier = modifier.background(Color.Black)) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Composable이 소멸될 때 ExoPlayer 해제를 위한 DisposableEffect\"\n        }), \"\\n        DisposableEffect(\\n            AndroidView(\\n                modifier = modifier\\n                    .testTag(VIDEO_PLAYER_TAG),\\n                factory = {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Compose에 PlayerView를 포함시키는 AndroidView\"\n        }), \"\\n                    PlayerView(context).apply {\\n                        player = exoPlayer\\n                        layoutParams = FrameLayout.LayoutParams(\\n                            ViewGroup.LayoutParams.MATCH_PARENT,\\n                            ViewGroup.LayoutParams.MATCH_PARENT\\n                        )\\n                        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용 가능한 공간을 채우는 리사이즈 모드 설정\"\n        }), \"\\n                        resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL\\n                        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 불필요한 플레이어 컨트롤 숨김\"\n        }), \"\\n                        setShowNextButton(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \")\\n                        setShowPreviousButton(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \")\\n                        setShowFastForwardButton(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \")\\n                        setShowRewindButton(\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \")\\n                    }\\n                })\\n        ) {\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Composable이 소멸될 때 ExoPlayer 해제\"\n        }), \"\\n            onDispose {\\n                exoPlayer.release()\\n            }\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"VideoPlayer() 조합 가능한 함수 내용:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MediaItems 및 ExoPlayer 설정:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"비디오 정보를 담을 MediaItems 목록 생성.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ExoPlayer를 해당 MediaItems로 구성하고 준비하며, 비디오 변경 및 재생 상태 변경과 같은 이벤트를 처리할 수 있도록 리스너가 추가됨.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라이프사이클 관리:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"리사이클러브 옵서버가 추가되어 Composable 라이프사이클 이벤트를 기반으로 플레이어 상태를 관리합니다. 화면이 포그라운드에 있을 때 플레이어가 재생되고, 백그라운드에 있을 때는 일시정지됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AndroidView 및 PlayerView 통합:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"AndroidView Composable은 안드로이드 PlayerView를 Jetpack Compose에 삽입하는 데 사용됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PlayerView는 ExoPlayer 인스턴스, 레이아웃 매개변수 및 리사이즈 모드와 플레이어 컨트롤의 가시성과 같은 속성과 함께 구성됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"휴지통 효과를 위한 정리:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"DisposableEffect는 Composable이 dispose될 때 ExoPlayer 자원을 해제하기 위해 사용됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"총적으로, VideoPlayer Composable은 Jetpack Compose UI 내에서 비디오 재생을 위해 ExoPlayer를 초기화하고 관리하는 로직을 캡슐화합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"아래 저장소에서 코드를 더 주의 깊게 테스트하고 검토해 주셨으면 좋겠습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}