{"pageProps":{"post":{"title":"2024년에 알아야 할 시간을 절약하는 SQL 키워드 하나","description":"","date":"2024-05-17 19:11","slug":"2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024","content":"\n\n## SQL\n\n![Image 1](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_0.png)\n\n![Image 2](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_1.png)\n\n'GROUP BY... WITH ROLLUP'란 무엇인가요? — 예제와 함께 설명합니다!\n\n<div class=\"content-ad\"></div>\n\nSQL, 여러분들도 잘 아시다시피, 관계형 데이터베이스와 상호 작용하기 위해 사용하는 언어입니다. 필요한 데이터를 추출하고 변환하는 데 사용됩니다.\n\n데이터 변환에 관해서 얘기할 때, 데이터 집계는 가장 중요한 개념 중 하나입니다. 데이터 집계를 생각해 볼 때 GROUP BY를 사용하지 않을 수 없습니다.\n\n그러므로 GROUP BY는 중요한 것뿐만 아니라, 대규모 데이터 세트에서 의미 있는 것을 만들고 데이터로부터 가치 있는 통찰을 얻기 위해 필수적입니다.\n\n지난 번 글 중 하나에서 이미 GROUP BY를 쉽게 사용하고 얼마든지 숙달시킬 수 있는 방법을 설명했습니다.\n\n<div class=\"content-ad\"></div>\n\n읽어 주셨으면 좋겠어요!\n\n지금 이 글에서는 한 발자국 더 나아가서 GROUP BY에서 추가 키워드인 WITH ROLLUP을 사용하여 조금 더 시간을 절약하는 방법을 배울 거에요.\n\nWITH ROLLUP을 사용하면 하나의 쿼리로 집계 및 초계수준의 데이터 통찰력을 얻을 수 있어요.\n\n무슨 뜻인지 보여 드릴게요.\n\n<div class=\"content-ad\"></div>\n\n아래와 같이 간단한 9999 x 11 데이터셋이 있습니다.\n\n![Dataset](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_2.png)\n\n이 데이터셋에서 각 제품 카테고리별로 각 판매 관리자가 각 달에 선적한 총 수량을 파악하고 싶다고 가정해 봅시다.\n\n이는 일반적인 GROUP BY와 집계 함수인 SUM을 사용한 전형적인 예시입니다.\n\n<div class=\"content-ad\"></div>\n\n```sql\nSELECT sales_manager\n        , product_category\n        , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- Get total number of products shipped\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager\n        , product_category\n        , month_name;\n```\n\n데이터셋이 크기 때문에 결과를 간단하게 유지하기 위해 'Healthcare' 및 'Fashion' 제품 카테고리 및 'Pablo' 및 'Sofia'를 판매 관리자로 선택했습니다.\n\n<img src=\"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_3.png\" />\n\n그러나 이 출력을 받은 후 이 두 제품 카테고리에서 'Sofia'나 'Pablo'가 모든 달에 얼마나 많은 제품을 배송했는지 정확히 알고 싶어질 것입니다.```\n\n<div class=\"content-ad\"></div>\n\n한 가지 방법은 상기 결과로부터 total_quantity 열을 수동으로 합산하는 방법이 있습니다. 이 방법은 다소 지루할 수 있습니다.\n\n그렇지만, 만약 계산기를 사용하거나 수동으로 작업해야 한다면 SQL 데이터 변환의 의미가 무엇인가요?\n\n그래서 또 다른 방법으로는 SQL을 통해 sales_manager와 product_category만으로 행을 그룹화하는 또 다른 SQL 쿼리를 작성하는 것입니다.\n\n```sql\nSELECT sales_manager\n        , product_category\n        -- , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- 물품 출하량의 총 개수 가져오기\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager\n        , product_category;\n```\n\n<div class=\"content-ad\"></div>\n\n\n![OneTime-SavingSQLKeywordYouNeedtoKnowin2024](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_4.png)\n\n여기에서 원하는 것을 얻을 수 있지만, 여전히 당신이나 동료들이 생각할 문제가 있습니다: '소피아'나 '파블로'가 총으로 몇 개의 제품을 배송했는지 정확히 알고 싶다면?\n\n그에 대답하기 위해, 계산기를 사용하거나 다음과 같은 다른 SQL 문을 작성할 수 있습니다:\n\n```js\nSELECT sales_manager\n        -- , product_category\n        -- , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- 전체 제품 수를 얻습니다\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager;\n```\n\n<div class=\"content-ad\"></div>\n\n```md\n![SQL Keyword](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_5.png)\n\n많은 노력이 필요했죠, 맞죠?\n\n그렇죠! 이 키워드 — WITH ROLLUP으로 가능합니다. GROUP BY 절에 간단히 추가하세요.\n\n```js\nSELECT sales_manager\n        , product_category\n        , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- 운송된 제품의 총 수량 획득\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager\n        , product_category\n        , month_name WITH ROLLUP;\n``` \n\n\n<div class=\"content-ad\"></div>\n\n![image](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_6.png)\n\n와~ 빠르네요!\n\n내 컴퓨터에서는 WITH ROLLUP이 없는 쿼리와 실행하는 데 걸리는 시간이 동일했어요.\n\n위 출력에서 빨간색으로 강조된 행은 2번 질문에 대한 답을 제공합니다: 이 두 제품 카테고리 전체 월에 ‘Sofia’ 또는 ‘Pablo’가 보낸 제품 수는 얼마나 될까요? 파란색으로 강조된 행은 3번 질문에 답하는 데 도움이 됩니다: ‘Sofia’ 또는 ‘Pablo’가 총 보낸 제품 수는 얼마일까요?\n\n<div class=\"content-ad\"></div>\n\n지난 행은 아직 물어보지 않았지만 답변하는 질문을 다루고 있어요: ‘Pablo’와 ‘Sofia’가 이 두 제품 카테고리에서 함께 몇 개의 제품을 발송했는지요?\n\n보시다시피, WITH ROLLUP은 더 높은 수준의 집계를 얻도록 도와줍니다. 이는 여러 쿼리를 작성할 때 시간을 절약할 뿐만 아니라 여러 수준의 집계에 기반한 질문에도 단일 쿼리로 답변할 수 있도록 도와줍니다.\n\nWITH ROLLUP은 데이터의 2가지 보기를 옆에 나란히 제공하는데, 한 가지는 데이터를 여러 카테고리로 집계하고 다른 하나는 전반적인 그림을 보여줍니다.\n\n이러한 종류의 집계는 특히 데이터를 이해하고 그 안에 있는 트렌드와 패턴을 식별하는 데 도움이 될 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n여기까지...\n\n이야기를 좋아해주셨으면 좋겠고 유용하게 느꼈으며 빠르게 끝내셨으면 좋겠어요.\n\nGROUP BY 절에 WITH ROLLUP을 추가하면 하나의 SQL 쿼리로 상세한 통찰과 큰 그림을 함께 얻을 수 있습니다. 이를 사용하여 데이터의 숨겨진 트렌드를 탐색하고 최종적으로 정보 기반 결정을 내릴 수 있습니다.\n\n유용하게 느껴진 부분 강조하고 생각에 대해 의견을 나눠주세요.\n\n<div class=\"content-ad\"></div>\n\n더 많은 전문가 팁과 노하우를 위해 팔로우해주세요. 이 글을 꼭 여러분의 네트워크와 공유해주세요!\n\n읽어주셔서 감사합니다.","ogImage":{"url":"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_0.png"},"coverImage":"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"SQL\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_0.png\",\n        alt: \"Image 1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_1.png\",\n        alt: \"Image 2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"'GROUP BY... WITH ROLLUP'란 무엇인가요? — 예제와 함께 설명합니다!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SQL, 여러분들도 잘 아시다시피, 관계형 데이터베이스와 상호 작용하기 위해 사용하는 언어입니다. 필요한 데이터를 추출하고 변환하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터 변환에 관해서 얘기할 때, 데이터 집계는 가장 중요한 개념 중 하나입니다. 데이터 집계를 생각해 볼 때 GROUP BY를 사용하지 않을 수 없습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러므로 GROUP BY는 중요한 것뿐만 아니라, 대규모 데이터 세트에서 의미 있는 것을 만들고 데이터로부터 가치 있는 통찰을 얻기 위해 필수적입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지난 번 글 중 하나에서 이미 GROUP BY를 쉽게 사용하고 얼마든지 숙달시킬 수 있는 방법을 설명했습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어 주셨으면 좋겠어요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금 이 글에서는 한 발자국 더 나아가서 GROUP BY에서 추가 키워드인 WITH ROLLUP을 사용하여 조금 더 시간을 절약하는 방법을 배울 거에요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WITH ROLLUP을 사용하면 하나의 쿼리로 집계 및 초계수준의 데이터 통찰력을 얻을 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"무슨 뜻인지 보여 드릴게요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래와 같이 간단한 9999 x 11 데이터셋이 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_2.png\",\n        alt: \"Dataset\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 데이터셋에서 각 제품 카테고리별로 각 판매 관리자가 각 달에 선적한 총 수량을 파악하고 싶다고 가정해 봅시다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이는 일반적인 GROUP BY와 집계 함수인 SUM을 사용한 전형적인 예시입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" sales_manager\\n        , product_category\\n        , \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"EXTRACT\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"MONTH\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" order_date) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" month_name\\n        , \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"SUM\"\n        }), \"(quantity) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" total_quantity \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"-- Get total number of products shipped\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" alldata.salesdata\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"WHERE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AND\"\n        }), \" sales_manager \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"IN\"\n        }), \" (\\\"Pablo\\\", \\\"Sofia\\\")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AND\"\n        }), \" product_category \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"IN\"\n        }), \" (\\\"Healthcare\\\", \\\"Fashion\\\")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"GROUP\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BY\"\n        }), \" sales_manager\\n        , product_category\\n        , month_name;\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터셋이 크기 때문에 결과를 간단하게 유지하기 위해 'Healthcare' 및 'Fashion' 제품 카테고리 및 'Pablo' 및 'Sofia'를 판매 관리자로 선택했습니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_3.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러나 이 출력을 받은 후 이 두 제품 카테고리에서 'Sofia'나 'Pablo'가 모든 달에 얼마나 많은 제품을 배송했는지 정확히 알고 싶어질 것입니다.```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"한 가지 방법은 상기 결과로부터 total_quantity 열을 수동으로 합산하는 방법이 있습니다. 이 방법은 다소 지루할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그렇지만, 만약 계산기를 사용하거나 수동으로 작업해야 한다면 SQL 데이터 변환의 의미가 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 또 다른 방법으로는 SQL을 통해 sales_manager와 product_category만으로 행을 그룹화하는 또 다른 SQL 쿼리를 작성하는 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-sql\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"SELECT\"\n        }), \" sales_manager\\n        , product_category\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"-- , EXTRACT(MONTH FROM order_date) AS month_name\"\n        }), \"\\n        , \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"SUM\"\n        }), \"(quantity) \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AS\"\n        }), \" total_quantity \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"-- 물품 출하량의 총 개수 가져오기\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"FROM\"\n        }), \" alldata.salesdata\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"WHERE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AND\"\n        }), \" sales_manager \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"IN\"\n        }), \" (\\\"Pablo\\\", \\\"Sofia\\\")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"AND\"\n        }), \" product_category \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"IN\"\n        }), \" (\\\"Healthcare\\\", \\\"Fashion\\\")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"GROUP\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"BY\"\n        }), \" sales_manager\\n        , product_category;\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_4.png\",\n        alt: \"OneTime-SavingSQLKeywordYouNeedtoKnowin2024\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에서 원하는 것을 얻을 수 있지만, 여전히 당신이나 동료들이 생각할 문제가 있습니다: '소피아'나 '파블로'가 총으로 몇 개의 제품을 배송했는지 정확히 알고 싶다면?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그에 대답하기 위해, 계산기를 사용하거나 다음과 같은 다른 SQL 문을 작성할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" sales_manager\\n        -- , product_category\\n        -- , \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"EXTRACT\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MONTH\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" order_date) \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \" month_name\\n        , \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"SUM\"\n        }), \"(quantity) \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \" total_quantity -- 전체 제품 수를 얻습니다\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" alldata.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"salesdata\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WHERE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AND\"\n        }), \" sales_manager \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Pablo\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Sofia\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AND\"\n        }), \" product_category \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IN\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Healthcare\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Fashion\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"GROUP\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BY\"\n        }), \" sales_manager;\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [\"![\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"SQL Keyword\"\n        }), \"](\", _jsx(_components.span, {\n          className: \"hljs-link\",\n          children: \"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_5.png\"\n        }), \")\\n\\n많은 노력이 필요했죠, 맞죠?\\n\\n그렇죠! 이 키워드 — WITH ROLLUP으로 가능합니다. GROUP BY 절에 간단히 추가하세요.\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-code\",\n          children: \"```js\\nSELECT sales_manager\\n        , product_category\\n        , EXTRACT(MONTH FROM order_date) AS month_name\\n        , SUM(quantity) AS total_quantity -- 운송된 제품의 총 수량 획득\\nFROM alldata.salesdata\\nWHERE 1=1\\nAND sales_manager IN (\\\"Pablo\\\", \\\"Sofia\\\")\\nAND product_category IN (\\\"Healthcare\\\", \\\"Fashion\\\")\\nGROUP BY sales_manager\\n        , product_category\\n        , month_name WITH ROLLUP;\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_6.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"와~ 빠르네요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"내 컴퓨터에서는 WITH ROLLUP이 없는 쿼리와 실행하는 데 걸리는 시간이 동일했어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 출력에서 빨간색으로 강조된 행은 2번 질문에 대한 답을 제공합니다: 이 두 제품 카테고리 전체 월에 ‘Sofia’ 또는 ‘Pablo’가 보낸 제품 수는 얼마나 될까요? 파란색으로 강조된 행은 3번 질문에 답하는 데 도움이 됩니다: ‘Sofia’ 또는 ‘Pablo’가 총 보낸 제품 수는 얼마일까요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지난 행은 아직 물어보지 않았지만 답변하는 질문을 다루고 있어요: ‘Pablo’와 ‘Sofia’가 이 두 제품 카테고리에서 함께 몇 개의 제품을 발송했는지요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보시다시피, WITH ROLLUP은 더 높은 수준의 집계를 얻도록 도와줍니다. 이는 여러 쿼리를 작성할 때 시간을 절약할 뿐만 아니라 여러 수준의 집계에 기반한 질문에도 단일 쿼리로 답변할 수 있도록 도와줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WITH ROLLUP은 데이터의 2가지 보기를 옆에 나란히 제공하는데, 한 가지는 데이터를 여러 카테고리로 집계하고 다른 하나는 전반적인 그림을 보여줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 종류의 집계는 특히 데이터를 이해하고 그 안에 있는 트렌드와 패턴을 식별하는 데 도움이 될 수 있어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기까지...\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이야기를 좋아해주셨으면 좋겠고 유용하게 느꼈으며 빠르게 끝내셨으면 좋겠어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"GROUP BY 절에 WITH ROLLUP을 추가하면 하나의 SQL 쿼리로 상세한 통찰과 큰 그림을 함께 얻을 수 있습니다. 이를 사용하여 데이터의 숨겨진 트렌드를 탐색하고 최종적으로 정보 기반 결정을 내릴 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"유용하게 느껴진 부분 강조하고 생각에 대해 의견을 나눠주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 많은 전문가 팁과 노하우를 위해 팔로우해주세요. 이 글을 꼭 여러분의 네트워크와 공유해주세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어주셔서 감사합니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}