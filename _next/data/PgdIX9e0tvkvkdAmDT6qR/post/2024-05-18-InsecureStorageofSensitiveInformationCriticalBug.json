{"pageProps":{"post":{"title":"민감한 정보의 불안정한 저장  중요한 버그","description":"","date":"2024-05-18 21:01","slug":"2024-05-18-InsecureStorageofSensitiveInformationCriticalBug","content":"\n\n# 개요\n\n<img src=\"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_0.png\" />\n\n# 재현 단계:\n\n먼저 대상에서 서브도메인 열거가 필요합니다. 예를 들어 subfinder 및 httpx를 사용하여 도메인 정보를 얻을 수 있습니다. 다음 명령을 사용하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nsubfinder -d example.com|httpx -td --title --status-code \n```\n\n그 다음으로 터미널에서 관리자 제목을 찾을 것이고, 이 도메인은 내 방법론의 많은 테스트 케이스에 적합한 좋은 도메인입니다. 이제 브라우저를 열어 URL을 입력하세요\n\n<img src=\"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_1.png\" />\n\n이 도메인에는 많은 콘텐츠가 있습니다 👾\n\n\n<div class=\"content-ad\"></div>\n\n식당을 찾아서 거기에서 점심을 먹어요. 그리고 그 사진을 찍어요.\n\n<div class=\"content-ad\"></div>\n\n```js\ncat commons-logging-1.1.1.jar|strings\n```\n\n이제 데이터가 있지만 충분하지 않아요 :\n\n![Image](/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_3.png)\n\n이후에, jadex에서 jar 파일을 열었어요. 이제 무엇이 있는지 확인해볼게요:\n\n<div class=\"content-ad\"></div>\n\n\n![Screenshot 1](/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_4.png)\n\n![Screenshot 2](/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_5.png)\n\nand boom 💥I have default user and password server backend code on java and many more data on this program.\n\n![Screenshot 3](/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_6.png)\n\n\n<div class=\"content-ad\"></div>\n\n행복한 사냥을 하세요 XD","ogImage":{"url":"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_0.png"},"coverImage":"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"개요\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"재현 단계:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 대상에서 서브도메인 열거가 필요합니다. 예를 들어 subfinder 및 httpx를 사용하여 도메인 정보를 얻을 수 있습니다. 다음 명령을 사용하세요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"subfinder -d example.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"com\"\n        }), \"|httpx -td --title --status-code \\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그 다음으로 터미널에서 관리자 제목을 찾을 것이고, 이 도메인은 내 방법론의 많은 테스트 케이스에 적합한 좋은 도메인입니다. 이제 브라우저를 열어 URL을 입력하세요\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_1.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 도메인에는 많은 콘텐츠가 있습니다 👾\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"식당을 찾아서 거기에서 점심을 먹어요. 그리고 그 사진을 찍어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"cat commons-logging-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.1\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"jar\"\n        }), \"|strings\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 데이터가 있지만 충분하지 않아요 :\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_3.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이후에, jadex에서 jar 파일을 열었어요. 이제 무엇이 있는지 확인해볼게요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_4.png\",\n        alt: \"Screenshot 1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_5.png\",\n        alt: \"Screenshot 2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"and boom 💥I have default user and password server backend code on java and many more data on this program.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-InsecureStorageofSensitiveInformationCriticalBug_6.png\",\n        alt: \"Screenshot 3\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"행복한 사냥을 하세요 XD\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}