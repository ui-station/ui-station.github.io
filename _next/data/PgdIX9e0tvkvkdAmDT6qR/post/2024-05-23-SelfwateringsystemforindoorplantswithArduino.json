{"pageProps":{"post":{"title":"아두이노로 만든 실내 식물 자동 관수 시스템","description":"","date":"2024-05-23 16:41","slug":"2024-05-23-SelfwateringsystemforindoorplantswithArduino","content":"\n\n여름이 빠르게 다가오고 휴가 시간이 가까워지면, 몇 주에 한 번 이웃에게 물 주라고 부탁하지 않고도 식물을 살려 놓는 해결책이 필요했죠.\n\n그래서 나는 아마존에서 DIY 아두이노 기반 자동 관개 시스템과 아두이노 보드를 구입해 작업을 시작했어요.\n\n부품 목록:\n- DIY 관개 시스템\n- 아두이노 UNO\n- 전선 및 솔더\n\n설치 위치에 따라 아두이노 보드와 펌프를 전원 공급하기 위해 USB 충전 블록도 필요할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 배선 다이어그램\n\n![다이어그램](/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png)\n\n먼저, 센서를 물에 담그고 말리면 센서가 반환하는 값들을 확인하기 위해 캘리브레이션을 해야 합니다.\n\n센서의 노란색 케이블을 보드의 A0에 연결하고 아래의 코드 스니펫을 사용하여 각 센서를 캘리브레이션하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n void setup()\n { \n   Serial.begin(9600);\n }\n \n void loop()\n {\n   Serial.println(analogRead(A0));\n   delay(100);\n }\n```\n\n수중에 있을 때 550을 받았고, 건조할 때 190을 받았어요. 센서 자체에 영구 마커를 사용하여 이러한 값을 적는 것이 편리하다고 생각합니다. 각 센서에 대해 반복하세요.\n\n![이미지](/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_1.png)\n\n각 센서는 토양 수분 퍼센트가 `20%` 미만인 식물에 물을 보내기 위해 펌프를 작동시키는 중계를 트리거합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 코드이며 제 Github에서도 확인할 수 있습니다. \n\n```js\nconst int relayPins[] = {2, 3, 4, 5};\nconst int sensorPins[] = {A0, A1, A2, A3};\nconst int numSensors = sizeof(sensorPins) / sizeof(sensorPins[0]);\nconst int readingDelay = 2000;\n\nvoid setup()\n{\n  Serial.begin(9600);\n  for (int i = 0; i < numSensors; i++)\n  {\n    pinMode(relayPins[i], OUTPUT);\n    pinMode(sensorPins[i], INPUT);\n    Serial.print(\"Reading From Sensor \");\n    Serial.print(i);\n    Serial.println(\" ...\");\n    delay(readingDelay);\n  }\n}\n\nvoid loop()\n{\n  for (int i = 0; i < numSensors; i++)\n  {\n    int outputValue = analogRead(sensorPins[i]);\n    Serial.print(\"Sensor \");\n    Serial.print(i);\n    Serial.print(\" - Analog Moisture: \");\n    Serial.println(outputValue);\n    outputValue = map(outputValue, 550, 190, 0, 100);\n    Serial.print(\"Sensor \");\n    Serial.print(i);\n    Serial.print(\" - Moisture: \");\n    Serial.print(outputValue);\n    Serial.println(\"%\");\n    \n    if (outputValue < 20)\n    {\n      digitalWrite(relayPins[i], LOW);\n    }\n    else\n    {\n      digitalWrite(relayPins[i], HIGH);\n    }\n    \n    delay(1000);\n  }\n}\n```\n\n코드에서 주요한 부분은 수분이 많을 때(수중 - 550)와 건조할 때(공기 - 190)에 할당하는 값들입니다. 그런 다음 이러한 값을 0에서 100까지의 백분율로 매핑합니다. 그 후 보드는 센서를 반복하여 각 센서가 20% 미만인 경우 릴레이와 펌프를 트리거하기 시작합니다.\n\n<div class=\"content-ad\"></div>\n\n케이블 관리는 나중에 하지만 첫 번째 수정으로는 매우 만족합니다.\n\n시스템은 모니터링되고 성능이 평가될 것이며, 이 센서에 문제가 있는 다른 사용자들에 대해 온라인에서 읽었으므로 기다려보겠습니다.\n\n이상적으로는 WIFI를 지원하는 버전의 보드로 업그레이드하고, Grafana에 연결하여 수분뿐만 아니라 온도, 습도 등과 같은 다른 측정 항목을 시간별로 모니터링하고 싶습니다.","ogImage":{"url":"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png"},"coverImage":"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"여름이 빠르게 다가오고 휴가 시간이 가까워지면, 몇 주에 한 번 이웃에게 물 주라고 부탁하지 않고도 식물을 살려 놓는 해결책이 필요했죠.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 나는 아마존에서 DIY 아두이노 기반 자동 관개 시스템과 아두이노 보드를 구입해 작업을 시작했어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"부품 목록:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"DIY 관개 시스템\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"아두이노 UNO\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"전선 및 솔더\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"설치 위치에 따라 아두이노 보드와 펌프를 전원 공급하기 위해 USB 충전 블록도 필요할 수 있어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"배선 다이어그램\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png\",\n        alt: \"다이어그램\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저, 센서를 물에 담그고 말리면 센서가 반환하는 값들을 확인하기 위해 캘리브레이션을 해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"센서의 노란색 케이블을 보드의 A0에 연결하고 아래의 코드 스니펫을 사용하여 각 센서를 캘리브레이션하세요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setup\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \")\\n { \\n   \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"begin\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9600\"\n        }), \");\\n }\\n \\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"loop\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \")\\n {\\n   \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"println\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"analogRead\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"A0\"\n        }), \"));\\n   \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delay\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \");\\n }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"수중에 있을 때 550을 받았고, 건조할 때 190을 받았어요. 센서 자체에 영구 마커를 사용하여 이러한 값을 적는 것이 편리하다고 생각합니다. 각 센서에 대해 반복하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"각 센서는 토양 수분 퍼센트가 \", _jsx(_components.code, {\n        children: \"20%\"\n      }), \" 미만인 식물에 물을 보내기 위해 펌프를 작동시키는 중계를 트리거합니다.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 코드이며 제 Github에서도 확인할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" int relayPins[] = {\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" int sensorPins[] = {\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"A0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"A1\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"A2\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"A3\"\n        }), \"};\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" int numSensors = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sizeof\"\n        }), \"(sensorPins) / \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sizeof\"\n        }), \"(sensorPins[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"]);\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" int readingDelay = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2000\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setup\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \")\\n{\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"begin\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9600\"\n        }), \");\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (int i = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"; i < numSensors; i++)\\n  {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"pinMode\"\n        }), \"(relayPins[i], \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"OUTPUT\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"pinMode\"\n        }), \"(sensorPins[i], \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"INPUT\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Reading From Sensor \\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(i);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"println\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\" ...\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delay\"\n        }), \"(readingDelay);\\n  }\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"loop\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \")\\n{\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (int i = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"; i < numSensors; i++)\\n  {\\n    int outputValue = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"analogRead\"\n        }), \"(sensorPins[i]);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Sensor \\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(i);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\" - Analog Moisture: \\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"println\"\n        }), \"(outputValue);\\n    outputValue = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"map\"\n        }), \"(outputValue, \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"550\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"190\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Sensor \\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(i);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\" - Moisture: \\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(outputValue);\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Serial\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"println\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"%\\\"\"\n        }), \");\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (outputValue < \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20\"\n        }), \")\\n    {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"digitalWrite\"\n        }), \"(relayPins[i], \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LOW\"\n        }), \");\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"\\n    {\\n      \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"digitalWrite\"\n        }), \"(relayPins[i], \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HIGH\"\n        }), \");\\n    }\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delay\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \");\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드에서 주요한 부분은 수분이 많을 때(수중 - 550)와 건조할 때(공기 - 190)에 할당하는 값들입니다. 그런 다음 이러한 값을 0에서 100까지의 백분율로 매핑합니다. 그 후 보드는 센서를 반복하여 각 센서가 20% 미만인 경우 릴레이와 펌프를 트리거하기 시작합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"케이블 관리는 나중에 하지만 첫 번째 수정으로는 매우 만족합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시스템은 모니터링되고 성능이 평가될 것이며, 이 센서에 문제가 있는 다른 사용자들에 대해 온라인에서 읽었으므로 기다려보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이상적으로는 WIFI를 지원하는 버전의 보드로 업그레이드하고, Grafana에 연결하여 수분뿐만 아니라 온도, 습도 등과 같은 다른 측정 항목을 시간별로 모니터링하고 싶습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}