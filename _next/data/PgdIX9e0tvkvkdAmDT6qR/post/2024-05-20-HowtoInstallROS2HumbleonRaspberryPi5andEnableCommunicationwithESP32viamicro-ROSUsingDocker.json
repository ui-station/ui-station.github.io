{"pageProps":{"post":{"title":"Raspberry Pi 5에 ROS2 Humble을 설치하고 Docker를 사용하여 micro-ROS를 통해 ESP32와 통신하는 방법","description":"","date":"2024-05-20 19:55","slug":"2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker","content":"\n\n<img src=\"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_0.png\" />\n\n어려움을 겪은 끝에, Raspberry Pi 5를 ESP32 마이크로컨트롤러에 연결하는 데 성공했습니다. 목표는 Raspberry Pi 5와 ESP32-WROOM-32 마이크로컨트롤러 간에 마이크로-ROS를 통한 통신을 활성화하는 것이었습니다.\n\n다른 사람들이 시간을 절약할 수 있도록, 이 상세한 튜토리얼을 작성하기로 결정했습니다. 아래 단계에 따라 따라할 수 있습니다:\n\n- Raspberry Pi 5에 Ubuntu 23.10 Server 설치\n- Raspberry Pi 5에 Docker 설치\n- ROS2 Humble 설치를 위한 Dockerfile 생성\n- ROS2 Humble 설치(Dockerfile 내에서)\n- 마이크로-ROS 설치(Dockerfile 내에서)\n- Docker 이미지 빌드\n- ROS2 Humble 도커 컨테이너 실행\n- 마이크로-ROS 예제 빌드 및 플래시\n- 마이크로-ROS 에이전트 생성 및 실행\n\n<div class=\"content-ad\"></div>\n\n## 라즈베리 파이5에 우분투 23.10 서버 설치하기\n\n우선, Raspberry Pi Imager를 사용하여 라즈베리 파이 5에 우분투 23.10 서버 운영 체제를 설치했습니다. 이를 통해 화면을 사용하지 않고 SSH를 통해 장치에 연결할 수 있었습니다.\n\n## Docker 설치하기\n\nSSH를 통해 Raspberry Pi 5에 액세스한 후 Docker를 설치했습니다. ROS2의 Humble 배포의 지원하는 운영 체제인 Ubuntu 22.04를 사용하기 위해 Docker를 사용하면 Raspberry Pi 5에서 호환 환경을 만들 수 있습니다. (https://docs.docker.com/engine/install/ubuntu/)\n\n<div class=\"content-ad\"></div>\n\n\n```js\nsudo apt-get update\n\nsudo apt-get install ca-certificates curl\n\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\necho   \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\nsudo usermod -aG docker $USER\n```\n## Raspberry Pi5용 ROS2 Humble 설치를 위한 Dockerfile\n\n원하는 ROS2 버전이 이미 포함된 Docker 이미지로 시작할 수 있습니다. 제 경우에는 필요한 Ubuntu 버전인 22.04(Jammy)에서 시작하는 Dockerfile을 만들기로 결정했습니다.\n\n```js\nFROM ubuntu:jammy \n\nRUN locale  # UTF-8 확인\nRUN apt update && apt install locales -y\nRUN locale-gen it_IT it_IT.UTF-8\nRUN update-locale LC_ALL=it_IT.UTF-8 LANG=it_IT.UTF-8\nRUN export LANG=it_IT.UTF-8\n\n# 지역 시간대 설정\nENV ROS_VERSION=2\nENV ROS_DISTRO=humble\nENV ROS_PYTHON_VERSION=3\nENV TZ=Europe/Rome\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n```\n\n\n<div class=\"content-ad\"></div>\n\n도커 파일은 Ubuntu 22.04의 기본 이미지로 시작합니다. 그 다음으로 로캘 및 시간대가 설정됩니다. 저의 경우에는 이탈리아로 설정되어 있으며, 이는 ROS2를 설치하는 데 필요합니다.\n\n이 설정 이후에는 ROS2 패키지를 설치할 때 시간대를 입력하지 않고도 필요한 환경 변수를 몇 개 설정했습니다.\n\nMarkdown 형식으로 표를 바꿔주겠습니다:\n\n\n| 명령어                                     | 설명                                                                           |\n|-------------------------------------------|--------------------------------------------------------------------------------|\n| RUN apt install software-properties-common -y | 소프트웨어 속성 공통 부분 설치                                             |\n| RUN add-apt-repository universe            | Universe 저장소 추가                                                         |\n| RUN apt update && apt install curl -y      | 업데이트 후 curl 설치                                                          |\n| RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg | ROS 키 다운로드 |\n| RUN echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | tee /etc/apt/sources.list.d/ros2.list > /dev/null | ROS2 리스트 추가 |\n| RUN apt update && apt upgrade -y              | 업데이트 및 업그레이드                                                               |\n\n\n이 부분의 도커 파일에서는 ROS2 설치를 위해 시스템을 구성하며, 필요한 저장소를 추가하고 시스템 패키지를 업데이트합니다(설치에 관한 공식 가이드는 여기에서 확인할 수 있습니다: https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html).\n\n<div class=\"content-ad\"></div>\n\n\n<img src=\"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_1.png\" />\n\n시스템을 구성한 후에는 ROS2 Humble 및 micro-ROS를 설치할 준비가 되었습니다. 두 개의 스크립트를 사용했어요: install_ros2.sh와 install_microros_esp32.sh입니다. 이 스크립트들은 작업 디렉토리인 /ros2_project에 복사되고 실행 가능하게 만들었습니다.\n\n```js\nWORKDIR /ros2_project\nCOPY scripts/*.sh /ros2_project/\n\nRUN chmod +x ./*.sh\nRUN ./install_ros2.sh\nRUN ./install_microros_esp32.sh\n```\n\n## ROS2 Humble 설치\n\n\n<div class=\"content-ad\"></div>\n\n```js\n# install_ros2.sh\n#!/bin/bash\n\n# ROS2 베이스 및 개발 도구 설치\napt install ros-humble-ros-base -y\napt install ros-dev-tools -y\n\n# 셸을 설정하여 ROS2 설정 파일을 자동으로 소스로 지정합니다.\n# echo 'source /opt/ros/humble/setup.bash' >> ~/.bashrc (optional)\necho 'source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash' >> ~/.bashrc\n```\n\n## 마이크로-ROS 설치\n\nmicro-ROS를 설치하고 사용하려면 먼저 ESP32 칩에 호환되는 소프트웨어 개발 환경을 설정해야 합니다. 저는 micro-ROS 개발자들에 의해 테스트된 버전 5.2를 선택했습니다.\n\n```js\n# install_espressif.sh\n#!/bin/bash\n\n# 'esp' 폴더가 있는지 확인합니다.\nif [ ! -d ~/esp ]; then\n\n    # 패키지 목록을 업데이트하고 필요한 종속성을 설치합니다.\n    apt-get update -y\n    apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0 -y\n    \n    # ESP 개발을 위한 디렉토리를 생성하고 ESP-IDF 리포지토리를 복제합니다.\n    mkdir -p ~/esp\n    cd ~/esp\n    git clone -b v5.2 --recursive https://github.com/espressif/esp-idf.git\n\n    # ESP-IDF 디렉토리로 이동하여 ESP32 도구체인을 설치합니다.\n    cd ~/esp/esp-idf\n    ./install.sh esp32\n\n    # IDF_PATH 환경 변수를 설정하고 지속적으로 유지합니다.\n    export IDF_PATH=$HOME/esp/esp-idf\n    echo export IDF_PATH=$HOME/esp/esp-idf >> /root/.bashrc\n    . $IDF_PATH/export.sh\nelse\n    echo \"'esp' 폴더가 이미 있습니다.\"\nfi\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n# install_microros_esp32.sh\n\n#!/bin/bash\n# ESP32 설정 스크립트 실행하기\n./install_espressif.sh\n\n# 작업 공간 생성 및 micro-ROS 도구 다운로드하기\ngit clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_espidf_component.git\n\n# 의존성 설치하기\nexport IDF_PATH=$HOME/esp/esp-idf\nsource $IDF_PATH/export.sh && pip3 install catkin_pkg lark-parser colcon-common-extensions\n```\n\n## 도커 이미지 빌드\n\n이 단계에서 우리의 Dockerfile은 다음과 같이 나타납니다:\n\n```js\nFROM ubuntu:jammy \n\nRUN locale  # UTF-8 확인\nRUN apt update && apt install locales -y\nRUN locale-gen it_IT it_IT.UTF-8\nRUN update-locale LC_ALL=it_IT.UTF-8 LANG=it_IT.UTF-8\nRUN export LANG=it_IT.UTF-8\n\n# 시간대 설정\nENV ROS_VERSION=2\nENV ROS_DISTRO=humble\nENV ROS_PYTHON_VERSION=3\nENV TZ=Europe/Rome\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# 필요한 리포지토리 추가 및 시스템 패키지 업데이트\nRUN apt install software-properties-common -y\nRUN add-apt-repository universe\nRUN apt update && apt install curl -y\nRUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\nRUN echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | tee /etc/apt/sources.list.d/ros2.list > /dev/null\nRUN apt update && apt upgrade -y\n\n# 작업 디렉토리 지정하고 스크립트 복사\nWORKDIR /ros2_project\nCOPY scripts/*.sh /ros2_project/\n\n# 스크립트를 실행 가능하도록 하고 실행하기\nRUN chmod +x ./*.sh\nRUN ./install_ros2.sh\nRUN ./install_microros_esp32.sh\n```\n\n<div class=\"content-ad\"></div>\n\n도커 파일이 있는 디렉토리에서 다음 명령을 실행하세요: docker build . -t `저장소_이름:태그`\n\n출력은 다음과 같이 나타납니다:\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_2.png)\n\n생성된 이미지를 확인하려면 \"docker images\" 명령을 사용하여 사용 가능한 모든 도커 이미지를 볼 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_3.png)\n\n## ROS2 Humble 도커 컨테이너 실행하기\n\n이미지를 만든 후에는 해당 이미지를 사용하여 컨테이너를 실행할 수 있습니다. 컨테이너는 가벼우며 응용 프로그램과 의존성을 실행하는 격리된 환경으로, 가상 머신과 유사하지만 오버헤드가 적습니다.\n\n컨테이너를 실행하려면:\n\n\n<div class=\"content-ad\"></div>\n\n```bash\ndocker run -it \\\n    --name=ros2_humble \\\n    --net=host \\\n    --privileged \\\n    -v /dev:/dev \\\n    ros2rover:humble-pi5-esp32-v1 \\\n    bash\n```\n\n여기서:\n\n- -it: 의사-TTY를 할당하고 STDIN을 열어 놓아 컨테이너와 상호 작용할 수 있게 함.\n- --name=ros2_humble: 컨테이너의 이름을 ros2_humble로 지정함\n- --net=host: 호스트와 네트워크 네임스페이스를 공유하여 컨테이너가 호스트 네트워크 인터페이스를 사용할 수 있게 함.\n- --privileged: 컨테이너를 권한 부여 모드로 실행하여 호스트의 모든 장치에 액세스할 수 있게 함.\n- -v /dev:/dev: 호스트의 /dev 디렉토리를 컨테이너에 마운트하여 컨테이너가 호스트의 모든 장치 파일에 액세스할 수 있게 함.\n- ros2rover:humble-pi5-esp32-v1: 컨테이너 생성 시 사용할 Docker 이미지의 이름을 지정함.\n- bash: 컨테이너 내에서 실행할 명령을 지정함. 이 경우에는 Bash 셸을 시작함.\n\n이 명령을 실행하면 컨테이너 내의 작업 디렉토리에서 Bash 셸 프롬프트가 열리며, 컨테이너 환경과 직접 상호 작용할 수 있게 됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 미크로-ROS int32_publisher 예제 빌드 및 플래시\n\n![예제 이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_4.png)\n\n기능을 확인하려면 복제된 micro-ROS 저장소에 포함된 예제 중 하나를 빌드할 수 있습니다. 다음은 따라야 할 단계입니다:\n\n- 다음 명령어로 예제 폴더로 이동하세요:\n\ncd micro_ros_espidf_component/examples/int32_publisher\n\n- ESP-IDF를 위해 소프트웨어 개발 환경을 활성화하세요:\n\n. $IDF_PATH/export.sh\n\n- 빌드할 타겟을 설정하세요 (이 경우 ESP32): \n\nidf.py set-target esp32\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_5.png)\n\n- 와이파이 연결 및 IP 호스트 대상 설정 (Raspberry Pi5 IP):\nrunidf.py menuconfig을 실행한 후 micro-ROS 설정으로 이동하여 micro-ROS Agent IP를 호스트 IP로 설정하고 (Raspberry Pi5 IP를 알고 싶다면 bash 쉘에서 ifconfig를 실행하세요) Raspberry Pi5와 ESP32가 연결될 네트워크의 SSID 및 비밀번호로 WiFi 구성을 설정하세요.\n그런 다음 “S”로 저장하고 “Q”로 나가세요.\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_6.png)\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_7.png)\n\n\n<div class=\"content-ad\"></div>\n\n\n![image](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_8.png)\n\n- 명령어를 사용하여 예제를 빌드하세요: idf.py build\n\n![image](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_9.png)\n\n- micro-USB 케이블을 사용하여 ESP32 보드를 라즈베리 파이5에 연결하고 읽기 및 쓰기 권한이 있는지 확인하세요.\n연결하는 USB 포트에 할당된 장치 이름을 확인하려면 해당 포트에 연결하기 전에 다음 명령어를 실행하세요: journalctl --follow (라즈베리 파이5 셸에서 실행, 컨테이너에서는 실행하지 마세요).\n장치 이름을 알면 다음 명령어를 사용하여 라즈베리 파이5가 읽고 쓸 수 있게 설정할 수 있습니다: 내 경우에는 `device name`이 ttyUSB0과 같습니다.\nsudo chmod 666 /dev/`device name`\n\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_10.png)\n\n- 마지막으로 ESP32 보드에 펌웨어를 플래시하는 방법입니다: idf.py flash\n여러 USB 장치가 연결된 경우 포트를 지정할 수 있습니다: idf.py -p /dev/ttyUSB0 flash\n\n## 마이크로-ROS 에이전트를 생성하고 ESP32에서 발행된 메시지를 읽어보세요\n\n마이크로-ROS 에이전트는 ESP32의 마이크로-ROS 노드와 ROS 2 네트워크 간의 다리 역할을 합니다. 통신을 수립하려면 적절한 이미지를 사용하여 Docker를 통해 마이크로-ROS 에이전트를 실행하세요:\n\n\n<div class=\"content-ad\"></div>\n\n\n# udp4은 IPv4 네트워크 상에서 통신을 위해 UDP를 사용하는 것을 특히 나타냅니다.\n도커 실행 -it --rm --net=host microros/micro-ros-agent:humble udp4 --port 8888 -v6\n\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_11.png)\n\nESP32 보드를 전원을 다시 켜고 끈 후에는, micro-ROS Agent 컨테이너 쉘에서 다음 출력을 볼 수 있어야 합니다:\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_12.png)\n\n\n<div class=\"content-ad\"></div>\n\nROS2 Humble 컨테이너에서 ROS2 Humble 환경을 소스로 지정한 다음에는 다음을 작성하세요: ros2 topic list.\n이제 /freertos_int32_publisher 토픽이 나타날 것이며, 여기에 ESP32가 정수 (int32) 데이터를 발행 중입니다.\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_13.png)\n\n이제 해당 토픽에서 발행된 메시지를 읽을 수 있습니다. ESP32가 /freertos_int32_publisher 토픽에서 발행한 메시지를 구독하고 표시하려면 다음 명령을 사용하여 ROS2 Humble 컨테이너 내에서 메시지를 구독하세요: ros2 topic echo /freertos_int32_publisher\n\n![이미지](/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_14.png)\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이렇게까지 와주셔서 축하드립니다! 이 포괄적인 안내를 따라가면, Docker를 통해 ROS2 Humble과 micro-ROS를 활용하여 Raspberry Pi 5와 ESP32 마이크로컨트롤러 간의 통신을 성공적으로 활성화할 수 있습니다.\n\n이 설정은 Docker가 제공하는 유연성과 격리 기능을 활용하여 안정적인 환경을 제공하여 마이크로-ROS 애플리케이션을 개발하고 테스트할 수 있습니다.\n\n이 단계를 따라가면, 이제 마이크로-ROS를 활용하여 Raspberry Pi 5와 ESP32 간의 통신을 브릿지하여 다양한 사물 인터넷(IoT) 애플리케이션에 활용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n행운을 빌며 코딩을 즐기세요! ROS2, Raspberry Pi 5 및 ESP32로 가능한 범위를 넓히는 실험을 망설이지 마세요.\n\n저와 연락해요: [https://www.linkedin.com/in/antonioconsiglio/](https://www.linkedin.com/in/antonioconsiglio/)","ogImage":{"url":"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_0.png"},"coverImage":"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_0.png","tag":["Tech"],"readingTime":13},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    img: \"img\",\n    h1: \"h1\",\n    div: \"div\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"어려움을 겪은 끝에, Raspberry Pi 5를 ESP32 마이크로컨트롤러에 연결하는 데 성공했습니다. 목표는 Raspberry Pi 5와 ESP32-WROOM-32 마이크로컨트롤러 간에 마이크로-ROS를 통한 통신을 활성화하는 것이었습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다른 사람들이 시간을 절약할 수 있도록, 이 상세한 튜토리얼을 작성하기로 결정했습니다. 아래 단계에 따라 따라할 수 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Raspberry Pi 5에 Ubuntu 23.10 Server 설치\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Raspberry Pi 5에 Docker 설치\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ROS2 Humble 설치를 위한 Dockerfile 생성\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ROS2 Humble 설치(Dockerfile 내에서)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"마이크로-ROS 설치(Dockerfile 내에서)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Docker 이미지 빌드\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ROS2 Humble 도커 컨테이너 실행\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"마이크로-ROS 예제 빌드 및 플래시\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"마이크로-ROS 에이전트 생성 및 실행\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"라즈베리 파이5에 우분투 23.10 서버 설치하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우선, Raspberry Pi Imager를 사용하여 라즈베리 파이 5에 우분투 23.10 서버 운영 체제를 설치했습니다. 이를 통해 화면을 사용하지 않고 SSH를 통해 장치에 연결할 수 있었습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Docker 설치하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SSH를 통해 Raspberry Pi 5에 액세스한 후 Docker를 설치했습니다. ROS2의 Humble 배포의 지원하는 운영 체제인 Ubuntu 22.04를 사용하기 위해 Docker를 사용하면 Raspberry Pi 5에서 호환 환경을 만들 수 있습니다. (https://docs.docker.com/engine/install/ubuntu/)\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"sudo apt-get update\\n\\nsudo apt-get install ca-certificates curl\\n\\nsudo install -m \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0755\"\n        }), \" -d /etc/apt/keyrings\\nsudo curl -fsSL \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\"\n        }), \"\\nsudo chmod a+r /etc/apt/keyrings/docker.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"asc\"\n        }), \"\\necho   \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\\\\n$(. /etc/os-release && echo \\\"\"\n        }), \"$VERSION_CODENAME\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\") stable\\\"\"\n        }), \" |   sudo tee /etc/apt/sources.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"list\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"d\"\n        }), \"/docker.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"list\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/dev/\"\n        }), _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \"\\n\\nsudo apt-get update\\nsudo apt-get install docker-ce docker-ce-cli containerd.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"io\"\n        }), \" docker-buildx-plugin docker-compose-plugin\\nsudo usermod -aG docker $USER\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Raspberry Pi5용 ROS2 Humble 설치를 위한 Dockerfile\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"원하는 ROS2 버전이 이미 포함된 Docker 이미지로 시작할 수 있습니다. 제 경우에는 필요한 Ubuntu 버전인 22.04(Jammy)에서 시작하는 Dockerfile을 만들기로 결정했습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ubuntu\"\n        }), \":jammy \\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" locale  # \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" 확인\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" apt update && apt install locales -y\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" locale-gen it_IT it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" update-locale \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LC_ALL\"\n        }), \"=it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LANG\"\n        }), \"=it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LANG\"\n        }), \"=it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"\\n\\n# 지역 시간대 설정\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROS_VERSION\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROS_DISTRO\"\n        }), \"=humble\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROS_PYTHON_VERSION\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TZ\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Europe\"\n        }), \"/\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Rome\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/etc/\"\n        }), \"timezone\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"도커 파일은 Ubuntu 22.04의 기본 이미지로 시작합니다. 그 다음으로 로캘 및 시간대가 설정됩니다. 저의 경우에는 이탈리아로 설정되어 있으며, 이는 ROS2를 설치하는 데 필요합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 설정 이후에는 ROS2 패키지를 설치할 때 시간대를 입력하지 않고도 필요한 환경 변수를 몇 개 설정했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Markdown 형식으로 표를 바꿔주겠습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"| 명령어                                     | 설명                                                                           |\\n|-------------------------------------------|--------------------------------------------------------------------------------|\\n| RUN apt install software-properties-common -y | 소프트웨어 속성 공통 부분 설치                                             |\\n| RUN add-apt-repository universe            | Universe 저장소 추가                                                         |\\n| RUN apt update && apt install curl -y      | 업데이트 후 curl 설치                                                          |\\n| RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg | ROS 키 다운로드 |\\n| RUN echo \\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\\\" | tee /etc/apt/sources.list.d/ros2.list > /dev/null | ROS2 리스트 추가 |\\n| RUN apt update && apt upgrade -y              | 업데이트 및 업그레이드                                                               |\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 부분의 도커 파일에서는 ROS2 설치를 위해 시스템을 구성하며, 필요한 저장소를 추가하고 시스템 패키지를 업데이트합니다(설치에 관한 공식 가이드는 여기에서 확인할 수 있습니다: https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html).\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_1.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시스템을 구성한 후에는 ROS2 Humble 및 micro-ROS를 설치할 준비가 되었습니다. 두 개의 스크립트를 사용했어요: install_ros2.sh와 install_microros_esp32.sh입니다. 이 스크립트들은 작업 디렉토리인 /ros2_project에 복사되고 실행 가능하게 만들었습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WORKDIR\"\n        }), \" /ros2_project\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"COPY\"\n        }), \" scripts\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/*.sh /ros2_project/\\n\\nRUN chmod +x ./*.sh\\nRUN ./install_ros2.sh\\nRUN ./install_microros_esp32.sh\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"ROS2 Humble 설치\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# install_ros2.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \"\\n#!\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/bin/\"\n        }), \"bash\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ROS2\"\n        }), \" 베이스 및 개발 도구 설치\\napt install ros-humble-ros-base -y\\napt install ros-dev-tools -y\\n\\n# 셸을 설정하여 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ROS2\"\n        }), \" 설정 파일을 자동으로 소스로 지정합니다.\\n# echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'source /opt/ros/humble/setup.bash'\"\n        }), \" >> ~/.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"bashrc\"\n        }), \" (optional)\\necho \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash'\"\n        }), \" >> ~/.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"bashrc\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"마이크로-ROS 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"micro-ROS를 설치하고 사용하려면 먼저 ESP32 칩에 호환되는 소프트웨어 개발 환경을 설정해야 합니다. 저는 micro-ROS 개발자들에 의해 테스트된 버전 5.2를 선택했습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# install_espressif.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \"\\n#!\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/bin/\"\n        }), \"bash\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'esp'\"\n        }), \" 폴더가 있는지 확인합니다.\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" [ ! -d ~/esp ]; then\\n\\n    # 패키지 목록을 업데이트하고 필요한 종속성을 설치합니다.\\n    apt-get update -y\\n    apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.0\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" -y\\n    \\n    # \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ESP\"\n        }), \" 개발을 위한 디렉토리를 생성하고 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ESP\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDF\"\n        }), \" 리포지토리를 복제합니다.\\n    mkdir -p ~/esp\\n    cd ~/esp\\n    git clone -b v5\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".2\"\n        }), \" --recursive \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//github.com/espressif/esp-idf.git\"\n        }), \"\\n\\n    # \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ESP\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDF\"\n        }), \" 디렉토리로 이동하여 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ESP32\"\n        }), \" 도구체인을 설치합니다.\\n    cd ~\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/esp/\"\n        }), \"esp-idf\\n    ./install.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \" esp32\\n\\n    # \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDF_PATH\"\n        }), \" 환경 변수를 설정하고 지속적으로 유지합니다.\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDF_PATH\"\n        }), \"=$HOME/esp/esp-idf\\n    echo \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDF_PATH\"\n        }), \"=$HOME/esp/esp-idf >> \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/root/\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"bashrc\"\n        }), \"\\n    . $IDF_PATH/\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"\\n    echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"'esp' 폴더가 이미 있습니다.\\\"\"\n        }), \"\\nfi\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# install_microros_esp32.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \"\\n\\n#!\", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/bin/\"\n        }), \"bash\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ESP32\"\n        }), \" 설정 스크립트 실행하기\\n./install_espressif.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \"\\n\\n# 작업 공간 생성 및 micro-\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROS\"\n        }), \" 도구 다운로드하기\\ngit clone -b $ROS_DISTRO \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//github.com/micro-ROS/micro_ros_espidf_component.git\"\n        }), \"\\n\\n# 의존성 설치하기\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IDF_PATH\"\n        }), \"=$HOME/esp/esp-idf\\nsource $IDF_PATH/\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sh\"\n        }), \" && pip3 install catkin_pkg lark-parser colcon-common-extensions\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"도커 이미지 빌드\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 단계에서 우리의 Dockerfile은 다음과 같이 나타납니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"ubuntu\"\n        }), \":jammy \\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" locale  # \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" 확인\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" apt update && apt install locales -y\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" locale-gen it_IT it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" update-locale \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LC_ALL\"\n        }), \"=it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LANG\"\n        }), \"=it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"LANG\"\n        }), \"=it_IT.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"UTF\"\n        }), \"-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \"\\n\\n# 시간대 설정\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROS_VERSION\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROS_DISTRO\"\n        }), \"=humble\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ROS_PYTHON_VERSION\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ENV\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"TZ\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Europe\"\n        }), \"/\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Rome\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/etc/\"\n        }), \"timezone\\n\\n# 필요한 리포지토리 추가 및 시스템 패키지 업데이트\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" apt install software-properties-common -y\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" add-apt-repository universe\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" apt update && apt install curl -y\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" curl -sSL \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" echo \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\\\"\"\n        }), \" | tee /etc/apt/sources.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"list\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"d\"\n        }), \"/ros2.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"list\"\n        }), \" > \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/dev/\"\n        }), _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"null\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"RUN\"\n        }), \" apt update && apt upgrade -y\\n\\n# 작업 디렉토리 지정하고 스크립트 복사\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WORKDIR\"\n        }), \" /ros2_project\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"COPY\"\n        }), \" scripts\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/*.sh /ros2_project/\\n\\n# 스크립트를 실행 가능하도록 하고 실행하기\\nRUN chmod +x ./*.sh\\nRUN ./install_ros2.sh\\nRUN ./install_microros_esp32.sh\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"도커 파일이 있는 디렉토리에서 다음 명령을 실행하세요: docker build . -t \", _jsx(_components.code, {\n        children: \"저장소_이름:태그\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"출력은 다음과 같이 나타납니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"생성된 이미지를 확인하려면 \\\"docker images\\\" 명령을 사용하여 사용 가능한 모든 도커 이미지를 볼 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"ROS2 Humble 도커 컨테이너 실행하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이미지를 만든 후에는 해당 이미지를 사용하여 컨테이너를 실행할 수 있습니다. 컨테이너는 가벼우며 응용 프로그램과 의존성을 실행하는 격리된 환경으로, 가상 머신과 유사하지만 오버헤드가 적습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컨테이너를 실행하려면:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"docker run -it \\\\\\n    --name=ros2_humble \\\\\\n    --net=host \\\\\\n    --privileged \\\\\\n    -v /dev:/dev \\\\\\n    ros2rover:humble-pi5-esp32-v1 \\\\\\n    bash\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"-it: 의사-TTY를 할당하고 STDIN을 열어 놓아 컨테이너와 상호 작용할 수 있게 함.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"--name=ros2_humble: 컨테이너의 이름을 ros2_humble로 지정함\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"--net=host: 호스트와 네트워크 네임스페이스를 공유하여 컨테이너가 호스트 네트워크 인터페이스를 사용할 수 있게 함.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"--privileged: 컨테이너를 권한 부여 모드로 실행하여 호스트의 모든 장치에 액세스할 수 있게 함.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"-v /dev:/dev: 호스트의 /dev 디렉토리를 컨테이너에 마운트하여 컨테이너가 호스트의 모든 장치 파일에 액세스할 수 있게 함.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ros2rover:humble-pi5-esp32-v1: 컨테이너 생성 시 사용할 Docker 이미지의 이름을 지정함.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"bash: 컨테이너 내에서 실행할 명령을 지정함. 이 경우에는 Bash 셸을 시작함.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 명령을 실행하면 컨테이너 내의 작업 디렉토리에서 Bash 셸 프롬프트가 열리며, 컨테이너 환경과 직접 상호 작용할 수 있게 됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"미크로-ROS int32_publisher 예제 빌드 및 플래시\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_4.png\",\n        alt: \"예제 이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기능을 확인하려면 복제된 micro-ROS 저장소에 포함된 예제 중 하나를 빌드할 수 있습니다. 다음은 따라야 할 단계입니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"다음 명령어로 예제 폴더로 이동하세요:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"cd micro_ros_espidf_component/examples/int32_publisher\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"ESP-IDF를 위해 소프트웨어 개발 환경을 활성화하세요:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \". $IDF_PATH/export.sh\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"빌드할 타겟을 설정하세요 (이 경우 ESP32):\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"idf.py set-target esp32\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_5.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"와이파이 연결 및 IP 호스트 대상 설정 (Raspberry Pi5 IP):\\nrunidf.py menuconfig을 실행한 후 micro-ROS 설정으로 이동하여 micro-ROS Agent IP를 호스트 IP로 설정하고 (Raspberry Pi5 IP를 알고 싶다면 bash 쉘에서 ifconfig를 실행하세요) Raspberry Pi5와 ESP32가 연결될 네트워크의 SSID 및 비밀번호로 WiFi 구성을 설정하세요.\\n그런 다음 “S”로 저장하고 “Q”로 나가세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_6.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_7.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_8.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"명령어를 사용하여 예제를 빌드하세요: idf.py build\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_9.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"micro-USB 케이블을 사용하여 ESP32 보드를 라즈베리 파이5에 연결하고 읽기 및 쓰기 권한이 있는지 확인하세요.\\n연결하는 USB 포트에 할당된 장치 이름을 확인하려면 해당 포트에 연결하기 전에 다음 명령어를 실행하세요: journalctl --follow (라즈베리 파이5 셸에서 실행, 컨테이너에서는 실행하지 마세요).\\n장치 이름을 알면 다음 명령어를 사용하여 라즈베리 파이5가 읽고 쓸 수 있게 설정할 수 있습니다: 내 경우에는 \", _jsx(_components.code, {\n          children: \"device name\"\n        }), \"이 ttyUSB0과 같습니다.\\nsudo chmod 666 /dev/\", _jsx(_components.code, {\n          children: \"device name\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_10.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"마지막으로 ESP32 보드에 펌웨어를 플래시하는 방법입니다: idf.py flash\\n여러 USB 장치가 연결된 경우 포트를 지정할 수 있습니다: idf.py -p /dev/ttyUSB0 flash\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"마이크로-ROS 에이전트를 생성하고 ESP32에서 발행된 메시지를 읽어보세요\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마이크로-ROS 에이전트는 ESP32의 마이크로-ROS 노드와 ROS 2 네트워크 간의 다리 역할을 합니다. 통신을 수립하려면 적절한 이미지를 사용하여 Docker를 통해 마이크로-ROS 에이전트를 실행하세요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"udp4은 IPv4 네트워크 상에서 통신을 위해 UDP를 사용하는 것을 특히 나타냅니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"도커 실행 -it --rm --net=host microros/micro-ros-agent\", _jsx(_components.div, {}), \" udp4 --port 8888 -v6\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_11.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ESP32 보드를 전원을 다시 켜고 끈 후에는, micro-ROS Agent 컨테이너 쉘에서 다음 출력을 볼 수 있어야 합니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_12.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ROS2 Humble 컨테이너에서 ROS2 Humble 환경을 소스로 지정한 다음에는 다음을 작성하세요: ros2 topic list.\\n이제 /freertos_int32_publisher 토픽이 나타날 것이며, 여기에 ESP32가 정수 (int32) 데이터를 발행 중입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_13.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 해당 토픽에서 발행된 메시지를 읽을 수 있습니다. ESP32가 /freertos_int32_publisher 토픽에서 발행한 메시지를 구독하고 표시하려면 다음 명령을 사용하여 ROS2 Humble 컨테이너 내에서 메시지를 구독하세요: ros2 topic echo /freertos_int32_publisher\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-HowtoInstallROS2HumbleonRaspberryPi5andEnableCommunicationwithESP32viamicro-ROSUsingDocker_14.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이렇게까지 와주셔서 축하드립니다! 이 포괄적인 안내를 따라가면, Docker를 통해 ROS2 Humble과 micro-ROS를 활용하여 Raspberry Pi 5와 ESP32 마이크로컨트롤러 간의 통신을 성공적으로 활성화할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 설정은 Docker가 제공하는 유연성과 격리 기능을 활용하여 안정적인 환경을 제공하여 마이크로-ROS 애플리케이션을 개발하고 테스트할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 단계를 따라가면, 이제 마이크로-ROS를 활용하여 Raspberry Pi 5와 ESP32 간의 통신을 브릿지하여 다양한 사물 인터넷(IoT) 애플리케이션에 활용할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"행운을 빌며 코딩을 즐기세요! ROS2, Raspberry Pi 5 및 ESP32로 가능한 범위를 넓히는 실험을 망설이지 마세요.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"저와 연락해요: \", _jsx(_components.a, {\n        href: \"https://www.linkedin.com/in/antonioconsiglio/\",\n        children: \"https://www.linkedin.com/in/antonioconsiglio/\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}