{"pageProps":{"post":{"title":"ReactTS와 Tailwind CSS로 서브 메뉴가 있는 반응형 사이드바 만들기","description":"","date":"2024-07-01 16:27","slug":"2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS","content":"\n\n<img src=\"/assets/img/2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS_0.png\" />\n\n소개:\n\n현재의 웹 개발 환경에서는 사용자 친화적인 인터페이스를 만드는 것이 매우 중요합니다. 직관적인 사용자 경험을 제공하기 위해 많은 웹 애플리케이션에서 발견되는 일반적인 UI 요소 중 하나가 사이드바입니다. 이 튜토리얼에서는 TypeScript, ReactJS, 그리고 Tailwind CSS를 사용하여 반응형 사이드바를 디자인하는 방법을 살펴보겠습니다. 우리는 코드를 단계별로 분해하고, 각 구성 요소가 사이드바의 기능에 어떻게 기여하는지 설명할 것입니다.\n\n의존성:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 히어로아이콘을 사용 중이지만 원하는 아이콘 라이브러리를 사용할 수 있어요.\n- 이미 ReactTS, Tailwind 프로젝트 설정이 되어 있다고 가정할게요.\n\nTailwind 개념:\n\n코드를 살펴보기 전에 Tailwind에 대해 몇 가지 개념을 알아두는 것이 중요해요 (그리고 제가 마주한 몇 가지 함정을 피할 수 있을 거에요 😅).\n\n- Tailwind는 완전한, 중간에 끊어지지 않은 문자열로 발생하는 클래스 네임만을 컴파일해요. 이에 대해 더 읽어보고 싶다면 https://tailwindcss.com/docs/content-configuration#dynamic-class-names 여기를 확인해 보세요.\n- 즉, 우리가 실행 중에 결정되는 조건부 변수를 전달하려고 한다면\n```div class=”text-'' error ? ‘red’ : ‘green’ ''-600\"```/div\n원하는대로 렌더링되지 않아요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTailwind 및 CSS 클래스 사용:\n\n- 화면에 고정된 inset-0을 사용하여 항상 보이도록 설정하고 화면에 고정시킵니다.\n- transition-all 유틸리티 클래스는 모든 CSS 속성에 전환 또는 애니메이션 효과를 적용하는 데 사용됩니다.\n- transition-all을 적용한 후에 우리가 애니메이션을 적용하고자 하는 속성을 제공합니다. 이 경우에는 w-32에서 w-0까지이며, 이는 너비에 대한 모든 변경 사항이 일정 기간 동안 부드럽게 이루어집니다.\n- -z-10은 음수 10 z-인덱스를 부여하는 데 사용됩니다.\n- sm: md: lg:는 화면 분기점으로, css에서 @media (최소 너비: [어떤 너비])의 동등한 것입니다. 분기점이 적용된 모든 스타일은 모든 화면 크기에 적용된다는 점을 기억하는 것이 중요합니다 (예: sm: w-30은 md 및 lg에도 적용됩니다).\n- w-5/6은 너비가 83.33%가됨을 의미하며, 이는 모바일 뷰에서만 표시됩니다.\n- 하위 메뉴 항목에 대한 높이 애니메이션을 위해 사용자 정의 css 전환: 높이 300ms;\n\n이제 코드로 이동합시다:\n\n사이드바 컴포넌트:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nimport {\n  ArrowRightIcon,\n  ArrowLeftIcon,\n  HomeIcon,\n  CogIcon,\n  UserIcon,\n  EllipsisVerticalIcon,\n} from '@heroicons/react/24/outline';\nimport { useState } from 'react';\nimport SidebarItem from './SidebarItem';\n\n// 이 사이드바 컴포넌트는 모바일과 데스크톱 모두를 위한 것입니다.\nfunction Sidebar({ children, expanded, setExpanded }: any) {\n  return (\n    <div className=\"relative\">\n      {/* \n        이 div는 사이드바가 확장될 때 배경 오버레이를 만드는 데 사용됩니다.\n        이는 모바일 화면에서만 표시됩니다.\n      */}\n      <div\n        className={`fixed inset-0 -z-10 block bg-gray-400  ${expanded ? 'block sm:hidden' : 'hidden'}`}\n      />\n      <aside\n        className={`box-border h-screen transition-all ${expanded ? 'w-5/6 sm:w-64' : 'w-0 sm:w-20'}`}\n      >\n        <nav className=\"flex h-full flex-col border-r bg-white shadow-sm\">\n          <div className=\"flex items-center justify-between p-4 pb-2\">\n            <img\n              src=\"https://img.logoipsum.com/243.svg\"\n              className={`overflow-hidden transition-all ${\n                expanded ? 'w-32' : 'w-0'\n              }`}\n              alt=\"\"\n            />\n            <div className={`${expanded ? '' : 'hidden sm:block'}`}>\n              <button\n                onClick={() => setExpanded((curr: boolean) => !curr)}\n                className=\"rounded-lg bg-gray-50 p-1.5 hover:bg-gray-100\"\n              >\n                {expanded ? (\n                  <ArrowRightIcon className=\"h-6 w-6\" />\n                ) : (\n                  <ArrowLeftIcon className=\"h-6 w-6\" />\n                )}\n              </button>\n            </div>\n          </div>\n          <ul className=\"flex-1 px-3\">{children}</ul>\n          <div className=\"flex border-t p-3\">\n            <img\n              src=\"https://ui-avatars.com/api/?background=c7d2fe&color=3730a3&bold=true&name=Mark+Ruffalo\"\n              alt=\"\"\n              className=\"h-10 w-10 rounded-md\"\n            />\n            <div\n              className={`\n              flex items-center justify-between\n              overflow-hidden transition-all ${expanded ? 'ml-3 w-52' : 'w-0'}\n          `}\n            >\n              <div className=\"leading-4\">\n                <h4 className=\"font-semibold\">Mark Ruffalo</h4>\n                <span className=\"text-xs text-gray-600\">mark@gmail.com</span>\n              </div>\n              <EllipsisVerticalIcon className=\"h-6 w-6\" />\n            </div>\n          </div>\n        </nav>\n      </aside>\n    </div>\n  );\n}\n\nexport default function MakeSidebar() {\n  const [expanded, setExpanded] = useState(true);\n  const navBarItems = [\n    {\n      icon: <HomeIcon />,\n      text: 'Home',\n      active: true,\n    },\n    {\n      icon: <UserIcon />,\n      subMenu: [\n        {\n          icon: <UserIcon />,\n          text: 'Profile',\n        },\n        {\n          icon: <CogIcon />,\n          text: 'Settings',\n        },\n      ],\n      text: 'Profile',\n    },\n    {\n      icon: <CogIcon />,\n      text: 'Settings',\n    },\n  ];\n\n  // 데스크톱 사이드바\n  return (\n    <Sidebar expanded={expanded} setExpanded={setExpanded}>\n      {navBarItems.map((item, index) => (\n        <SidebarItem key={index} expanded={expanded} {...item} />\n      ))}\n    </Sidebar>\n  );\n}\r\n\n이제 코드를 각각의 부분으로 나누어보겠습니다. MakeSidebar 래퍼 함수는 확장 여부를 제어하는 expanded: boolean 상태를 정의하는 동시에 사이드바를 생성합니다. 여기서는 간단한 React 상태를 사용했지만 애플리케이션에 따라 프롭 드릴링을 피하기 위해 Redux/전역 상태를 사용할 수도 있습니다.\n\n위의 예시에서 설명했듯이 메뉴 항목 텍스트와 헤더 아이콘의 애니메이션을 transition-all 클래스로 제어하고 있습니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모바일 화면에서만 표시되는 오버레이인 이 div는 모바일 화면에서 메뉴가 열렸을 때 볼 수 있는 배경을 어둡게 바꾸는 효과를 제공합니다.\n\n저희 `aside` 요소에 `w-5/6`을 적용했음을 주목해주세요. 이것이 모바일 화면을 제어하는 부분입니다.\n\n사이드바 아이템 컴포넌트:\n\nimport { ChevronRightIcon } from '@heroicons/react/24/outline';\nimport { useEffect, useState } from 'react';\n\ninterface SidebarItemProps {\n  active?: boolean;\n  icon: React.ReactNode;\n  text: string;\n  expanded: boolean;\n  subMenu?: SubMenuItemProps[] | null;\n}\n\n// 서브메뉴 항목들은 추가적인 서브메뉴 항목을 가질 수 없으므로 확장될 수 없다고 가정합니다.\ninterface SubMenuItemProps extends Omit<SidebarItemProps, 'expanded'> {\n  expanded?: never;\n  subMenu?: never;\n}\n\n// 이 컴포넌트는 마우스를 갖다대었을 때 서브메뉴 항목들을 렌더링하는 데 사용됩니다.\nfunction HoveredSubMenuItem({ icon, text, active }: SubMenuItemProps) {\n  return (\n    <div\n      className={`my-2 rounded-md p-2 ${\n        active ? 'bg-gray-300' : ' hover:bg-indigo-50'\n      }`}\n    >\n      <div className=\"flex items-center justify-center \">\n        <span className=\"text-primary-500 h-6 w-6 \">{icon}</span>\n        <span className=\"text-primary-500 ml-3 w-28 text-start\">{text}</span>\n        <div className=\"bg-primary-200 h-1\" />\n      </div>\n    </div>\n  );\n}\n\nexport default function SidebarItem({\n  icon,\n  active = false,\n  text,\n  expanded = false,\n  subMenu = null,\n}: SidebarItemProps) {\n  const [expandSubMenu, setExpandSubMenu] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      setExpandSubMenu(false);\n    }\n  }, [expanded]);\n\n  // 각 항목이 40px 높이라고 가정하고 서브메뉴의 높이를 계산합니다.\n  const subMenuHeight = expandSubMenu\n    ? `${((subMenu?.length || 0) * 40 + (subMenu! && 15)).toString()}px`\n    : 0;\n\n  return (\n    <>\n      <li>\n        <button\n          className={`\n         group relative my-1 flex w-full cursor-pointer\n         items-center rounded-md px-3\n         py-2 font-medium transition-colors\n         ${\n           active && !subMenu\n             ? 'text-primary-500 bg-gradient-to-tr from-indigo-200 to-indigo-100'\n             : 'text-gray-600 hover:bg-indigo-50'\n         }\n         ${!expanded && 'hidden sm:flex'}\n     `}\n          onClick={() => setExpandSubMenu((curr) => expanded && !curr)}\n        >\n          <span className=\"h-6 w-6\">{icon}</span>\n\n          <span\n            className={`overflow-hidden text-start transition-all ${\n              expanded ? 'ml-3 w-44' : 'w-0'\n            }`}\n          >\n            {text}\n          </span>\n          {subMenu && (\n            <div\n              className={`absolute right-2 h-4 w-4${expanded ? '' : 'top-2'} transition-all ${expandSubMenu ? 'rotate-90' : 'rotate-0'}`}\n            >\n              <ChevronRightIcon />\n            </div>\n          )}\n\n          {/* \n            마우스를 갖다댔을 때 항목 텍스트 또는 서브메뉴 항목들을 표시합니다.\n          */}\n          {!expanded && (\n            <div\n              className={`\n            text-primary-500 invisible absolute left-full ml-6 -translate-x-3\n            rounded-md bg-indigo-100 px-2\n            py-1 text-sm opacity-20 transition-all\n            group-hover:visible group-hover:translate-x-0 group-hover:opacity-100\n        `}\n            >\n              {/* \n                만약 갖다댔을 때 항목에 서브메뉴가 없다면 텍스트를 표시하고\n                그렇지 않다면 서브메뉴 항목들을 표시합니다.\n              */}\n              {!subMenu\n                ? text\n                : subMenu.map((item, index) => (\n                    <HoveredSubMenuItem\n                      key={index}\n                      text={item.text}\n                      icon={item.icon}\n                    />\n                  ))}\n            </div>\n          )}\n        </button>\n      </li>\n      <ul\n        className=\"sub-menu pl-6\"\n        style={{ height: subMenuHeight }}\n      >\n        {/* \n          만약 항목이 서브메뉴를 가지고 있다면 서브메뉴 항목들을 렌더링합니다.\n          서브메뉴 항목들은 SidebarItem 컴포넌트로 렌더링됩니다.\n        */}\n        {expanded &&\n          subMenu?.map((item, index) => (\n            <SidebarItem key={index} {...item} expanded={expanded} />\n          ))}\n      </ul>\n    </>\n  );\n}\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에는 Tailwind에서 작동하지 않는 높이 속성에 대한 애니메이션을 적용하기 위해 사용되는 sub-menu이라는 사용자 정의 css 클래스가 포함되어 있습니다. 따라서 다음과 같이 index.css 파일에서 사용자 정의 css 클래스를 정의하세요.\n\n.sub-menu {\n  overflow: hidden;\n  transition: height 300ms;\n}\n\n결론:\n\n이 튜토리얼에서는 TypeScript, ReactTS 및 Tailwind CSS를 사용하여 반응형 사이드바를 디자인하는 방법을 살펴보았습니다. Sidebar 및 SidebarItem 구성 요소의 코드를 분해하여 각 부분이 기능적인 사이드바 인터페이스를 만드는 데 어떤 역할을 하는지 설명했습니다. 이러한 단계를 따르고 기본 개념을 이해하면 다양한 화면 크기에 적응하는 직관적인 탐색 요소로 웹 애플리케이션을 향상시킬 수 있습니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS_0.png"},"coverImage":"/assets/img/2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-07-01-BuildingaResponsiveSidebarwithsubmenuinReactTSTailwindCSS_0.png\">\n<p>소개:</p>\n<p>현재의 웹 개발 환경에서는 사용자 친화적인 인터페이스를 만드는 것이 매우 중요합니다. 직관적인 사용자 경험을 제공하기 위해 많은 웹 애플리케이션에서 발견되는 일반적인 UI 요소 중 하나가 사이드바입니다. 이 튜토리얼에서는 TypeScript, ReactJS, 그리고 Tailwind CSS를 사용하여 반응형 사이드바를 디자인하는 방법을 살펴보겠습니다. 우리는 코드를 단계별로 분해하고, 각 구성 요소가 사이드바의 기능에 어떻게 기여하는지 설명할 것입니다.</p>\n<p>의존성:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>히어로아이콘을 사용 중이지만 원하는 아이콘 라이브러리를 사용할 수 있어요.</li>\n<li>이미 ReactTS, Tailwind 프로젝트 설정이 되어 있다고 가정할게요.</li>\n</ul>\n<p>Tailwind 개념:</p>\n<p>코드를 살펴보기 전에 Tailwind에 대해 몇 가지 개념을 알아두는 것이 중요해요 (그리고 제가 마주한 몇 가지 함정을 피할 수 있을 거에요 😅).</p>\n<ul>\n<li>Tailwind는 완전한, 중간에 끊어지지 않은 문자열로 발생하는 클래스 네임만을 컴파일해요. 이에 대해 더 읽어보고 싶다면 <a href=\"https://tailwindcss.com/docs/content-configuration#dynamic-class-names\" rel=\"nofollow\" target=\"_blank\">https://tailwindcss.com/docs/content-configuration#dynamic-class-names</a> 여기를 확인해 보세요.</li>\n<li>즉, 우리가 실행 중에 결정되는 조건부 변수를 전달하려고 한다면\n<code>div class=”text-'' error ? ‘red’ : ‘green’ ''-600\"</code>/div\n원하는대로 렌더링되지 않아요.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Tailwind 및 CSS 클래스 사용:</p>\n<ul>\n<li>화면에 고정된 inset-0을 사용하여 항상 보이도록 설정하고 화면에 고정시킵니다.</li>\n<li>transition-all 유틸리티 클래스는 모든 CSS 속성에 전환 또는 애니메이션 효과를 적용하는 데 사용됩니다.</li>\n<li>transition-all을 적용한 후에 우리가 애니메이션을 적용하고자 하는 속성을 제공합니다. 이 경우에는 w-32에서 w-0까지이며, 이는 너비에 대한 모든 변경 사항이 일정 기간 동안 부드럽게 이루어집니다.</li>\n<li>-z-10은 음수 10 z-인덱스를 부여하는 데 사용됩니다.</li>\n<li>sm: md: lg:는 화면 분기점으로, css에서 @media (최소 너비: [어떤 너비])의 동등한 것입니다. 분기점이 적용된 모든 스타일은 모든 화면 크기에 적용된다는 점을 기억하는 것이 중요합니다 (예: sm: w-30은 md 및 lg에도 적용됩니다).</li>\n<li>w-5/6은 너비가 83.33%가됨을 의미하며, 이는 모바일 뷰에서만 표시됩니다.</li>\n<li>하위 메뉴 항목에 대한 높이 애니메이션을 위해 사용자 정의 css 전환: 높이 300ms;</li>\n</ul>\n<p>이제 코드로 이동합시다:</p>\n<p>사이드바 컴포넌트:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>import {\nArrowRightIcon,\nArrowLeftIcon,\nHomeIcon,\nCogIcon,\nUserIcon,\nEllipsisVerticalIcon,\n} from '@heroicons/react/24/outline';\nimport { useState } from 'react';\nimport SidebarItem from './SidebarItem';</p>\n<p>// 이 사이드바 컴포넌트는 모바일과 데스크톱 모두를 위한 것입니다.\nfunction Sidebar({ children, expanded, setExpanded }: any) {\nreturn (\n</p><div class=\"relative\">\n{/*\n이 div는 사이드바가 확장될 때 배경 오버레이를 만드는 데 사용됩니다.\n이는 모바일 화면에서만 표시됩니다.\n*/}\n&#x3C;div\nclassName={<code>fixed inset-0 -z-10 block bg-gray-400  ${expanded ? 'block sm:hidden' : 'hidden'}</code>}\n/>\n&#x3C;aside\nclassName={<code>box-border h-screen transition-all ${expanded ? 'w-5/6 sm:w-64' : 'w-0 sm:w-20'}</code>}\n>\n<nav class=\"flex h-full flex-col border-r bg-white shadow-sm\">\n<div class=\"flex items-center justify-between p-4 pb-2\">\n&#x3C;img\nsrc=\"<a href=\"https://img.logoipsum.com/243.svg\" rel=\"nofollow\" target=\"_blank\">https://img.logoipsum.com/243.svg</a>\"\nclassName={<code>overflow-hidden transition-all ${                 expanded ? 'w-32' : 'w-0'               }</code>}\nalt=\"\"\n/>\n&#x3C;div className={<code>${expanded ? '' : 'hidden sm:block'}</code>}>\n&#x3C;button\nonClick={() => setExpanded((curr: boolean) => !curr)}\nclassName=\"rounded-lg bg-gray-50 p-1.5 hover:bg-gray-100\"\n>\n{expanded ? (\n<arrowrighticon class=\"h-6 w-6\">\n) : (\n<arrowlefticon class=\"h-6 w-6\">\n)}\n\n</arrowlefticon></arrowrighticon></div>\n</nav></div>\n<ul class=\"flex-1 px-3\">{children}</ul>\n<div class=\"flex border-t p-3\">\n<img src=\"https://ui-avatars.com/api/?background=c7d2fe&#x26;color=3730a3&#x26;bold=true&#x26;name=Mark+Ruffalo\" alt=\"\" class=\"h-10 w-10 rounded-md\">\n&#x3C;div\nclassName={<code>              flex items-center justify-between               overflow-hidden transition-all ${expanded ? 'ml-3 w-52' : 'w-0'}          </code>}\n>\n<div class=\"leading-4\">\n<h4 class=\"font-semibold\">Mark Ruffalo</h4>\n<span class=\"text-xs text-gray-600\"><a href=\"mailto:mark@gmail.com\">mark@gmail.com</a></span>\n</div>\n<ellipsisverticalicon class=\"h-6 w-6\">\n</ellipsisverticalicon></div>\n\n\n\n\n);\n}<p></p>\n<p>export default function MakeSidebar() {\nconst [expanded, setExpanded] = useState(true);\nconst navBarItems = [\n{\nicon: <homeicon>,\ntext: 'Home',\nactive: true,\n},\n{\nicon: <usericon>,\nsubMenu: [\n{\nicon: <usericon>,\ntext: 'Profile',\n},\n{\nicon: <cogicon>,\ntext: 'Settings',\n},\n],\ntext: 'Profile',\n},\n{\nicon: <cogicon>,\ntext: 'Settings',\n},\n];</cogicon></cogicon></usericon></usericon></homeicon></p>\n<p>// 데스크톱 사이드바\nreturn (\n<sidebar expanded=\"{expanded}\" setexpanded=\"{setExpanded}\">\n{navBarItems.map((item, index) => (\n&#x3C;SidebarItem key={index} expanded={expanded} {...item} />\n))}\n</sidebar>\n);\n}</p>\n<p>이제 코드를 각각의 부분으로 나누어보겠습니다. MakeSidebar 래퍼 함수는 확장 여부를 제어하는 expanded: boolean 상태를 정의하는 동시에 사이드바를 생성합니다. 여기서는 간단한 React 상태를 사용했지만 애플리케이션에 따라 프롭 드릴링을 피하기 위해 Redux/전역 상태를 사용할 수도 있습니다.</p>\n<p>위의 예시에서 설명했듯이 메뉴 항목 텍스트와 헤더 아이콘의 애니메이션을 transition-all 클래스로 제어하고 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>모바일 화면에서만 표시되는 오버레이인 이 div는 모바일 화면에서 메뉴가 열렸을 때 볼 수 있는 배경을 어둡게 바꾸는 효과를 제공합니다.</p>\n<p>저희 <code>aside</code> 요소에 <code>w-5/6</code>을 적용했음을 주목해주세요. 이것이 모바일 화면을 제어하는 부분입니다.</p>\n<p>사이드바 아이템 컴포넌트:</p>\n<p>import { ChevronRightIcon } from '@heroicons/react/24/outline';\nimport { useEffect, useState } from 'react';</p>\n<p>interface SidebarItemProps {\nactive?: boolean;\nicon: React.ReactNode;\ntext: string;\nexpanded: boolean;\nsubMenu?: SubMenuItemProps[] | null;\n}</p>\n<p>// 서브메뉴 항목들은 추가적인 서브메뉴 항목을 가질 수 없으므로 확장될 수 없다고 가정합니다.\ninterface SubMenuItemProps extends Omit&#x3C;SidebarItemProps, 'expanded'> {\nexpanded?: never;\nsubMenu?: never;\n}</p>\n<p>// 이 컴포넌트는 마우스를 갖다대었을 때 서브메뉴 항목들을 렌더링하는 데 사용됩니다.\nfunction HoveredSubMenuItem({ icon, text, active }: SubMenuItemProps) {\nreturn (\n&#x3C;div\nclassName={<code>my-2 rounded-md p-2 ${         active ? 'bg-gray-300' : ' hover:bg-indigo-50'       }</code>}\n>\n</p><div class=\"flex items-center justify-center\">\n<span class=\"text-primary-500 h-6 w-6\">{icon}</span>\n<span class=\"text-primary-500 ml-3 w-28 text-start\">{text}</span>\n<div class=\"bg-primary-200 h-1\">\n</div>\n</div>\n);\n}<p></p>\n<p>export default function SidebarItem({\nicon,\nactive = false,\ntext,\nexpanded = false,\nsubMenu = null,\n}: SidebarItemProps) {\nconst [expandSubMenu, setExpandSubMenu] = useState(false);</p>\n<p>useEffect(() => {\nif (!expanded) {\nsetExpandSubMenu(false);\n}\n}, [expanded]);</p>\n<p>// 각 항목이 40px 높이라고 가정하고 서브메뉴의 높이를 계산합니다.\nconst subMenuHeight = expandSubMenu\n? <code>${((subMenu?.length || 0) * 40 + (subMenu! &#x26;&#x26; 15)).toString()}px</code>\n: 0;</p>\n<p>return (\n&#x3C;>\n</p><li>\n&#x3C;button\nclassName={<code>         group relative my-1 flex w-full cursor-pointer          items-center rounded-md px-3          py-2 font-medium transition-colors          ${            active &#x26;&#x26; !subMenu              ? 'text-primary-500 bg-gradient-to-tr from-indigo-200 to-indigo-100'              : 'text-gray-600 hover:bg-indigo-50'          }          ${!expanded &#x26;&#x26; 'hidden sm:flex'}     </code>}\nonClick={() => setExpandSubMenu((curr) => expanded &#x26;&#x26; !curr)}\n>\n<span class=\"h-6 w-6\">{icon}</span><p></p>\n<pre><code>      &#x3C;span\n        className={`overflow-hidden text-start transition-all ${\n          expanded ? 'ml-3 w-44' : 'w-0'\n        }`}\n      >\n        {text}\n      &#x3C;/span>\n      {subMenu &#x26;&#x26; (\n        &#x3C;div\n          className={`absolute right-2 h-4 w-4${expanded ? '' : 'top-2'} transition-all ${expandSubMenu ? 'rotate-90' : 'rotate-0'}`}\n        >\n          &#x3C;ChevronRightIcon />\n        &#x3C;/div>\n      )}\n\n      {/* \n        마우스를 갖다댔을 때 항목 텍스트 또는 서브메뉴 항목들을 표시합니다.\n      */}\n      {!expanded &#x26;&#x26; (\n        &#x3C;div\n          className={`\n        text-primary-500 invisible absolute left-full ml-6 -translate-x-3\n        rounded-md bg-indigo-100 px-2\n        py-1 text-sm opacity-20 transition-all\n        group-hover:visible group-hover:translate-x-0 group-hover:opacity-100\n    `}\n        >\n          {/* \n            만약 갖다댔을 때 항목에 서브메뉴가 없다면 텍스트를 표시하고\n            그렇지 않다면 서브메뉴 항목들을 표시합니다.\n          */}\n          {!subMenu\n            ? text\n            : subMenu.map((item, index) => (\n                &#x3C;HoveredSubMenuItem\n                  key={index}\n                  text={item.text}\n                  icon={item.icon}\n                />\n              ))}\n        &#x3C;/div>\n      )}\n    &#x3C;/button>\n  &#x3C;/li>\n  &#x3C;ul\n    className=\"sub-menu pl-6\"\n    style={{ height: subMenuHeight }}\n  >\n    {/* \n      만약 항목이 서브메뉴를 가지고 있다면 서브메뉴 항목들을 렌더링합니다.\n      서브메뉴 항목들은 SidebarItem 컴포넌트로 렌더링됩니다.\n    */}\n    {expanded &#x26;&#x26;\n      subMenu?.map((item, index) => (\n        &#x3C;SidebarItem key={index} {...item} expanded={expanded} />\n      ))}\n  &#x3C;/ul>\n&#x3C;/>\n</code></pre>\n<p>);\n}</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기에는 Tailwind에서 작동하지 않는 높이 속성에 대한 애니메이션을 적용하기 위해 사용되는 sub-menu이라는 사용자 정의 css 클래스가 포함되어 있습니다. 따라서 다음과 같이 index.css 파일에서 사용자 정의 css 클래스를 정의하세요.</p>\n<p>.sub-menu {\noverflow: hidden;\ntransition: height 300ms;\n}</p>\n<p>결론:</p>\n<p>이 튜토리얼에서는 TypeScript, ReactTS 및 Tailwind CSS를 사용하여 반응형 사이드바를 디자인하는 방법을 살펴보았습니다. Sidebar 및 SidebarItem 구성 요소의 코드를 분해하여 각 부분이 기능적인 사이드바 인터페이스를 만드는 데 어떤 역할을 하는지 설명했습니다. 이러한 단계를 따르고 기본 개념을 이해하면 다양한 화면 크기에 적응하는 직관적인 탐색 요소로 웹 애플리케이션을 향상시킬 수 있습니다. 즐거운 코딩하세요!</p></li>\n</body>\n</html>\n"},"__N_SSG":true}