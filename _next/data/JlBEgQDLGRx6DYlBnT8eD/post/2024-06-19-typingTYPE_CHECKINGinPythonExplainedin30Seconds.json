{"pageProps":{"post":{"title":"파이썬에서 typingTYPE_CHECKING이 30초 안에 설명하기","description":"","date":"2024-06-19 10:53","slug":"2024-06-19-typingTYPE_CHECKINGinPythonExplainedin30Seconds","content":"\n<img src=\"/assets/img/2024-06-19-typingTYPE_CHECKINGinPythonExplainedin30Seconds_0.png\" />\n\n근무 중인 Python 코드베이스에서 이러한 코드 조각을 본 적이 있을 수 있습니다. 이 코드가 무슨 일을 하는지 궁금했던 적이 있다면, 오늘은 여기 있어서 설명해 드리겠습니다.\n\n# typing.TYPE_CHECKING은 그냥 False입니다\n\n```python\nfrom typing import TYPE_CHECKING\n\nprint(TYPE_CHECKING)\n\n# False\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일반적인 경우에는 TYPE_CHECKING 변수가 그냥 False로 설정되어 있습니다. 하지만 이 경우에 왜 사용하는 걸까요?\n\ntyping.TYPE_CHECKING은 정적 타입 체크(myppy 등)를 할 때 True로 설정된다고 가정됩니다.\n\n그러나 코드를 보통 실행할 때는 단순히 False입니다. 그러면 왜 이걸 사용하는 걸까요?\n\n# 경우 1 — 개 대 인간\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에는 서로 가져오는 dog.py와 human.py가 있습니다.\n\n```python\n# dog.py\n\nfrom human import Human\n\nclass Dog:\n    def get_human() -> Human:\n      ...\n```\n\n```python\n# human.py\n\nfrom dog import Dog\n\nclass Human:\n    def get_dog() -> Dog:\n        ...\n```\n\n여기서 서로를 가져오는 순환 포함이 있다는 것을 주의하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- dog.py에서 human.py를 가져오고\n- human.py에서는 dog.py를 가져옵니다\n\n그래서 dog.py나 human.py 또는 dog.py나 human.py를 가져오는 다른 Python 스크립트 중 하나를 실행하면 순환 임포트 오류가 발생합니다:\n\n```js\nImportError: cannot import name 'Human' from\npartially initialized module 'human'\n(most likely due to a circular import)\n```\n\n# Case 2 — Dog VS Human, but with TYPE_CHECKING\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nDog와 Human만 유형 주석에 필요하기 때문에 `-` Human과 `-` Dog와 같이 전체 클래스를 가져올 필요는 실제로 없습니다. 원형 가져오기 문제를 피하기 위해 다음 구문을 사용할 수 있습니다.\n\n```js\n# dog.py\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n  from human import Human\n\nclass Dog:\n    def get_human() -> \"Human\":\n      ...\n```\n\n```js\n# human.py\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n  from dog import Dog\n\nclass Human:\n    def get_dog() -> \"Dog\":\n        ...\n```\n\n여기에서 이전 코드에 몇 가지 변경 사항을 가했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- `typing`에서 `TYPE_CHECKING`을 import하는 부분을 추가했어요.\n- `TYPE_CHECKING` 조건문 아래에서 import 문들을 옮겼어요.\n- Dog와 Human 타입 어노테이션 주변에 따옴표를 추가했어요.\n\n그리고 코드를 실행해보면, 이제는 순환 import 문제가 없어졌어요.\n\n# 왜 순환 import 문제가 사라졌을까요?\n\n```js\ndef get_human() -> Human:\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 예제는 다음과 같이 변경되었습니다:\n\n```python\ndef get_human() -> \"Human\":\n```\n\n따라서 Python은 더 이상 human.py에서 실제 Human 클래스를 가져오려고 시도하지 않습니다 (이는 순환 임포트 문제를 발생시킵니다).\n\n# 그렇다면 TYPE_CHECKING이 왜 필요한가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n큰 파이썬 프로젝트에서는 어쩌면 언젠가는 mypy와 같은 정적 타입 체커를 사용할 것입니다.\n\n정적 타입 체커를 실행할 때 typing.TYPE_CHECKING 변수를 True로 설정하고 실제로 클래스를 가져옵니다. (걱정 마세요 - 정적 타입 체커는 순환 Import 문제를 다른 방식으로 처리할 수 있습니다)\n\n하지만 코드를 보통 실행하고 정적 타입 체커를 다룰 필요가 없을 때는 실제 클래스를 가져올 필요가 없습니다.\n\n요컨대, TYPE_CHECKING이 추가된 이유는:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 순환 가져오기 문제가 발생하지 않습니다\n- 해당 스크립트를 실행할 때 정적 유형 검사를 여전히 제대로 수행할 수 있습니다 (원래 유형 주석을 제거할 필요가 없음)\n\n# 결론\n\n확실하고 이해하기 쉬웠기를 바랍니다.\n\n# 만약 제작자로서 저를 지원하고 싶다면\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 이 이야기에 대해 50번 박수를 쳐주세요\n- 생각을 말씀해 주시는 댓글을 남겨주세요\n- 이야기 중 가장 좋아하는 부분을 강조해주세요\n\n감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사드립니다!\n\nYouTube: https://www.youtube.com/@zlliu246\n\nLinkedIn: https://www.linkedin.com/in/zlliu/\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제 Ebooks: [https://zlliu.co/ebooks](https://zlliu.co/ebooks)\n","ogImage":{"url":"/assets/img/2024-06-19-typingTYPE_CHECKINGinPythonExplainedin30Seconds_0.png"},"coverImage":"/assets/img/2024-06-19-typingTYPE_CHECKINGinPythonExplainedin30Seconds_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-19-typingTYPE_CHECKINGinPythonExplainedin30Seconds_0.png\">\n<p>근무 중인 Python 코드베이스에서 이러한 코드 조각을 본 적이 있을 수 있습니다. 이 코드가 무슨 일을 하는지 궁금했던 적이 있다면, 오늘은 여기 있어서 설명해 드리겠습니다.</p>\n<h1>typing.TYPE_CHECKING은 그냥 False입니다</h1>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> TYPE_CHECKING\n\n<span class=\"hljs-built_in\">print</span>(TYPE_CHECKING)\n\n<span class=\"hljs-comment\"># False</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>일반적인 경우에는 TYPE_CHECKING 변수가 그냥 False로 설정되어 있습니다. 하지만 이 경우에 왜 사용하는 걸까요?</p>\n<p>typing.TYPE_CHECKING은 정적 타입 체크(myppy 등)를 할 때 True로 설정된다고 가정됩니다.</p>\n<p>그러나 코드를 보통 실행할 때는 단순히 False입니다. 그러면 왜 이걸 사용하는 걸까요?</p>\n<h1>경우 1 — 개 대 인간</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기에는 서로 가져오는 dog.py와 human.py가 있습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># dog.py</span>\n\n<span class=\"hljs-keyword\">from</span> human <span class=\"hljs-keyword\">import</span> Human\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_human</span>() -> Human:\n      ...\n</code></pre>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># human.py</span>\n\n<span class=\"hljs-keyword\">from</span> dog <span class=\"hljs-keyword\">import</span> Dog\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Human</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_dog</span>() -> Dog:\n        ...\n</code></pre>\n<p>여기서 서로를 가져오는 순환 포함이 있다는 것을 주의하세요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>dog.py에서 human.py를 가져오고</li>\n<li>human.py에서는 dog.py를 가져옵니다</li>\n</ul>\n<p>그래서 dog.py나 human.py 또는 dog.py나 human.py를 가져오는 다른 Python 스크립트 중 하나를 실행하면 순환 임포트 오류가 발생합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">ImportError</span>: cannot <span class=\"hljs-keyword\">import</span> name <span class=\"hljs-string\">'Human'</span> <span class=\"hljs-keyword\">from</span>\npartially initialized <span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">'human'</span>\n(most likely due to a circular <span class=\"hljs-keyword\">import</span>)\n</code></pre>\n<h1>Case 2 — Dog VS Human, but with TYPE_CHECKING</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Dog와 Human만 유형 주석에 필요하기 때문에 <code>-</code> Human과 <code>-</code> Dog와 같이 전체 클래스를 가져올 필요는 실제로 없습니다. 원형 가져오기 문제를 피하기 위해 다음 구문을 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"># dog.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">TYPE_CHECKING</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">TYPE_CHECKING</span>:\n  <span class=\"hljs-keyword\">from</span> human <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Human</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    def <span class=\"hljs-title function_\">get_human</span>() -> <span class=\"hljs-string\">\"Human\"</span>:\n      ...\n</code></pre>\n<pre><code class=\"hljs language-js\"># human.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">TYPE_CHECKING</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">TYPE_CHECKING</span>:\n  <span class=\"hljs-keyword\">from</span> dog <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Dog</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Human</span>:\n    def <span class=\"hljs-title function_\">get_dog</span>() -> <span class=\"hljs-string\">\"Dog\"</span>:\n        ...\n</code></pre>\n<p>여기에서 이전 코드에 몇 가지 변경 사항을 가했습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li><code>typing</code>에서 <code>TYPE_CHECKING</code>을 import하는 부분을 추가했어요.</li>\n<li><code>TYPE_CHECKING</code> 조건문 아래에서 import 문들을 옮겼어요.</li>\n<li>Dog와 Human 타입 어노테이션 주변에 따옴표를 추가했어요.</li>\n</ul>\n<p>그리고 코드를 실행해보면, 이제는 순환 import 문제가 없어졌어요.</p>\n<h1>왜 순환 import 문제가 사라졌을까요?</h1>\n<pre><code class=\"hljs language-js\">def <span class=\"hljs-title function_\">get_human</span>() -> <span class=\"hljs-title class_\">Human</span>:\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 예제는 다음과 같이 변경되었습니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_human</span>() -> <span class=\"hljs-string\">\"Human\"</span>:\n</code></pre>\n<p>따라서 Python은 더 이상 human.py에서 실제 Human 클래스를 가져오려고 시도하지 않습니다 (이는 순환 임포트 문제를 발생시킵니다).</p>\n<h1>그렇다면 TYPE_CHECKING이 왜 필요한가요?</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>큰 파이썬 프로젝트에서는 어쩌면 언젠가는 mypy와 같은 정적 타입 체커를 사용할 것입니다.</p>\n<p>정적 타입 체커를 실행할 때 typing.TYPE_CHECKING 변수를 True로 설정하고 실제로 클래스를 가져옵니다. (걱정 마세요 - 정적 타입 체커는 순환 Import 문제를 다른 방식으로 처리할 수 있습니다)</p>\n<p>하지만 코드를 보통 실행하고 정적 타입 체커를 다룰 필요가 없을 때는 실제 클래스를 가져올 필요가 없습니다.</p>\n<p>요컨대, TYPE_CHECKING이 추가된 이유는:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>순환 가져오기 문제가 발생하지 않습니다</li>\n<li>해당 스크립트를 실행할 때 정적 유형 검사를 여전히 제대로 수행할 수 있습니다 (원래 유형 주석을 제거할 필요가 없음)</li>\n</ul>\n<h1>결론</h1>\n<p>확실하고 이해하기 쉬웠기를 바랍니다.</p>\n<h1>만약 제작자로서 저를 지원하고 싶다면</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>이 이야기에 대해 50번 박수를 쳐주세요</li>\n<li>생각을 말씀해 주시는 댓글을 남겨주세요</li>\n<li>이야기 중 가장 좋아하는 부분을 강조해주세요</li>\n</ul>\n<p>감사합니다! 이 작은 행동들이 큰 도움이 되고, 정말 감사드립니다!</p>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>제 Ebooks: <a href=\"https://zlliu.co/ebooks\" rel=\"nofollow\" target=\"_blank\">https://zlliu.co/ebooks</a></p>\n</body>\n</html>\n"},"__N_SSG":true}