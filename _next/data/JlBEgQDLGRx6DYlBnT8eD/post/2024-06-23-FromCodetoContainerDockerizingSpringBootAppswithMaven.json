{"pageProps":{"post":{"title":"코드에서 컨테이너로 Maven으로 Spring Boot 앱을 Dockerize하는 방법","description":"","date":"2024-06-23 22:54","slug":"2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven","content":"\n![이미지](/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_0.png)\n\n컨테이너화는 애플리케이션을 배포하는 방식을 혁신적으로 변화시켰습니다. 환경별 일관성을 제공하고 배포 프로세스를 간소화합니다. 이 가이드에서는 Maven을 사용하여 스프링 부트 애플리케이션을 원활하게 도커화하는 방법을 살펴보겠습니다. 개발부터 프로덕션까지 스무스하고 효율적인 워크플로우를 보장합니다.\n\n필수 사항\n\n1. Spring Boot 및 Maven의 기본 지식\n2. 시스템에 Docker가 설치되어 있어야 함\n\n단계 1: 스프링 부트 애플리케이션 설정하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간단한 Spring Boot 애플리케이션을 만들려면 spring initializer (https://start.spring.io/)를 사용하세요. Spring web, Spring Boot dev tools와 같은 기본 종속성을 포함하세요.\n\n![spring initializer](/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_1.png)\n\n단계 2: Maven의 pom.xml에 도커 Maven 플러그인을 추가하세요.\n\nio.fabric8 플러그인은 Maven을 위한 도커 관련 활동의 공식 플러그인입니다.\n이제 새로운 \"containerize\"라는 Maven 프로필을 만들고 해당 프로필에서 도커-Maven 플러그인을 사용할 것입니다. 코드 스니펫을 추가했고, 코드를 설명하기 위해 주석을 사용했습니다.\n이 플러그인의 문서는 여기서 확인할 수 있습니다: https://dmp.fabric8.io/\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<profile>\n  <id>containerize</id>\n  <build>\n   <plugins>\n    <plugin>\n     <groupId>io.fabric8</groupId>\n     <artifactId>docker-maven-plugin</artifactId>\n     <version>0.44</version>\n     <configuration>\n      <images>\n       <image>\n        <!--플레이스홀더의 명명법입니다.\n          %g=매이븐 그룹 이름의 마지막 부분은 여기에서 중요합니다.\n          %v=프로젝트 버전. ${project.version}과 동의어입니다.\n           ....................................... -->\n        <name>%g/docker-containerize:%v</name>\n        <!-- ....................................... -->\n         <!-- 이미지 생성을위한 빌드 구성 -->\n        <!-- ....................................... -->\n        <build>\n         <dockerFile>Dockerfile</dockerFile>\n         <assembly>\n          <!--매븐 어셈블리 플러그인에 대한 자세한 내용은 다음에서 찾을 수 있습니다:\n          https://maven.apache.org/plugins/maven-assembly-plugin/assembly.html-->\n          <basedir>/</basedir>\n          <inline xmlns=\"http://maven.apache.org/ASSEMBLY/2.2.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://maven.apache.org/ASSEMBLY/2.2.0 https://maven.apache.org/xsd/assembly-2.2.0.xsd\">\n           <fileSets>\n            <fileSet>\n             <directory>${project.basedir}/src/main/docker</directory>\n             <outputDirectory>/</outputDirectory>\n             <includes>\n              <include>docker-entrypoint.sh</include>\n             </includes>\n             <fileMode>755</fileMode>\n            </fileSet>\n            <fileSet>\n             <directory>${project.basedir}/target</directory>\n             <outputDirectory>/</outputDirectory>\n             <includes>\n              <include>containerize-*.jar</include>\n             </includes>\n             <fileMode>755</fileMode>\n            </fileSet>\n           </fileSets>\n          </inline>\n         </assembly>\n         <tags>\n          <tag>${project.version}</tag>\n          <tag>latest</tag>\n         </tags>\n        </build>\n       </image>\n      </images>\n     </configuration>\n     <!-- 라이프사이클에 훅 달기 -->\n     <executions>\n      <execution>\n       <id>build</id>\n       <goals>\n        <goal>build</goal>\n       </goals>\n      </execution>\n     </executions>\n    </plugin>\n   </plugins>\n  </build>\n </profile>\n```\n\n```js\n위 구성에 대한 중요 사항:\n\nDockerFile -> 이 플러그인은 src/main/docker 디렉토리에 배치된 도커 파일을 자동으로 가져올 것입니다.\n도커 파일의 이름만 전달해주면 됩니다. 여기서는 <dockerFile>Dockerfile</dockerFile>을 전달했습니다.\n\nAssembly plugin -> <build> 내부의 <assembly> 요소는 XML 구조를 가지며, 빌드 아티팩트 및 기타 파일이\n도커 이미지로 진입하는 방식을 정의합니다. 여러 <assembly> 요소를 추가하여 명시할 수 있습니다.\n어셈블리 플러그인에 대한 자세한 내용은 여기에서 확인할 수 있습니다.\n\noutputDirectory -> 이 플러그인에서 사용할 기본 출력 디렉터리입니다. 기본 값은 target/docker의\n매이븐 디렉터리입니다. 사용자는 이 디렉터리를 변경할 수 있는 옵션을 가지고 있습니다.\n\nFileSets -> List<FileSet> 유형의 파일 설정으로, 포함된 각 모듈에서 어떤 그룹의 파일을 어셈블리에 포함할지 지정합니다.\n한 개 이상의 <fileSet> 하위 요소를 제공하여 fileSet을 지정합니다.\n여기서는 도커 파일에 필요한 어플리케이션 jar 및 docker-entrypoint.sh를 포함했습니다.\n\ntags -> 빌드 후 이미지를 태깅할 추가 태그 요소 목록입니다. 여기서는 tag를 'latest'로 추가했으므로,\n이 플러그인은 이미지를 생성하고 해당 이미지에 'latest' 태그를 지정합니다.\nI이로 인해, 이 구성으로 2개의 이미지가 생성될 것입니다.\n```\n\nStep 3: Docker 파일 추가\n\n자바 17을 기본 이미지로 사용하는 Docker 파일을 작성합시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n###########################################################################\n# Dockerfile - Spring Boot Application Runner\n###########################################################################\n\n# 기본 이미지를 java17로 설정합니다.\n\nFROM openjdk:17-oracle\n\n# 파일 작성자 / 유지 관리자\nLABEL org.medium.image.authors=\"tauseef\"\n\n# 기본 환경 변수 정의\nENV APP_HOME=/opt/medium/containerize\n# 실행 가능한 artifact의 이름\nENV ARTIFACT_NAME=containerize-*.jar\n# Java 디버그 포트\nENV DEBUG_PORT=8000\n\n# 모든 artifact를 홈 디렉토리로 복사합니다\n# maven/에서 <assembly> 섹션에 지정된 파일은 수동으로 추가해야 합니다\nCOPY /maven/docker-entrypoint.sh /\nCOPY /maven/$ARTIFACT_NAME ${APP_HOME}/\n\n# 권한 부여\nUSER root\nRUN chmod 755 /docker-entrypoint.sh\n\n# 디렉토리에 쓰기 액세스를 위해 777 권한을 설정합니다\nRUN chmod -R 777 /opt/medium\n\n# 작업 디렉토리 설정\nWORKDIR /opt/medium\n\n# 주요 명령어\nUSER 185\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n```\n\n이 도커 파일에서 ENTRYPOINT를 사용하고 있으며 이는 docker-entrypoint.sh를 가리킵니다. 파일은 다음과 같습니다.\n\n```js\n#!/bin/sh\nset -e\n\necho 'Starting containerize Spring Boot App'\n\nif [ \"$DEBUG\" = true ]; then\n  printf \"Running the application in debug mode\\n\"\n  JAVA_OPTS=\"$JAVA_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$DEBUG_PORT\"\nfi\n\n# 애플리케이션이 PID 1을 취하고 Docker stop 명령에 의해 보내진 SIGTERM을 수신할 수 있도록 합니다.\n# 여기를 참조하세요: https://docs.docker.com/engine/reference/builder/#/entrypoint\nexec java $JAVA_OPTS \\\n       -Djava.security.egd=file:/dev/./urandom -jar \\\n       ${APP_HOME}/$ARTIFACT_NAME\n\n# 인터럽트가 발생할 때까지 컨테이너를 계속 실행합니다\nsleep infinity\n```\n\nStep 4: 메이븐 프로필을 사용하여 이미지를 빌드합니다\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모든 설정이 완료되었고, 이제 우리 애플리케이션의 이미지를 생성할 준비가 되었어요. 다음 명령어를 실행해봐요.\n\n```js\nmvn clean install -Pcontainerize\n```\n\n이 명령어는 docker-maven 플러그인을 실행시키고 이미지를 생성할 거에요. 빌드에 성공하면 터미널에 다음 로그 라인을 볼 수 있을 거에요.\n\n```js\n[INFO] DOCKER> [medium/docker-containerize:0.0.1-SNAPSHOT]: Created docker-build.tar in 318 milliseconds\n[INFO] DOCKER> [medium/docker-containerize:0.0.1-SNAPSHOT]: Built image sha256:e091d\n[INFO] DOCKER> medium/docker-containerize:0.0.1-SNAPSHOT: Removed dangling image sha256:ea18f\n[INFO] DOCKER> [medium/docker-containerize:0.0.1-SNAPSHOT]: Tag with 0.0.1-SNAPSHOT,latest\n[INFO] DOCKER> Tagging image medium/docker-containerize:0.0.1-SNAPSHOT successful!\n[INFO] DOCKER> Tagging image medium/docker-containerize:latest successful!\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 명령어를 실행하여 확인해주세요\n\n![image1](/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_2.png)\n\n이제 다음 이미지를 실행해주세요\n\n![image2](/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n따라서 컨테이너가 성공적으로 시작되었습니다.\n\n단계 5: 도커 메이븐 플러그인을 사용한 준비된 조립품\n\n도커 메이븐 플러그인은 사용자가 자세한 내용에 들어가서 조립품을 작성할 필요가 없도록 준비된 조립품을 지원합니다. 이는 descriptor-ref를 통해 수행할 수 있습니다. 조립품에서 지원되는 아티팩트 목록은 여기에서 찾을 수 있습니다.\n이 설명서를 따라, 우리는 pom 파일의 구성을 다음과 같이 수정하기만 하면 됩니다.\n\n```xml\n<profile>\n   <id>containerize2</id>\n   <build>\n    <plugins>\n     <plugin>\n      <groupId>io.fabric8</groupId>\n      <artifactId>docker-maven-plugin</artifactId>\n      <configuration>\n       <images>\n        <image>\n         <!-- 플레이스홀더의 명명법\n          %g= Maven 그룹 이름의 마지막 부분은 여기서 미디엄에 해당합니다\n          %v= 프로젝트 버전. ${project.version}의 동의어\n          ....................................... -->\n         <name>%g/docker-containerize2:%v</name>\n         <!-- ....................................... -->\n         <!-- 이미지 생성을 위한 빌드 구성 -->\n         <!-- ....................................... -->\n         <build>\n          <dockerFile>Dockerfile2</dockerFile>\n          <assemblies>\n           <assembly>\n            <descriptorRef>artifact</descriptorRef>\n           </assembly>\n          </assemblies>\n          <tags>\n           <tag>${project.version}</tag>\n           <tag>latest</tag>\n          </tags>\n         </build>\n        </image>\n       </images>\n      </configuration>\n      <!-- 라이프사이클에 훅하기 -->\n      <executions>\n       <execution>\n        <id>docker-build</id>\n        <goals>\n         <goal>build</goal>\n        </goals>\n       </execution>\n      </executions>\n     </plugin>\n    </plugins>\n   </build>\n  </profile>\n```\n\n```xml\n만약 주목했다면 다음과 같이 전달하기만 하면 됩니다.\n            <assembly>\n            <descriptorRef>artifact</descriptorRef>\n           </assembly>\n그리고 이것은 jar 파일을 target/docker의 maven 디렉토리로 복사하고\n거기서 Docker 파일이 jar 파일을 선택할 것입니다.\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결론\nSpring Boot 애플리케이션을 컨테이너화하는 것은 배포 프로세스를 효율적으로 만들 뿐만 아니라 다양한 환경에서의 확장성과 일관성을 향상시킵니다. 오늘부터 Spring Boot 프로젝트를 컨테이너화하여 현대적인 애플리케이션 배포의 혜택을 직접 경험해보세요.\n","ogImage":{"url":"/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_0.png"},"coverImage":"/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_0.png\" alt=\"이미지\"></p>\n<p>컨테이너화는 애플리케이션을 배포하는 방식을 혁신적으로 변화시켰습니다. 환경별 일관성을 제공하고 배포 프로세스를 간소화합니다. 이 가이드에서는 Maven을 사용하여 스프링 부트 애플리케이션을 원활하게 도커화하는 방법을 살펴보겠습니다. 개발부터 프로덕션까지 스무스하고 효율적인 워크플로우를 보장합니다.</p>\n<p>필수 사항</p>\n<ol>\n<li>Spring Boot 및 Maven의 기본 지식</li>\n<li>시스템에 Docker가 설치되어 있어야 함</li>\n</ol>\n<p>단계 1: 스프링 부트 애플리케이션 설정하기</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>간단한 Spring Boot 애플리케이션을 만들려면 spring initializer (<a href=\"https://start.spring.io/)%EB%A5%BC\" rel=\"nofollow\" target=\"_blank\">https://start.spring.io/)를</a> 사용하세요. Spring web, Spring Boot dev tools와 같은 기본 종속성을 포함하세요.</p>\n<p><img src=\"/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_1.png\" alt=\"spring initializer\"></p>\n<p>단계 2: Maven의 pom.xml에 도커 Maven 플러그인을 추가하세요.</p>\n<p>io.fabric8 플러그인은 Maven을 위한 도커 관련 활동의 공식 플러그인입니다.\n이제 새로운 \"containerize\"라는 Maven 프로필을 만들고 해당 프로필에서 도커-Maven 플러그인을 사용할 것입니다. 코드 스니펫을 추가했고, 코드를 설명하기 위해 주석을 사용했습니다.\n이 플러그인의 문서는 여기서 확인할 수 있습니다: <a href=\"https://dmp.fabric8.io/\" rel=\"nofollow\" target=\"_blank\">https://dmp.fabric8.io/</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;profile>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">id</span>></span>containerize<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">id</span>></span></span>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">build</span>></span>\n   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">plugins</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">plugin</span>></span>\n     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">groupId</span>></span>io.fabric8<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">groupId</span>></span>\n     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">artifactId</span>></span>docker-maven-plugin<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">artifactId</span>></span>\n     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">version</span>></span>0.44<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">version</span>></span>\n     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">configuration</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">images</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">image</span>></span>\n        <span class=\"hljs-comment\">&#x3C;!--플레이스홀더의 명명법입니다.\n          %g=매이븐 그룹 이름의 마지막 부분은 여기에서 중요합니다.\n          %v=프로젝트 버전. ${project.version}과 동의어입니다.\n           ....................................... --></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">name</span>></span>%g/docker-containerize:%v<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">name</span>></span>\n        <span class=\"hljs-comment\">&#x3C;!-- ....................................... --></span>\n         <span class=\"hljs-comment\">&#x3C;!-- 이미지 생성을위한 빌드 구성 --></span>\n        <span class=\"hljs-comment\">&#x3C;!-- ....................................... --></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">build</span>></span>\n         <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">dockerFile</span>></span>Dockerfile<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">dockerFile</span>></span>\n         <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">assembly</span>></span>\n          <span class=\"hljs-comment\">&#x3C;!--매븐 어셈블리 플러그인에 대한 자세한 내용은 다음에서 찾을 수 있습니다:\n          https://maven.apache.org/plugins/maven-assembly-plugin/assembly.html--></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">basedir</span>></span>/<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">basedir</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">inline</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://maven.apache.org/ASSEMBLY/2.2.0\"</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n              <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://maven.apache.org/ASSEMBLY/2.2.0 https://maven.apache.org/xsd/assembly-2.2.0.xsd\"</span>></span>\n           <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fileSets</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fileSet</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">directory</span>></span>${project.basedir}/src/main/docker<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">directory</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">outputDirectory</span>></span>/<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">outputDirectory</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">includes</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">include</span>></span>docker-entrypoint.sh<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">include</span>></span>\n             <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">includes</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fileMode</span>></span>755<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fileMode</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fileSet</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fileSet</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">directory</span>></span>${project.basedir}/target<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">directory</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">outputDirectory</span>></span>/<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">outputDirectory</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">includes</span>></span>\n              <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">include</span>></span>containerize-*.jar<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">include</span>></span>\n             <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">includes</span>></span>\n             <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fileMode</span>></span>755<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fileMode</span>></span>\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fileSet</span>></span>\n           <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fileSets</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">inline</span>></span>\n         <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">assembly</span>></span>\n         <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tags</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tag</span>></span>${project.version}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tag</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tag</span>></span>latest<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tag</span>></span>\n         <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tags</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">build</span>></span>\n       <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">image</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">images</span>></span>\n     <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">configuration</span>></span>\n     <span class=\"hljs-comment\">&#x3C;!-- 라이프사이클에 훅 달기 --></span>\n     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">executions</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">execution</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">id</span>></span>build<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">id</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">goals</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">goal</span>></span>build<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">goal</span>></span>\n       <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">goals</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">execution</span>></span>\n     <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">executions</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">plugin</span>></span>\n   <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">plugins</span>></span></span>\n  &#x3C;/build>\n &#x3C;/profile>\n</code></pre>\n<pre><code class=\"hljs language-js\">위 구성에 대한 중요 사항:\n\n<span class=\"hljs-title class_\">DockerFile</span> -> 이 플러그인은 src/main/docker 디렉토리에 배치된 도커 파일을 자동으로 가져올 것입니다.\n도커 파일의 이름만 전달해주면 됩니다. 여기서는 &#x3C;dockerFile><span class=\"hljs-title class_\">Dockerfile</span>&#x3C;/dockerFile>을 전달했습니다.\n\n<span class=\"hljs-title class_\">Assembly</span> plugin -> &#x3C;build> 내부의 &#x3C;assembly> 요소는 <span class=\"hljs-variable constant_\">XML</span> 구조를 가지며, 빌드 아티팩트 및 기타 파일이\n도커 이미지로 진입하는 방식을 정의합니다. 여러 &#x3C;assembly> 요소를 추가하여 명시할 수 있습니다.\n어셈블리 플러그인에 대한 자세한 내용은 여기에서 확인할 수 있습니다.\n\noutputDirectory -> 이 플러그인에서 사용할 기본 출력 디렉터리입니다. 기본 값은 target/docker의\n매이븐 디렉터리입니다. 사용자는 이 디렉터리를 변경할 수 있는 옵션을 가지고 있습니다.\n\n<span class=\"hljs-title class_\">FileSets</span> -> <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">FileSet</span>> 유형의 파일 설정으로, 포함된 각 모듈에서 어떤 그룹의 파일을 어셈블리에 포함할지 지정합니다.\n한 개 이상의 &#x3C;fileSet> 하위 요소를 제공하여 fileSet을 지정합니다.\n여기서는 도커 파일에 필요한 어플리케이션 jar 및 docker-entrypoint.<span class=\"hljs-property\">sh</span>를 포함했습니다.\n\ntags -> 빌드 후 이미지를 태깅할 추가 태그 요소 목록입니다. 여기서는 tag를 <span class=\"hljs-string\">'latest'</span>로 추가했으므로,\n이 플러그인은 이미지를 생성하고 해당 이미지에 <span class=\"hljs-string\">'latest'</span> 태그를 지정합니다.\nI이로 인해, 이 구성으로 <span class=\"hljs-number\">2</span>개의 이미지가 생성될 것입니다.\n</code></pre>\n<p>Step 3: Docker 파일 추가</p>\n<p>자바 17을 기본 이미지로 사용하는 Docker 파일을 작성합시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">###########################################################################\n# <span class=\"hljs-title class_\">Dockerfile</span> - <span class=\"hljs-title class_\">Spring</span> <span class=\"hljs-title class_\">Boot</span> <span class=\"hljs-title class_\">Application</span> <span class=\"hljs-title class_\">Runner</span>\n###########################################################################\n\n# 기본 이미지를 java17로 설정합니다.\n\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">openjdk</span>:<span class=\"hljs-number\">17</span>-oracle\n\n# 파일 작성자 / 유지 관리자\n<span class=\"hljs-variable constant_\">LABEL</span> org.<span class=\"hljs-property\">medium</span>.<span class=\"hljs-property\">image</span>.<span class=\"hljs-property\">authors</span>=<span class=\"hljs-string\">\"tauseef\"</span>\n\n# 기본 환경 변수 정의\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">APP_HOME</span>=<span class=\"hljs-regexp\">/opt/m</span>edium/containerize\n# 실행 가능한 artifact의 이름\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">ARTIFACT_NAME</span>=containerize-*.<span class=\"hljs-property\">jar</span>\n# <span class=\"hljs-title class_\">Java</span> 디버그 포트\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">DEBUG_PORT</span>=<span class=\"hljs-number\">8000</span>\n\n# 모든 artifact를 홈 디렉토리로 복사합니다\n# maven/에서 &#x3C;assembly> 섹션에 지정된 파일은 수동으로 추가해야 합니다\n<span class=\"hljs-variable constant_\">COPY</span> /maven/docker-entrypoint.<span class=\"hljs-property\">sh</span> /\n<span class=\"hljs-variable constant_\">COPY</span> /maven/$ARTIFACT_NAME ${<span class=\"hljs-variable constant_\">APP_HOME</span>}/\n\n# 권한 부여\n<span class=\"hljs-variable constant_\">USER</span> root\n<span class=\"hljs-variable constant_\">RUN</span> chmod <span class=\"hljs-number\">755</span> /docker-entrypoint.<span class=\"hljs-property\">sh</span>\n\n# 디렉토리에 쓰기 액세스를 위해 <span class=\"hljs-number\">777</span> 권한을 설정합니다\n<span class=\"hljs-variable constant_\">RUN</span> chmod -R <span class=\"hljs-number\">777</span> /opt/medium\n\n# 작업 디렉토리 설정\n<span class=\"hljs-variable constant_\">WORKDIR</span> /opt/medium\n\n# 주요 명령어\n<span class=\"hljs-variable constant_\">USER</span> <span class=\"hljs-number\">185</span>\n<span class=\"hljs-variable constant_\">ENTRYPOINT</span> [<span class=\"hljs-string\">\"/docker-entrypoint.sh\"</span>]\n</code></pre>\n<p>이 도커 파일에서 ENTRYPOINT를 사용하고 있으며 이는 docker-entrypoint.sh를 가리킵니다. 파일은 다음과 같습니다.</p>\n<pre><code class=\"hljs language-js\">#!<span class=\"hljs-regexp\">/bin/</span>sh\nset -e\n\necho <span class=\"hljs-string\">'Starting containerize Spring Boot App'</span>\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"$DEBUG\"</span> = <span class=\"hljs-literal\">true</span> ]; then\n  printf <span class=\"hljs-string\">\"Running the application in debug mode\\n\"</span>\n  <span class=\"hljs-variable constant_\">JAVA_OPTS</span>=<span class=\"hljs-string\">\"$JAVA_OPTS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$DEBUG_PORT\"</span>\nfi\n\n# 애플리케이션이 <span class=\"hljs-variable constant_\">PID</span> <span class=\"hljs-number\">1</span>을 취하고 <span class=\"hljs-title class_\">Docker</span> stop 명령에 의해 보내진 <span class=\"hljs-variable constant_\">SIGTERM</span>을 수신할 수 있도록 합니다.\n# 여기를 참조하세요: <span class=\"hljs-attr\">https</span>:<span class=\"hljs-comment\">//docs.docker.com/engine/reference/builder/#/entrypoint</span>\nexec java $JAVA_OPTS \\\n       -<span class=\"hljs-title class_\">Djava</span>.<span class=\"hljs-property\">security</span>.<span class=\"hljs-property\">egd</span>=<span class=\"hljs-attr\">file</span>:<span class=\"hljs-regexp\">/dev/</span>./urandom -jar \\\n       ${<span class=\"hljs-variable constant_\">APP_HOME</span>}/$ARTIFACT_NAME\n\n# 인터럽트가 발생할 때까지 컨테이너를 계속 실행합니다\nsleep infinity\n</code></pre>\n<p>Step 4: 메이븐 프로필을 사용하여 이미지를 빌드합니다</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>모든 설정이 완료되었고, 이제 우리 애플리케이션의 이미지를 생성할 준비가 되었어요. 다음 명령어를 실행해봐요.</p>\n<pre><code class=\"hljs language-js\">mvn clean install -<span class=\"hljs-title class_\">Pcontainerize</span>\n</code></pre>\n<p>이 명령어는 docker-maven 플러그인을 실행시키고 이미지를 생성할 거에요. 빌드에 성공하면 터미널에 다음 로그 라인을 볼 수 있을 거에요.</p>\n<pre><code class=\"hljs language-js\">[<span class=\"hljs-variable constant_\">INFO</span>] <span class=\"hljs-variable constant_\">DOCKER</span>> [medium/docker-<span class=\"hljs-attr\">containerize</span>:<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-<span class=\"hljs-variable constant_\">SNAPSHOT</span>]: <span class=\"hljs-title class_\">Created</span> docker-build.<span class=\"hljs-property\">tar</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">318</span> milliseconds\n[<span class=\"hljs-variable constant_\">INFO</span>] <span class=\"hljs-variable constant_\">DOCKER</span>> [medium/docker-<span class=\"hljs-attr\">containerize</span>:<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-<span class=\"hljs-variable constant_\">SNAPSHOT</span>]: <span class=\"hljs-title class_\">Built</span> image <span class=\"hljs-attr\">sha256</span>:e091d\n[<span class=\"hljs-variable constant_\">INFO</span>] <span class=\"hljs-variable constant_\">DOCKER</span>> medium/docker-<span class=\"hljs-attr\">containerize</span>:<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-<span class=\"hljs-attr\">SNAPSHOT</span>: <span class=\"hljs-title class_\">Removed</span> dangling image <span class=\"hljs-attr\">sha256</span>:ea18f\n[<span class=\"hljs-variable constant_\">INFO</span>] <span class=\"hljs-variable constant_\">DOCKER</span>> [medium/docker-<span class=\"hljs-attr\">containerize</span>:<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-<span class=\"hljs-variable constant_\">SNAPSHOT</span>]: <span class=\"hljs-title class_\">Tag</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-<span class=\"hljs-variable constant_\">SNAPSHOT</span>,latest\n[<span class=\"hljs-variable constant_\">INFO</span>] <span class=\"hljs-variable constant_\">DOCKER</span>> <span class=\"hljs-title class_\">Tagging</span> image medium/docker-<span class=\"hljs-attr\">containerize</span>:<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-<span class=\"hljs-variable constant_\">SNAPSHOT</span> successful!\n[<span class=\"hljs-variable constant_\">INFO</span>] <span class=\"hljs-variable constant_\">DOCKER</span>> <span class=\"hljs-title class_\">Tagging</span> image medium/docker-<span class=\"hljs-attr\">containerize</span>:latest successful!\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래 명령어를 실행하여 확인해주세요</p>\n<p><img src=\"/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_2.png\" alt=\"image1\"></p>\n<p>이제 다음 이미지를 실행해주세요</p>\n<p><img src=\"/assets/img/2024-06-23-FromCodetoContainerDockerizingSpringBootAppswithMaven_3.png\" alt=\"image2\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>따라서 컨테이너가 성공적으로 시작되었습니다.</p>\n<p>단계 5: 도커 메이븐 플러그인을 사용한 준비된 조립품</p>\n<p>도커 메이븐 플러그인은 사용자가 자세한 내용에 들어가서 조립품을 작성할 필요가 없도록 준비된 조립품을 지원합니다. 이는 descriptor-ref를 통해 수행할 수 있습니다. 조립품에서 지원되는 아티팩트 목록은 여기에서 찾을 수 있습니다.\n이 설명서를 따라, 우리는 pom 파일의 구성을 다음과 같이 수정하기만 하면 됩니다.</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">profile</span>></span>\n   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">id</span>></span>containerize2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">id</span>></span>\n   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">build</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">plugins</span>></span>\n     <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">plugin</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">groupId</span>></span>io.fabric8<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">groupId</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">artifactId</span>></span>docker-maven-plugin<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">artifactId</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">configuration</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">images</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">image</span>></span>\n         <span class=\"hljs-comment\">&#x3C;!-- 플레이스홀더의 명명법\n          %g= Maven 그룹 이름의 마지막 부분은 여기서 미디엄에 해당합니다\n          %v= 프로젝트 버전. ${project.version}의 동의어\n          ....................................... --></span>\n         <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">name</span>></span>%g/docker-containerize2:%v<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">name</span>></span>\n         <span class=\"hljs-comment\">&#x3C;!-- ....................................... --></span>\n         <span class=\"hljs-comment\">&#x3C;!-- 이미지 생성을 위한 빌드 구성 --></span>\n         <span class=\"hljs-comment\">&#x3C;!-- ....................................... --></span>\n         <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">build</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">dockerFile</span>></span>Dockerfile2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">dockerFile</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">assemblies</span>></span>\n           <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">assembly</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">descriptorRef</span>></span>artifact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">descriptorRef</span>></span>\n           <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">assembly</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">assemblies</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tags</span>></span>\n           <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tag</span>></span>${project.version}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tag</span>></span>\n           <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tag</span>></span>latest<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tag</span>></span>\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tags</span>></span>\n         <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">build</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">image</span>></span>\n       <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">images</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">configuration</span>></span>\n      <span class=\"hljs-comment\">&#x3C;!-- 라이프사이클에 훅하기 --></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">executions</span>></span>\n       <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">execution</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">id</span>></span>docker-build<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">id</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">goals</span>></span>\n         <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">goal</span>></span>build<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">goal</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">goals</span>></span>\n       <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">execution</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">executions</span>></span>\n     <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">plugin</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">plugins</span>></span>\n   <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">build</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">profile</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-xml\">만약 주목했다면 다음과 같이 전달하기만 하면 됩니다.\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">assembly</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">descriptorRef</span>></span>artifact<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">descriptorRef</span>></span>\n           <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">assembly</span>></span>\n그리고 이것은 jar 파일을 target/docker의 maven 디렉토리로 복사하고\n거기서 Docker 파일이 jar 파일을 선택할 것입니다.\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>결론\nSpring Boot 애플리케이션을 컨테이너화하는 것은 배포 프로세스를 효율적으로 만들 뿐만 아니라 다양한 환경에서의 확장성과 일관성을 향상시킵니다. 오늘부터 Spring Boot 프로젝트를 컨테이너화하여 현대적인 애플리케이션 배포의 혜택을 직접 경험해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}