{"pageProps":{"post":{"title":"React JS, NET Core, Docker를 사용해 제품 애플리케이션 구축 및 컨테이너화하는 방법","description":"","date":"2024-07-01 16:17","slug":"2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker","content":"\n\n\n![이미지](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_0.png)\n\n# 소개\n\n본 글에서는 .NET Core Web API를 사용하여 샘플 제품 애플리케이션의 백엔드를 만들고 React JS를 사용하여 웹 폼을 생성하는 방법을 살펴볼 것입니다. 또한 도커를 활용해 동일한 애플리케이션을 컨테이너화할 것입니다.\n\n# 안내\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 샘플 제품 애플리케이션: 백엔드 (.NET Core Web API)\r\n- 샘플 제품 애플리케이션: 프론트엔드 (React JS)\r\n- 애플리케이션을 위한 Docker 파일\r\n- 애플리케이션을 컨테이너화하기\r\n\r\n## 필수 사항\r\n\r\n- Visual Studio 2022\r\n- Docker Desktop\r\n- NPM\r\n- .NET Core SDK\r\n- React JS\r\n\r\n# 샘플 제품 애플리케이션: 백엔드 (.NET Core Web API)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n1. 새로운 제품 관리 .NET Core 웹 API를 생성해주세요.\n\n2. 데이터베이스 마이그레이션 및 SQL Server와의 연결을 위해 사용한 다음 NuGet 패키지를 설치해주세요.\n\n[이미지](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_1.png)\n\n3. 엔티티 폴더 안에 제품 클래스를 추가해주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n```js\nnamespace ProductManagementAPI.Entities\n{\n    public class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public decimal Price { get; set; }\n    }\n}\n```\n\nStep 4. Create an AppDbContext class inside the data folder with a SQL Server connection and a DB set property.\n\n```js\nusing Microsoft.EntityFrameworkCore;\nusing ProductManagementAPI.Entities;\n\nnamespace ProductManagementAPI.Data\n{\n    public class AppDbContext : DbContext\n    {\n        public DbSet<Product> Products { get; set; }\n\n        protected readonly IConfiguration Configuration;\n\n        public AppDbContext(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n        protected override void OnConfiguring(DbContextOptionsBuilder options)\n        {\n            options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"));\n            options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\n        }\n    }\n}\n```\n\nStep 5. Add a product repository inside the repositories folder.\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIProductRepository\n\n```js\nusing ProductManagementAPI.Entities;\n\nnamespace ProductManagementAPI.Repositories\n{\n    public interface IProductRepository\n    {\n        void AddProduct(Product product);\n        void DeleteProduct(int id);\n        List<Product> GetAllProducts();\n        Product GetProductById(int id);\n        void UpdateProduct(Product product);\n    }\n}\n```\n\nProductRepository\n\n```js\nusing Microsoft.EntityFrameworkCore;\nusing ProductManagementAPI.Data;\nusing ProductManagementAPI.Entities;\n\nnamespace ProductManagementAPI.Repositories\n{\n    public class ProductRepository : IProductRepository\n    {\n        private readonly AppDbContext _context;\n\n        public ProductRepository(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public List<Product> GetAllProducts()\n        {\n            return _context.Products.ToList();\n        }\n\n        public Product GetProductById(int id)\n        {\n            return _context.Products.FirstOrDefault(p => p.Id == id);\n        }\n\n        public void AddProduct(Product product)\n        {\n            if (product == null)\n            {\n                throw new ArgumentNullException(nameof(product));\n            }\n\n            _context.Products.Add(product);\n            _context.SaveChanges();\n        }\n\n        public void UpdateProduct(Product product)\n        {\n            if (product == null)\n            {\n                throw new ArgumentNullException(nameof(product));\n            }\n\n            _context.Entry(product).State = EntityState.Modified;\n            _context.SaveChanges();\n        }\n\n        public void DeleteProduct(int id)\n        {\n            var product = _context.Products.Find(id);\n            if (product == null)\n            {\n                throw new ArgumentNullException(nameof(product));\n            }\n\n            _context.Products.Remove(product);\n            _context.SaveChanges();\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n6단계. 다양한 작업을 수행하는 데 사용되는 다른 액션 메서드를 사용하여 새 제품 컨트롤러를 생성합니다. 이후 같은 것을 호출하는 프런트엔드 애플리케이션을 사용하여 여러 작업을 수행합니다.\n\n```js\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing ProductManagementAPI.Entities;\nusing ProductManagementAPI.Repositories;\n\nnamespace ProductManagementAPI.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ProductController : ControllerBase\n    {\n        private readonly IProductRepository _productRepository;\n\n        public ProductController(IProductRepository productRepository)\n        {\n            _productRepository = productRepository;\n        }\n\n        [HttpGet]\n        public IActionResult GetAllProducts()\n        {\n            var products = _productRepository.GetAllProducts();\n            return Ok(products);\n        }\n\n        [HttpGet(\"{id}\")]\n        public IActionResult GetProductById(int id)\n        {\n            var product = _productRepository.GetProductById(id);\n            if (product == null)\n            {\n                return NotFound();\n            }\n            return Ok(product);\n        }\n\n        [HttpPost]\n        public IActionResult AddProduct([FromBody] Product product)\n        {\n            if (product == null)\n            {\n                return BadRequest();\n            }\n\n            _productRepository.AddProduct(product);\n            return CreatedAtAction(nameof(GetProductById), new { id = product.Id }, product);\n        }\n\n        [HttpPut(\"{id}\")]\n        public IActionResult UpdateProduct(int id, [FromBody] Product product)\n        {\n            if (product == null || id != product.Id)\n            {\n                return BadRequest();\n            }\n\n            var existingProduct = _productRepository.GetProductById(id);\n            if (existingProduct == null)\n            {\n                return NotFound();\n            }\n\n            _productRepository.UpdateProduct(product);\n            return NoContent();\n        }\n\n        [HttpDelete(\"{id}\")]\n        public IActionResult DeleteProduct(int id)\n        {\n            var existingProduct = _productRepository.GetProductById(id);\n            if (existingProduct == null)\n            {\n                return NotFound();\n            }\n\n            _productRepository.DeleteProduct(id);\n            return NoContent();\n        }\n    }\n}\n```\n\n7단계. 앱 설정 파일을 열고 데이터베이스 연결 문자열을 추가합니다.\n\n```js\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Data Source=DESKTOP-8RL8JOG;Initial Catalog=ReactNetCoreCrudDb;User Id=sa;Password=database@1;\"\n  }\n}\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n**단계 8.** 서비스 컨테이너 내에서 서비스를 등록하고 미들웨어를 구성하세요.\n\n```js\nusing ProductManagementAPI.Data;\nusing ProductManagementAPI.Repositories;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// 컨테이너에 서비스 추가.\nbuilder.Services.AddScoped<IProductRepository, ProductRepository>();\nbuilder.Services.AddDbContext<AppDbContext>();\nbuilder.Services.AddCors(options => {\n    options.AddPolicy(\"CORSPolicy\", builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());\n});\n\n\nbuilder.Services.AddControllers();\n// Swagger/OpenAPI를 구성하는 방법에 대해 자세히 알아보려면 https://aka.ms/aspnetcore/swashbuckle을 방문하십시오.\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nvar app = builder.Build();\n\n// HTTP 요청 파이프라인을 구성하세요.\napp.UseCors(\"CORSPolicy\");\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n```\n\n**단계 9.** 다음 엔티티 프레임워크 데이터베이스 마이그레이션 명령을 실행하여 데이터베이스 및 테이블을 생성하세요.\n\n```js\nadd-migration “v1”\n\nupdate-database\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n10단계. 마지막으로 애플리케이션을 실행하고 Swagger UI를 사용하여 다양한 API 엔드포인트를 실행합니다.\n\n![image](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_2.png)\n\n# 샘플 제품 애플리케이션: 프론트엔드 (React JS)\n\nReact JS를 사용하여 클라이언트 애플리케이션을 만들고 위의 API 엔드포인트를 사용하여 소비합시다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n**단계 1.** 다음 명령을 사용하여 새로운 React JS 애플리케이션을 생성하세요:\n\n```js\nnpx create-react-app react-netcore-crud-app\n```\n\n**단계 2.** 프로젝트 디렉토리로 이동하세요:\n\n```js\ncd react-netcore-crud-app\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n단계 3. 백엔드 API를 소비하고 호출하기 위해 Axios를 설치하고 설계 목적으로 부트스트랩을 설치하세요.\n\n```js\nnpm install axios\n```\n\n```js\nnpm install bootstrap\n```\n\n단계 4. 다음 컴포넌트 및 서비스를 추가하세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제품 목록 컴포넌트입니다.\n\n```js\n// src/components/ProductList/ProductList.js\nimport React, { useState, useEffect } from 'react';\nimport ProductListItem from './ProductListItem';\nimport productService from '../../services/productService';\n\nconst ProductList = () => {\n    const [products, setProducts] = useState([]);\n\n    useEffect(() => {\n        fetchProducts();\n    }, []);\n\n    const fetchProducts = async () => {\n        try {\n            const productsData = await productService.getAllProducts();\n            setProducts(productsData);\n        } catch (error) {\n            console.error('제품을 불러오는 중 오류가 발생했습니다:', error);\n        }\n    };\n\n    const handleDelete = async (id) => {\n        try {\n            await productService.deleteProduct(id);\n            fetchProducts(); // 제품 목록 새로고침\n        } catch (error) {\n            console.error('제품 삭제 중 오류가 발생했습니다:', error);\n        }\n    };\n\n    const handleEdit = () => {\n        fetchProducts(); // 편집 후 제품 목록 새로고침\n    };\n\n    return (\n        <div className=\"container\">\n            <h2 className=\"my-4\">제품 목록</h2>\n            <ul className=\"list-group\">\n                {products.map(product => (\n                    <ProductListItem key={product.id} product={product} onDelete={() => handleDelete(product.id)} onEdit={handleEdit} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default ProductList;\n```\n\n제품 목록 아이템 컴포넌트입니다.\n\n```js\n// src/components/ProductList/ProductListItem.js\nimport React, { useState } from 'react';\nimport productService from '../../services/productService';\n\nconst ProductListItem = ({ product, onDelete, onEdit }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [editedName, setEditedName] = useState(product.name);\n    const [editedPrice, setEditedPrice] = useState(product.price);\n\n    const handleEdit = async () => {\n        setIsEditing(true);\n    };\n\n    const handleSave = async () => {\n        const editedProduct = { ...product, name: editedName, price: parseFloat(editedPrice) };\n        try {\n            await productService.updateProduct(product.id, editedProduct);\n            setIsEditing(false);\n            onEdit(); // 제품 목록 새로고침\n        } catch (error) {\n            console.error('제품 업데이트 중 오류가 발생했습니다:', error);\n        }\n    };\n\n    const handleCancel = () => {\n        setIsEditing(false);\n        // 수정된 값 초기화\n        setEditedName(product.name);\n        setEditedPrice(product.price);\n    };\n\n    return (\n        <li className=\"list-group-item\">\n            {isEditing ? (\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <input type=\"text\" className=\"form-control\" value={editedName} onChange={e => setEditedName(e.target.value)} required />\n                    </div>\n                    <div className=\"col\">\n                        <input type=\"number\" className=\"form-control\" value={editedPrice} onChange={e => setEditedPrice(e.target.value)} required />\n                    </div>\n                    <div className=\"col-auto\">\n                        <button className=\"btn btn-success me-2\" onClick={handleSave}>저장</button>\n                        <button className=\"btn btn-secondary\" onClick={handleCancel}>취소</button>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"d-flex justify-content-between align-items-center\">\n                    <span>{product.name} - ${product.price}</span>\n                    <div>\n                        <button className=\"btn btn-danger me-2\" onClick={onDelete}>삭제</button>\n                        <button className=\"btn btn-primary\" onClick={handleEdit}>편집</button>\n                    </div>\n                </div>\n            )}\n        </li>\n    );\n};\n\nexport default ProductListItem;\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제품 서비스.\n\n```js\n// src/services/productService.js\nimport axios from 'axios';\n\nconst baseURL = 'https://localhost:7202/api/Product';\n\nconst productService = {\n    getAllProducts: async () => {\n        const response = await axios.get(baseURL);\n        return response.data;\n    },\n    addProduct: async (product) => {\n        const response = await axios.post(baseURL, product);\n        return response.data;\n    },\n    deleteProduct: async (id) => {\n        const response = await axios.delete(`${baseURL}/${id}`);\n        return response.data;\n    },\n    updateProduct: async (id, product) => {\n        const response = await axios.put(`${baseURL}/${id}`, product);\n        return response.data;\n    }\n};\n\nexport default productService;\n```\n\n앱 컴포넌트.\n\n```js\n// src/App.js\nimport React, { useState } from 'react';\nimport ProductList from './components/ProductList/ProductList';\nimport ProductForm from './components/ProductForm/ProductForm';\n\nfunction App() {\n    const [refresh, setRefresh] = useState(false);\n\n    const handleProductAdded = () => {\n        setRefresh(!refresh); // 다시 렌더링을 트리거 할 수 있도록 새로 고침 상태를 토글\n    };\n\n    return (\n        <div>\n            <ProductList key={refresh} />\n            <ProductForm onProductAdded={handleProductAdded} />\n        </div>\n    );\n}\n\nexport default App;\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 명령을 사용하여 애플리케이션을 실행하고 동일한 도움으로 다양한 CRUD 작업을 수행하세요.\n\n![애플리케이션 실행](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_3.png)\n\n# 애플리케이션을 위한 Docker 파일\n\n- 백앤드 애플리케이션을 위한 Docker 파일 (.NET Core)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# 공식 .NET Core SDK를 부모 이미지로 사용합니다.\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\n\nWORKDIR /app\n\n# 프로젝트 파일을 복사하고 종속성을 복원합니다 (프로젝트 이름에 .csproj를 사용합니다).\nCOPY *.csproj ./\n\nRUN dotnet restore\n\n# 나머지 응용 프로그램 코드를 복사합니다.\nCOPY . .\n\n# 응용 프로그램을 게시합니다.\nRUN dotnet publish -c Release -o out\n\n# 런타임 이미지를 빌드합니다.\nFROM mcr.microsoft.com/dotnet/aspnet:6.0 AS runtime\n\nWORKDIR /app\nCOPY --from=build /app/out ./\n\n# 응용 프로그램이 실행될 포트를 노출합니다.\nEXPOSE 80\n\n# 응용 프로그램을 시작합니다.\nENTRYPOINT [\"dotnet\", \"ProductManagementAPI.dll\"]\n```\n\n- 1–2번 라인: 공식 .NET Core SDK 이미지 (mcr.microsoft.com/dotnet/sdk:6.0)를 기본 이미지로 사용합니다.\n- 4번 라인: 작업 디렉터리를 /app으로 설정합니다.\n- 6–7번 라인: 프로젝트 파일(*.csproj)을 컨테이너로 복사합니다.\n- 9번 라인: dotnet restore를 실행하여 프로젝트 파일에서 지정된 종속성을 복원합니다.\n- 11–12번 라인: 나머지 응용 프로그램 코드를 컨테이너로 복사합니다.\n- 14–15번 라인: 응용 프로그램을 릴리스 구성으로 게시합니다 (dotnet publish -c Release -o out) out 디렉터리로 출력합니다.\n- 17–18번 라인: 공식 .NET Core ASP.NET 런타임 이미지 (mcr.microsoft.com/dotnet/aspnet:6.0)를 기본 이미지로 사용합니다.\n- 20–21번 라인: 작업 디렉터리를 /app으로 설정하고 빌드 단계의 게시된 출력(from /app/out)을 런타임 단계의 /app 디렉터리로 복사합니다.\n- 23–24번 라인: 외부에서 응용 프로그램에 액세스할 수 있도록 포트 80을 노출합니다.\n- 26–27번 라인: 응용 프로그램을 시작하는 엔트리 포인트 명령어로 dotnet ProductManagementAPI.dll을 지정합니다.\n\n2. 프론트엔드 애플리케이션 (React JS)을 위한 Docker 파일\n\n```js\n# 공식 Node.js 기본 이미지 사용\nFROM node:18\n\n# 작업 디렉터리 설정\nWORKDIR /app\n\n# package.json 및 package-lock.json 파일 복사\nCOPY package*.json ./\n\n# 종속성 설치\nRUN npm install\n\n# 나머지 애플리케이션 코드 복사\nCOPY . .\n\n# React 앱 빌드\nARG REACT_APP_API_URL\nENV REACT_APP_API_URL=$REACT_APP_API_URL\nRUN npm run build\n\n# serve를 전역적으로 설치하여 빌드 폴더를 제공합니다\nRUN npm install -g serve\n\n# 앱이 실행되는 포트 노출\nEXPOSE 3000\n\n# React 앱 시작\nCMD [\"serve\", \"-s\", \"build\"]\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 1–2번째 줄: Node.js 버전 18을 사용하는 기본 이미지를 지정합니다.\n- 4–5번째 줄: 이후 명령에 대한 작업 디렉토리로 /app를 설정합니다.\n- 7–8번째 줄: package.json 및 package-lock.json을 로컬 머신에서 Docker 이미지로 복사합니다.\n- 10–11번째 줄: package.json에 나열된 모든 종속성을 설치하기 위해 npm install을 실행합니다.\n- 13–14번째 줄: 나머지 애플리케이션 코드를 Docker 이미지로 복사합니다.\n- 16–19번째 줄: ARG 명령은 빌드 시간 변수 REACT_APP_API_URL을 정의합니다. ENV 명령은 빌드 시간 변수의 값인 REACT_APP_API_URL 환경 변수를 설정합니다. 또한 RUN npm run build는 React 애플리케이션을 빌드합니다.\n- 21–22번째 줄: serve 패키지를 전역으로 설치하여 빌드된 React 애플리케이션을 제공합니다.\n- 24–25번째 줄: 애플리케이션이 실행될 포트인 3000을 노출합니다.\n- 27–28번째 줄: 명령은 serve를 사용하여 빌드 폴더를 제공함으로써 React 애플리케이션을 시작합니다.\n\n프런트엔드 애플리케이션에 대해 React 프로젝트 루트에 .env 파일을 생성합니다. 이 파일에는 환경 변수가 포함되어 있으며, Docker 이미지를 실행하거나 백엔드 API URL을 전달하는 데 사용할 수 있습니다.\n\n```js\nREACT_APP_API_URL=http://your-backend-url.com\n```\n\n다음으로, 제품 서비스에서 백엔드 하드코딩된 URL을 수정하십시오.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// src/services/productService.js\nimport axios from 'axios';\n\nconst baseURL = process.env.REACT_APP_API_URL;\n\nconst productService = {\n    getAllProducts: async () => {\n        const response = await axios.get(baseURL);\n        return response.data;\n    },\n    addProduct: async (product) => {\n        const response = await axios.post(baseURL, product);\n        return response.data;\n    },\n    deleteProduct: async (id) => {\n        const response = await axios.delete(`${baseURL}/${id}`);\n        return response.data;\n    },\n    updateProduct: async (id, product) => {\n        const response = await axios.put(`${baseURL}/${id}`, product);\n        return response.data;\n    }\n};\n\nexport default productService;\n```\n\n## 프론트엔드 및 백엔드 어플리케이션을 컨테이너화하기\n\n단계 1.\n\n도커 이미지 빌드하기\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n도커 빌드 명령어를 사용하여 productbackendapp:latest 이미지를 빌드하세요.\n```\n\n![이미지](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_4.png)\n\n```js\n도커 빌드 명령어를 사용하여 REACT_APP_API_URL이 http://localhost:8085/api/Product인 productfrontendapp 이미지를 빌드하세요.\n```\n\n![이미지](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_5.png)\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nStep 2.\n\n필요한 매개변수를 전달한 후 이미지를 실행합니다. 필요한 매개변수는 env와 arguments입니다.\n\n```js\ndocker run -p 8085:80 -e \"ConnectionStrings__DefaultConnection=Data Source=192.168.100.194,1433;Initial Catalog=ReactNetCoreCrudDb;User Id=sa;Password=database@1;\" productbackendapp:latest\n```\n\n![이미지](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_6.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![Image 7](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_7.png)\n\n![Image 8](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_8.png)\n\n![Image 9](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_9.png)\n\n![Image 10](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_10.png)\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n도커 실행 -p 3000:3000 productfrontendapp\n```\n\n![이미지1](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_11.png)\n\n![이미지2](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_12.png)\n\n![이미지3](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_13.png)\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 샘플 애플리케이션 스크린샷\n\n![screenshot1](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_14.png)\n\n![screenshot2](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_15.png)\n\n![screenshot3](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_16.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![이미지 1](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_17.png)\n\n![이미지 2](/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_18.png)\n\n# GitHub\n\nhttps://github.com/Jaydeep-007/React_NETCore_CRUD-Docker\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이 기사에서는 .NET Core 및 SQL Server를 사용하여 제품 관리 백엔드 애플리케이션을 만들었습니다. 이 애플리케이션은 CRUD 작업을 수행하는 데 필요한 다양한 API 엔드포인트를 사용합니다. 나중에 React JS를 사용하여 프론트엔드 애플리케이션을 만들고, Axios를 활용하여 백엔드 애플리케이션을 소비하였습니다. 또한, 두 애플리케이션을 Docker를 사용하여 컨테이너화하였습니다.","ogImage":{"url":"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_0.png"},"coverImage":"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_0.png","tag":["Tech"],"readingTime":26},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_0.png\" alt=\"이미지\"></p>\n<h1>소개</h1>\n<p>본 글에서는 .NET Core Web API를 사용하여 샘플 제품 애플리케이션의 백엔드를 만들고 React JS를 사용하여 웹 폼을 생성하는 방법을 살펴볼 것입니다. 또한 도커를 활용해 동일한 애플리케이션을 컨테이너화할 것입니다.</p>\n<h1>안내</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>샘플 제품 애플리케이션: 백엔드 (.NET Core Web API)</li>\n<li>샘플 제품 애플리케이션: 프론트엔드 (React JS)</li>\n<li>애플리케이션을 위한 Docker 파일</li>\n<li>애플리케이션을 컨테이너화하기</li>\n</ul>\n<h2>필수 사항</h2>\n<ul>\n<li>Visual Studio 2022</li>\n<li>Docker Desktop</li>\n<li>NPM</li>\n<li>.NET Core SDK</li>\n<li>React JS</li>\n</ul>\n<h1>샘플 제품 애플리케이션: 백엔드 (.NET Core Web API)</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ol>\n<li>\n<p>새로운 제품 관리 .NET Core 웹 API를 생성해주세요.</p>\n</li>\n<li>\n<p>데이터베이스 마이그레이션 및 SQL Server와의 연결을 위해 사용한 다음 NuGet 패키지를 설치해주세요.</p>\n</li>\n</ol>\n<p><a href=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_1.png\">이미지</a></p>\n<ol start=\"3\">\n<li>엔티티 폴더 안에 제품 클래스를 추가해주세요.</li>\n</ol>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">namespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>\n{\n    public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Product</span>\n    {\n        public int <span class=\"hljs-title class_\">Id</span> { get; set; }\n        public string <span class=\"hljs-title class_\">Name</span> { get; set; }\n        public decimal <span class=\"hljs-title class_\">Price</span> { get; set; }\n    }\n}\n</code></pre>\n<p>Step 4. Create an AppDbContext class inside the data folder with a SQL Server connection and a DB set property.</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">EntityFrameworkCore</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>;\n\nnamespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Data</span>\n{\n    public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppDbContext</span> : <span class=\"hljs-title class_\">DbContext</span>\n    {\n        public <span class=\"hljs-title class_\">DbSet</span>&#x3C;<span class=\"hljs-title class_\">Product</span>> <span class=\"hljs-title class_\">Products</span> { get; set; }\n\n        protected readonly <span class=\"hljs-title class_\">IConfiguration</span> <span class=\"hljs-title class_\">Configuration</span>;\n\n        public <span class=\"hljs-title class_\">AppDbContext</span>(<span class=\"hljs-title class_\">IConfiguration</span> configuration)\n        {\n            <span class=\"hljs-title class_\">Configuration</span> = configuration;\n        }\n        protected override <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">OnConfiguring</span>(<span class=\"hljs-title class_\">DbContextOptionsBuilder</span> options)\n        {\n            options.<span class=\"hljs-title class_\">UseSqlServer</span>(<span class=\"hljs-title class_\">Configuration</span>.<span class=\"hljs-title class_\">GetConnectionString</span>(<span class=\"hljs-string\">\"DefaultConnection\"</span>));\n            options.<span class=\"hljs-title class_\">UseQueryTrackingBehavior</span>(<span class=\"hljs-title class_\">QueryTrackingBehavior</span>.<span class=\"hljs-property\">NoTracking</span>);\n        }\n    }\n}\n</code></pre>\n<p>Step 5. Add a product repository inside the repositories folder.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>IProductRepository</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>;\n\nnamespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Repositories</span>\n{\n    public interface <span class=\"hljs-title class_\">IProductRepository</span>\n    {\n        <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">AddProduct</span>(<span class=\"hljs-title class_\">Product</span> product);\n        <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">DeleteProduct</span>(int id);\n        <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Product</span>> <span class=\"hljs-title class_\">GetAllProducts</span>();\n        <span class=\"hljs-title class_\">Product</span> <span class=\"hljs-title class_\">GetProductById</span>(int id);\n        <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">UpdateProduct</span>(<span class=\"hljs-title class_\">Product</span> product);\n    }\n}\n</code></pre>\n<p>ProductRepository</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">EntityFrameworkCore</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Data</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>;\n\nnamespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Repositories</span>\n{\n    public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProductRepository</span> : <span class=\"hljs-title class_\">IProductRepository</span>\n    {\n        private readonly <span class=\"hljs-title class_\">AppDbContext</span> _context;\n\n        public <span class=\"hljs-title class_\">ProductRepository</span>(<span class=\"hljs-title class_\">AppDbContext</span> context)\n        {\n            _context = context;\n        }\n\n        public <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">Product</span>> <span class=\"hljs-title class_\">GetAllProducts</span>()\n        {\n            <span class=\"hljs-keyword\">return</span> _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">ToList</span>();\n        }\n\n        public <span class=\"hljs-title class_\">Product</span> <span class=\"hljs-title class_\">GetProductById</span>(int id)\n        {\n            <span class=\"hljs-keyword\">return</span> _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">FirstOrDefault</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">p</span> =></span> p.<span class=\"hljs-property\">Id</span> == id);\n        }\n\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">AddProduct</span>(<span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentNullException</span>(<span class=\"hljs-title function_\">nameof</span>(product));\n            }\n\n            _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">Add</span>(product);\n            _context.<span class=\"hljs-title class_\">SaveChanges</span>();\n        }\n\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">UpdateProduct</span>(<span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentNullException</span>(<span class=\"hljs-title function_\">nameof</span>(product));\n            }\n\n            _context.<span class=\"hljs-title class_\">Entry</span>(product).<span class=\"hljs-property\">State</span> = <span class=\"hljs-title class_\">EntityState</span>.<span class=\"hljs-property\">Modified</span>;\n            _context.<span class=\"hljs-title class_\">SaveChanges</span>();\n        }\n\n        public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title class_\">DeleteProduct</span>(int id)\n        {\n            <span class=\"hljs-keyword\">var</span> product = _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">Find</span>(id);\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArgumentNullException</span>(<span class=\"hljs-title function_\">nameof</span>(product));\n            }\n\n            _context.<span class=\"hljs-property\">Products</span>.<span class=\"hljs-title class_\">Remove</span>(product);\n            _context.<span class=\"hljs-title class_\">SaveChanges</span>();\n        }\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>6단계. 다양한 작업을 수행하는 데 사용되는 다른 액션 메서드를 사용하여 새 제품 컨트롤러를 생성합니다. 이후 같은 것을 호출하는 프런트엔드 애플리케이션을 사용하여 여러 작업을 수행합니다.</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">Http</span>;\nusing <span class=\"hljs-title class_\">Microsoft</span>.<span class=\"hljs-property\">AspNetCore</span>.<span class=\"hljs-property\">Mvc</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Entities</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Repositories</span>;\n\nnamespace <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Controllers</span>\n{\n    [<span class=\"hljs-title class_\">ApiController</span>]\n    [<span class=\"hljs-title class_\">Route</span>(<span class=\"hljs-string\">\"api/[controller]\"</span>)]\n    public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProductController</span> : <span class=\"hljs-title class_\">ControllerBase</span>\n    {\n        private readonly <span class=\"hljs-title class_\">IProductRepository</span> _productRepository;\n\n        public <span class=\"hljs-title class_\">ProductController</span>(<span class=\"hljs-title class_\">IProductRepository</span> productRepository)\n        {\n            _productRepository = productRepository;\n        }\n\n        [<span class=\"hljs-title class_\">HttpGet</span>]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">GetAllProducts</span>()\n        {\n            <span class=\"hljs-keyword\">var</span> products = _productRepository.<span class=\"hljs-title class_\">GetAllProducts</span>();\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Ok</span>(products);\n        }\n\n        [<span class=\"hljs-title class_\">HttpGet</span>(<span class=\"hljs-string\">\"{id}\"</span>)]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">GetProductById</span>(int id)\n        {\n            <span class=\"hljs-keyword\">var</span> product = _productRepository.<span class=\"hljs-title class_\">GetProductById</span>(id);\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NotFound</span>();\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Ok</span>(product);\n        }\n\n        [<span class=\"hljs-title class_\">HttpPost</span>]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">AddProduct</span>([<span class=\"hljs-title class_\">FromBody</span>] <span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">BadRequest</span>();\n            }\n\n            _productRepository.<span class=\"hljs-title class_\">AddProduct</span>(product);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">CreatedAtAction</span>(<span class=\"hljs-title function_\">nameof</span>(<span class=\"hljs-title class_\">GetProductById</span>), <span class=\"hljs-keyword\">new</span> { id = product.<span class=\"hljs-property\">Id</span> }, product);\n        }\n\n        [<span class=\"hljs-title class_\">HttpPut</span>(<span class=\"hljs-string\">\"{id}\"</span>)]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">UpdateProduct</span>(int id, [<span class=\"hljs-title class_\">FromBody</span>] <span class=\"hljs-title class_\">Product</span> product)\n        {\n            <span class=\"hljs-keyword\">if</span> (product == <span class=\"hljs-literal\">null</span> || id != product.<span class=\"hljs-property\">Id</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">BadRequest</span>();\n            }\n\n            <span class=\"hljs-keyword\">var</span> existingProduct = _productRepository.<span class=\"hljs-title class_\">GetProductById</span>(id);\n            <span class=\"hljs-keyword\">if</span> (existingProduct == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NotFound</span>();\n            }\n\n            _productRepository.<span class=\"hljs-title class_\">UpdateProduct</span>(product);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NoContent</span>();\n        }\n\n        [<span class=\"hljs-title class_\">HttpDelete</span>(<span class=\"hljs-string\">\"{id}\"</span>)]\n        public <span class=\"hljs-title class_\">IActionResult</span> <span class=\"hljs-title class_\">DeleteProduct</span>(int id)\n        {\n            <span class=\"hljs-keyword\">var</span> existingProduct = _productRepository.<span class=\"hljs-title class_\">GetProductById</span>(id);\n            <span class=\"hljs-keyword\">if</span> (existingProduct == <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NotFound</span>();\n            }\n\n            _productRepository.<span class=\"hljs-title class_\">DeleteProduct</span>(id);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">NoContent</span>();\n        }\n    }\n}\n</code></pre>\n<p>7단계. 앱 설정 파일을 열고 데이터베이스 연결 문자열을 추가합니다.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"Logging\"</span>: {\n    <span class=\"hljs-string\">\"LogLevel\"</span>: {\n      <span class=\"hljs-string\">\"Default\"</span>: <span class=\"hljs-string\">\"Information\"</span>,\n      <span class=\"hljs-string\">\"Microsoft.AspNetCore\"</span>: <span class=\"hljs-string\">\"Warning\"</span>\n    }\n  },\n  <span class=\"hljs-string\">\"AllowedHosts\"</span>: <span class=\"hljs-string\">\"*\"</span>,\n  <span class=\"hljs-string\">\"ConnectionStrings\"</span>: {\n    <span class=\"hljs-string\">\"DefaultConnection\"</span>: <span class=\"hljs-string\">\"Data Source=DESKTOP-8RL8JOG;Initial Catalog=ReactNetCoreCrudDb;User Id=sa;Password=database@1;\"</span>\n  }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><strong>단계 8.</strong> 서비스 컨테이너 내에서 서비스를 등록하고 미들웨어를 구성하세요.</p>\n<pre><code class=\"hljs language-js\">using <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Data</span>;\nusing <span class=\"hljs-title class_\">ProductManagementAPI</span>.<span class=\"hljs-property\">Repositories</span>;\n\n<span class=\"hljs-keyword\">var</span> builder = <span class=\"hljs-title class_\">WebApplication</span>.<span class=\"hljs-title class_\">CreateBuilder</span>(args);\n\n<span class=\"hljs-comment\">// 컨테이너에 서비스 추가.</span>\nbuilder.<span class=\"hljs-property\">Services</span>.<span class=\"hljs-property\">AddScoped</span>&#x3C;<span class=\"hljs-title class_\">IProductRepository</span>, <span class=\"hljs-title class_\">ProductRepository</span>>();\nbuilder.<span class=\"hljs-property\">Services</span>.<span class=\"hljs-property\">AddDbContext</span>&#x3C;<span class=\"hljs-title class_\">AppDbContext</span>>();\nbuilder.<span class=\"hljs-property\">Services</span>.<span class=\"hljs-title class_\">AddCors</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">options</span> =></span> {\n    options.<span class=\"hljs-title class_\">AddPolicy</span>(<span class=\"hljs-string\">\"CORSPolicy\"</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">builder</span> =></span> builder.<span class=\"hljs-title class_\">AllowAnyOrigin</span>().<span class=\"hljs-title class_\">AllowAnyMethod</span>().<span class=\"hljs-title class_\">AllowAnyHeader</span>());\n});\n\n\nbuilder.<span class=\"hljs-property\">Services</span>.<span class=\"hljs-title class_\">AddControllers</span>();\n<span class=\"hljs-comment\">// Swagger/OpenAPI를 구성하는 방법에 대해 자세히 알아보려면 https://aka.ms/aspnetcore/swashbuckle을 방문하십시오.</span>\nbuilder.<span class=\"hljs-property\">Services</span>.<span class=\"hljs-title class_\">AddEndpointsApiExplorer</span>();\nbuilder.<span class=\"hljs-property\">Services</span>.<span class=\"hljs-title class_\">AddSwaggerGen</span>();\n\n<span class=\"hljs-keyword\">var</span> app = builder.<span class=\"hljs-title class_\">Build</span>();\n\n<span class=\"hljs-comment\">// HTTP 요청 파이프라인을 구성하세요.</span>\napp.<span class=\"hljs-title class_\">UseCors</span>(<span class=\"hljs-string\">\"CORSPolicy\"</span>);\n\n<span class=\"hljs-keyword\">if</span> (app.<span class=\"hljs-property\">Environment</span>.<span class=\"hljs-title class_\">IsDevelopment</span>())\n{\n    app.<span class=\"hljs-title class_\">UseSwagger</span>();\n    app.<span class=\"hljs-title class_\">UseSwaggerUI</span>();\n}\n\napp.<span class=\"hljs-title class_\">UseHttpsRedirection</span>();\n\napp.<span class=\"hljs-title class_\">UseAuthorization</span>();\n\napp.<span class=\"hljs-title class_\">MapControllers</span>();\n\napp.<span class=\"hljs-title class_\">Run</span>();\n</code></pre>\n<p><strong>단계 9.</strong> 다음 엔티티 프레임워크 데이터베이스 마이그레이션 명령을 실행하여 데이터베이스 및 테이블을 생성하세요.</p>\n<pre><code class=\"hljs language-js\">add-migration “v1”\n\nupdate-database\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>10단계. 마지막으로 애플리케이션을 실행하고 Swagger UI를 사용하여 다양한 API 엔드포인트를 실행합니다.</p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_2.png\" alt=\"image\"></p>\n<h1>샘플 제품 애플리케이션: 프론트엔드 (React JS)</h1>\n<p>React JS를 사용하여 클라이언트 애플리케이션을 만들고 위의 API 엔드포인트를 사용하여 소비합시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><strong>단계 1.</strong> 다음 명령을 사용하여 새로운 React JS 애플리케이션을 생성하세요:</p>\n<pre><code class=\"hljs language-js\">npx create-react-app react-netcore-crud-app\n</code></pre>\n<p><strong>단계 2.</strong> 프로젝트 디렉토리로 이동하세요:</p>\n<pre><code class=\"hljs language-js\">cd react-netcore-crud-app\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>단계 3. 백엔드 API를 소비하고 호출하기 위해 Axios를 설치하고 설계 목적으로 부트스트랩을 설치하세요.</p>\n<pre><code class=\"hljs language-js\">npm install axios\n</code></pre>\n<pre><code class=\"hljs language-js\">npm install bootstrap\n</code></pre>\n<p>단계 4. 다음 컴포넌트 및 서비스를 추가하세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>제품 목록 컴포넌트입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/ProductList/ProductList.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductListItem</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ProductListItem'</span>;\n<span class=\"hljs-keyword\">import</span> productService <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../services/productService'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductList</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">const</span> [products, setProducts] = <span class=\"hljs-title function_\">useState</span>([]);\n\n    <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-title function_\">fetchProducts</span>();\n    }, []);\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchProducts</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">const</span> productsData = <span class=\"hljs-keyword\">await</span> productService.<span class=\"hljs-title function_\">getAllProducts</span>();\n            <span class=\"hljs-title function_\">setProducts</span>(productsData);\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'제품을 불러오는 중 오류가 발생했습니다:'</span>, error);\n        }\n    };\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleDelete</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">id</span>) => {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">await</span> productService.<span class=\"hljs-title function_\">deleteProduct</span>(id);\n            <span class=\"hljs-title function_\">fetchProducts</span>(); <span class=\"hljs-comment\">// 제품 목록 새로고침</span>\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'제품 삭제 중 오류가 발생했습니다:'</span>, error);\n        }\n    };\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleEdit</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">fetchProducts</span>(); <span class=\"hljs-comment\">// 편집 후 제품 목록 새로고침</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"my-4\"</span>></span>제품 목록<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-group\"</span>></span>\n                {products.map(product => (\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductListItem</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{product.id}</span> <span class=\"hljs-attr\">product</span>=<span class=\"hljs-string\">{product}</span> <span class=\"hljs-attr\">onDelete</span>=<span class=\"hljs-string\">{()</span> =></span> handleDelete(product.id)} onEdit={handleEdit} />\n                ))}\n            <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductList</span>;\n</code></pre>\n<p>제품 목록 아이템 컴포넌트입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/components/ProductList/ProductListItem.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> productService <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../services/productService'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ProductListItem</span> = (<span class=\"hljs-params\">{ product, onDelete, onEdit }</span>) => {\n    <span class=\"hljs-keyword\">const</span> [isEditing, setIsEditing] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-keyword\">const</span> [editedName, setEditedName] = <span class=\"hljs-title function_\">useState</span>(product.<span class=\"hljs-property\">name</span>);\n    <span class=\"hljs-keyword\">const</span> [editedPrice, setEditedPrice] = <span class=\"hljs-title function_\">useState</span>(product.<span class=\"hljs-property\">price</span>);\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleEdit</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">setIsEditing</span>(<span class=\"hljs-literal\">true</span>);\n    };\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSave</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-keyword\">const</span> editedProduct = { ...product, <span class=\"hljs-attr\">name</span>: editedName, <span class=\"hljs-attr\">price</span>: <span class=\"hljs-built_in\">parseFloat</span>(editedPrice) };\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">await</span> productService.<span class=\"hljs-title function_\">updateProduct</span>(product.<span class=\"hljs-property\">id</span>, editedProduct);\n            <span class=\"hljs-title function_\">setIsEditing</span>(<span class=\"hljs-literal\">false</span>);\n            <span class=\"hljs-title function_\">onEdit</span>(); <span class=\"hljs-comment\">// 제품 목록 새로고침</span>\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n            <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">'제품 업데이트 중 오류가 발생했습니다:'</span>, error);\n        }\n    };\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleCancel</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">setIsEditing</span>(<span class=\"hljs-literal\">false</span>);\n        <span class=\"hljs-comment\">// 수정된 값 초기화</span>\n        <span class=\"hljs-title function_\">setEditedName</span>(product.<span class=\"hljs-property\">name</span>);\n        <span class=\"hljs-title function_\">setEditedPrice</span>(product.<span class=\"hljs-property\">price</span>);\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"list-group-item\"</span>></span>\n            {isEditing ? (\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"row\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{editedName}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =></span> setEditedName(e.target.value)} required />\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"number\"</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"form-control\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{editedPrice}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{e</span> =></span> setEditedPrice(e.target.value)} required />\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"col-auto\"</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-success me-2\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSave}</span>></span>저장<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-secondary\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleCancel}</span>></span>취소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            ) : (\n                <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"d-flex justify-content-between align-items-center\"</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>{product.name} - ${product.price}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-danger me-2\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onDelete}</span>></span>삭제<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"btn btn-primary\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleEdit}</span>></span>편집<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n                    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n                <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n            )}\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span></span>\n    );\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ProductListItem</span>;\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>제품 서비스.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/services/productService.js</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> baseURL = <span class=\"hljs-string\">'https://localhost:7202/api/Product'</span>;\n\n<span class=\"hljs-keyword\">const</span> productService = {\n    <span class=\"hljs-attr\">getAllProducts</span>: <span class=\"hljs-keyword\">async</span> () => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">get</span>(baseURL);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">addProduct</span>: <span class=\"hljs-keyword\">async</span> (product) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(baseURL, product);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">deleteProduct</span>: <span class=\"hljs-keyword\">async</span> (id) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseURL}</span>/<span class=\"hljs-subst\">${id}</span>`</span>);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">updateProduct</span>: <span class=\"hljs-keyword\">async</span> (id, product) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseURL}</span>/<span class=\"hljs-subst\">${id}</span>`</span>, product);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    }\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> productService;\n</code></pre>\n<p>앱 컴포넌트.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/App.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductList</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/ProductList/ProductList'</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ProductForm</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/ProductForm/ProductForm'</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> [refresh, setRefresh] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleProductAdded</span> = (<span class=\"hljs-params\"></span>) => {\n        <span class=\"hljs-title function_\">setRefresh</span>(!refresh); <span class=\"hljs-comment\">// 다시 렌더링을 트리거 할 수 있도록 새로 고침 상태를 토글</span>\n    };\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductList</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{refresh}</span> /></span>\n            <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ProductForm</span> <span class=\"hljs-attr\">onProductAdded</span>=<span class=\"hljs-string\">{handleProductAdded}</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    );\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">App</span>;\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음 명령을 사용하여 애플리케이션을 실행하고 동일한 도움으로 다양한 CRUD 작업을 수행하세요.</p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_3.png\" alt=\"애플리케이션 실행\"></p>\n<h1>애플리케이션을 위한 Docker 파일</h1>\n<ul>\n<li>백앤드 애플리케이션을 위한 Docker 파일 (.NET Core)</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># 공식 .<span class=\"hljs-property\">NET</span> <span class=\"hljs-title class_\">Core</span> <span class=\"hljs-variable constant_\">SDK</span>를 부모 이미지로 사용합니다.\n<span class=\"hljs-variable constant_\">FROM</span> mcr.<span class=\"hljs-property\">microsoft</span>.<span class=\"hljs-property\">com</span>/dotnet/<span class=\"hljs-attr\">sdk</span>:<span class=\"hljs-number\">6.0</span> <span class=\"hljs-variable constant_\">AS</span> build\n\n<span class=\"hljs-variable constant_\">WORKDIR</span> /app\n\n# 프로젝트 파일을 복사하고 종속성을 복원합니다 (프로젝트 이름에 .<span class=\"hljs-property\">csproj</span>를 사용합니다).\n<span class=\"hljs-variable constant_\">COPY</span> *.<span class=\"hljs-property\">csproj</span> ./\n\n<span class=\"hljs-variable constant_\">RUN</span> dotnet restore\n\n# 나머지 응용 프로그램 코드를 복사합니다.\n<span class=\"hljs-variable constant_\">COPY</span> . .\n\n# 응용 프로그램을 게시합니다.\n<span class=\"hljs-variable constant_\">RUN</span> dotnet publish -c <span class=\"hljs-title class_\">Release</span> -o out\n\n# 런타임 이미지를 빌드합니다.\n<span class=\"hljs-variable constant_\">FROM</span> mcr.<span class=\"hljs-property\">microsoft</span>.<span class=\"hljs-property\">com</span>/dotnet/<span class=\"hljs-attr\">aspnet</span>:<span class=\"hljs-number\">6.0</span> <span class=\"hljs-variable constant_\">AS</span> runtime\n\n<span class=\"hljs-variable constant_\">WORKDIR</span> /app\n<span class=\"hljs-variable constant_\">COPY</span> --<span class=\"hljs-keyword\">from</span>=build /app/out ./\n\n# 응용 프로그램이 실행될 포트를 노출합니다.\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">80</span>\n\n# 응용 프로그램을 시작합니다.\n<span class=\"hljs-variable constant_\">ENTRYPOINT</span> [<span class=\"hljs-string\">\"dotnet\"</span>, <span class=\"hljs-string\">\"ProductManagementAPI.dll\"</span>]\n</code></pre>\n<ul>\n<li>1–2번 라인: 공식 .NET Core SDK 이미지 (mcr.microsoft.com/dotnet/sdk:6.0)를 기본 이미지로 사용합니다.</li>\n<li>4번 라인: 작업 디렉터리를 /app으로 설정합니다.</li>\n<li>6–7번 라인: 프로젝트 파일(*.csproj)을 컨테이너로 복사합니다.</li>\n<li>9번 라인: dotnet restore를 실행하여 프로젝트 파일에서 지정된 종속성을 복원합니다.</li>\n<li>11–12번 라인: 나머지 응용 프로그램 코드를 컨테이너로 복사합니다.</li>\n<li>14–15번 라인: 응용 프로그램을 릴리스 구성으로 게시합니다 (dotnet publish -c Release -o out) out 디렉터리로 출력합니다.</li>\n<li>17–18번 라인: 공식 .NET Core ASP.NET 런타임 이미지 (mcr.microsoft.com/dotnet/aspnet:6.0)를 기본 이미지로 사용합니다.</li>\n<li>20–21번 라인: 작업 디렉터리를 /app으로 설정하고 빌드 단계의 게시된 출력(from /app/out)을 런타임 단계의 /app 디렉터리로 복사합니다.</li>\n<li>23–24번 라인: 외부에서 응용 프로그램에 액세스할 수 있도록 포트 80을 노출합니다.</li>\n<li>26–27번 라인: 응용 프로그램을 시작하는 엔트리 포인트 명령어로 dotnet ProductManagementAPI.dll을 지정합니다.</li>\n</ul>\n<ol start=\"2\">\n<li>프론트엔드 애플리케이션 (React JS)을 위한 Docker 파일</li>\n</ol>\n<pre><code class=\"hljs language-js\"># 공식 <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\">js</span> 기본 이미지 사용\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">node</span>:<span class=\"hljs-number\">18</span>\n\n# 작업 디렉터리 설정\n<span class=\"hljs-variable constant_\">WORKDIR</span> /app\n\n# package.<span class=\"hljs-property\">json</span> 및 package-lock.<span class=\"hljs-property\">json</span> 파일 복사\n<span class=\"hljs-variable constant_\">COPY</span> package*.<span class=\"hljs-property\">json</span> ./\n\n# 종속성 설치\n<span class=\"hljs-variable constant_\">RUN</span> npm install\n\n# 나머지 애플리케이션 코드 복사\n<span class=\"hljs-variable constant_\">COPY</span> . .\n\n# <span class=\"hljs-title class_\">React</span> 앱 빌드\n<span class=\"hljs-variable constant_\">ARG</span> <span class=\"hljs-variable constant_\">REACT_APP_API_URL</span>\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">REACT_APP_API_URL</span>=$REACT_APP_API_URL\n<span class=\"hljs-variable constant_\">RUN</span> npm run build\n\n# serve를 전역적으로 설치하여 빌드 폴더를 제공합니다\n<span class=\"hljs-variable constant_\">RUN</span> npm install -g serve\n\n# 앱이 실행되는 포트 노출\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n\n# <span class=\"hljs-title class_\">React</span> 앱 시작\n<span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"serve\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"build\"</span>]\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>1–2번째 줄: Node.js 버전 18을 사용하는 기본 이미지를 지정합니다.</li>\n<li>4–5번째 줄: 이후 명령에 대한 작업 디렉토리로 /app를 설정합니다.</li>\n<li>7–8번째 줄: package.json 및 package-lock.json을 로컬 머신에서 Docker 이미지로 복사합니다.</li>\n<li>10–11번째 줄: package.json에 나열된 모든 종속성을 설치하기 위해 npm install을 실행합니다.</li>\n<li>13–14번째 줄: 나머지 애플리케이션 코드를 Docker 이미지로 복사합니다.</li>\n<li>16–19번째 줄: ARG 명령은 빌드 시간 변수 REACT_APP_API_URL을 정의합니다. ENV 명령은 빌드 시간 변수의 값인 REACT_APP_API_URL 환경 변수를 설정합니다. 또한 RUN npm run build는 React 애플리케이션을 빌드합니다.</li>\n<li>21–22번째 줄: serve 패키지를 전역으로 설치하여 빌드된 React 애플리케이션을 제공합니다.</li>\n<li>24–25번째 줄: 애플리케이션이 실행될 포트인 3000을 노출합니다.</li>\n<li>27–28번째 줄: 명령은 serve를 사용하여 빌드 폴더를 제공함으로써 React 애플리케이션을 시작합니다.</li>\n</ul>\n<p>프런트엔드 애플리케이션에 대해 React 프로젝트 루트에 .env 파일을 생성합니다. 이 파일에는 환경 변수가 포함되어 있으며, Docker 이미지를 실행하거나 백엔드 API URL을 전달하는 데 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">REACT_APP_API_URL</span>=<span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//your-backend-url.com</span>\n</code></pre>\n<p>다음으로, 제품 서비스에서 백엔드 하드코딩된 URL을 수정하십시오.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// src/services/productService.js</span>\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\n\n<span class=\"hljs-keyword\">const</span> baseURL = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">REACT_APP_API_URL</span>;\n\n<span class=\"hljs-keyword\">const</span> productService = {\n    <span class=\"hljs-attr\">getAllProducts</span>: <span class=\"hljs-keyword\">async</span> () => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">get</span>(baseURL);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">addProduct</span>: <span class=\"hljs-keyword\">async</span> (product) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">post</span>(baseURL, product);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">deleteProduct</span>: <span class=\"hljs-keyword\">async</span> (id) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseURL}</span>/<span class=\"hljs-subst\">${id}</span>`</span>);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    },\n    <span class=\"hljs-attr\">updateProduct</span>: <span class=\"hljs-keyword\">async</span> (id, product) => {\n        <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">put</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseURL}</span>/<span class=\"hljs-subst\">${id}</span>`</span>, product);\n        <span class=\"hljs-keyword\">return</span> response.<span class=\"hljs-property\">data</span>;\n    }\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> productService;\n</code></pre>\n<h2>프론트엔드 및 백엔드 어플리케이션을 컨테이너화하기</h2>\n<p>단계 1.</p>\n<p>도커 이미지 빌드하기</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">도커 빌드 명령어를 사용하여 <span class=\"hljs-attr\">productbackendapp</span>:latest 이미지를 빌드하세요.\n</code></pre>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_4.png\" alt=\"이미지\"></p>\n<pre><code class=\"hljs language-js\">도커 빌드 명령어를 사용하여 <span class=\"hljs-variable constant_\">REACT_APP_API_URL</span>이 <span class=\"hljs-attr\">http</span>:<span class=\"hljs-comment\">//localhost:8085/api/Product인 productfrontendapp 이미지를 빌드하세요.</span>\n</code></pre>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_5.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>Step 2.</p>\n<p>필요한 매개변수를 전달한 후 이미지를 실행합니다. 필요한 매개변수는 env와 arguments입니다.</p>\n<pre><code class=\"hljs language-js\">docker run -p <span class=\"hljs-number\">8085</span>:<span class=\"hljs-number\">80</span> -e <span class=\"hljs-string\">\"ConnectionStrings__DefaultConnection=Data Source=192.168.100.194,1433;Initial Catalog=ReactNetCoreCrudDb;User Id=sa;Password=database@1;\"</span> <span class=\"hljs-attr\">productbackendapp</span>:latest\n</code></pre>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_6.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_7.png\" alt=\"Image 7\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_8.png\" alt=\"Image 8\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_9.png\" alt=\"Image 9\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_10.png\" alt=\"Image 10\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">도커 실행 -p <span class=\"hljs-number\">3000</span>:<span class=\"hljs-number\">3000</span> productfrontendapp\n</code></pre>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_11.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_12.png\" alt=\"이미지2\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_13.png\" alt=\"이미지3\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>샘플 애플리케이션 스크린샷</h1>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_14.png\" alt=\"screenshot1\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_15.png\" alt=\"screenshot2\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_16.png\" alt=\"screenshot3\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_17.png\" alt=\"이미지 1\"></p>\n<p><img src=\"/assets/img/2024-07-01-BuildandContainerizeProductApplicationusingReactJSNETCoreandDocker_18.png\" alt=\"이미지 2\"></p>\n<h1>GitHub</h1>\n<p><a href=\"https://github.com/Jaydeep-007/React_NETCore_CRUD-Docker\" rel=\"nofollow\" target=\"_blank\">https://github.com/Jaydeep-007/React_NETCore_CRUD-Docker</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>결론</h1>\n<p>이 기사에서는 .NET Core 및 SQL Server를 사용하여 제품 관리 백엔드 애플리케이션을 만들었습니다. 이 애플리케이션은 CRUD 작업을 수행하는 데 필요한 다양한 API 엔드포인트를 사용합니다. 나중에 React JS를 사용하여 프론트엔드 애플리케이션을 만들고, Axios를 활용하여 백엔드 애플리케이션을 소비하였습니다. 또한, 두 애플리케이션을 Docker를 사용하여 컨테이너화하였습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}