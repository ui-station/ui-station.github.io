{"pageProps":{"post":{"title":"뷰로 퀸 게임 재현하는 방법","description":"","date":"2024-06-27 19:27","slug":"2024-06-27-RecreatingQueensGameinVue","content":"\n\n<img src=\"/assets/img/2024-06-27-RecreatingQueensGameinVue_0.png\" />\n\n최근에 매일 도전하다 보니 Queens라는 게임에 중독되었어요. 링크드인에서 소개된 게임인데 Vue를 사용하여 이 게임의 클론을 구현하는 것은 정말 즐거운 도전이었고 게임을 더 잘 이해하는 데 도움이 되었어요.\n\n# 게임\n\nQueens는 Minesweeper와 Sudoku 요소를 결합한 퍼즐 게임이에요. 8x8 그리드에서 플레이되며, 규칙에 따라 보드 위에 여덟 개의 퀸을 위치시키는 것이 목표예요:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 한 행에 한 퀸\n- 한 열에 한 퀸\n- 한 색 영역에 한 퀸\n- 대각선으로 연속적으로 위치한 셀에 두 개의 퀸을 놓을 수 없음\n\n이 모든 조건을 동시에 만족시키는 것이 과제입니다.\n\n![이미지](/assets/img/2024-06-27-RecreatingQueensGameinVue_1.png)\n\n## 초기 상태 모델링 - 첫 번째 시도\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제 첫 번째 접근 방식은 초기 보드를 무작위로 생성하는 것이었는데, 이렇게 하면 게임이 너무 쉽다는 것을 깨달았어요. 진정한 도전은 답이 하나뿐인 보드에서 온다고 생각해요. LinkedIn 및 다른 솔루션을 역공학한 후에 그들이 매번 미리 정의된 초기 보드를 사용한다는 것을 깨달았어요.\n\n## 초기 상태 모델링 - 두 번째 시도\n\n더 적합한 방법은 각 셀의 내용이 색상인 2차원 배열을 사용하는 것이에요.\n\n먼저, 각 숫자에 색상을 연결하는 맵을 갖게 될 거에요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ncellColors의 속성을 다음과 같이 변경하고\n\nexport const cellColors = {\n    1: \"#007B6C\",\n    2: \"#D18B00\",\n    3: \"#C75D00\",\n    4: \"#0044CC\",\n    5: \"#CC0000\",\n    6: \"#CCCC00\",\n    7: \"#008B8B\",\n    8: \"#8B008B\",\n  };\n\n그런 다음 초기 상태를 나타내는 2 차원 배열을 생성합니다.\n\nconst sectionGrid = [\n  [1, 1, 2, 2, 2, 3, 3, 3],\n  [1, 1, 2, 2, 2, 3, 3, 3],\n  [4, 1, 2, 2, 2, 3, 3, 3],\n  [4, 1, 5, 5, 5, 5, 3, 3],\n  [4, 1, 5, 5, 5, 5, 6, 6],\n  [4, 5, 5, 7, 7, 6, 6, 6],\n  [4, 8, 7, 7, 7, 6, 6, 6],\n  [8, 8, 8, 7, 7, 6, 6, 6]\n];\n\n그리고 나서 다음 이미지를 참고하세요. <img src=\"/assets/img/2024-06-27-RecreatingQueensGameinVue_2.png\" />\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리는 이제 초기 상태를 나타내는 것을 가지고 게임 보드를 시작할 수 있어요.\n\n## 게임 보드\n\n보드를 만들기 전에 각 셀에 대한 작은 구성 요소를 만들어 봅시다.\n\n```js\n<!-- GridCell.vue -->\n<script setup>\ndefineProps([\"content\", \"color\"]);\n</script>\n\n<template>\n  <div class=\"cell\" :style=\"{ backgroundColor: color }\">\n    <img v-if=\"content === 'queen'\" src=\"@/assets/crown.png\" class=\"queen\" />\n    <span v-if=\"content === 'marked'\">×</span>\n  </div>\n</template>\n\n<style scoped>\n.cell {\n  font-size: 24px;\n  border: 1px solid #000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  user-select: none;\n}\n\n.queen {\n  width: 24px;\n  height: 24px;\n}\n</style>\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 프레젠테이션 컴포넌트는 두 가지 매개변수를 받습니다. 셀 내용은 퀸, X 표시 또는 빈 경우에는 null이 될 수 있습니다. 또한 셀의 색상을 받습니다.\n\n이제 게임 보드를 만들려면 GridCell 컴포넌트 주위에 두 개의 중첩된 루프가 필요합니다. 게임이 종료되고 WinMessage 컴포넌트가 표시될 때 그리고 보드를 지우는 버튼이 있을 때입니다.\n\n대부분의 복잡성은 나중에 처리할 createGame 컴포저블 내부에 추상화되어 있습니다.\n\n이 보드는 정렬을 위해 CSS 그리드를 사용합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n<!-- GameBoard.vue -->\n<script setup>\nimport GridCell from \"@/features/game/components/GridCell.vue\";\nimport { createGame } from \"@/features/game/composables/createGame\";\nimport WinMessage from \"@/features/game/components/WinMessage.vue\";\nimport AppButton from \"@/components/AppButton.vue\";\nimport { cellColors } from \"@/features/game/data/cellColors.js\";\n\nconst {\n  boardState,\n  gameWon,\n  isValidQueen,\n  toggleCell,\n  clearBoard,\n} = createGame();\n</script>\n\n<template>\n  <div class=\"game-board\">\n    <template v-for=\"(row, rowIndex) in boardState\">\n      <GridCell\n        v-for=\"(cell, cellIndex) in row\"\n        :key=\"`${rowIndex}-${cellIndex}`\"\n        :content=\"cell.content\"\n        :color=\"cellColors[cell.section]\"\n        :invalid=\"isValidQueen(rowIndex, cellIndex)\"\n        @click=\"toggleCell(rowIndex, cellIndex)\"\n      />\n    </template>\n  </div>\n  <WinMessage v-if=\"gameWon\" />\n  <AppButton @click=\"clearBoard\">Clear Board</AppButton>\n</template>\n\n<style scoped>\n.game-board {\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(8, 42px);\n  grid-template-rows: repeat(8, 42px);\n  border: 1px solid #000;\n}\n</style>\n``` \n\n다음으로 createGame 컴포저블을 다루어 봅시다.\n\n먼저, 각 셀의 상태를 저장할 방법이 필요합니다. 이를 위해 board와 동일한 구조인 boardState라는 새 변수를 만들 것입니다. 또한 가능한 값으로 [Null, marked, or queen]을 갖는 content 속성을 추가할 것입니다.\n\n또한, 보드 상의 모든 퀸의 좌표를 추적할 수 있는 배열이 필요합니다. 이는 퀸이 유효한지 확인하기 위해 모든 셀을 검색할 필요 없이 작은 최적화입니다.\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ntoggleCell 함수는 별도의 배열에서 퀸을 추적하는 기능을 추가하여 셀의 세 가지 가능한 상태를 회전합니다. 각 변경 후에 보드가 다시 유효성을 검사합니다. 현재 유효성 검사 코드는 생략되었습니다.\n\nclearBoard 함수는 boardState와 퀸을 재설정합니다.\n\nisValidQueen 함수는 셀의 좌표를 인수로 받아 유효한 퀸이 있는지 여부를 반환합니다.\n\n마지막으로 게임이 종료되었는지 확인하려면 해당 배열 내의 유효한 퀸 수를 세면 됩니다. 이것은 계산된 값이어야 합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// composables/createGame.js\nimport { ref, computed } from 'vue'\nimport { sectionGrid } from '@/features/game/data/sectionGrid'\n\nfunction createBoard() {\n  return sectionGrid.map((row) =>\n    row.map((section) => ({\n      content: null,\n      section\n    }))\n  )\n}\n\nexport function createGame() {\n  const boardState = ref(createBoard())\n  const queens = ref([])\n\n  function toggleCell(rowIndex, cellIndex) {\n    const cell = boardState.value[rowIndex][cellIndex];\n  \n    if (!cell.content) {\n      cell.content = 'marked';\n    } else if (cell.content === 'marked') {\n      cell.content = 'queen';\n      queens.value.push({ row: rowIndex, col: cellIndex, valid: true });\n    } else {\n      cell.content = null;\n      queens.value = queens.value.filter(\n        (queen) => queen.row !== rowIndex || queen.col !== cellIndex\n      );\n    }\n  \n    validateBoard();\n  }\n\n  function validateBoard() {\n    // TODO\n  }\n\n  function clearBoard() {\n    boardState.value = boardState.value.map((row) =>\n      row.map((cell) => ({ ...cell, content: null }))\n    )\n    queens.value = []\n  }\n\n  function isValidQueen(rowIndex, cellIndex) {\n    return queens.value.some(\n      (queen) => queen.row === rowIndex && queen.col === cellIndex && !queen.valid\n    )\n  }\n\n  const gameWon = computed(() => {\n    if (queens.value.length !== sectionGrid.length) {\n      return false\n    }\n\n    return queens.value.every((queen) => queen.valid)\n  })\n\n  return {\n    boardState,\n    toggleCell,\n    queens,\n    isValidQueen,\n    clearBoard,\n    gameWon\n  }\n}\n```\n\n## Validations\n\n이제 애플리케이션의 가장 복잡한 측면인 유효성 검사를 구현해 보겠습니다. 각 변경 사항 후에는 승리 조건이 위배되었는지 확인하고 해당 퀸을 무효로 표시해야 합니다. validateRow, validateColumn, validateSection 및 checkDiagonalConflicts와 같이 네 가지 다른 함수가 있습니다. 각 함수는 게임 규제 중 하나를 확인하는 역할을 합니다.\n\n예를 들어 validateRow 함수는 같은 행에 두 개의 퀸이 존재하지 않도록하고 그렇다면 두 퀸을 모두 무효로 표시합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// composables/createGame.js\n// ...\n\nfunction validateBoard() {\n  resetValidations()\n\n  for (const queen of queens.value) {\n    const { row, col } = queen\n    const cell = boardState.value[row][col]\n    const rowValid = validateRow(row)\n    const columnValid = validateColumn(col)\n    const sectionValid = validateSection(cell.section)\n    const diagonalValid = checkDiagonalConflicts(queen)\n\n    queen.valid = rowValid && columnValid && sectionValid && diagonalValid\n  }\n}\n\nfunction resetValidations() {\n  queens.value.forEach((queen) => (queen.valid = true))\n}\n\nfunction validateRow(rowIndex) {\n  const queensInRow = queens.value.filter((queen) => queen.row === rowIndex)\n\n  if (queensInRow.length > 1) {\n    queensInRow.forEach((queen) => (queen.valid = false))\n    return false\n  }\n  return true\n}\n\nfunction validateColumn(columnIndex) {\n  // TODO\n}\n\nfunction validateSection(section) {\n  // TODO\n}\nfunction checkDiagonalConflicts(queen) {\n  // TODO\n}\n```\n\n## 타이머\n\n애플리케이션의 또 다른 기능은 각 게임판의 완료까지 걸린 시간을 추적하는 것입니다. 경과된 시간을 보여주는 작은 프레젠테이션 컴포넌트를 만들 것입니다.\n\n```js\n<!-- AppTimer.vue -->\n<template>\n  <div class=\"timer\">⏱ 시간: { formattedTime }</div>\n</template>\n\n<script setup>\nimport { useTimer } from \"../composables/useTimer\";\n\nconst { formattedTime } = useTimer();\n</script>\n\n<style scoped>\n.timer {\n  font-size: 13px;\n  margin: 10px 0;\n}\n</style>\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n한 번 더 composable이 사용되어 상태를 관리합니다. 타이머를 시작, 중지 및 재설정할 수 있는 기능을 노출합니다.\n\n```js\nimport { ref, computed } from 'vue'\n\nconst time = ref(0)\n\nexport function useTimer() {\n  let timerInterval = null\n\n  const startTimer = () => {\n    if (timerInterval) return\n    timerInterval = setInterval(() => {\n      time.value++\n    }, 1000)\n  }\n\n  const stopTimer = () => {\n    clearInterval(timerInterval)\n    timerInterval = null\n  }\n\n  const resetTimer = () => {\n    time.value = 0\n  }\n\n  const formattedTime = computed(() => {\n    const minutes = Math.floor(time.value / 60)\n    const seconds = time.value % 60\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`\n  })\n\n  return {\n    time,\n    formattedTime,\n    startTimer,\n    stopTimer,\n    resetTimer\n  }\n}\n```\n\n게임 보드 컴포넌트를 이 타이머를 사용하도록 업데이트해야 합니다. 최종 구현은 다음과 같습니다.\n\n컴포넌트가 마운트될 때 타이머를 시작하고, 게임이 이겼을 때 중지합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n<script setup>에서 <script>태그를 Markdown 형식으로 바꿔보세요.\n\n이 최종 결과물은 퀸의 게임의 기능적인 클론입니다. 여기에서 확인할 수 있어요.\n\n<img src=\"/assets/img/2024-06-27-RecreatingQueensGameinVue_3.png\" />\n\n## 결론\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기 있습니다! Vue와 같은 반응형 프런트엔드 프레임워크는 대부분의 중요한 작업을 처리하여 상태를 동기화하는 데 도움이 되지만 여전히 대부분의 로직을 직접 구현해야 합니다. 이 기사에서 가치를 찾았고 Vue를 사용하여 이와 같은 게임을 만드는 방법에 대해 더 잘 이해할 수 있기를 바랍니다.\n\n다음 단계는 여러 수준, 힌트 및 일일 도전 과제를 구현하는 것입니다. 이를 향한 다음 기사에서 그것을 할 것입니다. 반드시 구독하세요!\n\n게임을 플레이하거나 GitHub에서 코드베이스를 살펴볼 수 있습니다.\n\n![게임 이미지](/assets/img/2024-06-27-RecreatingQueensGameinVue_4.png)","ogImage":{"url":"/assets/img/2024-06-27-RecreatingQueensGameinVue_0.png"},"coverImage":"/assets/img/2024-06-27-RecreatingQueensGameinVue_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-27-RecreatingQueensGameinVue_0.png\">\n<p>최근에 매일 도전하다 보니 Queens라는 게임에 중독되었어요. 링크드인에서 소개된 게임인데 Vue를 사용하여 이 게임의 클론을 구현하는 것은 정말 즐거운 도전이었고 게임을 더 잘 이해하는 데 도움이 되었어요.</p>\n<h1>게임</h1>\n<p>Queens는 Minesweeper와 Sudoku 요소를 결합한 퍼즐 게임이에요. 8x8 그리드에서 플레이되며, 규칙에 따라 보드 위에 여덟 개의 퀸을 위치시키는 것이 목표예요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>한 행에 한 퀸</li>\n<li>한 열에 한 퀸</li>\n<li>한 색 영역에 한 퀸</li>\n<li>대각선으로 연속적으로 위치한 셀에 두 개의 퀸을 놓을 수 없음</li>\n</ul>\n<p>이 모든 조건을 동시에 만족시키는 것이 과제입니다.</p>\n<p><img src=\"/assets/img/2024-06-27-RecreatingQueensGameinVue_1.png\" alt=\"이미지\"></p>\n<h2>초기 상태 모델링 - 첫 번째 시도</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>제 첫 번째 접근 방식은 초기 보드를 무작위로 생성하는 것이었는데, 이렇게 하면 게임이 너무 쉽다는 것을 깨달았어요. 진정한 도전은 답이 하나뿐인 보드에서 온다고 생각해요. LinkedIn 및 다른 솔루션을 역공학한 후에 그들이 매번 미리 정의된 초기 보드를 사용한다는 것을 깨달았어요.</p>\n<h2>초기 상태 모델링 - 두 번째 시도</h2>\n<p>더 적합한 방법은 각 셀의 내용이 색상인 2차원 배열을 사용하는 것이에요.</p>\n<p>먼저, 각 숫자에 색상을 연결하는 맵을 갖게 될 거에요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">cellColors의 속성을 다음과 같이 변경하고\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> cellColors = {\n    <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"#007B6C\"</span>,\n    <span class=\"hljs-number\">2</span>: <span class=\"hljs-string\">\"#D18B00\"</span>,\n    <span class=\"hljs-number\">3</span>: <span class=\"hljs-string\">\"#C75D00\"</span>,\n    <span class=\"hljs-number\">4</span>: <span class=\"hljs-string\">\"#0044CC\"</span>,\n    <span class=\"hljs-number\">5</span>: <span class=\"hljs-string\">\"#CC0000\"</span>,\n    <span class=\"hljs-number\">6</span>: <span class=\"hljs-string\">\"#CCCC00\"</span>,\n    <span class=\"hljs-number\">7</span>: <span class=\"hljs-string\">\"#008B8B\"</span>,\n    <span class=\"hljs-number\">8</span>: <span class=\"hljs-string\">\"#8B008B\"</span>,\n  };\n\n그런 다음 초기 상태를 나타내는 <span class=\"hljs-number\">2</span> 차원 배열을 생성합니다.\n\n<span class=\"hljs-keyword\">const</span> sectionGrid = [\n  [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>],\n  [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>],\n  [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>],\n  [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>],\n  [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>],\n  [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>]\n];\n\n그리고 나서 다음 이미지를 참고하세요. &#x3C;img src=<span class=\"hljs-string\">\"/assets/img/2024-06-27-RecreatingQueensGameinVue_2.png\"</span> />\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>우리는 이제 초기 상태를 나타내는 것을 가지고 게임 보드를 시작할 수 있어요.</p>\n<h2>게임 보드</h2>\n<p>보드를 만들기 전에 각 셀에 대한 작은 구성 요소를 만들어 봅시다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- <span class=\"hljs-title class_\">GridCell</span>.<span class=\"hljs-property\">vue</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-title function_\">defineProps</span>([<span class=\"hljs-string\">\"content\"</span>, <span class=\"hljs-string\">\"color\"</span>]);\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"cell\"</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">\"{ backgroundColor: color }\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"content === 'queen'\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"@/assets/crown.png\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"queen\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"content === 'marked'\"</span>></span>×<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>></span><span class=\"css\">\n<span class=\"hljs-selector-class\">.cell</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">24px</span>;\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#000</span>;\n  <span class=\"hljs-attribute\">display</span>: flex;\n  <span class=\"hljs-attribute\">align-items</span>: center;\n  <span class=\"hljs-attribute\">justify-content</span>: center;\n  <span class=\"hljs-attribute\">cursor</span>: pointer;\n  user-select: none;\n}\n\n<span class=\"hljs-selector-class\">.queen</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">24px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">24px</span>;\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span></span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 프레젠테이션 컴포넌트는 두 가지 매개변수를 받습니다. 셀 내용은 퀸, X 표시 또는 빈 경우에는 null이 될 수 있습니다. 또한 셀의 색상을 받습니다.</p>\n<p>이제 게임 보드를 만들려면 GridCell 컴포넌트 주위에 두 개의 중첩된 루프가 필요합니다. 게임이 종료되고 WinMessage 컴포넌트가 표시될 때 그리고 보드를 지우는 버튼이 있을 때입니다.</p>\n<p>대부분의 복잡성은 나중에 처리할 createGame 컴포저블 내부에 추상화되어 있습니다.</p>\n<p>이 보드는 정렬을 위해 CSS 그리드를 사용합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">&#x3C;!-- <span class=\"hljs-title class_\">GameBoard</span>.<span class=\"hljs-property\">vue</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">GridCell</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/features/game/components/GridCell.vue\"</span>;\n<span class=\"hljs-keyword\">import</span> { createGame } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/features/game/composables/createGame\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">WinMessage</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/features/game/components/WinMessage.vue\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AppButton</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/AppButton.vue\"</span>;\n<span class=\"hljs-keyword\">import</span> { cellColors } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/features/game/data/cellColors.js\"</span>;\n\n<span class=\"hljs-keyword\">const</span> {\n  boardState,\n  gameWon,\n  isValidQueen,\n  toggleCell,\n  clearBoard,\n} = <span class=\"hljs-title function_\">createGame</span>();\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"game-board\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(row, rowIndex) in boardState\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">GridCell</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(cell, cellIndex) in row\"</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"`${rowIndex}-${cellIndex}`\"</span>\n        <span class=\"hljs-attr\">:content</span>=<span class=\"hljs-string\">\"cell.content\"</span>\n        <span class=\"hljs-attr\">:color</span>=<span class=\"hljs-string\">\"cellColors[cell.section]\"</span>\n        <span class=\"hljs-attr\">:invalid</span>=<span class=\"hljs-string\">\"isValidQueen(rowIndex, cellIndex)\"</span>\n        @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"toggleCell(rowIndex, cellIndex)\"</span>\n      /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">WinMessage</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"gameWon\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AppButton</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"clearBoard\"</span>></span>Clear Board<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">AppButton</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>></span><span class=\"css\">\n<span class=\"hljs-selector-class\">.game-board</span> {\n  <span class=\"hljs-attribute\">display</span>: grid;\n  <span class=\"hljs-attribute\">justify-content</span>: center;\n  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">42px</span>);\n  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">42px</span>);\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#000</span>;\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span></span>\n</code></pre>\n<p>다음으로 createGame 컴포저블을 다루어 봅시다.</p>\n<p>먼저, 각 셀의 상태를 저장할 방법이 필요합니다. 이를 위해 board와 동일한 구조인 boardState라는 새 변수를 만들 것입니다. 또한 가능한 값으로 [Null, marked, or queen]을 갖는 content 속성을 추가할 것입니다.</p>\n<p>또한, 보드 상의 모든 퀸의 좌표를 추적할 수 있는 배열이 필요합니다. 이는 퀸이 유효한지 확인하기 위해 모든 셀을 검색할 필요 없이 작은 최적화입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>toggleCell 함수는 별도의 배열에서 퀸을 추적하는 기능을 추가하여 셀의 세 가지 가능한 상태를 회전합니다. 각 변경 후에 보드가 다시 유효성을 검사합니다. 현재 유효성 검사 코드는 생략되었습니다.</p>\n<p>clearBoard 함수는 boardState와 퀸을 재설정합니다.</p>\n<p>isValidQueen 함수는 셀의 좌표를 인수로 받아 유효한 퀸이 있는지 여부를 반환합니다.</p>\n<p>마지막으로 게임이 종료되었는지 확인하려면 해당 배열 내의 유효한 퀸 수를 세면 됩니다. 이것은 계산된 값이어야 합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// composables/createGame.js</span>\n<span class=\"hljs-keyword\">import</span> { ref, computed } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n<span class=\"hljs-keyword\">import</span> { sectionGrid } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/features/game/data/sectionGrid'</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createBoard</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> sectionGrid.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">row</span>) =></span>\n    row.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">section</span>) =></span> ({\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-literal\">null</span>,\n      section\n    }))\n  )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createGame</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> boardState = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-title function_\">createBoard</span>())\n  <span class=\"hljs-keyword\">const</span> queens = <span class=\"hljs-title function_\">ref</span>([])\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">toggleCell</span>(<span class=\"hljs-params\">rowIndex, cellIndex</span>) {\n    <span class=\"hljs-keyword\">const</span> cell = boardState.<span class=\"hljs-property\">value</span>[rowIndex][cellIndex];\n  \n    <span class=\"hljs-keyword\">if</span> (!cell.<span class=\"hljs-property\">content</span>) {\n      cell.<span class=\"hljs-property\">content</span> = <span class=\"hljs-string\">'marked'</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cell.<span class=\"hljs-property\">content</span> === <span class=\"hljs-string\">'marked'</span>) {\n      cell.<span class=\"hljs-property\">content</span> = <span class=\"hljs-string\">'queen'</span>;\n      queens.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">row</span>: rowIndex, <span class=\"hljs-attr\">col</span>: cellIndex, <span class=\"hljs-attr\">valid</span>: <span class=\"hljs-literal\">true</span> });\n    } <span class=\"hljs-keyword\">else</span> {\n      cell.<span class=\"hljs-property\">content</span> = <span class=\"hljs-literal\">null</span>;\n      queens.<span class=\"hljs-property\">value</span> = queens.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">filter</span>(\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">queen</span>) =></span> queen.<span class=\"hljs-property\">row</span> !== rowIndex || queen.<span class=\"hljs-property\">col</span> !== cellIndex\n      );\n    }\n  \n    <span class=\"hljs-title function_\">validateBoard</span>();\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateBoard</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// TODO</span>\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">clearBoard</span>(<span class=\"hljs-params\"></span>) {\n    boardState.<span class=\"hljs-property\">value</span> = boardState.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">row</span>) =></span>\n      row.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">cell</span>) =></span> ({ ...cell, <span class=\"hljs-attr\">content</span>: <span class=\"hljs-literal\">null</span> }))\n    )\n    queens.<span class=\"hljs-property\">value</span> = []\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isValidQueen</span>(<span class=\"hljs-params\">rowIndex, cellIndex</span>) {\n    <span class=\"hljs-keyword\">return</span> queens.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">some</span>(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">queen</span>) =></span> queen.<span class=\"hljs-property\">row</span> === rowIndex &#x26;&#x26; queen.<span class=\"hljs-property\">col</span> === cellIndex &#x26;&#x26; !queen.<span class=\"hljs-property\">valid</span>\n    )\n  }\n\n  <span class=\"hljs-keyword\">const</span> gameWon = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">if</span> (queens.<span class=\"hljs-property\">value</span>.<span class=\"hljs-property\">length</span> !== sectionGrid.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> queens.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">queen</span>) =></span> queen.<span class=\"hljs-property\">valid</span>)\n  })\n\n  <span class=\"hljs-keyword\">return</span> {\n    boardState,\n    toggleCell,\n    queens,\n    isValidQueen,\n    clearBoard,\n    gameWon\n  }\n}\n</code></pre>\n<h2>Validations</h2>\n<p>이제 애플리케이션의 가장 복잡한 측면인 유효성 검사를 구현해 보겠습니다. 각 변경 사항 후에는 승리 조건이 위배되었는지 확인하고 해당 퀸을 무효로 표시해야 합니다. validateRow, validateColumn, validateSection 및 checkDiagonalConflicts와 같이 네 가지 다른 함수가 있습니다. 각 함수는 게임 규제 중 하나를 확인하는 역할을 합니다.</p>\n<p>예를 들어 validateRow 함수는 같은 행에 두 개의 퀸이 존재하지 않도록하고 그렇다면 두 퀸을 모두 무효로 표시합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// composables/createGame.js</span>\n<span class=\"hljs-comment\">// ...</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateBoard</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">resetValidations</span>()\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> queen <span class=\"hljs-keyword\">of</span> queens.<span class=\"hljs-property\">value</span>) {\n    <span class=\"hljs-keyword\">const</span> { row, col } = queen\n    <span class=\"hljs-keyword\">const</span> cell = boardState.<span class=\"hljs-property\">value</span>[row][col]\n    <span class=\"hljs-keyword\">const</span> rowValid = <span class=\"hljs-title function_\">validateRow</span>(row)\n    <span class=\"hljs-keyword\">const</span> columnValid = <span class=\"hljs-title function_\">validateColumn</span>(col)\n    <span class=\"hljs-keyword\">const</span> sectionValid = <span class=\"hljs-title function_\">validateSection</span>(cell.<span class=\"hljs-property\">section</span>)\n    <span class=\"hljs-keyword\">const</span> diagonalValid = <span class=\"hljs-title function_\">checkDiagonalConflicts</span>(queen)\n\n    queen.<span class=\"hljs-property\">valid</span> = rowValid &#x26;&#x26; columnValid &#x26;&#x26; sectionValid &#x26;&#x26; diagonalValid\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">resetValidations</span>(<span class=\"hljs-params\"></span>) {\n  queens.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">queen</span>) =></span> (queen.<span class=\"hljs-property\">valid</span> = <span class=\"hljs-literal\">true</span>))\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateRow</span>(<span class=\"hljs-params\">rowIndex</span>) {\n  <span class=\"hljs-keyword\">const</span> queensInRow = queens.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">queen</span>) =></span> queen.<span class=\"hljs-property\">row</span> === rowIndex)\n\n  <span class=\"hljs-keyword\">if</span> (queensInRow.<span class=\"hljs-property\">length</span> > <span class=\"hljs-number\">1</span>) {\n    queensInRow.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">queen</span>) =></span> (queen.<span class=\"hljs-property\">valid</span> = <span class=\"hljs-literal\">false</span>))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateColumn</span>(<span class=\"hljs-params\">columnIndex</span>) {\n  <span class=\"hljs-comment\">// TODO</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validateSection</span>(<span class=\"hljs-params\">section</span>) {\n  <span class=\"hljs-comment\">// TODO</span>\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkDiagonalConflicts</span>(<span class=\"hljs-params\">queen</span>) {\n  <span class=\"hljs-comment\">// TODO</span>\n}\n</code></pre>\n<h2>타이머</h2>\n<p>애플리케이션의 또 다른 기능은 각 게임판의 완료까지 걸린 시간을 추적하는 것입니다. 경과된 시간을 보여주는 작은 프레젠테이션 컴포넌트를 만들 것입니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;!-- <span class=\"hljs-title class_\">AppTimer</span>.<span class=\"hljs-property\">vue</span> -->\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">template</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"timer\"</span>></span>⏱ 시간: { formattedTime }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">template</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">setup</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { useTimer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../composables/useTimer\"</span>;\n\n<span class=\"hljs-keyword\">const</span> { formattedTime } = <span class=\"hljs-title function_\">useTimer</span>();\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span></span>\n\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">scoped</span>></span><span class=\"css\">\n<span class=\"hljs-selector-class\">.timer</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">13px</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">0</span>;\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span></span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>한 번 더 composable이 사용되어 상태를 관리합니다. 타이머를 시작, 중지 및 재설정할 수 있는 기능을 노출합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { ref, computed } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n\n<span class=\"hljs-keyword\">const</span> time = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useTimer</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">let</span> timerInterval = <span class=\"hljs-literal\">null</span>\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">startTimer</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-keyword\">if</span> (timerInterval) <span class=\"hljs-keyword\">return</span>\n    timerInterval = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =></span> {\n      time.<span class=\"hljs-property\">value</span>++\n    }, <span class=\"hljs-number\">1000</span>)\n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">stopTimer</span> = (<span class=\"hljs-params\"></span>) => {\n    <span class=\"hljs-built_in\">clearInterval</span>(timerInterval)\n    timerInterval = <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">resetTimer</span> = (<span class=\"hljs-params\"></span>) => {\n    time.<span class=\"hljs-property\">value</span> = <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-keyword\">const</span> formattedTime = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">const</span> minutes = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(time.<span class=\"hljs-property\">value</span> / <span class=\"hljs-number\">60</span>)\n    <span class=\"hljs-keyword\">const</span> seconds = time.<span class=\"hljs-property\">value</span> % <span class=\"hljs-number\">60</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${minutes.toString().padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'0'</span>)}</span>:<span class=\"hljs-subst\">${seconds.toString().padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'0'</span>)}</span>`</span>\n  })\n\n  <span class=\"hljs-keyword\">return</span> {\n    time,\n    formattedTime,\n    startTimer,\n    stopTimer,\n    resetTimer\n  }\n}\n</code></pre>\n<p>게임 보드 컴포넌트를 이 타이머를 사용하도록 업데이트해야 합니다. 최종 구현은 다음과 같습니다.</p>\n<p>컴포넌트가 마운트될 때 타이머를 시작하고, 게임이 이겼을 때 중지합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<script setup=\"\">에서 <script>태그를 Markdown 형식으로 바꿔보세요.\n\n이 최종 결과물은 퀸의 게임의 기능적인 클론입니다. 여기에서 확인할 수 있어요.\n\n<img src=\"/assets/img/2024-06-27-RecreatingQueensGameinVue_3.png\" />\n\n## 결론\n\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기 있습니다! Vue와 같은 반응형 프런트엔드 프레임워크는 대부분의 중요한 작업을 처리하여 상태를 동기화하는 데 도움이 되지만 여전히 대부분의 로직을 직접 구현해야 합니다. 이 기사에서 가치를 찾았고 Vue를 사용하여 이와 같은 게임을 만드는 방법에 대해 더 잘 이해할 수 있기를 바랍니다.</p>\n<p>다음 단계는 여러 수준, 힌트 및 일일 도전 과제를 구현하는 것입니다. 이를 향한 다음 기사에서 그것을 할 것입니다. 반드시 구독하세요!</p>\n<p>게임을 플레이하거나 GitHub에서 코드베이스를 살펴볼 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-06-27-RecreatingQueensGameinVue_4.png\" alt=\"게임 이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}