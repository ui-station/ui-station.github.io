{"pageProps":{"post":{"title":"TypeScript 라이브러리를 NPM에 배포하는 방법","description":"","date":"2024-07-01 16:23","slug":"2024-07-01-PublishtheTypescriptLibrarytotheNPM","content":"\n\n이 게시물에서는 TypeScript 라이브러리를 NPM에 게시하는 방법에 대해 이야기하려고 합니다. 게시하기 전에 따라야 할 몇 가지 팁이 있습니다. 이 게시물에서는 모든 팁과 해야 할 사항을 모두 써 보겠습니다. 함께 시작해 봅시다!\n\n먼저 NPM 계정이 있어야 합니다. 아직 생성하지 않았다면 링크를 따라가서 새로운 계정을 만드세요.\n\n훌륭합니다! 이제 우리의 간단한 TypeScript 라이브러리를 만들어 보겠습니다. 빈 폴더를 만들고 개발 환경을 준비하기 위해 아래 명령을 실행하세요.\n\n```js\n## 노드 초기화\nnpm init -y\n## 타입스크립트 설치\nnpm install typescript\n## 타입스크립트 초기 설정\nnpx tsc -init\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 명령을 실행한 후에는 tsconfig.json 파일에 일부 변경을 해야 합니다. 당신의 tsconfig.json 파일은 다음과 같이 보여야 합니까? Markdown 형식으로 테이블 태그를 변경하세요.\n\n```js\n{\n \"compilerOptions\": {\n /* 언어 및 환경 */\n \"target\": \"es2016\" /* 생산된 JavaScript에 대한 JavaScript 언어 버전 및 호환되는 라이브러리 선언 포함 설정. */,\n/* 모듈 */\n \"module\": \"commonjs\" /* 생성된 모듈 코드를 지정합니다. */,\n \"rootDir\": \"src\" /* 소스 파일 내의 루트 폴더를 지정합니다. */,\n/* 생성 */\n \"declaration\": true /* TypeScript 및 JavaScript 파일에서 .d.ts 파일을 생성합니다. */,\n \"outDir\": \"dist\" /* 모든 생성된 파일을 위한 출력 폴더를 지정합니다. */,\n \"esModuleInterop\": true /* CommonJS 모듈 가져오기를 지원하기 위해 추가 JavaScript를 생성합니다. 이것은 type 호환성을 위해 'allowSyntheticDefaultImports'를 활성화시킵니다. */,\n \"forceConsistentCasingInFileNames\": true /* 가져오기 시 대소문자를 정확하게 하도록 합니다. */,\n/* 형식 확인 */\n \"strict\": true /* 모든 엄격한 형식 확인 옵션을 활성화합니다. */,\n \"skipLibCheck\": true /* 모든 .d.ts 파일에 대한 형식 확인을 건너뜁니다. */\n },\n \"include\": [\"src/**/*\"],\n \"exclude\": [\"node_modules\"]\n}\n```\n\n다음으로 루트 디렉터리에 src 폴더를 만들고 이 src 폴더에 index.ts 파일을 생성해야 합니다. 현재 프로젝트 디렉토리 구조는 다음과 같아야 합니다:\n\n```js\nminimal-library\n│\n+ - node_modules\n+ - src\n│ + - index.ts\n+ - package-lock.json\n+ - package.json\n+ - tsconfig.json\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코드 작성해보세요!\n\nindex.ts 파일 안에 greets 라는 간단한 함수를 작성하고 내보내세요. 그런 다음, src 디렉토리 아래에 interfaces라는 폴더를 생성해주세요. 이 폴더에 사용자 정의 인터페이스를 저장할 거에요. 타입도 만들어도 돼요. 이 폴더 안에 greetResponse.interface.ts 라는 인터페이스 파일을 만들어주세요. 이렇게 변경한 후 최신 디렉토리 구조는 다음과 같아요:\n\n```js\nminimal-library\n│\n+ - node_modules\n+ - src\n│ + - index.ts\n+ - interfaces\n| + - greetResponse.interface.ts\n+ - package-lock.json\n+ - package.json\n+ - tsconfig.json\n```\n\n그런 다음, .ts 파일들 안에 코드를 작성해볼까요?\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// index.ts\nimport { GreetResponse } from \"./interfaces/greetResponse.interface\";\nexport function greets(name: string): GreetResponse {\n  return {\n    message: \"Hello \" + name,\n  };\n}\n```\n\n```js\n// greetResponse.interface.ts\nexport interface GreetResponse {\n  message: string;\n}\n```\n\n완벽합니다! 우리 라이브러리를 사용할 준비가 되었습니다. 배포하기 전에 package.json 파일을 사용자 정의해야 합니다. 아래 라인들은 배포를 위해 필수적입니다.\n\n```js\n\"main\": \"dist/index.js\",\n\"types\": \"dist/index.d.ts\"\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 표를 마크다운 형식으로 변경해 주세요.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 명령어를 실행하기 전에, 해당하는 npm 패키지 이름이 이미 존재하지 않는지 확인해주세요.\n\n```js\n## npm 계정에 로그인하기\nnpm login\n## 배포하기\nnpm publish\n```\n\n해피 해킹! 🔥","ogImage":{"url":"/assets/img/2024-07-01-PublishtheTypescriptLibrarytotheNPM_0.png"},"coverImage":"/assets/img/2024-07-01-PublishtheTypescriptLibrarytotheNPM_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 게시물에서는 TypeScript 라이브러리를 NPM에 게시하는 방법에 대해 이야기하려고 합니다. 게시하기 전에 따라야 할 몇 가지 팁이 있습니다. 이 게시물에서는 모든 팁과 해야 할 사항을 모두 써 보겠습니다. 함께 시작해 봅시다!</p>\n<p>먼저 NPM 계정이 있어야 합니다. 아직 생성하지 않았다면 링크를 따라가서 새로운 계정을 만드세요.</p>\n<p>훌륭합니다! 이제 우리의 간단한 TypeScript 라이브러리를 만들어 보겠습니다. 빈 폴더를 만들고 개발 환경을 준비하기 위해 아래 명령을 실행하세요.</p>\n<pre><code class=\"hljs language-js\">## 노드 초기화\nnpm init -y\n## 타입스크립트 설치\nnpm install typescript\n## 타입스크립트 초기 설정\nnpx tsc -init\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 명령을 실행한 후에는 tsconfig.json 파일에 일부 변경을 해야 합니다. 당신의 tsconfig.json 파일은 다음과 같이 보여야 합니까? Markdown 형식으로 테이블 태그를 변경하세요.</p>\n<pre><code class=\"hljs language-js\">{\n <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n <span class=\"hljs-comment\">/* 언어 및 환경 */</span>\n <span class=\"hljs-string\">\"target\"</span>: <span class=\"hljs-string\">\"es2016\"</span> <span class=\"hljs-comment\">/* 생산된 JavaScript에 대한 JavaScript 언어 버전 및 호환되는 라이브러리 선언 포함 설정. */</span>,\n<span class=\"hljs-comment\">/* 모듈 */</span>\n <span class=\"hljs-string\">\"module\"</span>: <span class=\"hljs-string\">\"commonjs\"</span> <span class=\"hljs-comment\">/* 생성된 모듈 코드를 지정합니다. */</span>,\n <span class=\"hljs-string\">\"rootDir\"</span>: <span class=\"hljs-string\">\"src\"</span> <span class=\"hljs-comment\">/* 소스 파일 내의 루트 폴더를 지정합니다. */</span>,\n<span class=\"hljs-comment\">/* 생성 */</span>\n <span class=\"hljs-string\">\"declaration\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* TypeScript 및 JavaScript 파일에서 .d.ts 파일을 생성합니다. */</span>,\n <span class=\"hljs-string\">\"outDir\"</span>: <span class=\"hljs-string\">\"dist\"</span> <span class=\"hljs-comment\">/* 모든 생성된 파일을 위한 출력 폴더를 지정합니다. */</span>,\n <span class=\"hljs-string\">\"esModuleInterop\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* CommonJS 모듈 가져오기를 지원하기 위해 추가 JavaScript를 생성합니다. 이것은 type 호환성을 위해 'allowSyntheticDefaultImports'를 활성화시킵니다. */</span>,\n <span class=\"hljs-string\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* 가져오기 시 대소문자를 정확하게 하도록 합니다. */</span>,\n<span class=\"hljs-comment\">/* 형식 확인 */</span>\n <span class=\"hljs-string\">\"strict\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* 모든 엄격한 형식 확인 옵션을 활성화합니다. */</span>,\n <span class=\"hljs-string\">\"skipLibCheck\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">/* 모든 .d.ts 파일에 대한 형식 확인을 건너뜁니다. */</span>\n },\n <span class=\"hljs-string\">\"include\"</span>: [<span class=\"hljs-string\">\"src/**/*\"</span>],\n <span class=\"hljs-string\">\"exclude\"</span>: [<span class=\"hljs-string\">\"node_modules\"</span>]\n}\n</code></pre>\n<p>다음으로 루트 디렉터리에 src 폴더를 만들고 이 src 폴더에 index.ts 파일을 생성해야 합니다. 현재 프로젝트 디렉토리 구조는 다음과 같아야 합니다:</p>\n<pre><code class=\"hljs language-js\">minimal-library\n│\n+ - node_modules\n+ - src\n│ + - index.<span class=\"hljs-property\">ts</span>\n+ - package-lock.<span class=\"hljs-property\">json</span>\n+ - package.<span class=\"hljs-property\">json</span>\n+ - tsconfig.<span class=\"hljs-property\">json</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>코드 작성해보세요!</p>\n<p>index.ts 파일 안에 greets 라는 간단한 함수를 작성하고 내보내세요. 그런 다음, src 디렉토리 아래에 interfaces라는 폴더를 생성해주세요. 이 폴더에 사용자 정의 인터페이스를 저장할 거에요. 타입도 만들어도 돼요. 이 폴더 안에 greetResponse.interface.ts 라는 인터페이스 파일을 만들어주세요. 이렇게 변경한 후 최신 디렉토리 구조는 다음과 같아요:</p>\n<pre><code class=\"hljs language-js\">minimal-library\n│\n+ - node_modules\n+ - src\n│ + - index.<span class=\"hljs-property\">ts</span>\n+ - interfaces\n| + - greetResponse.<span class=\"hljs-property\">interface</span>.<span class=\"hljs-property\">ts</span>\n+ - package-lock.<span class=\"hljs-property\">json</span>\n+ - package.<span class=\"hljs-property\">json</span>\n+ - tsconfig.<span class=\"hljs-property\">json</span>\n</code></pre>\n<p>그런 다음, .ts 파일들 안에 코드를 작성해볼까요?</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// index.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">GreetResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./interfaces/greetResponse.interface\"</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">greets</span>(<span class=\"hljs-params\">name: string</span>): <span class=\"hljs-title class_\">GreetResponse</span> {\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">\"Hello \"</span> + name,\n  };\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// greetResponse.interface.ts</span>\n<span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">GreetResponse</span> {\n  <span class=\"hljs-attr\">message</span>: string;\n}\n</code></pre>\n<p>완벽합니다! 우리 라이브러리를 사용할 준비가 되었습니다. 배포하기 전에 package.json 파일을 사용자 정의해야 합니다. 아래 라인들은 배포를 위해 필수적입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"dist/index.js\"</span>,\n<span class=\"hljs-string\">\"types\"</span>: <span class=\"hljs-string\">\"dist/index.d.ts\"</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 표를 마크다운 형식으로 변경해 주세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래 명령어를 실행하기 전에, 해당하는 npm 패키지 이름이 이미 존재하지 않는지 확인해주세요.</p>\n<pre><code class=\"hljs language-js\">## npm 계정에 로그인하기\nnpm login\n## 배포하기\nnpm publish\n</code></pre>\n<p>해피 해킹! 🔥</p>\n</body>\n</html>\n"},"__N_SSG":true}