{"pageProps":{"post":{"title":"2024년 Nextjs 14에서 TypeScript와 함께 Zustand 사용하기","description":"","date":"2024-07-02 22:01","slug":"2024-07-02-ZustandinNextjs14withts","content":"\n\n<img src=\"/assets/img/2024-07-02-ZustandinNextjs14withts_0.png\" />\n\n이 게시물에서는 Next.js 프로젝트에서 Zustand를 사용하는 방법에 대해 설명하겠습니다. Zustand란 무엇일까요? 공식 문서에 따르면 다음과 같습니다:\n\n\"간단하고 빠르며 확장 가능한 간단한 Flux 원리를 사용하는 상태 관리 솔루션입니다. 편리한 API는 후크를 기반으로 하며, 보일러플레이트적이거나 의견이 강요되지 않습니다.\"\n\n# Atomic vs Boilerplate...\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n상황에 따라 다르지만, React.js 또는 Next.js에서는 프로젝트, 팀, 복잡성 등에 따라 보일러플레이트 또는 아토믹 상태 관리 중 선택할 수 있어요.\n\n제 경험에 따르면, 저는 아토믹 상태 관리를 선택했어요. 프로젝트의 다른 부분에 의존하지 않고 각 페이지/디렉터리를 독립적으로 개발할 수 있었어요. \"다른 부분에 의존하지 않는다\"는 것을 어떤 의미인지 예시를 들어 설명해 드릴게요.\n\n# 새 프로젝트를 시작해 볼까요\n\n```js\nnpx create-next-app@latest\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n프로젝트 이름이 무엇인가요? zustand\nTypeScript를 사용하시겠습니까? 예\nESLint를 사용하시겠습니까? 예\nTailwind CSS를 사용하시겠습니까? 아니오\nsrc/ 디렉토리를 사용하시겠습니까? 아니요\nApp Router를 사용하시겠습니까? (권장) 예\n기본 import 별칭(@/)을 사용자 정의하시겠습니까? 예\n구성할 import 별칭은 무엇인가요? @/\n```\n\n![Zustand in Next.js with TypeScript](/assets/img/2024-07-02-ZustandinNextjs14withts_1.png)\n\n# Zustand 추가\n\n```js\nnpm install zustand # 또는 yarn add zustand 또는 pnpm add zustand\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 이제 첫번째 페이지를 개발할 준비가 되었습니다\n\n## 시작할 새로운 페이지를 추가해 봅시다\n\n```js\n// 디렉토리: /app/bears/page.tsx\n\nexport default function Page() {\n  return (\n    <main>\n      <h1>Bears</h1>\n      <p>저희 상점에는 얼마나 많은 곰이 있을까요? {0}</p>\n\n      <button>증가</button>\n      <button>감소</button>\n    </main>\n  );\n}\n```\n\n![이미지](/assets/img/2024-07-02-ZustandinNextjs14withts_2.png)\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 우리 가게는 이 페이지 안에서 생성될 것입니다\n\n이 예시에서는 첫 번째 가게를 페이지 디렉토리 안에 생성할 것입니다. 이 가게는 이 페이지 안에서만 사용되며 다른 페이지나 컴포넌트에서는 전혀 필요하지 않을 겁니다 (이것이 원자 상태 관리의 장점이죠).\n\n```js\n// 디렉토리: /app/bears/_store/index.ts\nimport { create } from 'zustand';\n\n// 상태 타입\ninterface States {\n  bears: number;\n}\n\n// useBearStore\nexport const useBearStore = create<States>(() => ({\n  bears: 0,\n}));\n```\n\n## 페이지 내에서 상태 호출하기\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// 디렉토리: /app/bears/page.tsx\n\n'use client';\nimport { useBearStore } from './_store';\n\nexport default function Page() {\n  // 스토어 내의 모든 것을 가져올 것입니다.\n  // 주의: 상태 변경 시마다 컴포넌트가 업데이트되는 원인이 될 수 있습니다!\n  const store = useBearStore();\n\n  return (\n    <main>\n      <h1>Bears</h1>\n      <p>우리 스토어에는 얼마나 많은 곰이 있을까요? {store.bears}</p>\n\n      <button>증가</button>\n      <button>감소</button>\n    </main>\n  );\n}\n```\n\n또는\n\n```js\n// 디렉토리: /app/bears/page.tsx\n\n'use client';\nimport { useBearStore } from './_store';\n\nexport default function Page() {\n  // 또는, 스토어에서 필요한 것을 가져올 수도 있습니다.\n  const { bears } = useBearStore((state) => state);\n\n  return (\n    <main>\n      <h1>Bears</h1>\n      <p>우리 스토어에는 얼마나 많은 곰이 있을까요? {bears}</p>\n\n      <button>증가</button>\n      <button>감소</button>\n    </main>\n  );\n}\n```\n\n## 상태 변경을 위한 두 가지 액션을 추가합니다.\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// 디렉토리: /app/bears/_store/index.ts\n\nimport { create } from 'zustand';\n\n// 상태 타입\ninterface States {\n  bears: number;\n}\n\n// 액션 타입\ninterface Actions {\n  increase: () => void;\n  decrease: () => void;\n}\n\n// useBearStore\nexport const useBearStore = create<States & Actions>((set) => ({\n  bears: 0,\n\n  increase: () => set((state) => ({ bears: state.bears + 1 })),\n  decrease: () => set((state) => ({ bears: state.bears - 1 })),\n}));\n```\n\n```js\n// 디렉토리: /app/bears/page.tsx\n\n'use client';\nimport { useBearStore } from './_store';\n\nexport default function Page() {\n  // 또는, 스토어에서 필요한 것을 가져올 수도 있습니다\n  const { bears, increase, decrease } = useBearStore((state) => state);\n\n  return (\n    <main>\n      <h1>Bears</h1>\n      <p>저희 스토어에는 얼마나 많은 곰이 있을까요? {bears}</p>\n\n      <button onClick={increase}>증가</button>\n      <button onClick={decrease}>감소</button>\n    </main>\n  );\n}\n```\n\n## 이제 준비되었으니, 작동 방식을 확인해봅니다\n\n```js\nnpm run dev\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\n![Persist Data](/assets/img/2024-07-02-ZustandinNextjs14withts_3.png)\n\n## 데이터 영속적 저장 방법\n\n첫 번째 단계는 영속 데이터를 처리할 수 있도록 스토어를 변경하는 것입니다. localStorage, AsyncStorage, IndexedDB 등을 선택할 수 있습니다.\n\n```js\n// 디렉토리: /app/bears/_store/index.ts\n\nimport { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\n// 상태 유형\ninterface States {\n  bears: number;\n}\n\n// 액션 유형\ninterface Actions {\n  increase: () => void;\n  decrease: () => void;\n}\n\n// useBearStore\nexport const useBearStore = create(\n  persist<States & Actions>(\n    (set) => ({\n      bears: 0,\n\n      increase: () => set((state) => ({ bears: state.bears + 1 })),\n      decrease: () => set((state) => ({ bears: state.bears - 1 })),\n    }),\n    {\n      name: 'bearStore',\n      storage: createJSONStorage(() => localStorage),\n    }\n  )\n);\n```\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 상태를 유지하고 오류를 피하는 가장 좋은 방법\n\n상태를 유지하기 위해 사용자 정의 후크를 만들 것입니다\n\n```js\n// /helpers/usePersistStore/index.ts\n\nimport { useState, useEffect } from 'react';\n\nconst usePersistStore = <T, F>(\n  store: (callback: (state: T) => unknown) => unknown,\n  callback: (state: T) => F\n) => {\n  const result = store(callback) as F;\n  const [data, setData] = useState<F>();\n\n  useEffect(() => {\n    setData(result);\n  }, [result]);\n\n  return data;\n};\n\nexport default usePersistStore;\n```\n\n## 우리의 페이지는 다음과 같을 것입니다:\n\n<!-- ui-station 사각형 -->\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// 디렉토리: /app/bears/page.tsx\n\n'use client';\nimport usePersistStore from '@/helpers/usePersistStore';\nimport { useBearStore } from './_store';\n\nexport default function Page() {\n  // 또는 스토어에서 필요한 것을 가져올 수 있습니다\n  const store = usePersistStore(useBearStore, (state) => state);\n\n  return (\n    <main>\n      <h1>Bears</h1>\n      <p>저희 상점에는 얼마나 많은 곰이 있나요? {store?.bears}</p>\n\n      <button onClick={store?.increase}>증가</button>\n      <button onClick={store?.decrease}>감소</button>\n    </main>\n  );\n}\n```\n\n## GitHub에서 코드를 확인하고 사용해보세요...\n\nhttps://github.com/SalehAkaJim/medium-zustand\n","ogImage":{"url":"/assets/img/2024-07-02-ZustandinNextjs14withts_0.png"},"coverImage":"/assets/img/2024-07-02-ZustandinNextjs14withts_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-07-02-ZustandinNextjs14withts_0.png\">\n<p>이 게시물에서는 Next.js 프로젝트에서 Zustand를 사용하는 방법에 대해 설명하겠습니다. Zustand란 무엇일까요? 공식 문서에 따르면 다음과 같습니다:</p>\n<p>\"간단하고 빠르며 확장 가능한 간단한 Flux 원리를 사용하는 상태 관리 솔루션입니다. 편리한 API는 후크를 기반으로 하며, 보일러플레이트적이거나 의견이 강요되지 않습니다.\"</p>\n<h1>Atomic vs Boilerplate...</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>상황에 따라 다르지만, React.js 또는 Next.js에서는 프로젝트, 팀, 복잡성 등에 따라 보일러플레이트 또는 아토믹 상태 관리 중 선택할 수 있어요.</p>\n<p>제 경험에 따르면, 저는 아토믹 상태 관리를 선택했어요. 프로젝트의 다른 부분에 의존하지 않고 각 페이지/디렉터리를 독립적으로 개발할 수 있었어요. \"다른 부분에 의존하지 않는다\"는 것을 어떤 의미인지 예시를 들어 설명해 드릴게요.</p>\n<h1>새 프로젝트를 시작해 볼까요</h1>\n<pre><code class=\"hljs language-js\">npx create-next-app@latest\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">프로젝트 이름이 무엇인가요? zustand\n<span class=\"hljs-title class_\">TypeScript</span>를 사용하시겠습니까? 예\n<span class=\"hljs-title class_\">ESLint</span>를 사용하시겠습니까? 예\n<span class=\"hljs-title class_\">Tailwind</span> <span class=\"hljs-variable constant_\">CSS</span>를 사용하시겠습니까? 아니오\nsrc/ 디렉토리를 사용하시겠습니까? 아니요\n<span class=\"hljs-title class_\">App</span> <span class=\"hljs-title class_\">Router</span>를 사용하시겠습니까? (권장) 예\n기본 <span class=\"hljs-keyword\">import</span> 별칭(@/)을 사용자 정의하시겠습니까? 예\n구성할 <span class=\"hljs-keyword\">import</span> 별칭은 무엇인가요? @/\n</code></pre>\n<p><img src=\"/assets/img/2024-07-02-ZustandinNextjs14withts_1.png\" alt=\"Zustand in Next.js with TypeScript\"></p>\n<h1>Zustand 추가</h1>\n<pre><code class=\"hljs language-js\">npm install zustand # 또는 yarn add zustand 또는 pnpm add zustand\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>이제 첫번째 페이지를 개발할 준비가 되었습니다</h1>\n<h2>시작할 새로운 페이지를 추가해 봅시다</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/page.tsx</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Bears<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>저희 상점에는 얼마나 많은 곰이 있을까요? {0}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>증가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>감소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<p><img src=\"/assets/img/2024-07-02-ZustandinNextjs14withts_2.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>우리 가게는 이 페이지 안에서 생성될 것입니다</h2>\n<p>이 예시에서는 첫 번째 가게를 페이지 디렉토리 안에 생성할 것입니다. 이 가게는 이 페이지 안에서만 사용되며 다른 페이지나 컴포넌트에서는 전혀 필요하지 않을 겁니다 (이것이 원자 상태 관리의 장점이죠).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/_store/index.ts</span>\n<span class=\"hljs-keyword\">import</span> { create } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zustand'</span>;\n\n<span class=\"hljs-comment\">// 상태 타입</span>\ninterface <span class=\"hljs-title class_\">States</span> {\n  <span class=\"hljs-attr\">bears</span>: number;\n}\n\n<span class=\"hljs-comment\">// useBearStore</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useBearStore = create&#x3C;<span class=\"hljs-title class_\">States</span>>(<span class=\"hljs-function\">() =></span> ({\n  <span class=\"hljs-attr\">bears</span>: <span class=\"hljs-number\">0</span>,\n}));\n</code></pre>\n<h2>페이지 내에서 상태 호출하기</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/page.tsx</span>\n\n<span class=\"hljs-string\">'use client'</span>;\n<span class=\"hljs-keyword\">import</span> { useBearStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./_store'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 스토어 내의 모든 것을 가져올 것입니다.</span>\n  <span class=\"hljs-comment\">// 주의: 상태 변경 시마다 컴포넌트가 업데이트되는 원인이 될 수 있습니다!</span>\n  <span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">useBearStore</span>();\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Bears<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>우리 스토어에는 얼마나 많은 곰이 있을까요? {store.bears}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>증가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>감소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<p>또는</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/page.tsx</span>\n\n<span class=\"hljs-string\">'use client'</span>;\n<span class=\"hljs-keyword\">import</span> { useBearStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./_store'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 또는, 스토어에서 필요한 것을 가져올 수도 있습니다.</span>\n  <span class=\"hljs-keyword\">const</span> { bears } = <span class=\"hljs-title function_\">useBearStore</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> state);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Bears<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>우리 스토어에는 얼마나 많은 곰이 있을까요? {bears}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>증가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>감소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<h2>상태 변경을 위한 두 가지 액션을 추가합니다.</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/_store/index.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { create } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zustand'</span>;\n\n<span class=\"hljs-comment\">// 상태 타입</span>\ninterface <span class=\"hljs-title class_\">States</span> {\n  <span class=\"hljs-attr\">bears</span>: number;\n}\n\n<span class=\"hljs-comment\">// 액션 타입</span>\ninterface <span class=\"hljs-title class_\">Actions</span> {\n  <span class=\"hljs-attr\">increase</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">void</span>;\n  <span class=\"hljs-attr\">decrease</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">void</span>;\n}\n\n<span class=\"hljs-comment\">// useBearStore</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useBearStore = create&#x3C;<span class=\"hljs-title class_\">States</span> &#x26; <span class=\"hljs-title class_\">Actions</span>>(<span class=\"hljs-function\">(<span class=\"hljs-params\">set</span>) =></span> ({\n  <span class=\"hljs-attr\">bears</span>: <span class=\"hljs-number\">0</span>,\n\n  <span class=\"hljs-attr\">increase</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> ({ <span class=\"hljs-attr\">bears</span>: state.<span class=\"hljs-property\">bears</span> + <span class=\"hljs-number\">1</span> })),\n  <span class=\"hljs-attr\">decrease</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> ({ <span class=\"hljs-attr\">bears</span>: state.<span class=\"hljs-property\">bears</span> - <span class=\"hljs-number\">1</span> })),\n}));\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/page.tsx</span>\n\n<span class=\"hljs-string\">'use client'</span>;\n<span class=\"hljs-keyword\">import</span> { useBearStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./_store'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 또는, 스토어에서 필요한 것을 가져올 수도 있습니다</span>\n  <span class=\"hljs-keyword\">const</span> { bears, increase, decrease } = <span class=\"hljs-title function_\">useBearStore</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> state);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Bears<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>저희 스토어에는 얼마나 많은 곰이 있을까요? {bears}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{increase}</span>></span>증가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{decrease}</span>></span>감소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<h2>이제 준비되었으니, 작동 방식을 확인해봅니다</h2>\n<pre><code class=\"hljs language-js\">npm run dev\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-07-02-ZustandinNextjs14withts_3.png\" alt=\"Persist Data\"></p>\n<h2>데이터 영속적 저장 방법</h2>\n<p>첫 번째 단계는 영속 데이터를 처리할 수 있도록 스토어를 변경하는 것입니다. localStorage, AsyncStorage, IndexedDB 등을 선택할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/_store/index.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { create } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zustand'</span>;\n<span class=\"hljs-keyword\">import</span> { persist, createJSONStorage } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'zustand/middleware'</span>;\n\n<span class=\"hljs-comment\">// 상태 유형</span>\ninterface <span class=\"hljs-title class_\">States</span> {\n  <span class=\"hljs-attr\">bears</span>: number;\n}\n\n<span class=\"hljs-comment\">// 액션 유형</span>\ninterface <span class=\"hljs-title class_\">Actions</span> {\n  <span class=\"hljs-attr\">increase</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">void</span>;\n  <span class=\"hljs-attr\">decrease</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">void</span>;\n}\n\n<span class=\"hljs-comment\">// useBearStore</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useBearStore = <span class=\"hljs-title function_\">create</span>(\n  persist&#x3C;<span class=\"hljs-title class_\">States</span> &#x26; <span class=\"hljs-title class_\">Actions</span>>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">set</span>) =></span> ({\n      <span class=\"hljs-attr\">bears</span>: <span class=\"hljs-number\">0</span>,\n\n      <span class=\"hljs-attr\">increase</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> ({ <span class=\"hljs-attr\">bears</span>: state.<span class=\"hljs-property\">bears</span> + <span class=\"hljs-number\">1</span> })),\n      <span class=\"hljs-attr\">decrease</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> ({ <span class=\"hljs-attr\">bears</span>: state.<span class=\"hljs-property\">bears</span> - <span class=\"hljs-number\">1</span> })),\n    }),\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'bearStore'</span>,\n      <span class=\"hljs-attr\">storage</span>: <span class=\"hljs-title function_\">createJSONStorage</span>(<span class=\"hljs-function\">() =></span> <span class=\"hljs-variable language_\">localStorage</span>),\n    }\n  )\n);\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>상태를 유지하고 오류를 피하는 가장 좋은 방법</h2>\n<p>상태를 유지하기 위해 사용자 정의 후크를 만들 것입니다</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /helpers/usePersistStore/index.ts</span>\n\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-keyword\">const</span> usePersistStore = &#x3C;T, F><span class=\"hljs-function\">(<span class=\"hljs-params\">\n  store: (callback: (state: T) => unknown) => unknown,\n  callback: (state: T) => F\n</span>) =></span> {\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">store</span>(callback) <span class=\"hljs-keyword\">as</span> F;\n  <span class=\"hljs-keyword\">const</span> [data, setData] = useState&#x3C;F>();\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">setData</span>(result);\n  }, [result]);\n\n  <span class=\"hljs-keyword\">return</span> data;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> usePersistStore;\n</code></pre>\n<h2>우리의 페이지는 다음과 같을 것입니다:</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 디렉토리: /app/bears/page.tsx</span>\n\n<span class=\"hljs-string\">'use client'</span>;\n<span class=\"hljs-keyword\">import</span> usePersistStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/helpers/usePersistStore'</span>;\n<span class=\"hljs-keyword\">import</span> { useBearStore } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./_store'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Page</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// 또는 스토어에서 필요한 것을 가져올 수 있습니다</span>\n  <span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">usePersistStore</span>(useBearStore, <span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =></span> state);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Bears<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>저희 상점에는 얼마나 많은 곰이 있나요? {store?.bears}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{store?.increase}</span>></span>증가<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{store?.decrease}</span>></span>감소<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></span>\n  );\n}\n</code></pre>\n<h2>GitHub에서 코드를 확인하고 사용해보세요...</h2>\n<p><a href=\"https://github.com/SalehAkaJim/medium-zustand\" rel=\"nofollow\" target=\"_blank\">https://github.com/SalehAkaJim/medium-zustand</a></p>\n</body>\n</html>\n"},"__N_SSG":true}