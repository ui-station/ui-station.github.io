{"pageProps":{"post":{"title":"간단한 커스텀 훅을 이용한 React Native 앱 상태 마스터하기","description":"","date":"2024-06-23 21:44","slug":"2024-06-23-MasteringAppStateinReactNativewithasimplecustomhook","content":"\n# 소개\n\n애플리케이션 상태를 관리하는 것은 견고한 React Native 애플리케이션을 구축하는 중요한 측면입니다. 이 글에서는 애플리케이션 상태 변경을 간소화하기 위해 설계된 useAppStateCheck라는 사용자 정의 React 훅을 탐구해 보겠습니다. 이 훅은 React Native의 AppState 모듈을 활용하여 애플리케이션의 라이프사이클 변경을 추적하고 대응하는 우아한 해결책을 제공합니다.\n\n# useAppStateCheck 훅\n\nuseAppStateCheck 훅은 React Native 컴포넌트에 애플리케이션 상태 모니터링을 간편하게 통합할 수 있는 다재다능한 도구입니다. 이를 사용해보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// useAppStateCheck.tsx\n\nimport { useCallback, useEffect } from \"react\";\nimport {\n  NativeEventSubscription,\n  AppState,\n  AppStateStatus,\n} from \"react-native\";\n\ninterface useAppStateCheckProps {\n  setAppStateStatus: React.Dispatch<React.SetStateAction<AppStateStatus>>;\n}\n\nexport default function useAppStateCheck(props: useAppStateCheckProps) {\n  const { setAppStateStatus } = props;\n\n  const handleAppStateChange = useCallback(\n    async (nextAppState: AppStateStatus) => {\n      setAppStateStatus(nextAppState);\n    },\n    [setAppStateStatus]\n  );\n\n  useEffect(() => {\n    let eventListener: NativeEventSubscription;\n    eventListener = AppState.addEventListener(\"change\", handleAppStateChange);\n\n    return () => {\n      eventListener && eventListener.remove();\n    };\n  }, [handleAppStateChange]);\n}\n```\n\n# 애플리케이션에 통합\n\nuseAppStateCheck 훅을 사용하는 것은 매우 간단합니다. React Native 컴포넌트에 신속하게 통합하는 방법을 보여드리겠습니다.\n\nApp.tsx에서 처음에 AppStateStatusContext에서 사용되는 상태를 선언한 곳에서, useEffect 종속성으로 appStateStatus를 사용할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```jsx\n// App.tsx\n\nimport React, { useState, useEffect, useCallback, useContext } from \"react\";\nimport { AppStateStatusContext } from \"./AppStateStatusContext\"; // 앱 상태 관리를 위한 컨텍스트가 있다고 가정합니다\n\nconst App = () => {\n  const [appStateStatus, setAppStateStatus] = useState(undefined);\n  useAppStateCheck({ setAppStateStatus });\n\n  const onAppStateChange = useCallback(() => {\n    switch (appStateStatus) {\n      case \"active\":\n        // 앱이 활성 상태인 경우 수행해야 할 작업\n        break;\n      case \"background\":\n        // 앱이 백그라운드 상태인 경우 수행해야 할 작업\n        break;\n      case \"inactive\":\n        // 앱이 비활성 상태인 경우 수행해야 할 작업\n        break;\n      default:\n        // 다른 앱 상태 시나리오 처리\n        break;\n    }\n  }, [appStateStatus]);\n\n  useEffect(() => {\n    onAppStateChange();\n  }, [onAppStateChange]);\n\n  return (\n    <AppStateStatusContext.Provider\n      value={{ appStateStatus, setAppStateStatus }}\n    >\n      {/* 여러분의 앱 컴포넌트들 */}\n    </AppStateStatusContext.Provider>\n  );\n};\n```\n\n다른 앱 부분에서 사용하기 위해서는 AppStateStatusContext로부터 값 가져오기만 하면 됩니다:\n\n```jsx\n// Example.page.tsx\n\nimport { useContext, useEffect, useCallback } from \"react\";\nimport AppStateStatusContext from \"../../contexts/AppStateStatusContext\";\n\nexport const ExamplePage: React.FC = () => {\n  const { appStateStatus } = useContext(AppStateStatusContext);\n\n  const onAppStateChange = useCallback(() => {\n    switch (appStateStatus) {\n      case \"active\":\n        // 앱이 활성 상태인 경우 수행해야 할 작업\n        break;\n      case \"background\":\n        // 앱이 백그라운드 상태인 경우 수행해야 할 작업\n        break;\n      case \"inactive\":\n        // 앱이 비활성 상태인 경우 수행해야 할 작업\n        break;\n      default:\n        // 다른 앱 상태 시나리오 처리\n        break;\n    }\n  }, [appStateStatus]);\n\n  useEffect(() => {\n    onAppStateChange();\n  }, [onAppStateChange]);\n\n  return <View></View>;\n};\n```\n\n# 앱 상태에 맞게 컨텍스트 설정하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n앱 상태에 대한 보다 포괄적인 컨텍스트를 제공하기 위해 컨텍스트 제공자를 사용하는 것을 고려해보세요. 위 예제에서는 AppStateStatusContext를 사용하여 앱 상태 및 setAppStateStatus를 중앙 집중식으로 캡슐화합니다.\n\n```js\n// AppStateStatusContext.tsx\nimport * as React from 'react';\nimport { AppStateStatus } from 'react-native';\n\nconst AppStateStatusContext = React.createContext<{\n    appStateStatus: AppStateStatus;\n    setAppStateStatus: React.Dispatch<React.SetStateAction<AppStateStatus>>;\n}>({\n    appStateStatus: 'active',\n    setAppStateStatus: () => {},\n});\n\nexport default AppStateStatusContext;\n```\n\n# 결론\n\nReact Native에서 앱 상태를 숙달하는 것은 반응성 및 안정성 있는 애플리케이션을 구축하는 데 필수적입니다. useAppStateCheck 사용자 정의 React Hook을 사용하면 앱 상태 변경 처리 과정을 간소화하여 코드베이스가 보다 깔끔하고 유지 관리하기 쉬워집니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저는 이 접근 방식을 적용한 사용 사례 중 하나로, 앱이 백그라운드로 전환되고 다시 활성 상태로 돌아올 때 기기 시간이 수동으로 변경되었는지 확인하는 것이 있습니다.\n\n전체 구현을 자유롭게 살펴보시고 프로젝트의 구체적인 요구 사항에 맞게 사용자 정의할 수 있습니다. 즐거운 코딩하세요!\n","ogImage":{"url":"/assets/img/2024-06-23-MasteringAppStateinReactNativewithasimplecustomhook_0.png"},"coverImage":"/assets/img/2024-06-23-MasteringAppStateinReactNativewithasimplecustomhook_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>애플리케이션 상태를 관리하는 것은 견고한 React Native 애플리케이션을 구축하는 중요한 측면입니다. 이 글에서는 애플리케이션 상태 변경을 간소화하기 위해 설계된 useAppStateCheck라는 사용자 정의 React 훅을 탐구해 보겠습니다. 이 훅은 React Native의 AppState 모듈을 활용하여 애플리케이션의 라이프사이클 변경을 추적하고 대응하는 우아한 해결책을 제공합니다.</p>\n<h1>useAppStateCheck 훅</h1>\n<p>useAppStateCheck 훅은 React Native 컴포넌트에 애플리케이션 상태 모니터링을 간편하게 통합할 수 있는 다재다능한 도구입니다. 이를 사용해보겠습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useAppStateCheck.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> { useCallback, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">NativeEventSubscription</span>,\n  <span class=\"hljs-title class_\">AppState</span>,\n  <span class=\"hljs-title class_\">AppStateStatus</span>,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-native\"</span>;\n\ninterface useAppStateCheckProps {\n  <span class=\"hljs-attr\">setAppStateStatus</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Dispatch</span>&#x3C;<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">SetStateAction</span>&#x3C;<span class=\"hljs-title class_\">AppStateStatus</span>>>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useAppStateCheck</span>(<span class=\"hljs-params\">props: useAppStateCheckProps</span>) {\n  <span class=\"hljs-keyword\">const</span> { setAppStateStatus } = props;\n\n  <span class=\"hljs-keyword\">const</span> handleAppStateChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-attr\">nextAppState</span>: <span class=\"hljs-title class_\">AppStateStatus</span>) => {\n      <span class=\"hljs-title function_\">setAppStateStatus</span>(nextAppState);\n    },\n    [setAppStateStatus]\n  );\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">eventListener</span>: <span class=\"hljs-title class_\">NativeEventSubscription</span>;\n    eventListener = <span class=\"hljs-title class_\">AppState</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">\"change\"</span>, handleAppStateChange);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> {\n      eventListener &#x26;&#x26; eventListener.<span class=\"hljs-title function_\">remove</span>();\n    };\n  }, [handleAppStateChange]);\n}\n</code></pre>\n<h1>애플리케이션에 통합</h1>\n<p>useAppStateCheck 훅을 사용하는 것은 매우 간단합니다. React Native 컴포넌트에 신속하게 통합하는 방법을 보여드리겠습니다.</p>\n<p>App.tsx에서 처음에 AppStateStatusContext에서 사용되는 상태를 선언한 곳에서, useEffect 종속성으로 appStateStatus를 사용할 수 있습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// App.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span>, { useState, useEffect, useCallback, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppStateStatusContext</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./AppStateStatusContext\"</span>; <span class=\"hljs-comment\">// 앱 상태 관리를 위한 컨텍스트가 있다고 가정합니다</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> [appStateStatus, setAppStateStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">undefined</span>);\n  <span class=\"hljs-title function_\">useAppStateCheck</span>({ setAppStateStatus });\n\n  <span class=\"hljs-keyword\">const</span> onAppStateChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">switch</span> (appStateStatus) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"active\"</span>:\n        <span class=\"hljs-comment\">// 앱이 활성 상태인 경우 수행해야 할 작업</span>\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"background\"</span>:\n        <span class=\"hljs-comment\">// 앱이 백그라운드 상태인 경우 수행해야 할 작업</span>\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"inactive\"</span>:\n        <span class=\"hljs-comment\">// 앱이 비활성 상태인 경우 수행해야 할 작업</span>\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-attr\">default</span>:\n        <span class=\"hljs-comment\">// 다른 앱 상태 시나리오 처리</span>\n        <span class=\"hljs-keyword\">break</span>;\n    }\n  }, [appStateStatus]);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">onAppStateChange</span>();\n  }, [onAppStateChange]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">AppStateStatusContext.Provider</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">appStateStatus</span>, <span class=\"hljs-attr\">setAppStateStatus</span> }}\n    ></span>\n      {/* 여러분의 앱 컴포넌트들 */}\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">AppStateStatusContext.Provider</span>></span></span>\n  );\n};\n</code></pre>\n<p>다른 앱 부분에서 사용하기 위해서는 AppStateStatusContext로부터 값 가져오기만 하면 됩니다:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// Example.page.tsx</span>\n\n<span class=\"hljs-keyword\">import</span> { useContext, useEffect, useCallback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AppStateStatusContext</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../../contexts/AppStateStatusContext\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ExamplePage</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">FC</span> = <span class=\"hljs-function\">() =></span> {\n  <span class=\"hljs-keyword\">const</span> { appStateStatus } = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">AppStateStatusContext</span>);\n\n  <span class=\"hljs-keyword\">const</span> onAppStateChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-keyword\">switch</span> (appStateStatus) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"active\"</span>:\n        <span class=\"hljs-comment\">// 앱이 활성 상태인 경우 수행해야 할 작업</span>\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"background\"</span>:\n        <span class=\"hljs-comment\">// 앱이 백그라운드 상태인 경우 수행해야 할 작업</span>\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"inactive\"</span>:\n        <span class=\"hljs-comment\">// 앱이 비활성 상태인 경우 수행해야 할 작업</span>\n        <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-attr\">default</span>:\n        <span class=\"hljs-comment\">// 다른 앱 상태 시나리오 처리</span>\n        <span class=\"hljs-keyword\">break</span>;\n    }\n  }, [appStateStatus]);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =></span> {\n    <span class=\"hljs-title function_\">onAppStateChange</span>();\n  }, [onAppStateChange]);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>;\n};\n</code></pre>\n<h1>앱 상태에 맞게 컨텍스트 설정하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>앱 상태에 대한 보다 포괄적인 컨텍스트를 제공하기 위해 컨텍스트 제공자를 사용하는 것을 고려해보세요. 위 예제에서는 AppStateStatusContext를 사용하여 앱 상태 및 setAppStateStatus를 중앙 집중식으로 캡슐화합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// AppStateStatusContext.tsx</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">AppStateStatus</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AppStateStatusContext</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">createContext</span>&#x3C;{\n    <span class=\"hljs-attr\">appStateStatus</span>: <span class=\"hljs-title class_\">AppStateStatus</span>;\n    <span class=\"hljs-attr\">setAppStateStatus</span>: <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Dispatch</span>&#x3C;<span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">SetStateAction</span>&#x3C;<span class=\"hljs-title class_\">AppStateStatus</span>>>;\n}>({\n    <span class=\"hljs-attr\">appStateStatus</span>: <span class=\"hljs-string\">'active'</span>,\n    <span class=\"hljs-attr\">setAppStateStatus</span>: <span class=\"hljs-function\">() =></span> {},\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">AppStateStatusContext</span>;\n</code></pre>\n<h1>결론</h1>\n<p>React Native에서 앱 상태를 숙달하는 것은 반응성 및 안정성 있는 애플리케이션을 구축하는 데 필수적입니다. useAppStateCheck 사용자 정의 React Hook을 사용하면 앱 상태 변경 처리 과정을 간소화하여 코드베이스가 보다 깔끔하고 유지 관리하기 쉬워집니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>저는 이 접근 방식을 적용한 사용 사례 중 하나로, 앱이 백그라운드로 전환되고 다시 활성 상태로 돌아올 때 기기 시간이 수동으로 변경되었는지 확인하는 것이 있습니다.</p>\n<p>전체 구현을 자유롭게 살펴보시고 프로젝트의 구체적인 요구 사항에 맞게 사용자 정의할 수 있습니다. 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}