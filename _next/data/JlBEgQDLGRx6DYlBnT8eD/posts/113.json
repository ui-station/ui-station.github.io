{"pageProps":{"posts":[{"title":"루프의 길이 찾기 GFG 문제","description":"","date":"2024-05-18 15:13","slug":"2024-05-18-FindlengthofLoopGFGProblem","content":"\n## 소개\n\n연결 리스트는 컴퓨터 과학에서 중요한 데이터 구조입니다. 노드로 구성되어 있으며 각 노드는 데이터와 순서상 다음 노드를 가리키는 참조(또는 링크)를 포함합니다. 연결 리스트의 일반적인 문제 중 하나는 루프를 감지하고 해당 루프의 노드 수를 계산하는 것입니다. 이 기사에서는 연결 리스트 내의 루프에 있는 노드 수를 세는 간단하면서 효과적인 알고리즘에 대해 살펴보겠습니다.\n\n## 문제\n\n연결 리스트의 루프는 노드의 다음 포인터가 리스트 내 이전 노드 중 하나를 가리킬 때 발생하여 순환이 생성됩니다. 이러한 루프를 감지하는 것은 탐색 중 무한 루프를 방지하기 위해 중요합니다. 루프를 감지한 후에는 루프 내 노드 수를 세는 것이 구조를 이해하거나 추가 처리를 위한 여러 목적에 유용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 알고리즘\n\n루프 내 노드 수를 세려면 먼저 루프를 감지해야 합니다. 이를 위해 Floyd의 순환 찾기 알고리즘(토끼와 거북이 알고리즘으로도 알려짐)을 사용할 수 있습니다. 루프가 감지되면 다음 단계를 통해 루프 내 노드 수를 세는 방법을 사용할 수 있습니다.\n\n다음은 루프 내 노드를 세는 코드 스니펫입니다:\n\n```js\nint count = 1;\nNode current = loopNode;\n\nwhile (current.next != loopNode) {\n    current = current.next;\n    count++;\n}\nreturn count;\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 해당 알고리즘을 자세히 살펴보겠습니다:\n\n- 초기화:\n\n  - 루프노드 자체가 루프의 일부이기 때문에 count 카운터를 1로 초기화합니다.\n  - current 포인터를 루프노드로 설정합니다.\n\n- 순회 및 카운팅:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 현재 포인터를 사용하여 루프를 트래버스(순회)합니다.\n- 각 노드마다 다음 노드로 이동하고 카운터를 증가시킵니다.\n- 이 과정을 반복하여 루프 노드에 다시 도달할 때까지 진행하여 사이클을 완료합니다.\n\n- 카운트 반환:\n\n- 루프가 완전히 트래버스(순회)된 후, 카운트에는 루프의 노드 수가 저장되며 이를 반환합니다.\n\n## 예시 해설\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음과 같이 루프를 가진 링크드 리스트를 고려해 봅시다:\n\n![image](/assets/img/2024-05-18-FindlengthofLoopGFGProblem_0.png)\n\n- 여기서 노드 5는 노드 3을 가리키므로 루프가 생성됩니다.\n- loopNode이 노드 3으로 감지되었다고 가정합니다.\n- 우리의 알고리즘은 current를 노드 3으로 초기화하고 카운팅을 시작합니다.\n- 탐색은 다음과 같이 진행됩니다: 3 - 4 - 5 - 6 - 7 - 8 - 3.\n- 각 단계마다 count가 증가하여 최종 count는 6이 됩니다.\n\nMarkdown 형식으로 테이블 태그를 변경합니다.\n\n```js\nstatic int countNodesinLoop(ListNode head) {\n    if (head == null) {\n        return 0;\n    }\n\n    ListNode slow = head;\n    ListNode fast = head;\n\n    int count = 1 ;\n\n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n\n        if (slow == fast) {\n            return countLoopLength(slow);\n        }\n    }\n\n    return 0;\n}\n\nprivate static int countLoopLength(ListNode loopNode) {\n    int count = 1;\n    ListNode current = loopNode;\n    while (current.next != loopNode) {\n        current = current.next;\n        count++;\n    }\n    return count;\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 실용적인 고려 사항\n\n- 루프 감지: 위 코드는 루프 감지가 이미 완료되었고 loopNode가 제공되었다고 가정합니다. Floyd의 순환 찾기 알고리즘을 사용하여 이를 달성할 수 있습니다.\n- 예외 경우: 루프가 없거나 루프가 하나의 노드로만 구성된 경우를 고려해야 합니다. 알고리즘은 이러한 사례를 민첩하게 처리해야 합니다.\n- 복잡성: 이 루프 카운팅의 시간 복잡도는 O(n)입니다. 여기서 n은 루프 내 노드의 수입니다. 공간 복잡도는 추가적인 공간을 상수로 사용하므로 O(1)입니다.\n\n## 결론\n\n연결 리스트 내의 루프에서 노드를 계산하는 것은 직관적인 순회 방법을 사용하여 쉽게 수행할 수 있는 기본 작업입니다. 이 알고리즘을 이해하고 구현함으로써 연결 리스트 조작에 대한 이해를 높이고 데이터 구조에서 더 복잡한 문제를 대비할 수 있습니다. 이 지식을 바탕으로 연결 리스트의 루프를 효율적으로 처리하여 알고리즘을 견고하고 신뢰성 있게 만들 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-FindlengthofLoopGFGProblem_0.png"},"coverImage":"/assets/img/2024-05-18-FindlengthofLoopGFGProblem_0.png","tag":["Tech"],"readingTime":4},{"title":"Java 경험 개발자 선도 개발자 인터뷰 질문 목록 이 기사에서 10개 이상의 회사 질문이 다루어집니다","description":"","date":"2024-05-18 15:12","slug":"2024-05-18-JavaExperienceDeveloperLeadDeveloperInterviewQuestionsListInthisarticlemorethan10companiesquestioniscovered","content":"\n![이미지](/assets/img/2024-05-18-JavaExperienceDeveloperLeadDeveloperInterviewQuestionsListInthisarticlemorethan10companiesquestioniscovered_0.png)\n\n참고: Java/Spring boot는 한 기사에서 다루기에 매우 방대한 기술 스택이지만, 저는 현재까지 받은 모든 인터뷰 질문을 최대한 포함하려고 노력했습니다. 따라서 여러분도 동일한 것을 참고하여 본인의 준비 상황을 점검할 수 있습니다. 모든 질문에 대한 해결책을 제공하기 위해 다른 기사를 작성해 달라면, 댓글에 귀중한 의견을 남겨주세요.\n\nQuestions\n\n![이미지](/assets/img/2024-05-18-JavaExperienceDeveloperLeadDeveloperInterviewQuestionsListInthisarticlemorethan10companiesquestioniscovered_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 1: 스트림 API를 통해 동시 수정을 시뮬레이션하는 방법은 무엇인가요?\n\n질문 2: 병렬 스트림을 위해 열리는 스레드의 수는 얼마이고, 병렬 스트림은 내부적으로 어떻게 작동하나요?\n\n질문 3: Executor는 쓰레드 풀 Executor의 내부 작업에 대해 어떻게 쓰레드가 활성화되거나 종료되었는지 확인하나요?\n\n질문 4: JAVA 메모리 모델에 대해 간략히 설명해 주실 수 있나요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nQuestion 5: JDK 8에서 pegmen의 변경 사항은 무엇인가요? (PermGen과 Meta)\n\nQuestion 6: 일반 REST 서비스와 Restful WS(웹 서비스)의 차이는 무엇인가요?\n\nQuestion 7: 다양한 종류의 Http 메소드는 무엇이 있고 그 차이는 무엇인가요?\n\nQuestion 8: DDOS(서비스 거부) 공격이란 무엇이며, 이를 어떻게 애플리케이션에서 방지할 수 있을까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 9: 메소드 참조(Method Reference)와 함수형 인터페이스에 대해 설명해주세요.\n\n질문 10: 자바 8에서 기본/정적 메소드에 대한 오버라이드 규칙을 정의해주세요.\n\n질문 11: 주로 JAVA 디자인 패턴과 관련된 질문입니다.\n생성 디자인 패턴\ni) 싱글턴(Singleton)\nii) 빌더(Builder)\niii) 팩토리(Factory)\niv) 프로토타입(Prototype)\n\n구조 디자인 패턴\ni) 어댑터(Adaptor)\nii) 브릿지(Bridge)\niii) 프록시(Proxy)\niv) 데코레이터(Decorator)\n\n행위 디자인 패턴\ni) 책임 연쇄(Chain of Responsibility)\nii) 옵저버(Observer)\niii) 전략(Strategy)\n\n질문 12: API를 어떻게 보안할 것인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 13: hashcode()와 equals()에 대해 간단히 설명해 주세요. 이어지는 질문은 사용자 지정 객체를 사용할 때 둘 중 하나만 재정의하고 다른 하나는 재정의하지 않았을 때의 상황을 어떻게 이해하시겠습니까?\n\n질문 14: HashMap과 HashSet의 내부 작업 방식은 무엇인가요?\n\n질문 15: 스프링 부트 마이크로서비스 프로젝트에서 캐시를 활성화하는 방법이 무엇이며, 동일한 기능을 구현하기 위해 사용할 수 있는 어노테이션은 무엇이 있나요?\n\n질문 16: Kafka의 작동 방식과 Kafka 사용 시 컨슈머 그룹이 무엇인지 설명해 주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 17: 귀하의 마이크로서비스 애플리케이션을 설계하는 데 어떤 디자인 패턴을 사용했는지 알려주세요. 주로\ni) 서킷 브레이커\nii) 사가\niii) CQRS\niv) 이중 커밋\n\n질문 18: 데이터베이스 샤딩이란?\n\n질문 19: (RDBMS) SQL과 NoSQL의 차이점은 무엇인가요?\n\n질문 20: Apache Spark는 무엇이며, Spring Boot 애플리케이션에서 Apache Spark의 사용 용도는 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 21: 스프링 부트 마이크로서비스 애플리케이션에서 traceId와 span Id는 무엇이며, 이러한 식별자의 사용 목적은 무엇인가요?\n\n질문 22: 스프링 부트에서 웹플럭스(webflux)와 모노(mono)가 무엇인가요?\n\n질문 23: 사용자 정의 불변 클래스를 어떻게 생성하시겠습니까? 후속 질문으로 String이 불변 클래스임을 코드 조각으로 증명할 수 있나요?\n\n질문 24: 컬렉션 클래스의 시간/공간 복잡성과 내부 데이터 구조의 이름을 나열해 주실 수 있나요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 25 : 귀하의 애플리케이션에서 사용한 모든 동시 컬렉션 클래스 및 Java 8 이후 컬렉션 클래스의 개선 사항은 무엇인가요?\n\n질문 26 : 자바 8에서 IO에 대한 모든 개선 사항은 무엇인가요?\n\n질문 27 : 스프링 부트에서 자동 구성을 활성화하고 비활성화하는 방법은 무엇인가요?\n\n질문 28 : 액추에이터의 사용 목적은 무엇이며, 같은 것을 어떻게 사용자 정의할 수 있나요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 29 : 사용자 정의 어노테이션을 어떻게 만드나요?\n\n질문 30 : 쿠버네티스를 사용하는 이유와 쿠버네티스의 클러스터, 노드, POD 등에 대해 설명해주실래요?\n\n질문 31 : 응용 프로그램 내구성을 위해 어떤 것을 사용하실 건가요?\n\n질문 32 : 테이블에 이름, id 열이 있는 데이터베이스 테이블이 있다면 짝수 행을 찾는 쿼리를 작성해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 33 : Arrays.sort(..)와 Collections.sort(..)에서 사용되는 알고리즘의 이름은 무엇인가요?\n\n질문 34 : serialVersionUID를 왜 사용하나요?\n\n질문 35 : 스프링에서 순환 종속성(cyclic dependency)을 어떻게 방지할 수 있나요?\n\n질문 36 : 도커 이미지의 크기를 줄일 수 있을까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문 37: 싱글톤 클래스를 어떻게 파괴할 수 있나요? 싱글 객체 생성 전략은 무엇인가요?\n\n질문 38: 깊은 복사와 얕은 복사는 무엇이며 Cloanable 인터페이스의 사용 예시는 무엇인가요?\n\n질문 39: 객체 생성에 생성자 대신 빌더 디자인 패턴을 사용하는 이유는 무엇인가요?\n\n질문 40: Spring Boot에서 HTTP 메소드 유형 변경 없이 두 가지 모호한 URL을 작동하게 하는 방법은 무엇인가요? URL을 변경하지 않고도 변경을 수락하지 않을 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n문제 41 : 애플리케이션 배포 구조는 어떻습니까?\n\n문제 42 : CompletableFuture의 사용법을 설명해주세요.\n\n문제 43 : Java 8에서 String.join(….)의 사용법은?\n\n코딩 문제\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-JavaExperienceDeveloperLeadDeveloperInterviewQuestionsListInthisarticlemorethan10companiesquestioniscovered_2.png\" />\n\n질문 1 : 문자열 목록에서 중복 문자를 찾는 프로그램을 작성하십시오. Java 스트림만 허용됩니다.\n\n질문 2 : 주어진 문자열에서 중복 요소와 해당 발생을 찾으십시오. Java 스트림만 허용됩니다.\n\n질문 3 : 0과 1의 배열이 있습니다. 모든 0은 왼쪽에 모든 1은 오른쪽에 위치하도록 유지하십시오.\n예 : Integer array[] =[1,1,0,1,0] - 출력 : [0,0,1,1,1]\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nQuestion 4: 주어진 입력에서 연속된 숫자 시퀀스를 찾으세요. 모든 가능한 테스트를 제공해 주세요.\n예시: 입력 1 2 3 5 9 a 6 7 8 4 @ -5 -7 -3 -2 -1\n결과:\n1 2 3\n6 7 8\n-3 -2 -1\n\nQuestion 5: 주어진 맵에서 N번째로 높은 연봉을 찾으세요. Java 8 스트림 솔루션이 허용됩니다.\n예시:\n학생은 이름과 연봉을 가지고 있습니다.\n맵은 Map`String, Student`와 같이 될 것입니다.\n\nQuestion 6: N명의 학생 목록이 주어지며, 각 학생은 M과목에 대해 점수가 있습니다. 각 학생은 인덱스 값으로 표시됩니다. 선생님 Ms. Margaret은 모든 학생에 대해 1과목의 점수를 무시해야 합니다. 이를 위해 각 학생의 최하 점수를 무시하기로 결정합니다. 여러분의 임무는 그 과목을 찾고, 다른 모든 과목에서 각 학생이 얻은 총점을 계산하여 마지막으로 각 학생이 얻은 총 점수 배열을 반환하는 데 도움을 주는 것입니다.\n입력 사양:\ninput1:\n학생 수를 나타내는 정수 값 N\ninput2:\n과목 수를 나타내는 정수 값 M\ninput3:\n각 과목의 모든 학생의 점수를 포함하는 크기가 N’M인 2-D 정수 배열입니다.\n출력 사양:\n각 학생의 총 점수를 과목 점수를 차감한 후 반환하는 크기가 N인 정수 배열을 반환합니다.\n입력:\n3 5\n75 76 65 87 87\n78 76 68 56 89\n67 87 78 77 65\n결과:\n325 299 296\n\nQuestion 7: JAVA 스트림을 사용하여 주어진 문자열에서 고유한 요소를 찾는 프로그램을 작성하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nQuestion 8: 주어진 문자열에서 첫 번째로 반복되지 않는 요소를 Java Streams로 찾는 프로그램을 작성해주세요.\n\nQuestion 9: 요소가 중복될 수 있는 배열에서 두 번째로 높은 요소를 찾는 프로그램을 Java 8 Stream으로 해결해주세요.\n\nQuestion 10: 주어진 문자열에서 처음으로 반복되는 요소/문자를 Java Streams로 찾는 프로그램을 작성해주세요.\n\nQuestion 11: 주어진 배열에서 가장 긴 문자열을 찾는 프로그램을 작성해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nQuestion 12: 배열에서 2로 시작하는 모든 요소를 Stream API를 사용하여 찾는 Java 프로그램을 작성하십시오.\n\nQuestion 13: 식 문자열 'exp'가 주어졌을 때, 주어진 식에서 \" ' \", \" ' \", \" ( \", \" ) \", \" [ \", \" ] \"의 쌍과 순서가 올바른지 확인하는 프로그램을 작성하십시오.\n\n예시:\n\n```java\npublic class CodingProblem13 {\n public static void main(String[] args) {\n  String inputString = \"[(]{}{[()()]()}\"; // 이 문자열이 균형 잡힌 괄호 문자열인지 확인해야 함\n  System.out.println(\"Result:::\" + isBalancedInput(inputString));\n }\n\n private static String isBalancedInput(String input) {\n  Deque<Character> stack = new ArrayDeque<>();\n  for (int i = 0; i < input.length(); i++) {\n    if (!(input.charAt(i) == '}' || input.charAt(i) == ']' || input.charAt(i) == ')')) {\n      stack.push(input.charAt(i));\n    }\n\n    if ((input.charAt(i) == '}' || input.charAt(i) == ']' || input.charAt(i) == ')')) {\n      if (stack.isEmpty()) {\n        return \"Not Balanced \";\n      }\n      char top = stack.pop();\n\n      if ((input.charAt(i) == ')' && top != '(') || (input.charAt(i) == ']' && top != '[') || (input.charAt(i) == '}' && top != '{')) {\n        return \"Not Balanced \";\n      }\n    }\n  }\n  return stack.isEmpty() ? \"Balanced\" : \"Not Balanced \";\n }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 문서를 읽어 주셔서 감사합니다. 동일한 내용에 대한 소준하고 유익한 피드백/제안을 제공해 주시면 감사하겠습니다.\n\n면접 준비와 인터뷰에 행운이 있기를 바랍니다................\n\n이 문서에 박수를 잊지 마세요.\n\n또 다른 지식 공유 콘텐츠를 살펴볼 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-JavaExperienceDeveloperLeadDeveloperInterviewQuestionsListInthisarticlemorethan10companiesquestioniscovered_0.png"},"coverImage":"/assets/img/2024-05-18-JavaExperienceDeveloperLeadDeveloperInterviewQuestionsListInthisarticlemorethan10companiesquestioniscovered_0.png","tag":["Tech"],"readingTime":11},{"title":"소프트웨어 품질 보증  데이터베이스와의 시스템 통합 검증 방법","description":"","date":"2024-05-18 15:10","slug":"2024-05-18-SoftwarequalityassuranceHowtoverifysystemintegrationwithdatabases","content":"\n![이미지](/assets/img/2024-05-18-SoftwarequalityassuranceHowtoverifysystemintegrationwithdatabases_0.png)\n\n소프트웨어 개발의 성공에는 테스트가 중요합니다. 소프트웨어 엔지니어들은 대부분의 시간을 자동화된 테스트 작성에 할애합니다. 비교적으로, 비즈니스 로직 개발에 소요되는 시간은 그리 많지 않습니다.\n\n테스트는 소프트웨어 전달에서 중요한 역할을 하므로, 테스팅 지식은 소프트웨어 엔지니어로서의 채용 면접에서 표준 질문이 되었습니다. 가끔 지원자 중 일부는 데이터베이스 통합의 품질을 어떻게 보증할지에 대해 대답하지 못하는 경우가 있습니다.\n\n데이터베이스는 대부분의 시스템에서 중요한 구성 요소입니다. 데이터베이스와 통신하기 위한 일반적인 설계 패턴은 액세스 요청을 SQL 쿼리로 변환하기 위한 데이터 액세스 계층을 갖는 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 다이어그램은 API 엔드포인트, 비즈니스 로직 및 데이터 액세스를 별도의 레이어로 분리하는 전통적인 디자인 패턴을 보여줍니다. 비즈니스 로직은 데이터 액세스 레이어에 의존하여 데이터베이스에서 읽기/쓰기 작업을 수행합니다.\n\n![이미지](/assets/img/2024-05-18-SoftwarequalityassuranceHowtoverifysystemintegrationwithdatabases_1.png)\n\n테스트할 때, 데이터 액세스 레이어의 SQL 쿼리가 올바른지 어떻게 확인할까요?\n\n최근 취업 면접에서 소프트웨어 엔지니어와 이야기를 나눴습니다. 몇 년의 경험이 있더라도 자동화된 테스트가 표준적인 실천 방법이 되었음에도 불구하고 데이터 액세스 레이어에 대한 통합 테스트를 어떻게 구현하는지 알지 못하는 사람들도 있음을 깨달았습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우선, 통합 테스트는 단위 테스트와 유사합니다. 테스트 범위는 예를 들어 데이터 액세스 레이어와 같은 단일 컴포넌트에 집중됩니다. 그러나 차이점은 단위 테스트에서 하는 것처럼 가짜 데이터베이스를 만들 수 없다는 것입니다. 대신, 독립 실행형 데이터베이스 엔진을 시작하여 데이터베이스와 상호 작용을 확인해야 합니다.\n\n![이미지](/assets/img/2024-05-18-SoftwarequalityassuranceHowtoverifysystemintegrationwithdatabases_2.png)\n\n이 글에서 데이터 액세스 레이어에 대한 자동화된 테스트를 구현하는 2가지 다른 방법을 공유하겠습니다. 작업 방식을 더 잘 이해하도록 샘플 코드는 스프링 프레임워크를 사용하지 않고 모두 일반 자바 코드로 작성되어 있습니다.\n\n# 샘플 데이터 스키마\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n직원 레코드의 간단한 데이터베이스 스키마를 기반으로 한 통합 테스트의 구현을 보여드리겠습니다. 직원 레코드에는 다음과 같은 데이터 필드가 포함되어 있습니다: 고유 식별자, 이름, 급여 및 부서.\n\n```js\nCREATE TABLE EMPLOYEE (\n   id int,\n   name varchar(255),\n   department varchar(255),\n   salary decimal(14,2),\n   primary key (id)\n);\n```\n\n다음과 같은 함수를 제공하는 데이터 액세스 레이어가 있습니다:\n\n- 직원 레코드 삽입\n- ID에 따른 직원 레코드 검색\n- 부서에 따른 직원 레코드 검색\n- 부서별 평균 급여 검색\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGitHub 레포지토리의 전체 소스 코드는 다음 링크를 참조해 주세요 (https://github.com/gavinklfong/data-access-layer-test-demo).\n\n# 내부 메모리 데이터베이스\n\n이 아이디어는 컴포넌트가 테스트하는 데 연결할 수 있는 일회용 데이터베이스를 시작하는 것입니다. 가벼운 내부 메모리 데이터베이스 엔진을 실행하는 것은 통합 테스트를 신속하게 실행하는 빠른 방법입니다. 이는 데이터베이스가 디스크의 읽기/쓰기 없이 메모리에서만 작동하기 때문에 빠릅니다. 테스트 실행이 끝나면 데이터베이스를 파기하고 버릴 수 있습니다.\n\nH2 데이터베이스는 인기 있는 내부 메모리 데이터베이스입니다. H2 데이터베이스를 활성화하려면 Maven의 pom.xml에 이 의존성을 추가하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nH2 데이터베이스에서 테스트를 실행하는 것은 정말 편리합니다. 데이터베이스 시작업이 필요 없습니다. JDBC 연결 문자열 jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODEL=MYSQL을 사용하여 데이터베이스 연결을 생성하면 H2 데이터베이스가 자동으로 시작됩니다.\n\n다음 2가지 매개변수로 인메모리 데이터베이스가 생성된 것을 알 수 있습니다:\n\n- DB_CLOSE_DELAY=-1 — JVM이 종료될 때까지 데이터베이스를 유지하려면 이 매개변수가 필요합니다.\n- MODEL=MYSQL — 실제 환경에서 사용되는 MYSQL과 SQL 구문을 호환되게 만듭니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트 시나리오에서 데이터베이스는 일반적으로 모두 공유되며, 데이터베이스 연결은 정적 멤버로 설정되어 있습니다. 처음에는 직원 테이블을 생성하는 schema.sql을 실행합니다.\n\n이 예에서는 경량 라이브러리 JDBI를 사용하여 데이터베이스 연결 및 쿼리 실행을 합니다.\n\n```js\nclass EmployeeDaoInMemoryH2Test {\n\n   // 인메모리 데이터베이스에 연결\n   private static final Jdbi jdbi = Jdbi\n           .create(\"jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=MYSQL\");\n\n   private EmployeeDao employeeDao;\n\n   @BeforeAll\n   static void setupAll() {\n       // 테이블 설정\n       jdbi.withHandle(handle ->\n               handle.createScript(ClasspathSqlLocator\n                        .removingComments().getResource(\"schema.sql\"))\n                        .execute()\n       );\n   }\n\n   @BeforeEach\n   void setup() {\n       employeeDao = new EmployeeDao(jdbi);\n\n       // 클린업 및 테스트 데이터 다시 삽입\n       jdbi.withHandle(handle ->\n               handle.createScript(ClasspathSqlLocator\n                        .removingComments().getResource(\"employee.sql\"))\n                        .execute()\n       );\n   }\n\n\n// ... 테스트 시나리오 ...\n\n}\n```\n\n각 테스트 시나리오 시작 전에 data.sql이 실행되어 직원 테이블의 모든 레코드가 정리되고 테스트 레코드가 다시 삽입됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nDELETE FROM EMPLOYEE;\n\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (1, 'Rueben Hardy', 'FINANCE', 1291.8);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (2, 'Frank Dunlap', 'FINANCE', 10025.3);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (3, 'Anna Melendez', 'FINANCE', 8773.13);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (4, 'Joan Riggs', 'OPERATION', 6597.89);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (5, 'April Davidson', 'OPERATION', 1563.19);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (6, 'Molly Woodward', 'MARKETING', 10442.24);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (7, 'Roisin Noble', 'MARKETING', 7288.92);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (8, 'Abdullahi Morse', 'MARKETING', 1635.55);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (9, 'Gina Shepard', 'SALES', 7703);\nINSERT INTO EMPLOYEE(id, name, department, salary)\n  VALUES (10, 'Cecil Burch', 'SALES', 3422.67);\n```\n\n스키마와 테스트 데이터가 준비되면, 테스트 시나리오 구현은 직관적일 것입니다. 결과를 확인하려면 직관적인 SQL을 사용하는 것이 좋습니다.\n\n# 데이터 설정 및 테스트 결과 확인 방법\n\n데이터 액세스 계층이 테스트 중이므로, 데이터 액세스 계층의 시스템 동작이 완전히 테스트되기 전에는 보장되지 않습니다. 따라서, 데이터 설정 및 확인은 데이터 액세스 계층의 메서드를 호출하는 대신 직접적인 SQL을 사용하여 수행해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러므로 데이터베이스 테스트 데이터 설정은 데이터 액세스 계층의 insertEmployee()를 사용하는 대신 SQL 스크립트 파일로 수행됩니다.\n\n또한, 데이터 액세스 계층의 insertEmployee()를 확인하는 것이 더 좋은 방법은 일반 SQL을 사용하는 것입니다. 아래 예시는 getEmployeeById()를 호출하여 삽입된 직원 레코드를 확인하는 것은 좋은 방법이 아닙니다. 이는 getEmployeeById()가 정상 작동하는지 알 수 없기 때문입니다. 레코드 검색 함수에 잠재적인 결함이 있는 경우 정확하지 않은 테스트 결과를 생성할 수 있습니다.\n\n```js\n@Test\nvoid testInsertEmployee() {\n   Employee newEmployee = Employee.builder()\n           .id(99)\n           .name(\"Gina Bond\")\n           .department(\"MARKETING\")\n           .salary(new BigDecimal(\"3425.5\"))\n           .build();\n\n   // 새 직원 입력 테스트\n   assertThat(employeeDao.insertEmployee(newEmployee)).isEqualTo(1);\n\n   // 이것은 좋은 방법이 아닙니다\n   // getEmployeeById()를 사용하여 삽입된 레코드 확인\n   assertThat(employeeDao.getEmployeeById(99))\n          .isNotEmpty()\n          .contains(newEmployee);\n}\n```\n\n대안으로, 새로 삽입된 레코드를 검색하기 위한 일반 SQL을 사용하는 것이 더 안전한 방법입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n@Test\nvoid testInsertEmployee() {\n   Employee newEmployee = Employee.builder()\n           .id(99)\n          .name(\"Gina Bond\")\n           .department(\"MARKETING\")\n           .salary(new BigDecimal(\"3425.5\"))\n           .build();\n\n   assertThat(employeeDao.insertEmployee(newEmployee)).isEqualTo(1);\n\n   // verify test result using plain SQL\n   Optional<Employee> insertedRecord = jdbi.withHandle(handle ->\n           handle.createQuery(\"SELECT id, name, department, salary \" +\n                           \"FROM EMPLOYEE \" +\n                           \"WHERE id = :id\")\n                   .bind(\"id\", 99)\n                   .mapToBean(Employee.class)\n                   .findOne());\n\n   assertThat(insertedRecord).isNotEmpty()\n           .contains(newEmployee);\n}\n```\n\n# 도커 컨테이너 내의 실제 데이터베이스\n\nH2 데이터베이스가 지원하는 MySQL 호환 모델에도 불구하고, 시스템 동작은 아직 실제 MySQL 데이터베이스와 완전히 동일하지는 않습니다. MySQL 데이터베이스와 진지하게 테스트를 하려면 도커 컨테이너 내에서 MySQL 데이터베이스를 이용하는 것이 합리적인 선택입니다.\n\n이 개념은 인메모리 데이터베이스 사용과 유사합니다. 데이터베이스를 메모리에서 실행하는 대신, 도커 컨테이너에서 데이터베이스를 생성합니다. 그런 다음 테스트가 완료되면 컨테이너를 정지하고 제거합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n도커 컨테이너에서 데이터베이스를 실행함으로써 목표 데이터베이스에 대한 데이터 액세스 레이어를 테스트할 수 있는 이점을 누릴 수 있어요. 이는 시스템 동작이 실제 환경의 데이터베이스에 가까워짐을 의미합니다.\n\nTestcontainers는 도커 컨테이너를 테스트하기 위한 간편한 방법을 제공하는 멋진 라이브러리에요. MySQL 컨테이너를 실행하기 위해 Maven pom.xml에 이 종속성을 추가하세요.\n\n```js\n<dependency>\n  <groupId>org.testcontainers</groupId>\n  <artifactId>mysql</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n각 테스트 시나리오마다 MySQL 데이터베이스를 시작하는 것은 가능하지만, 새로운 도커 컨테이너를 각 시나리오 전에 시작해야 하므로 권장하지 않아요. 도커 컨테이너는 시작하는 데 훨씬 더 오랜 시간이 걸리기 때문에 컴퓨팅 성능에 따라 약 4~5초가 소요될 수 있어요. 그리고 각 시나리오 전에 새 도커 컨테이너를 시작해야 한다면 10가지 테스트 시나리오를 실행하는 데 약 50초가 소요될 수 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트 요구사항이 특별하지 않다면, 일반적인 관행은 MySQL 도커 컨테이너를 시작하고 모든 테스트 시나리오가 동일한 데이터베이스를 공유하도록하는 것입니다.\n\n따라서 MySQLContainer는 정적 멤버로 정의됩니다. 초기 스크립트인 schema.sql을 지정하여 컨테이너가 실행된 직후 employee 테이블이 생성됩니다.\n\n컨테이너 라이프사이클을 관리하기 위해 JUnit 어노테이션 @BeforeAll을 사용하여 컨테이너를 시작합니다. 모든 테스트 시나리오가 완료된 후 @AfterAll을 사용하여 컨테이너를 중지하고 각 테스트 시나리오 전에 데이터를 재설정합니다.\n\n```js\nclass EmployeeDaoMySQLTestContainersTest {\n\n  private static final MySQLContainer<?> MYSQL_CONTAINER =\n           new MySQLContainer<>(DockerImageName.parse(\"mysql:latest\"))\n                   .withInitScript(\"schema.sql\");\n\n  private Jdbi jdbi;\n\n  private EmployeeDao employeeDao;\n\n  @BeforeAll\n  static void beforeAll() {\n     MYSQL_CONTAINER.start();\n  }\n\n  @AfterAll\n  static void afterAll() {\n     MYSQL_CONTAINER.stop();\n  }\n\n  @BeforeEach\n  void setup() {\n     jdbi = Jdbi.create(MYSQL_CONTAINER.getJdbcUrl(),\n             MYSQL_CONTAINER.getUsername(), MYSQL_CONTAINER.getPassword());\n\n     employeeDao = new EmployeeDao(jdbi);\n\n     jdbi.withHandle(handle ->\n         handle.createScript(ClasspathSqlLocator\n                 .removingComments().getResource(\"employee.sql\"))\n                 .execute()\n  );\n}\n\n// 테스트 시나리오 ...\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n컨테이너의 라이프사이클 관리를 간소화하기 위해 testcontainers 라이브러리는 @Testcontainers와 @Container 어노테이션을 제공합니다.\n\nJUnit 5에서 testcontainers를 지원하기 위해 다음 의존성을 추가해주세요.\n\n```js\n<dependency>\n  <groupId>org.testcontainers</groupId>\n  <artifactId>junit-jupiter</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n테스트 클래스에 @Testcontainers를 넣고 MySQLContainer에 @Container를 추가하면, @BeforeAll 및 @AfterAll을 사용하여 컨테이너를 시작 및 중지할 필요가 없어집니다. 컨테이너는 자동으로 시작되며, 모든 테스트 시나리오가 완료된 후에 중지됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```java\n@Testcontainers\nclass EmployeeDaoMySQLTestContainersAnnotationTest {\n\n   @Container\n   private static final MySQLContainer<?> MYSQL_CONTAINER =\n           new MySQLContainer<>(DockerImageName.parse(\"mysql:latest\"))\n                   .withInitScript(\"schema.sql\");\n\n     @BeforeEach\n     Private setup() {\n\n      }\n\n   // … test scenarios …\n}\n```\n\n# 마지막으로\n\n통합 테스트와 단위 테스트는 같은 개념을 공유하지만, 두 유형 모두 일부 의존성에 대한 모의/스터브화된 특정 수준의 구성요소에 중점을 둡니다.\n\n그러나 데이터베이스를 사용한 통합 테스트는 약간 다릅니다. 올바른 테스트를 수행하기 위해 실제 데이터베이스 엔진이 필요합니다. 이 글은 테스트를 원활하게 실행하기 위해 스키마 설정이 포함된 일회용 데이터베이스를 생성하는 방법에 대한 간략한 개요와 기술을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 GitHub 저장소(https://github.com/gavinklfong/data-access-layer-test-demo)를 참조하시면 전체 소스 코드를 확인하실 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-SoftwarequalityassuranceHowtoverifysystemintegrationwithdatabases_0.png"},"coverImage":"/assets/img/2024-05-18-SoftwarequalityassuranceHowtoverifysystemintegrationwithdatabases_0.png","tag":["Tech"],"readingTime":14},{"title":"자바 프로젝트를 업그레이드해보세요","description":"","date":"2024-05-18 15:08","slug":"2024-05-18-UpgradeYourJavaProject","content":"\n안녕 친구들,\n\n오늘의 글에서는 Java 프로젝트를 업그레이드하는 과정과 그 과정에서 마주칠 수 있는 일반적인 문제와 그 해결책에 대해 이야기하고 싶습니다. 우선가장 먼저, 그러한 업그레이드 프로세스 중에 종종 발생하는 기본 문제들에 대해 다뤄보겠습니다. 이러한 문제들은 각 프로젝트의 독특한 성격 때문에 일반적인 해결책이 없을 수 있지만, 이해하고 작업 계획을 수립함으로써 더 효과적으로 이러한 문제를 해결할 수 있습니다.\n\nJava 프로젝트를 업그레이드할 때 취해야 할 단계는 다음과 같습니다:\n\n![UpgradeYourJavaProject_0](/assets/img/2024-05-18-UpgradeYourJavaProject_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIDE 버전 확인: 통합 개발 환경(IDE)이 Java 버전 업그레이드를 지원하는지 확인하세요. IDE의 컴파일러 설정에서이 정보를 일반적으로 찾을 수 있으며 IDE가 컴파일 할 수있는 Java 버전을 보여줍니다. 그러나 IDE가 Java 21 SDK를 제공한다고하여 해당 버전을 지원하거나 컴파일에 사용한다는 의미는 아닙니다. 프로젝트가 컴파일될 Java 버전을 개별적으로 확인하는 것이 중요합니다.\n\n![이미지](/assets/img/2024-05-18-UpgradeYourJavaProject_1.png)\n\n확장 프로그램 확인: 현재 IDE가 적합하지 않은 경우에는 적절한 IDE 버전을 찾은 후 이전 IDE에서 사용한 확장 프로그램이 새 IDE에서 사용 가능한지 확인하세요. 이러한 확장 프로그램이 업그레이드할 Java 버전을 지원하는지 확인하십시오. 그렇지 않은 경우 대안적인 솔루션을 탐색해야 할 수도 있습니다.\n\n![이미지](/assets/img/2024-05-18-UpgradeYourJavaProject_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로젝트 의존성: 모든 것이 정리되고, 프로젝트가 깨끗한 상태라면, 순환 의존성 문제가 발생할 수 있습니다. 프로젝트 A는 프로젝트 B에 의존할 수 있고, 그 프로젝트 B는 다시 프로젝트 C에 의존할 수 있으며, C도 A에 의존할 경우 순환 의존성이 발생합니다. 이러한 경우에는 소매를 걷어 올리고 이러한 의존성을 정리해야 합니다. 시작점으로 모든 다른 프로젝트에 독립적인 핵심 프로젝트를 생성하는 것이 도움이 될 수 있지만, 너무 많은 것으로 넘치지 않도록 주의해야 합니다.\n\n![UpgradeYourJavaProject_3](/assets/img/2024-05-18-UpgradeYourJavaProject_3.png)\n\n코드 리뷰: 기존 코드베이스가 업그레이드할 Java 버전과 호환되는지 확인하기 위해 철저한 코드 리뷰를 수행하세요. 희귀하지만, 제거된 라이브러리나 수정된 메서드와 같은 문제가 발생할 수 있습니다. ChatGPT와 같은 도구를 사용하여 코드를 적절하게 조정하는 데 도움을 받을 수 있습니다.\n\n![UpgradeYourJavaProject_4](/assets/img/2024-05-18-UpgradeYourJavaProject_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n의존성 관리: 모든 것을 정리한 후에, 업그레이드할 Java 버전과 호환되는지 확인해야 할 제3자 API를 사용하는지 확인해야 합니다. 그렇지 않으면 호환되는 대체품을 찾아야 할 수 있으며, 때로는 어려운 과제가 될 수 있습니다.\n\n![이미지](/assets/img/2024-05-18-UpgradeYourJavaProject_5.png)\n\n마지막으로 이러한 단계를 완료한 후 최종 테스트를 수행하고 프로젝트를 운영 환경에 배포하여 프로세스를 마무리합니다. 이 단계는 실제 시스템과 새로 업그레이드된 시스템의 신뢰성, 성능 및 장점 사이의 불일치를 다루는 것이 어려울 수 있습니다.\n\n이러한 단계를 따르고 어려움을 평가하여 스스로의 로드맵을 작성할 수 있습니다. 이 프로세스는 종종 일회성 일 수 있으므로 세심한 계획 및 실행이 중요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n행운을 빕니다!\n","ogImage":{"url":"/assets/img/2024-05-18-UpgradeYourJavaProject_0.png"},"coverImage":"/assets/img/2024-05-18-UpgradeYourJavaProject_0.png","tag":["Tech"],"readingTime":4},{"title":"스페인 항공사 이베리아, 얼굴 인식 시스템 시범운영","description":"","date":"2024-05-17 20:20","slug":"2024-05-17-SpanishcarrierIberiatrialsfacialrecognitionsystem","content":"\n<img src=\"/assets/img/2024-05-17-SpanishcarrierIberiatrialsfacialrecognitionsystem_0.png\" />\n\n지난 금요일에는 스페인 항공사 이베리아의 얼굴 인식 시스템 론칭 행사에 참석했어요. 이 시스템은 탑승구 및 탑승 절차에 액세스하기 위한 것으로, 현재는 마드리드-바르셀로나 노선을 테스트 중이에요.\n\n얼굴 인식 기술은 이미 많은 공항에서 보편화되어 있어요. 저는 두바이의 스마트 게이트를 여러 해 동안 사용해 왔고, 이를 통해 공항 이동 중 승객들에게 편의를 제공하고 있어요. 이번 사례에서는 승객들의 신원을 공항 내에서 확인하고 탑승하는 데 제공하는 반면에, 스페인의 에나 공항 당국이 생체 인식 데이터를 보관하는 것이 조건으로 요구될 거 예요. 서비스 약관에 따르면, 이 데이터는 공항 내에서 승객 신원을 확인하는 데 사용되며 탑승 후에 삭제될 거에요.\n\n이 프로세스는 상대적으로 간단하며, 이베리아 앱에서 시작할 수 있어요. 사용자 프로필 아이콘을 찾아 오른쪽 상단에 위치한 메뉴에서 아래로 스크롤할 때, 마지막에서 두 번째 옵션인 \"얼굴 인식\"을 찾을 수 있어요. 서비스 약관을 수락한 후, 사용자는 신분증의 뒷면을 스캔하고, 그 위의 RFID 칩을 읽어야 해요(이 과정 중에서 가장 어려운 부분으로, 폰의 뒷면을 문서 주변으로 움직여 센서가 읽을 수 있도록 해야 해요), 그리고 셀카를 찍어야 해요. 현재 이 작업은 아이폰에서만 가능하며 나중에 안드로이드에서도 이용할 수 있을 거에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자는 앱에서 탑승권을 받으면 생체 인식 액세스와 연결해야 합니다. 이를 통해 보안 필터와 탑승 게이트에서 특별한 액세스를 사용할 수 있습니다. 이베리아 항공은 얼굴 인식을 이용한 탑승 게이트 6개를 갖고 있습니다 (J46, J50, J52, J54, J56, J58). 또한 체크인 지역에는 기업선과 비즈니스용 키오스크 2대, 보안 필터에 생체 인식 게이트 4대 (주 출입구 2대, 에어 셔틀 1대, 패스트트랙 1대)를 운영하고 있습니다. 바르셀로나 엘 프라트 공항에서는 생체 인식 탑승 게이트 (A02)와 보안 필터에 게이트 2대, 그리고 체크인 지역에 키오스크 1대를 운영하고 있습니다.\n\n이 시스템은 탑승권 대신 얼굴을 스캔하며 탑승 게이트에서 신분증이나 여권을 보일 필요가 없게 됩니다. 그러나 여권 또는 신분증을 지참해야 하는 것은 여전히 필수입니다. 탑승 시, 생체 인식 액세스를 가진 승객은 특별한 요구 사항을 갖춘 승객 및 1등급 승객(또는 이후 자유롭게 탑승 가능) 다음으로 즉시 탑승할 수 있습니다.\n\n생체 인식 액세스는 완전히 선택 사항이며, 수많은 승객들이 해당 서비스를 정기적으로 사용하는 마드리드-바르셀로나 에어 셔틀에서 시도 중입니다. 이 아이디어는 전 세계의 다른 공항들이 시행하고 있는 것처럼 공항 전체로 시스템을 확대하는 것입니다.\n","ogImage":{"url":"/assets/img/2024-05-17-SpanishcarrierIberiatrialsfacialrecognitionsystem_0.png"},"coverImage":"/assets/img/2024-05-17-SpanishcarrierIberiatrialsfacialrecognitionsystem_0.png","tag":["Tech"],"readingTime":2},{"title":"지금 우리가 디스토피아로 향하고 있을까요","description":"","date":"2024-05-17 20:18","slug":"2024-05-17-AreWeHeadingTowardsaDystopia","content":"\n<img src=\"/assets/img/2024-05-17-AreWeHeadingTowardsaDystopia_0.png\" />\n\n이틀 전, 2024 Google I/O 컨퍼런스에서 Google은 새로운 도구인 Illuminate를 선보였어. 이 AI 도구는 학술 논문을 입력으로 받아들여 인간과 구별할 수 없는 실제 음성과 함께 오디오 토론을 생성할 수 있어. 이것은 음성 AI의 발전을 보여주는 한 예일 뿐이야.\n\nAI와의 커뮤니케이션이 더 자연스럽고 인간적으로 변하면서 AI와 인간을 구분하기가 거의 불가능해지고 있어. AI 전문가로서 저는 미래에 대해 궁금하면서 동시에 걱정스러워해. 곧, AI 챗봇이 우릴 쓰기만 하는 것이 아니라 우리와 대화를 나눌 거야. 미래에 전화 상대가 우리가 생각하는 사람인지 아니면 AI 복제물인지 어떻게 구분할 수 있을까?\n\n중국에서는 일부 TV 프로그램에서 진행자의 클론을 만들어 휴가 중에 대신하고 있어. 두 달 전 우크라이나 인플루언서가 자신의 클론이 중국에 러시아 제품을 판다는 것을 보고 신고했어. 다음으로 어떤 수준이 있을까? 우리 자신의 클론을 만들어 번거로운 전화를 처리하게 하거나, 비서 역할을 수행하게 하거나, 심지어는 면접까지 진행하게 할 수 있을까? 우리의 상담사가 ChatGPT의 지식, pi.ai의 공감능력, 그리고 Google의 실제 음성 생성 능력을 갖춘 AI 에이전트가 될까?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n왜 AI를 상담사로 선택해야 할까요? 왜냐하면 AI는 항상 접근 가능하며, 낮과 밤을 가리지 않고 언제든지 이야기할 수 있습니다. 우리의 걱정에 대해 최적의 조언을 받을 수 있으며, 시간당이 아닌 토큰 단위로 과금되어 가장 합리적인 가격으로 제공됩니다.\n\n![이미지](/assets/img/2024-05-17-AreWeHeadingTowardsaDystopia_1.png)\n\n이러한 솔루션이 완벽하게 구현되면 하나의 질문이 남습니다: 우리는 여전히 우리의 인간적 정체성을 유지할 수 있을까요, 아니면 우리 모두가 동일한 성격으로 수렴할까요?\n\nAI 전문가로서, 저는 트렌드를 주의 깊게 관찰하고 있으며 AI가 가져다주는 기회에 흥분하고 있습니다. 그러나 AI 도구에 적합한 작업과 인간이 해야 하는 작업을 구별해야 합니다. 비록 AI가 완벽하게 수행하더라도 우리 인간에 의해 수행되어야 할 작업이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAI에 대해 가장 우려되는 측면 중 하나는 데이터 개인정보 보호입니다. 당신이 입력하거나 말하는 매 말은 몇 초 내에 처리되며, 당신에 대한 추론을 도출하는 모델을 활성화합니다: 당신이 좋아하는 것, 무엇을 살 것이며, 다음에 무엇을 말할 것인지 등을 파악합니다.\n\n좋은 소식은 모든 사람이 동일한 도구를 사용하여 데이터를 수집하고 텍스트를 작성하는데 사용한다는 것입니다(예: ChatGPT 및 유사한 도구). 미래에는 예측을 건너뛰고 도구에 직접 물어볼 수도 있을지도 모릅니다.\n\nAI 분야에서의 인상적인 발전은 우리를 The Truman Show와 같은 가짜 현실에 접근시키는데, 여기서 AI가 우리의 모든 작업을 처리하고 우리의 사고와 의사 결정까지 돌보게 할 수 있습니다. 우리에게 남은 것은 먹기, 자기, 숨기뿐인 것일까요? 더구나 당신의 목소리를 완벽하게 복제하는 이러한 도구들은 보안 문제를 야기시킬 수 있습니다. 누군가의 목소리를 복제하면 그 사람의 신원 도용도 쉽게 이루어집니다.\n\n어떤 연구소에서 이미 성취되었든지, 곧 당신도 몇 가지 예시만 가지고도 특정 행동을 하는 사람의 포토리얼리스틱 비디오를 생성할 수 있을 것입니다. 이로 인한 위험은 상상할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그런 도구들은 영화 생성에 대한 멋진 선택으로 들리죠. 유명 배우들의 얼굴 또는 심지어 여러분과 친구들의 영화를 주인공으로 삼는 아이디어도 참 좋은데, 때로는 아니죠. DALL-E2와 같은 모델들은 이미 무작위 얼굴을 사용한 영화 제작을 허용하고 있어요.\n\n요약하자면, AI 기술의 발전은 틀림없이 인상적이지만, 무시할 수 없는 윤리적이고 실용적인 문제들을 동반하고 있어요. 인간과 AI 사이의 경계가 희미해지고, 우리의 정체성과 개인정보에 대한 질문들을 던지고 있어요. 신원 도용이나 가짜 현실 생성과 같은 남용 가능성은 상당한 위험을 야기합니다. 앞으로 나아가면서, AI에 적합한 작업과 인간이 갖고 있어야 할 영역을 신중하게 고려하는 것이 중요합니다. AI의 미래는 큰 기회를 품고 있지만, 경계 감각, 책임감, 그리고 우리를 독특하게 만드는 것을 보존하기 위한 헌신이 필요합니다.\n\n참고: 이 기사가 마음에 드셨다면 — 내용은 저의 것이며, chatGPT 4o에서의 일부 복사 편집 지원, 이미지 DALL-E.\n","ogImage":{"url":"/assets/img/2024-05-17-AreWeHeadingTowardsaDystopia_0.png"},"coverImage":"/assets/img/2024-05-17-AreWeHeadingTowardsaDystopia_0.png","tag":["Tech"],"readingTime":4},{"title":"당신의 Git 히스토리 정리하기","description":"","date":"2024-05-17 20:17","slug":"2024-05-17-SanitisingYourGitHistory","content":"\n2005년에 창설된 이후 Git은 버전 관리 시스템(VCS)의 왕으로 부상했습니다. 빠르고 간단하며 분산 속성을 갖춘 Git은 두 대 혁신적인 클라우드 VCS 제공업체인 GitHub와 GitLab의 채택과 함께 다른 VCS를 대체했습니다.\n\n하지만 좋은 도구도 사용자가 어떻게 관리하는지에 달려 있습니다. 특히 적절한 검토와 강제 사항이 없이 여러 사용자들이 Git 저장소에 기여할 때, 대용량 파일이 많아지며 지나치게 복잡해지는 저장소가 만들어질 수 있습니다. 이는 다른 사용자들이 저장소를 복제하거나 CI 파이프라인을 실행할 때 더 큰 지연을 야기할 수 있습니다.\n\n더 나쁜 상황으로는, 암호와 같은 민감한 파일이 실수로 커밋되어 역사 속에 깊숙이 들어가 있고, 새로운 커밋을 통해 간단히 삭제할 수 없을 수도 있습니다.\n\nGit을 처음 사용하는 경우, 계속하기 전에 여기에서 Git 소개를 읽어보세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-17-SanitisingYourGitHistory_0.png\" />\n\n# Git 히스토리 이해하기\n\nGit(또는 다른 VCS)의 아름다움은 버전 내역에 있습니다. 그것이 Git에서 썩은 부분을 정리해야 할 때 발생하는 어려움 역시 그런 아름다움에 속합니다. Git에 실수로 커밋한 큰 파일을 예로 들어보죠.\n\n<img src=\"/assets/img/2024-05-17-SanitisingYourGitHistory_1.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 이 큰 파일은 feature 브랜치 1에서 처음 소개되었고 사용자 1에 의해 마스터 브랜치로 병합되었습니다.\n- 마스터 브랜치는 사용자 2에 의해 feature 브랜치 2로 쪼개졌습니다.\n- 사용자 1은 나중에 실수를 발견하여 큰 파일을 삭제하고 다시 마스터 브랜치로 병합했습니다.\n- 그러나 무심코 남아 있는 사용자 2의 feature 브랜치 2에 여전히 큰 파일이 있고, 사용자 2는 자신의 기능을 해결한 후에도 큰 파일을 마스터 브랜치로 다시 병합합니다.\n\n실수로 커밋할 때나 마스터 브랜치와 같은 공통 브랜치로 병합할 때 복잡성을 볼 수 있습니다. 사용자 2가 feature 2를 커밋하지 않아도 사용자 1이 삭제하고 새 커밋으로 병합한 후에도 큰 파일은 여전히 히스토리에 유지됩니다.\n\n따라서 해당 큰 파일을 제거하려면 원격 저장소의 모든 브랜치의 Git 히스토리를 완전히 지워야 합니다. 또한 제거한 후 로컬 복사본이 있는 다른 개발자들에게 알려주어서 그 파일을 삭제하고 제거 후 다시 저장소를 클론하도록 해야 합니다.\n\n# Git 히스토리 프로파일링\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저장소의 Git 기록은 숨겨진 폴더 .git에 저장됩니다. 로컬로 저장소의 사본을 복제하고 다음 명령을 실행하여 그 크기를 빠르게 확인할 수 있습니다. 이 Git 기록이 약 416Mb임을 알 수 있습니다.\n\n```js\ncd .git\ndu -d 1 -h\n\n416M ./objects\n4.0K ./info\n 12K ./logs\n 60K ./hooks\n8.0K ./refs\n416M .\n```\n\nGit을 프로파일링하는 훌륭한 도구는 git-sizer라는 도구를 사용하는 것입니다. MacOS에서는 brew를 사용하여 설치할 수 있습니다. 다른 운영 체제를 사용하는 경우, GitHub 릴리스 페이지에서 설치 파일을 다운로드할 수 있습니다. (아래 링크를 참조해주세요).\n\n```js\nbrew install git-sizer\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저장소로 이동해서 다음 명령어를 실행해주세요.\n\n```js\ncd your/git/repository\ngit-sizer --verbose\n```\n\n이 명령어를 실행하면 Git 기록의 명확한 프로필을 확인할 수 있어요. 저장소의 크기 및 최적화해야 할 관심 수준을 확인할 수 있습니다. 이 경우에는 기록 중 대부분의 저장소가 블롭으로 저장되어 있는 것을 확인할 수 있어요. 블롭은 Git-LFS (Large File Storage)나 다른 저장 영역(예: AWS S3)에 저장해야 합니다.\n\n```js\n블롭 처리 중: 1368개\n트리 처리 중: 1957개\n커밋 처리 중: 518개\n트리에 해당하는 커밋: 518개\n주석이 달린 태그 처리 중: 1개\n참조 처리 중: 24개\n| 이름                         | 값        | 관심 수준                         |\n| ---------------------------- | --------- | ------------------------------ |\n| 전체 저장소 크기             |           |                                |\n| * 커밋                      |           |                                |\n|   * 총 개수                  |   518     |                                |\n|   * 총 크기                 |   158 KiB |                                |\n| * 트리                      |           |                                |\n|   * 총 개수                  |  1.96 k   |                                |\n|   * 총 크기                 |   686 KiB |                                |\n|   * 총 트리 항목 수         |  17.7 k   |                                |\n| * 블롭                      |           |                                |\n|   * 총 개수                  |  1.37 k   |                                |\n|   * 총 크기                 |   453 MiB |                                |\n| * 주석이 달린 태그           |           |                                |\n|   * 개수                    |     1     |                                |\n| * 참조                      |           |                                |\n|   * 개수                    |    24     |                                |\n|     * 브랜치                |     1     |                                |\n|     * 태그                  |    15     |                                |\n|     * 원격 추적 참조         |     8     |                                |\n|                              |           |                                |\n| 가장 큰 객체들               |           |                                |\n| * 커밋                      |           |                                |\n|   * 최대 크기             [1] |   771 B   |                                |\n|   * 최대 부모 수          [2] |     2     |                                |\n| * 트리                      |           |                                |\n|   * 최대 엔트리 수        [3] |    23     |                                |\n| * 블롭                      |           |                                |\n|   * 최대 크기             [4] |   430 MiB | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |\n|                              |           |                                |\n| 기록 구조                    |           |                                |\n| * 최대 기록 깊이            |   346     |                                |\n| * 최대 태그 깊이        [5] |     1     |                                |\n|                              |           |                                |\n| 가장 큰 체크아웃들           |           |                                |\n| * 디렉터리 수          [6] |   108     |                                |\n| * 최대 경로 깊이       [7] |     9     |                                |\n| * 최대 경로 길이       [7] |   134 B   | *                              |\n| * 파일 수              [3] |   283     |                                |\n| * 파일 총 크기        [8] |   442 MiB |                                |\n| * 심볼릭 링크 수       [9] |     1     |                                |\n| * 서브모듈 수         [10] |     2     |                                |\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Git 히스토리 삭제하기\n\n프로파일링 후 지우고 싶은 내용에 대한 명확한 아이디어가 생겼으니, Git 히스토리에서 해당 내용을 삭제해 보겠습니다. 이를 위해 git-filter-repo라는 Python 도구를 설치해야 합니다 (아래 링크를 참조하세요). 나중에 필요할 때를 대비해 참조용 원격 origin을 목록에 표시해 두세요.\n\n```js\n# 설치\npip install git-filter-repo\n\n# 원격 origin 목록 표시\ngit remote -v\n>> origin git@gitlab.com:jake/test.git (fetch)\n>> origin git@gitlab.com:jake/test.git (push)\n```\n\n여기에 파일이나 텍스트를 삭제하는 몇 가지 일반적인 예시 명령어를 포함했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 특정한 절대 파일 이름을 가진 파일을 삭제하는 방법\n- (\\*)를 사용하여 특정 유형의 모든 파일을 삭제하는 방법\n- 실수로 패스워드를 커밋한 경우와 같이 파일이나 스크립트에서 특정 텍스트를 대체하는 방법.\n\n```js\n# 파일 삭제\ngit filter-repo --invert-paths --path 'myfilename.jpg' --force\n\n# 글로브(*)를 사용하여 모든 파일 삭제\ngit filter-repo --invert-paths --path-glob '*.jpg' --force\ngit filter-repo --invert-paths --path-glob '*.jpg' --path-glob '*.png' --force\n\n# \"mypassword\"를 \"REPLACED\"로 대체하는 방법\ngit filter-repo --replace-text <(echo \"mypassword==>REPLACED\") --force\n```\n\n이전에 삭제한 것이 더 이상 남아 있지 않은지 확인하여 버전이나 브랜치를 검사하여 정상 작동하는지 확인할 수 있습니다.\n\n완료되면 정리된 복사본을 원격 저장소에 푸시할 수 있습니다. 이 도구는 안전상의 이유로 git 원격 URL을 자동으로 제거합니다. 따라서 다시 추가해야 합니다. 그런 다음 기존 브랜치를 원격에 강제로 푸시할 수 있습니다. 다른 브랜치가 있는 경우 체크아웃하여 그것들도 푸시해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# git filter-repo를 실행한 후 원격 저장소를 다시 추가하세요\ngit remote add origin git@gitlab.com:jake/test.git\n\n# 원격 저장소로 푸시하세요\ngit push --set-upstream origin main --force\n\n# 다른 브랜치가 있으면 변경사항을 푸시하세요\ngit checkout <branch>\ngit push --set-upstream origin <branch> --force\n```\n\n# 주의사항\n\n각 Git 버전은 Git 해시라는 고유한 ID를 가지고 있습니다. git-filter-repo나 기타 도구를 사용하여 Git 히스토리의 커밋을 변경하면 해시가 변경됩니다.\n\nGit 해시는 병합/풀 요청, Git 태그 또는 릴리스와 같은 VCS 플랫폼에서 참조로 사용됩니다. 이들은 작동하지 않고 특히 Git 히스토리에서 깊숙이 포함된 것을 제거하고 싶은 경우 문제가 될 수 있습니다. 중요하다면 저장소의 복사본을 만드는 것이 좋습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 요약\n\ngit-sizer와 git-filter-repo는 Git 히스토리를 프로파일링하고 정리하는 데 사용되는 인기 있는 신뢰할 수 있는 오픈 소스 도구입니다. 이러한 도구를 사용하면 필요에 따라 간편하게 리포지토리의 상태를 확인하고 정리하여 유지할 수 있습니다.\n\n# 참고\n","ogImage":{"url":"/assets/img/2024-05-17-SanitisingYourGitHistory_0.png"},"coverImage":"/assets/img/2024-05-17-SanitisingYourGitHistory_0.png","tag":["Tech"],"readingTime":10},{"title":"해커의 마음 - Recon 마인드 맵","description":"","date":"2024-05-17 20:16","slug":"2024-05-17-TheHackersMind-ReconMindmap","content":"\nBy Tahir Mujawar, 인증된 윤리적 해커 및 사이버 보안 연구원\n\n![이미지](/assets/img/2024-05-17-TheHackersMind-ReconMindmap_0.png)\n\n안녕하세요 👋 사이버 모험가 여러분! 여기 타히르 무자와르입니다. 사이버 보안의 복잡성을 탐험하는 전략적 안내서인 Recon Mind map을 소개합니다. 정교하게 제작된 이 지도는 각 하위 도메인, 기술 식별 및 콘텐츠 발견을 통해 우리를 안내하는 설계도입니다. 함께 사이버 공간의 비밀을 발견하고 Recon Mind map과 함께 더 안전한 디지털 프론티어를 개척해 봅시다.\n\nRecon은 정보 수집뿐만 아니라 통찰력, 선견지달력 및 보이지 않는 위협에 대항하는 촉매의 역할을 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nRecon Mind Map을 만드는 목적은 학습을 체계적으로 진행하는 데 있습니다. 온라인으로 다양한 자료가 풍부하게 제공되지만, 나와 같은 열정적인 사람들은 종종 어디에 초점을 맞춰야 할지 판별하기 어렵다고 느낍니다. Recon Mind Map은 웹 애플리케이션 탐색에 필수적인 모든 주요 주제를 아우르며, 학습 여정에서 명확성과 방향성을 제공합니다.\n\nRecon Mind Map은 다음과 같은 요소들을 포함합니다:\n\n1. 토폴로지 맵핑\n\n- NetBrain\n- NetCrunch\n- SolarWinds\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 방화벽 식별\n\n- WafW00f\n- Nmap NSE\n\n3. 로드 밸런서\n\n- lbd\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n4. ASN\n\n- bgp.he.net\n- Hacker Target\n- Amass\n\n5. CIDR Range\n\n- Asn Lookup\n- Mapcidr\n- Amass Intel\n- ipaddressguide.com\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n6. IP 블록 / 서브넷\n\n- viewdns\n- MxTools\n- whois.arin.net\n- whoxy\n- who.is\n- lopseg\n- shodan.io\n\n7. IP 주소\n\n오픈 포트, 서비스, 버전\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Masscan\n- Naabu\n- Rustscan\n- Nmap\n- Sandmap\n- Scan Cannon\n\n8. Cloud\n\n- Home Lister Directory\n\n## \\* Horizontal / Acquisitions Enumeration\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- WhoisXMLAPI\n- CrunchBase\n- Wikipedia\n- ChatGpt\n\n## 수직열거\n\n수동 열거:\n\n- 수동 소스\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 지피노\n- 아매스\n- 서브파인더\n- 서브리스트\n- 에셋파인더\n- 원포올\n- 파인도메인\n- 크로벳\n- 노크파이\n- 깃허브-서브도메인\n\n2. 인증서 로그\n\n- crt.sh\n- tls.bufferover.run\n\n3. 재귀적 열거\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 수동 소스\n\n## \\* 활성화 목록\n\n- DNS 무차별 강제 공격\n\n- Puredns\n- Cewl\n- FFUF\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 순열\n\n- 고타토르\n\n3. JS / 소스 코드 스크랩핑\n\n- 링크파인더\n- 겟제이에스\n- 고스파이더\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n4. Google Analytics\n\n- Analytics Relationships\n\n5. TLS, CNAME 프로빙\n\n- Cero\n- httpx\n- dnsx\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n6. VHOST 프로빙\n\n- 가상 호스트 스캐너\n- 호스트 헌터\n\n7. 웹 프로빙\n\n- Unimap\n- httpx\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Whatweb\n- Wappalyzer\n- Netcraft\n- Builtwith\n- Fingerprintx\n- Retire.JS\n\n1. URLs\n\n- GAU\n- Linx\n- Waybackurl\n- hakrawler\n- Gospider\n- URLgrab\n\n2. Parameters\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Param-Miner\n- x8\n- Parameth\n- Arjun\n- Github-Endpoints\n\n### 3. JS Enumeration\n\n- Secret Finder\n- JS Recon\n- Link Finder\n- Wayback URLs\n- JS Scan\n\n### 4. Directory & File Enumeration\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- FFUF\n- Dirb\n- Gobuster\n- DirSearch\n- WFuzz\n\n5. Google FU\n\n- Trufflehog\n- GitDorker\n- githound\n- GitGrabber\n- GitLeakes\n- Repo-Supervisor\n\n- S3 Scanner\n- S3 Bucket Finder\n- GrayHatWarfare\n- Lazy S3\n- AWS Bucket Dump\n- CloudBrute\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Wpscan\n- CMSmap\n- Joomscan\n\n- OSINT Framework\n- theHarvester\n- Recon-ng\n- Maltego\n- MOSINT\n- SpiderFoot\n\n- EyeWitness\n- LazyShot\n- Aquatone\n- Web shot\n- Eyeballer\n\n위에 언급한 마인드 맵이 있어요. 더 잘 보기 위해서는 중간 앱을 사용하거나 컴퓨터/노트북에서 여세요. PNG 파일을 받으려면 LinkedIn에서 연락 주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nC\nonnect me on LinkedIn\n\nResearching takes considerable time. If you found this helpful, a Like, share, or follow would be greatly appreciated. Your support fuels our cyber journey!\n\nHappy Hacking! Bye Bye Hackers 👋\n\n![TheHackersMind ReconMindmap](/assets/img/2024-05-17-TheHackersMind-ReconMindmap_1.png)\n","ogImage":{"url":"/assets/img/2024-05-17-TheHackersMind-ReconMindmap_0.png"},"coverImage":"/assets/img/2024-05-17-TheHackersMind-ReconMindmap_0.png","tag":["Tech"],"readingTime":8},{"title":"중간 과정 프롬프트를 Shorten으로 개선하세요","description":"","date":"2024-05-17 20:14","slug":"2024-05-17-ImproveYourMidjourneyPromptsWithshorten","content":"\n<img src=\"/assets/img/2024-05-17-ImproveYourMidjourneyPromptsWithshorten_0.png\" />\n\n미드절니(Midjourney)는 상세하고 현실적인 AI 생성 이미지로 유명합니다. 그러나 미드절니의 모델이 당신이 제시한 프롬프트를 정확히 생성하는 것은 도전일 수 있습니다.\n\n예를 들어, 이 기사의 제목 이미지의 경우 저는 리본을 가로지르는 낡은 가위를 요청했습니다. 그러나 받은 이미지는 모두 리본 근처를 떠도는 가위의 이미지입니다.\n\n/shorten 명령어는 프롬프트를 분석하는 유용한 도구입니다. 미드절니의 알고리즘이 프롬프트를 해석하는 방식을 파악하고, 원하는 이미지를 만들기에 더 적합한 더 짧은 프롬프트를 제안해줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기사에서 Midjourney Discord 인터페이스에서 `/shorten` 명령어가 어떻게 작동하는지 알게 될 것입니다. 그런 다음 두 가지 예제를 통해 안내해 드리겠습니다:\n\n- 복잡한 장면을 /shorten 명령어로 분석하여 prompt를 개선하기\n- prompt의 길이를 80% 줄이기\n\n## /shorten 명령어 동작\n\nMidjourney 봇은 프롬프트를 단어 또는 짧은 구문으로 구성된 토큰으로 분할합니다. 그런 다음 이러한 토큰과 교육 데이터의 연관성을 기반으로 이미지를 작성합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n직감과는 반대로 간결하고 간결한 프롬프트가 긴 설명보다 더 나은 성능을 발휘할 수 있다고 합니다. Midjourney는 시적인 언어와 과도한 설명이 이미지에 예상치 못한 객체들이 나타나게 할 수 있다고 설명합니다.\n\n사용자들은 Discord 채팅 인터페이스에서 /imagine 키워드로 이미지 프롬프트를 제공하고 알고리즘은 4가지 가능한 이미지 그리드를 생성합니다. 이들은 더 세부적으로 다듬을 수 있으며, 섬세하고 창의적인 업스케일링 및 인페인팅을 통해 더 발전시킬 수 있습니다.\n\n/imagine 와 마찬가지로, /shorten 도 Discord의 Midjourney 봇 채널에서 호출할 수 있습니다. 이것은 내 제목 이미지 프롬프트를 분석한 결과입니다:\n\n![2024-05-17-ImproveYourMidjourneyPromptsWithshorten_1.png](/assets/img/2024-05-17-ImproveYourMidjourneyPromptsWithshorten_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자에게 추가 옵션이 두 가지 더 있어요:\n\n- 해당 버튼을 클릭하여 다섯 가지 중 한 가지 단축 이미지 프롬프트를 기반으로 이미지를 생성합니다.\n- 각 토큰에 할당된 중요도를 표시하려면 “세부 정보 보기”를 클릭합니다.\n\n후자의 경우 Midjourney 봇은 각 토큰에 할당한 가중치를 반환합니다. 더 높은 가중치를 가진 토큰은 더 중요하다고 간주됩니다.\n\n알고리즘은 이미지 구성 요소와 각각의 색상, 스타일에 중점을 둡니다. 구성은 덜 중요한 것으로 보이며 리본에 쓰인 단어의 설명도 마찬가지입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 가족 모습\n\n다음에는 /shorten 명령어를 사용하여 가족 모습을 만드는 데 도움을 받겠어요. 네 개의 이미지 그리드 중에서, 주어진 프롬프트와 가장 일치하는 이미지를 항상 선택했어요.\n\n저는 Midjourney에게 아늑한 가족 모습을 만들어 달라고 요청했어요. 그 가족 구성원들과 애완동물의 자세한 설명, 각자의 직업, 이미지에서의 위치를 포함하여 구체적으로 설명했고, 이미지 스타일은 사실적인 것으로 지정했어요.\n\n![가족 모습](/assets/img/2024-05-17-ImproveYourMidjourneyPromptsWithshorten_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n생성된 장면에는 요청한 모든 객체들이 포함되어 있지만, 구성이 예상대로 되지는 않았어요. 예를 들어, 부엌 카운터 위에 있는 태비 고양이 한 마리 대신 바닥에 두 마리가 있었어요. 바닥에는 장난감이 있지만, 아이들이 그것들과 놀고 있지는 않았어요. 하지만 정말 당황한 건 창문의 아랫부분이 빠져있던 거에요.\n\n/shorten을 사용하여 Midjourney 봇이 제 원래 프롬프트를 분석한 결과를 제공해 주었어요. 봇은 가장 중요한 단어들을 굵은 글꼴로 강조했어요.\n\n분석 결과 사람들과 애완동물이 중요하게 여겨졌어요. 그러나 프롬프트의 가장 관련된 부분은 설정이에요: 사실적이고, 환한, 아침, 가족, ... 흥미로운 점은 모피 색상 \"태비\"가 고양이 자체보다 훨씬 중요하게 여겨졌다는 것인데요 - 아마도 \"태비\" 객체를 요청했을 때 \"고양이\"가 자동으로 추론된다는 힌트일지도 모르겠어요?\n\n봇은 또한 프롬프트를 다섯 가지 요약된 버전으로 제안했어요. 그것들은 프롬프트의 인식에 따라 중요한 부분을 포착하고 적절하지 않은 세부사항은 제외한 것으로 보입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 패널에서는 \"사실적인, 화창한 아침 가족 장면, 부엌에서 스무디를 준비하는 여성, 두 아이, 장난감 자동차로 뒤덮인 바닥. 태비 고양이, 과일, 커튼\"에서 \"사실적인, 화창한, 가족, 스무디\"로 줄어든 프롬프트에 대한 이미지가 보입니다.\n\n제가 만들고 싶은 장면과 일치하는 줄어든 프롬프트는 찾지 못했습니다. 알고리즘을 구성에 더 집중하도록 하기 위해, 스타일보다는 구성에 더 집중하게끔 아래의 수정된 프롬프트를 만들기로 결정했습니다.\n\n더 이상 사진을 사실적으로 요구하지 않고, 태비 고양이와 다른 물건들이 바닥이 아니라 카운터 위에 놓이도록 요청합니다. 이것이 스타일보다 더 중요하다고 생각했기 때문입니다.\n\n![이미지](/assets/img/2024-05-17-ImproveYourMidjourneyPromptsWithshorten_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 시적인 언어 줄이기\n\n다음 예시에서, 저는 시적이고 화려한 이미지 프롬프트를 만들 수 있도록 ChatGPT의 도움을 받았습니다:\n\n미드저니 봇이 이를 줄였습니다.\n\n이것은 총 5개 중 3번째 프롬프트였지만, 그 이후로는 포도와 키위가 사라지기 시작했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 패널은 두 프롬프트를 나란히 비교한 것을 보여줍니다. 원본 38단어 중 8단어만 남은 단축된 프롬프트는 장면을 충실하게 재구성합니다.\n\n![이미지](/assets/img/2024-05-17-ImproveYourMidjourneyPromptsWithshorten_4.png)\n\n## 결론\n\n첫 번째 복잡한 프롬프트 예제에서, /shorten 명령어와 Midjourney 봇이 제공한 단축된 프롬프트는 내 문제를 직접 해결하지 못했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`/shorten`와 상호 작용하면 알고리즘을 더 잘 이해할 수 있었어요. 각 토큰에 부여하는 가중치를 알면, 지나치게 강조된 단어를 제외하고 다른 곳에서 설명을 개선할 수 있었어요.\n\n예를 들어, 알고리즘이 \"사실적인\"과 \"스무디\"라는 단어에 이렇게 중요성을 부여할 것이라고는 상상하지 못했을 겁니다. 그 이미지를 만드는 과정에서 그 단어들이 장면을 잡아내는 데 꼭 필요하지 않은 것을 깨달았어요.\n\n보다 간단한 두 번째 장면에서는 /shorten을 사용하여 원래 프롬프트의 장황한 언어를 줄일 수 있었어요. 구성 요소는 훨씬 짧은 프롬프트로 보존되었어요.\n\n저는 /shorten 명령을 Midjourney 봇과의 소통 수단으로 생각해요. 어쨌든, 이것은 어떻게 특정 이미지를 생성하는지 설명해 주지 않아요. 각 토큰의 가중치를 알고 있으면, 사용자는 생성된 장면이 그들의 원래 아이디어와 일치할 때까지 프롬프트를 조정해 나갈 수 있어요.\n","ogImage":{"url":"/assets/img/2024-05-17-ImproveYourMidjourneyPromptsWithshorten_0.png"},"coverImage":"/assets/img/2024-05-17-ImproveYourMidjourneyPromptsWithshorten_0.png","tag":["Tech"],"readingTime":7},{"title":"중간 과정 스타일 참조 코드를 위한 상위 10개 컬렉션","description":"","date":"2024-05-17 20:12","slug":"2024-05-17-Top10collectionsforMidjourneystylereferencecodes","content":"\nMidjourney 스타일 참조 코드가 소개된 이후로 취미로 삼는 이들은 열정적으로 sref 랜덤 접미사 매개변수를 활용하여 다양한 스타일을 발견하고 활용하고 있어요.\n\n커뮤니티의 집합된 노력으로 무수히 많은 Midjourney 스타일이 시험되었고, 그 결과 다양한 품질의 스타일이 드러났어요. 저는 개인적으로 첫 1000개의 스타일 코드를 조사한 결과, 많은 스타일이 하위 수준이었고 이상하고 구식이며 흠집이 많은 그리고 저품질의 만화 스타일을 냈다는 것을 발견했어요. 그 수많은 스타일들은 압도적일 수 있으며, 보석을 찾기 위해서는 인내가 필요해요.\n\n일부 Midjourney 사용자들은 끊임없이 Discord에서 스크립트를 실행하여 스타일을 생성하고 시험하고 있어요. 이는 조금 집착적일 수도 있지만, 스타일 코드가 전부가 아니라는 것을 기억하는 것이 중요해요. 고품질 이미지 생성은 프롬프트 작성의 기본에 많이 의존하게 됩니다.\n\nMidjourney 애호가들의 헌신 덕분에 방대한 양의 스타일 코드가 편집되어, 이 과정은 급속히 가속화되고 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n얼마 전에는 처음 300개 스타일 코드만 보았는데, 이제는 3,000개가 넘었습니다. Midjourney가 공식적으로 오픈 소스 sref 사전 생성 계획을 발표했기 때문에 우리가 직접 sref를 찾을 필요가 없게 될 때가 머지 않았습니다.\n\n제 개인적인 검색을 토대로, 지금까지 가장 좋은 Midjourney sref 컬렉션을 선별했습니다.\n\n# 1. AI IQ 포털\n\nMidjourney 영향력 있는 인플루언서 Alie Jules가 만든 AI IQ 포털은 매일 새로운 스타일 참조 (sref)를 업데이트하는 웹사이트입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n미래의 업데이트를 통해 sref 코드를 스타일, 색상 등으로 분류하게 될 예정이며, 선호하는 스타일을 쉽게 찾을 수 있게 될 것입니다. 이 사이트를 즐겨찾기에 추가하여 계속해서 업데이트를 확인해주세요.\n\n![이미지](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_0.png)\n\n링크: [https://aiiqportal.com/midjourney-style-reference-codes/](https://aiiqportal.com/midjourney-style-reference-codes/)\n\n# 2. Tatiana Tsiguleva의 콜렉션\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n디자이너 Tatiana Tsiguleva는 Gumroad에서 무료로 다운로드할 수 있는 그녀의 검증된 srefs의 PDF를 제공합니다. 가격으로 \"0\"을 입력하고 \"이것을 원합니다\"를 클릭하여 비용없이 다운로드하실 수 있습니다.\n\n[이미지](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_1.png)\n\n링크: https://aig.gumroad.com/l/sref\n\n# 3. Dogan Ural의 컬렉션\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n디자이너 Dogan Ural은 현재 트위터 기여를 기반으로 30번의 업데이트를 통해 Notion에 Midjourney 스타일 코드의 선별된 목록을 편집하여 표시했습니다.\n\n![이미지](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_2.png)\n\n링크: [https://doganural.notion.site/530d40d0f4bb4fd1bdb0aab216c5b4d4?v=f56817e5ea3d40da89b7e1163b099040](https://doganural.notion.site/530d40d0f4bb4fd1bdb0aab216c5b4d4?v=f56817e5ea3d40da89b7e1163b099040)\n\n# 4. Charlie Q의 Magical Sref 라이브러리\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCharlie Q의 스타일 라이브러리에서 300가지 Midjourney 스타일 코드를 요약했어요. 더 많은 내용이 곧 출시될 예정이에요. 사용하기 편리한 디자인은 이미지를 클릭하면 sref 코드를 표시해줘요.\n\n![이미지](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_3.png)\n\n링크: [여기를 클릭하세요](https://sites.google.com/charlottequinndesigns.com/cqs-sref-library/mj-6-codes)\n\n# 5. GeniArt의 PDF 컬렉션\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n니코는 Midjourney 열정가인, 프랑스어 웹사이트 geniart.fr를 만들어 Midjourney 주변의 커뮤니티를 구축했습니다.\n\n최근에는 1000개의 스타일 코드 컬렉션을 PDF 형식으로 편집했습니다. PDF는 조잡하지만 각 테이블 헤더 셀에는 10개의 스타일 코드가 포함되어 있어 사용하기에는 문제가 없습니다.\n\n링크: [코드 다운로드](https://geniart.fr/upload/OrderedEntropy/OrderedEntropy_canvas_sref-style-codes.pdf)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 6. 에스레프 랜덤 채굴 링크\n\nDiscord 사용자 \"P-Logic\"은 매개변수 --v 6.0 --ar 16:9 --sw 1000 --sref random을 사용하여 11 세트의 스타일 코드를 테스트하고 Midjourney 커뮤니티와 공유했습니다.\n\n[![이미지](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_5.png)]\n\n링크: [https://discord.com/channels/662267976984297473/1238405277670178816](https://discord.com/channels/662267976984297473/1238405277670178816)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 7. 브리에르 씨의 컬렉션\n\n미드저니 열정가인 브리에르 씨는 노션에 수백 가지의 스타일 코드를 모아두었습니다. 이 코드들은 sref 랜덤에 기반한 임의로 생성된 코드들로, 숫자적인 순서가 아닙니다.\n\n![이미지](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_6.png)\n\n링크: [https://mrdelabruyere.notion.site/Midjourney-Style-Reference-43bf1f17ed9c4042a6f3b115c9dd1b39](https://mrdelabruyere.notion.site/Midjourney-Style-Reference-43bf1f17ed9c4042a6f3b115c9dd1b39)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8. Sevenstyles\n\n트위터 Midjourney 영향력 있는 사용자 브래드\\_7S는 처음 4,000개의 sref를 테스트하고 집계하여 Sevenstyles 사이트에 공유했습니다. 이 코드들은 각각 1,000개씩 4개의 분할로 나누어져 있습니다.\n\n![Sevenstyles](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_7.png)\n\n코드에 액세스하려면 사이트에서 zip 파일을 다운로드하세요. 압축을 풀면 실제 다운로드 링크를 찾을 수 있습니다. 이 링크를 브라우저에 복사하여 써드파티 다운로드 사이트로 이동할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_8.png\" />\n\n서드 파티 사이트가 고트래픽으로 다운로드 제한이 있을 수 있으므로 문제가 발생하면 새벽에 다시 다운로드를 시도해보세요. 각 zip 패키지는 대략 600MB 크기이며 해당 스타일 샘플 이미지와 스타일 코드가 포함된 텍스트 파일이 포함되어 있습니다.\n\n링크: [Seven Styles](https://sevenstyles.com/b/sevenstyles/)\n\n# 9. Collection by CreatorImpact\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n웨이드 맥매스터 디자이너가 그의 웹사이트에 'Midjourney' 스타일 코드 컬렉션을 만들었습니다. 이 컬렉션에는 처음 300개 스타일 코드와 몇 가지 무작위 코드가 포함되어 있습니다.\n\n![Midjourney Style Codes](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_9.png)\n\n링크: [Midjourney V6 스타일 코드를 위한 참조](https://creatorimpact.com/project/midjourney-v6-style-codes-for-sref/)\n\n# 10. 요시히코 나리타의 컬렉션\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일본을 좋아하는 YoshihikoNarita가 Notion에 첫 350개의 sref 코드를 요약하여 컬렉션을 만들었습니다.\n\n![image](/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_10.png)\n\n링크: [여기를 클릭하여 이동](https://tarry-blob-de9.notion.site/be0b2afd80944a5686c48d6ab33f8d88)\n\n# 요약하자면\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코드가 40억 개가 넘는 sref가 있습니다. 이를 정리하거나 모으는 것은 끝이없는 것처럼 느껴질 수 있습니다. 모든 코드가 모두의 취향에 맞을 수는 없고, 모든 스타일이 일상적으로 사용하기에 적합한 것은 아닙니다.\n\n다른 사람과 공유된 스타일 코드를 발견하면 이를 살펴보고 디스코드에서 테스트하여 여러분의 필요에 맞는지 확인한 후 컬렉션에 추가하세요.\n\nsref 코드는 스타일 경향을 나타내지만 이미지 품질을 결정하는 유일한 요소는 아닙니다. 효과적인 프롬프트와 다른 접미사 매개변수를 결합하는 것이 중요합니다.\n\n- by 公众号：二阶导\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n💡관심이 있으신가요? 저의 Midjourney 컬렉션으로 깊은 내용을 살펴보세요.\n\n## 기사가 마음에 드셨나요?\n\n만약 마음에 드셨다면:\n\n- 댓글 남기기\n- 업데이트 팔로우하기\n- 무료 이메일 알림 받기\n","ogImage":{"url":"/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_0.png"},"coverImage":"/assets/img/2024-05-17-Top10collectionsforMidjourneystylereferencecodes_0.png","tag":["Tech"],"readingTime":9}],"page":"113","totalPageCount":120,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":5},"__N_SSG":true}