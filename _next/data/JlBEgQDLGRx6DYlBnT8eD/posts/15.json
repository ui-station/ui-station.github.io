{"pageProps":{"posts":[{"title":"AWS 서버리스 간편 이해 Application Composer로 그리기","description":"","date":"2024-06-23 22:32","slug":"2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer","content":"\n![Image 1](/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_0.png)\n\n서버리스 개발자로서, 우리는 기본 코드로 서비스를 개발하며, 최근에는 코드로 인프라를 작성하지만 대부분은 AWS 리소스를 생성하기 위해 코드나 구성을 작성한다는 것을 의미합니다. 그 동안 우리가 잘못하고 있었을까요? AWS에서 서버리스 서비스를 더 나은 방식으로 구축할 수 있는 간단하고 더 좋은 방법이 있을까요?\n\n이 게시물에서는 AWS Application Composer를 사용하여 인프라 다이어그램을 그리면서 서버리스 서비스를 구축하는 방법에 대해 알아볼 수 있습니다. 저는 사용 방법, 장점 및 현재 제한 사항, 그리고 제 희망 목록을 공유하겠습니다.\n\n![Image 2](/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 블로그 포스트는 \"Ran The Builder\" 웹사이트에서 최초로 게시되었습니다.\n\n# IaC와 DevOps는 어렵습니다\n\n리소스 구성 파일이나 AWS CDK, SAM 또는 Terraform 코드를 작성하는 것은 어렵습니다. 도구를 배워야 하고, 문서를 검토하고, 해당 도구의 모베스트 프랙티스를 배워야 하며 (여기에서 내 CDK 모베스트 프랙티스 포스트를 읽어보세요), 코드 또는 구성을 작성해야 합니다.\n\n과거에는 개발자들이 Helm 차트와 같은 리소스를 빌드하는 구성 파일을 작성하는 것을 피했었습니다 (K8S의 생각에 오글거리곤 합니다), 이는 개발자들 사이에서 이러한 도구들의 채택 속도를 늦추었습니다. 그러나 서버리스와 같은 기술들과 함께 사용되는 최신 도구들인 AWS CDK, SAM과 코드로부터의 인프라스트럭처의 최근 트렌드와 같은 기술들이 등장함에 따라 개발자들은 DevOps 마인드를 수용하고 인프라 소스 코드를 작성하는 데 보다 개방적으로 대해요. 그렇지만 여전히 어려운 일입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n오늘은 새로 발견한 옵션 하나를 소개하고 싶어요 — 코드 없이도 자료 다이어그램을 그려서 리소스를 구축하는 방법입니다.\n\n# 인프라 구축을 그려볼까요?!\n\n네, 인프라 다이어그램을 그리는 거죠. 우리 모두 이런 작업을 할 때가 있죠.\n\n저는 아키텍트로서 서비스 동작을 설명하고 서비스 도메인이 어떻게 연결되는지를 나타내는 고수준 설계를 그리곤 해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n개발자들은 내 고수준 디자인을 가져와서 서비스의 실제 AWS 서버리스 리소스를 설명하는 저수준 디자인으로 바꿉니다. 우리는 Lucidchart나 Draw.io 같은 다이어그램 도구를 사용해요.\n\n서비스 인프라 다이어그램은 새로운 기능을 설명하거나 새 팀원에게 서비스를 소개하거나 서비스가 어떻게 작동하는지 명확히 이해하는 데 좋은 도구에요.\n\n하지만, 인프라 다이어그램에도 문제가 있죠.\n\n## 다이어그램은 (거의) 항상 동기화되어 있지 않아요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시간이 지남에 따라 기능이 추가되고 버그가 수정됩니다. 개발자들은 원래 디자인을 변경하며, 일부 디자인 요소는 우선 순위 때문에 제외되고 발전되지 않습니다. 꼼꼼히 작성하고 자랑스러워했던 원래 인프라 다이어그램을 기억하고 계십니까? 지금 실제 서비스 인프라와 동기화되어 있지 않으며 빠르게 가치를 잃고 있습니다.\n\n이 문제를 해결하기 위해 항상 코드 또는 인프라 구성 파일(AWS CDK, 제 경우)로 돌아갑니다. 코드는 거짓말을 하지 않지만 코드를 살펴보는 데는 시간과 기술이 필요합니다.\n\n최적의 해결책은 서비스 인프라 다이어그램을 서비스 코드와 동기화하는 것입니다. 다이어그램을 항상 업데이트해야 한다는 것을 기억하는 것은 정말 골치 아픕니다. 아무도 그렇게 하지 않습니다.\n\n다행히도 AWS는 이를 자동으로 수행하고 동시에 서비스 인프라를 구축하는 것을 더 직관적이고 재미있게 만들 수 있는 방법을 고안했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그들은 AWS 응용 프로그램 컴포저를 구축함으로써 그를 성취했어요. 이 도구를 사용하면 인프라 다이어그램을 그리고 이를 AWS SAM 또는 CloudFormation 템플릿으로 변환할 수 있어요.\n\n# AWS 응용 프로그램 컴포저\n\n몇 년 전인 2021년에, AWS는 이 문제를 해결하려고 시도한 스타트업인 \"Stackery\"를 인수했어요. 2022년 12월로 빨리 가면, AWS 응용 프로그램 컴포저가 탄생했어요.\n\n그것은 지난 2023년 3월에 GA(일반 사용 가능)로 출시되었어요. AWS re:invent 2023에서, 저의 주목을 끈 거대한 발표가 있었어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n콘솔에서 작업하고 다이어그램을 그리느라 애쓰지 않아도 됩니다. 이제 Visual Studio IDE에서 편안하게 Application Composer를 사용할 수 있어요.\n\n사용자 경험과 개발 흐름을 살펴보겠습니다.\n\n## 사용자 경험\n\n빈 프로젝트를 시작하거나 기존 프로젝트를 불러올 수 있어요. 저는 AWS Lambda Handler 쿡북 템플릿 프로젝트를 불러와서 어떻게 작동하는지 확인해 보기로 했어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n서비스 다이어그램을 제공합니다 (무엇이 웃긴 게, 인프라와 동기화가 안 맞고 CloudWatch 알람 및 대시보드가 빠져 있어요):\n\n![Service Diagram](/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_2.png)\n\n이제 기존 프로젝트 CloudFormation 템플릿으로 다이어그램을 생성해 보겠습니다. Mac에서는 'CMD + SHIFT + P'를 클릭하여 프로젝트의 CloudFormation/SAM 템플릿을 선택하세요:\n\n- AWS 툴킷 확장 프로그램을 설치했는지 확인해주세요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Diagram 3](/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_3.png)\n\n화면에 보이는 첫 번째 출력물은 많은 리소스 및 그들 사이의 연결을 포함한 다이어그램입니다. 각 리소스는 AWS 아이콘, 리소스 이름 및 현재 구성이 표시됩니다.\n\n매우 유용한 기능 중 하나는 리소스를 그룹 또는 논리적 도메인 아래로 그룹화할 수 있다는 것입니다. 나는 리소스를 CDK 구조체로 나눠놨지만 이 분할이 CloudFormation에 반영되지 않았습니다. 모든 것을 정리하는 데 2분이 걸렸고 이 아름다운 다이어그램을 얻었습니다:\n\n![Diagram 4](/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nCRUD API 그룹(API GW, 람다 함수, 두 개의 DynamoDB 테이블), CloudWatch 리소스, 그리고 AppConfig 그룹이 있습니다. 그리고 이 리소스들 사이의 모든 연결도 있습니다.\n\n처음 인상: 감명받았어요! 이 것은 매우 가독성이 좋고 다이어그램 불일치 문제를 해결합니다. 다이어그램이 일치하지 않는 문제가 기억나시나요? 여기서 한 변경사항은 SAM 또는 CloudFormation 템플릿으로 자동으로 번역되어 써집니다. 심지어 그룹까지! CloudFormation에 멋진 새로운 'ApplicationComposer' 속성이 추가되었어요.\n\n새로운 서버리스 리소스를 추가하고 구성하는 것이 얼마나 쉬운지 확인해봅시다.\n\n## 서버리스 리소스 추가하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n새로운 CloudFormation 리소스를 추가하려고 해요. 리소스 검색이 빠르고 훌륭해요; 1000개 이상의 리소스를 추가할 수 있어요. 람다 함수를 선택해보죠. 간편하게 사용할 수 있는 메뉴가 나오는데, 필수 필드와 드롭다운 목록이 모두 제공돼요:\n\n![Lambda Function](/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_5.png)\n\n일반적으로 같은 것을 위해 많은 CDK 코드를 작성하는데, 여기서는 UI에서 처리할 수 있어요.\n\n다른 리소스를 추가해보려고 해요, AppConfig 배포를요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_6.png\" />\n\n여기서 경험이 조금 더 나아질 수 있어요. 자원 구성 패널에는 미리 정의된 드롭다운 목록이 없어요. 저는 CloudFormation 구성 코드를 작성해야 해요. 일반적이지 않은 많은 자원들은 람다 함수의 것과 같은 드롭다운 목록이 아닌 설정 상자가 있어요. 모든 구성을 입력하는 구성 상자가 있어요. 이 부분은 채우기 어렵고 이해하기 어려울 수 있어요. 그러나 공식 자원 문서로의 링크와 샘플 구성 예제를 제안해주는 AI 버튼이 있어서 좋아요.\n\n전반적으로, 보다 일반적인 서버리스 자원을 사용한다면 훌륭해요. 시간이 지나면 더 많은 자원들이 VIP 대우를 받을 거예요. 모든 정직함을 다해서 말하자면, CDK가 많은 새로운 서비스에 대해 L2 구성 추상화를 제공하지 않는 것과 비교할 수 있어요.\n\n## 자원 연결\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n한 리소스에서 다른 리소스로 선을 그어서 연결할 수 있어요. 예를 들어 API 게이트웨이를 람다 함수에 연결하고, 특정 함수를 경로의 대상으로 설정할 수 있어요. 굉장히 쉽죠. 하지만 일부 리소스만 지원돼요. SQS 큐를 SNS 주제에 연결하려고 했는데, 아직 지원되지 않는다는 팝업 툴팁이 나왔어요. 지원되면 경험도 매우 간편할 거예요.\n\n![](/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_7.png)\n\n# 제한사항\n\n그래서 이미 두 가지 제한사항을 이야기했어요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 리소스 구성 - 드롭다운 기능이 부족하여 이상적인 사용자 경험은 아니지만 작동할 수 있습니다.\n- 일부 연결해야 하는 리소스를 선으로 연결하는 것이 불가능합니다.\n\n하지만 논의해야 할 다른 제한 사항이 있습니다.\n\n저는 대규모 서비스의 CloudFormation 템플릿에서 Application Composer를 사용했을 때 리소스 한도 경고 메시지를 받았습니다. 이 문제는 해결될 것입니다. 그러나 현재는 제한 사항입니다.\n\n얻은 다이어그램이 매우 크며 정렬하고 그룹화하는 데 많은 시간이 걸릴 것입니다. 또 다른 제한 사항은 CDK 지원의 부재입니다. 네, 알고 있어요. 적합한 L2 CDK 구조를 생성하는 것이 매우 어려운 일이지만 꿈은 꿀 수 있어요...\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n상기 모든 사항에도 불구하고, 해당 서비스는 밝은 미래를 가지고 있으며, 이러한 제한 사항이 해결되면 내 일상 도구의 일부가 될 것입니다.\n\n## 사용해야 하는 이유\n\nIaC 작성보다 경험이 더 좋습니까? 더 직관적이거나 심지어 재미있습니까? 네, 100%입니다; 모든 리소스가 지원되고 사용자 정의 드롭다운 선택 기능이 있을 때 특히 쉽습니다.\n\nCDK를 대체할 것인가요? 전체 CDK 지원이 있다면 아니요,하지만 문서 작성을 위한 인프라 다이어그램 작성과 같은 사용 사례가 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것은 누구를 위한 것일까요? 이는 저수준 디자인을 그리고 작은 ~ 중간 규모 서비스의 정확한 인프라 다이어그램 표현을 원하는 사람들, 빠르게 프로토타입을 구축하고 싶은 사람들, 물론 기본적인 CloudFormation 또는 SAM을 사용하는 사람들에게 적합합니다. 자원을 구축하는 데 사용하지 않더라도 인프라 다이어그램을 그리는 데 사용하는 것은 의미가 있습니다. 최근에 AWS Lambda Handler Cookbook 문서에 애플리케이션 컴포저 리소스 이미지를 추가했는데, 간단히 생성할 수 있고 서비스 설명이 더 간단해졌기 때문입니다.\n\n저는 이 서비스와 그 앞날에 흥분하고 있습니다. 이에는 발전할 여지가 많고 성장할 곳도 많이 있습니다. 사용자 경험을 개선하면 안 쓰기 힘들어질 것이며, 팀이 올바른 방향으로 나아가고 있습니다.\n\n마지막으로, App Composer 팀 중 누군가가 이것을 읽고 계신다면, 제 소망과 이 서비스에 대한 비전은 아래에 있습니다.\n\n# 애플리케이션 컴포저 소망목록\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 이 위시리스트 중 일부만 구현할 수 있다면, Application Composer는 뛰어날 것입니다:\n\n- 채팅에서 기반 구성: 우리가 IDE 내에 있는 AI 유틸리티(Amazon Q 및 CodeWhisperer)를 사용하여 아이콘을 연결하고 다이어그램 리소스를 정의해야 할 이유가 없는데요? AI 비서에게 디자인할 것을 알리고 인프라 다이어그램을 그리고 구성하도록 하고 싶습니다.\n- 자동 리소스 그룹화 — 같은 리소스 유형의 일부 유형을 그룹화합니다 — CW 대시보드, AppConfig 리소스 등등.\n- 고수준 디자인 다이어그램 옵션 — \"병합(Merge)\" 옵션을 만들어 개체를 추상화한 도메인 그룹에 병합하는 옵션을 만들어보세요. 그리고 IDE에서 중첩 스택을 별도의 다이어그램으로 시각화합시다.\n- 제약 사항 해결: L2 CDK 지원 및 상세 구성 옵션을 가진 더 많은 리소스 지원 추가.\n- Github/Jenkins 플러그인을 통한 변경 사항 시각화 — PR을 검토할 때, 인프라 구성이나 추가/제거된 리소스가 시각적으로 무엇인지 이해하고 싶습니다. 이미 'CDK notifier'와 같은 부분적인 도구들이 그런 역할을 하는데요.\n- 요소 복사-붙여넣기 — 어떤 이유에서인지 이 작업이 작동하지 않았습니다. 버그일 수도 있지만, 유사한 리소스를 빠르게 추가할 수 있으면 좋겠습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_0.png"},"coverImage":"/assets/img/2024-06-23-SimplifyingAWSServerlessDrawwithApplicationComposer_0.png","tag":["Tech"],"readingTime":11},{"title":"Telegram 봇 백엔드로 AWS Lambda 사용 하는 방법","description":"","date":"2024-06-23 22:31","slug":"2024-06-23-UsingAWSLambdaasTelegrambotbackend","content":"\nIdea부터 구현까지: 빠르고 유연하며 서버리스하고 비용 효율적인 상호 작용을 위해 AWS Lambda를 사용하여 Telegram Bot을 만들고 구성하는 방법.\n\n![이미지](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_0.png)\n\n텔레그램 봇은 두 가지 모드로 작동할 수 있습니다:\n\n- Pull 모드 — 이 모드에서는 봇이 지속적으로 실행되어 Telegram을 폴링하여 새 업데이트가 있는지 확인합니다. 새 메시지가 있으면 해당 메시지에 따라 작동합니다.\n- Webhook 모드 — 이 모드에서는 Telegram이 새 메시지가 있는 경우 지정된 URL로 HTTP 요청을 보냅니다. 그런 다음 봇은 이러한 수신 요처르 처리합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n풀 모드에서는 텔레그램을 주기적으로 폴링하는 코드가 계속 실행되어야 합니다. 이 방법은 수신 연결을 다룰 필요가 없어 안전합니다. 하지만 코드를 어딘가에 호스팅해야하는 번거로움이 있습니다.\n\n웹훅 모드에서는 비슷한 호스팅 문제가 발생합니다. 텔레그램이 요청을 보낼 수 있는 리소스가 필요합니다.\n\n왜 우리가 웹훅 API를 AWS에 호스팅하지 않을까요? 서버리스 인프라는 이러한 유형의 솔루션에 완벽히 적합합니다. 다음은 이를 설정하는 간단한 방법입니다:\n\n![사진](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 작업을 구현하려면 다음 단계를 수행해야 합니다:\n\n- 텔레그램 봇을 등록합니다.\n- 텔레그램에 의해 호출될 람다 함수를 만들고 이 함수를 REST API를 통해 \"world\"에 공개합니다.\n- HTTP API URL을 웹훅으로 등록하여 텔레그램이 람다를 호출할 수 있도록 합니다.\n- 텔레그램 HTTP API를 통해 텔레그램 요청에 응답하는 방법을 배웁니다.\n\n시작해봅시다!\n\n봇 등록하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n온라인에서 이 작업을 수행하는 방법에 대한 많은 지침이 있습니다. 간단히 말해서, @BotFather에 연락하고 /newbot 명령을 사용하여 새 봇을 만들 수 있습니다. 등록 결과로 우리 봇을 식별할 수 있는 Bot Token(특정 코드)을 받게 됩니다.\n\n람다 함수 생성하기\n추가 작업을 위해서는 AWS 계정에 액세스할 수 있어야 합니다. 아직 계정이 없다면 여기에서 계정을 만들 수 있습니다.\n\nAWS 콘솔에서 Lambda 섹션으로 이동하여 새 함수를 만듭니다. 예를 들어, 우리는 Python을 사용할 것입니다. 하지만 편리한 다른 언어로 Python을 대체할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 새 함수를 생성할 때 파이썬 블루프린트를 선택하고 함수 이름을 지정하세요:\n\n![이미지](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n함수를 만든 후, 코드를 다음과 같이 변경할 것입니다:\n\n```js\nimport json\n\ndef lambda_handler(event, context):\n    print(\"*** Received event\")\n    print(json.dumps(event))\n\n    return \"Ok\"  # Echo back the first key value\n```\n\n![Lambda Function](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_5.png)\n\n이 단계에서 람다 함수의 자리 표시자가 준비되었습니다. 그러므로 API를 생성하는 작업을 진행할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 람다를 위한 HTTP API 만들기\n\nAPI를 생성하려면 API Gateway 섹션으로 이동하고 새 HTTP API를 만드세요.\n\n![image1](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_6.png)\n\n![image2](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_7.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAPI를 생성할 때 람다 함수와의 통합을 정의하고 API 이름을 지정하세요:\n\n![이미지](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_8.png)\n\n다음 페이지에서는 리소스 경로를 변경할 것입니다.\n\n![이미지](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_9.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAPI를 생성한 후 브라우저에서 접근 가능한지 확인해보세요. API URL은 \"단계\" 섹션에서 찾을 수 있습니다(거기서 URL을 복사하세요).\n\n![API URL screenshot](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_10.png)\n\n링크를 열어보세요. Invoke URL에 /webhook 경로를 추가하는 것을 잊지 마세요.\n\n![Invoke URL screenshot](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_11.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n브라우저에서 올바르지 않은 JSON 응답에 대한 오류가 표시되지만 괜찮아요. 가장 중요한 것은 \"Ok\" 응답을 받았다는 것을 확인했다는 점이에요. 이는 람다 함수의 전반적인 인프라가 작동 준비가 되어 있다는 것을 의미해요.\n\n이제 우리는 람다 함수 자체를 수정하여 텔레그램 요청을 처리할 수 있도록 할 수 있어요.\n\n# 람다 함수 튜닝\n\n텔레그램 요청 형식은 문서에서 찾을 수 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n람다 함수로 전달되는 메시지는 다음과 유사할 것입니다:\n\n```js\n{\n  \"update_id\": 10000,\n  \"message\": {\n    \"date\": 1441645532,\n    \"chat\": {\n      \"last_name\": \"Test Lastname\",\n      \"id\": 1111111,\n      \"first_name\": \"Test\",\n      \"username\": \"Test\"\n    },\n    \"message_id\": 1365,\n    \"from\": {\n      \"last_name\": \"Test Lastname\",\n      \"id\": 1111111,\n      \"first_name\": \"Test\",\n      \"username\": \"Test\"\n    },\n    \"text\": \"/start\"\n  }\n}\n```\n\n이 단계에서 다음 필드가 중요합니다:\n\n- $.message.chat.id - 이것은 텔레그램 사용자가 우리 봇에게 무언가를 쓴 채팅 ID입니다.\n- $.message.from.username - 이것은 메시지를 보낸 사용자의 텔레그램 사용자 이름입니다.\n- $.message.text - 이것은 사용자 메시지의 텍스트입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리 람다 작업에서 이러한 필드를 로그로 기록해 보겠습니다. 이를 위해 다음과 같이 함수 코드를 다음과 같이 교체할 것입니다:\n\n```js\nimport json\n\ndef lambda_handler(event, context):\n    print(\"*** 이벤트 수신됨\")\n    print(json.dumps(event))\n\n    chat_id = event['message']['chat']['id']\n    user_name = event['message']['from']['username']\n    message_text = event['message']['text']\n\n    print(f\"*** 채팅 ID: {chat_id}\")\n    print(f\"*** 사용자 이름: {user_name}\")\n    print(f\"*** 메시지 본문: {message_text}\")\n\n    return \"Ok\"  # 첫 번째 키 값을 다시 에코합니다\n```\n\n또한 테스트를 위해 람다 함수에 전달되는 새 테스트 이벤트를 생성할 것입니다. 람다 함수는 HTTP API와 통합되어 있으므로 다음과 유사한 메시지를 수신하게 될 것입니다:\n\n```js\n{\n  \"version\": \"2.0\",\n  \"routeKey\": \"ANY /webhook\",\n  \"rawPath\": \"/webhook\",\n  \"rawQueryString\": \"\",\n  \"headers\": {\n    \"accept\": \"*/*\",\n    \"accept-encoding\": \"gzip, deflate, br\",\n    \"content-length\": \"394\",\n    \"content-type\": \"application/json\",\n    \"host\": \"ng79a68gph.execute-api.eu-central-1.amazonaws.com\",\n    \"postman-token\": \"cbdf81be-3707-4383-b5b4-0d6fc71940e6\",\n    \"user-agent\": \"PostmanRuntime/7.39.0\",\n    \"x-amzn-trace-id\": \"Root=1-6676d931-3d6752cf6f055cd810e8f4e2\",\n    \"x-forwarded-for\": \"185.244.156.97\",\n    \"x-forwarded-port\": \"443\",\n    \"x-forwarded-proto\": \"https\"\n  },\n  \"requestContext\": {\n    \"accountId\": \"126459111222\",\n    \"apiId\": \"ng79a68gph\",\n    \"domainName\": \"ng79a68gph.execute-api.eu-central-1.amazonaws.com\",\n    \"domainPrefix\": \"ng79a68gph\",\n    \"http\": {\n      \"method\": \"POST\",\n      \"path\": \"/webhook\",\n      \"protocol\": \"HTTP/1.1\",\n      \"sourceIp\": \"185.244.156.97\",\n      \"userAgent\": \"PostmanRuntime/7.39.0\"\n    },\n\n    ... 중략 ...\n\n  },\n  \"body\": \"{\\r\\n  \\\"update_id\\\": 10000,\\r\\n  \\\"message\\\": {\\r\\n    \\\"date\\\": 1441645532,\\r\\n    \\\"chat\\\": {\\r\\n      \\\"last_name\\\": \\\"Test Lastname\\\",\\r\\n      \\\"id\\\": 1111111,\\r\\n      \\\"first_name\\\": \\\"Test\\\",\\r\\n      \\\"username\\\": \\\"Test\\\"\\r\\n    },\\r\\n    \\\"message_id\\\": 1365,\\r\\n    \\\"from\\\": {\\r\\n      \\\"last_name\\\": \\\"Test Lastname\\\",\\r\\n      \\\"id\\\": 1111111,\\r\\n      \\\"first_name\\\": \\\"Test\\\",\\r\\n      \\\"username\\\": \\\"Test\\\"\\r\\n    },\\r\\n    \\\"text\\\": \\\"/start\\\"\\r\\n  }\\r\\n}\",\n  \"isBase64Encoded\": false\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 메시지를 테스트 예제로 설정해보고 얻는 결과를 확인해봅시다:\n\n![Image 1](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_12.png)\n\n![Image 2](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_13.png)\n\n좋아요! 메시지에서 필요한 필드를 성공적으로 읽었습니다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희 함수는 지금부터 텔레그램에서 메시지를 수신할 수 있습니다. 다음으로 응답하는 방법을 알아보아야 합니다. 이를 위해 우리는 텔레그램 API의 sendMessage 메서드를 사용할 것입니다.\n\n지정된 chat_id로 답장 메시지를 보내는 람다 함수에 메소드를 추가해봅시다. 함수 코드를 다시 업데이트하세요. 반드시 \"your-bot-token\"을 @BotFather에서 받은 텔레그램 봇의 토큰으로 대체하는 것을 잊지 마세요.\n\n```js\nimport json\nimport urllib3\n\nBOT_TOKEN=\"your-bot-token\"\n\n\ndef sendReply(chat_id, message):\n    reply = {\n        \"chat_id\": chat_id,\n        \"text\": message\n    }\n\n    http = urllib3.PoolManager()\n    url = f\"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage\"\n    encoded_data = json.dumps(reply).encode('utf-8')\n    http.request('POST', url, body=encoded_data, headers={'Content-Type': 'application/json'})\n\n    print(f\"*** Reply : {encoded_data}\")\n\n\ndef lambda_handler(event, context):\n    body = json.loads(event['body'])\n\n    print(\"*** Received event\")\n\n    chat_id = body['message']['chat']['id']\n    user_name = body['message']['from']['username']\n    message_text = body['message']['text']\n\n    print(f\"*** chat id: {chat_id}\")\n    print(f\"*** user name: {user_name}\")\n    print(f\"*** message text: {message_text}\")\n    print(json.dumps(body))\n\n    reply_message = f\"Reply to {message_text}\"\n\n    sendReply(chat_id, reply_message)\n\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Message processed successfully')\n    }\n```\n\n그 결과, 우리 함수는 텔레그램에서 어떤 것이라도 답장할 수 있어야 합니다. 응답은 사용자의 메시지 뒤에 \"Reply to\" 문자열이어야 합니다. 이 동작은 나중에 변경해야 할 것이지만, 지금은 전체 웹훅 봇 인프라를 구축하는 데 충분합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n텔레그램 봇을 텔레그램에 연결해 봅시다.\n\n텔레그램에 연결하기\n\n텔레그램에 연결하려면 다음 주소로 요청을 보내야 합니다:\n\n```js\nhttps://api.telegram.org/bot{bot_token}/setWebhook?url={webhook_endpoint}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 사용할 수 있습니다:\n\n- 'bot_token'은 이미 사용한 봇 토큰입니다.\n- 'webhook_endpoint'은 우리 API의 URL입니다.\n\n웹훅 URL을 설정한 후의 응답:\n\n```js\n{\n    \"ok\": true,\n    \"result\": true,\n    \"description\": \"웹훅이 설정되었습니다\"\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n연결을 확인하려면 다음과 같이 요청을 할 수 있어요:\n\n```js\nhttps://api.telegram.org/bot{bot_token}/getWebhookInfo\n```\n\n응답은 아래와 비슷하게 보일 거에요:\n\n```js\n{\n    \"ok\": true,\n    \"result\": {\n        \"url\": \"{webhook_endpoint}\",\n        \"has_custom_certificate\": false,\n        \"pending_update_count\": 0,\n        \"max_connections\": 40,\n        \"ip_address\": \"...\"\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리 봇에 메시지를 전송해 보도록 해요:\n\n![image](/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_14.png)\n\n잘 동작하네요!\n\nLambda 함수의 작동 로그를 CloudWatch에서 확인할 수 있어요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 AWS Lambda를 Telegram 봇의 백엔드로 사용하는 방법에 대한 이미지입니다.\n\n또한 Lambda 함수가 예상대로 작동하지 않거나 Telegram에서 응답이 없는 경우 디버깅 도구로 매우 유용한 CloudWatch를 사용할 수 있습니다. CloudWatch에서 메시지는 약간의 지연(1~3분)이 발생한다는 점을 참고해 주세요.\n","ogImage":{"url":"/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_0.png"},"coverImage":"/assets/img/2024-06-23-UsingAWSLambdaasTelegrambotbackend_0.png","tag":["Tech"],"readingTime":14},{"title":"Terraform으로 AWS 자원을 올바르게 태깅하는 방법","description":"","date":"2024-06-23 22:28","slug":"2024-06-23-TaggingAWSresourcestherightwayusingTerraform","content":"\n![Tagging AWS resources the right way using Terraform](/assets/img/2024-06-23-TaggingAWSresourcestherightwayusingTerraform_0.png)\n\n# 🔖 소개:\n\nAWS 리소스를 조직화하고 비용을 추적하는 것은 특히 인프라가 확장됨에 따라 어려울 수 있습니다.\n\n리소스에 태그를 붙이는 것은 간단하지만 효과적으로 수행하려면 최선의 방법을 따라야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 블로그 포스트에서는 인프라스트럭처 코드(IaC) 도구 Terraform을 사용하여 AWS 리소스에 태그를 달는 방법을 안내해 드리겠습니다.\n\n# AWS 리소스에 태그 붙이기 소개:\n\nAWS 리소스에 태그를 붙이는 것은 조직화되고 비용 효율적인 클라우드 인프라를 유지하는 데 중요합니다.\n\n태그는 환경, 애플리케이션, 팀 등과 같은 기준에 따라 리소스를 분류하고 관리하는 키-값 쌍입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일관된 태깅은 리소스 조직, 비용 할당, 자동화, 보안 및 라이프사이클 관리와 같은 혜택을 제공합니다.\n\nTerraform에서는 프로비저닝하는 동안 리소스에 태그를 달 수 있습니다. 예를 들어, 환경 및 팀 태그와 함께 S3 버킷에 태그를 달기 위해 다음과 같이 할 수 있습니다:\n\n```js\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"my-bucket\"\n  tags = {\n    Environment = \"Production\"\n    Team = \"DevOps\"\n  }\n}\n```\n\n또한 모든 리소스에 적용되는 공급자 수준의 기본 태그를 정의할 수도 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n공급자 \"aws\" {\n  default_tags {\n    tags = {\n      Environment = \"Production\"\n      ManagedBy = \"Terraform\"\n    }\n  }\n}\n```\n\n# 리소스 레벨에서 기본 태그 재정의하기:\n\ndefault_tags 블록을 사용하여 공급자 수준에서 기본 태그를 정의하면 모든 리소스에 자동으로 일반적인 태그가 적용되어 일관성을 유지하고 수동 작업을 줄일 수 있습니다.\n\n기본 태그의 장점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 일관성: 모든 리소스에 일관된 태그가 적용되도록 보장합니다.\n- 수동 작업 최소화: 리소스 간 반복되는 태그 정의를 피합니다.\n\n예를 들어 AWS 프로바이더에서 기본 태그를 설정하는 방법:\n\n```js\nprovider \"aws\" {\n  default_tags {\n    tags = {\n      Environment = \"Production\"\n      ManagedBy   = \"Terraform\"\n    }\n  }\n}\n```\n\n기본 태그를 재정의하거나 추가 태그를 추가하는 방법은 리소스 레벨에서 태그 인수를 지정하여 수행할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 인수는 제공자 수준에서 정의된 기본 태그보다 우선합니다.\n\n```js\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"my-bucket\"\n\n  # 기본 환경 태그를 재정의하고 목적 태그 추가하기\n  tags = {\n    Environment = \"Staging\"\n    Purpose     = \"Data Processing\"\n  }\n}\n```\n\n이 예제에서는 환경 태그가 Staging 값으로 재정의되고, 목적 태그가 특히 해당 S3 버킷 리소스에 추가됩니다.\n\nManagedBy 기본 태그는 여전히 적용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n자원 수준 태그 사용 사례\n\n- 환경별 태그 (dev, staging, prod 등)\n- 애플리케이션/프로젝트별 태그\n- 자원별 메타데이터 태그 (예: 목적, 소유자, 만료일)\n- 데이터 민감성에 따른 규정 준수 또는 규제 태그\n- 특정 자원에 대한 비용 할당 태그\n\n자원 수준에서 태그 재정의를 허용함으로써 기본 태그의 이점을 유지하면서 각 자원의 특정 요구 사항에 따라 태그를 유연하게 사용할 수 있습니다.\n\n# 유연한 태깅을 위한 변수와 함수 사용:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테라폼을 사용하면 태그를 변수로 정의하고 merge()와 같은 함수를 사용하여 다른 태그와 결합하여 재사용성과 유연성을 높일 수 있습니다.\n\n변수로 태그를 정의하기:\n\n```js\nvariable \"default_tags\" {\n  default = {\n    Environment = \"Production\"\n    ManagedBy   = \"Terraform\"\n  }\n}\n```\n\nmerge() 함수를 사용하여 태그를 결합하는 방법:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c94855ba95c71c99\"\n  instance_type = \"t2.micro\"\n\n  tags = merge(\n    var.default_tags,\n    {\n      Name    = \"ExampleInstance\"\n      Project = \"MyApp\"\n    }\n  )\n}\n```\n\nmerge() 함수는 default_tags 변수와 추가적인 리소스별 태그를 결합하여 모든 네 가지 태그가 EC2 인스턴스에 적용되도록 합니다.\n\n# 특별한 경우 처리:\n\n일부 AWS 리소스는 특정한 태깅 구성이 필요하거나 태그 적용 방법에 제한이 있는 경우가 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n태깅 자동 스케일링 그룹:\n\n자동 스케일링 그룹 ASG 및 시작 템플릿 LT를 올바르게 태그 지정하는 것이 까다로울 수 있습니다.\n\n올바른 구성이 없으면 ASG 및 LT에 의해 시작된 EC2 인스턴스 및 연결된 저장소 볼륨에는 기본 태그가 첨부되지 않을 수 있습니다.\n\nASG는 propagate_at_launch 태그 구성이 필요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n리소스 \"aws_autoscaling_group\" \"example\" {\n  # ...\n  tag {\n    key                 = \"Environment\"\n    value               = \"Production\"\n    propagate_at_launch = true\n  }\n}\n```\n\n런치 템플릿 태깅:\n\n런치 템플릿은 tag_specifications 구성을 필요로 합니다:\n\n```js\n리소스 \"aws_launch_template\" \"example\" {\n  # ...\n\n tag_specifications {\n    resource_type = \"instance\"\n    tags = {\n      Environment = \"Production\"\n      ManagedBy   = \"Terraform\"\n    }\n  }\n  tag_specifications {\n    resource_type = \"volume\"\n    tags = {\n      Persistence = \"Permanent\"\n    }\n  }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nEBS 볼륨 태그 설정하기:\n\n테라폼을 사용하여 Elastic Compute (EC2) 인스턴스를 생성할 때, EC2에 연결된 Elastic Block Store (EBS) 볼륨은 자동으로 태그가 되지 않습니다. 태그되지 않은 EBS 볼륨은 관리가 어렵습니다.\n\n연결된 EBS 스토리지 볼륨에 EC2 기본 태그를 할당하려면 aws_instance의 volume_tags를 사용하세요.\n\n```js\nresource \"aws_instance\" \"example\" {\n  # ...\n\n volume_tags = {\n    Name        = \"DataVolume\"\n    Persistence = \"Permanent\"\n  }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기타 특수 사례:\n\n일부 리소스는 AMI, NAT 게이트웨이 또는 VPC 엔드포인트와 같이 특정 태그 지정 요구 사항이나 제한 사항이 있을 수 있습니다.\n\n다양한 리소스 유형에 대한 태그 구성에 대한 최신 지침은 항상 Terraform 제공 업체 문서를 참조하십시오.\n\n# 흔한 실수 피하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n일관되지 않은 태그 명명 규칙:\n\nappid, app_role 및 AppPurpose과 같은 일관되지 않은 태그 키를 사용하면 태그를 사용하고 관리하기 어려워집니다.\n\n```js\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"my-bucket\"\n  tags = {\n    appid     = \"myapp\"\n    app_role  = \"data-processing\"\n    AppPurpose = \"logs\"\n  }\n}\n```\n\n대신, 태그 키 명명을 명확히 정의하고 그 규칙을 준수하도록 유도하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모든 AWS 리소스를 태그하지 않는 경우, EBS 볼륨과 같은 보조 또는 보완 리소스를 포함해서 태그하지 않는 것은 완전한 시각성과 비용 추적을 할 수 없게 됩니다.\n\n```js\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c94855ba95c71c99\"\n  instance_type = \"t2.micro\"\n  tags = {\n    Environment = \"Production\"\n  }\n}\n```\n\n동일한 기본 및 리소스 태그 문제:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ndefault_tags 및 리소스 tags에 동일한 tag 키 및 값이 있는 경우, Terraform에서 오류가 발생하여 태그를 중복으로 지우거나 우회 방법을 사용해야 합니다.\n\n```js\nprovider \"aws\" {\n  default_tags {\n    tags = {\n      Name = \"Example\"\n    }\n  }\n}\n\nresource \"aws_vpc\" \"example\" {\n  tags = {\n    Name = \"Example\" # 오류: 태그가 동일함\n    }\n}\n```\n\n부분적인 태그 일치를 위한 영구 차이:\n\ndefault_tags 및 리소스 tags가 일부 일치하고 다른 태그가 있는 경우, Terraform은 일치하는 태그를 업데이트하려고 계획할 때마다 영구적인 차이를 표시하여 우회 방법이 필요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nprovider \"aws\" {\n  default_tags {\n    tags = {\n      Match1 = \"A\"\n      Match2 = \"B\"\n      NoMatch = \"X\"\n    }\n  }\n}\n\nresource \"aws_vpc\" \"example\" {\n  tags = {\n    Match1 = \"A\" # Perpetual diff trying\n    Match2 = \"B\" # to update these\n    NoMatch = \"Y\"\n  }\n}\n```\n\n인프라스트럭처 드리프트와 태그 손실:\n\n외부에서 Terraform 이외의 방법을 사용하여 리소스를 수정할 때 인프라스트럭처 드리프트로 인해 태그가 손실됩니다. IaC를 일관되게 사용하면이 문제를 완화할 수 있습니다.\n\n# Best Practices and Tips:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n명확한 태깅 전략과 명명 규칙을 수립해야 합니다:\n\n인프라 전반에 걸쳐 사용할 일관된 태그 키와 명명 규칙을 정의하세요.\n\n```js\nvariable \"tag_names\" {\n  default = {\n    environment = \"환경\"\n    application = \"응용 프로그램\"\n    team        = \"팀\"\n    costcenter  = \"비용 센터\"\n  }\n}\n```\n\n리소스를 프로비저닝할 때 (나중에가 아니라) 태그를 추가하세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n리소스를 프로비저닝하는 과정에서 태그를 적용하세요. 이렇게 하면 시작부터 일관된 태깅이 가능합니다.\n\n```js\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"my-bucket\"\n  tags = {\n    (var.tag_names.environment) = \"Production\"\n    (var.tag_names.application) = \"MyApp\"\n  }\n}\n```\n\n태그를 정기적으로 검토하고 감사하세요:\n\n주기적으로 리소스 태그를 검토하고 감사하여 태깅 전략을 준수하며 누락된 태그 또는 잘못된 태그를 식별합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로비저닝 중에 가능한 경우 태그 자동 적용을 자동화하세요:\n\n테라폼의 default_tags, 변수, 및 기능과 같은 기능을 활용하여 프로비저닝 중에 태그를 자동으로 적용하여 수동 노력을 줄이고 일관성을 유지하세요.\n\n# AWS 리소스 그룹 및 태그 편집기:\n\n모든 리전에 있는 모든 AWS 리소스에서 team=`platform engineering` 태그가 있는 리소스를 찾아볼 수 있다면 어떨까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAWS 리소스 그룹 및 태그 편집기는 여러 AWS 리소스 및 지역에 걸쳐 태그를 효과적으로 관리할 수 있는 강력한 도구입니다.\n\n리소스 그룹:\n\n리소스 그룹은 공유된 태그를 기반으로 AWS 리소스 모음을 구성하고 관리할 수 있는 중앙화된 방법을 제공합니다. 리소스 그룹을 사용하면 다음과 같은 작업을 수행할 수 있습니다:\n\n- 특정 태그(예: team=`platform engineering`)가 적용된 지역 전체의 리소스를 찾을 수 있습니다.\n- 태그가 누락되었거나 잘못된 태그 값이 있는 리소스를 식별할 수 있습니다.\n- 리소스 그룹 멤버십에 따라 인스턴스 시작/중지 또는 구성 적용과 같은 작업을 자동화할 수 있습니다.\n- 그룹 내에서 리소스 상태, 비용 및 구성에 대한 종합적인 정보를 확인할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n태그 편집기:\n\n태그 편집기는 지원되는 AWS 서비스 및 지역 전체에 걸쳐 대량 태깅 작업을 가능하게 하는 리소스 그룹의 구성 요소입니다. 태그 편집기를 사용하면 다음을 수행할 수 있습니다:\n\n- 리소스 유형 및 기존 태그에 기반한 리소스 검색을 통해 \"팀=`플랫폼 엔지니어링`인 모든 EC2 인스턴스 찾기\"와 같은 쿼리를 실행할 수 있습니다.\n- 여러 리소스에 대해 태그를 추가, 수정 또는 제거하여 태깅 노력을 효율화할 수 있습니다.\n- 변경 사항을 적용하기 전에 미리 보기를 통해 정확성을 확인하고 의도하지 않은 수정을 피할 수 있습니다.\n- 태그 기반의 액세스 제어 정책을 사용하여 태그 값에 기반한 리소스 액세스를 관리할 수 있습니다.\n\n# 🔚 결론:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마크다운 형식으로 테이블 태그를 써야 해요.\n\nAWS 설정이 조직적이고 비용 효율적으로 이루어지려면, Terraform의 태깅 도구를 사용하는 방법과 일반적인 실수를 피하는 법을 꼭 숙지해야 해요.\n\n읽어주셔서 감사해요! AWS 리소스에 태깅하는 방법에 대해 무언가 배웠으면 좋겠네요!\n\n다음에 또 만나요 🇵🇸 🎉\n\n<img src=\"/assets/img/2024-06-23-TaggingAWSresourcestherightwayusingTerraform_1.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n읽어 주셔서 감사합니다!! 🙌🏻😁📃 다음 블로그에서 만나요.🤘🇵🇸\n\n🚀 끝까지 함께해 줘서 감사합니다. 이 블로그에 대한 질문/피드백이 있으시면 언제든지 연락해 주세요:\n\n♻️ 🇵🇸LinkedIn: https://www.linkedin.com/in/rajhi-saif/\n\n♻️🇵🇸 Twitter: https://twitter.com/rajhisaifeddine\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제공해주셔서 감사합니다 ✌🏻\n\n# 🔰 계속해서 학습해요!! 지식을 나눠요 !! 🔰\n\n# 참고 문헌:\n","ogImage":{"url":"/assets/img/2024-06-23-TaggingAWSresourcestherightwayusingTerraform_0.png"},"coverImage":"/assets/img/2024-06-23-TaggingAWSresourcestherightwayusingTerraform_0.png","tag":["Tech"],"readingTime":14},{"title":"서버리스 EventBridge Pipes로 이벤트 처리하는 방법 최신 2024","description":"","date":"2024-06-23 22:26","slug":"2024-06-23-ServerlessEventBridgePipes","content":"\n<img src=\"/assets/img/2024-06-23-ServerlessEventBridgePipes_0.png\" />\n\n## 안내\n\n✔️ Amazon EventBridge Pipes 및 그들이 무엇인지에 대해 논의합니다.\n✔️ Python 및 AWS CDK를 사용한 예제를 통해 안내합니다.\n\n# 소개 👋🏽\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기사에서는 AWS CDK와 Python을 사용하여 구축된 허구의 치과 앱을 만들어가면서 Amazon EventBridge Pipes에 대해 다뤄볼 것입니다.\n\n![이미지](/assets/img/2024-06-23-ServerlessEventBridgePipes_1.png)\n\n'LJ 치과 의사' 앱은 사람들이 가장 가까운 치과 의사와 예약을 잡을 수 있는 기능을 제공합니다.\n\n![이미지](/assets/img/2024-06-23-ServerlessEventBridgePipes_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그들이 이미 방문한 적이 있는 경우에는 이메일, SMS 또는 통신 없음을 보내기 전에 선호하는 연락 방법을 확인합니다. 이 모두는 Amazon EventBridge Pipes를 사용하여 처리됩니다.\n\n![이미지](/assets/img/2024-06-23-ServerlessEventBridgePipes_3.png)\n\n이 기사의 전체 코드 예제는 여기에서 확인할 수 있습니다:\n\n# 우리가 무엇을 만들고 있나요? 🛠️\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n환자들이 온라인으로 진료 예약을 할 수 있도록 다음 아키텍처를 사용할 예정입니다:\n\n![아키텍처](/assets/img/2024-06-23-ServerlessEventBridgePipes_4.png)\n\n환자들이 다음을 사용하여 진료를 예약할 수 있습니다:\n\n- Amazon API Gateway REST API를 사용하여 온라인으로 진료 예약을 합니다.\n- Lambda 함수가 진료 상세 내용을 DynamoDB 테이블에 기록합니다.\n- 우리는 DynamoDB 스트림을 사용하여 테이블의 변경 사항을 감지하고 레코드가 생성되었을 경우에만 필터링하여 Amazon EventBridge Pipes를 통해 해당 스트림을 소스로 사용합니다.\n- 일치하는 레코드가 연락처 선호도 테이블에 있는지 확인하는 Lambda 함수를 호출하여 스트림 레코드에 선호도를 추가합니다.\n- 마지막으로, Amazon EventBridge Pipes의 대상은 SQS로 설정되어 진료를 처리하기 위해 준비된 예약을 저장합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n👇 더 진전하기 전에 — 향후 블로그 게시물과 서버리스 뉴스를 만나보기 위해 LinkedIn에 연락해 주세요 https://www.linkedin.com/in/lee-james-gilmore/\n\n![ServerlessEventBridgePipes_5](/assets/img/2024-06-23-ServerlessEventBridgePipes_5.png)\n\n# Amazon EventBridge Pipes란 무엇인가요?\n\nAmazon EventBridge Pipes는 옵션 변환, 필터 및 풍부한 단계를 통해 이벤트 생성자와 소비자 간의 포인트 투 포인트 통합을 생성하는 데 도움을 줍니다. EventBridge Pipes를 사용하면 이벤트 중심 애플리케이션을 구축할 때 필요한 통합 코드 양을 줄이고 유지할 수 있습니다. 아래 다이어그램은 우리 예시를 위해 이를 보여줍니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 다이어그램에서 알 수 있듯이 다음이 있습니다:\n\n- 소스로 DynamoDB 스트림을 사용합니다.\n- 새로 삽입된 레코드만 받도록 추가 필터링을 수행합니다(예: 삭제 또는 업데이트 제외).\n- 별도의 데이터베이스에서 연락처 정보를 읽는 enrichment Lambda 함수를 통해 스트림에서 약속 데이터를 추가 정보로 향상시킵니다.\n- 최종적으로 약속 레코드를 더 처리하기 위해 SQS 대기열로 설정된 대상이 있습니다.\n\n참고로 아래에 표시된 다양한 서비스와 구성을 사용할 수 있습니다:\n\n![이미지](/assets/img/2024-06-23-ServerlessEventBridgePipes_6.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 주요 코드 설명하기 👨‍💻\n\n이제 몇 가지 주요 코드에 대해 이야기해봅시다.\n\n아래에서 볼 수 있는대로 CDK 애플리케이션을 상태(Stateful) 및 상태 없음(Stateless) 리소스(스택)로 분리하기 시작합니다:\n\n```js\n#!/usr/bin/env python3\nimport os\n\nimport aws_cdk as cdk\nfrom stateful.stateful import DentistsStatefulStack\nfrom stateless.stateless import DentistsStatelessStack\n\napp = cdk.App()\n\n# 앱을 상태(Stateful) 및 상태 없음(Stateless) 리소스로 분리합니다\nDentistsStatefulStack(app, \"DentistsStatefulStack\")\nDentistsStatelessStack(app, \"DentistsStatelessStack\")\n\napp.synth()\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nStateful 스택을 먼저 살펴 보면, 두 개의 DynamoDB 테이블을 설정했음을 알 수 있습니다. 하나는 약속을, 다른 하나는 선호하는 연락처 세부 정보를 저장하는 테이블입니다:\n\n```js\nfrom aws_cdk import CfnOutput, RemovalPolicy, Stack\nfrom aws_cdk import aws_dynamodb as dynamodb\nfrom constructs import Construct\n\nclass DentistsStatefulStack(Stack):\n\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        # 약속을 저장하는 DynamoDB 테이블 추가 및 스트림 활성화\n        table = dynamodb.Table(\n            self, 'DentistTable',\n            billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST,\n            table_name='DentistTable',\n            stream=dynamodb.StreamViewType.NEW_IMAGE,\n            removal_policy=RemovalPolicy.DESTROY,\n            partition_key=dynamodb.Attribute(\n                name='id',\n                type=dynamodb.AttributeType.STRING\n            )\n        )\n\n        # 이메일 주소를 기반으로 하는 연락 선호도 DynamoDB 테이블 추가\n        contact_table = dynamodb.Table(\n            self, 'DentistContactsTable',\n            billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST,\n            table_name='DentistContactsTable',\n            removal_policy=RemovalPolicy.DESTROY,\n            partition_key=dynamodb.Attribute(\n                name='id',\n                type=dynamodb.AttributeType.STRING\n            )\n        )\n\n        # 테이블 이름을 위한 스택 출력 추가\n        CfnOutput(\n            self, 'DentistDynamoDBTableName',\n            value=table.table_name,\n            description='DynamoDB 테이블 이름',\n            export_name='DentistDynamoDBTableName'\n        )\n\n        # 연락처 테이블 이름을 위한 스택 출력 추가\n        CfnOutput(\n            self, 'DentistContactDynamoDBTableName',\n            value=contact_table.table_name,\n            description='연락 선호도 DynamoDB 테이블 이름',\n            export_name='DentistContactDynamoDBTableName'\n        )\n\n        # 약속 테이블의 테이블 스트림 ARN을 위한 스택 출력 추가\n        CfnOutput(\n            self, 'DentistDynamoDBTableStreamArn',\n            value=table.table_stream_arn,\n            description='DynamoDB 테이블 스트림 ARN',\n            export_name='DentistDynamoDBTableStreamArn'\n        )\n```\n\n이제 Stateful 리소스가 설정됐으므로, Stateless 스택에서 먼저 약속을 생성하는 람다 함수를 생성합니다:\n\n```js\n# 약속을 생성하는 람다 함수 생성\ncreate_appointment_lambda = aws_lambda.Function(\n    self, 'CreateAppointment',\n    runtime=aws_lambda.Runtime.PYTHON_3_12,\n    handler='create_appointment.handler',\n    code=aws_lambda.Code.from_asset(os.path.join(DIRNAME, 'src')),\n    function_name='CreateAppointment',\n    environment={\n        'dynamodb_table': dynamodb_table_name,\n    },\n)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nLambda 함수에 추가적으로 두 번째 Lambda 함수를 추가합니다. 이 함수는 DynamoDB 스트림이 제공하는 데이터를 풍부하게 하는 데 사용될 것입니다:\n\n```js\n# 연락처 세부 정보를 검색하는 람다 함수 생성\nget_contact_details = aws_lambda.Function(\n    self, 'GetContactDetails',\n    runtime=aws_lambda.Runtime.PYTHON_3_12,\n    handler='get_contact_details.handler',\n    code=aws_lambda.Code.from_asset(os.path.join(DIRNAME, 'src')),\n    function_name='GetContactDetails',\n    environment={\n        'contacts_dynamodb_table': contacts_dynamodb_table_name,\n    },\n)\n```\n\n다음으로, 우리의 파이프 대상이 될 Amazon SQS 대기열을 추가합니다:\n\n```js\n# AppointmentsQueue로 메시지를 보낼 SQS 대기열 생성\nsqs_queue = sqs.Queue(\n    self, 'AppointmentsQueue',\n    queue_name='AppointmentsQueue',\n    removal_policy=RemovalPolicy.DESTROY\n)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그럼 Amazon EventBridge 파이프 자체에 대한 IAM 정책을 만들어서 원본, 보강 및 대상 자원과 연결할 수 있도록합니다.\n\n```js\n# 파이프 원본(다이나모DB 스트림)용 파이프 정책과 역할 생성\npipe_source_policy = iam.PolicyStatement(\n    actions=[\n        'dynamodb:DescribeStream',\n        'dynamodb:GetRecords',\n        'dynamodb:GetShardIterator',\n        'dynamodb:ListStreams'\n    ],\n    resources=[stream_arn],\n    effect=iam.Effect.ALLOW\n)\n\n# 파이프 대상(SQS)으로 메시지를 게시하는 것을 허용하는 대상 정책 작성\npipe_target_policy = iam.PolicyStatement(\n    actions=['sqs:SendMessage'],\n    resources=[sqs_queue.queue_arn],\n    effect=iam.Effect.ALLOW\n)\n\n# 파이프가 람다 기능을 호출할 수 있도록 하는 보강 정책 생성\npipe_enrichment_policy = iam.PolicyStatement(\n    actions=['lambda:InvokeFunction'],\n    resources=[get_contact_details.function_arn],\n    effect=iam.Effect.ALLOW\n)\n\n# 파이프 역할 생성\npipe_role = iam.Role(self, 'PipeRole',\n    assumed_by=iam.ServicePrincipal('pipes.amazonaws.com'),\n)\n\n# 역할에 세 가지 정책 추가\npipe_role.add_to_policy(pipe_source_policy)\npipe_role.add_to_policy(pipe_target_policy)\npipe_role.add_to_policy(pipe_enrichment_policy)\n```\n\n이제 다음과 같은 코드를 사용하여 파이프를 생성할 수 있습니다:\n\n```js\n# 다이나모DB의 새 항목에 대한 필터가 있는 이벤트브릿지 파이프 생성\npipe = pipes.CfnPipe(self, 'Pipe',\n    role_arn=pipe_role.role_arn,\n    source=stream_arn,\n    log_configuration=pipes.CfnPipe.PipeLogConfigurationProperty(\n        cloudwatch_logs_log_destination=pipes.CfnPipe.CloudwatchLogsLogDestinationProperty(\n            log_group_arn=log_group.log_group_arn\n        ),\n        level='INFO',\n    ),\n    name='DentistPipe',\n    source_parameters=pipes.CfnPipe.PipeSourceParametersProperty(\n        dynamo_db_stream_parameters=pipes.CfnPipe.PipeSourceDynamoDBStreamParametersProperty(\n            starting_position='LATEST',\n        ),\n        filter_criteria=pipes.CfnPipe.FilterCriteriaProperty(\n            filters=[pipes.CfnPipe.FilterProperty(\n                pattern=json.dumps({'eventName': [{ 'prefix': 'INSERT' }])\n            )]\n        ),\n    ),\n    enrichment=get_contact_details.function_arn,\n    target=sqs_queue.queue_arn,\n)\npipe.apply_removal_policy(RemovalPolicy.DESTROY)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재 인프라가 모두 설정되어 있지만 'create_appointment.py' 파일을 시작으로 Lambda 함수 코드를 간단히 살펴보겠습니다.\n\n```js\nimport json\nimport os\nimport uuid\nfrom http import HTTPStatus\n\nimport boto3\nfrom boto3.dynamodb.types import TypeSerializer\n\ndynamodb_table = os.getenv('dynamodb_table')\ndynamodb_client = boto3.client('dynamodb')\nserializer = TypeSerializer()\n\ndef handler(event, context):\n    try:\n        # 이벤트에서 요청 데이터를 구문 분석하고 본문을 가져옵니다.\n        request_data = json.loads(event['body'])\n\n        # uuidv4를 사용하여 새로운 약속 ID를 추가합니다.\n        request_data['id'] = str(uuid.uuid4())\n\n        # 페이로드를 dynamodb 형식으로 직렬화합니다.\n        appointment_data = {k: serializer.serialize(v) for k, v in request_data.items()}\n\n        # 항목을 dynamodb 테이블에 추가합니다.\n        dynamodb_client.put_item(TableName=dynamodb_table, Item=appointment_data)\n\n        body = {\n            'message': request_data,\n            'statusCode': HTTPStatus.CREATED,\n        }\n\n        # 응답을 올바른 형식으로 API Gateway로 전송합니다.\n        response = {\n            'statusCode': HTTPStatus.CREATED,\n            'body': json.dumps(body, indent=2),\n            'headers': {\n                'content-type': 'application/json',\n            },\n        }\n\n    except Exception as e:\n        response = {\n            'statusCode': HTTPStatus.INTERNAL_SERVER_ERROR.value,\n            'body': f'Exception={e}',\n        }\n\n    return response\n```\n\n위 코드에서 볼 수 있듯, API Gateway 이벤트에서 약속을 가져와 새로운 고유 ID(uuid)를 추가하고 레코드를 약속 테이블에 기록하는 기본 함수를 생성합니다.\n\n테이블에 레코드가 추가되면 스트림이 호출되어 모든 레코드 변경에 대해 파이프가 변경 사항을 소스로 가져올 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그 다음으로, 파이프의 일부로 호출되는 Enrichment 람다 함수를 살펴보겠습니다:\n\n위 코드에서 볼 수 있듯이, 스트림 레코드에서 email_address 속성을 가져와 우리가 선호하는 연락처 DynamoDB 테이블에서 조회합니다. 레코드가 존재하면, 선호하는 방법을 가져와 약속 레코드에 추가합니다. 일치하는 레코드가 없으면, preferredMethod를 'none'으로 추가합니다.\n\n엔드 투 엔드로 테스트하려면, 애플리케이션을 배포하고 Contacts DynamoDb 테이블에 다음 항목을 추가하면 preferredMethod를 추가할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```json\n{\n  \"id\": \"john.doe@example.com\",\n  \"preferredMethod\": \"email\"\n}\n```\n\n만약 레코드가 존재하지 않는다면 이전에 언급한 대로 'none'으로 기본 설정됩니다.\n\n# 결론\n\nAmazon EventBridge 파이프를 사용하는 실제 예시로 서버리스 솔루션에서의 사용법을 보여드려 유용하게 찾으셨기를 희망합니다. 파이프를 사용하면 이전에 사용해야 했던 람다 접착 코드를 제거할 수 있고 소스에서 데이터를 추출하여 해당 데이터를 타깃으로 전달하는 훌륭한 방법을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 마무리 👋🏽\n\n이 글을 즐겁게 보았으면 공유하고 피드백을 남겨주세요!\n\n비슷한 콘텐츠를 더 보시려면 제 YouTube 채널을 구독해주세요!\n\n<img src=\"/assets/img/2024-06-23-ServerlessEventBridgePipes_7.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당신과 어느 하나라도 다음에서도 연결하고 싶어요:\n\n- [LinkedIn](https://www.linkedin.com/in/lee-james-gilmore/)\n- [Twitter](https://twitter.com/LeeJamesGilmore)\n\n포스트를 즐겼다면 추가로 포스트/시리즈를 보기 위해 내 프로필 Lee James Gilmore를 팔로우해주세요. 그리고 인사를 건네고 싶다면 절대 잊지 말고 연락해주세요 👋\n\n좋았다면 포스트 하단에 있는 '박수' 기능을 사용해주세요! (한 번 이상 박수를 칠 수 있어요!!)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 제 소개\n\n안녕하세요, 저는 영국에 거주하고 있는 AWS 커뮤니티 빌더이자 블로거인 Lee입니다. AWS 인증 클라우드 아키텍트이며 City Electrical Factors (UK) 및 City Electric Supply (US)에서 글로벌 기술 및 아키텍처 책임자로 일하고 있습니다. 지난 6년간 주로 AWS에서 풀스택 JavaScript를 사용해 왔습니다.\n\n저는 서버리스를 지지하는 사람으로, AWS, 혁신, 소프트웨어 아키텍처, 기술에 대한 애정이 있습니다.\n\n**_ 제공된 정보는 제 개인적인 견해이며 해당 정보 사용에 대한 책임을 지지 않습니다. _**\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 내용도 참고하시면 좋을 것 같아요:\n","ogImage":{"url":"/assets/img/2024-06-23-ServerlessEventBridgePipes_0.png"},"coverImage":"/assets/img/2024-06-23-ServerlessEventBridgePipes_0.png","tag":["Tech"],"readingTime":16},{"title":"DynamoDB에서 Merkle Tree로 데이터 일관성 강화하는 방법","description":"","date":"2024-06-23 22:25","slug":"2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB","content":"\n![Merkle Trees](/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_0.png)\n\nAWS의 완전 관리형 NoSQL 데이터베이스 서비스인 DynamoDB는 고가용성과 내구성을 위해 설계되었습니다. 이 신뢰성을 보장하는 주요 기능 중 하나는 데이터를 여러 노드에 복제하여 저장하는 내결함성 방식입니다. 그렇다면 DynamoDB는 데이터 복제 및 일관성 문제를 어떻게 관리할까요? 그것이 Merkle Trees가 등장하는 이유입니다.\n\n# 문제 이해\n\nDynamoDB에 데이터를 저장할 때 데이터는 내결함성을 보장하기 위해 여러 노드에 복제됩니다. 그러나 이 복제는 데이터가 한 노드에서 다른 노드로 복사되어야 할 때 특히 도전적입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image 1](/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_1.png)\n\n# 데이터 복사 및 일관성\n\n예를 들어, 이전 노드에서 새로 추가된 노드로 데이터 범위를 복사해야 한다고 상상해보세요.\n\n![Image 2](/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_3.png)\n\n이 과정은 간단해 보이지만, 이전 노드의 데이터가 지속적으로 업데이트됩니다. 이러한 동시 업데이트는 불일치를 일으켜 도착 노드에 오래된 데이터가 남게 됩니다.\n\n![이미지](/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_4.png)\n\n이를 처리하기 위해 데이터 범위가 여러 번 복사됩니다. 소스와 대상 노드 간에 변경이 없을 때 데이터가 일관성이 있다고 선언됩니다. 그러나 이 프로세스는 서비스 중단을 최소화하기 위해 가능한 빨리 이루어져야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 도전 과제\n\n- 데이터 일관성 보장: 계속되는 업데이트에도 이전 노드에서 새 노드로 모든 값의 정확한 사본이 필요합니다.\n- 복사 반복 최소화: 프로세스를 가속화하기 위해 일관성 달성에 필요한 반복 횟수를 줄여야 합니다.\n\n# Merkle Trees 소개\n\nMerkle Trees는 복제 중 데이터 일관성 문제에 대한 효율적인 해결책을 제공합니다. 이렇게 해요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Merkle Trees 동작 방식\n\nMerkle Tree는 각 리프 노드가 데이터 블록의 해시를 포함하고, 각 비리프 노드가 자식 노드의 해시를 포함하는 트리 데이터 구조입니다. 이 구조를 통해 데이터 무결성의 효율적이고 안전한 확인이 가능해집니다.\n\n![이미지](/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_5.png)\n\n# DynamoDB에서 Merkle Trees의 이점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 효율적인 데이터 비교: Merkle Trees는 데이터 노드의 차이에 기반하여 루트 해시의 변경을 감지할 수 있습니다. Merkle 해시를 비교함으로써 DynamoDB는 불일치를 빠르게 식별할 수 있습니다.\n- 시간 복잡도 감소: Merkle Tree를 통해 일치하지 않는 데이터를 찾는 것은 각 노드를 확인하는 선형 시간 복잡도인 O(n)에 비해 로그 시간 복잡도인 O(log(n))를 갖습니다. 이로써 프로세스가 크게 빨라집니다.\n\n그렇다면 실제로 어떻게 사용되는 걸까요?\n\n![이미지](/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_6.png)\n\n새 노드로 데이터를 복사할 때, 문제는 복사 프로세스 중에 변경이 발생할 수 있다는 점에 있습니다. Merkle Trees를 통해 DynamoDB는 이러한 불일치를 효율적으로 식별하고 해결할 수 있습니다. 소스 노드와 대상 노드의 Merkle 해시를 비교함으로써 DynamoDB는 차이점을 정확히 파악하고 필요한 데이터 블록만 업데이트할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 방법은 데이터 이관 프로세스를 가속화시키고 대상 노드가 신속하게 일관된 상태에 도달하도록 보장하기 위해 필요한 복사 반복 횟수를 최소화합니다.\n\n# 결론\n\nMerkle Trees는 DynamoDB에서 데이터 복제 및 일관성의 도전에 대한 엔레지와 효율적인 해결책을 제공합니다. Merkle Trees의 고유한 특성을 활용함으로써 DynamoDB는 노드 간의 데이터 불일치를 신속하게 식별하고 해결함으로써 이관 및 업데이트 중에도 데이터가 일관적이고 사용 가능하도록 보장합니다.\n\nDynamoDB에서 Merkle Trees를 사용하는 주요 장점은 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 효율적인 데이터 비교: 데이터 노드간의 차이를 기반으로 루트 해시의 변경을 감지하는 기능은 불일치를 신속하게 식별할 수 있습니다.\n- 시간 복잡도 감소: Merkle Tree를 탐색하는 데 로그 시간 복잡도를 가지고 있어 DynamoDB는 선형 방법보다 빠르게 불일치를 찾아 해결할 수 있습니다.\n- 복사 이터레이션 최소화: 데이터 일관성을 달성하는 데 필요한 반복 횟수를 줄여 전체 데이터 이동 프로세스를 가속화합니다.\n\n요약하면, Merkle Trees는 성능에 미치는 영향을 최소화하면서 데이터 무결성을 보장하여 DynamoDB의 내결함 아키텍처를 향상시킵니다. 이를 통해 DynamoDB는 모든 규모의 애플리케이션에 대한 견고하고 확장 가능한 데이터 저장 솔루션을 제공하며 높은 가용성과 신뢰성을 유지합니다.\n\nMerkle Trees를 이해하고 구현함으로써 데이터 복제를 효율적이고 효과적으로 실현하여 시스템이 탄력적으로 유지되고 데이터가 일관성 있게 유지되도록 할 수 있습니다.\n\n이 기사가 유익했다면 박수를 치고 네트워크와 공유해 주세요. 아래에 의견과 질문을 자유롭게 남기고, DynamoDB와 Merkle Trees에 대한 대화를 이어나가 주세요!\n","ogImage":{"url":"/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_0.png"},"coverImage":"/assets/img/2024-06-23-HowMerkleTreesEnhanceDataConsistencyinDynamoDB_0.png","tag":["Tech"],"readingTime":5},{"title":"프로 플레이어 네모, 스트리트 파이터 6에서 M 바이슨 주캐릭터로 선택","description":"","date":"2024-06-23 22:23","slug":"2024-06-23-ProPlayerNemotoMakeMBisonHisMaininStreetFighter6","content":"\n## STREET FIGHTER 6\n\n거리 싸움 팬분들께 꼭 들려줘야 할 멋진 소식이 있습니다! 잘 알려진 프로 플레이어 네모가 기대되는 Street Fighter 6에서 JP를 대체하여 잘 알려진 악당 M. 바이슨의 주요 캐릭터로 나설 것을 선언했습니다. 이 결정은 현지 사람들 사이에서 호기심과 기대를 일으켰어요.\n\nJP에서 M. 바이슨으로의 전환은 여러 가지 중요한 이유로 이루어졌어요:\n\n- 다른 움직임과 전략: M. 바이슨은 JP와는 다른 방식으로 게임을 플레이해요.\n- 높은 영향력 - 그는 강한 풍모와 움직임으로 유명해요.\n- 팬 상호작용 - 사람들은 이미 네모의 결정에 대해 논의하고 추측하고 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n경쟁적인 스트리트 파이터 시네의 영향에 대한 추가 토론을 기대해주세요!\n\n잘 모르시는 분들을 위해, 네모의 주 파트너는 스트리트 파이터 V에서 민첩하고 기민한 JP입니다. 그러나 M. 바이슨의 재등장에 열광하고 있습니다. 수많은 게임에서 M. 바이슨은 일본에서 베가로 불리기도 하는데, 이는 스트리트 파이터 프랜차이즈에서 두렵고 사랑받는 인물로 왔다갔다하는 것을 의미합니다.\n\n그렇다면, 스트리트 파이터 6에서의 바이슨 데뷔가 왜 흥미로운 것일까요? 먼저, 개발자들이 사이코 마인, 헤드 프레스, 쉐도우 라이즈 등 새로운 능력을 추가했는데, 이는 게임에 흥미와 전략을 불어넣을 것으로 예상됩니다. 이러한 변화로 인해 바이슨은 다양한 기동을 가능하게 하며 플레이 유연성을 키울 수 있어, 초보자와 전문가 모두에게 훌륭한 옵션이 될 것입니다.\n\n게다가, 바이슨은 스트리트 파이터 6에서 상당한 변화를 겪었습니다. 머리카락이 길고 흰색이며, 유명한 의상의 상단을 제거했습니다. 이제 그의 눈은 사이코 파워의 어둠스러운 빛으로 빛납니다. 새로운 모습은 그가 얼마나 변화했는지를 보여주는 동시에 사이코 파워가 얼마나 강력한지를 보여줍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nUDON 스트리트 파이터 만화와 Street Fighter II Champion Edition과 같은 이전 비디오 게임에 미치는 바이슨의 중요한 영향을 높이 평가합니다. 모든 나이대의 팬들은 이 유명한 악당으로써 마주치거나 대적한 경험 때문에 이 부활에 공감할 수 있습니다. 그는 최근 Street Fighter 6 캐릭터를 위한 사용자 투표에서 2위를 차지하여 지속적으로 인기를 누리고 있음을 보여주었으며, 팬들이 그를 출시하기를 갈망하고 있음을 보여줍니다.\n\n네모의 메인 캐릭터 전환 결정은 프로 플레이어로서 바이슨의 잠재력을 상당히 보여줍니다. 네모는 다재다능하고 전략적인 플레이 스타일로 유명하며, 따라서 그의 바이슨을 지지하는 결정은 캐릭터의 타고난 재능이 시사되었을 수 있습니다. 이 전환은 다른 플레이어가 자신의 캐릭터를 선택하고 플레이하는 방식을 변경할 수 있으며, 현재의 메타게임을 변화시킬 수 있습니다.\n\n6월 26일이 다가오면서 흥미가 증폭됩니다. 플레이어가 스트리트 파이터 6를 즐길지, 승리하기 위해 하는지에 상관없이, 바이슨의 등장은 새로운 도전과 감동적인 만남을 제공할 것입니다.\n\n## 요약\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로 게이머 네모가 세계관 테마 게임 6인 '스트리트 파이터 6'에서 M. 바이슨이 처음으로 데뷔할 때 JP의 자리를 대체할 것이라 선언했습니다. 스트리트 파이터 커뮤니티는 이 소식을 듣게 되어 환영할 것입니다. 네모의 플레이 스타일은 이 조정으로 인해 극적으로 변화했으며, 팬들과 적들 모두 기쁘고 궁금해합니다. 네모의 잘 전략적으로 대처하고 다양한 상황에 적응하는 능력은 그를 수년간 강적으로 만들어왔습니다. M. 바이슨을 채택한 네모의 결정은 앞으로의 대회가 어떻게 진행될지에 대한 규칙을 수정했습니다.\n\n네모의 팬들은 이 변경이 국제 대회에서 그의 성적에 어떻게 영향을 미칠지 관심을 가지고 있습니다. 새로운 캐릭터를 마스터하기로 한 네모의 헌신은 그가 게임의 정상에 남고자 하는 열망을 보여줍니다. 스트리트 파이터 시리즈에 완전히 새로운 사람이거나 네모의 팬으로서 오래된 사람이든, 이 변경은 격투를 더욱 흥미롭게 만들어주고 새로운 방법을 가르쳐줄 것입니다.\n\n게임 세계에서 이루어지는 모든 주요 변화와 마찬가지로, 네모의 M. 바이슨으로의 전환은 시간이 지나면서 나타나게 될 것입니다. 스트리트 파이터 6을 다른 플레이어와 대결하는 것이 더욱 흥미진진해졌다는 사실을 부인할 수 없습니다.\n","ogImage":{"url":"/assets/img/2024-06-23-ProPlayerNemotoMakeMBisonHisMaininStreetFighter6_0.png"},"coverImage":"/assets/img/2024-06-23-ProPlayerNemotoMakeMBisonHisMaininStreetFighter6_0.png","tag":["Tech"],"readingTime":3},{"title":"모바일 AR 게임에서 에어드롭 위치의 일관성을 보장하는 방법 최신 프레임워크 활용","description":"","date":"2024-06-23 22:23","slug":"2024-06-23-TheAirdropGameEnsuringConsistencyinAirdropPlacementinMobileARGamesUsingAdvancedFrameworks","content":"\n# Introduction\n\n스마트폰 증강 현실(AR) 게임의 역동적인 세계에서, 특히 에어드롭의 배치에서 게임 메카닉의 일관성과 공정성을 보장하는 것은 플레이어의 참여와 만족을 유지하는 데 중요할 것입니다. The Airdrop Game (TAG)는 동적 공간 정보 디자인(DSID) 프레임워크와 다른 첨단 기술을 활용하여 에어드롭의 배치와 관리를 혁신적으로 개선할 것입니다. 이 기술들(특히 DSID 프레임워크와 블록체인 기반의 난수 생성기(RNG))이 어떻게 활용되어 TAG에서 일관성, 공정성, 그리고 흥미로운 사용자 경험을 보장하는지에 대해 다루는 기사입니다.\n\n# 동적 공간 정보 디자인 프레임워크\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n운전 시나리오에 사용되는 AR 헤드업 디스플레이 (HUD)를 위해 처음으로 개발된 DSID 프레임워크가 모바일 AR 게임에 적용될 예정입니다. 이를 통해 일관된 그리고 몰입적인 게이밍 경험을 제공할 것입니다. 실제 세계 위에 동적이고 맥락에 따른 정보를 오버레이할 수 있는 능력은 효율적인 에어드랍 관리에 중요할 것입니다.\n\n실시간 환경 이해:\n\n- DSID 프레임워크는 게임이 다양한 현실 세계 조건을 동적으로 인식하고 적응할 수 있는 능력을 향상시킬 것입니다. 이를 통해 에어드랍이 접근 가능하고 맥락적으로 관련 있는 위치에 배치되어 게임의 현실감과 참여도가 향상될 것입니다.\n\n플랫폼 독립성:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 다양한 디바이스에서 일관된 성능과 시각적 품질을 제공하는 DSID 프레임워크는 플랫폼에 독립적입니다. 이 일관성은 모든 플레이어가 동일한 기회와 도전을 얻고 에어드랍을 찾아 상호 작용하는 데 중요합니다.\n\n블록체인 기반 난수 생성기(RNG) 활용\n\n게임 메커니즘에 블록체인 기반의 RNG을 통합함으로써 에어드랍 배치를 공정하고 투명하게 보장합니다.\n\n공정함과 공정성:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 블록체인 기반 RNG은 검증 가능한 무작위성을 생성하여 결과가 조작되지 않도록 보장합니다. 이를 통해 모든 플레이어가 동일한 기회를 갖게 되어 에어드롭을 만날 확률을 높일 것이며, 커뮤니티 내 신뢰와 참여를 촉진할 것입니다.\n\n투명성과 검증 가능성:\n\n- 블록체인 기반 RNG의 프로세스와 결과는 투명하게 공개되며 누구나 검토할 수 있습니다. 이 투명성은 플레이어 사이에서 신뢰를 구축하는 데 도움이 되며, 에어드롭 배치의 공정성을 독립적으로 확인할 수 있습니다.\n\n강화된 보안:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 블록체인 기반 RNG에서 암호화 기술 사용은 보안층을 추가하여 조작이나 간섭 위험을 감소시킬 것입니다. 이는 게임 메커니즘의 무결성을 유지하고 모든 플레이어들에게 공정하고 즐거운 경험을 제공하는 데 중요할 것입니다.\n\n고급 기술을 활용한 에어드랍 배치의 일관성\n\nDSID 프레임워크와 블록체인 기반 RNG를 결합하면 모바일 AR 게임에서 에어드랍 배치를 효과적으로 관리할 수 있는 견고한 솔루션을 제공할 것입니다.\n\n지리 공간 통합:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- DSID 프레임워크의 지리 공간 데이터 통합 능력을 활용하면 게임이 실제 지도와 지리 정보를 사용하여 에어드랍을 배치할 수 있습니다. 이는 플레이어의 실제 위치를 기반으로 논리적이고 일관된 분배를 보장할 것입니다.\n\n적응형 게임플레이:\n\n- 게임은 DSID 프레임워크를 사용하여 플레이어의 행동 및 환경 조건에 따라 에어드랍 배치를 조정할 것입니다. 예를 들어, 플레이어가 자주 방문하는 지역이나 가장 흥미진진한 도전을 제공하는 위치에 에어드랍이 배치될 것입니다.\n\n동적이고 공정한 에어드랍 분배:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 블록체인 기반의 RNG은 에어드랍의 분배가 무작위이면서 공정함을 보장할 것입니다. 블록체인 기술의 투명성과 보안을 활용하여 플레이어들은 에어드랍 배치가 정말로 무작위이고 편향되지 않았다는 것을 믿을 수 있을 것입니다.\n\n결론\n\nDSID 프레임워크와 블록체인 기반의 RNG을 모바일 AR 게임인 에어드랍 게임(TAG)에 통합함으로써 에어드랍 배치의 일관성과 공정성을 보장하는 정교한 해결책이 구현될 것입니다. 이러한 고급 프레임워크들은 환경 이해를 향상시키고 플랫폼 독립성을 유지하며, 블록체인 기술의 투명성과 보안을 활용하여 게임 경험을 크게 향상시킬 것입니다. 플레이어들은 공정하고 매력적이며 몰입할 수 있는 게임 세계를 즐기게 될 것이며, 가상 에어드랍을 발견하는 설레임은 항상 공정성과 투명성을 확신할 수 있는 조화로움으로 유지될 것입니다.\n\n#AR게이밍 #블록체인게임 #증강현실 #게임개발 #모바일게임 #기술혁신 #에어드랍게임 #게임디자인 #게임기술 #디지털전환\n","ogImage":{"url":"/assets/img/2024-06-23-TheAirdropGameEnsuringConsistencyinAirdropPlacementinMobileARGamesUsingAdvancedFrameworks_0.png"},"coverImage":"/assets/img/2024-06-23-TheAirdropGameEnsuringConsistencyinAirdropPlacementinMobileARGamesUsingAdvancedFrameworks_0.png","tag":["Tech"],"readingTime":4},{"title":"Unity 아키텍처 GameObject 컴포넌트 패턴 이해하기","description":"","date":"2024-06-23 22:21","slug":"2024-06-23-UnityArchitectureGameObjectComponentPattern","content":"\n지난 블로그 글에서는 \"스파게티 패턴\"에 대해 살펴보았습니다. 이는 아무런 패턴이 없는 게임을 묘사하기 위해 사용되는 농담적인 용어입니다.\n\n많은 신규 개발자들이 이를 선택하는 이유는 게임을 빠르고 쉽게 제작할 수 있다는 점 때문입니다. 하지만 이후에 자신의 지식을 확장하지 못하는 경우가 많습니다.\n\n프로토타입을 만드는 데 뛰어난 장점이 있지만, 코드가 엉망으로 변하여 어수선하고 복잡한 코드 구조로 이어질 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러한 코드베이스는 긴, 엉킨 메소드, 싱글톤 게임 매니저와 같은 \"God Objects\"에 지나치게 의존하며, 각 새로운 기능이 추가될 때마다 증가하는 끝없는 버그 나열로 악명높습니다.\n\n다행히도, 이러한 문제 중 많은 것을 해결해 줄 수 있는 패턴 중 하나는 GameObject-Component Pattern이며, 이는 Unity의 원래 비전이자 Unity Editor의 공식 프레임워크입니다.\n\n이 패턴은 큰 \"God Objects\"를 더 작고 모듈식 컴포넌트로 분해함으로써 이런 문제들을 해결합니다. 이렇게 하면 새 코드를 작성하지 않고도 GameObject에서 컴포넌트를 쉽게 추가, 수정 또는 제거할 수 있습니다. 본 이론에 따르면, 더 유연하고 유지 보수가 쉬운 코드베이스로 이끌어줄 것입니다.\n\n![Unity Architecture GameObject Component Pattern](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그래서, 이 패턴이 정말 멋져 보인다면 왜 아무도 사용하지 않는 것 같은걸까요? 심지어 Unity조차 이를 버리고 Scriptable Objects와 ECS를 선호합니다.\n\n나는 '스파게티 프로토타입'을 50시간 이상 리팩토링하여 GameObject Component를 모든 면에서 완전히 활용하고, 그 장점과 약점을 발견했습니다.\n\n# 시간 0 — 게임 매니저의 종말\n\n내 게시물을 따라오신다면 게임 매니저에 대한 절규를 들어볼 수 있을 텐데, 그들은 종종 스파게티 코드베이스에 대한 징후라는 점입니다. 그러므로 그것이 필요 없다는 것을 증명하기 위해 우리는 그것을 삭제할 겁니다.\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러나 매니저가 객체들에게 무엇을 해야 하는지 말하지 않고 게임의 흐름을 어떻게 제어할까요?\n\n우리는 새로운 코딩 개념을 소개해야 합니다. 이벤트입니다.\n\n이벤트는 응용 프로그램에서 제어 흐름의 방향을 반대로 전환할 수 있습니다. 다른 객체들에게 매니저가 지시하는 대신, 이러한 객체들은 매니저의 변화에 반응하는 방식으로 동작합니다.\n\n![Unity Architecture](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이벤트를 사용하면 게임 매니저에서 모든 종속성을 제거하여 대부분의 기능을 제거할 수 있습니다. 그럼으로써, 남은 데이터를 몇 가지 간단한 구성 요소로 분해할 수 있습니다. 예를 들어, 게임 상태와 같은 핵심 이벤트를 담는 컨테이너입니다.\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_3.png)\n\n# 2시간 — 캡슐화\n\n이러한 경향을 이어가며, 코드를 깨끗하게 유지하기 위해 클래스가 적절하게 캡슐화되어야 한다는 것이 중요하다는 것을 알았습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n우리 코드를 개선하는 가장 간단한 방법은 serialize field 속성을 사용하는 것입니다. 이렇게 함으로써 클래스가 자신의 데이터에 대한 단일 권한 출처로 유지되도록 할 수 있습니다.\n\n```js\n// 나쁨. 캡슐화 깨짐.\npublic int currentHealth;\n\n// 좋음. 캡슐화 유지.\n[SerializeField]\nprivate int currentHealth;\n\n// 좋음. 읽기 전용 액세스 제공하면서 캡슐화 유지.\n[field:SerializeField]\npublic int currentHealth { get; private set; }\n```\n\n유니티 이벤트는 또 다른 중요한 도구로, 에디터에 깊게 내장되어 있으며, 컴포넌트들 간의 결합을 느슨하게 할 수 있습니다.\n\n예를 들어, 플레이어와 적이 동일한 Death Handler 컴포넌트를 사용하지만 전혀 새로운 코드 없이 새로운 동작을 만들어낼 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_4.png\" />\n\n그러나 이 코드 의존성 부족은 두날날날날 모낫날剌몫몿 때날이카. Unity Events를 과도하게 사용하면 성능 문제가 발생할 수 있으며 에디터에서 시간이 오래 걸리는 수동 설정으로 이어질 수 있습니다.\n\n이러한 이유로, 자주 발생하거나 중요한 게임 이벤트에 대해 고전적인 C# 동작을 사용했습니다.\n\n마지막으로, Gold와 Achievements와 같은 구성 요소는 싱글톤 계정 관리자에 의존하는 대신 자체 저장 데이터를 처리하도록 했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n리팩토링은 튼튼한 시작을 했어요.\n\n# 7시간 - 성능\n\n대규모 게임에 대한 확장성과 유지 관리성이 중요하지만 성능도 그렇습니다. GameObject-Component 자체는 스파게티보다 빠르지 않습니다 (사실 느릴 수도 있음), 그러나 리팩토링의 정신에 따라 이러한 문제를 해결해야 합니다.\n\n가장 중요한 기술은 Object Pooling의 사용입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n총알, 체력 팩, 입자 및 적을 생성하고 제거하는 과정으로 인해 Garbage Collector가 엄청난 스트레스를 받고 fps에 영향을 줍니다.\n\n그렇기 때문에 이러한 객체들을 파괴하는 대신 재활용하는 것이 해결책입니다.\n\n```js\n/* 컴포넌트는 풀에서 객체를 '빌려오고' 작업을 마치면 돌려놓을 수 있음.\n   현재 사용 중인 객체가 없는 경우에만 새 객체가 생성됨. */\npublic class GameObjectPool : MonoBehaviour\n{\n  [SerializeField] private GameObject prefab;\n  private readonly Queue<GameObject> _inactivePool = new();\n\n  public GameObject Get()\n  {\n    return _inactivePool.Count > 0 ?\n           _inactivePool.Dequeue() :\n           Instantiate(prefab, null);\n  }\n\n  public void Return(GameObject item)\n  {\n    item.SetActive(false);\n    _inactivePool.Enqueue(item);\n  }\n}\n```\n\n이 기술은 발사체, 적, 입자 효과, 오디오 소스 및 모든 UI 요소(피해 수치와 같은)를 단일 캔버스로 통합함으로써 성능을 향상시켰습니다. 제어된 스트레스 테스트로 60FPS에서 100FPS로 최대 66%의 성능 향상을 달성했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 시간 10 — 의존성 그래프 수정하기.\n\n스파게티 패턴에 대한 내 정의 중 하나는 구성 요소 사이에 교차하는 선들의 웹을 만들지 않고는 시각화할 수없는 의존성 그래프였습니다.\n\n이러한 문제를 피하는 간단한 묘수는 구상 대신 구체적인 참조에 의존하는 대신 추상화에 의존하는 것입니다. 특히 이 경우에서는 상속을 사용하여.\n\n![Unity Architecture Game Object Component Pattern](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임 상태에 의존하는 구성 요소가 모두 GamePlayComponent 클래스에서 상속되도록 보장하면 이러한 동작을 체크하고도 직접적으로 참조하지 않고도 무차별적인 상태 관리를 할 수 있습니다.\n\n이 기술은 사용자 인터페이스를 분리하는 데 다시 사용되었습니다. 스파게티 코드에서 흔한 문제는 게임이 올바르게 작동하려면 UI에 대한 강력한 의존성이 필요하다는 것입니다. 개발자로서 UI 없이도 스크립트, 콘솔 명령 또는 API를 통해 게임의 어떤 상태든 액세스할 수 있어야 합니다.\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_6.png)\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_7.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 20시간 — 싱글턴 제거하기\n\n안녕하세요! 싱글턴은 악이 아니지만, 많은 개발자들이 과도하게 의존하고 있습니다. 대안을 제대로 탐색하기 위해 이 리팩토링에서는 싱글턴을 삭제하기로 결정했습니다.\n\n이것은 씬에 직렬화된 객체에 대해서는 쉽게 할 수 있습니다. 그러나 동적으로 생성된 프리팹들은 도전을 제공합니다. 프리팹은 씬 객체를 참조할 수 없습니다. 이 문제를 해결하기 위해 팩토리 패턴을 사용해야 합니다.\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_8.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n공장은 생성될 때 프리팹의 종속성을 주입합니다. 이는 새로운 오브젝트 풀과 잘 작동합니다. 이로 인해 싱글톤이 필요 없어졌지만, 코드에 복잡성과 보일러플레이트가 추가되었습니다.\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_9.png)\n\n특히 게임이 여러 씬을 사용하는 경우 이 문제가 악화됩니다. 여러 씬 간의 참조를 해결해야하기 때문에 DontDestroyOnLoad(), 코루틴 및 FindObjectOfType`T`를 결합하여 사용해야 합니다.\n\n이 추가된 복잡성은 구성 기반 아키텍처의 복잡성과 결합되어 많은 예측할 수 없는 버그를 발생시켰습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*3BLCk1jFCCHxxns9MfhzHQ.gif)\n\nGameObject Component는 컴포넌트 간 상호 작용에서 행동이 발생하도록 설계되었습니다. 불행하게도 버그도 발생합니다.\n\n스파게티 패턴과는 달리, 매니저 클래스를 따라가면서 문제를 찾을 수 없습니다. 버그는 특정한 코드 줄에서 발생하는 것이 아니라, 컴포넌트들의 상호 작용에 이상이 있어서 발생하는 것입니다.\n\n문제를 해결하려고 10시간 동안 노력한 후에도 전혀 진전이 없는 것 같았습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image](https://miro.medium.com/v2/resize:fit:1400/1*mXQ-sSlR0wSAtb5KPmrJQA.gif)\n\n# 30시간째 — 절망의 구렁이와 마주치다\n\n알게 된 대로, 게임 오브젝트 컴포넌트는 스파게티 코드에 비해 많은 초기 비용이 필요하다. 스파게티 코드로는 게임이 선형적으로 진행되어 경험이 매우 보상적인 결과를 가져온다.\n\n반면, 게임 오브젝트 컴포넌트는 모든 필요한 구성 요소가 실제로 테스트될 수 있을 때까지 존재해야 한다. 'Health.cs' 스크립트가 충분한지 여부를 알기 어렵다. 그 외의 모든 구성 요소와 함께 사용될 때까지는.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 모든 일은 동적으로 생성된 오브젝트를 다루고, 컴포넌트를 풀링하고 재활용하면서 함께 작동하도록 시도하다 보니 결과를 보지 못하는 등 너무 압도되었어요.\n\n그렇게 해서 2개월 동안 개발을 중단했죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임을 조각조각 다듬는 내 계획은 망가졌어요. 그래서 다른 일들로 넘어가고 게임 오브젝트 컴포넌트는 쓴맛을 남겼어요.\n\n# 시간 40 —조합 이해하기\n\n두 달 동안의 휴식 후, 깨달음이 찾아왔을 때 프로젝트를 끝내려는 결심을 내렸어요. 스파게티 코드 사용을 그만 두었지만, 여전히 스파게티 브레인을 사용하고 있었어요.\n\n게임오브젝트-컴포넌트의 본질은 컴포넌트를 공유하는 데 있어요. '플레이어'와 '적'을 구분하는 것은 이 아키텍처의 정신을 위반해요. 그래서 플레이어와 적이 동일한 컴포넌트에 의존하도록 확실히 했어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_12.png)\n\n이전에 '플레이어 이동'과 '적 체력'이 있었습니다. 목표는 구성 요소를 단순화하여 '식별성'이 없어도 존재할 수 있도록하는 것입니다.\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_13.png)\n\n10시간의 개발을 버리고 합성 마인드셋으로 리팩토링을 시작했습니다. 이것은 아키텍처에 대한 점점 쌓이는 경험과 결합되어 이 어려움을 극복하고 핵심 게임을 다시 작동시킬 수 있었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 50시간째 — 보상\n\n게임을 리팩토링하는 데 처음부터 만드는 시간보다 더 오랜 시간이 걸렸어요. 코드는 더 깔끔해졌지만 정말 그만한 가치가 있었을까요?\n\n![이미지](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_14.png)\n\n지난 포스트에서 언급했듯이 프로젝트 막바지에 진행 상황 바를 구현하는 데 5시간이 걸렸는데, 이번에는 단 25분만에 완료했어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 마크다운 형식으로 변경했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n게임 오브젝트-컴포넌트는 처음에는 개발 속도가 느렸지만, 유지보수성과 확장성에서 그 가치를 입증합니다. 유니티 에디터와의 원활한 통합과 코드의 내재적 \"깔끔함\"은 부정할 수 없는 장점입니다.\n\n![GameObject-Component](/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_15.png)\n\n그렇다면 최고의 아키텍처인가요?\n\n아니요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 패턴은 주의 깊은 계획, Unity에 대한 심층적인 이해 및 정교한 종속성 관리를 필요로 합니다. 짜증나는 버그 발생과 혜택 대비 비용이 높다는 이유 때문에 많은 개발자들이 이를 사용하지 않는 것일 수 있습니다.\n\n그렇지만, 이 패턴에서 요소들을 통합하면 스파게티 코드 기반 프로젝트를 크게 향상시킬 수 있으며, 최종적인 리팩터링이 덜 괴로운 경험을 할 수 있습니다.\n\n만약 해당 하이브리드의 예시를 보고 싶다면, 게임 SoulStone Survivors의 역컴파일을 확인해보세요.\n\n또는 해당 패턴과 스파게티 패턴의 전체 소스 코드를 github에서 확인할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그것에 대해 더 나은 해결책이 존재하는지에 대해 고민하게 만듭니다.\n\nScriptable Object Pattern에 대하여 자세히 살펴보고 리팩터링할 때 발견할 것입니다.\n","ogImage":{"url":"/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_0.png"},"coverImage":"/assets/img/2024-06-23-UnityArchitectureGameObjectComponentPattern_0.png","tag":["Tech"],"readingTime":14},{"title":"TRALA 프로젝트 Zksync 블록체인에서 게임의 미래를 선도하는 방법","description":"","date":"2024-06-23 22:19","slug":"2024-06-23-TRALAProjectPioneeringtheFutureofGamingontheZksyncBlockchain","content":"\n소개\n\n![이미지](/assets/img/2024-06-23-TRALAProjectPioneeringtheFutureofGamingontheZksyncBlockchain_0.png)\n\nTRALA 프로젝트는 블록체인 게임 분야에서 혁신적인 역할을 할 것으로 기대됩니다. Zksync 생태계 내에서 운영되는 TRALA는 Web 2 사용자들을 화려한 Web 3 환경으로 원활하게 이동시키는 것을 목표로 하고 있습니다. NFT 및 기타 디지털 자산을 거래할 수 있는 시장을 제공함으로써, TRALA는 게임 분야에서 새로운 시대를 열고 있습니다.\n\n비전과 미션\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nTRALA Lab의 주요 임무는 블록체인에 AAA-등급의 Web3 게임 시리즈를 출시하여 게임 경험을 크게 향상시키는 것입니다. 그들의 라인업에는 FreeStyle과 Gunship Battles와 같은 주목할만한 타이틀이 포함되어 있습니다. 그들은 웹 2 사용자들을 웹 3로 유입시키는 것을 희망합니다.\n\n강력한 지원과 커뮤니티 참여\n\nTRALA 프로젝트는 최근 Matterlabs(Zksync를 개발한 팀)와 Animoca Brands와 같은 주요 기관들로부터 지원과 많은 자금 지원을 받았습니다. 또한 prom, petoshi 및 기타 큰 주목할만한 프로젝트들과의 다수의 파트너십을 맺고 있습니다.\n\n![TRALAProjectPioneeringtheFutureofGamingontheZksyncBlockchain](/assets/img/2024-06-23-TRALAProjectPioneeringtheFutureofGamingontheZksyncBlockchain_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n최근 TRALA가 주최한 이벤트에서 참가자들은 TRALA OG NFT를 획득하고 가챠 포인트를 축적할 기회를 얻었습니다. 이 포인트와 OG NFT는 충성스러운 커뮤니티에게 수많은 혜택을 제공합니다.\n\n토큰노믹스\n\n또한 TRALA는 전체 공급량이 10억 개인 TRALA 네이티브 토큰을 출시할 것을 발표했습니다. 아직 구체적인 시기는 없지만, 토큰 분배는 생태계의 지속 가능한 성장과 발전을 보장하기 위해 설계되었습니다:\n\n- 생태계 기금: 30%\n- 개발자 기금: 25%\n- 팀: 15%\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 개인 판매: 15%\n\n- 마케팅: 5%\n- 예비 기금: 5%\n- 파트너십: 5%\n\n이 전략적 할당은 프로젝트 성장의 다양한 측면을 지원하며, 개발 및 마케팅부터 가치있는 파트너십 형성까지 지원할 것입니다.\n\n![이미지](/assets/img/2024-06-23-TRALAProjectPioneeringtheFutureofGamingontheZksyncBlockchain_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결론\n\nTRALA는 Web 3 생태계 내에서 게임 세계에 중요한 영향을 미치기 위해 준비를 하고 있습니다. 강력한 지원, 혁신적인 게임, 그리고 튼튼한 토큰 경제 계획으로 TRALA는 블록체인 게임 분야에서 선두 주자가 되기 위한 길을 걸어가고 있습니다.\n\nTRALA가 웹 3에서 게임 세계를 지배할 시점에 함께해 주시기를 초대합니다.\n\nX: x.com/TRALA_Official\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n디스코드 : https://discord.gg/trala-official\n\n웹사이트 : trala.me\n","ogImage":{"url":"/assets/img/2024-06-23-TRALAProjectPioneeringtheFutureofGamingontheZksyncBlockchain_0.png"},"coverImage":"/assets/img/2024-06-23-TRALAProjectPioneeringtheFutureofGamingontheZksyncBlockchain_0.png","tag":["Tech"],"readingTime":3},{"title":"Arrowhead의 헬다이버스 2 리뷰 폭탄 케이프의 수수께끼와 전략적 출시  GameSpotlight","description":"","date":"2024-06-23 22:18","slug":"2024-06-23-ArrowheadsHelldivers2TheMysteriousCompletedReviewBombCapeandItsStrategicReleaseGameSpotlight","content":"\n## HELLDIVERS 2: ARROWHEAD'S FINISHED 'REVIEW BOMB CAPE' TEASED BY DIRECTOR\n\n![Image](/assets/img/2024-06-23-ArrowheadsHelldivers2TheMysteriousCompletedReviewBombCapeandItsStrategicReleaseGameSpotlight_0.png)\n\n안녕하세요, Helldivers 팬 여러분! 열심히 기다리고 있던 후속작인 Helldivers 2가 곧 출시될 예정이며, 이에 관한 놀라운 소식이 있어서 여러분을 더욱 기대하게 만들 것입니다. Arrowhead Game Studios가 유명한 \"Review Bomb Cape\"가 극히 진짜임은 물론 완전히 마무리되었다고 확인했습니다. 그러나 주목할 점은, 스튜디오가 적절한 시기가 올 때까지 발표를 미루고 있는 중이라는 점입니다. 이에 따라 이상적인 타이밍을 기다리고 있습니다.\n\n## Helldivers 커뮤니티는 이 공개로 인해 분노에 휩싸인 상태입니다. 궁금한 점이 있으시다면, 여기 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 완전히 계획이 세워지고 사용 가능한 것으로 확인된 케이프가 마침내 완성되었습니다.\n- 출시 시기: 현재는 비밀로 유지되지만 전략적으로 준비되었습니다.\n- 플레이어들의 참여와 의겢에 대한 인정과 감사의 의도로 만들어졌습니다.\n\n이번 흥미로운 업데이트가 출시되면서 기대감은 한층 높아졌습니다. 리뷰 폭탄 케이프가 독특한 이유와 Arrowhead의 타이밍이 게임에서 결정적인 요소가 될 수 있는 이유를 함께 살펴봅시다.\n\nHelldivers 2 커뮤니티가 특히 갈등을 겪던 리뷰 단계를 지나며, 리뷰 그래프를 게임 아이템으로 그대로 남기기로 결정했습니다. 이것이 리뷰 폭탄 케이프 아이디어의 기원입니다. Arrowhead Game Studios는 이 제안을 가볍게 받아들이지 않고, 오히려 열정적으로 마음을 다해 환영했습니다. 곧 개발 중이라고 발표된 뒤, 지지 커뮤니티에 더 많은 높은 수준의 기대감을 불러일으켰습니다.\n\n이 케이프가 독특한 이유는 무엇일까요? 먼저, 이것은 게임의 활성 플레이어 베이스와 그들이 게임 발전에 미친 영향을 보여주는 것의 증명입니다. 어려움과 연대의 상징일 뿐만 아니라, 게임 역사의 특정 시기를 실체화한 물리적 추억입니다. 케이프의 정교한 디자인은 아마도 리뷰 그래프에서 표현된 dramatic한 고점과 저점을 반영할 것입니다. 이를 통해 케이프는 커뮤니티의 집단적 경험의 일부를 처음으로 포착할 수 있을 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n망했다고 생각했던 유저들을 다시 끌어낼 가능성이 있는 케이프가 적시에 공개되면 열정이 되살아나고 게이머들이 다시 참여할 수 있을 것입니다. 속담에는 시기가 모든 것이라고 합니다. 이 방법을 사용함으로써 Arrowhead는 현재의 어려움을 Helldivers 2 이야기의 유명한 구성 요소로 변모시키는 잠재력을 가질 수 있어서 플레이어들의 참여와 충성도를 높일 수 있을 것입니다.\n\n한편, 게임의 최신 업그레이드가 중요한데, LAS-99 퀘이사 캐논의 재충전 시간 조정 및 다른 무기의 향상과 같은 사항은 Arrowhead가 게임 메타를 개선하기 위해 헌신하는 것을 보여줍니다. 이러한 수정 사항은 Review Bomb Cape의 상징적인 공개와 함께, Arrowhead가 커뮤니티의 피드백을 주의 깊게 듣고 활발한 플레이어들에게 중요한 방향으로 게임을 발전시키고자 한다는 인상을 줍니다.\n\n케이프의 도착을 열망하는 동안, 한 가지는 분명합니다: Arrowhead Game Studios는 기대감과 관련된 흥분을 유지할 수 있습니다. Helldivers 여러분, 기대해 주세요. 분명히, 다음 장이 기록에 남을 것입니다.\n","ogImage":{"url":"/assets/img/2024-06-23-ArrowheadsHelldivers2TheMysteriousCompletedReviewBombCapeandItsStrategicReleaseGameSpotlight_0.png"},"coverImage":"/assets/img/2024-06-23-ArrowheadsHelldivers2TheMysteriousCompletedReviewBombCapeandItsStrategicReleaseGameSpotlight_0.png","tag":["Tech"],"readingTime":3}],"page":"15","totalPageCount":120,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}