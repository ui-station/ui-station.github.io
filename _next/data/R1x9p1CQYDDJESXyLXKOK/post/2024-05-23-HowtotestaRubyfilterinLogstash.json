{"pageProps":{"post":{"title":"루비 필터를 Logstash에서 테스트하는 방법","description":"","date":"2024-05-23 12:49","slug":"2024-05-23-HowtotestaRubyfilterinLogstash","content":"\n\n이전 기사에서는 Logstash에서 코드를 공유하고 루비 필터에서 모듈을 만드는 방법을 보았습니다. 이 기사에서는 결과 이벤트가 예상대로인지 확인하기 위해 필터를 테스트하는 방법을 보여드릴 것입니다.\n\n# 이전 코드에 대해\n\n기억을 새기기 위해, 코드는 다음과 같았습니다:\n\n```js\nrequire './script/denormalized_by_prizes_utils.rb'\n\n# `params`의 값은 로그스태시 구성에서 `script_params`에 전달된 해시의 값입니다.\ndef register(params)\n    @keep_original_event = params[\"keep_original_event\"]\nend\n\n# 필터 메소드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.\n# 이벤트를 삭제하면 반환 배열에 포함되지 않음을 의미합니다.\n# 새 이벤트를 만드는 것은 반환된 배열에 LogStash::Event의 새 인스턴스만 추가하면 됩니다.\ndef filter(event)\n    \n    items = Array.new\n\n    # 원래 이벤트를 유지하려면\n    originalEvent = LogStash::Util::DenormalizationByPrizesHelper::getOriginalEvent(event, @keep_original_event);\n    if not originalEvent.nil?\n        items.push originalEvent\n    end\n\n    # 상품 항목을 가져옵니다 (정규화)\n    prizes = LogStash::Util::DenormalizationByPrizesHelper::getPrizes(event);\n    if prizes.nil?\n        return items\n    end\n   \n    # 복제 기본 이벤트 생성\n    eventBase = LogStash::Util::DenormalizationByPrizesHelper::getEventBase(event);\n\n    # 필요한 수정으로 상품 항목별 이벤트 생성\n    prizes.each { |prize| \n        items.push LogStash::Util::DenormalizationByPrizesHelper::createEventForPrize(eventBase, prize);\n    }\n\n    return items;\nend\n```\n\n<div class=\"content-ad\"></div>\n\n위 코드는 denormalized_by_prizes_utils.rb 파일 전체 내용입니다.\n\n```rb\nmodule LogStash::Util::DenormalizationByPrizesHelper\n    include LogStash::Util::Loggable\n\n    # 원본 이벤트 유지 여부 확인\n    def self.getOriginalEvent(event, keepOriginalEvent)\n        logger.debug('keepOriginalEvent is :' + keepOriginalEvent.to_s)\n        if keepOriginalEvent.to_s == 'true'\n            event.set('[@metadata][_index]', 'prizes-original');\n            return event;\n        end\n        return nil;\n    end\n\n    # 상금 아이템 얻기 (정규화)\n    def self.getPrizes(event)\n        prizes = event.get(\"prize\");\n        if prizes.nil?\n            logger.warn(\"이벤트에 상금이 없습니다: \" + event.to_s)\n        end\n        return prizes;\n    end\n\n    # 클론 기본 이벤트 생성\n    def self.getEventBase(event)\n        eventBase = event.clone();\n        eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n        eventBase.remove(\"prize\");\n        return eventBase;\n    end\n\n    # 필요한 수정과 함께 현재 상금 아이템을 위한 이벤트 클론 생성\n    def self.createEventForPrize(eventBase, prize)\n        eventPrize = eventBase.clone();\n        # 각 상금 아이템 값을 상금 객체로 복사\n        prize.each { |key,value|\n            eventPrize.set(\"[prize][\" + key + \"]\", value)\n        }\n        return eventPrize;\n    end\nend\n```\n\n## 일반 구문\n\n이 섹션에서는 예상된 이벤트가 실제로 예상한 대로 생성되는지 확인하는 기능 테스트를 작성하는 방법을 보여줍니다.\n\n<div class=\"content-ad\"></div>\n\n하나 이상의 테스트 케이스를 작성할 수 있으며 각 테스트 케이스마다 필요한 만큼의 테스트를 수행할 수 있습니다. 이러한 테스트는 루비 필터 파일 끝에 작성되어야 합니다. 즉, register/filter 함수를 포함하는 주 파일에 작성되어야 합니다.\n\n필터 테스트는 다음과 같은 구문을 따라야 합니다:\n\n```js\ntest \"테스트 케이스 이름\" do\n\n    parameters do\n    { \n        # 필터에 전달할 매개변수\n    }\n    end\n    \n    in_event { \n        # 필터 프로세스에 도착하는 이벤트\n    }\n\n    # expect 메서드를 사용한 테스트\n\nend\n```\n\n# 저희 루비 필터에 테스트를 구현합니다.\n\n<div class=\"content-ad\"></div>\n\n예제에서는 역정규화를 구현했기 때문에 테스트에서 원본 이벤트를 잘 역정규화했는지 여러 경우(원본 이벤트 유지 여부, 상금 목록에 상금 하나 또는 둘의 예)를 확인할 것입니다.\n\n## 테스트 케이스\n\n따라서, 아래에 제시된 네 가지 테스트 케이스가 필요합니다:\n\n```js\ntest \"Case 1: 이벤트에 상금 하나 / 원본 이벤트 유지하지 않음\" do\n\n    parameters do\n    { \n        \"keep_original_event\" => false\n    }\n    end\n\n    in_event { \n        { \n            \"id\"        => 1, \n            \"firstname\" => \"Pierre\", \n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"male\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                }\n            ]\n        } \n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest \"Case 2: 이벤트에 상금 하나 / 원본 이벤트 유지\" do\n\n    parameters do\n    { \n        \"keep_original_event\" => true\n    }\n    end\n\n    in_event { \n        { \n            \"id\"        => 1, \n            \"firstname\" => \"Pierre\", \n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"male\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                }\n            ]\n        } \n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest \"Case 3: 이벤트에 상금 둘 / 원본 이벤트 유지하지 않음\" do\n\n    parameters do\n    { \n        \"keep_original_event\" => false\n    }\n    end\n\n    in_event { \n        { \n            \"id\"        => 2, \n            \"firstname\" => \"Marie\", \n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"female\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                },\n                {\n                    \"year\" => 1911,\n                    \"category\" => \"chemistry\"\n                }\n            ]\n        } \n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n\ntest \"Case 4: 이벤트에 상금 둘 / 원본 이벤트 유지\" do\n\n    parameters do\n    { \n        \"keep_original_event\" => true\n    }\n    end\n\n    in_event { \n        { \n            \"id\"        => 2, \n            \"firstname\" => \"Marie\", \n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"female\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                },\n                {\n                    \"year\" => 1911,\n                    \"category\" => \"chemistry\"\n                }\n            ]\n        } \n    }\n\n    # expect 메소드를 사용한 테스트\n\nend\n```\n\n<div class=\"content-ad\"></div>\n\n## 기능 테스트 구현\n\n이 글에서는 더 복잡한 테스트 케이스(마지막)만 구현할 것입니다. 다른 것들에 대해서도 원리는 동일하지만 서로 다른 테스트 케이스를 테스트하므로 예상 결과는 같지 않을 것입니다.\n\n그래서 마지막 테스트 케이스에서 다음을 확인할 것입니다:\n\n- 원본이 변경 없이 출력에 포함되어 있는지 확인하기\n- \"prize\" 배열의 각 항목마다 문서를 생성하므로 두 항목은 두 개의 문서를 생성해야 합니다\n- 생성된 각 항목이 올바른 공통 필드와 올바른 상금 필드를 포함하고 있는지 확인하기\n- 결과적으로 출력에는 3개의 이벤트가 있어야 하며, 각 이벤트는 별도의 인덱스에 있어야 합니다\n\n<div class=\"content-ad\"></div>\n\n저희의 테스트는 다음과 같이 작성될 수 있어요:\n\n```js\ntest \"Case 4: two prizes in event / keep original event\" do\n\n    parameters do\n    { \n        \"keep_original_event\" => true\n    }\n    end\n\n    in_event { \n        { \n            \"id\"        => 2, \n            \"firstname\" => \"Marie\", \n            \"surname\"   => \"Curie\",\n            \"gender\"    => \"female\",\n            \"prize\"     => [\n                {\n                    \"year\" => 1903,\n                    \"category\" => \"physics\"\n                },\n                {\n                    \"year\" => 1911,\n                    \"category\" => \"chemistry\"\n                }\n            ]\n        } \n    }\n\n    expect(\"Count of events\") do |events|\n        events.length == 3\n    end\n\n    expect(\"Each event has same shared fields\") do |events|\n        result = true\n        events.each { |event|\n            result &= event.get(\"[id]\") == 2\n            result &= event.get(\"[firstname]\") == \"Marie\"\n            result &= event.get(\"[surname]\") == \"Curie\"\n            result &= event.get(\"[gender]\") == \"female\"\n        }\n        result\n    end\n\n    expect(\"Each event has good _index\") do |events|  \n        result = true\n        result &= events[0].get(\"[@metadata][_index]\") == \"prizes-original\"\n        result &= events[1].get(\"[@metadata][_index]\") == \"prizes-denormalized\"\n        result &= events[2].get(\"[@metadata][_index]\") == \"prizes-denormalized\"\n        result\n    end\n\n    expect(\"Each event has good prize fields\") do |events| \n        result = true \n        result &= events[0].get(\"[prize][0][year]\") == 1903\n        result &= events[0].get(\"[prize][0][category]\") == \"physics\"\n        result &= events[0].get(\"[prize][1][year]\") == 1911\n        result &= events[0].get(\"[prize][1][category]\") == \"chemistry\"\n        result &= events[1].get(\"[prize][year]\") == 1903\n        result &= events[1].get(\"[prize][category]\") == \"physics\"\n        result &= events[2].get(\"[prize][year]\") == 1911\n        result &= events[2].get(\"[prize][category]\") == \"chemistry\"\n        result\n    end\n\nend\n```\n\n여러 개의 어설션을 갖는 `expect` 메서드를 사용할 때는, `&&` 또는 `&=` 연산자를 사용하여 어설션 결과를 결합하는데 문법에 주의하세요.\n\n우리의 테스트 케이스 구현이 준비되었어요. 모든 테스트 케이스는 Logstash 시작 시 실행되며 해당 파이프라인이 생성될 때 실행돼요. 실제로, Logstash는 Ruby 필터에 작성된 모든 테스트를 찾을 수 있어요. 그리고 Logstash 로그에서 모든 테스트 결과를 볼 수 있을 거예요.\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 변경한 내용입니다.\n\n\n![이미지1](/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png)\n\n![이미지2](/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_1.png)\n\n테스트가 실패한 경우, 테스트 케이스 이름 및 필요한 모든 정보(매개변수, 입력 이벤트, 결과)를 명확히 확인할 수 있습니다. 최소한 하나의 테스트가 실패하면 연결된 파이프라인은 시작되지 않습니다.\n","ogImage":{"url":"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png"},"coverImage":"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"이전 기사에서는 Logstash에서 코드를 공유하고 루비 필터에서 모듈을 만드는 방법을 보았습니다. 이 기사에서는 결과 이벤트가 예상대로인지 확인하기 위해 필터를 테스트하는 방법을 보여드릴 것입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이전 코드에 대해\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기억을 새기기 위해, 코드는 다음과 같았습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./script/denormalized_by_prizes_utils.rb'\"\n        }), \"\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`params`\"\n        }), \"의 값은 로그스태시 구성에서 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`script_params`\"\n        }), \"에 전달된 해시의 값입니다.\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"register\"\n        }), \"(params)\\n    @keep_original_event = params[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \"]\\nend\\n\\n# 필터 메소드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.\\n# 이벤트를 삭제하면 반환 배열에 포함되지 않음을 의미합니다.\\n# 새 이벤트를 만드는 것은 반환된 배열에 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Event\"\n        }), \"의 새 인스턴스만 추가하면 됩니다.\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(event)\\n    \\n    items = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"new\"\n        }), \"\\n\\n    # 원래 이벤트를 유지하려면\\n    originalEvent = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getOriginalEvent\"\n        }), \"(event, @keep_original_event);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" not originalEvent.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nil\"\n        }), \"?\\n        items.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"push\"\n        }), \" originalEvent\\n    end\\n\\n    # 상품 항목을 가져옵니다 (정규화)\\n    prizes = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getPrizes\"\n        }), \"(event);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nil\"\n        }), \"?\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items\\n    end\\n   \\n    # 복제 기본 이벤트 생성\\n    eventBase = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getEventBase\"\n        }), \"(event);\\n\\n    # 필요한 수정으로 상품 항목별 이벤트 생성\\n    prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"each\"\n        }), \" { |prize| \\n        items.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"push\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createEventForPrize\"\n        }), \"(eventBase, prize);\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items;\\nend\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드는 denormalized_by_prizes_utils.rb 파일 전체 내용입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-rb\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"module\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash::Util::DenormalizationByPrizesHelper\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"include\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash::Util::Loggable\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 원본 이벤트 유지 여부 확인\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"self\"\n        }), \".getOriginalEvent(event, keepOriginalEvent)\\n        logger.debug(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'keepOriginalEvent is :'\"\n        }), \" + keepOriginalEvent.to_s)\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" keepOriginalEvent.to_s == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'true'\"\n        }), \"\\n            event.set(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-original'\"\n        }), \");\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" event;\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"end\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"nil\"\n        }), \";\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"end\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 상금 아이템 얻기 (정규화)\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"self\"\n        }), \".getPrizes(event)\\n        prizes = event.get(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" prizes.\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"nil\"\n        }), \"?\\n            logger.warn(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"이벤트에 상금이 없습니다: \\\"\"\n        }), \" + event.to_s)\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"end\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" prizes;\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"end\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 클론 기본 이벤트 생성\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"self\"\n        }), \".getEventBase(event)\\n        eventBase = event.clone();\\n        eventBase.set(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-denormalized'\"\n        }), \");\\n        eventBase.remove(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" eventBase;\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"end\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 필요한 수정과 함께 현재 상금 아이템을 위한 이벤트 클론 생성\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"def\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"self\"\n        }), \".createEventForPrize(eventBase, prize)\\n        eventPrize = eventBase.clone();\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 각 상금 아이템 값을 상금 객체로 복사\"\n        }), \"\\n        prize.each { |\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"key,value\"\n        }), \"|\\n            eventPrize.set(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][\\\"\"\n        }), \" + key + \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"]\\\"\"\n        }), \", value)\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" eventPrize;\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"end\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"end\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"일반 구문\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 섹션에서는 예상된 이벤트가 실제로 예상한 대로 생성되는지 확인하는 기능 테스트를 작성하는 방법을 보여줍니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하나 이상의 테스트 케이스를 작성할 수 있으며 각 테스트 케이스마다 필요한 만큼의 테스트를 수행할 수 있습니다. 이러한 테스트는 루비 필터 파일 끝에 작성되어야 합니다. 즉, register/filter 함수를 포함하는 주 파일에 작성되어야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"필터 테스트는 다음과 같은 구문을 따라야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"test \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"테스트 케이스 이름\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n\\n    parameters \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n    { \\n        # 필터에 전달할 매개변수\\n    }\\n    end\\n    \\n    in_event { \\n        # 필터 프로세스에 도착하는 이벤트\\n    }\\n\\n    # expect 메서드를 사용한 테스트\\n\\nend\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"저희 루비 필터에 테스트를 구현합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예제에서는 역정규화를 구현했기 때문에 테스트에서 원본 이벤트를 잘 역정규화했는지 여러 경우(원본 이벤트 유지 여부, 상금 목록에 상금 하나 또는 둘의 예)를 확인할 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"테스트 케이스\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"따라서, 아래에 제시된 네 가지 테스트 케이스가 필요합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"test \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Case 1: 이벤트에 상금 하나 / 원본 이벤트 유지하지 않음\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n\\n    parameters \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n    { \\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n    }\\n    end\\n\\n    in_event { \\n        { \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"id\\\"\"\n        }), \"        => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"firstname\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Pierre\\\"\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"surname\\\"\"\n        }), \"   => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Curie\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gender\\\"\"\n        }), \"    => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"male\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \"     => [\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1903\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"physics\\\"\"\n        }), \"\\n                }\\n            ]\\n        } \\n    }\\n\\n    # expect 메소드를 사용한 테스트\\n\\nend\\n\\ntest \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Case 2: 이벤트에 상금 하나 / 원본 이벤트 유지\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n\\n    parameters \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n    { \\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n    }\\n    end\\n\\n    in_event { \\n        { \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"id\\\"\"\n        }), \"        => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"firstname\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Pierre\\\"\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"surname\\\"\"\n        }), \"   => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Curie\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gender\\\"\"\n        }), \"    => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"male\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \"     => [\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1903\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"physics\\\"\"\n        }), \"\\n                }\\n            ]\\n        } \\n    }\\n\\n    # expect 메소드를 사용한 테스트\\n\\nend\\n\\ntest \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Case 3: 이벤트에 상금 둘 / 원본 이벤트 유지하지 않음\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n\\n    parameters \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n    { \\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n    }\\n    end\\n\\n    in_event { \\n        { \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"id\\\"\"\n        }), \"        => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"firstname\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Marie\\\"\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"surname\\\"\"\n        }), \"   => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Curie\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gender\\\"\"\n        }), \"    => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"female\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \"     => [\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1903\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"physics\\\"\"\n        }), \"\\n                },\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1911\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"chemistry\\\"\"\n        }), \"\\n                }\\n            ]\\n        } \\n    }\\n\\n    # expect 메소드를 사용한 테스트\\n\\nend\\n\\ntest \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Case 4: 이벤트에 상금 둘 / 원본 이벤트 유지\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n\\n    parameters \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n    { \\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n    }\\n    end\\n\\n    in_event { \\n        { \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"id\\\"\"\n        }), \"        => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"firstname\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Marie\\\"\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"surname\\\"\"\n        }), \"   => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Curie\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gender\\\"\"\n        }), \"    => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"female\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \"     => [\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1903\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"physics\\\"\"\n        }), \"\\n                },\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1911\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"chemistry\\\"\"\n        }), \"\\n                }\\n            ]\\n        } \\n    }\\n\\n    # expect 메소드를 사용한 테스트\\n\\nend\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"기능 테스트 구현\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글에서는 더 복잡한 테스트 케이스(마지막)만 구현할 것입니다. 다른 것들에 대해서도 원리는 동일하지만 서로 다른 테스트 케이스를 테스트하므로 예상 결과는 같지 않을 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 마지막 테스트 케이스에서 다음을 확인할 것입니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"원본이 변경 없이 출력에 포함되어 있는지 확인하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"\\\"prize\\\" 배열의 각 항목마다 문서를 생성하므로 두 항목은 두 개의 문서를 생성해야 합니다\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"생성된 각 항목이 올바른 공통 필드와 올바른 상금 필드를 포함하고 있는지 확인하기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"결과적으로 출력에는 3개의 이벤트가 있어야 하며, 각 이벤트는 별도의 인덱스에 있어야 합니다\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저희의 테스트는 다음과 같이 작성될 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"test \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Case 4: two prizes in event / keep original event\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n\\n    parameters \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \"\\n    { \\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n    }\\n    end\\n\\n    in_event { \\n        { \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"id\\\"\"\n        }), \"        => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"firstname\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Marie\\\"\"\n        }), \", \\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"surname\\\"\"\n        }), \"   => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Curie\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gender\\\"\"\n        }), \"    => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"female\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \"     => [\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1903\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"physics\\\"\"\n        }), \"\\n                },\\n                {\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1911\"\n        }), \",\\n                    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"category\\\"\"\n        }), \" => \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"chemistry\\\"\"\n        }), \"\\n                }\\n            ]\\n        } \\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Count of events\\\"\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \" |events|\\n        events.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"length\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"\\n    end\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Each event has same shared fields\\\"\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \" |events|\\n        result = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n        events.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"each\"\n        }), \" { |event|\\n            result &= event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[id]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"\\n            result &= event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[firstname]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Marie\\\"\"\n        }), \"\\n            result &= event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[surname]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Curie\\\"\"\n        }), \"\\n            result &= event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[gender]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"female\\\"\"\n        }), \"\\n        }\\n        result\\n    end\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Each event has good _index\\\"\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \" |events|  \\n        result = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[@metadata][_index]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prizes-original\\\"\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[@metadata][_index]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prizes-denormalized\\\"\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[@metadata][_index]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prizes-denormalized\\\"\"\n        }), \"\\n        result\\n    end\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"expect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Each event has good prize fields\\\"\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"do\"\n        }), \" |events| \\n        result = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \" \\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][0][year]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1903\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][0][category]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"physics\\\"\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][1][year]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1911\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][1][category]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"chemistry\\\"\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][year]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1903\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][category]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"physics\\\"\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][year]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1911\"\n        }), \"\\n        result &= events[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][category]\\\"\"\n        }), \") == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"chemistry\\\"\"\n        }), \"\\n        result\\n    end\\n\\nend\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여러 개의 어설션을 갖는 \", _jsx(_components.code, {\n        children: \"expect\"\n      }), \" 메서드를 사용할 때는, \", _jsx(_components.code, {\n        children: \"&&\"\n      }), \" 또는 \", _jsx(_components.code, {\n        children: \"&=\"\n      }), \" 연산자를 사용하여 어설션 결과를 결합하는데 문법에 주의하세요.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리의 테스트 케이스 구현이 준비되었어요. 모든 테스트 케이스는 Logstash 시작 시 실행되며 해당 파이프라인이 생성될 때 실행돼요. 실제로, Logstash는 Ruby 필터에 작성된 모든 테스트를 찾을 수 있어요. 그리고 Logstash 로그에서 모든 테스트 결과를 볼 수 있을 거예요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 Markdown 형식으로 변경한 내용입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_0.png\",\n        alt: \"이미지1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-HowtotestaRubyfilterinLogstash_1.png\",\n        alt: \"이미지2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테스트가 실패한 경우, 테스트 케이스 이름 및 필요한 모든 정보(매개변수, 입력 이벤트, 결과)를 명확히 확인할 수 있습니다. 최소한 하나의 테스트가 실패하면 연결된 파이프라인은 시작되지 않습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}