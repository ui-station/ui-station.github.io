{"pageProps":{"post":{"title":"안드로이드에서 Room 데이터베이스 시작하기","description":"","date":"2024-05-20 15:54","slug":"2024-05-20-GettingStartedwithRoomDatabaseinAndroid","content":"\n\n## Room 데이터베이스 구현에 대한 포괄적인 안내\n\n![Android Room Database](/assets/img/2024-05-20-GettingStartedwithRoomDatabaseinAndroid_0.png)\n\n## 소개:\n\n로컬 데이터 저장은 많은 안드로이드 애플리케이션에게 중요하며, 데이터를 효율적으로 저장하고 검색할 수 있게 합니다. 이 안내서에서는 안드로이드 앱에서 데이터베이스 관리를 간편하게 하는 강력한 라이브러리인 Room을 살펴보겠습니다. Room 설정부터 데이터베이스 작업 수행 및 마이그레이션 처리까지 모두 다룰 것입니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-GettingStartedwithRoomDatabaseinAndroid_1.png\" />\n\n## 섹션 1: Room 데이터베이스 설정하기\n\n단계 1: 종속성 추가\n앱의 `build.gradle` 모듈 레벨 파일을 열어 Room 및 Kotlin Coroutines (비동기 작업을 위한)에 필요한 종속성을 추가해주세요:\n\n```js\ngradle\ndependencies {\n def roomVersion = \"2.4.0\" // 최신 버전을 확인하세요\n implementation \"androidx.room:room-runtime:$roomVersion\"\n kapt \"androidx.room:room-compiler:$roomVersion\"\n implementation \"androidx.room:room-ktx:$roomVersion\"\n implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2\" // 코루틴 종속성 추가\n}\n```\n\n<div class=\"content-ad\"></div>\n\nOR\n\n최신 안드로이드 및 Jetpack Compose에서 특정 오류로 실패하는 경우 'Kotlin 심볼 처리' ksp()을 추가해야 할 수도 있습니다.\n\n아래 종속성 및 플러그인을 build.gradle(모듈 레벨)에 추가해보세요.\n\n```js\nplugins {\n .\n .\n id \"com.google.devtools.ksp\"\n}\n\n.\n.\n.\n\ndependencies{\n  // Room 종속성\n    val room_version = \"2.5.2\"\n\n    implementation(\"androidx.room:room-ktx:$room_version\")\n    // Kotlin 주석 처리 도구 (kapt) 사용을 위해\n    ksp(\"androidx.room:room-compiler:$room_version\")\n}\n```\n\n<div class=\"content-ad\"></div>\n\n아래 클래스 경로를 build.gradle(앱 레벨)에 KSP에 추가해주세요.\n\n```js\nplugins {\n    id \"com.google.devtools.ksp\" version \"1.8.10-1.0.9\" apply false\n}\n```\n\n단계 2: 엔티티 클래스 생성\n데이터베이스에서 테이블을 나타내기 위해 어노테이션을 사용하여 엔티티 클래스를 정의하세요. 예를 들어, `User` 엔티티를 생성해보겠습니다(각 데이터 멤버가 열 이름인 테이블로 간주합니다):\n\n```js\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"users\")\ndata class User(\n @PrimaryKey(autoGenerate = true) val id: Long = 0,\n val username: String,\n val email: String\n)\n```\n\n<div class=\"content-ad\"></div>\n\n### Step 3: DAO (Data Access Object) Interface 생성\n데이터베이스 작업을 정의하기 위한 DAO 인터페이스를 생성하세요. 예를 들어, `UserDao`를 만들어보겠습니다:\n\n```kotlin\nimport androidx.room.Dao\nimport androidx.room.Insert\nimport androidx.room.OnConflictStrategy\nimport androidx.room.Query\n\n@Dao\ninterface UserDao {\n\n @Insert(onConflict = OnConflictStrategy.REPLACE)\n suspend fun insertUser(user: User)\n\n @Query(\"SELECT * FROM users\")\n suspend fun getAllUsers(): List<User>\n}\n```\n\n### Step 4: 데이터베이스 클래스 정의\n`RoomDatabase`를 확장하는 추상 클래스를 생성하여 데이터베이스 인스턴스를 정의하고 엔티티 및 DAO를 포함시키세요:\n\n```kotlin\nimport androidx.room.Database\nimport androidx.room.RoomDatabase\n\n@Database(entities = [User::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n}\n```\n\n<div class=\"content-ad\"></div>\n\nStep 5: 데이터베이스 인스턴스 초기화하기\n`Application` 클래스나 관련 진입점에서 Room 데이터베이스 인스턴스를 초기화하세요:\n\n```kotlin\nimport android.app.Application\nimport androidx.room.Room\n\nclass MyApp: Application() {\n\n    companion object {\n        lateinit var database: AppDatabase\n    }\n\n    override fun onCreate() {\n        super.onCreate()\n        database = Room.databaseBuilder(\n            applicationContext,\n            AppDatabase::class.java,\n            \"my_database\"\n        ).build()\n    }\n}\n```\n\n## 섹션 2: 데이터베이스 작업 수행하기\n\nStep 1: 데이터 삽입\n사용자를 데이터베이스에 삽입하려면 `UserDao`에 정의된 `insertUser` 메서드를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nval newUser = User(username = \"JohnDoe\", email = \"john@example.com\")\nMyApp.database.userDao().insertUser(newUser)\n```\n\n단계 2: 데이터 검색\n데이터베이스에서 모든 사용자를 검색하려면 `UserDao`의 `getAllUsers` 메서드를 사용하십시오:\n\n```js\nval userList: List<User> = MyApp.database.userDao().getAllUsers()\n```\n\n인젝션 가능한 Room 데이터베이스 객체를 설정하는 데모 프로젝트를 확인해주세요.\n\n<div class=\"content-ad\"></div>\n\n데모 프로젝트 링크: https://github.com/raikwaramit/RoomDatabaseModule/\n\n## 결론:\n\nAndroid 앱에서 Room 데이터베이스를 구현하면 데이터 저장을 간편하게 처리할 수 있습니다. 직관적인 설정과 강력한 기능으로 앱의 로컬 데이터를 효율적으로 관리할 수 있습니다. 이 가이드를 따라가면 Room 설정, 엔티티 및 DAO 정의, 데이터베이스 작업 수행, 마이그레이션 처리 방법을 배울 수 있습니다.\n\n이 가이드에서는 Room의 기본 사항을 다루었습니다. 라이브러리에 익숙해지면 데이터베이스 관계, LiveData 통합, 복잡한 쿼리와 같은 고급 기능을 탐색할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n룸을 사용하면 Android 앱에서 로컬 데이터를 관리하는 것이 더 쉬워집니다. 코딩을 즐기세요!","ogImage":{"url":"/assets/img/2024-05-20-GettingStartedwithRoomDatabaseinAndroid_0.png"},"coverImage":"/assets/img/2024-05-20-GettingStartedwithRoomDatabaseinAndroid_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    code: \"code\",\n    pre: \"pre\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Room 데이터베이스 구현에 대한 포괄적인 안내\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-GettingStartedwithRoomDatabaseinAndroid_0.png\",\n        alt: \"Android Room Database\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"소개:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"로컬 데이터 저장은 많은 안드로이드 애플리케이션에게 중요하며, 데이터를 효율적으로 저장하고 검색할 수 있게 합니다. 이 안내서에서는 안드로이드 앱에서 데이터베이스 관리를 간편하게 하는 강력한 라이브러리인 Room을 살펴보겠습니다. Room 설정부터 데이터베이스 작업 수행 및 마이그레이션 처리까지 모두 다룰 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-GettingStartedwithRoomDatabaseinAndroid_1.png\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"섹션 1: Room 데이터베이스 설정하기\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"단계 1: 종속성 추가\\n앱의 \", _jsx(_components.code, {\n        children: \"build.gradle\"\n      }), \" 모듈 레벨 파일을 열어 Room 및 Kotlin Coroutines (비동기 작업을 위한)에 필요한 종속성을 추가해주세요:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"gradle\\ndependencies {\\n def roomVersion = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2.4.0\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 최신 버전을 확인하세요\"\n        }), \"\\n implementation \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.room:room-runtime:$roomVersion\\\"\"\n        }), \"\\n kapt \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.room:room-compiler:$roomVersion\\\"\"\n        }), \"\\n implementation \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.room:room-ktx:$roomVersion\\\"\"\n        }), \"\\n implementation \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 코루틴 종속성 추가\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OR\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"최신 안드로이드 및 Jetpack Compose에서 특정 오류로 실패하는 경우 'Kotlin 심볼 처리' ksp()을 추가해야 할 수도 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 종속성 및 플러그인을 build.gradle(모듈 레벨)에 추가해보세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"plugins {\\n .\\n .\\n id \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"com.google.devtools.ksp\\\"\"\n        }), \"\\n}\\n\\n.\\n.\\n.\\n\\ndependencies{\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Room 종속성\"\n        }), \"\\n    val room_version = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2.5.2\\\"\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"implementation\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.room:room-ktx:$room_version\\\"\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Kotlin 주석 처리 도구 (kapt) 사용을 위해\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ksp\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.room:room-compiler:$room_version\\\"\"\n        }), \")\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 클래스 경로를 build.gradle(앱 레벨)에 KSP에 추가해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"plugins {\\n    id \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"com.google.devtools.ksp\\\"\"\n        }), \" version \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"1.8.10-1.0.9\\\"\"\n        }), \" apply \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"단계 2: 엔티티 클래스 생성\\n데이터베이스에서 테이블을 나타내기 위해 어노테이션을 사용하여 엔티티 클래스를 정의하세요. 예를 들어, \", _jsx(_components.code, {\n        children: \"User\"\n      }), \" 엔티티를 생성해보겠습니다(각 데이터 멤버가 열 이름인 테이블로 간주합니다):\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"room\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"Entity\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"room\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"PrimaryKey\"\n        }), \"\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Entity\"\n        }), \"(tableName = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"users\\\"\"\n        }), \")\\ndata \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \"(\\n @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PrimaryKey\"\n        }), \"(autoGenerate = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \") val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Long\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\\n val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"username\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \",\\n val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"email\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \"\\n)\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 3: DAO (Data Access Object) Interface 생성\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"데이터베이스 작업을 정의하기 위한 DAO 인터페이스를 생성하세요. 예를 들어, \", _jsx(_components.code, {\n        children: \"UserDao\"\n      }), \"를 만들어보겠습니다:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.room.Dao\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.room.Insert\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.room.OnConflictStrategy\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.room.Query\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Dao\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"interface\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UserDao\"\n        }), \" {\\n\\n \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Insert(onConflict = OnConflictStrategy.REPLACE)\"\n        }), \"\\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"suspend\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"insertUser\"\n          }), _jsxs(_components.span, {\n            className: \"hljs-params\",\n            children: [\"(user: \", _jsx(_components.span, {\n              className: \"hljs-type\",\n              children: \"User\"\n            }), \")\"]\n          })]\n        }), \"\\n\\n \", _jsxs(_components.span, {\n          className: \"hljs-meta\",\n          children: [\"@Query(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"SELECT * FROM users\\\"\"\n          }), \")\"]\n        }), \"\\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"suspend\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"getAllUsers\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          })]\n        }), \": List<User>\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 4: 데이터베이스 클래스 정의\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"RoomDatabase\"\n      }), \"를 확장하는 추상 클래스를 생성하여 데이터베이스 인스턴스를 정의하고 엔티티 및 DAO를 포함시키세요:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.room.Database\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.room.RoomDatabase\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Database(entities = [User::class], version = 1)\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"abstract\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppDatabase\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"RoomDatabase\"\n        }), \"() {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"abstract\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"userDao\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          })]\n        }), \": UserDao\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Step 5: 데이터베이스 인스턴스 초기화하기\\n\", _jsx(_components.code, {\n        children: \"Application\"\n      }), \" 클래스나 관련 진입점에서 Room 데이터베이스 인스턴스를 초기화하세요:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-kotlin\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" android.app.Application\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" androidx.room.Room\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyApp\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Application\"\n        }), \"() {\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"companion\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"object\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"lateinit\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" database: AppDatabase\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"override\"\n        }), \" \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"fun\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-title\",\n            children: \"onCreate\"\n          }), _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"()\"\n          })]\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"super\"\n        }), \".onCreate()\\n        database = Room.databaseBuilder(\\n            applicationContext,\\n            AppDatabase::\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \".java,\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my_database\\\"\"\n        }), \"\\n        ).build()\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"섹션 2: 데이터베이스 작업 수행하기\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Step 1: 데이터 삽입\\n사용자를 데이터베이스에 삽입하려면 \", _jsx(_components.code, {\n        children: \"UserDao\"\n      }), \"에 정의된 \", _jsx(_components.code, {\n        children: \"insertUser\"\n      }), \" 메서드를 사용할 수 있습니다:\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"val newUser = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \"(username = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"JohnDoe\\\"\"\n        }), \", email = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"john@example.com\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyApp\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"database\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"userDao\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"insertUser\"\n        }), \"(newUser)\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"단계 2: 데이터 검색\\n데이터베이스에서 모든 사용자를 검색하려면 \", _jsx(_components.code, {\n        children: \"UserDao\"\n      }), \"의 \", _jsx(_components.code, {\n        children: \"getAllUsers\"\n      }), \" 메서드를 사용하십시오:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"val \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"userList\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"List\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"User\"\n        }), \"> = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyApp\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"database\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"userDao\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getAllUsers\"\n        }), \"()\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인젝션 가능한 Room 데이터베이스 객체를 설정하는 데모 프로젝트를 확인해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데모 프로젝트 링크: https://github.com/raikwaramit/RoomDatabaseModule/\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"결론:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Android 앱에서 Room 데이터베이스를 구현하면 데이터 저장을 간편하게 처리할 수 있습니다. 직관적인 설정과 강력한 기능으로 앱의 로컬 데이터를 효율적으로 관리할 수 있습니다. 이 가이드를 따라가면 Room 설정, 엔티티 및 DAO 정의, 데이터베이스 작업 수행, 마이그레이션 처리 방법을 배울 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 가이드에서는 Room의 기본 사항을 다루었습니다. 라이브러리에 익숙해지면 데이터베이스 관계, LiveData 통합, 복잡한 쿼리와 같은 고급 기능을 탐색할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"룸을 사용하면 Android 앱에서 로컬 데이터를 관리하는 것이 더 쉬워집니다. 코딩을 즐기세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}