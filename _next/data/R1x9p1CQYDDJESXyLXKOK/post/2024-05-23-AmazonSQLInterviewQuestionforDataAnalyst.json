{"pageProps":{"post":{"title":"아마존 데이터 분석가를 위한 SQL 인터뷰 질문","description":"","date":"2024-05-23 16:00","slug":"2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst","content":"\n<img src=\"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_0.png\" />\n\n아마존에서 데이터 분석가 직군 면접 때 물어본 문제입니다. 병원에는 직원들이 여러 번 들어오고 나갈 수 있습니다.\n\n이제 병원 안에 있는 직원을 찾아내야 합니다.\n\n<img src=\"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_1.png\" />\n\n<div class=\"content-ad\"></div>\n\n요기 데이터 있어요. 이제 병원 안에 있는 직원의 emp_id를 찾아야 해요.\n\n이 질문은 두 가지 방법으로 해결할 수 있어요.\n\n방법 1\n\n여기서 우리는 각 직원의 최신 출근 시간과 최신 퇴근 시간을 찾을 거예요. 직원은 최신 출근 시간이 최신 퇴근 시간보다 늦거나 최신 퇴근 시간이 알려지지 않은 경우에 병원에 있을 거예요.\n\n<div class=\"content-ad\"></div>\n\n아래 결과를 통해 emp_id 2, 3, 4가 조건을 만족시킨다는 것을 확인할 수 있습니다. 따라서 이들 직원들은 병원 안에 있습니다.\n\n최종 쿼리는 다음과 같습니다:\n\n<img src=\"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_3.png\" />\n\n<div class=\"content-ad\"></div>\n\n## 방법 2\n\n여기서는 각 직원의 최신 활동 시간을 찾은 다음, 해당 시간에 직원의 활동이 무엇이었는지 알아낼 것입니다. 그 후에 해당 직원을 필터링할 것입니다.\n\n![image](/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_4.png)\n\n이제 해당 시간에 직원의 활동을 찾아보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_5.png\" />\n\n지금은 최신 활동이 \"in\"인 것을 필터링할 것입니다.\n\n<img src=\"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_6.png\" />\n\n방법 3: 여기서 우리는 각 emp_id의 행 번호를 내림차순으로 시간 순서대로 생성할 것입니다. 그런 다음 CTE를 생성한 다음, 행 번호가 =1이고 활동이 'in'인 emp_id를 추출할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nSELECT *,ROW_NUMBER() OVER(PARTITION BY emp_id ORDER BY time DESC) AS rnk\nFROM hospital)\nSELECT *\nFROM x\nWHERE rnk=1 AND action='in';\n```\n\n![Image](/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_7.png)\n\nPlease clap if you find the solution helpful.\n\nLet's connect on LinkedIn! 🤝\n\n\n<div class=\"content-ad\"></div>\n\n포트폴리오를 확인해보세요.\n","ogImage":{"url":"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_0.png"},"coverImage":"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아마존에서 데이터 분석가 직군 면접 때 물어본 문제입니다. 병원에는 직원들이 여러 번 들어오고 나갈 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 병원 안에 있는 직원을 찾아내야 합니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_1.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요기 데이터 있어요. 이제 병원 안에 있는 직원의 emp_id를 찾아야 해요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 질문은 두 가지 방법으로 해결할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"방법 1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 우리는 각 직원의 최신 출근 시간과 최신 퇴근 시간을 찾을 거예요. 직원은 최신 출근 시간이 최신 퇴근 시간보다 늦거나 최신 퇴근 시간이 알려지지 않은 경우에 병원에 있을 거예요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 결과를 통해 emp_id 2, 3, 4가 조건을 만족시킨다는 것을 확인할 수 있습니다. 따라서 이들 직원들은 병원 안에 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"최종 쿼리는 다음과 같습니다:\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_3.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"방법 2\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서는 각 직원의 최신 활동 시간을 찾은 다음, 해당 시간에 직원의 활동이 무엇이었는지 알아낼 것입니다. 그 후에 해당 직원을 필터링할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_4.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 해당 시간에 직원의 활동을 찾아보겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_5.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지금은 최신 활동이 \\\"in\\\"인 것을 필터링할 것입니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_6.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"방법 3: 여기서 우리는 각 emp_id의 행 번호를 내림차순으로 시간 순서대로 생성할 것입니다. 그런 다음 CTE를 생성한 다음, 행 번호가 =1이고 활동이 'in'인 emp_id를 추출할 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" *,\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"ROW_NUMBER\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"OVER\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"PARTITION\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BY\"\n        }), \" emp_id \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ORDER\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"BY\"\n        }), \" time \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DESC\"\n        }), \") \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AS\"\n        }), \" rnk\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" hospital)\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECT\"\n        }), \" *\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"FROM\"\n        }), \" x\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"WHERE\"\n        }), \" rnk=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AND\"\n        }), \" action=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'in'\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AmazonSQLInterviewQuestionforDataAnalyst_7.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Please clap if you find the solution helpful.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's connect on LinkedIn! 🤝\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"포트폴리오를 확인해보세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}