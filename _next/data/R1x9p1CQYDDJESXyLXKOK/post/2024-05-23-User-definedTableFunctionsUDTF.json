{"pageProps":{"post":{"title":"사용자 정의 테이블 함수 UDTF","description":"","date":"2024-05-23 15:41","slug":"2024-05-23-User-definedTableFunctionsUDTF","content":"\n\n![이미지](/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png)\n\nSpark 3.5에서는 파이썬 사용자 정의 테이블 함수(UDTF)를 소개했습니다. 이것은 새로운 종류의 사용자 정의 함수입니다. 스칼라 함수는 각 호출에 대해 하나의 결과를 생성하는 반면, UDTF는 쿼리의 FROM 절 내에서 호출되며 전체 테이블을 출력합니다. UDTF 호출은 스칼라 식이나 완전한 입력 테이블을 나타내는 테이블 인수 중 어떤 것이든 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-05-23-User-definedTableFunctionsUDTF_1.png)\n\n## 파이썬 UDTF 사용 이유\n\n\n<div class=\"content-ad\"></div>\n\n만약 다양한 행과 열을 생성하면서 파이썬의 다양한 생태계를 활용하고 싶다면, Python UDTF가 이상적입니다.\n\n## Python UDTF 대 Python UDF\n\nSpark의 Python UDF는 입력으로 스칼라 값s 중 0개 이상을 받아들이고 단일 값을 반환하는 것이 설계되어 있습니다. 그에 반해, UDTF는 여러 행과 열을 반환할 수 있어 UDF의 기능을 더 확장시킬 수 있어 더 유연합니다.\n\n## Python UDTF 대 SQL UDTF\n\n<div class=\"content-ad\"></div>\n\nSQL UDTFs는 효율적이고 다재다능하지만, Python은 더 다양한 라이브러리와 도구를 제공합니다. 통계 함수나 머신 러닝 추론과 같이 고급 기술이 필요한 변환 또는 계산을 위해서는 Python UDTFs가 특히 유리합니다.\n\n# LangChain과 함께 사용하는 UDTF\n\n이전 예제는 기본적으로 보일 수 있지만, Python UDTFs를 LangChain과 통합하여 더 흥미로운 시나리오를 탐색해 봅시다.\n\n```js\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom pyspark.sql.functions import lit, udtf\n\n@udtf(returnType=\"keyword: string\")\nclass KeywordsGenerator:\n    \"\"\"\n    Generate a list of comma separated keywords about a topic using an LLM.\n    Output only the keywords.\n    \"\"\"\n    def __init__(self):\n        llm = OpenAI(model_name=\"gpt-4\", openai_api_key=<your-key>)\n        prompt = PromptTemplate(\n            input_variables=[\"topic\"],\n            template=\"generate a couple of comma separated keywords about {topic}. Output only the keywords.\"\n        )\n        self.chain = LLMChain(llm=llm, prompt=prompt)\n\n    def eval(self, topic: str):\n        response = self.chain.run(topic)\n        keywords = [keyword.strip() for keyword in response.split(\",\")]\n        for keyword in keywords:\n            yield (keyword, )\n```\n\n<div class=\"content-ad\"></div>\n\n세부 정보:-\n\n즐거운 학습하세요 🙂 !!!!!!\n","ogImage":{"url":"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png"},"coverImage":"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spark 3.5에서는 파이썬 사용자 정의 테이블 함수(UDTF)를 소개했습니다. 이것은 새로운 종류의 사용자 정의 함수입니다. 스칼라 함수는 각 호출에 대해 하나의 결과를 생성하는 반면, UDTF는 쿼리의 FROM 절 내에서 호출되며 전체 테이블을 출력합니다. UDTF 호출은 스칼라 식이나 완전한 입력 테이블을 나타내는 테이블 인수 중 어떤 것이든 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"파이썬 UDTF 사용 이유\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 다양한 행과 열을 생성하면서 파이썬의 다양한 생태계를 활용하고 싶다면, Python UDTF가 이상적입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Python UDTF 대 Python UDF\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spark의 Python UDF는 입력으로 스칼라 값s 중 0개 이상을 받아들이고 단일 값을 반환하는 것이 설계되어 있습니다. 그에 반해, UDTF는 여러 행과 열을 반환할 수 있어 UDF의 기능을 더 확장시킬 수 있어 더 유연합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Python UDTF 대 SQL UDTF\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SQL UDTFs는 효율적이고 다재다능하지만, Python은 더 다양한 라이브러리와 도구를 제공합니다. 통계 함수나 머신 러닝 추론과 같이 고급 기술이 필요한 변환 또는 계산을 위해서는 Python UDTFs가 특히 유리합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"LangChain과 함께 사용하는 UDTF\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전 예제는 기본적으로 보일 수 있지만, Python UDTFs를 LangChain과 통합하여 더 흥미로운 시나리오를 탐색해 봅시다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" langchain.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"chains\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LLMChain\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" langchain.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"llms\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" langchain.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"prompts\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PromptTemplate\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" pyspark.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"sql\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"functions\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" lit, udtf\\n\\n@\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"udtf\"\n        }), \"(returnType=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keyword: string\\\"\"\n        }), \")\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"KeywordsGenerator\"\n        }), \":\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\n    Generate a list of comma separated keywords about a topic using an LLM.\\n    Output only the keywords.\\n    \\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n    def \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"__init__\"\n        }), \"(self):\\n        llm = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OpenAI\"\n        }), \"(model_name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gpt-4\\\"\"\n        }), \", openai_api_key=<your-key>)\\n        prompt = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PromptTemplate\"\n        }), \"(\\n            input_variables=[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"topic\\\"\"\n        }), \"],\\n            template=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"generate a couple of comma separated keywords about {topic}. Output only the keywords.\\\"\"\n        }), \"\\n        )\\n        self.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"chain\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LLMChain\"\n        }), \"(llm=llm, prompt=prompt)\\n\\n    def \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"eval\"\n        }), \"(self, \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"topic\"\n        }), \": str):\\n        response = self.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"chain\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"run\"\n        }), \"(topic)\\n        keywords = [keyword.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"strip\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" keyword \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" response.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"split\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\",\\\"\"\n        }), \")]\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" keyword \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"keywords\"\n        }), \":\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"yield\"\n        }), \" (keyword, )\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"세부 정보:-\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"즐거운 학습하세요 🙂 !!!!!!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}