{"pageProps":{"post":{"title":"Samba를 사용하여 CIFS 파일 시스템 유형을 이용해 공유 폴더를 마운트하는 방법","description":"","date":"2024-05-18 17:34","slug":"2024-05-18-HowtoMountaSharedFolderUsingSambawithCIFSFilesystemType","content":"\n\n안녕하세요! 이 튜토리얼에서는 Linux 시스템에서 올바른 파일 시스템 유형(cifs)을 사용하여 Samba를 사용하여 호스트 머신의 공유 폴더를 마운트하는 단계를 살펴볼 것입니다.\n\n# 단계 1: Samba 공유 설정\n\nSamba 설치: 먼저 호스트 머신에 Samba를 설치합니다:\n\n```js\nsudo apt update\nsudo apt install samba\n```\n\n<div class=\"content-ad\"></div>\n\nSamba 구성: Samba 구성 파일을 편집하세요:\n\n```js\nsudo vim /etc/samba/smb.conf\n```\n\n파일의 끝에 다음 라인을 추가하세요:\n\n```js\n[shared_folder]\npath = /공유할/폴더/경로\nwritable = yes\nguest ok = yes\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 2: 필요한 패키지 설치\n\n시스템에 cifs-utils 패키지가 설치되어 있는지 확인하세요. 패키지 관리자를 사용하여 설치할 수 있습니다:\n\n```js\nsudo apt update\nsudo apt install cifs-utils\n```\n\n# 단계 3: 호스트 머신의 IP 주소 찾기\n\n<div class=\"content-ad\"></div>\n\n다음 명령을 사용하여 호스트 머신의 IP 주소를 찾을 수 있습니다:\n\n```js\nip addr show | grep inet | grep -v 127.0.0.1 | awk '{print $2}' | cut -d'/' -f1\n```\n\n이 명령은 호스트 머신의 IP 주소를 출력합니다.\n\n# 4단계: 마운트 포인트 만들기\n\n<div class=\"content-ad\"></div>\n\n공유 폴더를 마운트할 디렉토리를 생성해보세요. 예를 들어, 홈 디렉토리에 shared_folder라는 디렉토리를 만들어봅시다:\n\n```js\nmkdir ~/shared_folder\n```\n\n# 단계 5: 공유 폴더 마운트하기\n\n마운트 명령을 사용하여 공유 폴더를 마운트하세요. host_ip를 호스트 머신의 IP 주소로, shared_folder_name을 공유 폴더의 이름으로 대체하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\nsudo mount -t cifs //호스트IP/공유폴더명 ~/공유폴더 -o guest\n```\n\n만약 공유 폴더에 인증이 필요하다면 사용자 이름과 비밀번호를 제공할 수도 있어요:\n\n```js\nsudo mount -t cifs //호스트IP/공유폴더명 ~/공유폴더 -o username=당신의사용자이름,password=당신의비밀번호\n```\n\n# 단계 6: 마운트 확인하기\n\n<div class=\"content-ad\"></div>\n\n공유된 폴더가 올바르게 마운트되었는지 확인하려면 마운트 지점 디렉터리의 내용을 나열하여 확인해보세요:\n\n```js\nls ~/shared_folder\n```\n\n이 명령을 실행하면 공유된 폴더의 내용이 나열됩니다.\n\n# 단계 7: 파일 접근 및 수정\n\n<div class=\"content-ad\"></div>\n\n이제 로컬 머신에서 공유 폴더의 파일에 직접 액세스하고 수정할 수 있어요.\n\n# 단계 8: 공유 폴더에서 마운트 해제하기 (선택 사항)\n\n공유 폴더 작업을 완료했을 때 umount 명령을 사용하여 마운트를 해제할 수 있어요:\n\n```js\nsudo umount ~/shared_folder\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 9: 자동 마운트 (선택 사항)\n\n시스템 부팅할 때마다 공유 폴더를 자동으로 마운트하려면 /etc/fstab 파일에 항목을 추가할 수 있습니다.\n\n```js\n//host_ip/shared_folder_name  /home/your_username/shared_folder  cifs  guest  0  0\n```\n\n호스트 IP, 공유 폴더 이름 및 /home/your_username/shared_folder를 세팅에 맞는 적절한 값으로 교체해주세요.\n\n<div class=\"content-ad\"></div>\n\n위 항목을 추가한 후 시스템을 재부팅하거나 다음과 같이 수동으로 공유 폴더를 마운트할 수 있습니다:\n\n```js\nsudo mount -a\n```\n\n끝났어요! 이제 올바른 파일 시스템 유형(cifs)을 사용하여 Samba를 통해 공유 폴더를 마운트했습니다. 이제 공유 폴더의 파일에 액세스하고 필요에 따라 작업할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-18-HowtoMountaSharedFolderUsingSambawithCIFSFilesystemType_0.png"},"coverImage":"/assets/img/2024-05-18-HowtoMountaSharedFolderUsingSambawithCIFSFilesystemType_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"안녕하세요! 이 튜토리얼에서는 Linux 시스템에서 올바른 파일 시스템 유형(cifs)을 사용하여 Samba를 사용하여 호스트 머신의 공유 폴더를 마운트하는 단계를 살펴볼 것입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: Samba 공유 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Samba 설치: 먼저 호스트 머신에 Samba를 설치합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"sudo apt update\\nsudo apt install samba\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Samba 구성: Samba 구성 파일을 편집하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"sudo vim /etc/samba/smb.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"conf\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"파일의 끝에 다음 라인을 추가하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[shared_folder]\\npath = \", _jsx(_components.span, {\n          className: \"hljs-regexp\",\n          children: \"/공유할/\"\n        }), \"폴더/경로\\nwritable = yes\\nguest ok = yes\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 2: 필요한 패키지 설치\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시스템에 cifs-utils 패키지가 설치되어 있는지 확인하세요. 패키지 관리자를 사용하여 설치할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"sudo apt update\\nsudo apt install cifs-utils\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: 호스트 머신의 IP 주소 찾기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 명령을 사용하여 호스트 머신의 IP 주소를 찾을 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"ip addr show | grep inet | grep -v \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"127.0\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".0\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".1\"\n        }), \" | awk \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'{print $2}'\"\n        }), \" | cut -d\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/'\"\n        }), \" -f1\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 명령은 호스트 머신의 IP 주소를 출력합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"4단계: 마운트 포인트 만들기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"공유 폴더를 마운트할 디렉토리를 생성해보세요. 예를 들어, 홈 디렉토리에 shared_folder라는 디렉토리를 만들어봅시다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"mkdir ~/shared_folder\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 5: 공유 폴더 마운트하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마운트 명령을 사용하여 공유 폴더를 마운트하세요. host_ip를 호스트 머신의 IP 주소로, shared_folder_name을 공유 폴더의 이름으로 대체하세요:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"sudo mount -t cifs \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//호스트IP/공유폴더명 ~/공유폴더 -o guest\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 공유 폴더에 인증이 필요하다면 사용자 이름과 비밀번호를 제공할 수도 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"sudo mount -t cifs \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//호스트IP/공유폴더명 ~/공유폴더 -o username=당신의사용자이름,password=당신의비밀번호\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 6: 마운트 확인하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"공유된 폴더가 올바르게 마운트되었는지 확인하려면 마운트 지점 디렉터리의 내용을 나열하여 확인해보세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"ls ~/shared_folder\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 명령을 실행하면 공유된 폴더의 내용이 나열됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 7: 파일 접근 및 수정\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 로컬 머신에서 공유 폴더의 파일에 직접 액세스하고 수정할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 8: 공유 폴더에서 마운트 해제하기 (선택 사항)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"공유 폴더 작업을 완료했을 때 umount 명령을 사용하여 마운트를 해제할 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"sudo umount ~/shared_folder\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 9: 자동 마운트 (선택 사항)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시스템 부팅할 때마다 공유 폴더를 자동으로 마운트하려면 /etc/fstab 파일에 항목을 추가할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//host_ip/shared_folder_name  /home/your_username/shared_folder  cifs  guest  0  0\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"호스트 IP, 공유 폴더 이름 및 /home/your_username/shared_folder를 세팅에 맞는 적절한 값으로 교체해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 항목을 추가한 후 시스템을 재부팅하거나 다음과 같이 수동으로 공유 폴더를 마운트할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"sudo mount -a\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"끝났어요! 이제 올바른 파일 시스템 유형(cifs)을 사용하여 Samba를 통해 공유 폴더를 마운트했습니다. 이제 공유 폴더의 파일에 액세스하고 필요에 따라 작업할 수 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}