{"pageProps":{"post":{"title":"Logstash에서 Ruby 코드를 공유하는 방법","description":"","date":"2024-05-23 12:44","slug":"2024-05-23-HowtoshareRubycodeinLogstash","content":"\n\n이전 기사에서는 루비 필터를 사용하여 문서를 비정규화하는 방법을 살펴보았습니다. 이 기사에서는 코드를 개선하고 필터간에 코드를 공유하는 방법을 보여드리겠습니다.\n\n## 이전 코드에 대해\n\n기억하시나요? 이전 코드는 다음과 같았습니다:\n\n```js\n# 'params'의 값은 로그스태시 구성에서 'script_params'로 전달된 해시의 값입니다.\ndef register(params)\n    @keep_original_event = params[\"keep_original_event\"]\nend\n\n# 필터 메서드는 이벤트를 받아들이고 이벤트 목록을 반환하여야 합니다.\n# 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.\n# 새로운 이벤트를 만들려면 반환된 배열에 LogStash::Event의 새 인스턴스를 추가하기만 하면 됩니다.\ndef filter(event)\n\n    items = Array.new\n\n    # 원본 이벤트를 유지하도록 요청되었는지 확인\n    logger.debug('keep_original_event is :' + @keep_original_event.to_s)\n\n    if @keep_original_event.to_s == 'true'\n        event.set('[@metadata][_index]', 'prizes-original');\n        items.push event\n    end\n\n    # 상금 아이템 가져오기 (비정규화)\n    prizes = event.get(\"prize\");\n    if prizes.nil?\n        logger.warn(\"No prizes for event \" + event.to_s)\n        return items\n    end\n\n    # 복제된 기본 이벤트 생성\n    eventBase = event.clone();\n    eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n    eventBase.remove(\"prize\");\n\n    # 각 상금 아이템별로 필요한 수정과 함께 이벤트 생성\n    prizes.each { |prize|\n        eventPrize = eventBase.clone();\n\n        # 각 상금 아이템 값을 상금 객체로 복사\n        prize.each { |key,value|\n            eventPrize.set(\"[prize][\" + key + \"]\", value)\n        }\n\n        items.push eventPrize\n    }\n\n    return items\nend\n```\n\n<div class=\"content-ad\"></div>\n\n보시다시피, 우리에게는 매개변수를 설명하는 register 함수와 필터 기능을 구현하는 다른 함수가 2개뿐입니다. 그러나 기능 전체를 한 방법에 구현하는 것은 가독성, 유지 관리 가능성, 테스트 가능성 등 여러 가지 이유로 최선의 선택이 아닙니다.\n\n# 루비 코드 공유\n\n코드를 공유하는 첫 번째 방법은 다른 루비 파일에 일부 함수를 외부화하고 이러한 함수를 우리의 루비 필터에서 호출하는 것입니다.\n\n예를 들어, 우리는 일부 코드 조각을 간단한 함수로 외부화할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 원본 이벤트를 얻기 위한 함수(원하면 현재 이벤트를 유지하려면)\n- 이벤트로부터 상품 배열을 얻기 위한 함수\n- 각 상품을 위해 복제되는 이벤트 베이스를 구성하는 함수\n- 각 상품마다 이벤트를 생성하는 함수\n\n```js\n# 필요 시 원본 이벤트 유지\ndef getOriginalEvent(event)\n    logger.debug('keep_original_event is :' + @keep_original_event.to_s)\n    if @keep_original_event.to_s == 'true'\n        event.set('[@metadata][_index]', 'prizes-original');\n        return event;\n    end\n    return nil;\nend\n\n# 상품 항목 가져오기 (정규화)\ndef getPrizes(event)\n    prizes = event.get(\"prize\");\n    if prizes.nil?\n        logger.warn(\"No prizes for event \" + event.to_s)\n    end\n    return prizes;\nend\n\n# 복제된 베이스 이벤트 생성\ndef getEventBase(event)\n    eventBase = event.clone();\n    eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n    eventBase.remove(\"prize\");\n    return eventBase;\nend\n\n# 필요한 수정을 수행한 현재 상품 항목 복제 이벤트 생성\ndef createEventForPrize(eventBase, prize)\n    eventPrize = eventBase.clone();\n    # 각 상품 항목 값을 상품 객체로 복사\n    prize.each { |key,value|\n        eventPrize.set(\"[prize][\" + key + \"]\", value)\n    }\n    return eventPrize;\nend\n```\n\n위 코드는 denormalized_by_prizes_utils.rb라는 이름의 파일에 작성되어 있습니다.\n\n그 이후에 필터의 주요 코드는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```javascript\nrequire './script/denormalized_by_prizes_utils.rb'\n\n// `params`의 값은 로그스태시 구성에서 `script_params`로 전달된 해시 값입니다.\nfunction register(params) {\n    @keep_original_event = params[\"keep_original_event\"];\n}\n\n// 필터 메서드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.\n// 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.\n// 새 이벤트를 생성하려면 반환된 배열에 LogStash::Event 인스턴스를 추가하면 됩니다.\nfunction filter(event) {\n\n    var items = [];\n\n    // 필요하다면 원본 이벤트를 유지합니다.\n    var originalEvent = getOriginalEvent(event);\n    if (!originalEvent) {\n        items.push(originalEvent);\n    }\n\n    // 상금 아이템(정규화) 가져오기\n    var prizes = getPrizes(event);\n    if (!prizes) {\n        return items;\n    }\n   \n    // 클론 기본 이벤트 생성\n    var eventBase = getEventBase(event);\n\n    // 필요한 수정을 가진 상금 항목별 하나의 이벤트 생성\n    prizes.forEach(function(prize) {\n        items.push(createEventForPrize(eventBase, prize));\n    });\n\n    return items;\n}\n```\n\n기존 코드보다 훨씬 읽기 쉽고 필터 기능의 다른 단계를 직접 확인할 수 있습니다. 작은 함수로 잘 세분화되고 이해하기 쉽게 작성하여 유지보수성이 향상될 것입니다.\n\n하지만 경우에 따라 코드를 공유하는 여러 파일과 여러 파일이 필요한 필터를 갖고 있는 경우, 충돌이 발생하거나 유지보수성이 일부 저하될 수 있습니다.\n\n# 모듈 생성하기\n\n\n<div class=\"content-ad\"></div>\n\n다른 방법으로 코드를 공유하는 방법은 모듈을 만드는 것입니다. 이 모듈은 같은 기능적 범위의 코드 조각을 그룹화할 것입니다. 우리는 공유 함수를 사용하기 전에 모듈 이름을 지정해야 하기 때문에 충돌이 발생하지 않을 것입니다.\n\n이전에 공유된 함수는 다음과 같이 될 것입니다:\n\n```js\nmodule LogStash::Util::DenormalizationByPrizesHelper\n    include LogStash::Util::Loggable\n\n    # 원래 이벤트 유지\n    def self.getOriginalEvent(event, keepOriginalEvent)\n        logger.debug('keepOriginalEvent is :' + keepOriginalEvent.to_s)\n        if keepOriginalEvent.to_s == 'true'\n            event.set('[@metadata][_index]', 'prizes-original');\n            return event;\n        end\n        return nil;\n    end\n\n    # 상품 항목 가져오기 (정규화 해제)\n    def self.getPrizes(event)\n        prizes = event.get(\"prize\");\n        if prizes.nil?\n            logger.warn(\"No prizes for event \" + event.to_s)\n        end\n        return prizes;\n    end\n\n    # 복제 기본 이벤트 생성\n    def self.getEventBase(event)\n        eventBase = event.clone();\n        eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n        eventBase.remove(\"prize\");\n        return eventBase;\n    end\n\n    # 필요한 수정으로 현재 상품 항목을 위한 복제 이벤트 생성\n    def self.createEventForPrize(eventBase, prize)\n        eventPrize = eventBase.clone();\n        # 각 상품 항목 값을 상품 객체로 복사\n        prize.each { |key,value|\n            eventPrize.set(\"[prize][\" + key + \"]\", value)\n        }\n        return eventPrize;\n    end\n\nend\n```\n\nlogger 인스턴스를 사용할 수 있도록 Loggable Util 모듈을 포함해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n주요 코드는 다음과 같습니다:\n\n```js\nrequire './script/denormalized_by_prizes_utils.rb'\n\n# `params`의 값은 Logstash 구성에서 `script_params`에 전달된 해시의 값입니다.\ndef register(params)\n    @keep_original_event = params[\"keep_original_event\"]\nend\n\n# 필터 메서드는 이벤트를 받아서 이벤트 목록을 반환해야 합니다.\n# 이벤트를 삭제하는 것은 반환 배열에 포함시키지 않는 것을 의미합니다.\n# 새 이벤트를 생성하는 것은 반환 배열에 LogStash::Event의 인스턴스를 추가하는 것만 필요합니다.\ndef filter(event)\n\n    items = Array.new\n\n    # 요청이 있을 경우 원본 이벤트 보존\n    originalEvent = LogStash::Util::DenormalizationByPrizesHelper::getOriginalEvent(event, @keep_original_event);\n    if not originalEvent.nil?\n        items.push originalEvent\n    end\n\n    # 상품 항목 가져오기 (정규화)\n    prizes = LogStash::Util::DenormalizationByPrizesHelper::getPrizes(event);\n    if prizes.nil?\n        return items\n    end\n   \n    # 복제된 기본 이벤트 생성\n    eventBase = LogStash::Util::DenormalizationByPrizesHelper::getEventBase(event);\n\n    # 필요한 수정을 가한 상품 항목별로 이벤트 생성\n    prizes.each { |prize| \n        items.push LogStash::Util::DenormalizationByPrizesHelper::createEventForPrize(eventBase, prize);\n    }\n\n    return items;\nend\n```\n\n주요 코드를 수정할 필요가 많지 않습니다. 함수 호출을 모듈 이름과 함께 접두사로 붙이면 됩니다. 따라서 필터 기능에 통합된 다른 모듈에 있는 여러 `getEventBase` 함수와 같은 함수들이 있을 경우 충돌 없이 사용할 수 있습니다. 명시적으로 각 경우에 사용할 모듈을 설정하고 가독성을 향상시키기 때문에 좋습니다.\n\n다음 글에서는 필터 코드를 테스트하는 방법에 대해 이야기할 것입니다...","ogImage":{"url":"/assets/img/2024-05-23-HowtoshareRubycodeinLogstash_0.png"},"coverImage":"/assets/img/2024-05-23-HowtoshareRubycodeinLogstash_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"이전 기사에서는 루비 필터를 사용하여 문서를 비정규화하는 방법을 살펴보았습니다. 이 기사에서는 코드를 개선하고 필터간에 코드를 공유하는 방법을 보여드리겠습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"이전 코드에 대해\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기억하시나요? 이전 코드는 다음과 같았습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'params'\"\n        }), \"의 값은 로그스태시 구성에서 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'script_params'\"\n        }), \"로 전달된 해시의 값입니다.\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"register\"\n        }), \"(params)\\n    @keep_original_event = params[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \"]\\nend\\n\\n# 필터 메서드는 이벤트를 받아들이고 이벤트 목록을 반환하여야 합니다.\\n# 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.\\n# 새로운 이벤트를 만들려면 반환된 배열에 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Event\"\n        }), \"의 새 인스턴스를 추가하기만 하면 됩니다.\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(event)\\n\\n    items = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"new\"\n        }), \"\\n\\n    # 원본 이벤트를 유지하도록 요청되었는지 확인\\n    logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"debug\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'keep_original_event is :'\"\n        }), \" + @keep_original_event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \")\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" @keep_original_event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'true'\"\n        }), \"\\n        event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-original'\"\n        }), \");\\n        items.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"push\"\n        }), \" event\\n    end\\n\\n    # 상금 아이템 가져오기 (비정규화)\\n    prizes = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nil\"\n        }), \"?\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"warn\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"No prizes for event \\\"\"\n        }), \" + event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items\\n    end\\n\\n    # 복제된 기본 이벤트 생성\\n    eventBase = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clone\"\n        }), \"();\\n    eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-denormalized'\"\n        }), \");\\n    eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"remove\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n\\n    # 각 상금 아이템별로 필요한 수정과 함께 이벤트 생성\\n    prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"each\"\n        }), \" { |prize|\\n        eventPrize = eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clone\"\n        }), \"();\\n\\n        # 각 상금 아이템 값을 상금 객체로 복사\\n        prize.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"each\"\n        }), \" { |key,value|\\n            eventPrize.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][\\\"\"\n        }), \" + key + \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"]\\\"\"\n        }), \", value)\\n        }\\n\\n        items.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"push\"\n        }), \" eventPrize\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items\\nend\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보시다시피, 우리에게는 매개변수를 설명하는 register 함수와 필터 기능을 구현하는 다른 함수가 2개뿐입니다. 그러나 기능 전체를 한 방법에 구현하는 것은 가독성, 유지 관리 가능성, 테스트 가능성 등 여러 가지 이유로 최선의 선택이 아닙니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"루비 코드 공유\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드를 공유하는 첫 번째 방법은 다른 루비 파일에 일부 함수를 외부화하고 이러한 함수를 우리의 루비 필터에서 호출하는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예를 들어, 우리는 일부 코드 조각을 간단한 함수로 외부화할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"원본 이벤트를 얻기 위한 함수(원하면 현재 이벤트를 유지하려면)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이벤트로부터 상품 배열을 얻기 위한 함수\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각 상품을 위해 복제되는 이벤트 베이스를 구성하는 함수\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각 상품마다 이벤트를 생성하는 함수\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 필요 시 원본 이벤트 유지\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getOriginalEvent\"\n        }), \"(event)\\n    logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"debug\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'keep_original_event is :'\"\n        }), \" + @keep_original_event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" @keep_original_event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'true'\"\n        }), \"\\n        event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-original'\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" event;\\n    end\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" nil;\\nend\\n\\n# 상품 항목 가져오기 (정규화)\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getPrizes\"\n        }), \"(event)\\n    prizes = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nil\"\n        }), \"?\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"warn\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"No prizes for event \\\"\"\n        }), \" + event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \")\\n    end\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" prizes;\\nend\\n\\n# 복제된 베이스 이벤트 생성\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getEventBase\"\n        }), \"(event)\\n    eventBase = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clone\"\n        }), \"();\\n    eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-denormalized'\"\n        }), \");\\n    eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"remove\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" eventBase;\\nend\\n\\n# 필요한 수정을 수행한 현재 상품 항목 복제 이벤트 생성\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createEventForPrize\"\n        }), \"(eventBase, prize)\\n    eventPrize = eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clone\"\n        }), \"();\\n    # 각 상품 항목 값을 상품 객체로 복사\\n    prize.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"each\"\n        }), \" { |key,value|\\n        eventPrize.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][\\\"\"\n        }), \" + key + \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"]\\\"\"\n        }), \", value)\\n    }\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" eventPrize;\\nend\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 코드는 denormalized_by_prizes_utils.rb라는 이름의 파일에 작성되어 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그 이후에 필터의 주요 코드는 다음과 같습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-javascript\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./script/denormalized_by_prizes_utils.rb'\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// `params`의 값은 로그스태시 구성에서 `script_params`로 전달된 해시 값입니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"register\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"params\"\n        }), \") {\\n    @keep_original_event = params[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \"];\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 필터 메서드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 새 이벤트를 생성하려면 반환된 배열에 LogStash::Event 인스턴스를 추가하면 됩니다.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"event\"\n        }), \") {\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" items = [];\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 필요하다면 원본 이벤트를 유지합니다.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" originalEvent = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getOriginalEvent\"\n        }), \"(event);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!originalEvent) {\\n        items.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(originalEvent);\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 상금 아이템(정규화) 가져오기\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" prizes = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getPrizes\"\n        }), \"(event);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (!prizes) {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items;\\n    }\\n   \\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 클론 기본 이벤트 생성\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" eventBase = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getEventBase\"\n        }), \"(event);\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 필요한 수정을 가진 상금 항목별 하나의 이벤트 생성\"\n        }), \"\\n    prizes.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forEach\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"prize\"\n        }), \") {\\n        items.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"push\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createEventForPrize\"\n        }), \"(eventBase, prize));\\n    });\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items;\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기존 코드보다 훨씬 읽기 쉽고 필터 기능의 다른 단계를 직접 확인할 수 있습니다. 작은 함수로 잘 세분화되고 이해하기 쉽게 작성하여 유지보수성이 향상될 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 경우에 따라 코드를 공유하는 여러 파일과 여러 파일이 필요한 필터를 갖고 있는 경우, 충돌이 발생하거나 유지보수성이 일부 저하될 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"모듈 생성하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다른 방법으로 코드를 공유하는 방법은 모듈을 만드는 것입니다. 이 모듈은 같은 기능적 범위의 코드 조각을 그룹화할 것입니다. 우리는 공유 함수를 사용하기 전에 모듈 이름을 지정해야 하기 때문에 충돌이 발생하지 않을 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전에 공유된 함수는 다음과 같이 될 것입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"\\n    include \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Loggable\"\n        }), \"\\n\\n    # 원래 이벤트 유지\\n    def self.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getOriginalEvent\"\n        }), \"(event, keepOriginalEvent)\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"debug\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'keepOriginalEvent is :'\"\n        }), \" + keepOriginalEvent.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" keepOriginalEvent.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'true'\"\n        }), \"\\n            event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-original'\"\n        }), \");\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" event;\\n        end\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" nil;\\n    end\\n\\n    # 상품 항목 가져오기 (정규화 해제)\\n    def self.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getPrizes\"\n        }), \"(event)\\n        prizes = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nil\"\n        }), \"?\\n            logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"warn\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"No prizes for event \\\"\"\n        }), \" + event.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"to_s\"\n        }), \")\\n        end\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" prizes;\\n    end\\n\\n    # 복제 기본 이벤트 생성\\n    def self.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getEventBase\"\n        }), \"(event)\\n        eventBase = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clone\"\n        }), \"();\\n        eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'[@metadata][_index]'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'prizes-denormalized'\"\n        }), \");\\n        eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"remove\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prize\\\"\"\n        }), \");\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" eventBase;\\n    end\\n\\n    # 필요한 수정으로 현재 상품 항목을 위한 복제 이벤트 생성\\n    def self.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createEventForPrize\"\n        }), \"(eventBase, prize)\\n        eventPrize = eventBase.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"clone\"\n        }), \"();\\n        # 각 상품 항목 값을 상품 객체로 복사\\n        prize.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"each\"\n        }), \" { |key,value|\\n            eventPrize.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"set\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"[prize][\\\"\"\n        }), \" + key + \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"]\\\"\"\n        }), \", value)\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" eventPrize;\\n    end\\n\\nend\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"logger 인스턴스를 사용할 수 있도록 Loggable Util 모듈을 포함해야 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"주요 코드는 다음과 같습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"require\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'./script/denormalized_by_prizes_utils.rb'\"\n        }), \"\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`params`\"\n        }), \"의 값은 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Logstash\"\n        }), \" 구성에서 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"`script_params`\"\n        }), \"에 전달된 해시의 값입니다.\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"register\"\n        }), \"(params)\\n    @keep_original_event = params[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"keep_original_event\\\"\"\n        }), \"]\\nend\\n\\n# 필터 메서드는 이벤트를 받아서 이벤트 목록을 반환해야 합니다.\\n# 이벤트를 삭제하는 것은 반환 배열에 포함시키지 않는 것을 의미합니다.\\n# 새 이벤트를 생성하는 것은 반환 배열에 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Event\"\n        }), \"의 인스턴스를 추가하는 것만 필요합니다.\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(event)\\n\\n    items = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Array\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"new\"\n        }), \"\\n\\n    # 요청이 있을 경우 원본 이벤트 보존\\n    originalEvent = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getOriginalEvent\"\n        }), \"(event, @keep_original_event);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" not originalEvent.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nil\"\n        }), \"?\\n        items.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"push\"\n        }), \" originalEvent\\n    end\\n\\n    # 상품 항목 가져오기 (정규화)\\n    prizes = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getPrizes\"\n        }), \"(event);\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"nil\"\n        }), \"?\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items\\n    end\\n   \\n    # 복제된 기본 이벤트 생성\\n    eventBase = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getEventBase\"\n        }), \"(event);\\n\\n    # 필요한 수정을 가한 상품 항목별로 이벤트 생성\\n    prizes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"each\"\n        }), \" { |prize| \\n        items.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"push\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LogStash\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Util\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DenormalizationByPrizesHelper\"\n        }), \"::\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"createEventForPrize\"\n        }), \"(eventBase, prize);\\n    }\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items;\\nend\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"주요 코드를 수정할 필요가 많지 않습니다. 함수 호출을 모듈 이름과 함께 접두사로 붙이면 됩니다. 따라서 필터 기능에 통합된 다른 모듈에 있는 여러 \", _jsx(_components.code, {\n        children: \"getEventBase\"\n      }), \" 함수와 같은 함수들이 있을 경우 충돌 없이 사용할 수 있습니다. 명시적으로 각 경우에 사용할 모듈을 설정하고 가독성을 향상시키기 때문에 좋습니다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 글에서는 필터 코드를 테스트하는 방법에 대해 이야기할 것입니다...\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}