{"pageProps":{"post":{"title":"REST API를 API Gateway, Lambda, DynamoDB, Cognito를 사용하여 배포하는 단계별 가이드  Terraform","description":"","date":"2024-05-23 13:55","slug":"2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform","content":"\n\n![image](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_0.png)\n\n# 소개\n\n우리는 다양한 상황에서 사용할 수 있는 실전 프로젝트를 만들고 싶습니다. 실제 세계에서 매우 일반적인 것으로, 거의 모든 애플리케이션이 모듈식 레고 블록으로 구성된 마이크로서비스에 기반을 두고 있습니다.\n\n특히, 목표는 API 게이트웨이에 호스팅된 API를 만들고, 백엔드는 람다에, 데이터베이스는 DynamoDB에 있는 것입니다. 람다 함수에는 DynamoDB 테이블에서 CRUD 작업 (CREATE, READ, UPDATE, DELETE)을 수행하는 로직이 포함될 것입니다. 그리고 추가로 몇 가지 경로에 대한 공개 액세스를 제한하기 위해 Amazon Cognito를 사용한 인증을 추가할 것입니다. 왜냐하면 데이터베이스에 대한 쓰기 작업은 위험하기 때문입니다.\n\n\n<div class=\"content-ad\"></div>\n\n시칠리아 섬에서 태어났기 때문에 신기한 섬리아 요리 목록을 관리할 수 있는 간단한 API를 생성할 것입니다.\n\n모든 소스 코드는 여기에서 확인하실 수 있습니다:\n\n# 단계 1: 공급자, AWS 지역, S3 백엔드 설정\n\n첫 번째 단계는 AWS를 제공자로 사용하도록 지정하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n# provider.tf\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n```\n\n우리는 하나의 변수만 정의하고 있어요.\n\n```js\n# variables.tf\n\nvariable \"aws_region\" {\n  default   = \"eu-west-3\"\n  type      = string\n}\n```\n\n그런 다음 AWS 관리 콘솔로 이동해서 “S3” AWS 서비스로 이동하여 나중에 사용할 Terraform 상태 파일을 저장할 S3 버킷을 생성하세요. \"key\" 속성으로 지정된 경로에 생성할 거에요. 저는 \"my-api-gateway-lambda-terraform-state\"라고 이름지었어요. 모든 옵션을 기본값으로 남겨두세요.```\n\n<div class=\"content-ad\"></div>\n\n만들었다면, Terraform 구성에서 명시할 것입니다:\n\n```js\n# backend.tf\n\nterraform {\n  backend \"s3\" {\n    bucket = \"my-api-gateway-lambda-terraform-state\"\n    region = var.aws_region\n    key    = \"API-Gateway/terraform.tfstate\"\n  }\n  required_version = \">= 0.13.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 2.7.0\"\n    }\n  }\n}\n```\n\n## 단계 2: Lambda IAM 역할 생성\n\nLambda 함수가 DynamoDB 테이블에서 작업을 수행하려면 해당 권한이 있어야 합니다. 따라서 IAM 역할을 생성해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n먼저 IAM 역할의 Assume Role 정책(Trust Relationship이라고도 함)을 명시적으로 지정해야 합니다. 이는 어떤 리소스 또는 서비스가 원하는 역할을 가져갈 수 있는 지를 나타내는데, 이 경우에는 Lambda 함수입니다. AWS 서비스에 권한을 제공할 때 이 단계는 항상 필수적입니다. 이 정책의 형식은 다음과 같습니다:\n\n```js\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"lambda.amazonaws.com\" # AWS 서비스의 이름\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }]\n}\n```\n\n기본적으로 \"내 계정의 모든 Lambda 함수가 이 역할을 가져올 수 있습니다\"라고 말하고 있습니다.\n\n또한 Lambda에게 함수 실행과 관련된 로그 작성을 위해 필요한 최소한의 권한을 부여해야 합니다. 이 권한들은 이미 AWS에서 제공하는 AWSLambdaBasicExecutionRole이라는 IAM 서비스 역할에 정의되어 있습니다. 따라서 이 서비스 역할을 새 IAM 역할에 연결하여 Lambda에 할당할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n파일 \"iam.tf\"를 생성하고 다음 코드를 붝어 주세요:\n\n```js\n# iam.tf\n\n# 역할 가정 정책\ndata \"aws_iam_policy_document\" \"AWSLambdaTrustPolicy\" {\n  statement {\n    actions    = [\"sts:AssumeRole\"]\n    effect     = \"Allow\"\n    principals {\n      type        = \"Service\"\n      identifiers = [\"lambda.amazonaws.com\"]\n    }\n  }\n}\n\n# IAM 역할 정의 및 가정 역할 정책 첨부\nresource \"aws_iam_role\" \"terraform_function_role\" {\n  name               = \"terraform_function_role\"\n  assume_role_policy = data.aws_iam_policy_document.AWSLambdaTrustPolicy.json\n}\n\n# 방금 정의한 IAM 역할에 IAM 서비스 역할 첨부\n# AWSLambdaBasicExecutionRole은 람다 함수에 최소한의 권한을 부여합니다\n# (실행에 대한 로그 작성, 오류, 디버깅 등)\nresource \"aws_iam_role_policy_attachment\" \"terraform_lambda_policy\" {\n  role       = aws_iam_role.terraform_function_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}\n```\n\n또한, 이외에도 말씀드린대로 Lambda 함수가 생성할 DynamoDB 테이블에 액세스해야 합니다. 이를 위해 DynamoDB 테이블에서 수행할 모든 작업이 명시적으로 허용된 JSON 정책 문서를 작성합니다:\n\n```js\n// lambda_dynamodb_policy.json\n\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n          \"Sid\": \"ListAndDescribe\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"dynamodb:List*\",\n              \"dynamodb:DescribeReservedCapacity*\",\n              \"dynamodb:DescribeLimits\",\n              \"dynamodb:DescribeTimeToLive\"\n          ],\n          \"Resource\": \"*\"\n      },\n      {\n          \"Sid\": \"SpecificTable\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"dynamodb:BatchGet*\",\n              \"dynamodb:DescribeStream\",\n              \"dynamodb:DescribeTable\",\n              \"dynamodb:Get*\",\n              \"dynamodb:Query\",\n              \"dynamodb:Scan\",\n              \"dynamodb:BatchWrite*\",\n              \"dynamodb:CreateTable\",\n              \"dynamodb:Delete*\",\n              \"dynamodb:Update*\",\n              \"dynamodb:PutItem\"\n          ],\n          \"Resource\": \"arn:aws:dynamodb:*:*:table/dishes\" // DynamoDB 테이블\n      }\n  ]\n}\n```\n\n<div class=\"content-ad\"></div>\n\nLambda 함수가 DynamoDB 테이블에서 CRUD 작업(Get, Put, Update, Delete, Scan, Query 및 기타 작업)을 수행할 수 있는 정책을 정의하고, \"dishes\"라는 이름의 테이블을 사용할 것입니다.\n\n\"iam.tf\" 파일에서는 JSON 문서에 정의된 정책을 IAM 역할에 부착하도록 다음과 같이 작성합니다:\n\n```js\n# iam.tf\n\n# DynamoDB에 액세스하기 위한 IAM 역할에 사용자 지정 정책 부착\nresource \"aws_iam_role_policy\" \"lambda_dynamodb_policy\" {\n  name   = \"lambda_dynamodb_policy\"\n  role   = aws_iam_role.lambda-iam-role.name\n  policy = file(\"${path.module}/lambda_dynamodb_policy.json\")\n}\n```\n\n# 단계 3: Lambda 코드 설정하기\n\n<div class=\"content-ad\"></div>\n\nLambda 함수를 설정하는 것이 다음 단계입니다. 이 함수는 DynamoDB 테이블과 상호 작용할 것입니다. 이 함수는 Python으로 작성될 것입니다.\n\nLambda 함수 안에서는 각각의 작업에 대한 메서드를 정의하고 API Gateway로 응답을 반환할 수 있습니다. 우리는 함수의 코드를 Python으로 작성할 것입니다.\n\n우선적으로 Lambda를 테스트할 때 무슨 일이 벌어지는지 볼 수 있도록 로거를 설정합니다. 그런 다음 lambda_handler() 안에서는 AWS 서비스와 상호 작용하기 위해 사용되는 boto3 라이브러리를 활용하여 DynamoDB 클라이언트를 선언합니다. Lambda를 트리거하는 이벤트는 API Gateway에서 오는 HTTP 요청입니다. 우리는 이를 통해 HTTP 메소드를 읽고 Lambda가 DynamoDB 테이블에서 수행해야 하는 작업을 구별할 수 있습니다.\n\nREST API는 트리 구조로 구성되어 있으며, 우리는 이를 다음과 같이 구조화하고 싶습니다:\n\n<div class=\"content-ad\"></div>\n\n\n![Image](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_1.png)\n\n우리는 다음을 할 수 있기를 원합니다:\n\n- GET dishes/ : 모든 요리 항목 검색\n- GET dish/'dishId' : ID로 특정 요리 항목 검색\n- POST dish/ : 새로운 요리 항목 저장\n- PATCH dish/ : 특정 요리 항목의 속성 업데이트\n- DELETE dish/ : 테이블에서 요리 항목 삭제\n\n테이블의 모든 항목을 가져 오기 위해 재귀 함수 recursive_scan을 활용하며, 이 함수는 DynamoDB 테이블에서 레코드를 효율적으로 스캔하는 데 사용됩니다.\n\n\n<div class=\"content-ad\"></div>\n\n표준 DynamoDB의 scan 작업은 테이블의 모든 항목을 읽는 표준 접근 방식입니다. 그러나 DynamoDB의 분산 특성과 확장성 때문에, 단일 scan 작업으로는 특히 테이블이 큰 경우 모든 항목을 한 번에 검색하지 못할 수 있습니다. DynamoDB는 결과를 페이지별로 반환하며, 다음 결과 페이지가 시작되는 위치를 나타내는 토큰(LastEvaluatedKey)과 함께 항목의 하위 집합을 반환합니다.\n\nrecursive_scan 메서드는 모든 페이지의 결과를 재귀적으로 가져와서 더 이상 페이지가 남아있지 않을 때까지(응답에 LastEvaluatedKey가 없을 때) 검색 프로세스를 최적화합니다. 이를 통해 페이지 수에 관계없이 DynamoDB 테이블의 모든 항목을 효율적으로 검색할 수 있습니다.\n\n```js\ndef recursive_scan(scan_params, items):\n    response = table.scan(**scan_params)\n    items += response['Items']\n    if 'LastEvaluatedKey' in response:\n        scan_params['ExclusiveStartKey'] = response['LastEvaluatedKey']\n        recursive_scan(scan_params, items)\n    return items\n```\n\n여기에 Lambda 함수의 전체 코드가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n# lambda_code.py\n\nimport json\nimport logging\nimport boto3\nfrom decimal import Decimal\nfrom botocore.exceptions import ClientError\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('dishes')\n\ndish_path = '/dish'\ndishes_path = '/dishes'\n\ndef lambda_handler(event, context):\n\n    logger.info('API event: {}'.format(event))\n\n    response = None\n\n    try:\n        http_method = event.get('httpMethod')\n        path = event.get('path')\n\n        if http_method == 'GET' and path == dishes_path:\n            response = get_all_dishes()\n\n        elif http_method == 'GET' and path == dish_path:\n            dish_id = event['queryStringParameters']['dish_id']\n            response = get_dish(dish_id)\n\n        elif http_method == 'POST' and path == dish_path:\n            body = json.loads(event['body'])\n            response = save_dish(body)\n\n        elif http_method == 'PATCH' and path == dish_path:\n            body = json.loads(event['body'])\n            response = update_dish(body['dish_id'], body['update_key'], body['update_value'])\n\n        elif http_method == 'DELETE':\n            body = json.loads(event['body'])\n            response = delete_dish(body['dish_id'])\n\n        else:\n            response = generate_response(404, '리소스를 찾을 수 없습니다.')\n\n    except ClientError as e:\n        logger.error('오류: {}'.format(e))\n        response = generate_response(404, e.response['Error']['Message'])\n\n    return response\n\ndef get_dish(dish_id):\n    try:\n        response = table.get_item(Key={'dish_id': dish_id})\n        item = response['Item']\n        logger.info('항목 조회: {}'.format(item))\n        return generate_response(200, item)\n    except ClientError as e:\n        logger.error('오류: {}'.format(e))\n        return generate_response(404, e.response['Error']['Message'])\n\ndef get_all_dishes():\n    try:\n        scan_params = {\n            'TableName': table.name\n        }\n        items = recursive_scan(scan_params, [])\n        logger.info('모든 항목 조회: {}'.format(items))\n        return generate_response(200, items)\n    except ClientError as e:\n        logger.error('오류: {}'.format(e))\n        return generate_response(404, e.response['Error']['Message'])\n\ndef recursive_scan(scan_params, items):\n    response = table.scan(**scan_params)\n    items += response['Items']\n    if 'LastEvaluatedKey' in response:\n        scan_params['ExclusiveStartKey'] = response['LastEvaluatedKey']\n        recursive_scan(scan_params, items)\n    return items\n\ndef save_dish(item):\n    try:\n        table.put_item(Item=item)\n        logger.info('항목 저장: {}'.format(item))\n        body = {\n            '작업': '저장',\n            '메시지': '성공',\n            '항목': item\n        }\n        return generate_response(200, body)\n    except ClientError as e:\n        logger.error('오류: {}'.format(e))\n        return generate_response(404, e.response['Error']['Message'])\n\ndef update_dish(dish_id, update_key, update_value):\n    try:\n        response = table.update_item(\n            Key={'dish_id': dish_id},\n            UpdateExpression=f'SET {update_key} = :value',\n            ExpressionAttributeValues={':value': update_value},\n            ReturnValues='UPDATED_NEW'\n        )\n        logger.info('항목 업데이트: {}'.format(response))\n        body = {\n            '작업': '업데이트',\n            '메시지': '성공',\n            '항목': response\n        }\n        return generate_response(200, response)\n    except ClientError as e:\n        logger.error('오류: {}'.format(e))\n        return generate_response(404, e.response['Error']['Message'])\n\ndef delete_dish(dish_id):\n    try:\n        response = table.delete_item(\n            Key={'dish_id': dish_id},\n            ReturnValues='ALL_OLD'\n        )\n        logger.info('항목 삭제: {}'.format(response))\n        body = {\n            '작업': '삭제',\n            '메시지': '성공',\n            '항목': response\n        }\n        return generate_response(200, body)\n    except ClientError as e:\n        logger.error('오류: {}'.format(e))\n        return generate_response(404, e.response['Error']['Message'])\n\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, Decimal):\n            # 정수 또는 소수인지 확인합니다\n            if obj % 1 == 0:\n                return int(obj)\n            else:\n                return float(obj)\n        # 기본 클래스의 default 메서드가 TypeError를 발생시키도록 합니다\n        return super(DecimalEncoder, self).default(obj)\n\ndef generate_response(status_code, body):\n    return {\n        'statusCode': status_code,\n        'headers': {\n            'Content-Type': 'application/json',\n        },\n        'body': json.dumps(body, cls=DecimalEncoder)\n    }\n```\n\n그런 다음, “lambda.tf” Terraform 파일에는 Lambda 코드를 압축하는 데이터 블록을 정의하고 해당 Lambda 자체에 대한 리소스 블록이 있습니다:\n\n```js\ndata \"archive_file\" \"lambda_code\" {\n  type        = \"zip\"\n  source_file = \"${path.module}/lambda_code.py\"\n  output_path = \"${path.module}/lambda_code.zip\"\n}\n\nresource \"aws_lambda_function\" \"my-lambda-function\" {\n  filename      = \"${path.module}/lambda_code.zip\"\n  function_name = \"api-gateway-lambda\"\n  role          = aws_iam_role.lambda-iam-role.arn\n  handler       = \"lambda_code.lambda_handler\"\n  runtime       = \"python3.12\"\n\n  source_code_hash = data.archive_file.lambda_code.output_base64sha256\n}\n```\n\n# 단계 3: DynamoDB 설정\n\n\n<div class=\"content-ad\"></div>\n\n시칠리아 요리 테이블을 만드는 시간이 왔습니다!\n\n![Sicilian Dishes](https://miro.medium.com/v2/resize:fit:480/1*WMK7Qze__kL4gO7lXQ5LKg.gif)\n\n`database.tf` 파일을 생성하고 다음 코드를 붙여넣으세요:\n\n```js\n# 다이나모DB 테이블 정의\nresource \"aws_dynamodb_table\" \"my_dynamodb_table\" {\n  name         = \"dishes\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"dish_id\"\n\n  attribute {\n    name = \"dish_id\"\n    type = \"S\"\n  }\n\n  tags = {\n    Name = \"dishes-table\"\n  }\n}\n\nlocals {\n  json_data = file(\"${path.module}/dishes.json\")\n  dishes    = jsondecode(local.json_data)\n}\n\n# 각 요리별로 다이나모DB 테이블에 새 항목 생성\nresource \"aws_dynamodb_table_item\" \"dishes\" {\n  for_each   = local.dishes\n  table_name = aws_dynamodb_table.my_dynamodb_table.name\n  hash_key   = aws_dynamodb_table.my_dynamodb_table.hash_key\n  item       = jsonencode(each.value)\n}\n```\n\n<div class=\"content-ad\"></div>\n\nJSON 문서에서 데이터를 가져 오므로 \"dishes.json\" 파일을 만드십시오. 각 속성에 대해 유형을 지정합니다 (S = 문자열, N = 숫자, L = 목록).\n\n```js\n// dishes.json\n\n{\n    \"Item1\": {\n        \"dish_id\": {\n            \"S\": \"1\"\n        },\n        \"name\": {\n            \"S\": \"아란치니\"\n        },\n        \"description\": {\n            \"S\": \"치즈, 완두 및 고기가 들어있는 튀긴 쌀 공예볼\"\n        },\n        \"price\": {\n            \"N\": \"8.99\"\n        },\n        \"ingredients\": {\n            \"L\": [\n                {\"S\": \"쌀\"},\n                {\"S\": \"치즈\"},\n                {\"S\": \"완두\"},\n                {\"S\": \"고기\"},\n                {\"S\": \"빵 가루\"}\n            ]\n        }\n    },\n    \"Item2\": {\n        \"dish_id\": {\n            \"S\": \"2\"\n        },\n        \"name\": {\n            \"S\": \"카놀리\"\n        },\n        \"description\": {\n            \"S\": \"튜브 모양의 튀겨진 페이스트리 도우로 구운 쉘에 달콤하고 부드러운 필링을 채운 시칠리아 디저트\"\n        },\n        \"price\": {\n            \"N\": \"5.99\"\n        },\n        \"ingredients\": {\n            \"L\": [\n                {\"S\": \"밀가루\"},\n                {\"S\": \"리코타 치즈\"},\n                {\"S\": \"설탕\"},\n                {\"S\": \"초콜릿 칩\"}\n            ]\n        }\n    },\n    \"Item3\": {\n        \"dish_id\": {\n            \"S\": \"3\"\n        },\n        \"name\": {\n            \"S\": \"파스타 알라 노르마\"\n        },\n        \"description\": {\n            \"S\": \"토마토 소스, 튀긴 가지, 갈은 리코타 샐라타 치즈 및 바질이 들어간 파스타\"\n        },\n        \"price\": {\n            \"N\": \"12.99\"\n        },\n        \"ingredients\": {\n            \"L\": [\n                {\"S\": \"파스타\"},\n                {\"S\": \"토마토 소스\"},\n                {\"S\": \"가지\"},\n                {\"S\": \"리코타 치즈\"},\n                {\"S\": \"바질\"}\n            ]\n        }\n    },\n    \"Item4\": {\n        \"dish_id\": {\n            \"S\": \"4\"\n        },\n        \"name\": {\n            \"S\": \"카사타\"\n        },\n        \"description\": {\n            \"S\": \"과일 주스 또는 리큐르로 적시한 둥근 스펀지 케이크로 리코타 치즈, 설탕이 묻혔고 카놀리 크림과 유사한 초콜릿 또는 바닐라 필링이 층층이 쌓인 시칠리아 케이크\"\n        },\n        \"price\": {\n            \"N\": \"15.99\"\n        },\n        \"ingredients\": {\n            \"L\": [\n                {\"S\": \"스펀지 케이크\"},\n                {\"S\": \"과일 주스\"},\n                {\"S\": \"리큐르\"},\n                {\"S\": \"리코타 치즈\"},\n                {\"S\": \"설탕\"},\n                {\"S\": \"초콜릿\"},\n                {\"S\": \"바닐라\"}\n            ]\n        }\n    }\n}\n```\n\n# 단계 4: API Gateway 설정\n\n이제 API 게이트웨이를 설정 할 시간입니다. API 게이트웨이는 프록시 역할을합니다. 클라이언트에서 Lambda 함수로 오는 HTTP 요청을 전달하며이 \"트릭\"을 사용하여 원래의 HTTP 요청이 전송됩니다 (GET, POST 등)\n\n<div class=\"content-ad\"></div>\n\n먼저 API 게이트웨이 REST API를 설정하고 두 가지 API 리소스를 만듭니다. 각각의 경로(/dishes 및 /dish)를 위한 한 가지씩:\n\n```js\n# api_gateway.tf\n\n# API 게이트웨이\nresource \"aws_api_gateway_rest_api\" \"API-gw\" {\n  name        = \"lambda_rest_api\"\n  description = \"시칠리아 요리를 위한 REST API입니다.\"\n  endpoint_configuration {\n    types = [\"REGIONAL\"]\n  }\n}\n\n# \"/dishes\" 경로를 위한 API 리소스\nresource \"aws_api_gateway_resource\" \"API-resource-dishes\" {\n  rest_api_id = aws_api_gateway_rest_api.API-gw.id\n  parent_id   = aws_api_gateway_rest_api.API-gw.root_resource_id\n  path_part   = \"dishes\"\n}\n\n# \"/dish\" 경로를 위한 API 리소스\nresource \"aws_api_gateway_resource\" \"API-resource-dish\" {\n  rest_api_id = aws_api_gateway_rest_api.API-gw.id\n  parent_id   = aws_api_gateway_rest_api.API-gw.root_resource_id\n  path_part   = \"dishes\"\n}\n```\n\n우리가 원하는 API 엔드포인트는 다음과 같습니다:\n\n- GET /dishes: 모든 시칠리아 요리의 목록을 가져옵니다.\n- GET /dishes/'dishId': ID에 따라 특정 요리의 세부 정보를 가져옵니다.\n- POST /dishes: 새로운 시칠리아 요리를 데이터베이스에 추가합니다.\n- PATCH /dishes/'dishId': 특정 요리의 세부 정보를 업데이트합니다.\n- DELETE /dishes/'dishId': 데이터베이스에서 시칠리아 요리를 삭제합니다.\n\n<div class=\"content-ad\"></div>\n\n각 HTTP 메서드에 대해 아래와 같이 몇 가지 블록을 정의합니다:\n\n- Method (HTTP 메서드 지정)\n- Integration (Lambda와 통합)\n- Method response\n- Integration response\n\n![이미지](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_2.png)\n\n“REST API”는 만들 API Gateway 객체 모두를 담고 있는 컨테이너입니다.\n\n<div class=\"content-ad\"></div>\n\nAPI Gateway에 들어오는 모든 요청은 다음과 일치해야 합니다:\n\n- 구성된 리소스 (특정한 /dish 또는 다른 /dishes)\n- HTTP 메서드\n\nAPI 게이트웨이 리소스의 각 메서드는 Lambda 함수로 들어오는 요청이 보내지는 통합을 가지고 있습니다. \"AWS_PROXY\" 통합 유형은 API 게이트웨이가 AWS Lambda API를 호출하여 Lambda 함수의 \"invocation\"을 생성하도록합니다. 그런 다음 우리는 메서드 응답(관련된 상태 코드로) 및 통합 응답을 구성합니다.\n\n```js\n# . . .\n\n# Lambda 함수를 트리거하는 API 게이트웨이 정의\nresource \"aws_api_gateway_rest_api\" \"API-gw\" {\n  name        = \"lambda_rest_api\"\n  description = \"이것은 시칠리아 요리를 위한 REST API입니다.\"\n  endpoint_configuration {\n    types = [\"REGIONAL\"]\n  }\n}\n\nresource \"aws_api_gateway_resource\" \"API-resource-dish\" {\n  rest_api_id = aws_api_gateway_rest_api.API-gw.id\n  parent_id   = aws_api_gateway_rest_api.API-gw.root_resource_id\n  path_part   = \"dish\"\n}\n\nresource \"aws_api_gateway_resource\" \"API-resource-dishes\" {\n  rest_api_id = aws_api_gateway_rest_api.API-gw.id\n  parent_id   = aws_api_gateway_rest_api.API-gw.root_resource_id\n  path_part   = \"dishes\"\n}\n\n#####################################################################################################\n########################### GET ALL /dishes #########################################################\n#####################################################################################################\n\nresource \"aws_api_gateway_method\" \"GET_all_method\" {\n  rest_api_id   = aws_api_gateway_rest_api.API-gw.id\n  resource_id   = aws_api_gateway_resource.API-resource-dishes.id\n  http_method   = \"GET\"\n  authorization = \"NONE\"\n}\n\n. . .\n```\n\n<div class=\"content-ad\"></div>\n\n다음으로 API 게이트웨이가 람다 함수를 호출할 수 있도록 설정해야 합니다:\n\n```js\n# . . .\n\n# API 게이트웨이가 람다에 접근할 수 있도록 허용\nresource \"aws_lambda_permission\" \"apigw\" {\n  statement_id  = \"AllowAPIGatewayInvoke\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.my-lambda-function.function_name\n  principal     = \"apigateway.amazonaws.com\"\n\n  # 여기서 /*/* 부분은 \"REST API\" 내에서 어떤 리소스의 어떤 메서드에서도 접근할 수 있게 합니다.\n  source_arn = \"${aws_api_gateway_rest_api.API-gw.execution_arn}/*/*\"\n}\n```\n\n그런 다음 API 배포를 구성하고 \"prod\"라는 스테이지를 생성하여, API 게이트웨이 URL이 \"/prod/dishes\"와 같은 형태가 됩니다:\n\n```js\n# . . .\n\n# 배포\nresource \"aws_api_gateway_deployment\" \"example\" {\n\n  depends_on = [\n    aws_api_gateway_integration.GET_one_lambda_integration,\n    aws_api_gateway_integration.GET_all_lambda_integration,\n    aws_api_gateway_integration.PATCH_lambda_integration,\n    aws_api_gateway_integration.POST_lambda_integration,\n    aws_api_gateway_integration.DELETE_lambda_integration\n  ]\n\n  triggers = {\n    redeployment = sha1(jsonencode([\n      aws_api_gateway_resource.API-resource-dish,\n      aws_api_gateway_method.GET_one_method,\n      aws_api_gateway_integration.GET_one_lambda_integration,\n      aws_api_gateway_method.GET_all_method,\n      aws_api_gateway_integration.GET_all_lambda_integration,\n      aws_api_gateway_method.POST_method,\n      aws_api_gateway_integration.POST_lambda_integration,\n      aws_api_gateway_method.PATCH_method,\n      aws_api_gateway_integration.PATCH_lambda_integration,\n      aws_api_gateway_method.DELETE_method,\n      aws_api_gateway_integration.DELETE_lambda_integration\n    ]))\n  }\n\n  rest_api_id = aws_api_gateway_rest_api.API-gw.id\n}\n\n# 배포 스테이지\nresource \"aws_api_gateway_stage\" \"my-prod-stage\" {\n  deployment_id = aws_api_gateway_deployment.example.id\n  rest_api_id   = aws_api_gateway_rest_api.API-gw.id\n  stage_name    = \"prod\"\n\n  depends_on = [aws_cloudwatch_log_group.rest-api-logs]\n}\n```\n\n<div class=\"content-ad\"></div>\n\n백그라운드에서 요청을 보낼 때 무엇이 일어나는지 기록하기 위해 CloudWatch 로그 그룹을 설정하고 있습니다. CloudWatch LogGroup의 이름은 API-Gateway-Execution-Logs\\_'YOUR_API_ID'/'YOUR_STAGE_NAME' 형식이어야 합니다.\n\n그런 다음 API Gateway 스테이지 수준 실행 로깅을 설정하기 위해 \"method_settings\" 리소스를 사용합니다.\n\n```js\n# . . .\n\n# 디버깅 목적의 CloudWatch 로그 그룹\nresource \"aws_cloudwatch_log_group\" \"rest-api-logs\" {\n  name              = \"API-Gateway-Execution-Logs_${aws_api_gateway_rest_api.API-gw.id}/prod\"\n  retention_in_days = 7\n}\n\n# 메서드 설정\nresource \"aws_api_gateway_method_settings\" \"my_settings\" {\n  rest_api_id = aws_api_gateway_rest_api.API-gw.id\n  stage_name  = aws_api_gateway_stage.my-prod-stage.stage_name\n  method_path = \"*/*\"\n  settings {\n    logging_level = \"INFO\"\n    data_trace_enabled = true\n    metrics_enabled = true\n  }\n}\n```\n\n다음으로 CORS 모듈을 정의합니다. AWS 문서는 CORS 및 통합 및 통합 응답과 관련된 모든 뉘앙스를 잘 설명하고 있으므로 여기에 링크만 첨부하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n# . . .\n\nmodule \"cors\" {\n  source = \"./modules/cors\"\n\n  api_id            = aws_api_gateway_rest_api.API-gw.id\n  api_resource_id   = aws_api_gateway_resource.API-resource-dish.id\n  allow_credentials = true\n}\n```\n\n![Image](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_3.png)\n\n이 구조를 따라가서 각 파일에 다음 코드를 붙여넣으세요.\n\ncors.tf:\n\n\n\n<div class=\"content-ad\"></div>\n\n```js\n# cors.tf\n\nresource \"aws_api_gateway_method\" \"_\" {\n  rest_api_id   = var.api_id\n  resource_id   = var.api_resource_id\n  http_method   = \"OPTIONS\"\n  authorization = \"NONE\"\n}\n\n# aws_api_gateway_integration._\nresource \"aws_api_gateway_integration\" \"_\" {\n  rest_api_id = var.api_id\n  resource_id = var.api_resource_id\n  http_method = aws_api_gateway_method._.http_method\n\n  type = \"MOCK\"\n\n  request_templates = {\n    \"application/json\" = \"{ \\\"statusCode\\\": 200 }\"\n  }\n}\n\n# aws_api_gateway_integration_response._\nresource \"aws_api_gateway_integration_response\" \"_\" {\n  rest_api_id = var.api_id\n  resource_id = var.api_resource_id\n  http_method = aws_api_gateway_method._.http_method\n  status_code = 200\n\n  response_parameters = local.integration_response_parameters\n\n  depends_on = [\n    aws_api_gateway_integration._,\n    aws_api_gateway_method_response._,\n  ]\n}\n\n# aws_api_gateway_method_response._\nresource \"aws_api_gateway_method_response\" \"_\" {\n  rest_api_id = var.api_id\n  resource_id = var.api_resource_id\n  http_method = aws_api_gateway_method._.http_method\n  status_code = 200\n\n  response_parameters = local.method_response_parameters\n\n  response_models = {\n    \"application/json\" = \"Empty\"\n  }\n\n  depends_on = [\n    aws_api_gateway_method._,\n  ]\n}\n```\n\nheaders.tf:\n\n```js\n# headers.tf\n\nlocals {\n  headers = tomap({\n     \"Access-Control-Allow-Headers\"= \"'${join(\",\", var.allow_headers)}'\",\n    \"Access-Control-Allow-Methods\"= \"'${join(\",\", var.allow_methods)}'\",\n    \"Access-Control-Allow-Origin\"= \"'${var.allow_origin}'\",\n    \"Access-Control-Max-Age\"= \"'${var.allow_max_age}'\",\n    \"Access-Control-Allow-Credentials\"= var.allow_credentials ? \"'true'\" : \"\"\n  })\n\n  # Pick non-empty header values\n  header_values = compact(values(local.headers))\n\n  # Pick names that from non-empty header values\n  header_names = matchkeys(\n    keys(local.headers),\n    values(local.headers),\n    local.header_values\n  )\n\n  # Parameter names for method and integration responses\n  parameter_names = formatlist(\"method.response.header.%s\", local.header_names)\n\n  # Map parameter list to \"true\" values\n  true_list = split(\"|\",\n    replace(join(\"|\", local.parameter_names), \"/[^|]+/\", \"true\")\n  )\n\n  # Integration response parameters\n  integration_response_parameters = zipmap(\n    local.parameter_names,\n    local.header_values\n  )\n\n  # Method response parameters\n  method_response_parameters = zipmap(\n    local.parameter_names,\n    local.true_list\n  )\n}\n```\n\nvariables.tf:\n\n<div class=\"content-ad\"></div>\n\n```json\n변수 \"api_id\" {\n  설명 = \"API 식별자\"\n}\n\n# var.api_resource_id\n변수 \"api_resource_id\" {\n  설명 = \"API 리소스 식별자\"\n}\n\n# -----------------------------------------------------------------------------\n# Variables: CORS-related\n# -----------------------------------------------------------------------------\n\n# var.allow_headers\n변수 \"allow_headers\" {\n  설명 = \"허용 헤더\"\n  유형 = list(string)\n\n  기본값 = [\n    \"Authorization\",\n    \"Content-Type\",\n    \"X-Amz-Date\",\n    \"X-Amz-Security-Token\",\n    \"X-Api-Key\",\n  ]\n}\n\n# var.allow_methods\n변수 \"allow_methods\" {\n  설명 = \"허용 메소드\"\n  유형 = list(string)\n\n  기본값 = [\n    \"OPTIONS\",\n    \"HEAD\",\n    \"GET\",\n    \"POST\",\n    \"PUT\",\n    \"PATCH\",\n    \"DELETE\",\n  ]\n}\n\n# var.allow_origin\n변수 \"allow_origin\" {\n  설명 = \"허용 출처\"\n  유형 = string\n  기본값 = \"*\"\n}\n\n# var.allow_max_age\n변수 \"allow_max_age\" {\n  설명 = \"응답 캐싱 시간을 허용\"\n  유형 = string\n  기본값 = \"7200\"\n}\n\n# var.allowed_credentials\n변수 \"allow_credentials\" {\n  설명 = \"자격 증명 허용\"\n  기본값 = false\n}\n```\n\n마지막으로 \"outputs.tf\" 파일에 아래와 같이 API Gateway를 적용한 후의 호출 URL을 출력하는 블록을 선언하세요:\n\n```json\n# 테스트 API Gateway URL\noutput \"api_gateway_url\" {\n  value = aws_api_gateway_deployment.example.invoke_url\n}\n```\n\n# 단계 5: 코그니토로 인증 추가하기\n\n`\n\n<div class=\"content-ad\"></div>\n\n다이나모DB 테이블의 작업(POST, PATCH, DELETE)은 위험할 수 있습니다. REST API를 공개적으로 노출하고 싶지 않으므로 일부 HTTP 엔드포인트에 대한 액세스를 제한하고 싶습니다. 따라서 인증을 구현하고자 하는데, 첫 번째 단계는 Cognito 사용자 풀을 생성하는 것입니다.\n\n```js\n# authentication.tf\n\nresource \"aws_cognito_user_pool\" \"pool\" {\n  name = \"mypool\"\n}\n```\n\n응용 프로그램이 사용자 풀에 액세스할 수 있도록하려면 사용자 풀 클라이언트를 정의해야 합니다. 우리는 기본 사용자 정보(email, openid, profile)에 대한 허용된 OAuth 플로 및 사용자 스코프를 명시하고 있습니다. 클라이언트 시크릿을 생성하지 않습니다. 또한 관리자 및 사용자 비밀번호 인증이 모두 허용됩니다. Cognito가 식별 제공자입니다. 그런 다음 OAuth 2.0 인증 서버가 사용자를 성공적으로 인증한 후 사용자를 리디렉션해야 할 위치 및 로그아웃 후 리디렉션할 위치가 정의됩니다. 어쨌든 이 프로젝트에 대해서는 이렇게까지 자세히 묘사하는 것은 그리 중요하지 않습니다.\n\n```js\n# authentication.tf\n\nresource \"aws_cognito_user_pool_client\" \"client\" {\n  name = \"client\"\n  allowed_oauth_flows_user_pool_client = true\n  generate_secret = false\n  allowed_oauth_scopes = [\"aws.cognito.signin.user.admin\",\"email\", \"openid\", \"profile\"]\n  allowed_oauth_flows = [\"implicit\", \"code\"]\n  explicit_auth_flows = [\"ADMIN_NO_SRP_AUTH\", \"USER_PASSWORD_AUTH\"]\n  supported_identity_providers = [\"COGNITO\"]\n\n  user_pool_id = aws_cognito_user_pool.pool.id\n  callback_urls = [\"https://example.com\"]\n  logout_urls = [\"https://example.com\"]\n}\n```\n\n<div class=\"content-ad\"></div>\n\n유저 풀 내에서 API 액세스를 테스트하기 위해 유저도 생성합니다.\n\n```js\n# authentication.tf\n\nresource \"aws_cognito_user\" \"example\" {\n  user_pool_id = aws_cognito_user_pool.pool.id\n  username = \"mattia\"\n  password = \"Test@123\"\n}\n```\n\n이 구성을 적용하여 모든 리소스가 올바르게 생성되었는지 확인해보세요 (유저 풀, 유저 풀 클라이언트 및 유저). AWS 관리 콘솔에서 “Amazon Cognito”로 이동하여 “User pools”를 선택하고 방금 생성한 풀을 클릭합니다. User pool ID를 메모하세요.\n\n<img src=\"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n새 사용자도 확인할 수 있습니다:\n\n![이미지](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_5.png)\n\n“앱 통합”을 클릭하고 “앱 클라이언트 및 분석”으로 내려가면 우리가 만든 클라이언트도 확인할 수 있습니다. 클라이언트 ID를 메모해 두세요.\n\n![이미지](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_6.png)\n\n<div class=\"content-ad\"></div>\n\n인증을 실제로 구현하고 애플리케이션의 일부 API 엔드포인트에 대한 공개 액세스를 제한하려면 먼저 Cognito 사용자 풀 내에서 Authorizer를 정의해야 합니다. Authorizer가 활성화되면 Lambda가 트리거되기 전에 수신된 요청 토큰이 먼저 이 Cognito 사용자 풀과 대조되어야 합니다. 따라서 \"api_gateway.tf\"에서 Authorizer를 정의합니다:\n\n```js\n# api_gateway.tf\n\nresource \"aws_api_gateway_authorizer\" \"demo\" {\n  name = \"my_apig_authorizer2\"\n  rest_api_id = aws_api_gateway_rest_api.API-gw.id\n  type = \"COGNITO_USER_POOLS\"\n  provider_arns = [aws_cognito_user_pool.pool.arn]\n}\n```\n\n기억하시나요? HTTP 메서드의 리소스 블록을 정의할 때 \"authorization\"을 \"NONE\"으로 설정했던 것을요. 이제 이 값을 변경하여 \"COGNITO_USER_POOLS\"로 설정하고 Authorizer ID를 지정하려고 합니다. 예를 들어 POST HTTP 메서드의 경우:\n\n```js\n# api_gateway.tf\n\n#####################################################################################################\n########################### POST /dish #########################################################\n#####################################################################################################\n\nresource \"aws_api_gateway_method\" \"POST_method\" {\n  rest_api_id   = aws_api_gateway_rest_api.API-gw.id\n  resource_id   = aws_api_gateway_resource.API-resource-dish.id\n  http_method   = \"POST\"\n  # authorization = \"NONE\" // 주석 처리\n  authorization = \"COGNITO_USER_POOLS\"\n  authorizer_id = aws_api_gateway_authorizer.demo.id\n}\n```\n\n<div class=\"content-ad\"></div>\n\n위의 모든 중요한 엔드포인트(POST, PATCH, DELETE)에 대해 이 작업을 수행하십시오.\n\n더불어 이 구성을 적용하면 Postman으로 새 요청을 보내면 401 Unauthorized가 반환될 것입니다:\n\n![image](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_7.png)\n\n이제 HTTP 요청을 제출할 때 인가를 받기 위해 액세스 토큰을 제공해야 합니다. 액세스 토큰을 생성하려면 이전에 기록한 정보를 사용하여 \"aws cognito-idp\" 명령을 사용할 것입니다:\n\n<div class=\"content-ad\"></div>\n\n```md\naws cognito-idp admin-initiate-auth --user-pool-id <USER_POOL_ID> --client-id <CLIENT_ID> --auth-flow ADMIN_NO_SRP_AUTH --auth-parameters USERNAME=mattia,PASSWORD=Test@123\n```\n\n위 명령어에서 User Pool ID, User Pool client ID, 그리고 이전에 정의한 테스트 사용자의 사용자 이름과 암호를 교체해야 합니다.\n\n우리는 Cognito 사용자 풀에 대한 테스트 사용자를 인증하고, 그 결과로 액세스 토큰을 받습니다. 위 명령어의 출력은 아래와 유사합니다:\n\n```md\n{\n\"ChallengeParameters\": {},\n\"AuthenticationResult\": {\n\"AccessToken\": <ACCESS_TOKEN>,\n\"ExpiresIn\": 3600,\n\"TokenType\": \"Bearer\",\n\"RefreshToken\": <REFRESH_TOKEN>,\n\"IdToken\": <ID_TOKEN> # ID 토큰의 값을 복사하세요\n}\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 토큰들을 테스트하려면 ID 토큰의 값을 복사하고 AWS 관리 콘솔에서 \"API Gateway\"로 이동한 다음, API를 선택하고 왼쪽에 있는 \"Authorizers\"를 클릭하세요:\n\n![API Gateway Authorizer Test](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_8.png)\n\n이제 Authorizer를 클릭하세요. 그런 다음 Authorizer 테스트 섹션에 이전에 복사한 ID 토큰을 붙여넣고 \"Test authorizer\" 버튼을 클릭하세요. 파란 상자 안의 그것과 같은 출력이 있어야 합니다:\n\n![Authorizer Test Output](/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_9.png)\n\n<div class=\"content-ad\"></div>\n\n\"토큰 만료 날짜인 'exp' 필드가 있는 것을 확인할 수 있습니다. 제 경우에는 유효합니다.\n\n이제 Postman으로 돌아가서 \"Headers\" 탭으로 이동하여 새 필드를 만들고 키를 \"Authorization\"로 선택한 후 값 필드에 다음 형식으로 ID 토큰을 지정하세요:\n\n```js\nBearer <ID_TOKEN>\n```\n\n<img src=\"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_10.png\" />\"\n\n<div class=\"content-ad\"></div>\n\n요청을 보내시면 지금은 200 상태 코드를 받게 될 거에요. 모든 것이 잘 되고 있어요.\n\n# 결론\n\n이 프로젝트를 좋아해 주셨으면 좋겠고, 다음에 또 만나요! 궁금한 점 있으면 언제나 물어봐 주세요!\n","ogImage":{"url":"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_0.png"},"coverImage":"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_0.png","tag":["Tech"],"readingTime":31},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 다양한 상황에서 사용할 수 있는 실전 프로젝트를 만들고 싶습니다. 실제 세계에서 매우 일반적인 것으로, 거의 모든 애플리케이션이 모듈식 레고 블록으로 구성된 마이크로서비스에 기반을 두고 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"특히, 목표는 API 게이트웨이에 호스팅된 API를 만들고, 백엔드는 람다에, 데이터베이스는 DynamoDB에 있는 것입니다. 람다 함수에는 DynamoDB 테이블에서 CRUD 작업 (CREATE, READ, UPDATE, DELETE)을 수행하는 로직이 포함될 것입니다. 그리고 추가로 몇 가지 경로에 대한 공개 액세스를 제한하기 위해 Amazon Cognito를 사용한 인증을 추가할 것입니다. 왜냐하면 데이터베이스에 대한 쓰기 작업은 위험하기 때문입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시칠리아 섬에서 태어났기 때문에 신기한 섬리아 요리 목록을 관리할 수 있는 간단한 API를 생성할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모든 소스 코드는 여기에서 확인하실 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 1: 공급자, AWS 지역, S3 백엔드 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"첫 번째 단계는 AWS를 제공자로 사용하도록 지정하는 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# provider.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nprovider \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws\\\"\"\n        }), \" {\\n  region = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"aws_region\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 하나의 변수만 정의하고 있어요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# variables.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nvariable \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_region\\\"\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \"   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"eu-west-3\\\"\"\n        }), \"\\n  type      = string\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음 AWS 관리 콘솔로 이동해서 “S3” AWS 서비스로 이동하여 나중에 사용할 Terraform 상태 파일을 저장할 S3 버킷을 생성하세요. \\\"key\\\" 속성으로 지정된 경로에 생성할 거에요. 저는 \\\"my-api-gateway-lambda-terraform-state\\\"라고 이름지었어요. 모든 옵션을 기본값으로 남겨두세요.```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만들었다면, Terraform 구성에서 명시할 것입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# backend.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nterraform {\\n  backend \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"s3\\\"\"\n        }), \" {\\n    bucket = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my-api-gateway-lambda-terraform-state\\\"\"\n        }), \"\\n    region = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"aws_region\"\n        }), \"\\n    key    = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-Gateway/terraform.tfstate\\\"\"\n        }), \"\\n  }\\n  required_version = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\">= 0.13.0\\\"\"\n        }), \"\\n  required_providers {\\n    aws = {\\n      source  = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"hashicorp/aws\\\"\"\n        }), \"\\n      version = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\">= 2.7.0\\\"\"\n        }), \"\\n    }\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: Lambda IAM 역할 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lambda 함수가 DynamoDB 테이블에서 작업을 수행하려면 해당 권한이 있어야 합니다. 따라서 IAM 역할을 생성해야 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 IAM 역할의 Assume Role 정책(Trust Relationship이라고도 함)을 명시적으로 지정해야 합니다. 이는 어떤 리소스 또는 서비스가 원하는 역할을 가져갈 수 있는 지를 나타내는데, 이 경우에는 Lambda 함수입니다. AWS 서비스에 권한을 제공할 때 이 단계는 항상 필수적입니다. 이 정책의 형식은 다음과 같습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Version\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2012-10-17\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Statement\\\"\"\n        }), \": [{\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Effect\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Principal\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Service\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda.amazonaws.com\\\"\"\n        }), \" # \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"AWS\"\n        }), \" 서비스의 이름\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Action\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sts:AssumeRole\\\"\"\n        }), \"\\n    }]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기본적으로 \\\"내 계정의 모든 Lambda 함수가 이 역할을 가져올 수 있습니다\\\"라고 말하고 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한 Lambda에게 함수 실행과 관련된 로그 작성을 위해 필요한 최소한의 권한을 부여해야 합니다. 이 권한들은 이미 AWS에서 제공하는 AWSLambdaBasicExecutionRole이라는 IAM 서비스 역할에 정의되어 있습니다. 따라서 이 서비스 역할을 새 IAM 역할에 연결하여 Lambda에 할당할 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"파일 \\\"iam.tf\\\"를 생성하고 다음 코드를 붝어 주세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# iam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\n# 역할 가정 정책\\ndata \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_iam_policy_document\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"AWSLambdaTrustPolicy\\\"\"\n        }), \" {\\n  statement {\\n    actions    = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sts:AssumeRole\\\"\"\n        }), \"]\\n    effect     = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \"\\n    principals {\\n      type        = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Service\\\"\"\n        }), \"\\n      identifiers = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda.amazonaws.com\\\"\"\n        }), \"]\\n    }\\n  }\\n}\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IAM\"\n        }), \" 역할 정의 및 가정 역할 정책 첨부\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_iam_role\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"terraform_function_role\\\"\"\n        }), \" {\\n  name               = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"terraform_function_role\\\"\"\n        }), \"\\n  assume_role_policy = data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"aws_iam_policy_document\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"AWSLambdaTrustPolicy\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json\"\n        }), \"\\n}\\n\\n# 방금 정의한 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IAM\"\n        }), \" 역할에 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IAM\"\n        }), \" 서비스 역할 첨부\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AWSLambdaBasicExecutionRole\"\n        }), \"은 람다 함수에 최소한의 권한을 부여합니다\\n# (실행에 대한 로그 작성, 오류, 디버깅 등)\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_iam_role_policy_attachment\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"terraform_lambda_policy\\\"\"\n        }), \" {\\n  role       = aws_iam_role.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"terraform_function_role\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \"\\n  policy_arn = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\\\"\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, 이외에도 말씀드린대로 Lambda 함수가 생성할 DynamoDB 테이블에 액세스해야 합니다. 이를 위해 DynamoDB 테이블에서 수행할 모든 작업이 명시적으로 허용된 JSON 정책 문서를 작성합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// lambda_dynamodb_policy.json\"\n        }), \"\\n\\n{\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Version\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2012-10-17\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Statement\\\"\"\n        }), \": [\\n      {\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Sid\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ListAndDescribe\\\"\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Effect\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Action\\\"\"\n        }), \": [\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:List*\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:DescribeReservedCapacity*\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:DescribeLimits\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:DescribeTimeToLive\\\"\"\n        }), \"\\n          ],\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Resource\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"*\\\"\"\n        }), \"\\n      },\\n      {\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Sid\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"SpecificTable\\\"\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Effect\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Allow\\\"\"\n        }), \",\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Action\\\"\"\n        }), \": [\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:BatchGet*\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:DescribeStream\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:DescribeTable\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:Get*\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:Query\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:Scan\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:BatchWrite*\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:CreateTable\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:Delete*\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:Update*\\\"\"\n        }), \",\\n              \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dynamodb:PutItem\\\"\"\n        }), \"\\n          ],\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Resource\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"arn:aws:dynamodb:*:*:table/dishes\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// DynamoDB 테이블\"\n        }), \"\\n      }\\n  ]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lambda 함수가 DynamoDB 테이블에서 CRUD 작업(Get, Put, Update, Delete, Scan, Query 및 기타 작업)을 수행할 수 있는 정책을 정의하고, \\\"dishes\\\"라는 이름의 테이블을 사용할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"iam.tf\\\" 파일에서는 JSON 문서에 정의된 정책을 IAM 역할에 부착하도록 다음과 같이 작성합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# iam.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DynamoDB\"\n        }), \"에 액세스하기 위한 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"IAM\"\n        }), \" 역할에 사용자 지정 정책 부착\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_iam_role_policy\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda_dynamodb_policy\\\"\"\n        }), \" {\\n  name   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda_dynamodb_policy\\\"\"\n        }), \"\\n  role   = aws_iam_role.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"lambda\"\n        }), \"-iam-role.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \"\\n  policy = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"file\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"${path.module}/lambda_dynamodb_policy.json\\\"\"\n        }), \")\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: Lambda 코드 설정하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lambda 함수를 설정하는 것이 다음 단계입니다. 이 함수는 DynamoDB 테이블과 상호 작용할 것입니다. 이 함수는 Python으로 작성될 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lambda 함수 안에서는 각각의 작업에 대한 메서드를 정의하고 API Gateway로 응답을 반환할 수 있습니다. 우리는 함수의 코드를 Python으로 작성할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우선적으로 Lambda를 테스트할 때 무슨 일이 벌어지는지 볼 수 있도록 로거를 설정합니다. 그런 다음 lambda_handler() 안에서는 AWS 서비스와 상호 작용하기 위해 사용되는 boto3 라이브러리를 활용하여 DynamoDB 클라이언트를 선언합니다. Lambda를 트리거하는 이벤트는 API Gateway에서 오는 HTTP 요청입니다. 우리는 이를 통해 HTTP 메소드를 읽고 Lambda가 DynamoDB 테이블에서 수행해야 하는 작업을 구별할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"REST API는 트리 구조로 구성되어 있으며, 우리는 이를 다음과 같이 구조화하고 싶습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_1.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 다음을 할 수 있기를 원합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"GET dishes/ : 모든 요리 항목 검색\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"GET dish/'dishId' : ID로 특정 요리 항목 검색\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"POST dish/ : 새로운 요리 항목 저장\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PATCH dish/ : 특정 요리 항목의 속성 업데이트\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"DELETE dish/ : 테이블에서 요리 항목 삭제\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테이블의 모든 항목을 가져 오기 위해 재귀 함수 recursive_scan을 활용하며, 이 함수는 DynamoDB 테이블에서 레코드를 효율적으로 스캔하는 데 사용됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"표준 DynamoDB의 scan 작업은 테이블의 모든 항목을 읽는 표준 접근 방식입니다. 그러나 DynamoDB의 분산 특성과 확장성 때문에, 단일 scan 작업으로는 특히 테이블이 큰 경우 모든 항목을 한 번에 검색하지 못할 수 있습니다. DynamoDB는 결과를 페이지별로 반환하며, 다음 결과 페이지가 시작되는 위치를 나타내는 토큰(LastEvaluatedKey)과 함께 항목의 하위 집합을 반환합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"recursive_scan 메서드는 모든 페이지의 결과를 재귀적으로 가져와서 더 이상 페이지가 남아있지 않을 때까지(응답에 LastEvaluatedKey가 없을 때) 검색 프로세스를 최적화합니다. 이를 통해 페이지 수에 관계없이 DynamoDB 테이블의 모든 항목을 효율적으로 검색할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"def \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"recursive_scan\"\n        }), \"(scan_params, items):\\n    response = table.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"scan\"\n        }), \"(**scan_params)\\n    items += response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Items'\"\n        }), \"]\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'LastEvaluatedKey'\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"response\"\n        }), \":\\n        scan_params[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'ExclusiveStartKey'\"\n        }), \"] = response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'LastEvaluatedKey'\"\n        }), \"]\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"recursive_scan\"\n        }), \"(scan_params, items)\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에 Lambda 함수의 전체 코드가 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# lambda_code.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"py\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" json\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" logging\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" boto3\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" decimal \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Decimal\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" botocore.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"exceptions\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClientError\"\n        }), \"\\n\\nlogger = logging.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getLogger\"\n        }), \"()\\nlogger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setLevel\"\n        }), \"(logging.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"INFO\"\n        }), \")\\n\\ndynamodb = boto3.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"resource\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dynamodb'\"\n        }), \")\\ntable = dynamodb.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Table\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dishes'\"\n        }), \")\\n\\ndish_path = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/dish'\"\n        }), \"\\ndishes_path = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'/dishes'\"\n        }), \"\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"lambda_handler\"\n        }), \"(event, context):\\n\\n    logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'API event: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(event))\\n\\n    response = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"None\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"try\"\n        }), \":\\n        http_method = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'httpMethod'\"\n        }), \")\\n        path = event.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'path'\"\n        }), \")\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" http_method == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'GET'\"\n        }), \" and path == \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dishes_path\"\n        }), \":\\n            response = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_all_dishes\"\n        }), \"()\\n\\n        elif http_method == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'GET'\"\n        }), \" and path == \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dish_path\"\n        }), \":\\n            dish_id = event[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'queryStringParameters'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dish_id'\"\n        }), \"]\\n            response = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_dish\"\n        }), \"(dish_id)\\n\\n        elif http_method == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'POST'\"\n        }), \" and path == \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dish_path\"\n        }), \":\\n            body = json.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"loads\"\n        }), \"(event[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'body'\"\n        }), \"])\\n            response = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"save_dish\"\n        }), \"(body)\\n\\n        elif http_method == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'PATCH'\"\n        }), \" and path == \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"dish_path\"\n        }), \":\\n            body = json.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"loads\"\n        }), \"(event[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'body'\"\n        }), \"])\\n            response = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"update_dish\"\n        }), \"(body[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dish_id'\"\n        }), \"], body[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'update_key'\"\n        }), \"], body[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'update_value'\"\n        }), \"])\\n\\n        elif http_method == \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'DELETE'\"\n        }), \":\\n            body = json.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"loads\"\n        }), \"(event[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'body'\"\n        }), \"])\\n            response = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delete_dish\"\n        }), \"(body[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dish_id'\"\n        }), \"])\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"else\"\n        }), \":\\n            response = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'리소스를 찾을 수 없습니다.'\"\n        }), \")\\n\\n    except \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClientError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"e\"\n        }), \":\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'오류: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(e))\\n        response = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Error'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Message'\"\n        }), \"])\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" response\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_dish\"\n        }), \"(dish_id):\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"try\"\n        }), \":\\n        response = table.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_item\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Key\"\n        }), \"={\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dish_id'\"\n        }), \": dish_id})\\n        item = response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Item'\"\n        }), \"]\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'항목 조회: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(item))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \", item)\\n    except \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClientError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"e\"\n        }), \":\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'오류: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(e))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Error'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Message'\"\n        }), \"])\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"get_all_dishes\"\n        }), \"():\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"try\"\n        }), \":\\n        scan_params = {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'TableName'\"\n        }), \": table.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \"\\n        }\\n        items = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"recursive_scan\"\n        }), \"(scan_params, [])\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'모든 항목 조회: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(items))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \", items)\\n    except \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClientError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"e\"\n        }), \":\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'오류: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(e))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Error'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Message'\"\n        }), \"])\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"recursive_scan\"\n        }), \"(scan_params, items):\\n    response = table.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"scan\"\n        }), \"(**scan_params)\\n    items += response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Items'\"\n        }), \"]\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'LastEvaluatedKey'\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"response\"\n        }), \":\\n        scan_params[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'ExclusiveStartKey'\"\n        }), \"] = response[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'LastEvaluatedKey'\"\n        }), \"]\\n        \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"recursive_scan\"\n        }), \"(scan_params, items)\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" items\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"save_dish\"\n        }), \"(item):\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"try\"\n        }), \":\\n        table.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"put_item\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Item\"\n        }), \"=item)\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'항목 저장: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(item))\\n        body = {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'작업'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'저장'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'메시지'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'성공'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'항목'\"\n        }), \": item\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \", body)\\n    except \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClientError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"e\"\n        }), \":\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'오류: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(e))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Error'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Message'\"\n        }), \"])\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"update_dish\"\n        }), \"(dish_id, update_key, update_value):\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"try\"\n        }), \":\\n        response = table.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"update_item\"\n        }), \"(\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Key\"\n        }), \"={\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dish_id'\"\n        }), \": dish_id},\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"UpdateExpression\"\n        }), \"=f\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'SET {update_key} = :value'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ExpressionAttributeValues\"\n        }), \"={\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"':value'\"\n        }), \": update_value},\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReturnValues\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'UPDATED_NEW'\"\n        }), \"\\n        )\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'항목 업데이트: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(response))\\n        body = {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'작업'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'업데이트'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'메시지'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'성공'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'항목'\"\n        }), \": response\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \", response)\\n    except \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClientError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"e\"\n        }), \":\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'오류: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(e))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Error'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Message'\"\n        }), \"])\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delete_dish\"\n        }), \"(dish_id):\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"try\"\n        }), \":\\n        response = table.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"delete_item\"\n        }), \"(\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Key\"\n        }), \"={\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'dish_id'\"\n        }), \": dish_id},\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ReturnValues\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'ALL_OLD'\"\n        }), \"\\n        )\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"info\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'항목 삭제: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(response))\\n        body = {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'작업'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'삭제'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'메시지'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'성공'\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'항목'\"\n        }), \": response\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \", body)\\n    except \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ClientError\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"e\"\n        }), \":\\n        logger.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"error\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'오류: {}'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(e))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"404\"\n        }), \", e.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"response\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Error'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Message'\"\n        }), \"])\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DecimalEncoder\"\n        }), \"(json.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"JSONEncoder\"\n        }), \"):\\n    def \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"default\"\n        }), \"(self, obj):\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"isinstance\"\n        }), \"(obj, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Decimal\"\n        }), \"):\\n            # 정수 또는 소수인지 확인합니다\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" obj % \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" == \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \":\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"int\"\n        }), \"(obj)\\n            \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"else\"\n        }), \":\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"float\"\n        }), \"(obj)\\n        # 기본 클래스의 \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" 메서드가 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"TypeError\"\n        }), \"를 발생시키도록 합니다\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"super\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DecimalEncoder\"\n        }), \", self).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"default\"\n        }), \"(obj)\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_response\"\n        }), \"(status_code, body):\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'statusCode'\"\n        }), \": status_code,\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'headers'\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Content-Type'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'application/json'\"\n        }), \",\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'body'\"\n        }), \": json.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dumps\"\n        }), \"(body, cls=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DecimalEncoder\"\n        }), \")\\n    }\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음, “lambda.tf” Terraform 파일에는 Lambda 코드를 압축하는 데이터 블록을 정의하고 해당 Lambda 자체에 대한 리소스 블록이 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"data \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"archive_file\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda_code\\\"\"\n        }), \" {\\n  type        = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"zip\\\"\"\n        }), \"\\n  source_file = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"${path.module}/lambda_code.py\\\"\"\n        }), \"\\n  output_path = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"${path.module}/lambda_code.zip\\\"\"\n        }), \"\\n}\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_lambda_function\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my-lambda-function\\\"\"\n        }), \" {\\n  filename      = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"${path.module}/lambda_code.zip\\\"\"\n        }), \"\\n  function_name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"api-gateway-lambda\\\"\"\n        }), \"\\n  role          = aws_iam_role.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"lambda\"\n        }), \"-iam-role.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"arn\"\n        }), \"\\n  handler       = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda_code.lambda_handler\\\"\"\n        }), \"\\n  runtime       = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"python3.12\\\"\"\n        }), \"\\n\\n  source_code_hash = data.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"archive_file\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"lambda_code\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"output_base64sha256\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 3: DynamoDB 설정\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시칠리아 요리 테이블을 만드는 시간이 왔습니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:480/1*WMK7Qze__kL4gO7lXQ5LKg.gif\",\n        alt: \"Sicilian Dishes\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"database.tf\"\n      }), \" 파일을 생성하고 다음 코드를 붙여넣으세요:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 다이나모\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DB\"\n        }), \" 테이블 정의\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_dynamodb_table\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my_dynamodb_table\\\"\"\n        }), \" {\\n  name         = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dishes\\\"\"\n        }), \"\\n  billing_mode = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"PAY_PER_REQUEST\\\"\"\n        }), \"\\n  hash_key     = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dish_id\\\"\"\n        }), \"\\n\\n  attribute {\\n    name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dish_id\\\"\"\n        }), \"\\n    type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \"\\n  }\\n\\n  tags = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Name\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dishes-table\\\"\"\n        }), \"\\n  }\\n}\\n\\nlocals {\\n  json_data = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"file\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"${path.module}/dishes.json\\\"\"\n        }), \")\\n  dishes    = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"jsondecode\"\n        }), \"(local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"json_data\"\n        }), \")\\n}\\n\\n# 각 요리별로 다이나모\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DB\"\n        }), \" 테이블에 새 항목 생성\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_dynamodb_table_item\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dishes\\\"\"\n        }), \" {\\n  for_each   = local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"dishes\"\n        }), \"\\n  table_name = aws_dynamodb_table.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"my_dynamodb_table\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \"\\n  hash_key   = aws_dynamodb_table.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"my_dynamodb_table\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"hash_key\"\n        }), \"\\n  item       = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"jsonencode\"\n        }), \"(each.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"value\"\n        }), \")\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JSON 문서에서 데이터를 가져 오므로 \\\"dishes.json\\\" 파일을 만드십시오. 각 속성에 대해 유형을 지정합니다 (S = 문자열, N = 숫자, L = 목록).\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// dishes.json\"\n        }), \"\\n\\n{\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Item1\\\"\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dish_id\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"1\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"name\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"아란치니\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"치즈, 완두 및 고기가 들어있는 튀긴 쌀 공예볼\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"price\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"N\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"8.99\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ingredients\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"L\\\"\"\n        }), \": [\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"쌀\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"치즈\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"완두\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"고기\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"빵 가루\\\"\"\n        }), \"}\\n            ]\\n        }\\n    },\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Item2\\\"\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dish_id\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"2\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"name\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"카놀리\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"튜브 모양의 튀겨진 페이스트리 도우로 구운 쉘에 달콤하고 부드러운 필링을 채운 시칠리아 디저트\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"price\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"N\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"5.99\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ingredients\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"L\\\"\"\n        }), \": [\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"밀가루\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"리코타 치즈\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"설탕\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"초콜릿 칩\\\"\"\n        }), \"}\\n            ]\\n        }\\n    },\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Item3\\\"\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dish_id\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"3\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"name\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"파스타 알라 노르마\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"토마토 소스, 튀긴 가지, 갈은 리코타 샐라타 치즈 및 바질이 들어간 파스타\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"price\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"N\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"12.99\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ingredients\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"L\\\"\"\n        }), \": [\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"파스타\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"토마토 소스\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"가지\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"리코타 치즈\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"바질\\\"\"\n        }), \"}\\n            ]\\n        }\\n    },\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Item4\\\"\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dish_id\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"4\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"name\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"카사타\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"과일 주스 또는 리큐르로 적시한 둥근 스펀지 케이크로 리코타 치즈, 설탕이 묻혔고 카놀리 크림과 유사한 초콜릿 또는 바닐라 필링이 층층이 쌓인 시칠리아 케이크\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"price\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"N\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"15.99\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ingredients\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"L\\\"\"\n        }), \": [\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"스펀지 케이크\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"과일 주스\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"리큐르\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"리코타 치즈\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"설탕\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"초콜릿\\\"\"\n        }), \"},\\n                {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"바닐라\\\"\"\n        }), \"}\\n            ]\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 4: API Gateway 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 API 게이트웨이를 설정 할 시간입니다. API 게이트웨이는 프록시 역할을합니다. 클라이언트에서 Lambda 함수로 오는 HTTP 요청을 전달하며이 \\\"트릭\\\"을 사용하여 원래의 HTTP 요청이 전송됩니다 (GET, POST 등)\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"먼저 API 게이트웨이 REST API를 설정하고 두 가지 API 리소스를 만듭니다. 각각의 경로(/dishes 및 /dish)를 위한 한 가지씩:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# api_gateway.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"API\"\n        }), \" 게이트웨이\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_rest_api\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-gw\\\"\"\n        }), \" {\\n  name        = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda_rest_api\\\"\"\n        }), \"\\n  description = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"시칠리아 요리를 위한 REST API입니다.\\\"\"\n        }), \"\\n  endpoint_configuration {\\n    types = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"REGIONAL\\\"\"\n        }), \"]\\n  }\\n}\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/dishes\\\"\"\n        }), \" 경로를 위한 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"API\"\n        }), \" 리소스\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_resource\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-resource-dishes\\\"\"\n        }), \" {\\n  rest_api_id = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  parent_id   = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"root_resource_id\"\n        }), \"\\n  path_part   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dishes\\\"\"\n        }), \"\\n}\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/dish\\\"\"\n        }), \" 경로를 위한 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"API\"\n        }), \" 리소스\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_resource\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-resource-dish\\\"\"\n        }), \" {\\n  rest_api_id = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  parent_id   = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"root_resource_id\"\n        }), \"\\n  path_part   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dishes\\\"\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리가 원하는 API 엔드포인트는 다음과 같습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"GET /dishes: 모든 시칠리아 요리의 목록을 가져옵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"GET /dishes/'dishId': ID에 따라 특정 요리의 세부 정보를 가져옵니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"POST /dishes: 새로운 시칠리아 요리를 데이터베이스에 추가합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PATCH /dishes/'dishId': 특정 요리의 세부 정보를 업데이트합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"DELETE /dishes/'dishId': 데이터베이스에서 시칠리아 요리를 삭제합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 HTTP 메서드에 대해 아래와 같이 몇 가지 블록을 정의합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Method (HTTP 메서드 지정)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integration (Lambda와 통합)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Method response\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integration response\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“REST API”는 만들 API Gateway 객체 모두를 담고 있는 컨테이너입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API Gateway에 들어오는 모든 요청은 다음과 일치해야 합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"구성된 리소스 (특정한 /dish 또는 다른 /dishes)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"HTTP 메서드\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 게이트웨이 리소스의 각 메서드는 Lambda 함수로 들어오는 요청이 보내지는 통합을 가지고 있습니다. \\\"AWS_PROXY\\\" 통합 유형은 API 게이트웨이가 AWS Lambda API를 호출하여 Lambda 함수의 \\\"invocation\\\"을 생성하도록합니다. 그런 다음 우리는 메서드 응답(관련된 상태 코드로) 및 통합 응답을 구성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# . . .\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Lambda\"\n        }), \" 함수를 트리거하는 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"API\"\n        }), \" 게이트웨이 정의\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_rest_api\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-gw\\\"\"\n        }), \" {\\n  name        = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda_rest_api\\\"\"\n        }), \"\\n  description = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"이것은 시칠리아 요리를 위한 REST API입니다.\\\"\"\n        }), \"\\n  endpoint_configuration {\\n    types = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"REGIONAL\\\"\"\n        }), \"]\\n  }\\n}\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_resource\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-resource-dish\\\"\"\n        }), \" {\\n  rest_api_id = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  parent_id   = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"root_resource_id\"\n        }), \"\\n  path_part   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dish\\\"\"\n        }), \"\\n}\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_resource\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-resource-dishes\\\"\"\n        }), \" {\\n  rest_api_id = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  parent_id   = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"root_resource_id\"\n        }), \"\\n  path_part   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dishes\\\"\"\n        }), \"\\n}\\n\\n#####################################################################################################\\n########################### \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"GET\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ALL\"\n        }), \" /dishes #########################################################\\n#####################################################################################################\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_method\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"GET_all_method\\\"\"\n        }), \" {\\n  rest_api_id   = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  resource_id   = aws_api_gateway_resource.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-resource-dishes.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  http_method   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"GET\\\"\"\n        }), \"\\n  authorization = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"NONE\\\"\"\n        }), \"\\n}\\n\\n. . .\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로 API 게이트웨이가 람다 함수를 호출할 수 있도록 설정해야 합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# . . .\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"API\"\n        }), \" 게이트웨이가 람다에 접근할 수 있도록 허용\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_lambda_permission\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"apigw\\\"\"\n        }), \" {\\n  statement_id  = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"AllowAPIGatewayInvoke\\\"\"\n        }), \"\\n  action        = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"lambda:InvokeFunction\\\"\"\n        }), \"\\n  function_name = aws_lambda_function.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"my\"\n        }), \"-lambda-\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"function\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"function_name\"\n        }), \"\\n  principal     = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"apigateway.amazonaws.com\\\"\"\n        }), \"\\n\\n  # 여기서 \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/*/* 부분은 \\\"REST API\\\" 내에서 어떤 리소스의 어떤 메서드에서도 접근할 수 있게 합니다.\\n  source_arn = \\\"${aws_api_gateway_rest_api.API-gw.execution_arn}/*/\"\n        }), \"*\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\n}\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음 API 배포를 구성하고 \\\"prod\\\"라는 스테이지를 생성하여, API 게이트웨이 URL이 \\\"/prod/dishes\\\"와 같은 형태가 됩니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# . . .\\n\\n# 배포\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_deployment\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"example\\\"\"\n        }), \" {\\n\\n  depends_on = [\\n    aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"GET_one_lambda_integration\"\n        }), \",\\n    aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"GET_all_lambda_integration\"\n        }), \",\\n    aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"PATCH_lambda_integration\"\n        }), \",\\n    aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"POST_lambda_integration\"\n        }), \",\\n    aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"DELETE_lambda_integration\"\n        }), \"\\n  ]\\n\\n  triggers = {\\n    redeployment = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sha1\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"jsonencode\"\n        }), \"([\\n      aws_api_gateway_resource.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-resource-dish,\\n      aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"GET_one_method\"\n        }), \",\\n      aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"GET_one_lambda_integration\"\n        }), \",\\n      aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"GET_all_method\"\n        }), \",\\n      aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"GET_all_lambda_integration\"\n        }), \",\\n      aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"POST_method\"\n        }), \",\\n      aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"POST_lambda_integration\"\n        }), \",\\n      aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"PATCH_method\"\n        }), \",\\n      aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"PATCH_lambda_integration\"\n        }), \",\\n      aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"DELETE_method\"\n        }), \",\\n      aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"DELETE_lambda_integration\"\n        }), \"\\n    ]))\\n  }\\n\\n  rest_api_id = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n}\\n\\n# 배포 스테이지\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_stage\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my-prod-stage\\\"\"\n        }), \" {\\n  deployment_id = aws_api_gateway_deployment.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"example\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  rest_api_id   = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  stage_name    = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"prod\\\"\"\n        }), \"\\n\\n  depends_on = [aws_cloudwatch_log_group.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"rest\"\n        }), \"-api-logs]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"백그라운드에서 요청을 보낼 때 무엇이 일어나는지 기록하기 위해 CloudWatch 로그 그룹을 설정하고 있습니다. CloudWatch LogGroup의 이름은 API-Gateway-Execution-Logs_'YOUR_API_ID'/'YOUR_STAGE_NAME' 형식이어야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그런 다음 API Gateway 스테이지 수준 실행 로깅을 설정하기 위해 \\\"method_settings\\\" 리소스를 사용합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# . . .\\n\\n# 디버깅 목적의 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"CloudWatch\"\n        }), \" 로그 그룹\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_cloudwatch_log_group\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"rest-api-logs\\\"\"\n        }), \" {\\n  name              = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API-Gateway-Execution-Logs_${aws_api_gateway_rest_api.API-gw.id}/prod\\\"\"\n        }), \"\\n  retention_in_days = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"\\n}\\n\\n# 메서드 설정\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_method_settings\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my_settings\\\"\"\n        }), \" {\\n  rest_api_id = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  stage_name  = aws_api_gateway_stage.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"my\"\n        }), \"-prod-stage.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"stage_name\"\n        }), \"\\n  method_path = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"*/*\\\"\"\n        }), \"\\n  settings {\\n    logging_level = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"INFO\\\"\"\n        }), \"\\n    data_trace_enabled = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n    metrics_enabled = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로 CORS 모듈을 정의합니다. AWS 문서는 CORS 및 통합 및 통합 응답과 관련된 모든 뉘앙스를 잘 설명하고 있으므로 여기에 링크만 첨부하겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# . . .\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable language_\",\n          children: \"module\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"cors\\\"\"\n        }), \" {\\n  source = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./modules/cors\\\"\"\n        }), \"\\n\\n  api_id            = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  api_resource_id   = aws_api_gateway_resource.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-resource-dish.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  allow_credentials = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_3.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 구조를 따라가서 각 파일에 다음 코드를 붙여넣으세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"cors.tf:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# cors.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_method\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"_\\\"\"\n        }), \" {\\n  rest_api_id   = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_id\"\n        }), \"\\n  resource_id   = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_resource_id\"\n        }), \"\\n  http_method   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"OPTIONS\\\"\"\n        }), \"\\n  authorization = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"NONE\\\"\"\n        }), \"\\n}\\n\\n# aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \"\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_integration\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"_\\\"\"\n        }), \" {\\n  rest_api_id = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_id\"\n        }), \"\\n  resource_id = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_resource_id\"\n        }), \"\\n  http_method = aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"http_method\"\n        }), \"\\n\\n  type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"MOCK\\\"\"\n        }), \"\\n\\n  request_templates = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"application/json\\\"\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"{ \\\\\\\"statusCode\\\\\\\": 200 }\\\"\"\n        }), \"\\n  }\\n}\\n\\n# aws_api_gateway_integration_response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \"\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_integration_response\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"_\\\"\"\n        }), \" {\\n  rest_api_id = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_id\"\n        }), \"\\n  resource_id = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_resource_id\"\n        }), \"\\n  http_method = aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"http_method\"\n        }), \"\\n  status_code = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \"\\n\\n  response_parameters = local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"integration_response_parameters\"\n        }), \"\\n\\n  depends_on = [\\n    aws_api_gateway_integration.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \",\\n    aws_api_gateway_method_response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \",\\n  ]\\n}\\n\\n# aws_api_gateway_method_response.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \"\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_method_response\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"_\\\"\"\n        }), \" {\\n  rest_api_id = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_id\"\n        }), \"\\n  resource_id = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"api_resource_id\"\n        }), \"\\n  http_method = aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"http_method\"\n        }), \"\\n  status_code = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"200\"\n        }), \"\\n\\n  response_parameters = local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"method_response_parameters\"\n        }), \"\\n\\n  response_models = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"application/json\\\"\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Empty\\\"\"\n        }), \"\\n  }\\n\\n  depends_on = [\\n    aws_api_gateway_method.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"_\"\n        }), \",\\n  ]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"headers.tf:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# headers.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nlocals {\\n  headers = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"tomap\"\n        }), \"({\\n     \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Headers\\\"\"\n        }), \"= \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"'${join(\\\"\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\", var.allow_headers)}'\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Methods\\\"\"\n        }), \"= \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"'${join(\\\"\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\", var.allow_methods)}'\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Origin\\\"\"\n        }), \"= \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"'${var.allow_origin}'\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Max-Age\\\"\"\n        }), \"= \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"'${var.allow_max_age}'\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Access-Control-Allow-Credentials\\\"\"\n        }), \"= \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"allow_credentials\"\n        }), \" ? \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"'true'\\\"\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n  })\\n\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Pick\"\n        }), \" non-empty header values\\n  header_values = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"compact\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"values\"\n        }), \"(local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"headers\"\n        }), \"))\\n\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Pick\"\n        }), \" names that \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" non-empty header values\\n  header_names = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"matchkeys\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"keys\"\n        }), \"(local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"headers\"\n        }), \"),\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"values\"\n        }), \"(local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"headers\"\n        }), \"),\\n    local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"header_values\"\n        }), \"\\n  )\\n\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Parameter\"\n        }), \" names \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" method and integration responses\\n  parameter_names = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"formatlist\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"method.response.header.%s\\\"\"\n        }), \", local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"header_names\"\n        }), \")\\n\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Map\"\n        }), \" parameter list to \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"true\\\"\"\n        }), \" values\\n  true_list = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"split\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"|\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"replace\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"join\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"|\\\"\"\n        }), \", local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"parameter_names\"\n        }), \"), \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/[^|]+/\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"true\\\"\"\n        }), \")\\n  )\\n\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Integration\"\n        }), \" response parameters\\n  integration_response_parameters = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"zipmap\"\n        }), \"(\\n    local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"parameter_names\"\n        }), \",\\n    local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"header_values\"\n        }), \"\\n  )\\n\\n  # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Method\"\n        }), \" response parameters\\n  method_response_parameters = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"zipmap\"\n        }), \"(\\n    local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"parameter_names\"\n        }), \",\\n    local.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"true_list\"\n        }), \"\\n  )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"variables.tf:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [\"변수 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"api_id\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  설명 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API 식별자\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\\n# var.api_resource_id\\n변수 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"api_resource_id\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  설명 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"API 리소스 식별자\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\\n# -----------------------------------------------------------------------------\\n# Variables\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" CORS-related\\n# -----------------------------------------------------------------------------\\n\\n# var.allow_headers\\n변수 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"allow_headers\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  설명 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"허용 헤더\\\"\"\n        }), \"\\n  유형 = list(string)\\n\\n  기본값 = \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Authorization\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Content-Type\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"X-Amz-Date\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"X-Amz-Security-Token\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"X-Api-Key\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\\n# var.allow_methods\\n변수 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"allow_methods\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  설명 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"허용 메소드\\\"\"\n        }), \"\\n  유형 = list(string)\\n\\n  기본값 = \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"OPTIONS\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"HEAD\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"GET\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"POST\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"PUT\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"PATCH\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"DELETE\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\\n# var.allow_origin\\n변수 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"allow_origin\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  설명 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"허용 출처\\\"\"\n        }), \"\\n  유형 = string\\n  기본값 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"*\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\\n# var.allow_max_age\\n변수 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"allow_max_age\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  설명 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"응답 캐싱 시간을 허용\\\"\"\n        }), \"\\n  유형 = string\\n  기본값 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"7200\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\\n# var.allowed_credentials\\n변수 \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"allow_credentials\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  설명 = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"자격 증명 허용\\\"\"\n        }), \"\\n  기본값 = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"false\"\n          })\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마지막으로 \\\"outputs.tf\\\" 파일에 아래와 같이 API Gateway를 적용한 후의 호출 URL을 출력하는 블록을 선언하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [\"# 테스트 API Gateway URL\\noutput \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"api_gateway_url\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  value = aws_api_gateway_deployment.example.invoke_url\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"단계 5: 코그니토로 인증 추가하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"`\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다이나모DB 테이블의 작업(POST, PATCH, DELETE)은 위험할 수 있습니다. REST API를 공개적으로 노출하고 싶지 않으므로 일부 HTTP 엔드포인트에 대한 액세스를 제한하고 싶습니다. 따라서 인증을 구현하고자 하는데, 첫 번째 단계는 Cognito 사용자 풀을 생성하는 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# authentication.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_cognito_user_pool\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"pool\\\"\"\n        }), \" {\\n  name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mypool\\\"\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"응용 프로그램이 사용자 풀에 액세스할 수 있도록하려면 사용자 풀 클라이언트를 정의해야 합니다. 우리는 기본 사용자 정보(email, openid, profile)에 대한 허용된 OAuth 플로 및 사용자 스코프를 명시하고 있습니다. 클라이언트 시크릿을 생성하지 않습니다. 또한 관리자 및 사용자 비밀번호 인증이 모두 허용됩니다. Cognito가 식별 제공자입니다. 그런 다음 OAuth 2.0 인증 서버가 사용자를 성공적으로 인증한 후 사용자를 리디렉션해야 할 위치 및 로그아웃 후 리디렉션할 위치가 정의됩니다. 어쨌든 이 프로젝트에 대해서는 이렇게까지 자세히 묘사하는 것은 그리 중요하지 않습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# authentication.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_cognito_user_pool_client\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"client\\\"\"\n        }), \" {\\n  name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"client\\\"\"\n        }), \"\\n  allowed_oauth_flows_user_pool_client = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \"\\n  generate_secret = \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\n  allowed_oauth_scopes = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws.cognito.signin.user.admin\\\"\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"email\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"openid\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"profile\\\"\"\n        }), \"]\\n  allowed_oauth_flows = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"implicit\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"code\\\"\"\n        }), \"]\\n  explicit_auth_flows = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ADMIN_NO_SRP_AUTH\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"USER_PASSWORD_AUTH\\\"\"\n        }), \"]\\n  supported_identity_providers = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"COGNITO\\\"\"\n        }), \"]\\n\\n  user_pool_id = aws_cognito_user_pool.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pool\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  callback_urls = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://example.com\\\"\"\n        }), \"]\\n  logout_urls = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"https://example.com\\\"\"\n        }), \"]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"유저 풀 내에서 API 액세스를 테스트하기 위해 유저도 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# authentication.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_cognito_user\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"example\\\"\"\n        }), \" {\\n  user_pool_id = aws_cognito_user_pool.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pool\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  username = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"mattia\\\"\"\n        }), \"\\n  password = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Test@123\\\"\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 구성을 적용하여 모든 리소스가 올바르게 생성되었는지 확인해보세요 (유저 풀, 유저 풀 클라이언트 및 유저). AWS 관리 콘솔에서 “Amazon Cognito”로 이동하여 “User pools”를 선택하고 방금 생성한 풀을 클릭합니다. User pool ID를 메모하세요.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_4.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"새 사용자도 확인할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_5.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"“앱 통합”을 클릭하고 “앱 클라이언트 및 분석”으로 내려가면 우리가 만든 클라이언트도 확인할 수 있습니다. 클라이언트 ID를 메모해 두세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_6.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인증을 실제로 구현하고 애플리케이션의 일부 API 엔드포인트에 대한 공개 액세스를 제한하려면 먼저 Cognito 사용자 풀 내에서 Authorizer를 정의해야 합니다. Authorizer가 활성화되면 Lambda가 트리거되기 전에 수신된 요청 토큰이 먼저 이 Cognito 사용자 풀과 대조되어야 합니다. 따라서 \\\"api_gateway.tf\\\"에서 Authorizer를 정의합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# api_gateway.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_authorizer\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"demo\\\"\"\n        }), \" {\\n  name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"my_apig_authorizer2\\\"\"\n        }), \"\\n  rest_api_id = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  type = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"COGNITO_USER_POOLS\\\"\"\n        }), \"\\n  provider_arns = [aws_cognito_user_pool.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"pool\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"arn\"\n        }), \"]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기억하시나요? HTTP 메서드의 리소스 블록을 정의할 때 \\\"authorization\\\"을 \\\"NONE\\\"으로 설정했던 것을요. 이제 이 값을 변경하여 \\\"COGNITO_USER_POOLS\\\"로 설정하고 Authorizer ID를 지정하려고 합니다. 예를 들어 POST HTTP 메서드의 경우:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# api_gateway.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"tf\"\n        }), \"\\n\\n#####################################################################################################\\n########################### \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"POST\"\n        }), \" /dish #########################################################\\n#####################################################################################################\\n\\nresource \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"aws_api_gateway_method\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"POST_method\\\"\"\n        }), \" {\\n  rest_api_id   = aws_api_gateway_rest_api.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-gw.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  resource_id   = aws_api_gateway_resource.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"API\"\n        }), \"-resource-dish.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n  http_method   = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"POST\\\"\"\n        }), \"\\n  # authorization = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"NONE\\\"\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 주석 처리\"\n        }), \"\\n  authorization = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"COGNITO_USER_POOLS\\\"\"\n        }), \"\\n  authorizer_id = aws_api_gateway_authorizer.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"demo\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"id\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 모든 중요한 엔드포인트(POST, PATCH, DELETE)에 대해 이 작업을 수행하십시오.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더불어 이 구성을 적용하면 Postman으로 새 요청을 보내면 401 Unauthorized가 반환될 것입니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_7.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 HTTP 요청을 제출할 때 인가를 받기 위해 액세스 토큰을 제공해야 합니다. 액세스 토큰을 생성하려면 이전에 기록한 정보를 사용하여 \\\"aws cognito-idp\\\" 명령을 사용할 것입니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [\"aws cognito-idp admin-initiate-auth --user-pool-id \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"USER_POOL_ID\"\n            }), \">\"]\n          })\n        }), \" --client-id \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"CLIENT_ID\"\n            }), \">\"]\n          })\n        }), \" --auth-flow ADMIN\", _jsx(_components.span, {\n          className: \"hljs-emphasis\",\n          children: \"_NO_\"\n        }), \"SRP\", _jsx(_components.span, {\n          className: \"hljs-emphasis\",\n          children: \"_AUTH --auth-parameters USERNAME=mattia,PASSWORD=Test@123\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 명령어에서 User Pool ID, User Pool client ID, 그리고 이전에 정의한 테스트 사용자의 사용자 이름과 암호를 교체해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 Cognito 사용자 풀에 대한 테스트 사용자를 인증하고, 그 결과로 액세스 토큰을 받습니다. 위 명령어의 출력은 아래와 유사합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [\"{\\n\\\"ChallengeParameters\\\": {},\\n\\\"AuthenticationResult\\\": {\\n\\\"AccessToken\\\": \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ACCESS_TOKEN\"\n            }), \">\"]\n          })\n        }), \",\\n\\\"ExpiresIn\\\": 3600,\\n\\\"TokenType\\\": \\\"Bearer\\\",\\n\\\"RefreshToken\\\": \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"REFRESH_TOKEN\"\n            }), \">\"]\n          })\n        }), \",\\n\\\"IdToken\\\": \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"ID_TOKEN\"\n            }), \">\"]\n          })\n        }), \" # ID 토큰의 값을 복사하세요\\n}\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 토큰들을 테스트하려면 ID 토큰의 값을 복사하고 AWS 관리 콘솔에서 \\\"API Gateway\\\"로 이동한 다음, API를 선택하고 왼쪽에 있는 \\\"Authorizers\\\"를 클릭하세요:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_8.png\",\n        alt: \"API Gateway Authorizer Test\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 Authorizer를 클릭하세요. 그런 다음 Authorizer 테스트 섹션에 이전에 복사한 ID 토큰을 붙여넣고 \\\"Test authorizer\\\" 버튼을 클릭하세요. 파란 상자 안의 그것과 같은 출력이 있어야 합니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_9.png\",\n        alt: \"Authorizer Test Output\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"토큰 만료 날짜인 'exp' 필드가 있는 것을 확인할 수 있습니다. 제 경우에는 유효합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 Postman으로 돌아가서 \\\"Headers\\\" 탭으로 이동하여 새 필드를 만들고 키를 \\\"Authorization\\\"로 선택한 후 값 필드에 다음 형식으로 ID 토큰을 지정하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Bearer\"\n        }), \" <\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ID_TOKEN\"\n        }), \">\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(\"img\", {\n        src: \"/assets/img/2024-05-23-AStep-by-StepGuideOnDeployingRESTAPIusingAPIGatewayLambdaDynamoDBCognitoTerraform_10.png\"\n      }), \"\\\"\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요청을 보내시면 지금은 200 상태 코드를 받게 될 거에요. 모든 것이 잘 되고 있어요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 프로젝트를 좋아해 주셨으면 좋겠고, 다음에 또 만나요! 궁금한 점 있으면 언제나 물어봐 주세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}