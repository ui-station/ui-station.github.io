{"pageProps":{"post":{"title":"라즈베리 파이 Pico와 MicroPython으로 DIY 쿼드콥터 드론을 만들어봅시다","description":"","date":"2024-05-20 19:54","slug":"2024-05-20-TakingFlightwiththeRaspberryPiPicoMicroPythonDIYQuadcopterDrone","content":"\n\n\n![Quadcopter](/assets/img/2024-05-20-TakingFlightwiththeRaspberryPiPicoMicroPythonDIYQuadcopterDrone_0.png)\n\n라즈베리 파이 피코는 라즈베리 파이 재단에서 처음으로 직접 설계한 마이크로컨트롤러인 RP2040을 장착한 매우 다재다능한 플랫폼으로 매우 저렴한 비용으로 구매할 수 있습니다!\n\n스마트 홈 시스템, LED 조명 제어, 공기 질 센서 등과 같은 것들을 제어하는 데 라즈베리 파이 피코로 할 수 있는 일의 한계는 우리의 상상력뿐인 것 같습니다!\n\n2023년 여름에 라즈베리 파이 피코를 \"두뇌\"로 사용하여 파이썬 기반의 사용자 정의된 비행 컨트롤러를 실행시키는 DIY 쿼드콥터 드론을 개발했습니다. 이 작업은 계산적으로 큰 도전이었지만, 많은 시행착오를 거치면서 RP2040에서 충분한 성능을 뽑아내어 안정적이고 기민한 비행을 가능하게 했습니다.\n\n\n<div class=\"content-ad\"></div>\n\n처리 능력 뿐만 아니라, 소형이면서도 강력한 Raspberry Pi Pico는 쿼드콥터에 필요한 다양한 센서 및 구성 요소를 쉽게 통합할 수 있게 해주었습니다. GPIO 핀을 통해 다음과 같이 쉽게 통합할 수 있었어요:\n\n- I2C 프로토콜을 통해 MPU-6050 가속도계 및 자이로스코프로부터 텔레메트리 읽기\n- UART를 통해 기판 수신기로부터 무선통신으로 레이디오 명령 수신\n- PWM을 통해 ESC를 통해 네 개의 독립된 모터 제어\n\n# 12부작 시리즈\n\n전 이 DIY 쿼드콥터 드론을 완전히 오픈소스로 공개했어요. '스카우트'라는 이 쿼드콥터 개발 과정을 문서화한 12부작 시리즈를 작성했어요. 아래 시리즈에서 스카우트의 각 조각에 대한 자세한 자습서를 찾을 수 있답니다. 이 시리즈는 개념 및 코드 설명, 샘플 코드, 배선 다이어그램, 안전 지침 등으로 구성된 완전한 내용을 제공해요.\n\n<div class=\"content-ad\"></div>\n\n- 스카웃 비행 컨트롤러 소개\n- 쿼드콥터 비행 역학\n- 자이로스코프를 사용한 텔레메트리 캡처\n- RC 수신기로 조종사 입력 수신\n- PID 컨트롤러로 비행 안정화\n- ESC 및 PWM을 사용한 브러시리스 모터 제어\n- 쿼드콥터 하드웨어 설정\n- 전체 비행 컨트롤러 코드 및 설명\n- 비행 시작\n- 끈기에 관한 한 가지 교훈\n- 잠재적인 향후 개선점\n- 보너스 코드\n\n질문이 있으시면 Twitter/X에서 @TimHanewich로 연락해주세요!","ogImage":{"url":"/assets/img/2024-05-20-TakingFlightwiththeRaspberryPiPicoMicroPythonDIYQuadcopterDrone_0.png"},"coverImage":"/assets/img/2024-05-20-TakingFlightwiththeRaspberryPiPicoMicroPythonDIYQuadcopterDrone_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-TakingFlightwiththeRaspberryPiPicoMicroPythonDIYQuadcopterDrone_0.png\",\n        alt: \"Quadcopter\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라즈베리 파이 피코는 라즈베리 파이 재단에서 처음으로 직접 설계한 마이크로컨트롤러인 RP2040을 장착한 매우 다재다능한 플랫폼으로 매우 저렴한 비용으로 구매할 수 있습니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"스마트 홈 시스템, LED 조명 제어, 공기 질 센서 등과 같은 것들을 제어하는 데 라즈베리 파이 피코로 할 수 있는 일의 한계는 우리의 상상력뿐인 것 같습니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"2023년 여름에 라즈베리 파이 피코를 \\\"두뇌\\\"로 사용하여 파이썬 기반의 사용자 정의된 비행 컨트롤러를 실행시키는 DIY 쿼드콥터 드론을 개발했습니다. 이 작업은 계산적으로 큰 도전이었지만, 많은 시행착오를 거치면서 RP2040에서 충분한 성능을 뽑아내어 안정적이고 기민한 비행을 가능하게 했습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"처리 능력 뿐만 아니라, 소형이면서도 강력한 Raspberry Pi Pico는 쿼드콥터에 필요한 다양한 센서 및 구성 요소를 쉽게 통합할 수 있게 해주었습니다. GPIO 핀을 통해 다음과 같이 쉽게 통합할 수 있었어요:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"I2C 프로토콜을 통해 MPU-6050 가속도계 및 자이로스코프로부터 텔레메트리 읽기\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"UART를 통해 기판 수신기로부터 무선통신으로 레이디오 명령 수신\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PWM을 통해 ESC를 통해 네 개의 독립된 모터 제어\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"12부작 시리즈\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"전 이 DIY 쿼드콥터 드론을 완전히 오픈소스로 공개했어요. '스카우트'라는 이 쿼드콥터 개발 과정을 문서화한 12부작 시리즈를 작성했어요. 아래 시리즈에서 스카우트의 각 조각에 대한 자세한 자습서를 찾을 수 있답니다. 이 시리즈는 개념 및 코드 설명, 샘플 코드, 배선 다이어그램, 안전 지침 등으로 구성된 완전한 내용을 제공해요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"스카웃 비행 컨트롤러 소개\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"쿼드콥터 비행 역학\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"자이로스코프를 사용한 텔레메트리 캡처\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"RC 수신기로 조종사 입력 수신\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PID 컨트롤러로 비행 안정화\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ESC 및 PWM을 사용한 브러시리스 모터 제어\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"쿼드콥터 하드웨어 설정\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"전체 비행 컨트롤러 코드 및 설명\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"비행 시작\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"끈기에 관한 한 가지 교훈\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"잠재적인 향후 개선점\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"보너스 코드\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"질문이 있으시면 Twitter/X에서 @TimHanewich로 연락해주세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}