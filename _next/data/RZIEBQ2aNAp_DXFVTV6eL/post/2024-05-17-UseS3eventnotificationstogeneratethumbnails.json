{"pageProps":{"post":{"title":"S3 이벤트 알림을 사용하여 썸네일 생성하기","description":"","date":"2024-05-17 18:32","slug":"2024-05-17-UseS3eventnotificationstogeneratethumbnails","content":"\n\n## 이벤트 기반 서버리스 아키텍처\n\n![이미지](/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_0.png)\n\n안녕하세요!\n\n애플리케이션에서 파일을 클라우드에 저장하는 것은 파일 지속성의 한 방법으로 매우 일반적입니다. 이를 통해 애플리케이션이 어디에서 어떻게 사용될지에 대한 많은 유연성을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\nAWS는 객체를 저장할 수 있는 옵션으로 관리형 서비스 S3 (Simple Storage Service)를 제공합니다. 이 서비스는 높은 가용성, 확장성 및 성능을 갖추고 있습니다. 주로 웹 애플리케이션의 저장 서비스로 사용됩니다.\n\nS3는 버킷 안에서 객체 작업에 대한 알림을 받을 수 있는 기능도 제공합니다. 이는 객체 생성, 업데이트, 이동, 삭제 등의 작업일 수 있습니다. 이를 S3 이벤트 알림이라고 합니다.\n\n이 문서에서는 이미지를 업로드할 때마다 해당 이미지에 대한 섬네일을 생성하는 서버리스 애플리케이션을 살펴보겠습니다.\n\n우리는 이벤트 알림을 수신하고 섬네일을 생성하는 Go로 작성된 람다 함수를 가질 것입니다.\n\n<div class=\"content-ad\"></div>\n\n해보자구요!\n\n# 요구 사항\n\n- AWS 계정\n- 좋아하는 코드 편집기 (저는 Visual Studio Code를 사용할 예정입니다)\n- GitHub 계정\n\n# 아키텍처\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_1.png\" />\n\n버킷을 구성하여 객체 이벤트를 SNS 토픽으로 보내고 해당 메시지를 생성한 썸네일을 S3 버킷에 업로드할 람다로 전송할 것입니다.\n\nS3 버킷 이벤트에 람다를 직접 대상으로 지정하지 않을 것입니다. 이유는 각 이벤트 알림에 대해 하나의 대상 유형만 지정할 수 있기 때문입니다. SNS 토픽을 대상으로 사용하면 SQS 대기열, 이메일, 전화 알림 및 SNS가 지원하는 기타 여러 대상으로 이벤트를 전파할 수 있습니다.\n\n# Terraform을 사용하여 인프라 구성하기\n\n<div class=\"content-ad\"></div>\n\n## 이미지 S3 버킷\n\n시작하려면 우리의 테라폼 폴더를 설정하기 위해 프로젝트의 루트 레벨에 iac라는 폴더를 만들어 주세요. 그 안에 providers.tf라는 파일을 생성해 AWS 프로바이더를 구성할 수 있도록 다음 코드를 추가해 주세요:\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\n// Region은 AWS_REGION 환경 변수에서 설정됩니다\nprovider \"aws\" {\n}\n```\n\n만약 테라폼이 인프라 상태를 추적하도록 하려면, AWS에서 S3 버킷을 생성하고 상태 백엔드로 설정할 수 있습니다. 아래 코드에서처럼 하시면 됩니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n\n  backend \"s3\" {\n    bucket = \"terraform-medium-api-notification\" // 여기가 상태 버킷입니다\n    key    = \"thumbnail-generator/state\"\n  }\n}\n\n// AWS_REGION 환경 변수에서 지역 설정됨\nprovider \"aws\" {\n}\n```\n\n이제 이미지를 호스팅하는 S3 버킷을 만들어 봅시다.\n\niac 폴더에 s3.tf라는 파일을 만들고 다음 코드를 추가해주세요:\n\n```js\nresource \"aws_s3_bucket\" \"my-app-images\" {\n  bucket = \"my-super-app-images\" // 버킷에 고유한 이름을 사용해주세요\n}\n\nresource \"aws_s3_object\" \"images_folder\" {\n  bucket = aws_s3_bucket.my-app-images.bucket\n  key    = \"images/\"\n}\n\nresource \"aws_s3_object\" \"thumbnails_folder\" {\n  bucket = aws_s3_bucket.my-app-images.bucket\n  key    = \"thumbnails/\"\n}\n```\n\n<div class=\"content-ad\"></div>\n\n버킷 속성에서는 버킷에 고유한 이름을 사용해야 합니다. 왜냐하면 S3 버킷 이름은 모든 AWS 전역에서 고유하기 때문입니다. 이름을 제공하지 않으려면 비워두고 AWS가 고유한 버킷 이름을 할당해 줄 것입니다.\n\n이 코드는 이미지/ 및 썸네일/ 두 개의 폴더가 있는 S3 버킷을 생성합니다. 이 폴더들은 파일을 저장하는 데 사용할 것입니다.\n\n## SNS를 사용한 메시징\n\n이제 알림 주제와 메시지 대기열을 설정해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```yaml\n# messaging.tf\n\nresource \"aws_sns_topic\" \"topic\" {\n  name   = \"image-events\"\n}\n```\n\n```yaml\n# variables.tf\n\nvariable \"region\" {\n  description = \"Default region of your resources\"\n  type        = string\n  default     = \"eu-central-1\" # Set as your default region here\n}\n\nvariable \"account_id\" {\n  description = \"The ID of the default AWS account\"\n  type        = string\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그리고 variables.tfvars라는 또 다른 파일을 만들어 변수를 설정하세요:\n\n```js\nregion = \"eu-central-1\" // 원하는 지역을 설정하세요\n```\n\n나중에 테라폼 명령어에 전달할 account_id는 나중에 인수로 전달할 것입니다.\n\n## S3 이벤트 알림\n\n<div class=\"content-ad\"></div>\n\n이제 S3에 대한 이벤트 알림을 설정해 봅시다.\n\ns3.tf 파일에 다음 코드를 추가하여 버킷 알림을 설정하세요:\n\n```js\nresource \"aws_s3_bucket_notification\" \"images_put_notification\" {\n  bucket = aws_s3_bucket.my-app-images.id\n  topic {\n    topic_arn = aws_sns_topic.topic.arn\n    filter_prefix = \"images/\"\n    events = [\"s3:ObjectCreated:*\"]\n  }\n}\n```\n\n이를 활성화하려면 S3 버킷이 해당 topic으로 알림을 발행할 수 있도록 SNS topic에 정책을 추가해야 합니다. messaging.tf 파일로 이동하여 다음 정책을 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n리소스 \"aws_sns_topic\" \"topic\" {\n  name   = \"image-events\"\n  policy = data.aws_iam_policy_document.sns-topic-policy.json\n}\n\n데이터 \"aws_iam_policy_document\" \"sns-topic-policy\" {\n  policy_id = \"arn:aws:sns:${var.region}:${var.account_id}:image-events/SNSS3NotificationPolicy\"\n  statement {\n    sid    = \"s3-allow-send-messages\"\n    effect = \"Allow\"\n    principals {\n      type        = \"Service\"\n      identifiers = [\"s3.amazonaws.com\"]\n    }\n    actions = [\n      \"SNS:Publish\",\n    ]\n    resources = [\n      \"arn:aws:sns:${var.region}:${var.account_id}:image-events\",\n    ]\n    condition {\n      test     = \"ArnEquals\"\n      variable = \"aws:SourceArn\"\n      values = [\n        aws_s3_bucket.my-app-images.arn\n      ]\n    }\n  }\n}\n```\n\n여기서는 sns-topic-policy 리소스를 생성하고 해당 리소스를 policy 속성에 전달하는 topic 리소스를 생성합니다.\n\n## 기본 람다 추가하기\n\n이제 람다의 기반 인프라를 추가하기만 남았습니다. 이후에 코드를 추가할 기본 람다를 설정할 것입니다. Go 언어로 코드를 작성할 예정입니다.\n \n\n<div class=\"content-ad\"></div>\n\n먼저, 람다 함수를 초기화할 기본 코드가 필요합니다. 그래서 iac 폴더에 lambda_init_code라는 폴더를 만들어주세요. 여기서 소스 코드를 가져와서 메인 컴파일된 파일을 직접 사용하거나 README.md 파일의 지시에 따라 새로운 실행 가능 파일을 컴파일할 수 있습니다.\n\n이제 새 파일 lambdas.tf를 생성하고 다음 코드를 추가하여 람다 인프라를 추가할 수 있습니다:\n\n```js\nresource \"aws_iam_role\" \"iam_for_lambda\" {\n  name               = \"thumbnail-generator-lambda-role\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\n  inline_policy {\n    name   = \"DefaultPolicy\"\n    policy = data.aws_iam_policy_document.lambda_role_policies.json\n  }\n}\nresource \"aws_lambda_function\" \"lambda\" {\n  filename      = data.archive_file.lambda.output_path\n  function_name = \"thumbnail-generator\"\n  role          = aws_iam_role.iam_for_lambda.arn\n  handler       = \"main\"\n  runtime       = \"go1.x\"\n  timeout       = 15\n}\n\ndata \"archive_file\" \"lambda\" {\n  type        = \"zip\"\n  source_file = \"./lambda_init_code/main\"\n  output_path = \"thumbnail_generator_lambda_function_payload.zip\"\n}\n\ndata \"aws_iam_policy_document\" \"assume_role\" {\n  statement {\n    effect = \"Allow\"\n    principals {\n      type        = \"Service\"\n      identifiers = [\"lambda.amazonaws.com\"]\n    }\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\ndata \"aws_iam_policy_document\" \"lambda_role_policies\" {\n  statement {\n    effect = \"Allow\"\n    actions = [\n      \"logs:CreateLogGroup\",\n      \"logs:CreateLogStream\",\n      \"logs:PutLogEvents\",\n    ]\n    resources = [\"arn:aws:logs:*:*:*\"]\n  }\n}\n```\n\n이렇게 하면 런타임으로 Go를 사용하는 람다 함수를 생성하고 역할을 만들며, 람다 함수가 이 역할을 가정하고 클라우드워치에 로깅할 수 있도록 권한을 부여합니다.\n\n<div class=\"content-ad\"></div>\n\n다음으로, 람다가 트리거될 수 있도록 SNS 주제에 대한 구독을 만들어야 합니다. lambdas.tf 파일에 다음 코드를 추가할 수 있습니다:\n\n```js\nresource \"aws_sns_topic_subscription\" \"topic_subscription\" {\n  topic_arn = aws_sns_topic.topic.arn\n  protocol  = \"lambda\"\n  endpoint  = aws_lambda_function.lambda.arn\n}\n\nresource \"aws_lambda_permission\" \"apigw_lambda\" {\n  statement_id  = \"AllowExecutionFromSNS\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.lambda.arn\n  principal     = \"sns.amazonaws.com\"\n  source_arn    = aws_sns_topic.topic.arn\n}\n```\n\n최종 lambdas.tf 파일이 다음과 같이 되도록 만들어보세요:\n\n```js\nresource \"aws_iam_role\" \"iam_for_lambda\" {\n  name               = \"thumbnail-generator-lambda-role\"\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\n  inline_policy {\n    name   = \"DefaultPolicy\"\n    policy = data.aws_iam_policy_document.lambda_role_policies.json\n  }\n}\n\nresource \"aws_lambda_function\" \"lambda\" {\n  filename      = data.archive_file.lambda.output_path\n  function_name = \"thumbnail-generator\"\n  role          = aws_iam_role.iam_for_lambda.arn\n  handler       = \"main\"\n  runtime       = \"go1.x\"\n  timeout       = 15\n}\n\nresource \"aws_sns_topic_subscription\" \"topic_subscription\" {\n  topic_arn = aws_sns_topic.topic.arn\n  protocol  = \"lambda\"\n  endpoint  = aws_lambda_function.lambda.arn\n}\n\nresource \"aws_lambda_permission\" \"apigw_lambda\" {\n  statement_id  = \"AllowExecutionFromSNS\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.lambda.arn\n  principal     = \"sns.amazonaws.com\"\n  source_arn    = aws_sns_topic.topic.arn\n}\n\ndata \"archive_file\" \"lambda\" {\n  type        = \"zip\"\n  source_file = \"./lambda_init_code/main\"\n  output_path = \"thumbnail_generator_lambda_function_payload.zip\"\n}\n\ndata \"aws_iam_policy_document\" \"assume_role\" {\n  statement {\n    effect = \"Allow\"\n    principals {\n      type        = \"Service\"\n      identifiers = [\"lambda.amazonaws.com\"]\n    }\n    actions = [\"sts:AssumeRole\"]\n  }\n}\n\ndata \"aws_iam_policy_document\" \"lambda_role_policies\" {\n  statement {\n    effect = \"Allow\"\n    actions = [\n      \"logs:CreateLogGroup\",\n      \"logs:CreateLogStream\",\n      \"logs:PutLogEvents\"\n    ]\n    resources = [\"arn:aws:logs:*:*:*\"]\n  }\n\n  statement {\n    effect = \"Allow\"\n    actions = [\n      \"s3:GetObject\",\n    ]\n    resources = [\n      format(\"%s/%s*\", aws_s3_bucket.my-app-images.arn, aws_s3_object.images_folder.key)\n    ]\n  }\n\n  statement {\n    effect = \"Allow\"\n    actions = [\n      \"s3:PutObject\",\n    ]\n    resources = [\n      format(\"%s/%s*\", aws_s3_bucket.my-app-images.arn, aws_s3_object.thumbnails_folder.key)\n    ]\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n우리의 SNS 토픽이 람다를 이벤트와 함께 호출할 수 있도록 권한을 부여할 것입니다.\n\n람다는 15초의 제한 시간을 갖고 있습니다. 이는 기본 제한 시간이 3초이기 때문에 S3로 파일을 다운로드하고 업로드하는 작업은 이미지 크기에 따라 3초보다 더 오래 걸릴 수 있기 때문입니다. 이는 S3 작업이 인터넷을 통과하기 때문에 발생하는 것입니다. 성능을 향상시키고 싶다면 VPC를 생성하고 람다와 VPC 엔드포인트를 만들어 S3 서비스에 대한 연결이 인터넷이 아닌 AWS 네트워크를 통해 이루어지도록 할 수 있습니다.\n\n## 인프라 배포하기\n\n이제 우리가 코드로 정의한 인프라를 배포하기 위해 GitHub 액션을 사용해보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n코드에 .github/workflows 폴더를 만들고 deploy-infra.yml 파일을 추가하여 GitHub 액션 워크플로우를 정의하세요:\n\n```yml\nname: Deploy Infrastructure\non:\n  push:\n    branches:\n      - main\n    paths:\n      - iac/**/*\n      - .github/workflows/deploy-infra.yml\n\ndefaults:\n  run:\n    working-directory: iac/\n\njobs:\n  terraform:\n    name: 'Terraform'\n    runs-on: ubuntu-latest\n    steps:\n      # GitHub Actions 러너에 리포지토리를 체크아웃\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Configure AWS Credentials Action For GitHub Actions\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: eu-central-1\n\n      # 최신 버전의 Terraform CLI 설치 및 Terraform Cloud 사용자 API 토큰을 사용하여 Terraform CLI 구성 파일 설정\n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@v3\n\n      # Terraform 워킹 디렉터리를 초기화하고 초기 파일을 생성하거나 기존 파일을 로드하고 모듈 다운로드 등을 수행\n      - name: Terraform Init\n        run: terraform init\n\n      # 모든 Terraform 구성 파일이 규범적 형식을 준수하는지 확인\n      - name: Terraform Format\n        run: terraform fmt -check\n\n      # Terraform 실행 계획 생성\n      - name: Terraform Plan\n        run: |\n          terraform plan -out=plan -input=false -var-file=\"variables.tfvars\" -var account_id=${{ secrets.AWS_ACCOUNT_ID }}\n\n      # \"main\"으로 푸시되면 Terraform 구성 파일에 따라 인프라를 구축 또는 변경함\n      # 참고: \"Terraform Cloud\"에 대해 \"strict\" 상태 검사를 설정하는 것이 권장됩니다. 자세한 정보는 아래 문서를 참조하세요: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks\n      - name: Terraform Apply\n        run: terraform apply -auto-approve -input=false plan\n```\n\n- AWS_ACCESS_KEY — 자원을 생성할 권한이 있는 AWS의 액세스 키입니다\n- AWS_SECRET_ACCESS_KEY — 액세스 키와 연결된 AWS 시크릿\n- AWS_ACCOUNT_ID — AWS 대시보드 오른쪽 상단에 있는 계정 ID입니다\n- YOUR_REGION — 인프라를 배포할 기본 지역\n\n이제 코드를 GitHub에 푸시하고 워크플로우가 완료되면 인프라가 생성되는 것을 확인해보세요.\n\n<div class=\"content-ad\"></div>\n\n테스트하려면 이미지/ 폴더에 파일을 업로드하고 CloudWatch에서 람다 로그를 확인할 수 있습니다.\n\nS3는 두 개의 폴더로 생성되어야 합니다:\n\n![image](/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_2.png)\n\nSNS는 구독이 있는 상태로 생성되어야 합니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_3.png\" /> \n\nLambda를 SNS 트리거와 함께 생성해야합니다:\n\n<img src=\"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_4.png\" />\n\n# Lambda 구현\n\n<div class=\"content-ad\"></div>\n\n인프라가 설치되었으므로 썸네일 생성기 코드를 구현해야 합니다.\n\n루트 레벨에 src이라는 새 폴더를 생성하고 다음 코드를 실행하여 Go 모듈을 초기화해보세요:\n\n```js\ngo mod init example.com/thumbnail-generator\ngo get github.com/aws/aws-lambda-go\ngo get github.com/aws/aws-sdk-go-v2\ngo get github.com/aws/aws-sdk-go-v2/service/s3\ngo get github.com/aws/aws-sdk-go-v2/config\ngo get github.com/disintegration/imaging\n```\n\n원하는 경우 example.com/thumbnail-generator를 선호하는 모듈 이름으로 교체할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이제 main.go 파일을 만들고 다음 코드를 추가하세요:\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"image\"\n\t\"image/png\"\n\t\"io\"\n\t\"log\"\n\t\"strings\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/disintegration/imaging\"\n)\n\ntype awsClient struct {\n\ts3  s3.Client\n\tctx *context.Context\n}\n\nfunc handleRequest(ctx context.Context, event events.SNSEvent) error {\n\tawsConfig, err := config.LoadDefaultConfig(ctx)\n\n\tif err != nil {\n\t\tlog.Fatalf(\"AWS 기본 구성을 불러 올 수 없습니다\")\n\t\treturn err\n\t}\n\n\tawsClient := awsClient{s3: *s3.NewFromConfig(awsConfig), ctx: &ctx}\n\n\tfor _, record := range event.Records {\n\t\tvar imageEvent events.S3Event\n\n\t\terr := json.Unmarshal([]byte(record.SNS.Message), &imageEvent)\n\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"SNS 메시지 %s을 S3 이벤트 레코드로 언마샬하는 동안 오류가 발생했습니다: %v\", record.SNS.Message, err)\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, imageRecord := range imageEvent.Records {\n\t\t\tbucketName := imageRecord.S3.Bucket.Name\n\t\t\tobjectKey := imageRecord.S3.Object.Key\n\n\t\t\tfile, err := awsClient.downloadFile(bucketName, objectKey)\n\n\t\t\tlog.Printf(\"이미지 다운로드 성공\")\n\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"버킷 %s에서 파일 %s을 로드하는 중 오류가 발생했습니다\", bucketName, objectKey)\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tthumbnail, err := createThumbnail(file)\n\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"버킷 %s의 파일 %s에 대한 섬네일 생성 중 오류가 발생했습니다. 오류: %v\", bucketName, objectKey, err)\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tlog.Printf(\"섬네일 생성 성공\")\n\n\t\t\terr = awsClient.uploadFile(bucketName, objectKey, thumbnail)\n\n\t\t\tlog.Printf(\"섬네일 업로드 성공\")\n\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"버킷 %s에 파일 %s을 thumbnails/에 업로드하는 중 오류가 발생했습니다\", bucketName, objectKey)\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc createThumbnail(reader io.Reader) (*bytes.Buffer, error) {\n\tsrcImage, _, err := image.Decode(reader)\n\n\tif err != nil {\n\t\tlog.Fatalf(\"오류로 인해 파일을 디코딩할 수 없습니다: %v\", err)\n\t\treturn nil, err\n\t}\n\n\t// 80x80 크기의 섬네일 생성\n\tthumbnail := imaging.Thumbnail(srcImage, 80, 80, imaging.Lanczos)\n\n\tvar bufferBytes []byte\n\tbuffer := bytes.NewBuffer(bufferBytes)\n\n\terr = png.Encode(buffer, thumbnail)\n\n\treturn buffer, err\n}\n\nfunc (client *awsClient) downloadFile(bucketName string, objectKey string) (*bytes.Reader, error) {\n\tresult, err := client.s3.GetObject(*client.ctx, &s3.GetObjectInput{\n\t\tBucket: aws.String(bucketName),\n\t\tKey:    aws.String(objectKey),\n\t})\n\n\tif err != nil {\n\t\tlog.Fatalf(\"객체를 가져올 수 없음 %v:%v. 원인: %v\", bucketName, objectKey, err)\n\t\treturn nil, err\n\t}\n\n\tdefer result.Body.Close()\n\n\tbody, err := io.ReadAll(result.Body)\n\n\tif err != nil {\n\t\tlog.Fatalf(\"파일을 읽는 중 오류 발생. 오류: %s\", err)\n\t\treturn nil, err\n\t}\n\n\tfile := bytes.NewReader(body)\n\n\treturn file, err\n}\n\nfunc (client *awsClient) uploadFile(bucketName string, originalObjectKey string, thumbnail io.Reader) error {\n\tobjectKeyParts := strings.Split(originalObjectKey, \"/\")\n\tfileNameWithoutExtensions := strings.Split(objectKeyParts[len(objectKeyParts)-1], \".\")[0]\n\tobjectKey := fmt.Sprintf(\"thumbnails/%s_thumbnail.png\", fileNameWithoutExtensions)\n\n\t_, err := client.s3.PutObject(*client.ctx, &s3.PutObjectInput{\n\t\tBucket: aws.String(bucketName),\n\t\tKey:    aws.String(objectKey),\n\t\tBody:   thumbnail,\n\t})\n\n\tif err != nil {\n\t\tlog.Fatalf(\"%v을(를) %v의 %v에 업로드할 수 없음. 원인: %v\\n\",\n\t\t\toriginalObjectKey, bucketName, objectKey, err)\n\t}\n\n\treturn err\n}\n\nfunc main() {\n\tlambda.Start(handleRequest)\n}\n```\n\n이제 GitHub workflow를 설정하여 람다 코드를 배포해야 합니다.\n\n.github/workflows 폴더에 deploy-lambda.yml이라는 새 파일을 추가하고 다음 코드를 추가하세요:```\n\n<div class=\"content-ad\"></div>\n\n```bash\nname: Deploy Thumbnail Generator Lambda\non:\n  push:\n    branches:\n      - main\n    paths:\n      - src/**/*\n      - .github/workflows/deploy-lambda.yml\n\ndefaults:\n  run:\n    working-directory: src/\n\njobs:\n  terraform:\n    name: 'Deploy Thumbnail Generator Lambda'\n    runs-on: ubuntu-latest\n    steps:\n      # Checkout the repository to the GitHub Actions runner\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v4.1.0\n        with:\n          go-version: '1.22.0'\n\n      - name: Configure AWS Credentials Action For GitHub Actions\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${ secrets.AWS_ACCESS_KEY }\n          aws-secret-access-key: ${ secrets.AWS_SECRET_ACCESS_KEY }\n          aws-region: eu-central-1\n\n      - name: Build Lambda\n        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o build/main .\n\n      - name: Zip build\n        run: zip -r -j main.zip ./build\n\n      - name: Update Lambda code\n        run: aws lambda update-function-code --function-name=thumbnail-generator --zip-file=fileb://main.zip\n```\n\n코드를 커밋하고 레포지토리에 푸시하면 빌드가 실행됩니다.\n\n완료되면 Lambda 페이지의 \"최종 수정\" 속성을 확인하여 배포된 것을 확인할 수 있습니다:\n\n<img src=\"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_5.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n테스트하려면 S3 버킷의 images/ 폴더에 이미지를 업로드해야 합니다. 업로드가 성공하면 잠시 기다린 후 새로 만든 섬네일을 확인할 수 있습니다.\n\n# 결론\n\n이 글에서는 Terraform 인프라스트럭처를 사용하여 S3 버킷, 람다, SNS, SNS 알림 등을 생성하고 연결하는 방법을 배웠습니다.\n\n또한 S3 이벤트를 SNS 토픽에 보내어 이를 다른 소스(다른 SNS 토픽 포함)로 확산할 수 있는 방법도 배웠습니다.\n\n<div class=\"content-ad\"></div>\n\n저희는 Go로 작성된 람다 함수도 만들었어요. 이 함수는 SNS 메시지를 통해 호출되어 S3 버킷에서 파일을 다운로드하고 이미지에서 썸네일을 생성한 다음 이 썸네일을 S3에 업로드합니다.\n\n이 글의 코드는 여기에서 확인할 수 있어요.\n\n즐거운 코딩하세요! 💻","ogImage":{"url":"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_0.png"},"coverImage":"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_0.png","tag":["Tech"],"readingTime":18},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>이벤트 기반 서버리스 아키텍처</h2>\n<p><img src=\"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_0.png\" alt=\"이미지\"></p>\n<p>안녕하세요!</p>\n<p>애플리케이션에서 파일을 클라우드에 저장하는 것은 파일 지속성의 한 방법으로 매우 일반적입니다. 이를 통해 애플리케이션이 어디에서 어떻게 사용될지에 대한 많은 유연성을 제공합니다.</p>\n<p>AWS는 객체를 저장할 수 있는 옵션으로 관리형 서비스 S3 (Simple Storage Service)를 제공합니다. 이 서비스는 높은 가용성, 확장성 및 성능을 갖추고 있습니다. 주로 웹 애플리케이션의 저장 서비스로 사용됩니다.</p>\n<p>S3는 버킷 안에서 객체 작업에 대한 알림을 받을 수 있는 기능도 제공합니다. 이는 객체 생성, 업데이트, 이동, 삭제 등의 작업일 수 있습니다. 이를 S3 이벤트 알림이라고 합니다.</p>\n<p>이 문서에서는 이미지를 업로드할 때마다 해당 이미지에 대한 섬네일을 생성하는 서버리스 애플리케이션을 살펴보겠습니다.</p>\n<p>우리는 이벤트 알림을 수신하고 섬네일을 생성하는 Go로 작성된 람다 함수를 가질 것입니다.</p>\n<p>해보자구요!</p>\n<h1>요구 사항</h1>\n<ul>\n<li>AWS 계정</li>\n<li>좋아하는 코드 편집기 (저는 Visual Studio Code를 사용할 예정입니다)</li>\n<li>GitHub 계정</li>\n</ul>\n<h1>아키텍처</h1>\n<p>버킷을 구성하여 객체 이벤트를 SNS 토픽으로 보내고 해당 메시지를 생성한 썸네일을 S3 버킷에 업로드할 람다로 전송할 것입니다.</p>\n<p>S3 버킷 이벤트에 람다를 직접 대상으로 지정하지 않을 것입니다. 이유는 각 이벤트 알림에 대해 하나의 대상 유형만 지정할 수 있기 때문입니다. SNS 토픽을 대상으로 사용하면 SQS 대기열, 이메일, 전화 알림 및 SNS가 지원하는 기타 여러 대상으로 이벤트를 전파할 수 있습니다.</p>\n<h1>Terraform을 사용하여 인프라 구성하기</h1>\n<h2>이미지 S3 버킷</h2>\n<p>시작하려면 우리의 테라폼 폴더를 설정하기 위해 프로젝트의 루트 레벨에 iac라는 폴더를 만들어 주세요. 그 안에 providers.tf라는 파일을 생성해 AWS 프로바이더를 구성할 수 있도록 다음 코드를 추가해 주세요:</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"~> 5.0\"</span>\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Region은 AWS_REGION 환경 변수에서 설정됩니다</span>\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n}\n</code></pre>\n<p>만약 테라폼이 인프라 상태를 추적하도록 하려면, AWS에서 S3 버킷을 생성하고 상태 백엔드로 설정할 수 있습니다. 아래 코드에서처럼 하시면 됩니다:</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"~> 5.0\"</span>\n    }\n  }\n\n  backend <span class=\"hljs-string\">\"s3\"</span> {\n    bucket = <span class=\"hljs-string\">\"terraform-medium-api-notification\"</span> <span class=\"hljs-comment\">// 여기가 상태 버킷입니다</span>\n    key    = <span class=\"hljs-string\">\"thumbnail-generator/state\"</span>\n  }\n}\n\n<span class=\"hljs-comment\">// AWS_REGION 환경 변수에서 지역 설정됨</span>\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n}\n</code></pre>\n<p>이제 이미지를 호스팅하는 S3 버킷을 만들어 봅시다.</p>\n<p>iac 폴더에 s3.tf라는 파일을 만들고 다음 코드를 추가해주세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_s3_bucket\"</span> <span class=\"hljs-string\">\"my-app-images\"</span> {\n  bucket = <span class=\"hljs-string\">\"my-super-app-images\"</span> <span class=\"hljs-comment\">// 버킷에 고유한 이름을 사용해주세요</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_s3_object\"</span> <span class=\"hljs-string\">\"images_folder\"</span> {\n  bucket = aws_s3_bucket.<span class=\"hljs-property\">my</span>-app-images.<span class=\"hljs-property\">bucket</span>\n  key    = <span class=\"hljs-string\">\"images/\"</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_s3_object\"</span> <span class=\"hljs-string\">\"thumbnails_folder\"</span> {\n  bucket = aws_s3_bucket.<span class=\"hljs-property\">my</span>-app-images.<span class=\"hljs-property\">bucket</span>\n  key    = <span class=\"hljs-string\">\"thumbnails/\"</span>\n}\n</code></pre>\n<p>버킷 속성에서는 버킷에 고유한 이름을 사용해야 합니다. 왜냐하면 S3 버킷 이름은 모든 AWS 전역에서 고유하기 때문입니다. 이름을 제공하지 않으려면 비워두고 AWS가 고유한 버킷 이름을 할당해 줄 것입니다.</p>\n<p>이 코드는 이미지/ 및 썸네일/ 두 개의 폴더가 있는 S3 버킷을 생성합니다. 이 폴더들은 파일을 저장하는 데 사용할 것입니다.</p>\n<h2>SNS를 사용한 메시징</h2>\n<p>이제 알림 주제와 메시지 대기열을 설정해 봅시다.</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># messaging.tf</span>\n\n<span class=\"hljs-string\">resource</span> <span class=\"hljs-string\">\"aws_sns_topic\"</span> <span class=\"hljs-string\">\"topic\"</span> {\n  <span class=\"hljs-string\">name</span>   <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">\"image-events\"</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># variables.tf</span>\n\n<span class=\"hljs-string\">variable</span> <span class=\"hljs-string\">\"region\"</span> {\n  <span class=\"hljs-string\">description</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">\"Default region of your resources\"</span>\n  <span class=\"hljs-string\">type</span>        <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">string</span>\n  <span class=\"hljs-string\">default</span>     <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">\"eu-central-1\"</span> <span class=\"hljs-comment\"># Set as your default region here</span>\n}\n\n<span class=\"hljs-string\">variable</span> <span class=\"hljs-string\">\"account_id\"</span> {\n  <span class=\"hljs-string\">description</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">\"The ID of the default AWS account\"</span>\n  <span class=\"hljs-string\">type</span>        <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">string</span>\n}\n</code></pre>\n<p>그리고 variables.tfvars라는 또 다른 파일을 만들어 변수를 설정하세요:</p>\n<pre><code class=\"hljs language-js\">region = <span class=\"hljs-string\">\"eu-central-1\"</span> <span class=\"hljs-comment\">// 원하는 지역을 설정하세요</span>\n</code></pre>\n<p>나중에 테라폼 명령어에 전달할 account_id는 나중에 인수로 전달할 것입니다.</p>\n<h2>S3 이벤트 알림</h2>\n<p>이제 S3에 대한 이벤트 알림을 설정해 봅시다.</p>\n<p>s3.tf 파일에 다음 코드를 추가하여 버킷 알림을 설정하세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_s3_bucket_notification\"</span> <span class=\"hljs-string\">\"images_put_notification\"</span> {\n  bucket = aws_s3_bucket.<span class=\"hljs-property\">my</span>-app-images.<span class=\"hljs-property\">id</span>\n  topic {\n    topic_arn = aws_sns_topic.<span class=\"hljs-property\">topic</span>.<span class=\"hljs-property\">arn</span>\n    filter_prefix = <span class=\"hljs-string\">\"images/\"</span>\n    events = [<span class=\"hljs-string\">\"s3:ObjectCreated:*\"</span>]\n  }\n}\n</code></pre>\n<p>이를 활성화하려면 S3 버킷이 해당 topic으로 알림을 발행할 수 있도록 SNS topic에 정책을 추가해야 합니다. messaging.tf 파일로 이동하여 다음 정책을 추가하세요:</p>\n<pre><code class=\"hljs language-js\">리소스 <span class=\"hljs-string\">\"aws_sns_topic\"</span> <span class=\"hljs-string\">\"topic\"</span> {\n  name   = <span class=\"hljs-string\">\"image-events\"</span>\n  policy = data.<span class=\"hljs-property\">aws_iam_policy_document</span>.<span class=\"hljs-property\">sns</span>-topic-policy.<span class=\"hljs-property\">json</span>\n}\n\n데이터 <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"sns-topic-policy\"</span> {\n  policy_id = <span class=\"hljs-string\">\"arn:aws:sns:${var.region}:${var.account_id}:image-events/SNSS3NotificationPolicy\"</span>\n  statement {\n    sid    = <span class=\"hljs-string\">\"s3-allow-send-messages\"</span>\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n    principals {\n      type        = <span class=\"hljs-string\">\"Service\"</span>\n      identifiers = [<span class=\"hljs-string\">\"s3.amazonaws.com\"</span>]\n    }\n    actions = [\n      <span class=\"hljs-string\">\"SNS:Publish\"</span>,\n    ]\n    resources = [\n      <span class=\"hljs-string\">\"arn:aws:sns:${var.region}:${var.account_id}:image-events\"</span>,\n    ]\n    condition {\n      test     = <span class=\"hljs-string\">\"ArnEquals\"</span>\n      variable = <span class=\"hljs-string\">\"aws:SourceArn\"</span>\n      values = [\n        aws_s3_bucket.<span class=\"hljs-property\">my</span>-app-images.<span class=\"hljs-property\">arn</span>\n      ]\n    }\n  }\n}\n</code></pre>\n<p>여기서는 sns-topic-policy 리소스를 생성하고 해당 리소스를 policy 속성에 전달하는 topic 리소스를 생성합니다.</p>\n<h2>기본 람다 추가하기</h2>\n<p>이제 람다의 기반 인프라를 추가하기만 남았습니다. 이후에 코드를 추가할 기본 람다를 설정할 것입니다. Go 언어로 코드를 작성할 예정입니다.</p>\n<p>먼저, 람다 함수를 초기화할 기본 코드가 필요합니다. 그래서 iac 폴더에 lambda_init_code라는 폴더를 만들어주세요. 여기서 소스 코드를 가져와서 메인 컴파일된 파일을 직접 사용하거나 README.md 파일의 지시에 따라 새로운 실행 가능 파일을 컴파일할 수 있습니다.</p>\n<p>이제 새 파일 lambdas.tf를 생성하고 다음 코드를 추가하여 람다 인프라를 추가할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_iam_role\"</span> <span class=\"hljs-string\">\"iam_for_lambda\"</span> {\n  name               = <span class=\"hljs-string\">\"thumbnail-generator-lambda-role\"</span>\n  assume_role_policy = data.<span class=\"hljs-property\">aws_iam_policy_document</span>.<span class=\"hljs-property\">assume_role</span>.<span class=\"hljs-property\">json</span>\n  inline_policy {\n    name   = <span class=\"hljs-string\">\"DefaultPolicy\"</span>\n    policy = data.<span class=\"hljs-property\">aws_iam_policy_document</span>.<span class=\"hljs-property\">lambda_role_policies</span>.<span class=\"hljs-property\">json</span>\n  }\n}\nresource <span class=\"hljs-string\">\"aws_lambda_function\"</span> <span class=\"hljs-string\">\"lambda\"</span> {\n  filename      = data.<span class=\"hljs-property\">archive_file</span>.<span class=\"hljs-property\">lambda</span>.<span class=\"hljs-property\">output_path</span>\n  function_name = <span class=\"hljs-string\">\"thumbnail-generator\"</span>\n  role          = aws_iam_role.<span class=\"hljs-property\">iam_for_lambda</span>.<span class=\"hljs-property\">arn</span>\n  handler       = <span class=\"hljs-string\">\"main\"</span>\n  runtime       = <span class=\"hljs-string\">\"go1.x\"</span>\n  timeout       = <span class=\"hljs-number\">15</span>\n}\n\ndata <span class=\"hljs-string\">\"archive_file\"</span> <span class=\"hljs-string\">\"lambda\"</span> {\n  type        = <span class=\"hljs-string\">\"zip\"</span>\n  source_file = <span class=\"hljs-string\">\"./lambda_init_code/main\"</span>\n  output_path = <span class=\"hljs-string\">\"thumbnail_generator_lambda_function_payload.zip\"</span>\n}\n\ndata <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"assume_role\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n    principals {\n      type        = <span class=\"hljs-string\">\"Service\"</span>\n      identifiers = [<span class=\"hljs-string\">\"lambda.amazonaws.com\"</span>]\n    }\n    actions = [<span class=\"hljs-string\">\"sts:AssumeRole\"</span>]\n  }\n}\n\ndata <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"lambda_role_policies\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n    actions = [\n      <span class=\"hljs-string\">\"logs:CreateLogGroup\"</span>,\n      <span class=\"hljs-string\">\"logs:CreateLogStream\"</span>,\n      <span class=\"hljs-string\">\"logs:PutLogEvents\"</span>,\n    ]\n    resources = [<span class=\"hljs-string\">\"arn:aws:logs:*:*:*\"</span>]\n  }\n}\n</code></pre>\n<p>이렇게 하면 런타임으로 Go를 사용하는 람다 함수를 생성하고 역할을 만들며, 람다 함수가 이 역할을 가정하고 클라우드워치에 로깅할 수 있도록 권한을 부여합니다.</p>\n<p>다음으로, 람다가 트리거될 수 있도록 SNS 주제에 대한 구독을 만들어야 합니다. lambdas.tf 파일에 다음 코드를 추가할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_sns_topic_subscription\"</span> <span class=\"hljs-string\">\"topic_subscription\"</span> {\n  topic_arn = aws_sns_topic.<span class=\"hljs-property\">topic</span>.<span class=\"hljs-property\">arn</span>\n  protocol  = <span class=\"hljs-string\">\"lambda\"</span>\n  endpoint  = aws_lambda_function.<span class=\"hljs-property\">lambda</span>.<span class=\"hljs-property\">arn</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_lambda_permission\"</span> <span class=\"hljs-string\">\"apigw_lambda\"</span> {\n  statement_id  = <span class=\"hljs-string\">\"AllowExecutionFromSNS\"</span>\n  action        = <span class=\"hljs-string\">\"lambda:InvokeFunction\"</span>\n  function_name = aws_lambda_function.<span class=\"hljs-property\">lambda</span>.<span class=\"hljs-property\">arn</span>\n  principal     = <span class=\"hljs-string\">\"sns.amazonaws.com\"</span>\n  source_arn    = aws_sns_topic.<span class=\"hljs-property\">topic</span>.<span class=\"hljs-property\">arn</span>\n}\n</code></pre>\n<p>최종 lambdas.tf 파일이 다음과 같이 되도록 만들어보세요:</p>\n<pre><code class=\"hljs language-js\">resource <span class=\"hljs-string\">\"aws_iam_role\"</span> <span class=\"hljs-string\">\"iam_for_lambda\"</span> {\n  name               = <span class=\"hljs-string\">\"thumbnail-generator-lambda-role\"</span>\n  assume_role_policy = data.<span class=\"hljs-property\">aws_iam_policy_document</span>.<span class=\"hljs-property\">assume_role</span>.<span class=\"hljs-property\">json</span>\n  inline_policy {\n    name   = <span class=\"hljs-string\">\"DefaultPolicy\"</span>\n    policy = data.<span class=\"hljs-property\">aws_iam_policy_document</span>.<span class=\"hljs-property\">lambda_role_policies</span>.<span class=\"hljs-property\">json</span>\n  }\n}\n\nresource <span class=\"hljs-string\">\"aws_lambda_function\"</span> <span class=\"hljs-string\">\"lambda\"</span> {\n  filename      = data.<span class=\"hljs-property\">archive_file</span>.<span class=\"hljs-property\">lambda</span>.<span class=\"hljs-property\">output_path</span>\n  function_name = <span class=\"hljs-string\">\"thumbnail-generator\"</span>\n  role          = aws_iam_role.<span class=\"hljs-property\">iam_for_lambda</span>.<span class=\"hljs-property\">arn</span>\n  handler       = <span class=\"hljs-string\">\"main\"</span>\n  runtime       = <span class=\"hljs-string\">\"go1.x\"</span>\n  timeout       = <span class=\"hljs-number\">15</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_sns_topic_subscription\"</span> <span class=\"hljs-string\">\"topic_subscription\"</span> {\n  topic_arn = aws_sns_topic.<span class=\"hljs-property\">topic</span>.<span class=\"hljs-property\">arn</span>\n  protocol  = <span class=\"hljs-string\">\"lambda\"</span>\n  endpoint  = aws_lambda_function.<span class=\"hljs-property\">lambda</span>.<span class=\"hljs-property\">arn</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_lambda_permission\"</span> <span class=\"hljs-string\">\"apigw_lambda\"</span> {\n  statement_id  = <span class=\"hljs-string\">\"AllowExecutionFromSNS\"</span>\n  action        = <span class=\"hljs-string\">\"lambda:InvokeFunction\"</span>\n  function_name = aws_lambda_function.<span class=\"hljs-property\">lambda</span>.<span class=\"hljs-property\">arn</span>\n  principal     = <span class=\"hljs-string\">\"sns.amazonaws.com\"</span>\n  source_arn    = aws_sns_topic.<span class=\"hljs-property\">topic</span>.<span class=\"hljs-property\">arn</span>\n}\n\ndata <span class=\"hljs-string\">\"archive_file\"</span> <span class=\"hljs-string\">\"lambda\"</span> {\n  type        = <span class=\"hljs-string\">\"zip\"</span>\n  source_file = <span class=\"hljs-string\">\"./lambda_init_code/main\"</span>\n  output_path = <span class=\"hljs-string\">\"thumbnail_generator_lambda_function_payload.zip\"</span>\n}\n\ndata <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"assume_role\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n    principals {\n      type        = <span class=\"hljs-string\">\"Service\"</span>\n      identifiers = [<span class=\"hljs-string\">\"lambda.amazonaws.com\"</span>]\n    }\n    actions = [<span class=\"hljs-string\">\"sts:AssumeRole\"</span>]\n  }\n}\n\ndata <span class=\"hljs-string\">\"aws_iam_policy_document\"</span> <span class=\"hljs-string\">\"lambda_role_policies\"</span> {\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n    actions = [\n      <span class=\"hljs-string\">\"logs:CreateLogGroup\"</span>,\n      <span class=\"hljs-string\">\"logs:CreateLogStream\"</span>,\n      <span class=\"hljs-string\">\"logs:PutLogEvents\"</span>\n    ]\n    resources = [<span class=\"hljs-string\">\"arn:aws:logs:*:*:*\"</span>]\n  }\n\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n    actions = [\n      <span class=\"hljs-string\">\"s3:GetObject\"</span>,\n    ]\n    resources = [\n      <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-string\">\"%s/%s*\"</span>, aws_s3_bucket.<span class=\"hljs-property\">my</span>-app-images.<span class=\"hljs-property\">arn</span>, aws_s3_object.<span class=\"hljs-property\">images_folder</span>.<span class=\"hljs-property\">key</span>)\n    ]\n  }\n\n  statement {\n    effect = <span class=\"hljs-string\">\"Allow\"</span>\n    actions = [\n      <span class=\"hljs-string\">\"s3:PutObject\"</span>,\n    ]\n    resources = [\n      <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-string\">\"%s/%s*\"</span>, aws_s3_bucket.<span class=\"hljs-property\">my</span>-app-images.<span class=\"hljs-property\">arn</span>, aws_s3_object.<span class=\"hljs-property\">thumbnails_folder</span>.<span class=\"hljs-property\">key</span>)\n    ]\n  }\n}\n</code></pre>\n<p>우리의 SNS 토픽이 람다를 이벤트와 함께 호출할 수 있도록 권한을 부여할 것입니다.</p>\n<p>람다는 15초의 제한 시간을 갖고 있습니다. 이는 기본 제한 시간이 3초이기 때문에 S3로 파일을 다운로드하고 업로드하는 작업은 이미지 크기에 따라 3초보다 더 오래 걸릴 수 있기 때문입니다. 이는 S3 작업이 인터넷을 통과하기 때문에 발생하는 것입니다. 성능을 향상시키고 싶다면 VPC를 생성하고 람다와 VPC 엔드포인트를 만들어 S3 서비스에 대한 연결이 인터넷이 아닌 AWS 네트워크를 통해 이루어지도록 할 수 있습니다.</p>\n<h2>인프라 배포하기</h2>\n<p>이제 우리가 코드로 정의한 인프라를 배포하기 위해 GitHub 액션을 사용해보겠습니다.</p>\n<p>코드에 .github/workflows 폴더를 만들고 deploy-infra.yml 파일을 추가하여 GitHub 액션 워크플로우를 정의하세요:</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">Infrastructure</span>\n<span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n    <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">iac/**/*</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">.github/workflows/deploy-infra.yml</span>\n\n<span class=\"hljs-attr\">defaults:</span>\n  <span class=\"hljs-attr\">run:</span>\n    <span class=\"hljs-attr\">working-directory:</span> <span class=\"hljs-string\">iac/</span>\n\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">terraform:</span>\n    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">'Terraform'</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-comment\"># GitHub Actions 러너에 리포지토리를 체크아웃</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span>\n\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Configure</span> <span class=\"hljs-string\">AWS</span> <span class=\"hljs-string\">Credentials</span> <span class=\"hljs-string\">Action</span> <span class=\"hljs-string\">For</span> <span class=\"hljs-string\">GitHub</span> <span class=\"hljs-string\">Actions</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">aws-actions/configure-aws-credentials@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">aws-access-key-id:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.AWS_ACCESS_KEY</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">aws-secret-access-key:</span> <span class=\"hljs-string\">${{</span> <span class=\"hljs-string\">secrets.AWS_SECRET_ACCESS_KEY</span> <span class=\"hljs-string\">}}</span>\n          <span class=\"hljs-attr\">aws-region:</span> <span class=\"hljs-string\">eu-central-1</span>\n\n      <span class=\"hljs-comment\"># 최신 버전의 Terraform CLI 설치 및 Terraform Cloud 사용자 API 토큰을 사용하여 Terraform CLI 구성 파일 설정</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Setup</span> <span class=\"hljs-string\">Terraform</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">hashicorp/setup-terraform@v3</span>\n\n      <span class=\"hljs-comment\"># Terraform 워킹 디렉터리를 초기화하고 초기 파일을 생성하거나 기존 파일을 로드하고 모듈 다운로드 등을 수행</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Terraform</span> <span class=\"hljs-string\">Init</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">init</span>\n\n      <span class=\"hljs-comment\"># 모든 Terraform 구성 파일이 규범적 형식을 준수하는지 확인</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Terraform</span> <span class=\"hljs-string\">Format</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">fmt</span> <span class=\"hljs-string\">-check</span>\n\n      <span class=\"hljs-comment\"># Terraform 실행 계획 생성</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Terraform</span> <span class=\"hljs-string\">Plan</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|\n          terraform plan -out=plan -input=false -var-file=\"variables.tfvars\" -var account_id=${{ secrets.AWS_ACCOUNT_ID }}\n</span>\n      <span class=\"hljs-comment\"># \"main\"으로 푸시되면 Terraform 구성 파일에 따라 인프라를 구축 또는 변경함</span>\n      <span class=\"hljs-comment\"># 참고: \"Terraform Cloud\"에 대해 \"strict\" 상태 검사를 설정하는 것이 권장됩니다. 자세한 정보는 아래 문서를 참조하세요: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Terraform</span> <span class=\"hljs-string\">Apply</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">terraform</span> <span class=\"hljs-string\">apply</span> <span class=\"hljs-string\">-auto-approve</span> <span class=\"hljs-string\">-input=false</span> <span class=\"hljs-string\">plan</span>\n</code></pre>\n<ul>\n<li>AWS_ACCESS_KEY — 자원을 생성할 권한이 있는 AWS의 액세스 키입니다</li>\n<li>AWS_SECRET_ACCESS_KEY — 액세스 키와 연결된 AWS 시크릿</li>\n<li>AWS_ACCOUNT_ID — AWS 대시보드 오른쪽 상단에 있는 계정 ID입니다</li>\n<li>YOUR_REGION — 인프라를 배포할 기본 지역</li>\n</ul>\n<p>이제 코드를 GitHub에 푸시하고 워크플로우가 완료되면 인프라가 생성되는 것을 확인해보세요.</p>\n<p>테스트하려면 이미지/ 폴더에 파일을 업로드하고 CloudWatch에서 람다 로그를 확인할 수 있습니다.</p>\n<p>S3는 두 개의 폴더로 생성되어야 합니다:</p>\n<p><img src=\"/assets/img/2024-05-17-UseS3eventnotificationstogeneratethumbnails_2.png\" alt=\"image\"></p>\n<p>SNS는 구독이 있는 상태로 생성되어야 합니다:</p>\n<p>Lambda를 SNS 트리거와 함께 생성해야합니다:</p>\n<h1>Lambda 구현</h1>\n<p>인프라가 설치되었으므로 썸네일 생성기 코드를 구현해야 합니다.</p>\n<p>루트 레벨에 src이라는 새 폴더를 생성하고 다음 코드를 실행하여 Go 모듈을 초기화해보세요:</p>\n<pre><code class=\"hljs language-js\">go mod init example.<span class=\"hljs-property\">com</span>/thumbnail-generator\ngo get github.<span class=\"hljs-property\">com</span>/aws/aws-lambda-go\ngo get github.<span class=\"hljs-property\">com</span>/aws/aws-sdk-go-v2\ngo get github.<span class=\"hljs-property\">com</span>/aws/aws-sdk-go-v2/service/s3\ngo get github.<span class=\"hljs-property\">com</span>/aws/aws-sdk-go-v2/config\ngo get github.<span class=\"hljs-property\">com</span>/disintegration/imaging\n</code></pre>\n<p>원하는 경우 example.com/thumbnail-generator를 선호하는 모듈 이름으로 교체할 수 있습니다.</p>\n<p>이제 main.go 파일을 만들고 다음 코드를 추가하세요:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"bytes\"</span>\n\t<span class=\"hljs-string\">\"context\"</span>\n\t<span class=\"hljs-string\">\"encoding/json\"</span>\n\t<span class=\"hljs-string\">\"fmt\"</span>\n\t<span class=\"hljs-string\">\"image\"</span>\n\t<span class=\"hljs-string\">\"image/png\"</span>\n\t<span class=\"hljs-string\">\"io\"</span>\n\t<span class=\"hljs-string\">\"log\"</span>\n\t<span class=\"hljs-string\">\"strings\"</span>\n\n\t<span class=\"hljs-string\">\"github.com/aws/aws-lambda-go/events\"</span>\n\t<span class=\"hljs-string\">\"github.com/aws/aws-lambda-go/lambda\"</span>\n\t<span class=\"hljs-string\">\"github.com/aws/aws-sdk-go-v2/aws\"</span>\n\t<span class=\"hljs-string\">\"github.com/aws/aws-sdk-go-v2/config\"</span>\n\t<span class=\"hljs-string\">\"github.com/aws/aws-sdk-go-v2/service/s3\"</span>\n\t<span class=\"hljs-string\">\"github.com/disintegration/imaging\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> awsClient <span class=\"hljs-keyword\">struct</span> {\n\ts3  s3.Client\n\tctx *context.Context\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handleRequest</span><span class=\"hljs-params\">(ctx context.Context, event events.SNSEvent)</span></span> <span class=\"hljs-type\">error</span> {\n\tawsConfig, err := config.LoadDefaultConfig(ctx)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlog.Fatalf(<span class=\"hljs-string\">\"AWS 기본 구성을 불러 올 수 없습니다\"</span>)\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\n\tawsClient := awsClient{s3: *s3.NewFromConfig(awsConfig), ctx: &#x26;ctx}\n\n\t<span class=\"hljs-keyword\">for</span> _, record := <span class=\"hljs-keyword\">range</span> event.Records {\n\t\t<span class=\"hljs-keyword\">var</span> imageEvent events.S3Event\n\n\t\terr := json.Unmarshal([]<span class=\"hljs-type\">byte</span>(record.SNS.Message), &#x26;imageEvent)\n\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\tlog.Fatalf(<span class=\"hljs-string\">\"SNS 메시지 %s을 S3 이벤트 레코드로 언마샬하는 동안 오류가 발생했습니다: %v\"</span>, record.SNS.Message, err)\n\t\t\t<span class=\"hljs-keyword\">return</span> err\n\t\t}\n\n\t\t<span class=\"hljs-keyword\">for</span> _, imageRecord := <span class=\"hljs-keyword\">range</span> imageEvent.Records {\n\t\t\tbucketName := imageRecord.S3.Bucket.Name\n\t\t\tobjectKey := imageRecord.S3.Object.Key\n\n\t\t\tfile, err := awsClient.downloadFile(bucketName, objectKey)\n\n\t\t\tlog.Printf(<span class=\"hljs-string\">\"이미지 다운로드 성공\"</span>)\n\n\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t\tlog.Fatalf(<span class=\"hljs-string\">\"버킷 %s에서 파일 %s을 로드하는 중 오류가 발생했습니다\"</span>, bucketName, objectKey)\n\t\t\t\t<span class=\"hljs-keyword\">return</span> err\n\t\t\t}\n\n\t\t\tthumbnail, err := createThumbnail(file)\n\n\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t\tlog.Fatalf(<span class=\"hljs-string\">\"버킷 %s의 파일 %s에 대한 섬네일 생성 중 오류가 발생했습니다. 오류: %v\"</span>, bucketName, objectKey, err)\n\t\t\t\t<span class=\"hljs-keyword\">return</span> err\n\t\t\t}\n\n\t\t\tlog.Printf(<span class=\"hljs-string\">\"섬네일 생성 성공\"</span>)\n\n\t\t\terr = awsClient.uploadFile(bucketName, objectKey, thumbnail)\n\n\t\t\tlog.Printf(<span class=\"hljs-string\">\"섬네일 업로드 성공\"</span>)\n\n\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t\tlog.Fatalf(<span class=\"hljs-string\">\"버킷 %s에 파일 %s을 thumbnails/에 업로드하는 중 오류가 발생했습니다\"</span>, bucketName, objectKey)\n\t\t\t\t<span class=\"hljs-keyword\">return</span> err\n\t\t\t}\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">createThumbnail</span><span class=\"hljs-params\">(reader io.Reader)</span></span> (*bytes.Buffer, <span class=\"hljs-type\">error</span>) {\n\tsrcImage, _, err := image.Decode(reader)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlog.Fatalf(<span class=\"hljs-string\">\"오류로 인해 파일을 디코딩할 수 없습니다: %v\"</span>, err)\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\t<span class=\"hljs-comment\">// 80x80 크기의 섬네일 생성</span>\n\tthumbnail := imaging.Thumbnail(srcImage, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">80</span>, imaging.Lanczos)\n\n\t<span class=\"hljs-keyword\">var</span> bufferBytes []<span class=\"hljs-type\">byte</span>\n\tbuffer := bytes.NewBuffer(bufferBytes)\n\n\terr = png.Encode(buffer, thumbnail)\n\n\t<span class=\"hljs-keyword\">return</span> buffer, err\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(client *awsClient)</span></span> downloadFile(bucketName <span class=\"hljs-type\">string</span>, objectKey <span class=\"hljs-type\">string</span>) (*bytes.Reader, <span class=\"hljs-type\">error</span>) {\n\tresult, err := client.s3.GetObject(*client.ctx, &#x26;s3.GetObjectInput{\n\t\tBucket: aws.String(bucketName),\n\t\tKey:    aws.String(objectKey),\n\t})\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlog.Fatalf(<span class=\"hljs-string\">\"객체를 가져올 수 없음 %v:%v. 원인: %v\"</span>, bucketName, objectKey, err)\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\t<span class=\"hljs-keyword\">defer</span> result.Body.Close()\n\n\tbody, err := io.ReadAll(result.Body)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlog.Fatalf(<span class=\"hljs-string\">\"파일을 읽는 중 오류 발생. 오류: %s\"</span>, err)\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\tfile := bytes.NewReader(body)\n\n\t<span class=\"hljs-keyword\">return</span> file, err\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(client *awsClient)</span></span> uploadFile(bucketName <span class=\"hljs-type\">string</span>, originalObjectKey <span class=\"hljs-type\">string</span>, thumbnail io.Reader) <span class=\"hljs-type\">error</span> {\n\tobjectKeyParts := strings.Split(originalObjectKey, <span class=\"hljs-string\">\"/\"</span>)\n\tfileNameWithoutExtensions := strings.Split(objectKeyParts[<span class=\"hljs-built_in\">len</span>(objectKeyParts)<span class=\"hljs-number\">-1</span>], <span class=\"hljs-string\">\".\"</span>)[<span class=\"hljs-number\">0</span>]\n\tobjectKey := fmt.Sprintf(<span class=\"hljs-string\">\"thumbnails/%s_thumbnail.png\"</span>, fileNameWithoutExtensions)\n\n\t_, err := client.s3.PutObject(*client.ctx, &#x26;s3.PutObjectInput{\n\t\tBucket: aws.String(bucketName),\n\t\tKey:    aws.String(objectKey),\n\t\tBody:   thumbnail,\n\t})\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlog.Fatalf(<span class=\"hljs-string\">\"%v을(를) %v의 %v에 업로드할 수 없음. 원인: %v\\n\"</span>,\n\t\t\toriginalObjectKey, bucketName, objectKey, err)\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> err\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tlambda.Start(handleRequest)\n}\n</code></pre>\n<p>이제 GitHub workflow를 설정하여 람다 코드를 배포해야 합니다.</p>\n<p>.github/workflows 폴더에 deploy-lambda.yml이라는 새 파일을 추가하고 다음 코드를 추가하세요:```</p>\n<pre><code class=\"hljs language-bash\">name: Deploy Thumbnail Generator Lambda\non:\n  push:\n    branches:\n      - main\n    paths:\n      - src/**/*\n      - .github/workflows/deploy-lambda.yml\n\ndefaults:\n  run:\n    working-directory: src/\n\n<span class=\"hljs-built_in\">jobs</span>:\n  terraform:\n    name: <span class=\"hljs-string\">'Deploy Thumbnail Generator Lambda'</span>\n    runs-on: ubuntu-latest\n    steps:\n      <span class=\"hljs-comment\"># Checkout the repository to the GitHub Actions runner</span>\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - uses: actions/setup-go@v4.1.0\n        with:\n          go-version: <span class=\"hljs-string\">'1.22.0'</span>\n\n      - name: Configure AWS Credentials Action For GitHub Actions\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: <span class=\"hljs-variable\">${ secrets.AWS_ACCESS_KEY }</span>\n          aws-secret-access-key: <span class=\"hljs-variable\">${ secrets.AWS_SECRET_ACCESS_KEY }</span>\n          aws-region: eu-central-1\n\n      - name: Build Lambda\n        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o build/main .\n\n      - name: Zip build\n        run: zip -r -j main.zip ./build\n\n      - name: Update Lambda code\n        run: aws lambda update-function-code --function-name=thumbnail-generator --zip-file=fileb://main.zip\n</code></pre>\n<p>코드를 커밋하고 레포지토리에 푸시하면 빌드가 실행됩니다.</p>\n<p>완료되면 Lambda 페이지의 \"최종 수정\" 속성을 확인하여 배포된 것을 확인할 수 있습니다:</p>\n<p>테스트하려면 S3 버킷의 images/ 폴더에 이미지를 업로드해야 합니다. 업로드가 성공하면 잠시 기다린 후 새로 만든 섬네일을 확인할 수 있습니다.</p>\n<h1>결론</h1>\n<p>이 글에서는 Terraform 인프라스트럭처를 사용하여 S3 버킷, 람다, SNS, SNS 알림 등을 생성하고 연결하는 방법을 배웠습니다.</p>\n<p>또한 S3 이벤트를 SNS 토픽에 보내어 이를 다른 소스(다른 SNS 토픽 포함)로 확산할 수 있는 방법도 배웠습니다.</p>\n<p>저희는 Go로 작성된 람다 함수도 만들었어요. 이 함수는 SNS 메시지를 통해 호출되어 S3 버킷에서 파일을 다운로드하고 이미지에서 썸네일을 생성한 다음 이 썸네일을 S3에 업로드합니다.</p>\n<p>이 글의 코드는 여기에서 확인할 수 있어요.</p>\n<p>즐거운 코딩하세요! 💻</p>\n</body>\n</html>\n"},"__N_SSG":true}