{"pageProps":{"post":{"title":"왜 PEDAC를 좋아하지 않을 수도 있을 것입니다","description":"","date":"2024-05-17 17:44","slug":"2024-05-17-WhyYouWontLikePEDAC","content":"\n\n## PEDAC는 정말 어렵죠. 그렇다고 말했어요.\n\n![image](/assets/img/2024-05-17-WhyYouWontLikePEDAC_0.png)\n\n시간 낭비 같아요.\n직관적이지 않고 어색하게 느껴져요.\n배울 수 없는 것처럼 느껴져요.\n\n최소한 처음에는 이런 느낌입니다.\n\n<div class=\"content-ad\"></div>\n\n본문을 마칠 즈음, 저는 PEDAC 및 문제 해결 과정 전체에 대해 학습하는 동안 동기부여를 잃은 사람들, 정체감을 느끼는 사람들, \"연기자 증후군\"에 대한 새로운 동기 부여를 주고 PEDAC에 대한 진정한 감사함과 개선 팁을 제공하기를 희망합니다.\n\n## 이 기사에서는 다음과 같은 내용을 다룰 것입니다:\n\n- 시작과 현재의 차이\n- 학습에 어려움을 겪는 이유 및 극복 방법\n- 동기를 유지하고 더 효과적으로 학습하는 데 도움이 된 정신적 변화\n- 코딩 자체보다 그것을 사랑하는 방법 (결국 빠르게 학습하고 더 나은 문제 해결자가 되는 데 도움이 될 것입니다)\n\n# 개인 이야기:\n\n<div class=\"content-ad\"></div>\n\n저는 현재 Launch School이라는 온라인 커리큘럼에 등록되어 있습니다. 이 학교는 견고한 문제 해결 프로세스를 개발하는 데 큰 중점을 둡니다. 그들은 여러분이 프로세스를 개발하는 데 도움을 주는 PEDAC라는 프레임워크를 소개합니다.\n\nLaunch School을 시작하기 한 해 전에 프로그래밍 기초를 공부했었지만, 문제 해결에는 전혀 손 대지 못했습니다. Code Wars의 초급 연습 문제를 시도해보지만 해결하지 못했죠.\n\n이는 매우 흐뭇했고, 다른 사람들 대부분이 이러한 \"쉬운\" 질문들을 해결할 수 있다는 것을 알면서 상처받았습니다. 1년 넘는 공부 끝에 한 문제도 거의 해결하지 못했기 때문이죠. 그러나 문제 해결 프로세스에 주력한 후에는 이제 초보자 및 중급 수준의 많은 문제들을 자신 있게 쉽게 해결할 수 있게 되었습니다.\n\n이 일은 단 몇 주 만에 일어난 일입니다. 만약 자신감을 잃고 이 보기 어렵고 복잡한 문제들을 쉽게 해결할 수 있는 사람으로 스스로 그릴 수 없다면 — 두려워하지 마세요, 왜냐하면 몇 달 전에 저도 그 똑같은 고비를 넘었기 때문이죠.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-17-WhyYouWontLikePEDAC_1.png)\n\n# 이 공부가 어색하게 느껴지는 이유\n\n내가 소속된 동료들 중 대부분이 불편해하는 가장 큰 문제 중 하나는 공포의 \"Hack 'n' Slash\" 접근 방식입니다.\n\n이 문제를 지적하면서도, 우리는 여전히 의도적이거나 계획적인 다른 방식을 취하는 것을 싫어합니다.\n\n\n<div class=\"content-ad\"></div>\n\n왜 그럴까요?\n\n## 익숙하지 않아서 생산성이 떨어지는 기분이 들어요.\n\n지금까지 대부분의 문제는 복잡도가 낮았습니다. 당장 들어가서 코딩을 시작할 수 있어요. 더 흥미롭고 당신이 더 빨리 성취감을 느끼게 되죠.\n\n지금까지의 경험은 이랬어요:\n\n<div class=\"content-ad\"></div>\n\n가장 빨리 작업을 완료하는 데 도움이 되는 방법이죠... 지금까지는요.\n\n문제를 시작할 때 문제 자체에 대해 생각하고 긴 해결책을 쓰는 것은 지금까지 우리가 문제를 해결해 오던 방식과 대립됩니다.\n\n이것도 완전히 이해가 가죠. 처음에는 기본 개념과 언어 능숙도를 개발하는 데 중점을 두죠. 새로운 개념을 실용적인 방식으로 학습하기 위해 기본적이고 쉬운 문제를 해결해야 합니다.\n\n이것이 'PEDAC 학습에 마찰력을 일으키는 데 기여하는 몇 가지를 한다고 생각합니다:\n\n<div class=\"content-ad\"></div>\n\n- 더 쉬운 문제들은 보통 나에게 보상을 더 빨리 줬어. 나는 해결책에 더 빨리 도달했어.\n- 이는 향후 소프트웨어 엔지니어링 문제에 필요한 해결책과 기술에 대한 기대감을 형성할 수 있어요.\n\n정신적 변화:\n\n- PEDAC가 일반적으로 더 효율적인 방법이라는 것을 상기해봐, 비록 그렇게 느껴지지 않아도. 문제의 난이도가 증가할수록 더욱 참된 이치가 된다.\n- 문제 해결에 걸리는 시간에 대한 기대를 재조정해봐. 문제가 어려워질수록 문제 해결에 필요한 시간이 증가한다. 이것은 정상적이야.\n- 기억해, 당신이 PEDAC를 더 효율적으로 여기는 아이디어를 받아들일 때까지 첫 번째 여러 문제와 시도에서 이런 느낌을 가질 것이라는 걸 기억해봐. 감정에도 불구하고 과정을 믿어봐.\n- 이런 느낌들은 좋은 징조일 수 있어. 당신이 배우고 있고 당신의 두뇌가 문제 해결 머신이 되도록 재배열되고 있는 신호야. 당신의 두뇌는 변하고 변화는 노력을 필요로해. 어느 정도의 정신적 마찰을 겪을 것으로 예상돼.\n\n## 지루하고 동기부여가 되지 않는 느낌을 받을지도 모르지만... 이것은 변할 수 있어요!\n\n<div class=\"content-ad\"></div>\n\n지금까지 학습 과정은 매우 간단해 왔어요:\n\n- 새로운 개념을 배우고 개념 모델을 개발합니다.\n- 구문과 새로운 용어를 암기합니다.\n- 배운 개념을 기초 문제로 테스트합니다.\n- 문제를 해결하면 치즈를 얻게 돼요 🧀\n\n![이미지](/assets/img/2024-05-17-WhyYouWontLikePEDAC_2.png)\n\n우리는 초기에는 치즈를 더 자주 먹고 쉽게 먹어요.\n\n<div class=\"content-ad\"></div>\n\n런치 스쿨 커리큘럼에서 말하는 대로, 문제를 해결하는 유일한 방법은 없으며 PEDAC는 단지 당신만의 문제 해결 과정을 찾기 위한 지침일 뿐입니다.\n\n새로운 수업은 이전과 같은 경험이 아닙니다.\n그것은 규칙이나 메타모델 또는 외워야 하는 문법이 아닙니다. 오히려 당신이 운동을 하며 개발해야 하는 근육과 유사합니다.\n\n이 새로운 수업은 기억력과 정의보다는 내면적 사색, 검토 및 실험을 더 필요로 합니다.\n\n처음에는 개념 또는 용어를 손에 익힌 것을 알 수 있었던 때입니다. 그때 당신은 그 정의를 정확히 알고 코드에서 예제를 보여주고 이해할 수 있을 때였습니다.\n\n<div class=\"content-ad\"></div>\n\nPEDAC를 이해했다고 어떻게 알 수 있을까요?\n\n그 답변은 확실하지 않습니다. 현재 이해와 비교할 문서나 코드 예제가 없습니다. 구문에서 PEDAC를 식별할 수 있는 코드 예제가 없습니다.\n\n이는 최종 목표가 조금 덜 확실하기 때문에 두려울 수 있습니다.\n\n\"내가 이것을 알고 있다는 것을 어떻게 알까요?\"\n\n<div class=\"content-ad\"></div>\n\n처음으로 PEDAC를 배우려고 시도했을 때 저는 매우 동기 부여가 떨어지고 사기가 떨어지는 느낌을 받았어요. 보상이 명확하지 않았고, 내가 진행 중인지 알 수 없는 것 같았어요. \n\n내가 본 것은 다른 사람들이 자신들만의 방법으로 문제를 효율적으로 해결하는 모습 뿐이었는데, 한 번에 \"이게 바로 네가 해야 하는 방법이야, 여기가 정의야\" 라는 순간을 찾지 못했어요. 이로 인해 PEDAC는 당신과 맞지 않는 것인 것 처럼 느껴질 수 있고, 그것을 이해하기 어려울 수 있어요.\n\n기본 사고 변경:\n\n- \"이게 바로 네가 해야 하는 방법이야\" 순간을 찾으려 하지 마세요. PEDAC는 시간이 지나면서 발견하는 것이며, 야생에서 찾아낼 수 있는 것이 아닙니다.\n- 진행 중이지 않다는 느낌을 받을 것입니다. 그건 정상적인 것이니 마음에 두세요.\n- PEDAC는 운동과 같습니다. x 개의 팔 굽혀 펴기를 하고 근육이 붙는 것이 아닙니다. 하루하루 변화를 알아차리지 못할 것입니다. 하지만 꾸준하게 계속하면 언젠가는 당신도 멋진 프로그래머가 될 거에요 💪\n- 문제를 이전처럼 빠른 속도로 해결하는 보상은 받지 못할 것입니다. 그러나 문제들이 어려워지면(좋은 치즈처럼) 더 큰 보상을 받을 수 있습니다. 단지 좀 더 빈도가 낮을 뿐이에요.\n- 꾸준하게 하고 프로세스를 신뢰하세요. 당신은 진전하고 있어요!\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-17-WhyYouWontLikePEDAC_3.png)\n\n## \"어떻게 하면 PEDAC을 좋아할 수 있을까요?\"\n\n상상하기 어렵지만, 언젠간 그렇게 될 거예요.\n결국, 당신도 PEDAC를 정말 좋아하게 될 거예요.\n\n언젠가는 이런 변화가 올 거라는 것에 대해 알고 있는 것이 때로는 동기부여를 유지하는 데 도움이 되었어요.\n\n<div class=\"content-ad\"></div>\n\n## PEDAC을 코딩할 때의 \"안전한 장소\"로 생각해보세요\n\n버그와 오류는 코딩을 시작할 때 발생합니다.\n\n코딩 전 단계는 실수와 논리 오류를 만드는 안전한 장소입니다. 처음에 모든 것을 완벽하게 이해할 필요는 없고, 첫 시도에서 로직을 완벽하게 이해해야 하는 것도 중요하지 않습니다. 중요한 것은 과정에 대해 의식적이고 의도적이라는 것입니다.\n\n코딩 도중에 해결 방법을 코딩하다가 터미널에서 오류 메시지를 읽기만으로 해결할 수 없는 오류를 마주했을 때 가장 싫은 상황이라고 할 수 있습니다. 논리 오류를 수정하는 것은 문법 오류나 타입 오류를 고치는 것보다 어려운 작업입니다.\n\n<div class=\"content-ad\"></div>\n\n지금은 와닿지 않을 수 있지만, PEDAC를 더 자주 사용함으로써 더 많이 이해할 수 있게 될 거에요.\n\n## 더 큰 그림을 기억하고 여러분이 여기 있는 이유를 기억하세요\n\n코딩을 하는 것이 재미있게 만드는 주요한 부분은 코드를 입력하는 것이 아니라 문제 해결이라는 것을 스스로 상기하세요.\n\n쉬운 문제에 코드를 작성하는 것은 지루해질 수 있어요. 최적으로 도전적인 문제에 코드를 작성하는 것이 즐거움을 느끼는 때입니다. 문제 해결에 열중할 때 (심지어 힘들 때도) 코드 편집기 바깥에 무슨 일이 일어나고 있는지 생각하지 않는다는 것을 주목하세요.\n\n<div class=\"content-ad\"></div>\n\n이게 당연한 것 같지만, 학습하고 문제 해결하는 걸 즐기는 걸 생각해봐. 그래야 현재에 더 집중할 수 있을 거야. 이걸 알면 당신의 난관을 이해하는 데 도움이 될 거야.\n\n큰 그림을 보면, 이전과 똑같은 일을 하고 있지만 세부사항이 다를 뿐이야.\n\n그리고 난관에 부딪히는 건 문제가 아님을 알아둬, 이는 아마도 새로운 방식으로 최적의 도전을 받고 있는 신호에 불과할 거야. 새로운 문제와 새로운 세부사항이 있지만 궁극적으로는 여전히 당신을 지탱하는 문제 해결이야.\n\n언제나 글쓰기를 개선하려고 노력하고 있어, 그래서 이 글에 동의하든 반대하든, 도움이 되었든 그렇지 않았든 당신의 피드백을 정말로 감사히 받겠어.\n\n<div class=\"content-ad\"></div>\n\n저도 다른 사람들이 PEDAC를 배우면서 느낀 경험을 듣고 싶어요. 댓글을 남기거나 제 소셜 미디어로 DM을 보내도 괜찮아요.\n\n도움이 되었으면 좋겠어요! 행복한 PEDAC 공부 되세요 👨‍💻","ogImage":{"url":"/assets/img/2024-05-17-WhyYouWontLikePEDAC_0.png"},"coverImage":"/assets/img/2024-05-17-WhyYouWontLikePEDAC_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>PEDAC는 정말 어렵죠. 그렇다고 말했어요.</h2>\n<p><img src=\"/assets/img/2024-05-17-WhyYouWontLikePEDAC_0.png\" alt=\"image\"></p>\n<p>시간 낭비 같아요.\n직관적이지 않고 어색하게 느껴져요.\n배울 수 없는 것처럼 느껴져요.</p>\n<p>최소한 처음에는 이런 느낌입니다.</p>\n<p>본문을 마칠 즈음, 저는 PEDAC 및 문제 해결 과정 전체에 대해 학습하는 동안 동기부여를 잃은 사람들, 정체감을 느끼는 사람들, \"연기자 증후군\"에 대한 새로운 동기 부여를 주고 PEDAC에 대한 진정한 감사함과 개선 팁을 제공하기를 희망합니다.</p>\n<h2>이 기사에서는 다음과 같은 내용을 다룰 것입니다:</h2>\n<ul>\n<li>시작과 현재의 차이</li>\n<li>학습에 어려움을 겪는 이유 및 극복 방법</li>\n<li>동기를 유지하고 더 효과적으로 학습하는 데 도움이 된 정신적 변화</li>\n<li>코딩 자체보다 그것을 사랑하는 방법 (결국 빠르게 학습하고 더 나은 문제 해결자가 되는 데 도움이 될 것입니다)</li>\n</ul>\n<h1>개인 이야기:</h1>\n<p>저는 현재 Launch School이라는 온라인 커리큘럼에 등록되어 있습니다. 이 학교는 견고한 문제 해결 프로세스를 개발하는 데 큰 중점을 둡니다. 그들은 여러분이 프로세스를 개발하는 데 도움을 주는 PEDAC라는 프레임워크를 소개합니다.</p>\n<p>Launch School을 시작하기 한 해 전에 프로그래밍 기초를 공부했었지만, 문제 해결에는 전혀 손 대지 못했습니다. Code Wars의 초급 연습 문제를 시도해보지만 해결하지 못했죠.</p>\n<p>이는 매우 흐뭇했고, 다른 사람들 대부분이 이러한 \"쉬운\" 질문들을 해결할 수 있다는 것을 알면서 상처받았습니다. 1년 넘는 공부 끝에 한 문제도 거의 해결하지 못했기 때문이죠. 그러나 문제 해결 프로세스에 주력한 후에는 이제 초보자 및 중급 수준의 많은 문제들을 자신 있게 쉽게 해결할 수 있게 되었습니다.</p>\n<p>이 일은 단 몇 주 만에 일어난 일입니다. 만약 자신감을 잃고 이 보기 어렵고 복잡한 문제들을 쉽게 해결할 수 있는 사람으로 스스로 그릴 수 없다면 — 두려워하지 마세요, 왜냐하면 몇 달 전에 저도 그 똑같은 고비를 넘었기 때문이죠.</p>\n<p><img src=\"/assets/img/2024-05-17-WhyYouWontLikePEDAC_1.png\" alt=\"이미지\"></p>\n<h1>이 공부가 어색하게 느껴지는 이유</h1>\n<p>내가 소속된 동료들 중 대부분이 불편해하는 가장 큰 문제 중 하나는 공포의 \"Hack 'n' Slash\" 접근 방식입니다.</p>\n<p>이 문제를 지적하면서도, 우리는 여전히 의도적이거나 계획적인 다른 방식을 취하는 것을 싫어합니다.</p>\n<p>왜 그럴까요?</p>\n<h2>익숙하지 않아서 생산성이 떨어지는 기분이 들어요.</h2>\n<p>지금까지 대부분의 문제는 복잡도가 낮았습니다. 당장 들어가서 코딩을 시작할 수 있어요. 더 흥미롭고 당신이 더 빨리 성취감을 느끼게 되죠.</p>\n<p>지금까지의 경험은 이랬어요:</p>\n<p>가장 빨리 작업을 완료하는 데 도움이 되는 방법이죠... 지금까지는요.</p>\n<p>문제를 시작할 때 문제 자체에 대해 생각하고 긴 해결책을 쓰는 것은 지금까지 우리가 문제를 해결해 오던 방식과 대립됩니다.</p>\n<p>이것도 완전히 이해가 가죠. 처음에는 기본 개념과 언어 능숙도를 개발하는 데 중점을 두죠. 새로운 개념을 실용적인 방식으로 학습하기 위해 기본적이고 쉬운 문제를 해결해야 합니다.</p>\n<p>이것이 'PEDAC 학습에 마찰력을 일으키는 데 기여하는 몇 가지를 한다고 생각합니다:</p>\n<ul>\n<li>더 쉬운 문제들은 보통 나에게 보상을 더 빨리 줬어. 나는 해결책에 더 빨리 도달했어.</li>\n<li>이는 향후 소프트웨어 엔지니어링 문제에 필요한 해결책과 기술에 대한 기대감을 형성할 수 있어요.</li>\n</ul>\n<p>정신적 변화:</p>\n<ul>\n<li>PEDAC가 일반적으로 더 효율적인 방법이라는 것을 상기해봐, 비록 그렇게 느껴지지 않아도. 문제의 난이도가 증가할수록 더욱 참된 이치가 된다.</li>\n<li>문제 해결에 걸리는 시간에 대한 기대를 재조정해봐. 문제가 어려워질수록 문제 해결에 필요한 시간이 증가한다. 이것은 정상적이야.</li>\n<li>기억해, 당신이 PEDAC를 더 효율적으로 여기는 아이디어를 받아들일 때까지 첫 번째 여러 문제와 시도에서 이런 느낌을 가질 것이라는 걸 기억해봐. 감정에도 불구하고 과정을 믿어봐.</li>\n<li>이런 느낌들은 좋은 징조일 수 있어. 당신이 배우고 있고 당신의 두뇌가 문제 해결 머신이 되도록 재배열되고 있는 신호야. 당신의 두뇌는 변하고 변화는 노력을 필요로해. 어느 정도의 정신적 마찰을 겪을 것으로 예상돼.</li>\n</ul>\n<h2>지루하고 동기부여가 되지 않는 느낌을 받을지도 모르지만... 이것은 변할 수 있어요!</h2>\n<p>지금까지 학습 과정은 매우 간단해 왔어요:</p>\n<ul>\n<li>새로운 개념을 배우고 개념 모델을 개발합니다.</li>\n<li>구문과 새로운 용어를 암기합니다.</li>\n<li>배운 개념을 기초 문제로 테스트합니다.</li>\n<li>문제를 해결하면 치즈를 얻게 돼요 🧀</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-WhyYouWontLikePEDAC_2.png\" alt=\"이미지\"></p>\n<p>우리는 초기에는 치즈를 더 자주 먹고 쉽게 먹어요.</p>\n<p>런치 스쿨 커리큘럼에서 말하는 대로, 문제를 해결하는 유일한 방법은 없으며 PEDAC는 단지 당신만의 문제 해결 과정을 찾기 위한 지침일 뿐입니다.</p>\n<p>새로운 수업은 이전과 같은 경험이 아닙니다.\n그것은 규칙이나 메타모델 또는 외워야 하는 문법이 아닙니다. 오히려 당신이 운동을 하며 개발해야 하는 근육과 유사합니다.</p>\n<p>이 새로운 수업은 기억력과 정의보다는 내면적 사색, 검토 및 실험을 더 필요로 합니다.</p>\n<p>처음에는 개념 또는 용어를 손에 익힌 것을 알 수 있었던 때입니다. 그때 당신은 그 정의를 정확히 알고 코드에서 예제를 보여주고 이해할 수 있을 때였습니다.</p>\n<p>PEDAC를 이해했다고 어떻게 알 수 있을까요?</p>\n<p>그 답변은 확실하지 않습니다. 현재 이해와 비교할 문서나 코드 예제가 없습니다. 구문에서 PEDAC를 식별할 수 있는 코드 예제가 없습니다.</p>\n<p>이는 최종 목표가 조금 덜 확실하기 때문에 두려울 수 있습니다.</p>\n<p>\"내가 이것을 알고 있다는 것을 어떻게 알까요?\"</p>\n<p>처음으로 PEDAC를 배우려고 시도했을 때 저는 매우 동기 부여가 떨어지고 사기가 떨어지는 느낌을 받았어요. 보상이 명확하지 않았고, 내가 진행 중인지 알 수 없는 것 같았어요.</p>\n<p>내가 본 것은 다른 사람들이 자신들만의 방법으로 문제를 효율적으로 해결하는 모습 뿐이었는데, 한 번에 \"이게 바로 네가 해야 하는 방법이야, 여기가 정의야\" 라는 순간을 찾지 못했어요. 이로 인해 PEDAC는 당신과 맞지 않는 것인 것 처럼 느껴질 수 있고, 그것을 이해하기 어려울 수 있어요.</p>\n<p>기본 사고 변경:</p>\n<ul>\n<li>\"이게 바로 네가 해야 하는 방법이야\" 순간을 찾으려 하지 마세요. PEDAC는 시간이 지나면서 발견하는 것이며, 야생에서 찾아낼 수 있는 것이 아닙니다.</li>\n<li>진행 중이지 않다는 느낌을 받을 것입니다. 그건 정상적인 것이니 마음에 두세요.</li>\n<li>PEDAC는 운동과 같습니다. x 개의 팔 굽혀 펴기를 하고 근육이 붙는 것이 아닙니다. 하루하루 변화를 알아차리지 못할 것입니다. 하지만 꾸준하게 계속하면 언젠가는 당신도 멋진 프로그래머가 될 거에요 💪</li>\n<li>문제를 이전처럼 빠른 속도로 해결하는 보상은 받지 못할 것입니다. 그러나 문제들이 어려워지면(좋은 치즈처럼) 더 큰 보상을 받을 수 있습니다. 단지 좀 더 빈도가 낮을 뿐이에요.</li>\n<li>꾸준하게 하고 프로세스를 신뢰하세요. 당신은 진전하고 있어요!</li>\n</ul>\n<p><img src=\"/assets/img/2024-05-17-WhyYouWontLikePEDAC_3.png\" alt=\"이미지\"></p>\n<h2>\"어떻게 하면 PEDAC을 좋아할 수 있을까요?\"</h2>\n<p>상상하기 어렵지만, 언젠간 그렇게 될 거예요.\n결국, 당신도 PEDAC를 정말 좋아하게 될 거예요.</p>\n<p>언젠가는 이런 변화가 올 거라는 것에 대해 알고 있는 것이 때로는 동기부여를 유지하는 데 도움이 되었어요.</p>\n<h2>PEDAC을 코딩할 때의 \"안전한 장소\"로 생각해보세요</h2>\n<p>버그와 오류는 코딩을 시작할 때 발생합니다.</p>\n<p>코딩 전 단계는 실수와 논리 오류를 만드는 안전한 장소입니다. 처음에 모든 것을 완벽하게 이해할 필요는 없고, 첫 시도에서 로직을 완벽하게 이해해야 하는 것도 중요하지 않습니다. 중요한 것은 과정에 대해 의식적이고 의도적이라는 것입니다.</p>\n<p>코딩 도중에 해결 방법을 코딩하다가 터미널에서 오류 메시지를 읽기만으로 해결할 수 없는 오류를 마주했을 때 가장 싫은 상황이라고 할 수 있습니다. 논리 오류를 수정하는 것은 문법 오류나 타입 오류를 고치는 것보다 어려운 작업입니다.</p>\n<p>지금은 와닿지 않을 수 있지만, PEDAC를 더 자주 사용함으로써 더 많이 이해할 수 있게 될 거에요.</p>\n<h2>더 큰 그림을 기억하고 여러분이 여기 있는 이유를 기억하세요</h2>\n<p>코딩을 하는 것이 재미있게 만드는 주요한 부분은 코드를 입력하는 것이 아니라 문제 해결이라는 것을 스스로 상기하세요.</p>\n<p>쉬운 문제에 코드를 작성하는 것은 지루해질 수 있어요. 최적으로 도전적인 문제에 코드를 작성하는 것이 즐거움을 느끼는 때입니다. 문제 해결에 열중할 때 (심지어 힘들 때도) 코드 편집기 바깥에 무슨 일이 일어나고 있는지 생각하지 않는다는 것을 주목하세요.</p>\n<p>이게 당연한 것 같지만, 학습하고 문제 해결하는 걸 즐기는 걸 생각해봐. 그래야 현재에 더 집중할 수 있을 거야. 이걸 알면 당신의 난관을 이해하는 데 도움이 될 거야.</p>\n<p>큰 그림을 보면, 이전과 똑같은 일을 하고 있지만 세부사항이 다를 뿐이야.</p>\n<p>그리고 난관에 부딪히는 건 문제가 아님을 알아둬, 이는 아마도 새로운 방식으로 최적의 도전을 받고 있는 신호에 불과할 거야. 새로운 문제와 새로운 세부사항이 있지만 궁극적으로는 여전히 당신을 지탱하는 문제 해결이야.</p>\n<p>언제나 글쓰기를 개선하려고 노력하고 있어, 그래서 이 글에 동의하든 반대하든, 도움이 되었든 그렇지 않았든 당신의 피드백을 정말로 감사히 받겠어.</p>\n<p>저도 다른 사람들이 PEDAC를 배우면서 느낀 경험을 듣고 싶어요. 댓글을 남기거나 제 소셜 미디어로 DM을 보내도 괜찮아요.</p>\n<p>도움이 되었으면 좋겠어요! 행복한 PEDAC 공부 되세요 👨‍💻</p>\n</body>\n</html>\n"},"__N_SSG":true}