{"pageProps":{"post":{"title":"LeetCode 3068번 문제 해결하기 노드 값의 최대 합 찾기","description":"","date":"2024-05-20 15:34","slug":"2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues","content":"\n\n# 문제 설명:\n\n0부터 n - 1까지 번호가 매겨진 노드로 구성된 무방향 트리가 있습니다. 길이가 n - 1인 0을 기준으로 한 2차원 정수 배열 edges가 주어지는데, edges[i] = [ui, vi]는 트리의 노드 ui와 vi 사이에 간선이 있음을 나타냅니다. 또한 양의 정수 k와 길이가 n인 0을 기준으로 한 음이 아닌 정수 배열 nums가 주어집니다. 여기서 nums[i]는 i번째로 번호가 매겨진 노드의 값을 나타냅니다.\n\n앨리스는 트리 노드의 값의 합을 최대로 하려고 합니다. 이를 위해 앨리스는 다음 작업을 트리에서 원하는 횟수만큼 (포함하여) 수행할 수 있습니다:\n\n- 노드 u와 v를 연결하는 [u, v] 간선을 선택하고, 그들의 값들을 다음과 같이 업데이트합니다:\n- nums[u] = nums[u] XOR k\n- nums[v] = nums[v] XOR k\n\n<div class=\"content-ad\"></div>\n\nAlice가 작업을 여러 번 수행하여 얻을 수 있는 값의 최대 합을 반환합니다.\n\n예시 1:\n\n![image](/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png)\n\n```js\nInput: nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]\nOutput: 6\nExplanation: Alice가 다음을 수행하여 최대 합 6을 얻을 수 있습니다:\n- [0,2] 엣지를 선택합니다. nums[0] 및 nums[2]는 다음과 같이 변경됩니다: 1 XOR 3 = 2이고, 배열 nums는 [1,2,1] -> [2,2,2] 로 변합니다.\n값의 총 합은 2 + 2 + 2 = 6 입니다.\n가능한 최대 값 합은 6임을 보여줄 수 있습니다.\n```\n\n<div class=\"content-ad\"></div>\n\n예제 2:\n\n![그림](/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_1.png)\n\n```js\nInput: nums = [2,3], k = 7, edges = [[0,1]]\nOutput: 9\nExplanation: Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -> [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values.\n```\n\n예제 3:\n\n<div class=\"content-ad\"></div>\n\n```js\nInput: nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]\nOutput: 42\nExplanation: 최대 가능한 합은 42로, Alice가 작업을 수행하지 않고 이를 달성할 수 있습니다.\n```\n\n제한사항:\n\n- 2 `= n == nums.length `= 2 * 104\n- 1 `= k `= 109\n- 0 `= nums[i] `= 109\n- edges.length == n - 1\n- edges[i].length == 2\n- 0 `= edges[i][0], edges[i][1] `= n - 1\n- 입력은 edges가 유효한 트리를 나타내도록 생성됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 방법: 탐욕법 (정렬 기반 접근)\n\n## 직관\n\n노드 U에 대해 실행된 작업이 있다면, 노드의 새로운 값은 nums[U] XOR k가 됩니다. 각 노드에 대해, 작업을 수행한 후 값의 순 변화는 netChange[U] = nums[U] XOR k - nums[U]로 주어집니다.\n\n만약 이 순 변화가 양수라면, 모든 노드 값의 총합은 증가합니다. 그렇지 않으면 감소합니다.\n\n<div class=\"content-ad\"></div>\n\n\"가정해보겠습니다. 노드 쌍에서 노드 합에 가장 큰 증가를 제공하는\" 효율적인 작업 \"을 수행하려고 한다고 가정해봅시다. 가장 큰 양수 netChange 값을 가진 노드를 선택하면 노드 합에 가장 큰 증가를 제공할 것입니다.\n\n모든 노드에 대해 위에서 논의한 공식을 사용하여 net change 값을 계산할 수 있습니다. 이 값들을 내림차순으로 정렬한 후에는 positive sum을 가진 pair를 정렬 된 netChange 배열의 시작부터 선택할 수 있습니다.\n\n쌍의 합이 양수이면이 쌍에 대한 작업을 수행할 때 총 노드 합의 값을 증가시킵니다.\n\n## 알고리즘\"\n\n<div class=\"content-ad\"></div>\n\n1. nums의 크기인 n의 netChange 배열과 현재 nums의 합을 저장하는 정수 nodeSum을 초기화합니다.\n\n2. nums 배열을 반복합니다 (0부터 n-1까지):\n\n- 각 인덱스마다 intuition에서 논의한 아이디어를 사용하여 netChange의 값을 저장합니다.\n\n3. netChange 배열을 내림차순으로 정렬합니다.\n\n<div class=\"content-ad\"></div>\n\n4. netChange 배열을 반복합니다 (0부터 n-1까지, 단계 크기 = 2):\n\n- 인접한 요소의 쌍을 만들 수 없는 경우, 반복을 중단합니다.\n- 인접한 요소의 쌍의 합이 양수인 경우 이 합을 nodeSum에 추가합니다.\n\n5. 모든 netChange 요소를 반복한 후, 수행한 작업 이후 노드의 최대 가능한 합인 nodeSum을 반환합니다.\n\n## 구현\n\n<div class=\"content-ad\"></div>\n\n```java\nclass Solution {\n    public long maximumValueSum(int[] nums, int k, int[][] edges) {\n        int n = nums.length;\n        int[] netChange = new int[n];\n        long nodeSum = 0;\n\n        for (int i = 0; i < n; i++) {\n            netChange[i] = (nums[i] ^ k) - nums[i];\n            nodeSum += nums[i];\n        }\n\n        Arrays.sort(netChange);\n\n        for (int i = n-1; i >= 1; i -= 2) {\n            // If netChange contains odd number of elements break the loop\n            if (i - 1 == -1) {\n                break;\n            }\n            long pairSum = netChange[i] + netChange[i - 1];\n            // Include in nodeSum if pairSum is positive\n            if (pairSum > 0) {\n                nodeSum += pairSum;\n            } else {\n                return nodeSum;\n            }\n        }\n        return nodeSum;\n    }\n}\n```\n\n## 복잡도 분석\n\n노드 값 목록에 포함된 요소 수를 n이라고 합시다.\n\n- 시간 복잡도: O(n⋅logn)\n  - 정렬을 제외하고 목록에 대해 단순 선형 작업을 수행하기 때문에 런타임은 정렬의 O(n⋅logn) 복잡성에 지배됩니다.\n- 공간 복잡도: O(n)\n  - 새로운 크기 n의 netChange 배열을 만들고 정렬하기 때문에 추가 공간은 netChange 배열에 대한 O(n)이고 정렬에 대해 O(logn) 또는 O(n)이므로 순 공간 복잡도는 O(n)입니다.```","ogImage":{"url":"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png"},"coverImage":"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>문제 설명:</h1>\n<p>0부터 n - 1까지 번호가 매겨진 노드로 구성된 무방향 트리가 있습니다. 길이가 n - 1인 0을 기준으로 한 2차원 정수 배열 edges가 주어지는데, edges[i] = [ui, vi]는 트리의 노드 ui와 vi 사이에 간선이 있음을 나타냅니다. 또한 양의 정수 k와 길이가 n인 0을 기준으로 한 음이 아닌 정수 배열 nums가 주어집니다. 여기서 nums[i]는 i번째로 번호가 매겨진 노드의 값을 나타냅니다.</p>\n<p>앨리스는 트리 노드의 값의 합을 최대로 하려고 합니다. 이를 위해 앨리스는 다음 작업을 트리에서 원하는 횟수만큼 (포함하여) 수행할 수 있습니다:</p>\n<ul>\n<li>노드 u와 v를 연결하는 [u, v] 간선을 선택하고, 그들의 값들을 다음과 같이 업데이트합니다:</li>\n<li>nums[u] = nums[u] XOR k</li>\n<li>nums[v] = nums[v] XOR k</li>\n</ul>\n<p>Alice가 작업을 여러 번 수행하여 얻을 수 있는 값의 최대 합을 반환합니다.</p>\n<p>예시 1:</p>\n<p><img src=\"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png\" alt=\"image\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Input</span>: nums = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>], k = <span class=\"hljs-number\">3</span>, edges = [[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>]]\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-number\">6</span>\n<span class=\"hljs-title class_\">Explanation</span>: <span class=\"hljs-title class_\">Alice</span>가 다음을 수행하여 최대 합 <span class=\"hljs-number\">6</span>을 얻을 수 있습니다:\n- [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>] 엣지를 선택합니다. nums[<span class=\"hljs-number\">0</span>] 및 nums[<span class=\"hljs-number\">2</span>]는 다음과 같이 변경됩니다: <span class=\"hljs-number\">1</span> <span class=\"hljs-variable constant_\">XOR</span> <span class=\"hljs-number\">3</span> = <span class=\"hljs-number\">2</span>이고, 배열 nums는 [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>] -> [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>] 로 변합니다.\n값의 총 합은 <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> = <span class=\"hljs-number\">6</span> 입니다.\n가능한 최대 값 합은 <span class=\"hljs-number\">6</span>임을 보여줄 수 있습니다.\n</code></pre>\n<p>예제 2:</p>\n<p><img src=\"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_1.png\" alt=\"그림\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Input</span>: nums = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>], k = <span class=\"hljs-number\">7</span>, edges = [[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]]\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-number\">9</span>\n<span class=\"hljs-title class_\">Explanation</span>: <span class=\"hljs-title class_\">Alice</span> can achieve the maximum sum <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">9</span> using a single <span class=\"hljs-attr\">operation</span>:\n- <span class=\"hljs-title class_\">Choose</span> the edge [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>]. nums[<span class=\"hljs-number\">0</span>] <span class=\"hljs-attr\">becomes</span>: <span class=\"hljs-number\">2</span> <span class=\"hljs-variable constant_\">XOR</span> <span class=\"hljs-number\">7</span> = <span class=\"hljs-number\">5</span> and nums[<span class=\"hljs-number\">1</span>] <span class=\"hljs-attr\">become</span>: <span class=\"hljs-number\">3</span> <span class=\"hljs-variable constant_\">XOR</span> <span class=\"hljs-number\">7</span> = <span class=\"hljs-number\">4</span>, and the array nums <span class=\"hljs-attr\">becomes</span>: [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] -> [<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>].\n<span class=\"hljs-title class_\">The</span> total sum <span class=\"hljs-keyword\">of</span> values is <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">4</span> = <span class=\"hljs-number\">9.</span>\n<span class=\"hljs-title class_\">It</span> can be shown that <span class=\"hljs-number\">9</span> is the maximum achievable sum <span class=\"hljs-keyword\">of</span> values.\n</code></pre>\n<p>예제 3:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Input</span>: nums = [<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">7</span>], k = <span class=\"hljs-number\">3</span>, edges = [[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>]]\n<span class=\"hljs-title class_\">Output</span>: <span class=\"hljs-number\">42</span>\n<span class=\"hljs-title class_\">Explanation</span>: 최대 가능한 합은 <span class=\"hljs-number\">42</span>로, <span class=\"hljs-title class_\">Alice</span>가 작업을 수행하지 않고 이를 달성할 수 있습니다.\n</code></pre>\n<p>제한사항:</p>\n<ul>\n<li>2 <code>= n == nums.length </code>= 2 * 104</li>\n<li>1 <code>= k </code>= 109</li>\n<li>0 <code>= nums[i] </code>= 109</li>\n<li>edges.length == n - 1</li>\n<li>edges[i].length == 2</li>\n<li>0 <code>= edges[i][0], edges[i][1] </code>= n - 1</li>\n<li>입력은 edges가 유효한 트리를 나타내도록 생성됩니다.</li>\n</ul>\n<h1>방법: 탐욕법 (정렬 기반 접근)</h1>\n<h2>직관</h2>\n<p>노드 U에 대해 실행된 작업이 있다면, 노드의 새로운 값은 nums[U] XOR k가 됩니다. 각 노드에 대해, 작업을 수행한 후 값의 순 변화는 netChange[U] = nums[U] XOR k - nums[U]로 주어집니다.</p>\n<p>만약 이 순 변화가 양수라면, 모든 노드 값의 총합은 증가합니다. 그렇지 않으면 감소합니다.</p>\n<p>\"가정해보겠습니다. 노드 쌍에서 노드 합에 가장 큰 증가를 제공하는\" 효율적인 작업 \"을 수행하려고 한다고 가정해봅시다. 가장 큰 양수 netChange 값을 가진 노드를 선택하면 노드 합에 가장 큰 증가를 제공할 것입니다.</p>\n<p>모든 노드에 대해 위에서 논의한 공식을 사용하여 net change 값을 계산할 수 있습니다. 이 값들을 내림차순으로 정렬한 후에는 positive sum을 가진 pair를 정렬 된 netChange 배열의 시작부터 선택할 수 있습니다.</p>\n<p>쌍의 합이 양수이면이 쌍에 대한 작업을 수행할 때 총 노드 합의 값을 증가시킵니다.</p>\n<h2>알고리즘\"</h2>\n<ol>\n<li>\n<p>nums의 크기인 n의 netChange 배열과 현재 nums의 합을 저장하는 정수 nodeSum을 초기화합니다.</p>\n</li>\n<li>\n<p>nums 배열을 반복합니다 (0부터 n-1까지):</p>\n</li>\n</ol>\n<ul>\n<li>각 인덱스마다 intuition에서 논의한 아이디어를 사용하여 netChange의 값을 저장합니다.</li>\n</ul>\n<ol start=\"3\">\n<li>netChange 배열을 내림차순으로 정렬합니다.</li>\n</ol>\n<ol start=\"4\">\n<li>netChange 배열을 반복합니다 (0부터 n-1까지, 단계 크기 = 2):</li>\n</ol>\n<ul>\n<li>인접한 요소의 쌍을 만들 수 없는 경우, 반복을 중단합니다.</li>\n<li>인접한 요소의 쌍의 합이 양수인 경우 이 합을 nodeSum에 추가합니다.</li>\n</ul>\n<ol start=\"5\">\n<li>모든 netChange 요소를 반복한 후, 수행한 작업 이후 노드의 최대 가능한 합인 nodeSum을 반환합니다.</li>\n</ol>\n<h2>구현</h2>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">maximumValueSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> k, <span class=\"hljs-type\">int</span>[][] edges)</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> nums.length;\n        <span class=\"hljs-type\">int</span>[] netChange = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">nodeSum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &#x3C; n; i++) {\n            netChange[i] = (nums[i] ^ k) - nums[i];\n            nodeSum += nums[i];\n        }\n\n        Arrays.sort(netChange);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> n-<span class=\"hljs-number\">1</span>; i >= <span class=\"hljs-number\">1</span>; i -= <span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-comment\">// If netChange contains odd number of elements break the loop</span>\n            <span class=\"hljs-keyword\">if</span> (i - <span class=\"hljs-number\">1</span> == -<span class=\"hljs-number\">1</span>) {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">pairSum</span> <span class=\"hljs-operator\">=</span> netChange[i] + netChange[i - <span class=\"hljs-number\">1</span>];\n            <span class=\"hljs-comment\">// Include in nodeSum if pairSum is positive</span>\n            <span class=\"hljs-keyword\">if</span> (pairSum > <span class=\"hljs-number\">0</span>) {\n                nodeSum += pairSum;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> nodeSum;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> nodeSum;\n    }\n}\n</code></pre>\n<h2>복잡도 분석</h2>\n<p>노드 값 목록에 포함된 요소 수를 n이라고 합시다.</p>\n<ul>\n<li>시간 복잡도: O(n⋅logn)\n<ul>\n<li>정렬을 제외하고 목록에 대해 단순 선형 작업을 수행하기 때문에 런타임은 정렬의 O(n⋅logn) 복잡성에 지배됩니다.</li>\n</ul>\n</li>\n<li>공간 복잡도: O(n)\n<ul>\n<li>새로운 크기 n의 netChange 배열을 만들고 정렬하기 때문에 추가 공간은 netChange 배열에 대한 O(n)이고 정렬에 대해 O(logn) 또는 O(n)이므로 순 공간 복잡도는 O(n)입니다.```</li>\n</ul>\n</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}