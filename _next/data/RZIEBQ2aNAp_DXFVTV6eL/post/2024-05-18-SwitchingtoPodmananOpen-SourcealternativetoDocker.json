{"pageProps":{"post":{"title":"파드맨으로 전환하기 도커의 오픈소스 대안","description":"","date":"2024-05-18 17:36","slug":"2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker","content":"\n\n2021년 8월 기준으로 Docker Desktop은 기업용 유료 구독이 필요하지만 CLI는 무료로 제공됩니다. 이 변경으로 일부 사용자들이 대안 옵션을 찾게 될 수 있습니다. 하지만 macOS 사용자로서 Docker Desktop은 Docker CLI를 실행하는 데 필수적이지만 걱정하지 마세요. 다른 옵션이 있습니다.\n\nColima와 Podman은 Docker의 가장 인기 있는 대체품 중 두 가지로, 둘 다 시도해본 결과 이 글에서는 컨테이너 관리를 위한 무료 오픈 소스 대안인 Podman에 초점을 맞출 것입니다.\n\nPodman은 제가 발견한 최고의 대안이며, 그 이유를 설명하겠습니다!\n\n- Docker 사용자이지만 CLI를 자주 사용하지 않는 경우, Podman은 데스크톱 애플리케이션을 갖추고 있어 무료이므로 훌륭한 선택입니다!\n- Docker 사용자이고 CLI만 사용하는 경우에도 Podman은 작동합니다!\n\n물론, Podman을 설치하고 docker `무언가`를 실행하려고 하면 작동하지 않을 것입니다. 그러나 이 글을 따라가면 Podman을 내 Docker 대체 도구로 사용하는 방법을 알 수 있습니다!\n\n<div class=\"content-ad\"></div>\n\n# Podman 설치 방법\n\nPodman을 설치하려면 데스크톱 앱을 포함하여 두 가지 명령어만 필요합니다:\n\n- Podman CLI 설치: brew install podman;\n- Podman 데스크톱 설치: brew install --cask podman-desktop;\n\n- 데스크톱 애플리케이션을 원하는 사용자를 위한 명령어임을 주의해주세요.\n\n<div class=\"content-ad\"></div>\n\n# 가상 머신을 시작하는 방법\n\nPodman을 설치한 후 가상 머신을 시작하려면 만들고 시작해야 합니다. 아래 단계를 따라 주세요:\n\n- podman machine init;\n- podman machine start;\n\n## 가상 머신이 성공적으로 초기화되었는지 어떻게 알 수 있나요?\n\n<div class=\"content-ad\"></div>\n\n가상 머신이 성공적으로 시작되었는지 확인하려면 터미널에서 `podman machine list`를 실행하십시오. 아래 스크린샷과 유사한 내용이 표시되어야 합니다. 여기에는 기본 머신이 현재 실행 중인 것이 표시됩니다:\n\n![스크린샷](/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_0.png)\n\n# Podman과 함께 Docker Compose 사용하는 방법\n\n기본 설정에서 Docker Compose는 Podman을 \"Docker\" 인스턴스로 인식하지 않을 것입니다. 그러나 \"수정\"하여 사용할 수 있습니다!\n\n<div class=\"content-ad\"></div>\n\n어떤 일을 하기 전에 brew install docker-compose 명령을 사용하여 Docker Compose를 설치해야 합니다.\n\n그러나 이 시점에서 docker-compose up을 실행하면 \"Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\"과 같은 오류 메시지가 표시될 것입니다.\n\nDocker Compose를 Podman과 함께 작동하도록 하려면 다음 단계를 따르세요:\n\n- sudo /usr/local/Cellar/podman/`podman-version`/bin/podman-mac-helper install;\n\n<div class=\"content-ad\"></div>\n\n- 참고: `podman-version`을(를) 사용 중인 Podman 버전으로 바꿔주세요.\n\n- podman machine stop && podman machine start;를 실행해주세요;\n\n이제 작동하는지 확인해볼 시간입니다! 기존의 docker-compose.yaml 파일을 사용하거나 새로 만들어서 docker-compose up -d를 실행해보세요.\n\n![이미지](/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_1.png)\n\n<div class=\"content-ad\"></div>\n\n## 작동하지 않나요?\n\n이러한 단계를 따라도 Docker Compose가 여전히 동일한 오류(\"Docker 데몬에 연결할 수 없음...\")를 표시한다면, 아래 두 가지 해결 방법 중 하나를 시도해 보세요:\n\n- 다음 명령을 사용하여 DOCKER_HOST를 내보내려 해보세요: \n  ```sh\n  export DOCKER_HOST=`unix:///Users/your-user/.local/share/containers/podman/machine/podman-machine-default/podman.sock`\n  ```\n- rootful 권한으로 Podman Machine을 설정하려면 다음 명령을 사용하세요:\n  ```sh\n  podman machine stop && podman machine set --rootful && podman machine start\n  ```\n\n# Podman 명령어\n\n<div class=\"content-ad\"></div>\n\nDocker와 Podman 사이에는 많은 명령어가 유사하지만, 이미지 및 컨테이너 작업을 할 때 구문 및 동작에 차이가 있습니다. 특히 특정 명령어와 옵션에 대해 더 알아보려면 항상 Podman 설명서를 참고하거나 podman --help를 실행하는 것이 좋습니다.\n\n일부 예시를 살펴보겠습니다:\n\n- docker ps는 podman ps로 변경됩니다;\n- docker run은 podman run으로 변경됩니다;\n- docker rm `container`는 podman rm `container`로 변경됩니다;\n- 기타.\n\n다음은 docker와 함께 사용할 Podman 명령어에 별칭을 생성하는 단계입니다:\n\n<div class=\"content-ad\"></div>\n\n\n- 물고기 (Oh My Fish를 사용하는 경우):\n\n- IDE에서 파일 ~/.config/fish/conf.d/omf.fish을 엽니다;\n- 초기 설정 라인 (1에서 4까지) 다음에 다음 라인을 추가합니다: alias docker=\"podman\";\n- 터미널을 다시 시작하거나 source ~/.config/fish/conf.d/omf.fish을 실행합니다.\n\n- Zsh의 경우:\n\n- IDE에서 파일 ~/.zshrc을 엽니다;\n- # Example aliases 주석 다음에 다음 라인을 추가합니다: alias docker=\"podman\";\n- 터미널을 다시 시작하거나 source ~/.zshrc을 실행합니다.\n\n<div class=\"content-ad\"></div>\n\n- Bash에 대한 설명:\n\n  - IDE ****에서 파일 ~/.bashrc을 열어주세요;\n  - 다음 줄을 파일 끝에 추가해주세요: alias docker=\"podman\";\n  - 터미널을 재시작하거나 source ~/.bashrc을 실행해주세요.\n\n해당 alias를 생성한 후에는 Docker와 동일하게 docker 명령을 사용할 수 있지만 해당 명령은 Podman 명령을 실행합니다.\n\n# Podman 데스크톱\n\n<div class=\"content-ad\"></div>\n\n\n![Switching to Podman: an Open-Source alternative to Docker](/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_2.png)\n\n이미 이전에 언급한 바와 같이, Podman은 CLI를 사용하기를 원하지 않는 경우 필요한 모든 옵션을 갖춘 데스크톱 애플리케이션을 갖고 있습니다. 아래 이미지는 일상적으로 사용할 수 있는 가장 중요한 화면을 보여줍니다.\n\nDocker Desktop과 유사하게, 이 앱은 컨테이너, 이미지 및 볼륨에 대한 메뉴를 갖고 있어 쉽게 작업을 수행할 수 있습니다.\n\n![Switching to Podman: an Open-Source alternative to Docker](/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_3.png)\n\n\n<div class=\"content-ad\"></div>\n\n![Switching to Podman: an Open-Source Alternative to Docker](/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_4.png)\n\n![Switching to Podman: an Open-Source Alternative to Docker](/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_5.png)\n\n이미지만 봐도 이해하기 쉬울 거에요. 궁금한 점 있으면 댓글로 남겨주세요.\n\n참고: Podman Desktop을 설치하면 가상 머신이 로그인 시 시작하도록 설정을 변경할 수 있습니다. 이렇게 하면 매번 podman machine start를 실행할 필요가 없어요.\n\n<div class=\"content-ad\"></div>\n\n개발자로서 제 생각이에요. 아마도 당신에게는 Podman이 모든 필요를 충족시키지 못할 수도 있어요. 그러나 제 일상 사용에는 충분하고, 지금까지 어떤 문제도 만나지 않았어요.\n\n요약하면, Podman은 Docker에 대한 강력한 대안으로, 안전하고 가벼운 실행 환경, Docker와 유사한 명령줄 인터페이스, 데몬이 필요하지 않은 macOS 및 Linux 배포판에서 실행할 수 있는 기능과 같은 많은 이점을 제공해요. Docker 대체품을 찾고 있다면, Podman은 분명히 확인할 가치가 있어요.\n\n이 글이 도움이 되었으면 좋겠어요!","ogImage":{"url":"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_0.png"},"coverImage":"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>2021년 8월 기준으로 Docker Desktop은 기업용 유료 구독이 필요하지만 CLI는 무료로 제공됩니다. 이 변경으로 일부 사용자들이 대안 옵션을 찾게 될 수 있습니다. 하지만 macOS 사용자로서 Docker Desktop은 Docker CLI를 실행하는 데 필수적이지만 걱정하지 마세요. 다른 옵션이 있습니다.</p>\n<p>Colima와 Podman은 Docker의 가장 인기 있는 대체품 중 두 가지로, 둘 다 시도해본 결과 이 글에서는 컨테이너 관리를 위한 무료 오픈 소스 대안인 Podman에 초점을 맞출 것입니다.</p>\n<p>Podman은 제가 발견한 최고의 대안이며, 그 이유를 설명하겠습니다!</p>\n<ul>\n<li>Docker 사용자이지만 CLI를 자주 사용하지 않는 경우, Podman은 데스크톱 애플리케이션을 갖추고 있어 무료이므로 훌륭한 선택입니다!</li>\n<li>Docker 사용자이고 CLI만 사용하는 경우에도 Podman은 작동합니다!</li>\n</ul>\n<p>물론, Podman을 설치하고 docker <code>무언가</code>를 실행하려고 하면 작동하지 않을 것입니다. 그러나 이 글을 따라가면 Podman을 내 Docker 대체 도구로 사용하는 방법을 알 수 있습니다!</p>\n<h1>Podman 설치 방법</h1>\n<p>Podman을 설치하려면 데스크톱 앱을 포함하여 두 가지 명령어만 필요합니다:</p>\n<ul>\n<li>\n<p>Podman CLI 설치: brew install podman;</p>\n</li>\n<li>\n<p>Podman 데스크톱 설치: brew install --cask podman-desktop;</p>\n</li>\n<li>\n<p>데스크톱 애플리케이션을 원하는 사용자를 위한 명령어임을 주의해주세요.</p>\n</li>\n</ul>\n<h1>가상 머신을 시작하는 방법</h1>\n<p>Podman을 설치한 후 가상 머신을 시작하려면 만들고 시작해야 합니다. 아래 단계를 따라 주세요:</p>\n<ul>\n<li>podman machine init;</li>\n<li>podman machine start;</li>\n</ul>\n<h2>가상 머신이 성공적으로 초기화되었는지 어떻게 알 수 있나요?</h2>\n<p>가상 머신이 성공적으로 시작되었는지 확인하려면 터미널에서 <code>podman machine list</code>를 실행하십시오. 아래 스크린샷과 유사한 내용이 표시되어야 합니다. 여기에는 기본 머신이 현재 실행 중인 것이 표시됩니다:</p>\n<p><img src=\"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_0.png\" alt=\"스크린샷\"></p>\n<h1>Podman과 함께 Docker Compose 사용하는 방법</h1>\n<p>기본 설정에서 Docker Compose는 Podman을 \"Docker\" 인스턴스로 인식하지 않을 것입니다. 그러나 \"수정\"하여 사용할 수 있습니다!</p>\n<p>어떤 일을 하기 전에 brew install docker-compose 명령을 사용하여 Docker Compose를 설치해야 합니다.</p>\n<p>그러나 이 시점에서 docker-compose up을 실행하면 \"Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\"과 같은 오류 메시지가 표시될 것입니다.</p>\n<p>Docker Compose를 Podman과 함께 작동하도록 하려면 다음 단계를 따르세요:</p>\n<ul>\n<li>sudo /usr/local/Cellar/podman/<code>podman-version</code>/bin/podman-mac-helper install;</li>\n</ul>\n<ul>\n<li>\n<p>참고: <code>podman-version</code>을(를) 사용 중인 Podman 버전으로 바꿔주세요.</p>\n</li>\n<li>\n<p>podman machine stop &#x26;&#x26; podman machine start;를 실행해주세요;</p>\n</li>\n</ul>\n<p>이제 작동하는지 확인해볼 시간입니다! 기존의 docker-compose.yaml 파일을 사용하거나 새로 만들어서 docker-compose up -d를 실행해보세요.</p>\n<p><img src=\"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_1.png\" alt=\"이미지\"></p>\n<h2>작동하지 않나요?</h2>\n<p>이러한 단계를 따라도 Docker Compose가 여전히 동일한 오류(\"Docker 데몬에 연결할 수 없음...\")를 표시한다면, 아래 두 가지 해결 방법 중 하나를 시도해 보세요:</p>\n<ul>\n<li>다음 명령을 사용하여 DOCKER_HOST를 내보내려 해보세요:\n<pre><code class=\"hljs language-sh\"><span class=\"hljs-built_in\">export</span> DOCKER_HOST=`unix:///Users/your-user/.local/share/containers/podman/machine/podman-machine-default/podman.sock`\n</code></pre>\n</li>\n<li>rootful 권한으로 Podman Machine을 설정하려면 다음 명령을 사용하세요:\n<pre><code class=\"hljs language-sh\">podman machine stop &#x26;&#x26; podman machine <span class=\"hljs-built_in\">set</span> --rootful &#x26;&#x26; podman machine start\n</code></pre>\n</li>\n</ul>\n<h1>Podman 명령어</h1>\n<p>Docker와 Podman 사이에는 많은 명령어가 유사하지만, 이미지 및 컨테이너 작업을 할 때 구문 및 동작에 차이가 있습니다. 특히 특정 명령어와 옵션에 대해 더 알아보려면 항상 Podman 설명서를 참고하거나 podman --help를 실행하는 것이 좋습니다.</p>\n<p>일부 예시를 살펴보겠습니다:</p>\n<ul>\n<li>docker ps는 podman ps로 변경됩니다;</li>\n<li>docker run은 podman run으로 변경됩니다;</li>\n<li>docker rm <code>container</code>는 podman rm <code>container</code>로 변경됩니다;</li>\n<li>기타.</li>\n</ul>\n<p>다음은 docker와 함께 사용할 Podman 명령어에 별칭을 생성하는 단계입니다:</p>\n<ul>\n<li>\n<p>물고기 (Oh My Fish를 사용하는 경우):</p>\n</li>\n<li>\n<p>IDE에서 파일 ~/.config/fish/conf.d/omf.fish을 엽니다;</p>\n</li>\n<li>\n<p>초기 설정 라인 (1에서 4까지) 다음에 다음 라인을 추가합니다: alias docker=\"podman\";</p>\n</li>\n<li>\n<p>터미널을 다시 시작하거나 source ~/.config/fish/conf.d/omf.fish을 실행합니다.</p>\n</li>\n<li>\n<p>Zsh의 경우:</p>\n</li>\n<li>\n<p>IDE에서 파일 ~/.zshrc을 엽니다;</p>\n</li>\n<li>\n<h1>Example aliases 주석 다음에 다음 라인을 추가합니다: alias docker=\"podman\";</h1>\n</li>\n<li>\n<p>터미널을 다시 시작하거나 source ~/.zshrc을 실행합니다.</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>Bash에 대한 설명:</p>\n<ul>\n<li>IDE ****에서 파일 ~/.bashrc을 열어주세요;</li>\n<li>다음 줄을 파일 끝에 추가해주세요: alias docker=\"podman\";</li>\n<li>터미널을 재시작하거나 source ~/.bashrc을 실행해주세요.</li>\n</ul>\n</li>\n</ul>\n<p>해당 alias를 생성한 후에는 Docker와 동일하게 docker 명령을 사용할 수 있지만 해당 명령은 Podman 명령을 실행합니다.</p>\n<h1>Podman 데스크톱</h1>\n<p><img src=\"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_2.png\" alt=\"Switching to Podman: an Open-Source alternative to Docker\"></p>\n<p>이미 이전에 언급한 바와 같이, Podman은 CLI를 사용하기를 원하지 않는 경우 필요한 모든 옵션을 갖춘 데스크톱 애플리케이션을 갖고 있습니다. 아래 이미지는 일상적으로 사용할 수 있는 가장 중요한 화면을 보여줍니다.</p>\n<p>Docker Desktop과 유사하게, 이 앱은 컨테이너, 이미지 및 볼륨에 대한 메뉴를 갖고 있어 쉽게 작업을 수행할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_3.png\" alt=\"Switching to Podman: an Open-Source alternative to Docker\"></p>\n<p><img src=\"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_4.png\" alt=\"Switching to Podman: an Open-Source Alternative to Docker\"></p>\n<p><img src=\"/assets/img/2024-05-18-SwitchingtoPodmananOpen-SourcealternativetoDocker_5.png\" alt=\"Switching to Podman: an Open-Source Alternative to Docker\"></p>\n<p>이미지만 봐도 이해하기 쉬울 거에요. 궁금한 점 있으면 댓글로 남겨주세요.</p>\n<p>참고: Podman Desktop을 설치하면 가상 머신이 로그인 시 시작하도록 설정을 변경할 수 있습니다. 이렇게 하면 매번 podman machine start를 실행할 필요가 없어요.</p>\n<p>개발자로서 제 생각이에요. 아마도 당신에게는 Podman이 모든 필요를 충족시키지 못할 수도 있어요. 그러나 제 일상 사용에는 충분하고, 지금까지 어떤 문제도 만나지 않았어요.</p>\n<p>요약하면, Podman은 Docker에 대한 강력한 대안으로, 안전하고 가벼운 실행 환경, Docker와 유사한 명령줄 인터페이스, 데몬이 필요하지 않은 macOS 및 Linux 배포판에서 실행할 수 있는 기능과 같은 많은 이점을 제공해요. Docker 대체품을 찾고 있다면, Podman은 분명히 확인할 가치가 있어요.</p>\n<p>이 글이 도움이 되었으면 좋겠어요!</p>\n</body>\n</html>\n"},"__N_SSG":true}