{"pageProps":{"post":{"title":"이번 글에서는 종료 코드 0이란 무엇이며 왜 반환되는지에 대해 알아보겠습니다","description":"","date":"2024-05-23 15:11","slug":"2024-05-23-Whatisexitcode0andwhyisreturned","content":"\n\n프로그래밍의 복잡한 세계에서는 종료 코드를 이해하는 것이 코드 실행의 동작과 결과를 이해하는 데 중요합니다. 이 연구에서는 종료 코드 0의 중요성을 해석하여 다양한 프로그래밍 언어에서의 영향을 알아보고, 프로그램 종료의 기본 메커니즘을 밝힐 것입니다.\n\n다음 예시를 살펴봅시다:\n\n```js\nint main() {\n  return 0\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```js\ngcc main.c -o main\n```\n\n이 간단한 C 프로그램에서 return 0; 문은 종료 코드 0으로 프로그램을 종료함을 나타냅니다.\n\n비슷한 맥락에서, Node.js에서 종료 코드가 처리되는 방법을 살펴보죠:\n\n```js\nprocess.exit()\n```\n\n<div class=\"content-ad\"></div>\n\n이번 탐구에서 우리는 bash의 유용한 기능에 초점을 맞춰볼 거에요. 이 기능을 통해 우리는 명령어나 프로그램의 이전 반환 상태를 확인할 수 있어요.\n\n```js\necho $?\n```\n\n두 프로그램을 실행한 결과 모두 0이에요.\n\n# 종료 코드 0: 성공의 보편적 상징\n\n<div class=\"content-ad\"></div>\n\n다양한 프로그래밍 언어, C 및 파생 버전을 포함하여, 0의 종료 코드는 오류 없이 성공적으로 실행되었음을 나타냅니다. 프로그램이 기대대로 작업을 완료하면 종료 코드 0을 반환하여 최종 사용자에게 모든 것이 순조롭게 진행되었다는 것을 알립니다. 이 관례는 스크립트 및 자동화된 프로세스가 프로그램이 성공적으로 실행되었는지 또는 문제가 발생했는지를 확인할 수 있도록 합니다.\n\n하지만 아마도 이 프로그램이 어떻게 로드되는지 궁금할 것입니다. 알아보려고 해 봅시다. 우리 바이너리를 분해할 수 있는 objdump를 사용할 수 있습니다. 다음 명령어를 사용하십시오:\n\n```js\nobjdump -d -M intel main\n```\n\n<div class=\"content-ad\"></div>\n\n우리의 여정은 _start에서 시작되어 __libc_start_main을 거쳐 Linux에서 시스템 호출인 _exit으로 끝납니다.\n\nhttps://man7.org/linux/man-pages/man2/_exit.2.html\n\n운영 체제는 프로세스를 생성하고 종료하는 책임이 있음을 알 수 있습니다. Linux 커널에서 우리는 아래 이미지에서 보여지는 것처럼 프로세스를 시각화할 수 있습니다.\n\n![프로세스 시각화](/assets/img/2024-05-23-Whatisexitcode0andwhyisreturned_1.png)\n\n<div class=\"content-ad\"></div>\n\nLinux에서 사용되는 다른 내부 코드들을 언급할 수 있어요.\n\n```js\n#define EPERM   1 /* Operation not permitted */\n#define ENOENT   2 /* No such file or directory */\n#define ESRCH   3 /* No such process */\n#define EINTR   4 /* Interrupted system call */\n#define EIO   5 /* I/O error */\n#define ENXIO   6 /* No such device or address */\n#define E2BIG   7 /* Argument list too long */\n#define ENOEXEC   8 /* Exec format error */\n#define EBADF   9 /* Bad file number */\n#define ECHILD  10 /* No child processes */\n#define EAGAIN  11 /* Try again */\n#define ENOMEM  12 /* Out of memory */\n#define EACCES  13 /* Permission denied */\n#define EFAULT  14 /* Bad address */\n#define ENOTBLK  15 /* Block device required */\n#define EBUSY  16 /* Device or resource busy */\n#define EEXIST  17 /* File exists */\n#define EXDEV  18 /* Cross-device link */\n#define ENODEV  19 /* No such device */\n#define ENOTDIR  20 /* Not a directory */\n#define EISDIR  21 /* Is a directory */\n#define EINVAL  22 /* Invalid argument */\n#define ENFILE  23 /* File table overflow */\n#define EMFILE  24 /* Too many open files */\n#define ENOTTY  25 /* Not a typewriter */\n#define ETXTBSY  26 /* Text file busy */\n#define EFBIG  27 /* File too large */\n#define ENOSPC  28 /* No space left on device */\n#define ESPIPE  29 /* Illegal seek */\n#define EROFS  30 /* Read-only file system */\n#define EMLINK  31 /* Too many links */\n#define EPIPE  32 /* Broken pipe */\n#define EDOM  33 /* Math argument out of domain of func */\n#define ERANGE  34 /* Math result not representable */\n```\n\n# 결론\n\nC의 main 함수나 Node.js나 다른 프로그래밍 언어에서 process.exit를 사용할 때, 프로그래머가 정의한 종료 코드로 프로세스를 닫기 위해 _exit 시스템 호출이 내부적으로 사용됩니다. 그러나 프로그래머로서 여러분은 프로세스의 적절한 종료와 종료된 프로세스에 대한 사용자에게 가장 좋은 결과를 제공하기 위한 책임이 있습니다.","ogImage":{"url":"/assets/img/2024-05-23-Whatisexitcode0andwhyisreturned_0.png"},"coverImage":"/assets/img/2024-05-23-Whatisexitcode0andwhyisreturned_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>프로그래밍의 복잡한 세계에서는 종료 코드를 이해하는 것이 코드 실행의 동작과 결과를 이해하는 데 중요합니다. 이 연구에서는 종료 코드 0의 중요성을 해석하여 다양한 프로그래밍 언어에서의 영향을 알아보고, 프로그램 종료의 기본 메커니즘을 밝힐 것입니다.</p>\n<p>다음 예시를 살펴봅시다:</p>\n<pre><code class=\"hljs language-js\">int <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-js\">gcc main.<span class=\"hljs-property\">c</span> -o main\n</code></pre>\n<p>이 간단한 C 프로그램에서 return 0; 문은 종료 코드 0으로 프로그램을 종료함을 나타냅니다.</p>\n<p>비슷한 맥락에서, Node.js에서 종료 코드가 처리되는 방법을 살펴보죠:</p>\n<pre><code class=\"hljs language-js\">process.<span class=\"hljs-title function_\">exit</span>()\n</code></pre>\n<p>이번 탐구에서 우리는 bash의 유용한 기능에 초점을 맞춰볼 거에요. 이 기능을 통해 우리는 명령어나 프로그램의 이전 반환 상태를 확인할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">echo $?\n</code></pre>\n<p>두 프로그램을 실행한 결과 모두 0이에요.</p>\n<h1>종료 코드 0: 성공의 보편적 상징</h1>\n<p>다양한 프로그래밍 언어, C 및 파생 버전을 포함하여, 0의 종료 코드는 오류 없이 성공적으로 실행되었음을 나타냅니다. 프로그램이 기대대로 작업을 완료하면 종료 코드 0을 반환하여 최종 사용자에게 모든 것이 순조롭게 진행되었다는 것을 알립니다. 이 관례는 스크립트 및 자동화된 프로세스가 프로그램이 성공적으로 실행되었는지 또는 문제가 발생했는지를 확인할 수 있도록 합니다.</p>\n<p>하지만 아마도 이 프로그램이 어떻게 로드되는지 궁금할 것입니다. 알아보려고 해 봅시다. 우리 바이너리를 분해할 수 있는 objdump를 사용할 수 있습니다. 다음 명령어를 사용하십시오:</p>\n<pre><code class=\"hljs language-js\">objdump -d -M intel main\n</code></pre>\n<p>우리의 여정은 _start에서 시작되어 __libc_start_main을 거쳐 Linux에서 시스템 호출인 _exit으로 끝납니다.</p>\n<p><a href=\"https://man7.org/linux/man-pages/man2/_exit.2.html\" rel=\"nofollow\" target=\"_blank\">https://man7.org/linux/man-pages/man2/_exit.2.html</a></p>\n<p>운영 체제는 프로세스를 생성하고 종료하는 책임이 있음을 알 수 있습니다. Linux 커널에서 우리는 아래 이미지에서 보여지는 것처럼 프로세스를 시각화할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-23-Whatisexitcode0andwhyisreturned_1.png\" alt=\"프로세스 시각화\"></p>\n<p>Linux에서 사용되는 다른 내부 코드들을 언급할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">#define <span class=\"hljs-variable constant_\">EPERM</span>   <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* Operation not permitted */</span>\n#define <span class=\"hljs-variable constant_\">ENOENT</span>   <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* No such file or directory */</span>\n#define <span class=\"hljs-variable constant_\">ESRCH</span>   <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* No such process */</span>\n#define <span class=\"hljs-variable constant_\">EINTR</span>   <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* Interrupted system call */</span>\n#define <span class=\"hljs-variable constant_\">EIO</span>   <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* I/O error */</span>\n#define <span class=\"hljs-variable constant_\">ENXIO</span>   <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* No such device or address */</span>\n#define <span class=\"hljs-variable constant_\">E2BIG</span>   <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* Argument list too long */</span>\n#define <span class=\"hljs-variable constant_\">ENOEXEC</span>   <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* Exec format error */</span>\n#define <span class=\"hljs-variable constant_\">EBADF</span>   <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* Bad file number */</span>\n#define <span class=\"hljs-variable constant_\">ECHILD</span>  <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* No child processes */</span>\n#define <span class=\"hljs-variable constant_\">EAGAIN</span>  <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* Try again */</span>\n#define <span class=\"hljs-variable constant_\">ENOMEM</span>  <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* Out of memory */</span>\n#define <span class=\"hljs-variable constant_\">EACCES</span>  <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* Permission denied */</span>\n#define <span class=\"hljs-variable constant_\">EFAULT</span>  <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">/* Bad address */</span>\n#define <span class=\"hljs-variable constant_\">ENOTBLK</span>  <span class=\"hljs-number\">15</span> <span class=\"hljs-comment\">/* Block device required */</span>\n#define <span class=\"hljs-variable constant_\">EBUSY</span>  <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* Device or resource busy */</span>\n#define <span class=\"hljs-variable constant_\">EEXIST</span>  <span class=\"hljs-number\">17</span> <span class=\"hljs-comment\">/* File exists */</span>\n#define <span class=\"hljs-variable constant_\">EXDEV</span>  <span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">/* Cross-device link */</span>\n#define <span class=\"hljs-variable constant_\">ENODEV</span>  <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* No such device */</span>\n#define <span class=\"hljs-variable constant_\">ENOTDIR</span>  <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">/* Not a directory */</span>\n#define <span class=\"hljs-variable constant_\">EISDIR</span>  <span class=\"hljs-number\">21</span> <span class=\"hljs-comment\">/* Is a directory */</span>\n#define <span class=\"hljs-variable constant_\">EINVAL</span>  <span class=\"hljs-number\">22</span> <span class=\"hljs-comment\">/* Invalid argument */</span>\n#define <span class=\"hljs-variable constant_\">ENFILE</span>  <span class=\"hljs-number\">23</span> <span class=\"hljs-comment\">/* File table overflow */</span>\n#define <span class=\"hljs-variable constant_\">EMFILE</span>  <span class=\"hljs-number\">24</span> <span class=\"hljs-comment\">/* Too many open files */</span>\n#define <span class=\"hljs-variable constant_\">ENOTTY</span>  <span class=\"hljs-number\">25</span> <span class=\"hljs-comment\">/* Not a typewriter */</span>\n#define <span class=\"hljs-variable constant_\">ETXTBSY</span>  <span class=\"hljs-number\">26</span> <span class=\"hljs-comment\">/* Text file busy */</span>\n#define <span class=\"hljs-variable constant_\">EFBIG</span>  <span class=\"hljs-number\">27</span> <span class=\"hljs-comment\">/* File too large */</span>\n#define <span class=\"hljs-variable constant_\">ENOSPC</span>  <span class=\"hljs-number\">28</span> <span class=\"hljs-comment\">/* No space left on device */</span>\n#define <span class=\"hljs-variable constant_\">ESPIPE</span>  <span class=\"hljs-number\">29</span> <span class=\"hljs-comment\">/* Illegal seek */</span>\n#define <span class=\"hljs-variable constant_\">EROFS</span>  <span class=\"hljs-number\">30</span> <span class=\"hljs-comment\">/* Read-only file system */</span>\n#define <span class=\"hljs-variable constant_\">EMLINK</span>  <span class=\"hljs-number\">31</span> <span class=\"hljs-comment\">/* Too many links */</span>\n#define <span class=\"hljs-variable constant_\">EPIPE</span>  <span class=\"hljs-number\">32</span> <span class=\"hljs-comment\">/* Broken pipe */</span>\n#define <span class=\"hljs-variable constant_\">EDOM</span>  <span class=\"hljs-number\">33</span> <span class=\"hljs-comment\">/* Math argument out of domain of func */</span>\n#define <span class=\"hljs-variable constant_\">ERANGE</span>  <span class=\"hljs-number\">34</span> <span class=\"hljs-comment\">/* Math result not representable */</span>\n</code></pre>\n<h1>결론</h1>\n<p>C의 main 함수나 Node.js나 다른 프로그래밍 언어에서 process.exit를 사용할 때, 프로그래머가 정의한 종료 코드로 프로세스를 닫기 위해 _exit 시스템 호출이 내부적으로 사용됩니다. 그러나 프로그래머로서 여러분은 프로세스의 적절한 종료와 종료된 프로세스에 대한 사용자에게 가장 좋은 결과를 제공하기 위한 책임이 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}