{"pageProps":{"post":{"title":"테라폼으로 AWS-VPC 피어링하기","description":"","date":"2024-05-27 17:35","slug":"2024-05-27-AWS-VPCPeeringwithTerraform","content":"\n\n![AWS VPC Peering with Terraform](/assets/img/2024-05-27-AWS-VPCPeeringwithTerraform_0.png)\n\nAWS에서 VPC는 무엇인가요?\n\nAWS에서 VPC 피어링이란 무엇인가요?\n\nTerraform은 무엇인가요?\n\n\n<div class=\"content-ad\"></div>\n\n이 글에서는 AWS에서 Terraform을 사용하여 VPC 피어링 프로세스를 자동화하는 단계를 살펴보겠습니다.\n\nAWS에서 생성된 자원 목록\n\n- EC2 (2대)\n- VPC (2개)\n- Internet Gateways (2개)\n- 보안 그룹 (4개)\n- VPC 피어링 연결 (1개)\n- 라우트 테이블 (2개)\n\n# 프로젝트 구조\n\n<div class=\"content-ad\"></div>\n\n\nterraform_project/\n│\n├── module/\n│   ├── ec2/\n│   │   ├── main.tf\n│   │   ├── output.tf\n│   │   └── variables.tf\n│   ├── vpc/\n│   │   ├── main.tf\n│   │   ├── output.tf\n│   │   └── variables.tf\n│   └── ...\n│\n├── main.tf\n├── variables.tf\n└── variable.tfvars/\n    ├── dev-env.tfvars\n    ├── stage-env.tfvars\n    └── prod-env.tfvars\n\n\n## 단계 1: VPC를 위한 모듈 생성 및 가져오기\n\nmodules/vpc-peering/main.tf\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source                = \"hashicorp/aws\"\n      version               = \"~> 5.0\"\n      configuration_aliases = [aws.us_west]\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nresource \"aws_vpc\" \"main_vpc\" {\n  cidr_block = var.vpc_cidr\n\n  tags = {\n    Name       = var.vpc_name\n    created_by = var.owner_name\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n지금, 프로젝트 루트의 main.tf 파일에 모듈을 가져오겠습니다.\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nmodule \"vpc_A\" {\n  source     = \"./modules/vpc\"\n  vpc_name   = var.vpcs[\"vpc_A\"][\"vpc_name\"]\n  vpc_cidr   = var.vpcs[\"vpc_A\"][\"cidr_block\"]\n  owner_name = var.owner_name\n}\n\nmodule \"vpc_B\" {\n  source     = \"./modules/vpc\"\n  vpc_name   = var.vpcs[\"vpc_B\"][\"vpc_name\"]\n  vpc_cidr   = var.vpcs[\"vpc_B\"][\"cidr_block\"]\n  owner_name = var.owner_name\n  providers = {\n    aws = aws.us_west\n  }\n}\n```\n\n## Step 2: Subnets용 모듈을 만들어 import해보세요.\n\nmodules/subnets/main.tf\n\n<div class=\"content-ad\"></div>\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n      # configuration_aliases = [aws.us_west]\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nresource \"aws_subnet\" \"main_subnet\" {\n  vpc_id            = var.vpc_id\n  cidr_block        = var.subnet_cidr\n  availability_zone = var.availability_zone\n\n  tags = {\n    Name       = var.subnet_name\n    created_by = var.owner_name\n  }\n}\n```\n\n이제 프로젝트 루트의 main.tf 파일에 모듈을 가져 오겠습니다.\n\n```js\nmodule \"subnetsForvpc_A\" {\n  for_each          = var.subnetsForvpc_A\n  source            = \"./modules/subnets\"\n  vpc_id            = module.vpc_A.vpc_id\n  subnet_cidr       = var.subnetsForvpc_A[each.key][\"subnet_cidr\"]\n  subnet_name       = var.subnetsForvpc_A[each.key][\"subnet_name\"]\n  availability_zone = var.subnetsForvpc_A[each.key][\"availability_zone\"]\n  owner_name        = var.owner_name\n}\n\nmodule \"subnetsForvpc_B\" {\n  for_each          = var.subnetsForvpc_B\n  source            = \"./modules/subnets\"\n  vpc_id            = module.vpc_B.vpc_id\n  subnet_cidr       = var.subnetsForvpc_B[each.key][\"subnet_cidr\"]\n  subnet_name       = var.subnetsForvpc_B[each.key][\"subnet_name\"]\n  availability_zone = var.subnetsForvpc_B[each.key][\"availability_zone\"]\n  owner_name        = var.owner_name\n  providers = {\n    aws = aws.us_west\n  }\n}\n```\n\n## 단계 3: 보안 그룹 모듈을 생성하고 가져 오기\n\n<div class=\"content-ad\"></div>\n\nmodules/security-groups/main.tf\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source                = \"hashicorp/aws\"\n      version               = \"~> 5.0\"\n      configuration_aliases = [aws.us_west]\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nresource \"aws_security_group\" \"allow_ssh\" {\n  name        = var.sg_name\n  description = var.sg_description\n  vpc_id      = var.vpc_id\n\n  ingress {\n    description = var.ingress_description\n    from_port   = var.ingress_from_port\n    to_port     = var.ingress_to_port\n    protocol    = var.ingress_protocol\n    cidr_blocks = var.ingress_cidr_blocks\n  }\n\n  egress {\n    from_port   = \"0\"\n    to_port     = \"0\"\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name       = var.sg_name\n    created_by = var.owner_name\n  }\n}\n```\n\n보안 그룹을 위해, 저는 main.tf 파일에서 프로젝트 루트로 모듈을 두 번 가져왔습니다. 첫 번째 보안 그룹은 EC2로 SSH를 허용하고, 두 번째는 EC2에서 ICMP 패킷의 흐름을 허용합니다.\n\n```js\nmodule \"ssh_sg_vpcA\" {\n  source              = \"./modules/security-groups\"\n  sg_name             = var.sgs[\"ssh_sg\"][\"sg_name\"]\n  sg_description      = var.sgs[\"ssh_sg\"][\"sg_description\"]\n  ingress_description = var.sgs[\"ssh_sg\"][\"ingress_description\"]\n  ingress_from_port   = var.sgs[\"ssh_sg\"][\"ingress_from_port\"]\n  ingress_to_port     = var.sgs[\"ssh_sg\"][\"ingress_to_port\"]\n  ingress_protocol    = var.sgs[\"ssh_sg\"][\"ingress_protocol\"]\n  ingress_cidr_blocks = var.sg_cidr_blocks[\"ssh_sg\"][\"ingress_cidr_blocks\"]\n  owner_name          = var.owner_name\n  vpc_id              = module.vpc_A.vpc_id\n}\n\nmodule \"ssh_sg_vpcB\" {\n  source              = \"./modules/security-groups\"\n  sg_name             = var.sgs[\"ssh_sg\"][\"sg_name\"]\n  sg_description      = var.sgs[\"ssh_sg\"][\"sg_description\"]\n  ingress_description = var.sgs[\"ssh_sg\"][\"ingress_description\"]\n  ingress_from_port   = var.sgs[\"ssh_sg\"][\"ingress_from_port\"]\n  ingress_to_port     = var.sgs[\"ssh_sg\"][\"ingress_to_port\"]\n  ingress_protocol    = var.sgs[\"ssh_sg\"][\"ingress_protocol\"]\n  ingress_cidr_blocks = var.sg_cidr_blocks[\"ssh_sg\"][\"ingress_cidr_blocks\"]\n  owner_name          = var.owner_name\n  vpc_id              = module.vpc_B.vpc_id\n  providers = {\n    aws = aws.us_west\n  }\n}\n\nmodule \"icmp_sg_vpcA\" {\n  source              = \"./modules/security-groups\"\n  sg_name             = var.sgs[\"icmp_sg\"][\"sg_name\"]\n  sg_description      = var.sgs[\"icmp_sg\"][\"sg_description\"]\n  ingress_description = var.sgs[\"icmp_sg\"][\"ingress_description\"]\n  ingress_from_port   = var.sgs[\"icmp_sg\"][\"ingress_from_port\"]\n  ingress_to_port     = var.sgs[\"icmp_sg\"][\"ingress_to_port\"]\n  ingress_protocol    = var.sgs[\"icmp_sg\"][\"ingress_protocol\"]\n  ingress_cidr_blocks = var.sg_cidr_blocks[\"icmp_sg\"][\"ingress_cidr_blocks_for_vpcA\"]\n  owner_name          = var.owner_name\n  vpc_id              = module.vpc_A.vpc_id\n}\n\nmodule \"icmp_sg_vpcB\" {\n  source              = \"./modules/security-groups\"\n  sg_name             = var.sgs[\"icmp_sg\"][\"sg_name\"]\n  sg_description      = var.sgs[\"icmp_sg\"][\"sg_description\"]\n  ingress_description = var.sgs[\"icmp_sg\"][\"ingress_description\"]\n  ingress_from_port   = var.sgs[\"icmp_sg\"][\"ingress_from_port\"]\n  ingress_to_port     = var.sgs[\"icmp_sg\"][\"ingress_to_port\"]\n  ingress_protocol    = var.sgs[\"icmp_sg\"][\"ingress_protocol\"]\n  ingress_cidr_blocks = var.sg_cidr_blocks[\"icmp_sg\"][\"ingress_cidr_blocks_for_vpcB\"]\n  owner_name          = var.owner_name\n  vpc_id              = module.vpc_B.vpc_id\n  providers = {\n    aws = aws.us_west\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 4: EC2를 위한 모듈 생성 및 가져오기\n\nmodules/ec2/main.tf\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source                = \"hashicorp/aws\"\n      version               = \"~> 5.0\"\n      configuration_aliases = [aws.us_west]\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nresource \"aws_instance\" \"my_ec2\" {\n\n  ami                         = var.ami_id\n  instance_type               = var.instance_type\n  subnet_id                   = var.subnet_id\n  associate_public_ip_address = true\n  key_name                    = var.key_name\n\n  tags = {\n    Name       = var.ec2_name\n    created_by = var.owner_name\n  }\n}\n\nresource \"aws_network_interface_sg_attachment\" \"ssh_sg_attachment\" {\n  security_group_id    = var.ssh_sg_id\n  network_interface_id = aws_instance.my_ec2.primary_network_interface_id\n}\n\nresource \"aws_network_interface_sg_attachment\" \"icmp_sg_attachment\" {\n  security_group_id    = var.icmp_sg_id\n  network_interface_id = aws_instance.my_ec2.primary_network_interface_id\n}\n```\n\n이제 모듈을 프로젝트 루트의 main.tf 파일에 가져오겠습니다.\n\n<div class=\"content-ad\"></div>\n\n\nmodule \"ec2_vpcA\" {\n  source        = \"./modules/ec2\"\n  subnet_id     = module.subnetsForvpc_A[\"subnet1\"].subnet_id\n  ami_id        = var.ec2s[\"ec2_vpcA\"][\"ami_id\"]\n  instance_type = var.ec2s[\"ec2_vpcA\"][\"instance_type\"]\n  ec2_name      = var.ec2s[\"ec2_vpcA\"][\"ec2_name\"]\n  key_name      = var.ec2s[\"ec2_vpcA\"][\"key_name\"]\n  ssh_sg_id     = module.ssh_sg_vpcA.sg_id\n  icmp_sg_id    = module.icmp_sg_vpcA.sg_id\n  owner_name    = var.owner_name\n}\n\nmodule \"ec2_vpcB\" {\n  source        = \"./modules/ec2\"\n  subnet_id     = module.subnetsForvpc_B[\"subnet1\"].subnet_id\n  ami_id        = var.ec2s[\"ec2_vpcB\"][\"ami_id\"]\n  instance_type = var.ec2s[\"ec2_vpcB\"][\"instance_type\"]\n  ec2_name      = var.ec2s[\"ec2_vpcB\"][\"ec2_name\"]\n  key_name      = var.ec2s[\"ec2_vpcB\"][\"key_name\"]\n  ssh_sg_id     = module.ssh_sg_vpcB.sg_id\n  icmp_sg_id    = module.icmp_sg_vpcB.sg_id\n  owner_name    = var.owner_name\n  providers = {\n    aws = aws.us_west\n  }\n}\n\n\n## Step 5: Create modules for Internet Gateways and importing them\n\nmodules/internet-gateways/main.tf\n\n\nterraform {\n  required_providers {\n    aws = {\n      source                = \"hashicorp/aws\"\n      version               = \"~> 5.0\"\n      configuration_aliases = [aws.us_west]\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nresource \"aws_internet_gateway\" \"i_gw\" {\n  vpc_id = var.vpc_id\n\n  tags = {\n    Name       = var.igw_name\n    created_by = var.owner_name\n  }\n}\n\n\n<div class=\"content-ad\"></div>\n\n이제, 프로젝트 루트의 main.tf 파일에 모듈을 가져오겠습니다.\n\n```js\nmodule \"igw_vpcA\" {\n  source     = \"./modules/internet-gateways\"\n  vpc_id     = module.vpc_A.vpc_id\n  igw_name   = var.igws[\"igw_vpcA\"][\"name\"]\n  owner_name = var.owner_name\n}\n\nmodule \"igw_vpcB\" {\n  source     = \"./modules/internet-gateways\"\n  vpc_id     = module.vpc_B.vpc_id\n  igw_name   = var.igws[\"igw_vpcB\"][\"name\"]\n  owner_name = var.owner_name\n  providers = {\n    aws = aws.us_west\n  }\n}\n```\n\n## 단계 6: VPC Peering, VPC Peering accepter, VPC Peering configure용 모듈 생성 및 가져오기\n\n모듈 - VPC Peering (modules/vpc-peering/main.tf)\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n테라폼 {\n  필수_제공자 {\n    aws = {\n      소스 = \"hashicorp/aws\"\n      버전 = \"~> 5.0\"\n      구성_별칭 = [aws.us_west]\n    }\n  }\n}\n\n제공자 \"aws\" {\n  별칭  = \"us_west\"\n  지역 = \"us-west-1\"\n}\n\n리소스 \"aws_vpc_peering_connection\" \"vpc_peering\" {\n  peer_vpc_id = var.peer_vpc_id\n  vpc_id      = var.vpc_id\n  peer_region = \"us-west-1\"\n  tags = {\n    이름       = var.vpcpeer_name\n    생성자 = var.owner_name\n  }\n}\n```\n\n모듈 — VPC 피어링 수락자 (modules/vpc-peering-accepter/main.tf)\n\n```kotlin\n테라폼 {\n  필수_제공자 {\n    aws = {\n      소스 = \"hashicorp/aws\"\n      버전 = \"~> 5.0\"\n      구성_별칭 = [aws.us_west]\n    }\n  }\n}\n\n제공자 \"aws\" {\n  별칭  = \"us_west\"\n  지역 = \"us-west-1\"\n}\n\n리소스 \"aws_vpc_peering_connection_accepter\" \"peer_vpc_AB\" {\n  provider = aws.us_west\n\n  vpc_peering_connection_id = var.vpc_peering_id\n  auto_accept               = true\n\n  tags = {\n    쪽       = \"수락자\"\n    소유자_이름 = var.owner_name\n  }\n}\n```\n\n모듈 — VPC 피어링 구성 (modules/vpc-peering-configure/main.tf)\n\n\n\n<div class=\"content-ad\"></div>\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source                = \"hashicorp/aws\"\n      version               = \"~> 5.0\"\n      configuration_aliases = [aws.us_west]\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nresource \"aws_vpc_peering_connection_options\" \"vpc_peering_configure\" {\n  vpc_peering_connection_id = var.vpc_peering_connection_id\n}\n```\n\n이제, 위의 모든 모듈을 루트의 main.tf 파일로 가져오겠습니다.\n\n```js\nmodule \"vpc_peering\" {\n  source       = \"./modules/vpc-peering\"\n  peer_vpc_id  = module.vpc_B.vpc_id\n  vpc_id       = module.vpc_A.vpc_id\n  vpcpeer_name = var.vpcpeer_name\n  owner_name   = var.owner_name\n}\n\nmodule \"vpc_peering_accepter\" {\n  source         = \"./modules/vpc-peering-accepter\"\n  vpc_peering_id = module.vpc_peering.aws_vpc_peering_connection_id\n  owner_name     = var.owner_name\n  providers = {\n    aws = aws.us_west\n  }\n}\n\nmodule \"vpc_peering_configureA\" {\n  source                    = \"./modules/vpc_peer_configure\"\n  vpc_peering_connection_id = module.vpc_peering_accepter.aws_vpc_peering_connection_accepter\n}\n\nmodule \"vpc_peering_configureB\" {\n  source                    = \"./modules/vpc_peer_configure\"\n  vpc_peering_connection_id = module.vpc_peering_accepter.aws_vpc_peering_connection_accepter\n  providers = {\n    aws = aws.us_west\n  }\n}\n```\n\n## 단계 7: 라우트 테이블을 위한 모듈 만들기 및 가져오기```\n\n<div class=\"content-ad\"></div>\n\nmodules/route-tables/main.tf\n\n```js\nterraform {\n  required_providers {\n    aws = {\n      source                = \"hashicorp/aws\"\n      version               = \"~> 5.0\"\n      configuration_aliases = [aws.us_west]\n    }\n  }\n}\n\nprovider \"aws\" {\n  alias  = \"us_west\"\n  region = \"us-west-1\"\n}\n\nresource \"aws_route\" \"route\" {\n  route_table_id            = var.route_table_id\n  destination_cidr_block    = var.destination_cidr_block\n  gateway_id                = var.gateway_id != \"\" ? var.gateway_id : null\n  vpc_peering_connection_id = var.vpc_peering_connection_id != \"\" ? var.vpc_peering_connection_id : null\n}\n```\n\n이제 프로젝트 루트의 main.tf 파일에 모듈을 가져와보겠습니다.\n\n```js\nmodule \"route_table_vpcA_pcgw\" {\n  source                    = \"./modules/route-table\"\n  route_table_id            = module.vpc_A.default_route_table_id\n  destination_cidr_block    = var.destination_cidr_blocks_for_routetable[\"for_route_vpcA\"][\"pcgw_cidr\"]\n  vpc_peering_connection_id = module.vpc_peering.aws_vpc_peering_connection_id\n  gateway_id                = \"\"\n}\n\nmodule \"route_table_vpcB_pcgw\" {\n  source                    = \"./modules/route-table\"\n  route_table_id            = module.vpc_B.default_route_table_id\n  destination_cidr_block    = var.destination_cidr_blocks_for_routetable[\"for_route_vpcB\"][\"pcgw_cidr\"]\n  vpc_peering_connection_id = module.vpc_peering.aws_vpc_peering_connection_id\n  gateway_id                = \"\"\n  providers = {\n    aws = aws.us_west\n  }\n}\n\nmodule \"route_table_vpcA_igw\" {\n  source                    = \"./modules/route-table\"\n  route_table_id            = module.vpc_A.default_route_table_id\n  destination_cidr_block    = var.destination_cidr_blocks_for_routetable[\"for_route_vpcA\"][\"igw_cidr\"]\n  gateway_id                = module.igw_vpcA.igw_id\n  vpc_peering_connection_id = \"\"\n}\n\nmodule \"route_table_vpcB_igw\" {\n  source                    = \"./modules/route-table\"\n  route_table_id            = module.vpc_B.default_route_table_id\n  destination_cidr_block    = var.destination_cidr_blocks_for_routetable[\"for_route_vpcB\"][\"igw_cidr\"]\n  gateway_id                = module.igw_vpcB.igw_id\n  vpc_peering_connection_id = \"\"\n  providers = {\n    aws = aws.us_west\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 단계 8: dev-env.tfvars 파일 작성\n\nvariable.tfvars/dev-env.tfvars\n\n```js\nowner_name = \"NIKUNJ\"\n\nvpcs = {\n  \"vpc_A\" = {\n    vpc_name   = \"vpc-us-east1\"\n    cidr_block = \"10.1.0.0/16\"\n  }\n  \"vpc_B\" = {\n    vpc_name   = \"vpc-us-west1\"\n    cidr_block = \"10.2.0.0/16\"\n  }\n}\n\nvpc_A에 대한 서브넷 목록 = {\n  \"subnet1\" = {\n    subnet_cidr       = \"10.1.0.0/20\"\n    subnet_name       = \"subnet-us-east1a\"\n    availability_zone = \"us-east-1a\"\n  }\n  \"subnet2\" = {\n    subnet_cidr       = \"10.1.16.0/20\"\n    subnet_name       = \"subnet-us-east1b\"\n    availability_zone = \"us-east-1b\"\n  }\n  \"subnet3\" = {\n    subnet_cidr       = \"10.1.32.0/20\"\n    subnet_name       = \"subnet-us-east1c\"\n    availability_zone = \"us-east-1c\"\n  }\n}\n\nvpc_B에 대한 서브넷 목록 = {\n  \"subnet1\" = {\n    subnet_cidr       = \"10.2.0.0/20\"\n    subnet_name       = \"subnet-us-west1a\"\n    availability_zone = \"us-west-1a\"\n  }\n  \"subnet2\" = {\n    subnet_cidr       = \"10.2.16.0/20\"\n    subnet_name       = \"subnet-us-west1b\"\n    availability_zone = \"us-west-1b\"\n  }\n}\n\n보안 그룹 목록 = {\n  \"ssh_sg\" = {\n    sg_name             = \"allow_ssh\"\n    sg_description      = \"내 IP에서 SSH 허용\"\n    ingress_description = \"내 IP를 위한 SSH\"\n    ingress_from_port   = \"22\"\n    ingress_to_port     = \"22\"\n    ingress_protocol    = \"tcp\"\n  }\n  \"icmp_sg\" = {\n    sg_name             = \"allow_ping_traffic\"\n    sg_description      = \"내 IP에서 ping 허용\"\n    ingress_description = \"내 IP로부터의 ping\"\n    ingress_from_port   = \"8\"\n    ingress_to_port     = \"0\"\n    ingress_protocol    = \"icmp\"\n  }\n}\n\nsg_cidr_blocks = {\n  \"ssh_sg\" = {\n    ingress_cidr_blocks = [\"12.34.56.78/32\"] # ec2로의 SSH가 허용된 IP를 언급\n  }\n  \"icmp_sg\" = {\n    ingress_cidr_blocks_for_vpcA = [\"10.2.0.0/16\"]\n    ingress_cidr_blocks_for_vpcB = [\"10.1.0.0/16\"]\n  }\n}\n\nec2 목록 = {\n  \"ec2_vpcA\" = {\n    ami_id        = \"ami-0e8a34246278c21e4\"\n    instance_type = \"t2.micro\"\n    ec2_name      = \"ec2-us-east1\"\n    key_name      = \"us-east-1-demo\"\n  }\n  \"ec2_vpcB\" = {\n    ami_id        = \"ami-09ab9d570789dfdd4\"\n    instance_type = \"t2.micro\"\n    ec2_name      = \"ec2-us-west1\"\n    key_name      = \"us-west-1-demo\"\n  }\n}\n\n인터넷 게이트웨이 목록 = {\n  \"igw_vpcA\" = {\n    name = \"igw_vpcA\"\n  }\n  \"igw_vpcB\" = {\n    name = \"igw_vpcB\"\n  }\n}\n\nVPC 피어링 이름 = \"vpc_AB_peering\"\n\nroute 테이블용 대상 CIDR 블록 = {\n  \"for_route_vpcA\" = {\n    pcgw_cidr = \"10.2.0.0/16\"\n    igw_cidr  = \"0.0.0.0/0\"\n  }\n  \"for_route_vpcB\" = {\n    pcgw_cidr = \"10.1.0.0/16\"\n    igw_cidr  = \"0.0.0.0/0\"\n  }\n}\n```\n\n## 단계 9: 작업 디렉토리 초기화\n\n<div class=\"content-ad\"></div>\n\n- 작업 디렉토리에서 terraform init 명령을 실행하세요. 이 명령은 필요한 모든 공급자 및 모듈을 다운로드하고 백엔드를 초기화합니다.\n\n## 단계 10: 테라폼 실행 계획 생성\n\n- 작업 디렉토리에서 terraform plan 명령을 실행하세요. 실행 계획을 제공합니다.\n\n## 단계 11: terraform apply 실행\n\n<div class=\"content-ad\"></div>\n\n- 작업 디렉토리에서 terraform apply 명령을 실행하면 AWS에 필요한 모든 리소스가 생성됩니다.\n\n## 단계 12: 연결 확인\n\n- SSH를 사용하여 EC2 인스턴스 중 하나에 연결하고 다른 EC2 인스턴스의 사설 IP를 사용하여 핑을 보냅니다.\n- 모든 것이 잘 되었다면 ICMP 데이터 패킷이 성공적으로 전송됩니다.\n\n여기까지입니다. 이제 Terraform을 사용하여 AWS VPC 피어링 연결을 생성하는 방법을 배웠습니다. 이제 여러분은 이것을 사용하고 필요에 따라 수정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n전체 코드는 여기에서 찾을 수 있어요.\n\n이 가이드가 도움이 되었다면 👏 버튼을 클릭해 주세요. 댓글도 자유롭게 남겨주세요.\n","ogImage":{"url":"/assets/img/2024-05-27-AWS-VPCPeeringwithTerraform_0.png"},"coverImage":"/assets/img/2024-05-27-AWS-VPCPeeringwithTerraform_0.png","tag":["Tech"],"readingTime":18},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-27-AWS-VPCPeeringwithTerraform_0.png\" alt=\"AWS VPC Peering with Terraform\"></p>\n<p>AWS에서 VPC는 무엇인가요?</p>\n<p>AWS에서 VPC 피어링이란 무엇인가요?</p>\n<p>Terraform은 무엇인가요?</p>\n<p>이 글에서는 AWS에서 Terraform을 사용하여 VPC 피어링 프로세스를 자동화하는 단계를 살펴보겠습니다.</p>\n<p>AWS에서 생성된 자원 목록</p>\n<ul>\n<li>EC2 (2대)</li>\n<li>VPC (2개)</li>\n<li>Internet Gateways (2개)</li>\n<li>보안 그룹 (4개)</li>\n<li>VPC 피어링 연결 (1개)</li>\n<li>라우트 테이블 (2개)</li>\n</ul>\n<h1>프로젝트 구조</h1>\n<p>terraform_project/\n│\n├── module/\n│   ├── ec2/\n│   │   ├── main.tf\n│   │   ├── output.tf\n│   │   └── variables.tf\n│   ├── vpc/\n│   │   ├── main.tf\n│   │   ├── output.tf\n│   │   └── variables.tf\n│   └── ...\n│\n├── main.tf\n├── variables.tf\n└── variable.tfvars/\n├── dev-env.tfvars\n├── stage-env.tfvars\n└── prod-env.tfvars</p>\n<h2>단계 1: VPC를 위한 모듈 생성 및 가져오기</h2>\n<p>modules/vpc-peering/main.tf</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source                = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version               = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      configuration_aliases = [aws.<span class=\"hljs-property\">us_west</span>]\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  alias  = <span class=\"hljs-string\">\"us_west\"</span>\n  region = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_vpc\"</span> <span class=\"hljs-string\">\"main_vpc\"</span> {\n  cidr_block = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_cidr</span>\n\n  tags = {\n    <span class=\"hljs-title class_\">Name</span>       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_name</span>\n    created_by = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  }\n}\n</code></pre>\n<p>지금, 프로젝트 루트의 main.tf 파일에 모듈을 가져오겠습니다.</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"~> 5.0\"</span>\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-east-1\"</span>\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  alias  = <span class=\"hljs-string\">\"us_west\"</span>\n  region = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"vpc_A\"</span> {\n  source     = <span class=\"hljs-string\">\"./modules/vpc\"</span>\n  vpc_name   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpcs</span>[<span class=\"hljs-string\">\"vpc_A\"</span>][<span class=\"hljs-string\">\"vpc_name\"</span>]\n  vpc_cidr   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpcs</span>[<span class=\"hljs-string\">\"vpc_A\"</span>][<span class=\"hljs-string\">\"cidr_block\"</span>]\n  owner_name = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"vpc_B\"</span> {\n  source     = <span class=\"hljs-string\">\"./modules/vpc\"</span>\n  vpc_name   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpcs</span>[<span class=\"hljs-string\">\"vpc_B\"</span>][<span class=\"hljs-string\">\"vpc_name\"</span>]\n  vpc_cidr   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpcs</span>[<span class=\"hljs-string\">\"vpc_B\"</span>][<span class=\"hljs-string\">\"cidr_block\"</span>]\n  owner_name = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n</code></pre>\n<h2>Step 2: Subnets용 모듈을 만들어 import해보세요.</h2>\n<p>modules/subnets/main.tf</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source  = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      # configuration_aliases = [aws.<span class=\"hljs-property\">us_west</span>]\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  alias  = <span class=\"hljs-string\">\"us_west\"</span>\n  region = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_subnet\"</span> <span class=\"hljs-string\">\"main_subnet\"</span> {\n  vpc_id            = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_id</span>\n  cidr_block        = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnet_cidr</span>\n  availability_zone = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">availability_zone</span>\n\n  tags = {\n    <span class=\"hljs-title class_\">Name</span>       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnet_name</span>\n    created_by = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  }\n}\n</code></pre>\n<p>이제 프로젝트 루트의 main.tf 파일에 모듈을 가져 오겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"subnetsForvpc_A\"</span> {\n  for_each          = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_A</span>\n  source            = <span class=\"hljs-string\">\"./modules/subnets\"</span>\n  vpc_id            = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_A</span>.<span class=\"hljs-property\">vpc_id</span>\n  subnet_cidr       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_A</span>[each.<span class=\"hljs-property\">key</span>][<span class=\"hljs-string\">\"subnet_cidr\"</span>]\n  subnet_name       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_A</span>[each.<span class=\"hljs-property\">key</span>][<span class=\"hljs-string\">\"subnet_name\"</span>]\n  availability_zone = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_A</span>[each.<span class=\"hljs-property\">key</span>][<span class=\"hljs-string\">\"availability_zone\"</span>]\n  owner_name        = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"subnetsForvpc_B\"</span> {\n  for_each          = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_B</span>\n  source            = <span class=\"hljs-string\">\"./modules/subnets\"</span>\n  vpc_id            = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_B</span>.<span class=\"hljs-property\">vpc_id</span>\n  subnet_cidr       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_B</span>[each.<span class=\"hljs-property\">key</span>][<span class=\"hljs-string\">\"subnet_cidr\"</span>]\n  subnet_name       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_B</span>[each.<span class=\"hljs-property\">key</span>][<span class=\"hljs-string\">\"subnet_name\"</span>]\n  availability_zone = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnetsForvpc_B</span>[each.<span class=\"hljs-property\">key</span>][<span class=\"hljs-string\">\"availability_zone\"</span>]\n  owner_name        = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n</code></pre>\n<h2>단계 3: 보안 그룹 모듈을 생성하고 가져 오기</h2>\n<p>modules/security-groups/main.tf</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source                = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version               = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      configuration_aliases = [aws.<span class=\"hljs-property\">us_west</span>]\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  alias  = <span class=\"hljs-string\">\"us_west\"</span>\n  region = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_security_group\"</span> <span class=\"hljs-string\">\"allow_ssh\"</span> {\n  name        = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sg_name</span>\n  description = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sg_description</span>\n  vpc_id      = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_id</span>\n\n  ingress {\n    description = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ingress_description</span>\n    from_port   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ingress_from_port</span>\n    to_port     = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ingress_to_port</span>\n    protocol    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ingress_protocol</span>\n    cidr_blocks = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ingress_cidr_blocks</span>\n  }\n\n  egress {\n    from_port   = <span class=\"hljs-string\">\"0\"</span>\n    to_port     = <span class=\"hljs-string\">\"0\"</span>\n    protocol    = <span class=\"hljs-string\">\"-1\"</span>\n    cidr_blocks = [<span class=\"hljs-string\">\"0.0.0.0/0\"</span>]\n  }\n\n  tags = {\n    <span class=\"hljs-title class_\">Name</span>       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sg_name</span>\n    created_by = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  }\n}\n</code></pre>\n<p>보안 그룹을 위해, 저는 main.tf 파일에서 프로젝트 루트로 모듈을 두 번 가져왔습니다. 첫 번째 보안 그룹은 EC2로 SSH를 허용하고, 두 번째는 EC2에서 ICMP 패킷의 흐름을 허용합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"ssh_sg_vpcA\"</span> {\n  source              = <span class=\"hljs-string\">\"./modules/security-groups\"</span>\n  sg_name             = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"sg_name\"</span>]\n  sg_description      = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"sg_description\"</span>]\n  ingress_description = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_description\"</span>]\n  ingress_from_port   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_from_port\"</span>]\n  ingress_to_port     = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_to_port\"</span>]\n  ingress_protocol    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_protocol\"</span>]\n  ingress_cidr_blocks = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sg_cidr_blocks</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_cidr_blocks\"</span>]\n  owner_name          = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  vpc_id              = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_A</span>.<span class=\"hljs-property\">vpc_id</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"ssh_sg_vpcB\"</span> {\n  source              = <span class=\"hljs-string\">\"./modules/security-groups\"</span>\n  sg_name             = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"sg_name\"</span>]\n  sg_description      = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"sg_description\"</span>]\n  ingress_description = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_description\"</span>]\n  ingress_from_port   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_from_port\"</span>]\n  ingress_to_port     = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_to_port\"</span>]\n  ingress_protocol    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_protocol\"</span>]\n  ingress_cidr_blocks = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sg_cidr_blocks</span>[<span class=\"hljs-string\">\"ssh_sg\"</span>][<span class=\"hljs-string\">\"ingress_cidr_blocks\"</span>]\n  owner_name          = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  vpc_id              = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_B</span>.<span class=\"hljs-property\">vpc_id</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"icmp_sg_vpcA\"</span> {\n  source              = <span class=\"hljs-string\">\"./modules/security-groups\"</span>\n  sg_name             = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"sg_name\"</span>]\n  sg_description      = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"sg_description\"</span>]\n  ingress_description = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_description\"</span>]\n  ingress_from_port   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_from_port\"</span>]\n  ingress_to_port     = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_to_port\"</span>]\n  ingress_protocol    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_protocol\"</span>]\n  ingress_cidr_blocks = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sg_cidr_blocks</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_cidr_blocks_for_vpcA\"</span>]\n  owner_name          = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  vpc_id              = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_A</span>.<span class=\"hljs-property\">vpc_id</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"icmp_sg_vpcB\"</span> {\n  source              = <span class=\"hljs-string\">\"./modules/security-groups\"</span>\n  sg_name             = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"sg_name\"</span>]\n  sg_description      = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"sg_description\"</span>]\n  ingress_description = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_description\"</span>]\n  ingress_from_port   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_from_port\"</span>]\n  ingress_to_port     = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_to_port\"</span>]\n  ingress_protocol    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sgs</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_protocol\"</span>]\n  ingress_cidr_blocks = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">sg_cidr_blocks</span>[<span class=\"hljs-string\">\"icmp_sg\"</span>][<span class=\"hljs-string\">\"ingress_cidr_blocks_for_vpcB\"</span>]\n  owner_name          = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  vpc_id              = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_B</span>.<span class=\"hljs-property\">vpc_id</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n</code></pre>\n<h2>단계 4: EC2를 위한 모듈 생성 및 가져오기</h2>\n<p>modules/ec2/main.tf</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source                = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version               = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      configuration_aliases = [aws.<span class=\"hljs-property\">us_west</span>]\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  alias  = <span class=\"hljs-string\">\"us_west\"</span>\n  region = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_instance\"</span> <span class=\"hljs-string\">\"my_ec2\"</span> {\n\n  ami                         = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ami_id</span>\n  instance_type               = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">instance_type</span>\n  subnet_id                   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">subnet_id</span>\n  associate_public_ip_address = <span class=\"hljs-literal\">true</span>\n  key_name                    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">key_name</span>\n\n  tags = {\n    <span class=\"hljs-title class_\">Name</span>       = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ec2_name</span>\n    created_by = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  }\n}\n\nresource <span class=\"hljs-string\">\"aws_network_interface_sg_attachment\"</span> <span class=\"hljs-string\">\"ssh_sg_attachment\"</span> {\n  security_group_id    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">ssh_sg_id</span>\n  network_interface_id = aws_instance.<span class=\"hljs-property\">my_ec2</span>.<span class=\"hljs-property\">primary_network_interface_id</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_network_interface_sg_attachment\"</span> <span class=\"hljs-string\">\"icmp_sg_attachment\"</span> {\n  security_group_id    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">icmp_sg_id</span>\n  network_interface_id = aws_instance.<span class=\"hljs-property\">my_ec2</span>.<span class=\"hljs-property\">primary_network_interface_id</span>\n}\n</code></pre>\n<p>이제 모듈을 프로젝트 루트의 main.tf 파일에 가져오겠습니다.</p>\n<p>module \"ec2_vpcA\" {\nsource        = \"./modules/ec2\"\nsubnet_id     = module.subnetsForvpc_A[\"subnet1\"].subnet_id\nami_id        = var.ec2s[\"ec2_vpcA\"][\"ami_id\"]\ninstance_type = var.ec2s[\"ec2_vpcA\"][\"instance_type\"]\nec2_name      = var.ec2s[\"ec2_vpcA\"][\"ec2_name\"]\nkey_name      = var.ec2s[\"ec2_vpcA\"][\"key_name\"]\nssh_sg_id     = module.ssh_sg_vpcA.sg_id\nicmp_sg_id    = module.icmp_sg_vpcA.sg_id\nowner_name    = var.owner_name\n}</p>\n<p>module \"ec2_vpcB\" {\nsource        = \"./modules/ec2\"\nsubnet_id     = module.subnetsForvpc_B[\"subnet1\"].subnet_id\nami_id        = var.ec2s[\"ec2_vpcB\"][\"ami_id\"]\ninstance_type = var.ec2s[\"ec2_vpcB\"][\"instance_type\"]\nec2_name      = var.ec2s[\"ec2_vpcB\"][\"ec2_name\"]\nkey_name      = var.ec2s[\"ec2_vpcB\"][\"key_name\"]\nssh_sg_id     = module.ssh_sg_vpcB.sg_id\nicmp_sg_id    = module.icmp_sg_vpcB.sg_id\nowner_name    = var.owner_name\nproviders = {\naws = aws.us_west\n}\n}</p>\n<h2>Step 5: Create modules for Internet Gateways and importing them</h2>\n<p>modules/internet-gateways/main.tf</p>\n<p>terraform {\nrequired_providers {\naws = {\nsource                = \"hashicorp/aws\"\nversion               = \"~> 5.0\"\nconfiguration_aliases = [aws.us_west]\n}\n}\n}</p>\n<p>provider \"aws\" {\nalias  = \"us_west\"\nregion = \"us-west-1\"\n}</p>\n<p>resource \"aws_internet_gateway\" \"i_gw\" {\nvpc_id = var.vpc_id</p>\n<p>tags = {\nName       = var.igw_name\ncreated_by = var.owner_name\n}\n}</p>\n<p>이제, 프로젝트 루트의 main.tf 파일에 모듈을 가져오겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"igw_vpcA\"</span> {\n  source     = <span class=\"hljs-string\">\"./modules/internet-gateways\"</span>\n  vpc_id     = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_A</span>.<span class=\"hljs-property\">vpc_id</span>\n  igw_name   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">igws</span>[<span class=\"hljs-string\">\"igw_vpcA\"</span>][<span class=\"hljs-string\">\"name\"</span>]\n  owner_name = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"igw_vpcB\"</span> {\n  source     = <span class=\"hljs-string\">\"./modules/internet-gateways\"</span>\n  vpc_id     = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_B</span>.<span class=\"hljs-property\">vpc_id</span>\n  igw_name   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">igws</span>[<span class=\"hljs-string\">\"igw_vpcB\"</span>][<span class=\"hljs-string\">\"name\"</span>]\n  owner_name = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n</code></pre>\n<h2>단계 6: VPC Peering, VPC Peering accepter, VPC Peering configure용 모듈 생성 및 가져오기</h2>\n<p>모듈 - VPC Peering (modules/vpc-peering/main.tf)</p>\n<pre><code class=\"hljs language-kotlin\">테라폼 {\n  필수_제공자 {\n    aws = {\n      소스 = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      버전 = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      구성_별칭 = [aws.us_west]\n    }\n  }\n}\n\n제공자 <span class=\"hljs-string\">\"aws\"</span> {\n  별칭  = <span class=\"hljs-string\">\"us_west\"</span>\n  지역 = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\n리소스 <span class=\"hljs-string\">\"aws_vpc_peering_connection\"</span> <span class=\"hljs-string\">\"vpc_peering\"</span> {\n  peer_vpc_id = <span class=\"hljs-keyword\">var</span>.peer_vpc_id\n  vpc_id      = <span class=\"hljs-keyword\">var</span>.vpc_id\n  peer_region = <span class=\"hljs-string\">\"us-west-1\"</span>\n  tags = {\n    이름       = <span class=\"hljs-keyword\">var</span>.vpcpeer_name\n    생성자 = <span class=\"hljs-keyword\">var</span>.owner_name\n  }\n}\n</code></pre>\n<p>모듈 — VPC 피어링 수락자 (modules/vpc-peering-accepter/main.tf)</p>\n<pre><code class=\"hljs language-kotlin\">테라폼 {\n  필수_제공자 {\n    aws = {\n      소스 = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      버전 = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      구성_별칭 = [aws.us_west]\n    }\n  }\n}\n\n제공자 <span class=\"hljs-string\">\"aws\"</span> {\n  별칭  = <span class=\"hljs-string\">\"us_west\"</span>\n  지역 = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\n리소스 <span class=\"hljs-string\">\"aws_vpc_peering_connection_accepter\"</span> <span class=\"hljs-string\">\"peer_vpc_AB\"</span> {\n  provider = aws.us_west\n\n  vpc_peering_connection_id = <span class=\"hljs-keyword\">var</span>.vpc_peering_id\n  auto_accept               = <span class=\"hljs-literal\">true</span>\n\n  tags = {\n    쪽       = <span class=\"hljs-string\">\"수락자\"</span>\n    소유자_이름 = <span class=\"hljs-keyword\">var</span>.owner_name\n  }\n}\n</code></pre>\n<p>모듈 — VPC 피어링 구성 (modules/vpc-peering-configure/main.tf)</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source                = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version               = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      configuration_aliases = [aws.<span class=\"hljs-property\">us_west</span>]\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  alias  = <span class=\"hljs-string\">\"us_west\"</span>\n  region = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_vpc_peering_connection_options\"</span> <span class=\"hljs-string\">\"vpc_peering_configure\"</span> {\n  vpc_peering_connection_id = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_peering_connection_id</span>\n}\n</code></pre>\n<p>이제, 위의 모든 모듈을 루트의 main.tf 파일로 가져오겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"vpc_peering\"</span> {\n  source       = <span class=\"hljs-string\">\"./modules/vpc-peering\"</span>\n  peer_vpc_id  = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_B</span>.<span class=\"hljs-property\">vpc_id</span>\n  vpc_id       = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_A</span>.<span class=\"hljs-property\">vpc_id</span>\n  vpcpeer_name = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpcpeer_name</span>\n  owner_name   = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"vpc_peering_accepter\"</span> {\n  source         = <span class=\"hljs-string\">\"./modules/vpc-peering-accepter\"</span>\n  vpc_peering_id = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_peering</span>.<span class=\"hljs-property\">aws_vpc_peering_connection_id</span>\n  owner_name     = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">owner_name</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"vpc_peering_configureA\"</span> {\n  source                    = <span class=\"hljs-string\">\"./modules/vpc_peer_configure\"</span>\n  vpc_peering_connection_id = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_peering_accepter</span>.<span class=\"hljs-property\">aws_vpc_peering_connection_accepter</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"vpc_peering_configureB\"</span> {\n  source                    = <span class=\"hljs-string\">\"./modules/vpc_peer_configure\"</span>\n  vpc_peering_connection_id = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_peering_accepter</span>.<span class=\"hljs-property\">aws_vpc_peering_connection_accepter</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n</code></pre>\n<h2>단계 7: 라우트 테이블을 위한 모듈 만들기 및 가져오기```</h2>\n<p>modules/route-tables/main.tf</p>\n<pre><code class=\"hljs language-js\">terraform {\n  required_providers {\n    aws = {\n      source                = <span class=\"hljs-string\">\"hashicorp/aws\"</span>\n      version               = <span class=\"hljs-string\">\"~> 5.0\"</span>\n      configuration_aliases = [aws.<span class=\"hljs-property\">us_west</span>]\n    }\n  }\n}\n\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  alias  = <span class=\"hljs-string\">\"us_west\"</span>\n  region = <span class=\"hljs-string\">\"us-west-1\"</span>\n}\n\nresource <span class=\"hljs-string\">\"aws_route\"</span> <span class=\"hljs-string\">\"route\"</span> {\n  route_table_id            = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">route_table_id</span>\n  destination_cidr_block    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">destination_cidr_block</span>\n  gateway_id                = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">gateway_id</span> != <span class=\"hljs-string\">\"\"</span> ? <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">gateway_id</span> : <span class=\"hljs-literal\">null</span>\n  vpc_peering_connection_id = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_peering_connection_id</span> != <span class=\"hljs-string\">\"\"</span> ? <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">vpc_peering_connection_id</span> : <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n<p>이제 프로젝트 루트의 main.tf 파일에 모듈을 가져와보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"route_table_vpcA_pcgw\"</span> {\n  source                    = <span class=\"hljs-string\">\"./modules/route-table\"</span>\n  route_table_id            = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_A</span>.<span class=\"hljs-property\">default_route_table_id</span>\n  destination_cidr_block    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">destination_cidr_blocks_for_routetable</span>[<span class=\"hljs-string\">\"for_route_vpcA\"</span>][<span class=\"hljs-string\">\"pcgw_cidr\"</span>]\n  vpc_peering_connection_id = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_peering</span>.<span class=\"hljs-property\">aws_vpc_peering_connection_id</span>\n  gateway_id                = <span class=\"hljs-string\">\"\"</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"route_table_vpcB_pcgw\"</span> {\n  source                    = <span class=\"hljs-string\">\"./modules/route-table\"</span>\n  route_table_id            = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_B</span>.<span class=\"hljs-property\">default_route_table_id</span>\n  destination_cidr_block    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">destination_cidr_blocks_for_routetable</span>[<span class=\"hljs-string\">\"for_route_vpcB\"</span>][<span class=\"hljs-string\">\"pcgw_cidr\"</span>]\n  vpc_peering_connection_id = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_peering</span>.<span class=\"hljs-property\">aws_vpc_peering_connection_id</span>\n  gateway_id                = <span class=\"hljs-string\">\"\"</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"route_table_vpcA_igw\"</span> {\n  source                    = <span class=\"hljs-string\">\"./modules/route-table\"</span>\n  route_table_id            = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_A</span>.<span class=\"hljs-property\">default_route_table_id</span>\n  destination_cidr_block    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">destination_cidr_blocks_for_routetable</span>[<span class=\"hljs-string\">\"for_route_vpcA\"</span>][<span class=\"hljs-string\">\"igw_cidr\"</span>]\n  gateway_id                = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">igw_vpcA</span>.<span class=\"hljs-property\">igw_id</span>\n  vpc_peering_connection_id = <span class=\"hljs-string\">\"\"</span>\n}\n\n<span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"route_table_vpcB_igw\"</span> {\n  source                    = <span class=\"hljs-string\">\"./modules/route-table\"</span>\n  route_table_id            = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">vpc_B</span>.<span class=\"hljs-property\">default_route_table_id</span>\n  destination_cidr_block    = <span class=\"hljs-keyword\">var</span>.<span class=\"hljs-property\">destination_cidr_blocks_for_routetable</span>[<span class=\"hljs-string\">\"for_route_vpcB\"</span>][<span class=\"hljs-string\">\"igw_cidr\"</span>]\n  gateway_id                = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">igw_vpcB</span>.<span class=\"hljs-property\">igw_id</span>\n  vpc_peering_connection_id = <span class=\"hljs-string\">\"\"</span>\n  providers = {\n    aws = aws.<span class=\"hljs-property\">us_west</span>\n  }\n}\n</code></pre>\n<h2>단계 8: dev-env.tfvars 파일 작성</h2>\n<p>variable.tfvars/dev-env.tfvars</p>\n<pre><code class=\"hljs language-js\">owner_name = <span class=\"hljs-string\">\"NIKUNJ\"</span>\n\nvpcs = {\n  <span class=\"hljs-string\">\"vpc_A\"</span> = {\n    vpc_name   = <span class=\"hljs-string\">\"vpc-us-east1\"</span>\n    cidr_block = <span class=\"hljs-string\">\"10.1.0.0/16\"</span>\n  }\n  <span class=\"hljs-string\">\"vpc_B\"</span> = {\n    vpc_name   = <span class=\"hljs-string\">\"vpc-us-west1\"</span>\n    cidr_block = <span class=\"hljs-string\">\"10.2.0.0/16\"</span>\n  }\n}\n\nvpc_A에 대한 서브넷 목록 = {\n  <span class=\"hljs-string\">\"subnet1\"</span> = {\n    subnet_cidr       = <span class=\"hljs-string\">\"10.1.0.0/20\"</span>\n    subnet_name       = <span class=\"hljs-string\">\"subnet-us-east1a\"</span>\n    availability_zone = <span class=\"hljs-string\">\"us-east-1a\"</span>\n  }\n  <span class=\"hljs-string\">\"subnet2\"</span> = {\n    subnet_cidr       = <span class=\"hljs-string\">\"10.1.16.0/20\"</span>\n    subnet_name       = <span class=\"hljs-string\">\"subnet-us-east1b\"</span>\n    availability_zone = <span class=\"hljs-string\">\"us-east-1b\"</span>\n  }\n  <span class=\"hljs-string\">\"subnet3\"</span> = {\n    subnet_cidr       = <span class=\"hljs-string\">\"10.1.32.0/20\"</span>\n    subnet_name       = <span class=\"hljs-string\">\"subnet-us-east1c\"</span>\n    availability_zone = <span class=\"hljs-string\">\"us-east-1c\"</span>\n  }\n}\n\nvpc_B에 대한 서브넷 목록 = {\n  <span class=\"hljs-string\">\"subnet1\"</span> = {\n    subnet_cidr       = <span class=\"hljs-string\">\"10.2.0.0/20\"</span>\n    subnet_name       = <span class=\"hljs-string\">\"subnet-us-west1a\"</span>\n    availability_zone = <span class=\"hljs-string\">\"us-west-1a\"</span>\n  }\n  <span class=\"hljs-string\">\"subnet2\"</span> = {\n    subnet_cidr       = <span class=\"hljs-string\">\"10.2.16.0/20\"</span>\n    subnet_name       = <span class=\"hljs-string\">\"subnet-us-west1b\"</span>\n    availability_zone = <span class=\"hljs-string\">\"us-west-1b\"</span>\n  }\n}\n\n보안 그룹 목록 = {\n  <span class=\"hljs-string\">\"ssh_sg\"</span> = {\n    sg_name             = <span class=\"hljs-string\">\"allow_ssh\"</span>\n    sg_description      = <span class=\"hljs-string\">\"내 IP에서 SSH 허용\"</span>\n    ingress_description = <span class=\"hljs-string\">\"내 IP를 위한 SSH\"</span>\n    ingress_from_port   = <span class=\"hljs-string\">\"22\"</span>\n    ingress_to_port     = <span class=\"hljs-string\">\"22\"</span>\n    ingress_protocol    = <span class=\"hljs-string\">\"tcp\"</span>\n  }\n  <span class=\"hljs-string\">\"icmp_sg\"</span> = {\n    sg_name             = <span class=\"hljs-string\">\"allow_ping_traffic\"</span>\n    sg_description      = <span class=\"hljs-string\">\"내 IP에서 ping 허용\"</span>\n    ingress_description = <span class=\"hljs-string\">\"내 IP로부터의 ping\"</span>\n    ingress_from_port   = <span class=\"hljs-string\">\"8\"</span>\n    ingress_to_port     = <span class=\"hljs-string\">\"0\"</span>\n    ingress_protocol    = <span class=\"hljs-string\">\"icmp\"</span>\n  }\n}\n\nsg_cidr_blocks = {\n  <span class=\"hljs-string\">\"ssh_sg\"</span> = {\n    ingress_cidr_blocks = [<span class=\"hljs-string\">\"12.34.56.78/32\"</span>] # ec2로의 <span class=\"hljs-variable constant_\">SSH</span>가 허용된 <span class=\"hljs-variable constant_\">IP</span>를 언급\n  }\n  <span class=\"hljs-string\">\"icmp_sg\"</span> = {\n    ingress_cidr_blocks_for_vpcA = [<span class=\"hljs-string\">\"10.2.0.0/16\"</span>]\n    ingress_cidr_blocks_for_vpcB = [<span class=\"hljs-string\">\"10.1.0.0/16\"</span>]\n  }\n}\n\nec2 목록 = {\n  <span class=\"hljs-string\">\"ec2_vpcA\"</span> = {\n    ami_id        = <span class=\"hljs-string\">\"ami-0e8a34246278c21e4\"</span>\n    instance_type = <span class=\"hljs-string\">\"t2.micro\"</span>\n    ec2_name      = <span class=\"hljs-string\">\"ec2-us-east1\"</span>\n    key_name      = <span class=\"hljs-string\">\"us-east-1-demo\"</span>\n  }\n  <span class=\"hljs-string\">\"ec2_vpcB\"</span> = {\n    ami_id        = <span class=\"hljs-string\">\"ami-09ab9d570789dfdd4\"</span>\n    instance_type = <span class=\"hljs-string\">\"t2.micro\"</span>\n    ec2_name      = <span class=\"hljs-string\">\"ec2-us-west1\"</span>\n    key_name      = <span class=\"hljs-string\">\"us-west-1-demo\"</span>\n  }\n}\n\n인터넷 게이트웨이 목록 = {\n  <span class=\"hljs-string\">\"igw_vpcA\"</span> = {\n    name = <span class=\"hljs-string\">\"igw_vpcA\"</span>\n  }\n  <span class=\"hljs-string\">\"igw_vpcB\"</span> = {\n    name = <span class=\"hljs-string\">\"igw_vpcB\"</span>\n  }\n}\n\n<span class=\"hljs-variable constant_\">VPC</span> 피어링 이름 = <span class=\"hljs-string\">\"vpc_AB_peering\"</span>\n\nroute 테이블용 대상 <span class=\"hljs-variable constant_\">CIDR</span> 블록 = {\n  <span class=\"hljs-string\">\"for_route_vpcA\"</span> = {\n    pcgw_cidr = <span class=\"hljs-string\">\"10.2.0.0/16\"</span>\n    igw_cidr  = <span class=\"hljs-string\">\"0.0.0.0/0\"</span>\n  }\n  <span class=\"hljs-string\">\"for_route_vpcB\"</span> = {\n    pcgw_cidr = <span class=\"hljs-string\">\"10.1.0.0/16\"</span>\n    igw_cidr  = <span class=\"hljs-string\">\"0.0.0.0/0\"</span>\n  }\n}\n</code></pre>\n<h2>단계 9: 작업 디렉토리 초기화</h2>\n<ul>\n<li>작업 디렉토리에서 terraform init 명령을 실행하세요. 이 명령은 필요한 모든 공급자 및 모듈을 다운로드하고 백엔드를 초기화합니다.</li>\n</ul>\n<h2>단계 10: 테라폼 실행 계획 생성</h2>\n<ul>\n<li>작업 디렉토리에서 terraform plan 명령을 실행하세요. 실행 계획을 제공합니다.</li>\n</ul>\n<h2>단계 11: terraform apply 실행</h2>\n<ul>\n<li>작업 디렉토리에서 terraform apply 명령을 실행하면 AWS에 필요한 모든 리소스가 생성됩니다.</li>\n</ul>\n<h2>단계 12: 연결 확인</h2>\n<ul>\n<li>SSH를 사용하여 EC2 인스턴스 중 하나에 연결하고 다른 EC2 인스턴스의 사설 IP를 사용하여 핑을 보냅니다.</li>\n<li>모든 것이 잘 되었다면 ICMP 데이터 패킷이 성공적으로 전송됩니다.</li>\n</ul>\n<p>여기까지입니다. 이제 Terraform을 사용하여 AWS VPC 피어링 연결을 생성하는 방법을 배웠습니다. 이제 여러분은 이것을 사용하고 필요에 따라 수정할 수 있습니다.</p>\n<p>전체 코드는 여기에서 찾을 수 있어요.</p>\n<p>이 가이드가 도움이 되었다면 👏 버튼을 클릭해 주세요. 댓글도 자유롭게 남겨주세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}