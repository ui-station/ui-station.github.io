{"pageProps":{"post":{"title":"사용자 정의 Segmented Control  SwiftUI","description":"","date":"2024-05-23 13:08","slug":"2024-05-23-CustomSegmentedControlSwiftUI","content":"\n이 기사에서는 SwiftUI 프레임워크 내에서 사용자 정의 디자인을 적용한 Segmented Control 예제를 찾을 수 있습니다. 이 방법은 애플리케이션에 특별히 디자인된 Segmented Control을 사용자화합니다.\n\n![Custom Segmented Control Example](/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png)\n\n# Segmented Controls\n\n애플 사전적 정의에 따르면 Segmented Control은 두 개 이상의 세그먼트로 구성된 일련의 요소로, 각각 버튼의 역할을 합니다. Segmented Control 내에서 모든 세그먼트는 일반적으로 동일한 너비를 갖고 있습니다. 버튼과 같이 세그먼트에는 텍스트나 이미지가 포함될 수 있습니다. 세그먼트 아래에 텍스트 레이블을 가질 수도 있습니다(또는 제어 전체 아래에). Segmented Control은 단일 선택 또는 다중 선택을 제공할 수 있습니다. (1).\n\n<div class=\"content-ad\"></div>\n\nSwiftUI 라이브러리에서는 Segmented, UIKit 프레임워크에서는 UISegmentedControl라고 해요.\n\n# 사용자 정의 세그먼트 컨트롤\n\n앱의 테마에 맞게 디자인하려면 아래 방법을 따라주세요.\n\n이번에는 두 개의 요소로 구성된 세그먼트 컨트롤을 디자인하겠습니다. 이를 위해 0과 1로 구성된 enum 타입으로 관리할 거에요.\n\n<div class=\"content-ad\"></div>\n\n```js\n// 0 : 카메라\n// 1 : 사진 라이브러리\n```\n\n아래는 디자인 출력입니다. 그에 따라 개발되었습니다. ⬇️\n\n<img src=\"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_1.png\" />\n\n```js\nimport Foundation\nimport SwiftUI\n\nstruct CustomSegmentedControl: View {\n    @Binding var preselectedIndex: Int\n    var options: [String]\n    // 이 색상은 테마 라이브러리에서 가져온 것입니다\n    let color = ThemeManager.shared.currentTheme.currentPallet.secondary\n\n    var body: some View {\n        HStack(spacing: 0) {\n            ForEach(options.indices, id:\\.self) { index in\n                ZStack {\n                    Rectangle()\n                        .fill(color.opacity(0.2))\n\n                    Rectangle()\n                        .fill(color)\n                        .cornerRadius(20)\n                        .padding(2)\n                        .opacity(preselectedIndex == index ? 1 : 0.01)\n                        .onTapGesture {\n                            withAnimation(.interactiveSpring()) {\n                                preselectedIndex = index\n                            }\n                        }\n                }\n                .overlay(\n                    Text(options[index])\n                )\n            }\n        }\n        .frame(height: 50)\n        .cornerRadius(20)\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\nCustom Segmented Control 클래스는 두 개의 매개변수를 사용합니다. 첫 번째 매개변수는 현재 선택된 아이템을 나타내고, 두 번째 매개변수는 아이템 배열 문자열로 사용됩니다. 이 배열은 상수로 정의할 수 있습니다.\n\n중요한 점은 첫 번째 매개변수가 @Binding으로 표시되어야 한다는 것입니다.\n\n이 매개변수는 @state로 유지하고 sourcetype과 함께 뷰로 전송됩니다.\n\n제스처와 함께 작동하는 작은 애니메이션이 있는 코드가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```bash\nVStack{\n     CustomSegmentedControl(preselectedIndex: $selectedSegmentSourceType,\n        options: [Localization.value(\"photos.title\"), Localization.value(\"camera.title\")])\n}\n```\n\n또한, 컨트롤에서 변경한 값은 뷰에서 sourcetype 변수와 함께 만들어집니다.\n\n이 변수를 통해 선택 상태를 읽을 수 있습니다.\n\n다음 글에서 이 세그먼트 컨트롤과 피커를 함께 사용할 예정이에요. ❤️‍🔥\n\n\n<div class=\"content-ad\"></div>\n\n# 자료들\n","ogImage":{"url":"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png"},"coverImage":"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 기사에서는 SwiftUI 프레임워크 내에서 사용자 정의 디자인을 적용한 Segmented Control 예제를 찾을 수 있습니다. 이 방법은 애플리케이션에 특별히 디자인된 Segmented Control을 사용자화합니다.</p>\n<p><img src=\"/assets/img/2024-05-23-CustomSegmentedControlSwiftUI_0.png\" alt=\"Custom Segmented Control Example\"></p>\n<h1>Segmented Controls</h1>\n<p>애플 사전적 정의에 따르면 Segmented Control은 두 개 이상의 세그먼트로 구성된 일련의 요소로, 각각 버튼의 역할을 합니다. Segmented Control 내에서 모든 세그먼트는 일반적으로 동일한 너비를 갖고 있습니다. 버튼과 같이 세그먼트에는 텍스트나 이미지가 포함될 수 있습니다. 세그먼트 아래에 텍스트 레이블을 가질 수도 있습니다(또는 제어 전체 아래에). Segmented Control은 단일 선택 또는 다중 선택을 제공할 수 있습니다. (1).</p>\n<p>SwiftUI 라이브러리에서는 Segmented, UIKit 프레임워크에서는 UISegmentedControl라고 해요.</p>\n<h1>사용자 정의 세그먼트 컨트롤</h1>\n<p>앱의 테마에 맞게 디자인하려면 아래 방법을 따라주세요.</p>\n<p>이번에는 두 개의 요소로 구성된 세그먼트 컨트롤을 디자인하겠습니다. 이를 위해 0과 1로 구성된 enum 타입으로 관리할 거에요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 0 : 카메라</span>\n<span class=\"hljs-comment\">// 1 : 사진 라이브러리</span>\n</code></pre>\n<p>아래는 디자인 출력입니다. 그에 따라 개발되었습니다. ⬇️</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Foundation</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SwiftUI</span>\n\nstruct <span class=\"hljs-title class_\">CustomSegmentedControl</span>: <span class=\"hljs-title class_\">View</span> {\n    @<span class=\"hljs-title class_\">Binding</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">preselectedIndex</span>: <span class=\"hljs-title class_\">Int</span>\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">options</span>: [<span class=\"hljs-title class_\">String</span>]\n    <span class=\"hljs-comment\">// 이 색상은 테마 라이브러리에서 가져온 것입니다</span>\n    <span class=\"hljs-keyword\">let</span> color = <span class=\"hljs-title class_\">ThemeManager</span>.<span class=\"hljs-property\">shared</span>.<span class=\"hljs-property\">currentTheme</span>.<span class=\"hljs-property\">currentPallet</span>.<span class=\"hljs-property\">secondary</span>\n\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">HStack</span>(<span class=\"hljs-attr\">spacing</span>: <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-title class_\">ForEach</span>(options.<span class=\"hljs-property\">indices</span>, <span class=\"hljs-attr\">id</span>:\\.<span class=\"hljs-property\">self</span>) { index <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-title class_\">ZStack</span> {\n                    <span class=\"hljs-title class_\">Rectangle</span>()\n                        .<span class=\"hljs-title function_\">fill</span>(color.<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0.2</span>))\n\n                    <span class=\"hljs-title class_\">Rectangle</span>()\n                        .<span class=\"hljs-title function_\">fill</span>(color)\n                        .<span class=\"hljs-title function_\">cornerRadius</span>(<span class=\"hljs-number\">20</span>)\n                        .<span class=\"hljs-title function_\">padding</span>(<span class=\"hljs-number\">2</span>)\n                        .<span class=\"hljs-title function_\">opacity</span>(preselectedIndex == index ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0.01</span>)\n                        .<span class=\"hljs-property\">onTapGesture</span> {\n                            <span class=\"hljs-title function_\">withAnimation</span>(<span class=\"hljs-params\">.interactiveSpring()</span>) {\n                                preselectedIndex = index\n                            }\n                        }\n                }\n                .<span class=\"hljs-title function_\">overlay</span>(\n                    <span class=\"hljs-title class_\">Text</span>(options[index])\n                )\n            }\n        }\n        .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">50</span>)\n        .<span class=\"hljs-title function_\">cornerRadius</span>(<span class=\"hljs-number\">20</span>)\n    }\n}\n</code></pre>\n<p>Custom Segmented Control 클래스는 두 개의 매개변수를 사용합니다. 첫 번째 매개변수는 현재 선택된 아이템을 나타내고, 두 번째 매개변수는 아이템 배열 문자열로 사용됩니다. 이 배열은 상수로 정의할 수 있습니다.</p>\n<p>중요한 점은 첫 번째 매개변수가 @Binding으로 표시되어야 한다는 것입니다.</p>\n<p>이 매개변수는 @state로 유지하고 sourcetype과 함께 뷰로 전송됩니다.</p>\n<p>제스처와 함께 작동하는 작은 애니메이션이 있는 코드가 있습니다.</p>\n<pre><code class=\"hljs language-bash\">VStack{\n     CustomSegmentedControl(preselectedIndex: <span class=\"hljs-variable\">$selectedSegmentSourceType</span>,\n        options: [Localization.value(<span class=\"hljs-string\">\"photos.title\"</span>), Localization.value(<span class=\"hljs-string\">\"camera.title\"</span>)])\n}\n</code></pre>\n<p>또한, 컨트롤에서 변경한 값은 뷰에서 sourcetype 변수와 함께 만들어집니다.</p>\n<p>이 변수를 통해 선택 상태를 읽을 수 있습니다.</p>\n<p>다음 글에서 이 세그먼트 컨트롤과 피커를 함께 사용할 예정이에요. ❤️‍🔥</p>\n<h1>자료들</h1>\n</body>\n</html>\n"},"__N_SSG":true}