{"pageProps":{"post":{"title":"아두이노로 만든 실내 식물 자동 관수 시스템","description":"","date":"2024-05-23 16:41","slug":"2024-05-23-SelfwateringsystemforindoorplantswithArduino","content":"\n\n여름이 빠르게 다가오고 휴가 시간이 가까워지면, 몇 주에 한 번 이웃에게 물 주라고 부탁하지 않고도 식물을 살려 놓는 해결책이 필요했죠.\n\n그래서 나는 아마존에서 DIY 아두이노 기반 자동 관개 시스템과 아두이노 보드를 구입해 작업을 시작했어요.\n\n부품 목록:\n- DIY 관개 시스템\n- 아두이노 UNO\n- 전선 및 솔더\n\n설치 위치에 따라 아두이노 보드와 펌프를 전원 공급하기 위해 USB 충전 블록도 필요할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n# 배선 다이어그램\n\n![다이어그램](/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png)\n\n먼저, 센서를 물에 담그고 말리면 센서가 반환하는 값들을 확인하기 위해 캘리브레이션을 해야 합니다.\n\n센서의 노란색 케이블을 보드의 A0에 연결하고 아래의 코드 스니펫을 사용하여 각 센서를 캘리브레이션하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\n void setup()\n { \n   Serial.begin(9600);\n }\n \n void loop()\n {\n   Serial.println(analogRead(A0));\n   delay(100);\n }\n```\n\n수중에 있을 때 550을 받았고, 건조할 때 190을 받았어요. 센서 자체에 영구 마커를 사용하여 이러한 값을 적는 것이 편리하다고 생각합니다. 각 센서에 대해 반복하세요.\n\n![이미지](/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_1.png)\n\n각 센서는 토양 수분 퍼센트가 `20%` 미만인 식물에 물을 보내기 위해 펌프를 작동시키는 중계를 트리거합니다.\n\n<div class=\"content-ad\"></div>\n\n아래는 코드이며 제 Github에서도 확인할 수 있습니다. \n\n```js\nconst int relayPins[] = {2, 3, 4, 5};\nconst int sensorPins[] = {A0, A1, A2, A3};\nconst int numSensors = sizeof(sensorPins) / sizeof(sensorPins[0]);\nconst int readingDelay = 2000;\n\nvoid setup()\n{\n  Serial.begin(9600);\n  for (int i = 0; i < numSensors; i++)\n  {\n    pinMode(relayPins[i], OUTPUT);\n    pinMode(sensorPins[i], INPUT);\n    Serial.print(\"Reading From Sensor \");\n    Serial.print(i);\n    Serial.println(\" ...\");\n    delay(readingDelay);\n  }\n}\n\nvoid loop()\n{\n  for (int i = 0; i < numSensors; i++)\n  {\n    int outputValue = analogRead(sensorPins[i]);\n    Serial.print(\"Sensor \");\n    Serial.print(i);\n    Serial.print(\" - Analog Moisture: \");\n    Serial.println(outputValue);\n    outputValue = map(outputValue, 550, 190, 0, 100);\n    Serial.print(\"Sensor \");\n    Serial.print(i);\n    Serial.print(\" - Moisture: \");\n    Serial.print(outputValue);\n    Serial.println(\"%\");\n    \n    if (outputValue < 20)\n    {\n      digitalWrite(relayPins[i], LOW);\n    }\n    else\n    {\n      digitalWrite(relayPins[i], HIGH);\n    }\n    \n    delay(1000);\n  }\n}\n```\n\n코드에서 주요한 부분은 수분이 많을 때(수중 - 550)와 건조할 때(공기 - 190)에 할당하는 값들입니다. 그런 다음 이러한 값을 0에서 100까지의 백분율로 매핑합니다. 그 후 보드는 센서를 반복하여 각 센서가 20% 미만인 경우 릴레이와 펌프를 트리거하기 시작합니다.\n\n<div class=\"content-ad\"></div>\n\n케이블 관리는 나중에 하지만 첫 번째 수정으로는 매우 만족합니다.\n\n시스템은 모니터링되고 성능이 평가될 것이며, 이 센서에 문제가 있는 다른 사용자들에 대해 온라인에서 읽었으므로 기다려보겠습니다.\n\n이상적으로는 WIFI를 지원하는 버전의 보드로 업그레이드하고, Grafana에 연결하여 수분뿐만 아니라 온도, 습도 등과 같은 다른 측정 항목을 시간별로 모니터링하고 싶습니다.","ogImage":{"url":"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png"},"coverImage":"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>여름이 빠르게 다가오고 휴가 시간이 가까워지면, 몇 주에 한 번 이웃에게 물 주라고 부탁하지 않고도 식물을 살려 놓는 해결책이 필요했죠.</p>\n<p>그래서 나는 아마존에서 DIY 아두이노 기반 자동 관개 시스템과 아두이노 보드를 구입해 작업을 시작했어요.</p>\n<p>부품 목록:</p>\n<ul>\n<li>DIY 관개 시스템</li>\n<li>아두이노 UNO</li>\n<li>전선 및 솔더</li>\n</ul>\n<p>설치 위치에 따라 아두이노 보드와 펌프를 전원 공급하기 위해 USB 충전 블록도 필요할 수 있어요.</p>\n<h1>배선 다이어그램</h1>\n<p><img src=\"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_0.png\" alt=\"다이어그램\"></p>\n<p>먼저, 센서를 물에 담그고 말리면 센서가 반환하는 값들을 확인하기 위해 캘리브레이션을 해야 합니다.</p>\n<p>센서의 노란색 케이블을 보드의 A0에 연결하고 아래의 코드 스니펫을 사용하여 각 센서를 캘리브레이션하세요:</p>\n<pre><code class=\"hljs language-js\"> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>)\n { \n   <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">9600</span>);\n }\n \n <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>)\n {\n   <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-title function_\">analogRead</span>(<span class=\"hljs-variable constant_\">A0</span>));\n   <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">100</span>);\n }\n</code></pre>\n<p>수중에 있을 때 550을 받았고, 건조할 때 190을 받았어요. 센서 자체에 영구 마커를 사용하여 이러한 값을 적는 것이 편리하다고 생각합니다. 각 센서에 대해 반복하세요.</p>\n<p><img src=\"/assets/img/2024-05-23-SelfwateringsystemforindoorplantswithArduino_1.png\" alt=\"이미지\"></p>\n<p>각 센서는 토양 수분 퍼센트가 <code>20%</code> 미만인 식물에 물을 보내기 위해 펌프를 작동시키는 중계를 트리거합니다.</p>\n<p>아래는 코드이며 제 Github에서도 확인할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> int relayPins[] = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\n<span class=\"hljs-keyword\">const</span> int sensorPins[] = {<span class=\"hljs-variable constant_\">A0</span>, <span class=\"hljs-variable constant_\">A1</span>, <span class=\"hljs-variable constant_\">A2</span>, <span class=\"hljs-variable constant_\">A3</span>};\n<span class=\"hljs-keyword\">const</span> int numSensors = <span class=\"hljs-title function_\">sizeof</span>(sensorPins) / <span class=\"hljs-title function_\">sizeof</span>(sensorPins[<span class=\"hljs-number\">0</span>]);\n<span class=\"hljs-keyword\">const</span> int readingDelay = <span class=\"hljs-number\">2000</span>;\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>)\n{\n  <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">begin</span>(<span class=\"hljs-number\">9600</span>);\n  <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; numSensors; i++)\n  {\n    <span class=\"hljs-title function_\">pinMode</span>(relayPins[i], <span class=\"hljs-variable constant_\">OUTPUT</span>);\n    <span class=\"hljs-title function_\">pinMode</span>(sensorPins[i], <span class=\"hljs-variable constant_\">INPUT</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Reading From Sensor \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(i);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\" ...\"</span>);\n    <span class=\"hljs-title function_\">delay</span>(readingDelay);\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-params\"></span>)\n{\n  <span class=\"hljs-keyword\">for</span> (int i = <span class=\"hljs-number\">0</span>; i &#x3C; numSensors; i++)\n  {\n    int outputValue = <span class=\"hljs-title function_\">analogRead</span>(sensorPins[i]);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Sensor \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(i);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\" - Analog Moisture: \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(outputValue);\n    outputValue = <span class=\"hljs-title function_\">map</span>(outputValue, <span class=\"hljs-number\">550</span>, <span class=\"hljs-number\">190</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Sensor \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(i);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\" - Moisture: \"</span>);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">print</span>(outputValue);\n    <span class=\"hljs-title class_\">Serial</span>.<span class=\"hljs-title function_\">println</span>(<span class=\"hljs-string\">\"%\"</span>);\n    \n    <span class=\"hljs-keyword\">if</span> (outputValue &#x3C; <span class=\"hljs-number\">20</span>)\n    {\n      <span class=\"hljs-title function_\">digitalWrite</span>(relayPins[i], <span class=\"hljs-variable constant_\">LOW</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n      <span class=\"hljs-title function_\">digitalWrite</span>(relayPins[i], <span class=\"hljs-variable constant_\">HIGH</span>);\n    }\n    \n    <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>);\n  }\n}\n</code></pre>\n<p>코드에서 주요한 부분은 수분이 많을 때(수중 - 550)와 건조할 때(공기 - 190)에 할당하는 값들입니다. 그런 다음 이러한 값을 0에서 100까지의 백분율로 매핑합니다. 그 후 보드는 센서를 반복하여 각 센서가 20% 미만인 경우 릴레이와 펌프를 트리거하기 시작합니다.</p>\n<p>케이블 관리는 나중에 하지만 첫 번째 수정으로는 매우 만족합니다.</p>\n<p>시스템은 모니터링되고 성능이 평가될 것이며, 이 센서에 문제가 있는 다른 사용자들에 대해 온라인에서 읽었으므로 기다려보겠습니다.</p>\n<p>이상적으로는 WIFI를 지원하는 버전의 보드로 업그레이드하고, Grafana에 연결하여 수분뿐만 아니라 온도, 습도 등과 같은 다른 측정 항목을 시간별로 모니터링하고 싶습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}