{"pageProps":{"post":{"title":"제이미니 API 사용 전에 읽어보세요","description":"","date":"2024-05-23 13:15","slug":"2024-05-23-ReadthisBeforeUsingGeminiAPI","content":"\n\n## Gemini API를 최대한 활용할 수 있도록 도와주는 개발자 안내서\n\n안녕하세요 👋🏻\n\n앱에 Gemini API를 사용하고 싶으신가요? Gemini AI 매개변수를 효과적으로 활용하는 방법은 무엇인가요? Gemini AI를 사용할 때 주의해야 할 점은 무엇일까요?\n\n![이미지](/assets/img/2024-05-23-ReadthisBeforeUsingGeminiAPI_0.png)\n\n<div class=\"content-ad\"></div>\n\nGemini AI를 처음 사용하시는 분이라면, 이는 텍스트, 이미지 및 오디오 등 다양한 유형의 데이터 입력에서 콘텐츠를 생성할 수 있는 모델로 정의되는 생성적 AI입니다.\n\n## Gemini API를 사용해야 하는 이유\n\n아마도 몇몇 분들은 \"Gemini 앱이 있는데, 왜 Gemini API를 사용해야 하죠?\" 라고 물을지도 모릅니다.\n\nGemini API는 AI 기반 응용 프로그램을 만들고 싶은 분들을 대상으로 하고 있습니다. 게다가 유료 버전에서는 귀하의 프롬프트 및 응답을 제품 개선에 사용하지 않습니다.\n\n<div class=\"content-ad\"></div>\n\n# 토큰\n\n생성적 AI 모델은 텍스트 데이터를 처리하기 위해 토큰이라는 단위로 분해합니다. 토큰은 문자, 단어 또는 구(phrase)가 될 수 있습니다. 이는 Gemini가 어떻게 단어를 분해하는지에 따라 다릅니다.\n\n# Top-K, Top-P 및 Temperature\n\n## topK\n\n<div class=\"content-ad\"></div>\n\ntopK 매개변수는 모델이 출력 토큰을 선택하는 방식을 변경합니다. 간단히 말해, 가능한 출력 토큰을 K개로 제한합니다.\n\n예시:\n다음 단어를 완성해야 합니다:\nThe quick brown fox jumps over the …\n\n다음 단어의 확률:\n1. squirrel: 0.08\n2. sleeping rabbit: 0.3\n3. lazy dog: 0.9\n4. dog: 0.7\n\n예시에서...\n\n<div class=\"content-ad\"></div>\n\n만약 topK를 1로 설정하면 (탐욕 디코딩), 출력 결과는 가장 높은 확률을 가진 단어만 표시됩니다. 즉, \"게으른 개\"가 됩니다.\n\n만약 topK를 N(N ≥ 1)으로 설정하면, 출력 결과는 가장 높은 확률을 가진 N개의 단어 중 하나가 나오게 됩니다. 예를 들어, \"게으른 개\", \"개\", \"자는 토끼\"가 있을 때, 이 중에서도 topP에 따라 단어가 더 필터링되고, 최종 출력은 온도를 이용하여 선택됩니다.\n\n## topP\n\ntopP 매개변수, 또한 넉클리어 샘플링이라고 불리는 것은 모델이 출력 토큰을 선택하는 방식을 변경합니다. 간단히 말해, 출력 토큰의 확률 합이 topP 값과 동일하거나 그 이상인 경우까지만 토큰을 생성하는 방식입니다. topP 값은 0.0에서 1.0 사이의 범위로 설정할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n예시: \n다음 단어를 완성해야 합니다:\n수영은 매우…\n\n다음 단어의 확률:\n1. 인기 있는: 0.3\n2. 치유적인: 0.1\n3. 건강한: 0.4\n4. 어려운: 0.2\n\n이때 topP는 0.5로 설정합니다.\n\n가장 높은 확률을 가진 단어는 \"건강한\" (0.4)이지만, 임계 값을 충족하지 못하므로 두 번째로 높은 \"인기 있는\" (0.3)으로 이동합니다. 따라서 출력은 \"건강한\" (0.4)과 \"인기 있는\" (0.3)입니다.\n\n<div class=\"content-ad\"></div>\n\n## 온도\n\n온도는 topP 및 topK가 적용된 이후의 토큰 선택의 무작위성을 제어합니다. 또한 0.0에서 1.0 범위 내에서 온도 값을 설정할 수 있습니다. 우리는 여기서 식을 포함하지 않을 것입니다.\n\n알아두어야 할 것은 높은 온도와 낮은 온도를 언제 사용해야 하는지입니다.\n\n- 낮은 온도 (≤ 0.5)는 더 구체적이거나 덜 창의적인 출력이 필요할 때 적합합니다. 사용 사례 예시로는 요약, 질문 응답, 팩트-체킹, 번역 등이 있습니다.\n- 높은 온도 (≥ 0.5)는 더 창의적인 출력이 필요할 때 적합합니다. 사용 사례 예시로는 이야기 작성, 퀴즈 생성 등이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 가격 책정\n\n가격은 입력 및 출력 토큰에 따라 다르므로 비용을 최적화하기 위해 콘텐츠 생성 전에 입력 및 출력 토큰을 제한할 수 있습니다.\n\n다트(Dart)에서의 예시는 다음과 같습니다:\n\n```js\nFuture<void> main() async {\n  final GenerativeModel model = GenerativeModel(\n    model: 'gemini-1.5-pro-latest',\n    apiKey: 'YOUR_API_KEY',\n    generationConfig: GenerationConfig(\n      responseMimeType: 'application/json',\n      maxOutputTokens: 150,\n    ),\n  );\n\n  final token = await model.countTokens(\n    [Content.text('Hello World')],\n  );\n  print(token.totalTokens);\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# JSON 생성하기\n\n가끔 앱에서 JSON을 생성해야 할 때가 있습니다. 최신 Gemini 1.5 Pro에서는 이미 JSON 출력을 지원합니다.\n\nDart에서 GenerationConfig 내부에 responseMimeType: 'application/json' 속성을 추가할 수 있습니다.\n\nGemini 1.0 Pro를 사용하지 않는 경우에는 프롬프트할 때 출력을 지정할 수 있습니다. ' '예제': '문자열' ' 이런 JSON 구조로 ...를 생성해줘 라고 간단히 요청하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n여기 다트(Dart)에서의 예시가 있어요:\n\n```dart\nvoid main() {\n  final jsonString = jsonEncode({'story': 'string'});\n  final content = await model.generateContent([\n    Content.text(\n      'Generate me a story with this JSON structure: $jsonString',\n    ),\n  ]);\n  print(content.text);\n}\n```\n\n# 시스템 지침\n\n시스템 지침은 사용자가 특정 요구 사항과 사용 사례에 따라 모델의 동작을 조정할 수 있도록 합니다. AI 역할, 언어 스타일 또는 출력을 지정할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n다트 코드 예시를 보여드립니다:\n\n```dart\nvoid main() {\n  final GenerativeModel model = GenerativeModel(\n    model: 'gemini-1.5-pro-latest',\n    apiKey: 'YOUR_API_KEY',\n    systemInstruction: Content.system(\n      '''You are a horror story teller.\n      You will receive a title, then turn it into a short horror story\n      and respond it to the JSON object contains title and story''',\n    ),\n  );\n}\n```\n\n# 보안\n\n클라이언트 측에서 직접 Gemini API를 호출하는 것은 API 키 유출, 서비스 거부(DoS) 공격 등과 같은 위협에 노출될 수 있습니다. 클라이언트 측은 프로토타입에만 사용해야 합니다. 가장 안전한 방법은 서버 측에서 구현하는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n모두 끝났어요!\n\n아래에 댓글을 남기시고 망고가 Linkedin에서 우릴 이어도록 합시다!\n\n독해주셔서 감사합니다! 🐈","ogImage":{"url":"/assets/img/2024-05-23-ReadthisBeforeUsingGeminiAPI_0.png"},"coverImage":"/assets/img/2024-05-23-ReadthisBeforeUsingGeminiAPI_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ol: \"ol\",\n    li: \"li\",\n    ul: \"ul\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Gemini API를 최대한 활용할 수 있도록 도와주는 개발자 안내서\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"안녕하세요 👋🏻\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앱에 Gemini API를 사용하고 싶으신가요? Gemini AI 매개변수를 효과적으로 활용하는 방법은 무엇인가요? Gemini AI를 사용할 때 주의해야 할 점은 무엇일까요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-ReadthisBeforeUsingGeminiAPI_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Gemini AI를 처음 사용하시는 분이라면, 이는 텍스트, 이미지 및 오디오 등 다양한 유형의 데이터 입력에서 콘텐츠를 생성할 수 있는 모델로 정의되는 생성적 AI입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Gemini API를 사용해야 하는 이유\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아마도 몇몇 분들은 \\\"Gemini 앱이 있는데, 왜 Gemini API를 사용해야 하죠?\\\" 라고 물을지도 모릅니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Gemini API는 AI 기반 응용 프로그램을 만들고 싶은 분들을 대상으로 하고 있습니다. 게다가 유료 버전에서는 귀하의 프롬프트 및 응답을 제품 개선에 사용하지 않습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"토큰\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"생성적 AI 모델은 텍스트 데이터를 처리하기 위해 토큰이라는 단위로 분해합니다. 토큰은 문자, 단어 또는 구(phrase)가 될 수 있습니다. 이는 Gemini가 어떻게 단어를 분해하는지에 따라 다릅니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Top-K, Top-P 및 Temperature\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"topK\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"topK 매개변수는 모델이 출력 토큰을 선택하는 방식을 변경합니다. 간단히 말해, 가능한 출력 토큰을 K개로 제한합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시:\\n다음 단어를 완성해야 합니다:\\nThe quick brown fox jumps over the …\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 단어의 확률:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"squirrel: 0.08\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"sleeping rabbit: 0.3\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"lazy dog: 0.9\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"dog: 0.7\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시에서...\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 topK를 1로 설정하면 (탐욕 디코딩), 출력 결과는 가장 높은 확률을 가진 단어만 표시됩니다. 즉, \\\"게으른 개\\\"가 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 topK를 N(N ≥ 1)으로 설정하면, 출력 결과는 가장 높은 확률을 가진 N개의 단어 중 하나가 나오게 됩니다. 예를 들어, \\\"게으른 개\\\", \\\"개\\\", \\\"자는 토끼\\\"가 있을 때, 이 중에서도 topP에 따라 단어가 더 필터링되고, 최종 출력은 온도를 이용하여 선택됩니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"topP\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"topP 매개변수, 또한 넉클리어 샘플링이라고 불리는 것은 모델이 출력 토큰을 선택하는 방식을 변경합니다. 간단히 말해, 출력 토큰의 확률 합이 topP 값과 동일하거나 그 이상인 경우까지만 토큰을 생성하는 방식입니다. topP 값은 0.0에서 1.0 사이의 범위로 설정할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시:\\n다음 단어를 완성해야 합니다:\\n수영은 매우…\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 단어의 확률:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"인기 있는: 0.3\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"치유적인: 0.1\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"건강한: 0.4\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"어려운: 0.2\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이때 topP는 0.5로 설정합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가장 높은 확률을 가진 단어는 \\\"건강한\\\" (0.4)이지만, 임계 값을 충족하지 못하므로 두 번째로 높은 \\\"인기 있는\\\" (0.3)으로 이동합니다. 따라서 출력은 \\\"건강한\\\" (0.4)과 \\\"인기 있는\\\" (0.3)입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"온도\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"온도는 topP 및 topK가 적용된 이후의 토큰 선택의 무작위성을 제어합니다. 또한 0.0에서 1.0 범위 내에서 온도 값을 설정할 수 있습니다. 우리는 여기서 식을 포함하지 않을 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"알아두어야 할 것은 높은 온도와 낮은 온도를 언제 사용해야 하는지입니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"낮은 온도 (≤ 0.5)는 더 구체적이거나 덜 창의적인 출력이 필요할 때 적합합니다. 사용 사례 예시로는 요약, 질문 응답, 팩트-체킹, 번역 등이 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"높은 온도 (≥ 0.5)는 더 창의적인 출력이 필요할 때 적합합니다. 사용 사례 예시로는 이야기 작성, 퀴즈 생성 등이 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"가격 책정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가격은 입력 및 출력 토큰에 따라 다르므로 비용을 최적화하기 위해 콘텐츠 생성 전에 입력 및 출력 토큰을 제한할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다트(Dart)에서의 예시는 다음과 같습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Future\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \"> \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), \"() \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"async\"\n        }), \" {\\n  final \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GenerativeModel\"\n        }), \" model = \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GenerativeModel\"\n        }), \"(\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"model\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'gemini-1.5-pro-latest'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiKey\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'YOUR_API_KEY'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"generationConfig\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"GenerationConfig\"\n        }), \"(\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"responseMimeType\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'application/json'\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"maxOutputTokens\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"150\"\n        }), \",\\n    ),\\n  );\\n\\n  final token = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" model.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"countTokens\"\n        }), \"(\\n    [\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Content\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"text\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Hello World'\"\n        }), \")],\\n  );\\n  \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(token.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"totalTokens\"\n        }), \");\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"JSON 생성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가끔 앱에서 JSON을 생성해야 할 때가 있습니다. 최신 Gemini 1.5 Pro에서는 이미 JSON 출력을 지원합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dart에서 GenerationConfig 내부에 responseMimeType: 'application/json' 속성을 추가할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Gemini 1.0 Pro를 사용하지 않는 경우에는 프롬프트할 때 출력을 지정할 수 있습니다. ' '예제': '문자열' ' 이런 JSON 구조로 ...를 생성해줘 라고 간단히 요청하면 됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기 다트(Dart)에서의 예시가 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-dart\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" main() {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"final\"\n        }), \" jsonString = jsonEncode({\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'story'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'string'\"\n        }), \"});\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"final\"\n        }), \" content = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"await\"\n        }), \" model.generateContent([\\n    Content.text(\\n      \", _jsxs(_components.span, {\n          className: \"hljs-string\",\n          children: [\"'Generate me a story with this JSON structure: \", _jsx(_components.span, {\n            className: \"hljs-subst\",\n            children: \"$jsonString\"\n          }), \"'\"]\n        }), \",\\n    ),\\n  ]);\\n  \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"print\"\n        }), \"(content.text);\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시스템 지침\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"시스템 지침은 사용자가 특정 요구 사항과 사용 사례에 따라 모델의 동작을 조정할 수 있도록 합니다. AI 역할, 언어 스타일 또는 출력을 지정할 수 있어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다트 코드 예시를 보여드립니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-dart\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" main() {\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"final\"\n        }), \" GenerativeModel model = GenerativeModel(\\n    model: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'gemini-1.5-pro-latest'\"\n        }), \",\\n    apiKey: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'YOUR_API_KEY'\"\n        }), \",\\n    systemInstruction: Content.system(\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'''You are a horror story teller.\\n      You will receive a title, then turn it into a short horror story\\n      and respond it to the JSON object contains title and story'''\"\n        }), \",\\n    ),\\n  );\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"보안\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"클라이언트 측에서 직접 Gemini API를 호출하는 것은 API 키 유출, 서비스 거부(DoS) 공격 등과 같은 위협에 노출될 수 있습니다. 클라이언트 측은 프로토타입에만 사용해야 합니다. 가장 안전한 방법은 서버 측에서 구현하는 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모두 끝났어요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래에 댓글을 남기시고 망고가 Linkedin에서 우릴 이어도록 합시다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"독해주셔서 감사합니다! 🐈\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}