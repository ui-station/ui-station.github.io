{"pageProps":{"post":{"title":"Streamlit Plotly 대시보드 데이터 시각화를 위한 확실한 방법","description":"","date":"2024-05-20 18:25","slug":"2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair","content":"\n\n\n![StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_0.png)\n\nPython Streamlit은 인터랙티브 웹 인터페이스를 만드는 놀라운 프레임워크입니다.\n\nPython Plotly는 지도 및 차트와 같은 데이터 시각화를 효율적으로 만드는 훌륭한 라이브러리입니다. 데이터 시각화를 아름답게 표시합니다.\n\nStreamlit과 Plotly는 함께하면 천생연분입니다.\n\n\n<div class=\"content-ad\"></div>\n\n우리는 CSV 데이터 세트에서 여러 데이터 시각화를 웹 인터페이스에서 생성할 수 있고 다중 상호 작용 레이어(예: 슬라이더 및 드롭다운 메뉴)를 추가할 수 있습니다.\n\n모두 100 줄 미만의 코드로 가능합니다! 어떻게 할 수 있는지 보고 싶으세요?\n\n종합적이고 무료로 이용할 수 있는 데이터 세트를 사용하여 모든 것을 함께 해보겠습니다.\n\n# 데이터 세트 — UNHCR 난민 데이터\n\n<div class=\"content-ad\"></div>\n\nUNHCR(UN High Commission for Refugees)은 전 세계의 난민 이동에 대한 통계를 추적합니다.\n\n그들의 데이터는 여기에서 무료로 이용할 수 있습니다.\n\n다운로드 페이지에 도착한 후에는 선택한 데이터에 대해 자세히 볼 수 있습니다:\n\n![이미지](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_1.png)\n\n<div class=\"content-ad\"></div>\n\n이 프로젝트에서는 각 난민의 출신 국가와 피난국을 검색해 보겠습니다.\n\n이 데이터를 사용하여 다음을 보여주는 전 세계 맵과 차트를 만들 수 있습니다:\n- 출신 국가로부터 — 피난민이 어디로 가고 있는지\n- 피난국으로부터 — 피난민이 어디에서 왔는지\n\n데이터셋을 다운로드한 후, 스프레드시트 형식으로 열어서 다루고 있는 내용을 확인할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_2.png\" />\n\n이 프로젝트에서 관심 있는 데이터 필드는 다음과 같습니다:\n\n- 출신 국가(3자리 ISO 코드 포함) — 망명을 찾는 사람이 어디에서 왔는지\n- 망명 국가(3자리 ISO 코드 포함) — 실제로 망명을 찾는 사람이 있는 곳\n- 인정된 결정 — 망명을 찾는 사람이 수락되었는지 여부(국가별 숫자 합계)\n\n출신 국가와 망명 국가 모두 3자리 ISO 코드를 가지고 있어서 등치지도를 만드는 데 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이것 정말 유용해요! 지도 만드는 과정을 크게 간소화해줘요. 이제 코딩에 돌입해봅시다!\n\n## 단계 1: 라이브러리 가져오기 및 환경 설정\n\n우선, 필요한 라이브러리를 가져와 Streamlit 애플리케이션의 페이지 레이아웃을 설정해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```python\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\n# 페이지 레이아웃을 넓게 설정합니다\nst.set_page_config(layout=\"wide\")\n```\n\n- streamlit: 대화형 웹 애플리케이션을 만드는 데 사용됩니다.\n- pandas: 데이터 조작 및 분석에 사용됩니다.\n- plotly.express: 시각화를 생성하는 데 사용됩니다.\n\n또한 Streamlit을 지도와 차트의 시각화를 위해 넓은 레이아웃으로 구성합니다.\n\n## 단계 2: 데이터셋 로드하기 — UNHCR 데이터베이스에서 글로벌 통계\n\n<div class=\"content-ad\"></div>\n\n이제 우리는 피난 심사 결정을 포함한 데이터셋을 로드합니다.\n\n```js\n# 데이터셋 로드\nfile_path = 'asylum-decisions.csv'\ndf = pd.read_csv(file_path)\n```\n\n우리는 pandas를 사용하여 CSV 파일을 DataFrame으로 읽어옵니다.\n\n데이터 프레임을 만든 후에는 맵과 차트에 필요한 데이터를 설정하기 위해 가공할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 단계 3: 고유 년도 및 국가 추출\n\n우선적으로 데이터셋에서 고유한 년도와 국가를 추출합니다. 이 단계의 목적은 Streamlit 인터페이스의 슬라이더 및 드롭다운 메뉴를 채우는 것입니다:\n\n```python\n# 고유한 연도 추출 및 두 열의 고유 국가를 결합하여 드롭다운 메뉴 생성\nyears = sorted(df['Year'].unique())\ncountries = sorted(set(df['Country of origin']).union(set(df['Country of asylum'])))\n```\n\nunique() 함수는 슬라이더에 중복된 연도가 없고 원천/유학국에 중복된 국가가 없도록합니다.\n\n<div class=\"content-ad\"></div>\n\norigin/asylum에 대한 연합을 수행함으로써 데이터셋에서 어떤 국가도 빠뜨리지 않도록 보장합니다.\n\n## 단계 4: Streamlit 인터페이스 생성\n\n데이터를 준비한 후에는 Streamlit 사용자 인터페이스 구성 요소를 선택하는 데 사용할 수 있습니다.\n\n```js\n# Streamlit 인터페이스\nst.subheader(\"Asylum Decisions Visualization\")\n\n# 연도 및 국가 선택 슬라이더 및 드롭다운\nselected_year = st.slider(\"연도 선택\", min_value=int(years[0]), max_value=int(years[-1]), step=1, key=\"year_slider\")\nselected_country = st.selectbox(\"국가 선택\", countries, key=\"country_select\")\n```\n\n<div class=\"content-ad\"></div>\n\n첫 번째 줄은 작은 헤더를 만드는 것입니다. 그런 다음 다음을 만들어야 합니다:\n\n- 슬라이더: 사용자가 이전에 작성한 연도 데이터 프레임에서 연도를 선택할 수 있게 합니다.\n- 드롭다운(선택 상자): 사용자가 이전에 생성한 국가 데이터 프레임에서 국가를 선택할 수 있게 합니다.\n\n## 단계 5: 데이터 필터링\n\n선택한 연도와 피난국을 기반으로 데이터셋을 필터링하여 시각화를 위해 준비합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n# 선택한 연도와 국가를 기준으로 데이터 세트 필터링하기\nfiltered_df_origin = df[(df['연도'] == 선택한_연도) & (df['출신 국가'] == 선택한_국가)]\nfiltered_df_asylum = df[(df['연도'] == 선택한_연도) & (df['안보 국가'] == 선택한_국가)]\n\n# 0 값을 포함한 출신 국가 데이터\norigin_data = filtered_df_asylum.groupby('출신 국가')['인정된 결정'].sum().reset_index()\nall_countries_origin = pd.DataFrame(countries, columns=['출신 국가'])\norigin_data = all_countries_origin.merge(origin_data, on='출신 국가', how='left').fillna(0)\n\n# 0 값을 포함한 안보 국가 데이터\nasylum_data = filtered_df_origin.groupby('안보 국가')['인정된 결정'].sum().reset_index()\nall_countries_asylum = pd.DataFrame(countries, columns=['안보 국가'])\nasylum_data = all_countries_asylum.merge(asylum_data, on='안보 국가', how='left').fillna(0)\n```\n\n여기서 첫 번째 단계는 데이터를 연도별로 분리하는 것입니다. 이는 슬라이더로 선택한 연도에 따라 각 국가로 분리된 데이터를 만드는 과정입니다. 그 다음으로 모든 국가에 값이 있는지 확인하기 위해 fillna() 함수를 사용하여 모든 빈 열에 0을 추가합니다.\n\n## 단계 6: 코로플레스 맵 생성하기\n\n\n<div class=\"content-ad\"></div>\n\n우리가 원산지 및 피난처 국가별 데이터 프레임을 가지고 나면, 각 데이터 프레임을 시각화하기 위해 두 개의 코로플레스 맵을 생성합니다:\n\n```js\n# 맵 생성\nfig_origin = px.choropleth(origin_data, locations=\"Country of origin\", locationmode=\"country names\",\n                           color=\"Recognized decisions\", hover_name=\"Country of origin\",\n                           projection=\"natural earth\", color_continuous_scale=\"YlOrRd\",\n                           title=\"원산지 국가\", template=\"plotly_dark\")\n\nfig_asylum = px.choropleth(asylum_data, locations=\"Country of asylum\", locationmode=\"country names\",\n                           color=\"Recognized decisions\", hover_name=\"Country of asylum\",\n                           projection=\"natural earth\", color_continuous_scale=\"YlOrRd\",\n                           title=\"피난처 국가\", template=\"plotly_dark\")\n```\n\n우리가 사용하는 메서드 및 속성에 대한 몇 가지 세부 정보:\n\n- px.choropleth(): 코로플레스 맵을 만드는 주요 plotly 메서드. 이 메서드를 사용하여 원산지 및 피난처 2개의 맵을 그립니다.\n- locations: 위치 이름이 있는 열을 지정합니다 (첫 번째 맵의 경우 원산지 국가이고, 두 번째 맵의 경우 피난처 국가입니다).\n- locationmode: 위치 이름을 해석하는 방법을 지정합니다.\n- color: 맵을 색칠하는 데 사용할 열을 지정합니다 (Recognized decisions 열의 값에 기초합니다).\n- hover_name: 위치를 가리킬 때 표시할 열을 지정합니다.\n- projection: 맵 투영 유형을 지정합니다.\n\n<div class=\"content-ad\"></div>\n\n우리는 또한 제목, 색상 궁합(YlOrRd) 및 템플릿을 설정했습니다.\n\n![이미지](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_3.png)\n\n각 지도는 위 예제와 유사하게 보일 것입니다(데이터에 따라 다름). 이 예제는 2017년 캐나다로의 망명 신청자를 위한 것입니다.\n\n## 7단계: 막대 차트 생성하기\n\n<div class=\"content-ad\"></div>\n\n다음으로, 인정된 결정에 따른 상위 10개 국가에 대한 수평 막대 차트를 생성합니다:\n\n```js\n# 상위 10개 국가에 대한 막대 차트 생성\ntop_origin_data = origin_data.nlargest(10, 'Recognized decisions')  # 출신 국가 상위 10개\ntop_asylum_data = asylum_data.nlargest(10, 'Recognized decisions')  # 피난 국가 상위 10개\n\nfig_bar_origin = px.bar(top_origin_data, x='Recognized decisions', y='Country of origin',\n                        orientation='h', color='Recognized decisions', color_continuous_scale='YlOrRd',\n                        title='출신 국가 상위 10개')\n\nfig_bar_asylum = px.bar(top_asylum_data, x='Recognized decisions', y='Country of asylum',\n                        orientation='h', color='Recognized decisions', color_continuous_scale='YlOrRd',\n                        title='피난 국가 상위 10개')\n# 막대 순서 변경\nfig_bar_origin.update_layout(yaxis=dict(categoryorder='total ascending'))\nfig_bar_asylum.update_layout(yaxis=dict(categoryorder='total ascending'))\n```\n\n여기서는 나라 이름의 길이가 다양하기 때문에 수평 막대 차트가 가장 적합합니다. 이 코드 조각에 대해:\n\n- px.bar: 막대 차트 생성 (출신 데이터와 피난 데이터 각각 하나씩)\n- orientation='h': 막대 차트가 수평임을 지정합니다.\n- categoryorder='total ascending': 막대 순서를 반전시킵니다. 각 차트를 미학적으로 강조하기 위한 비필수적인 단계입니다.\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_4.png\" />\n\n위 예제와 비슷한 차트가 생성될 것입니다.\n\n멋지네요. 이제 2개의 지도와 2개의 차트를 생성했으니, Streamlit 대시보드에 이 모든 것을 함께 표시할 수 있습니다.\n\n## 단계 8: 지도 및 막대 차트 표시하기\n\n<div class=\"content-ad\"></div>\n\n끝으로, Streamlit 인터페이스에서 지도와 막대 차트를 옆에 나란히 표시합니다.\n\n```js\n# 지도와 막대 차트를 옆에 표시하기\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.plotly_chart(fig_origin, use_container_width=True)\n    st.plotly_chart(fig_bar_origin, use_container_width=True)\n\nwith col2:\n    st.plotly_chart(fig_asylum, use_container_width=True)\n    st.plotly_chart(fig_bar_asylum, use_container_width=True)\n```\n\n이 코드 스니펫에 대한 설명:\n\n- st.columns: 시각화 요소를 옆에 배치할 수 있는 열을 생성합니다.\n- st.plotly_chart: Streamlit 앱에서 Plotly 차트를 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n와 놀라운 결과가 있습니다:\n\n![이미지](/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_5.png)\n\n이 정말 멋집니다.\n\n우리는 이 모두를 코드가 100줄 미만으로(내 예제 Python 파일에는 82줄) 구현했습니다.\n\n<div class=\"content-ad\"></div>\n\n잘 진행되었으면 좋겠네요. 함께 와 주셔서 감사합니다.\n\n# 요약하면...\n\n이 Python 코딩 단계를 따라가며, Streamlit과 Plotly를 사용하여 망명 결정을 시각화하는 대화형 웹 애플리케이션을 만들어 보았습니다.\n\n사용자들은 슬라이더를 사용하여 국가를 선택하고, 해당 국가로 이동하는 난민의 움직임에 대한 다중 시각적 집중을 제공할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nPython의 Streamlit과 Plotly를 함께 사용하는 큰 장점 중 하나는 놀라울만큼 효율적인 코드를 만들 수 있다는 것입니다.\n\nPlotly는 지도 및 차트 시각화를 생성하는 데 최적화되어 있고 Streamlit은 웹 인터페이스를 생성하는 데 최적화되어 있습니다.\n\n완벽한 조합이라고 말할 수 있겠죠.\n\n읽어 주셔서 감사합니다.\n\n<div class=\"content-ad\"></div>\n\n만약 이 유형의 이야기가 당신의 취향이고, 저를 작가로 지원하고 싶다면, 제 Substack를 구독해주세요.\n\nSubstack에서는 매주 뉴스레터와 다른 플랫폼에는 없는 기사들을 발행합니다.","ogImage":{"url":"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_0.png"},"coverImage":"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_0.png\",\n        alt: \"StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Python Streamlit은 인터랙티브 웹 인터페이스를 만드는 놀라운 프레임워크입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Python Plotly는 지도 및 차트와 같은 데이터 시각화를 효율적으로 만드는 훌륭한 라이브러리입니다. 데이터 시각화를 아름답게 표시합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Streamlit과 Plotly는 함께하면 천생연분입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 CSV 데이터 세트에서 여러 데이터 시각화를 웹 인터페이스에서 생성할 수 있고 다중 상호 작용 레이어(예: 슬라이더 및 드롭다운 메뉴)를 추가할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모두 100 줄 미만의 코드로 가능합니다! 어떻게 할 수 있는지 보고 싶으세요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"종합적이고 무료로 이용할 수 있는 데이터 세트를 사용하여 모든 것을 함께 해보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"데이터 세트 — UNHCR 난민 데이터\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"UNHCR(UN High Commission for Refugees)은 전 세계의 난민 이동에 대한 통계를 추적합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그들의 데이터는 여기에서 무료로 이용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다운로드 페이지에 도착한 후에는 선택한 데이터에 대해 자세히 볼 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 프로젝트에서는 각 난민의 출신 국가와 피난국을 검색해 보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 데이터를 사용하여 다음을 보여주는 전 세계 맵과 차트를 만들 수 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"출신 국가로부터 — 피난민이 어디로 가고 있는지\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"피난국으로부터 — 피난민이 어디에서 왔는지\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터셋을 다운로드한 후, 스프레드시트 형식으로 열어서 다루고 있는 내용을 확인할 수 있습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_2.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 프로젝트에서 관심 있는 데이터 필드는 다음과 같습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"출신 국가(3자리 ISO 코드 포함) — 망명을 찾는 사람이 어디에서 왔는지\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"망명 국가(3자리 ISO 코드 포함) — 실제로 망명을 찾는 사람이 있는 곳\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"인정된 결정 — 망명을 찾는 사람이 수락되었는지 여부(국가별 숫자 합계)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"출신 국가와 망명 국가 모두 3자리 ISO 코드를 가지고 있어서 등치지도를 만드는 데 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이것 정말 유용해요! 지도 만드는 과정을 크게 간소화해줘요. 이제 코딩에 돌입해봅시다!\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 1: 라이브러리 가져오기 및 환경 설정\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우선, 필요한 라이브러리를 가져와 Streamlit 애플리케이션의 페이지 레이아웃을 설정해야 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" streamlit \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" st\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" pandas \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" pd\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" plotly.express \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"as\"\n        }), \" px\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 페이지 레이아웃을 넓게 설정합니다\"\n        }), \"\\nst.set_page_config(layout=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"wide\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"streamlit: 대화형 웹 애플리케이션을 만드는 데 사용됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"pandas: 데이터 조작 및 분석에 사용됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"plotly.express: 시각화를 생성하는 데 사용됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한 Streamlit을 지도와 차트의 시각화를 위해 넓은 레이아웃으로 구성합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 2: 데이터셋 로드하기 — UNHCR 데이터베이스에서 글로벌 통계\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 우리는 피난 심사 결정을 포함한 데이터셋을 로드합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 데이터셋 로드\\nfile_path = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'asylum-decisions.csv'\"\n        }), \"\\ndf = pd.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"read_csv\"\n        }), \"(file_path)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 pandas를 사용하여 CSV 파일을 DataFrame으로 읽어옵니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터 프레임을 만든 후에는 맵과 차트에 필요한 데이터를 설정하기 위해 가공할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 3: 고유 년도 및 국가 추출\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우선적으로 데이터셋에서 고유한 년도와 국가를 추출합니다. 이 단계의 목적은 Streamlit 인터페이스의 슬라이더 및 드롭다운 메뉴를 채우는 것입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 고유한 연도 추출 및 두 열의 고유 국가를 결합하여 드롭다운 메뉴 생성\"\n        }), \"\\nyears = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"sorted\"\n        }), \"(df[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Year'\"\n        }), \"].unique())\\ncountries = \", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"sorted\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"set\"\n        }), \"(df[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Country of origin'\"\n        }), \"]).union(\", _jsx(_components.span, {\n          className: \"hljs-built_in\",\n          children: \"set\"\n        }), \"(df[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Country of asylum'\"\n        }), \"])))\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"unique() 함수는 슬라이더에 중복된 연도가 없고 원천/유학국에 중복된 국가가 없도록합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"origin/asylum에 대한 연합을 수행함으로써 데이터셋에서 어떤 국가도 빠뜨리지 않도록 보장합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 4: Streamlit 인터페이스 생성\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터를 준비한 후에는 Streamlit 사용자 인터페이스 구성 요소를 선택하는 데 사용할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Streamlit\"\n        }), \" 인터페이스\\nst.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"subheader\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Asylum Decisions Visualization\\\"\"\n        }), \")\\n\\n# 연도 및 국가 선택 슬라이더 및 드롭다운\\nselected_year = st.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"slider\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"연도 선택\\\"\"\n        }), \", min_value=\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"int\"\n        }), \"(years[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"]), max_value=\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"int\"\n        }), \"(years[-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"]), step=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \", key=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"year_slider\\\"\"\n        }), \")\\nselected_country = st.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"selectbox\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"국가 선택\\\"\"\n        }), \", countries, key=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"country_select\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"첫 번째 줄은 작은 헤더를 만드는 것입니다. 그런 다음 다음을 만들어야 합니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"슬라이더: 사용자가 이전에 작성한 연도 데이터 프레임에서 연도를 선택할 수 있게 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"드롭다운(선택 상자): 사용자가 이전에 생성한 국가 데이터 프레임에서 국가를 선택할 수 있게 합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 5: 데이터 필터링\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"선택한 연도와 피난국을 기반으로 데이터셋을 필터링하여 시각화를 위해 준비합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 선택한 연도와 국가를 기준으로 데이터 세트 필터링하기\\nfiltered_df_origin = df[(df[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'연도'\"\n        }), \"] == 선택한_연도) & (df[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'출신 국가'\"\n        }), \"] == 선택한_국가)]\\nfiltered_df_asylum = df[(df[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'연도'\"\n        }), \"] == 선택한_연도) & (df[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'안보 국가'\"\n        }), \"] == 선택한_국가)]\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" 값을 포함한 출신 국가 데이터\\norigin_data = filtered_df_asylum.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"groupby\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'출신 국가'\"\n        }), \")[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'인정된 결정'\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sum\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"reset_index\"\n        }), \"()\\nall_countries_origin = pd.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DataFrame\"\n        }), \"(countries, columns=[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'출신 국가'\"\n        }), \"])\\norigin_data = all_countries_origin.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"merge\"\n        }), \"(origin_data, on=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'출신 국가'\"\n        }), \", how=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'left'\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fillna\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \")\\n\\n# \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \" 값을 포함한 안보 국가 데이터\\nasylum_data = filtered_df_origin.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"groupby\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'안보 국가'\"\n        }), \")[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'인정된 결정'\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sum\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"reset_index\"\n        }), \"()\\nall_countries_asylum = pd.\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DataFrame\"\n        }), \"(countries, columns=[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'안보 국가'\"\n        }), \"])\\nasylum_data = all_countries_asylum.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"merge\"\n        }), \"(asylum_data, on=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'안보 국가'\"\n        }), \", how=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'left'\"\n        }), \").\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fillna\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서 첫 번째 단계는 데이터를 연도별로 분리하는 것입니다. 이는 슬라이더로 선택한 연도에 따라 각 국가로 분리된 데이터를 만드는 과정입니다. 그 다음으로 모든 국가에 값이 있는지 확인하기 위해 fillna() 함수를 사용하여 모든 빈 열에 0을 추가합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 6: 코로플레스 맵 생성하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리가 원산지 및 피난처 국가별 데이터 프레임을 가지고 나면, 각 데이터 프레임을 시각화하기 위해 두 개의 코로플레스 맵을 생성합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 맵 생성\\nfig_origin = px.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"choropleth\"\n        }), \"(origin_data, locations=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Country of origin\\\"\"\n        }), \", locationmode=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"country names\\\"\"\n        }), \",\\n                           color=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Recognized decisions\\\"\"\n        }), \", hover_name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Country of origin\\\"\"\n        }), \",\\n                           projection=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"natural earth\\\"\"\n        }), \", color_continuous_scale=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"YlOrRd\\\"\"\n        }), \",\\n                           title=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"원산지 국가\\\"\"\n        }), \", template=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"plotly_dark\\\"\"\n        }), \")\\n\\nfig_asylum = px.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"choropleth\"\n        }), \"(asylum_data, locations=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Country of asylum\\\"\"\n        }), \", locationmode=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"country names\\\"\"\n        }), \",\\n                           color=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Recognized decisions\\\"\"\n        }), \", hover_name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Country of asylum\\\"\"\n        }), \",\\n                           projection=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"natural earth\\\"\"\n        }), \", color_continuous_scale=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"YlOrRd\\\"\"\n        }), \",\\n                           title=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"피난처 국가\\\"\"\n        }), \", template=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"plotly_dark\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리가 사용하는 메서드 및 속성에 대한 몇 가지 세부 정보:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"px.choropleth(): 코로플레스 맵을 만드는 주요 plotly 메서드. 이 메서드를 사용하여 원산지 및 피난처 2개의 맵을 그립니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"locations: 위치 이름이 있는 열을 지정합니다 (첫 번째 맵의 경우 원산지 국가이고, 두 번째 맵의 경우 피난처 국가입니다).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"locationmode: 위치 이름을 해석하는 방법을 지정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"color: 맵을 색칠하는 데 사용할 열을 지정합니다 (Recognized decisions 열의 값에 기초합니다).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"hover_name: 위치를 가리킬 때 표시할 열을 지정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"projection: 맵 투영 유형을 지정합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 또한 제목, 색상 궁합(YlOrRd) 및 템플릿을 설정했습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_3.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 지도는 위 예제와 유사하게 보일 것입니다(데이터에 따라 다름). 이 예제는 2017년 캐나다로의 망명 신청자를 위한 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7단계: 막대 차트 생성하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음으로, 인정된 결정에 따른 상위 10개 국가에 대한 수평 막대 차트를 생성합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 상위 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \"개 국가에 대한 막대 차트 생성\\ntop_origin_data = origin_data.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"nlargest\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Recognized decisions'\"\n        }), \")  # 출신 국가 상위 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \"개\\ntop_asylum_data = asylum_data.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"nlargest\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Recognized decisions'\"\n        }), \")  # 피난 국가 상위 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"10\"\n        }), \"개\\n\\nfig_bar_origin = px.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"bar\"\n        }), \"(top_origin_data, x=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Recognized decisions'\"\n        }), \", y=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Country of origin'\"\n        }), \",\\n                        orientation=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'h'\"\n        }), \", color=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Recognized decisions'\"\n        }), \", color_continuous_scale=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'YlOrRd'\"\n        }), \",\\n                        title=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'출신 국가 상위 10개'\"\n        }), \")\\n\\nfig_bar_asylum = px.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"bar\"\n        }), \"(top_asylum_data, x=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Recognized decisions'\"\n        }), \", y=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Country of asylum'\"\n        }), \",\\n                        orientation=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'h'\"\n        }), \", color=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Recognized decisions'\"\n        }), \", color_continuous_scale=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'YlOrRd'\"\n        }), \",\\n                        title=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'피난 국가 상위 10개'\"\n        }), \")\\n# 막대 순서 변경\\nfig_bar_origin.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"update_layout\"\n        }), \"(yaxis=\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dict\"\n        }), \"(categoryorder=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'total ascending'\"\n        }), \"))\\nfig_bar_asylum.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"update_layout\"\n        }), \"(yaxis=\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dict\"\n        }), \"(categoryorder=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'total ascending'\"\n        }), \"))\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기서는 나라 이름의 길이가 다양하기 때문에 수평 막대 차트가 가장 적합합니다. 이 코드 조각에 대해:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"px.bar: 막대 차트 생성 (출신 데이터와 피난 데이터 각각 하나씩)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"orientation='h': 막대 차트가 수평임을 지정합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"categoryorder='total ascending': 막대 순서를 반전시킵니다. 각 차트를 미학적으로 강조하기 위한 비필수적인 단계입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_4.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 예제와 비슷한 차트가 생성될 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"멋지네요. 이제 2개의 지도와 2개의 차트를 생성했으니, Streamlit 대시보드에 이 모든 것을 함께 표시할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계 8: 지도 및 막대 차트 표시하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"끝으로, Streamlit 인터페이스에서 지도와 막대 차트를 옆에 나란히 표시합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 지도와 막대 차트를 옆에 표시하기\\ncol1, col2 = st.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"columns\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"with\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"col1\"\n        }), \":\\n    st.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"plotly_chart\"\n        }), \"(fig_origin, use_container_width=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"True\"\n        }), \")\\n    st.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"plotly_chart\"\n        }), \"(fig_bar_origin, use_container_width=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"True\"\n        }), \")\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"with\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"col2\"\n        }), \":\\n    st.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"plotly_chart\"\n        }), \"(fig_asylum, use_container_width=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"True\"\n        }), \")\\n    st.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"plotly_chart\"\n        }), \"(fig_bar_asylum, use_container_width=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"True\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 코드 스니펫에 대한 설명:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"st.columns: 시각화 요소를 옆에 배치할 수 있는 열을 생성합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"st.plotly_chart: Streamlit 앱에서 Plotly 차트를 표시합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"와 놀라운 결과가 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-StreamlitPlotlyDashboardsASureFireDataVisualizationLoveAffair_5.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 정말 멋집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리는 이 모두를 코드가 100줄 미만으로(내 예제 Python 파일에는 82줄) 구현했습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"잘 진행되었으면 좋겠네요. 함께 와 주셔서 감사합니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"요약하면...\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 Python 코딩 단계를 따라가며, Streamlit과 Plotly를 사용하여 망명 결정을 시각화하는 대화형 웹 애플리케이션을 만들어 보았습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"사용자들은 슬라이더를 사용하여 국가를 선택하고, 해당 국가로 이동하는 난민의 움직임에 대한 다중 시각적 집중을 제공할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Python의 Streamlit과 Plotly를 함께 사용하는 큰 장점 중 하나는 놀라울만큼 효율적인 코드를 만들 수 있다는 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Plotly는 지도 및 차트 시각화를 생성하는 데 최적화되어 있고 Streamlit은 웹 인터페이스를 생성하는 데 최적화되어 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"완벽한 조합이라고 말할 수 있겠죠.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"읽어 주셔서 감사합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 이 유형의 이야기가 당신의 취향이고, 저를 작가로 지원하고 싶다면, 제 Substack를 구독해주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Substack에서는 매주 뉴스레터와 다른 플랫폼에는 없는 기사들을 발행합니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}