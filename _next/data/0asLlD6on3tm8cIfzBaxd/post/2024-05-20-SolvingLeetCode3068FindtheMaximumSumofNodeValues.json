{"pageProps":{"post":{"title":"LeetCode 3068번 문제 해결하기 노드 값의 최대 합 찾기","description":"","date":"2024-05-20 15:34","slug":"2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues","content":"\n\n# 문제 설명:\n\n0부터 n - 1까지 번호가 매겨진 노드로 구성된 무방향 트리가 있습니다. 길이가 n - 1인 0을 기준으로 한 2차원 정수 배열 edges가 주어지는데, edges[i] = [ui, vi]는 트리의 노드 ui와 vi 사이에 간선이 있음을 나타냅니다. 또한 양의 정수 k와 길이가 n인 0을 기준으로 한 음이 아닌 정수 배열 nums가 주어집니다. 여기서 nums[i]는 i번째로 번호가 매겨진 노드의 값을 나타냅니다.\n\n앨리스는 트리 노드의 값의 합을 최대로 하려고 합니다. 이를 위해 앨리스는 다음 작업을 트리에서 원하는 횟수만큼 (포함하여) 수행할 수 있습니다:\n\n- 노드 u와 v를 연결하는 [u, v] 간선을 선택하고, 그들의 값들을 다음과 같이 업데이트합니다:\n- nums[u] = nums[u] XOR k\n- nums[v] = nums[v] XOR k\n\n<div class=\"content-ad\"></div>\n\nAlice가 작업을 여러 번 수행하여 얻을 수 있는 값의 최대 합을 반환합니다.\n\n예시 1:\n\n![image](/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png)\n\n```js\nInput: nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]\nOutput: 6\nExplanation: Alice가 다음을 수행하여 최대 합 6을 얻을 수 있습니다:\n- [0,2] 엣지를 선택합니다. nums[0] 및 nums[2]는 다음과 같이 변경됩니다: 1 XOR 3 = 2이고, 배열 nums는 [1,2,1] -> [2,2,2] 로 변합니다.\n값의 총 합은 2 + 2 + 2 = 6 입니다.\n가능한 최대 값 합은 6임을 보여줄 수 있습니다.\n```\n\n<div class=\"content-ad\"></div>\n\n예제 2:\n\n![그림](/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_1.png)\n\n```js\nInput: nums = [2,3], k = 7, edges = [[0,1]]\nOutput: 9\nExplanation: Alice can achieve the maximum sum of 9 using a single operation:\n- Choose the edge [0,1]. nums[0] becomes: 2 XOR 7 = 5 and nums[1] become: 3 XOR 7 = 4, and the array nums becomes: [2,3] -> [5,4].\nThe total sum of values is 5 + 4 = 9.\nIt can be shown that 9 is the maximum achievable sum of values.\n```\n\n예제 3:\n\n<div class=\"content-ad\"></div>\n\n```js\nInput: nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]\nOutput: 42\nExplanation: 최대 가능한 합은 42로, Alice가 작업을 수행하지 않고 이를 달성할 수 있습니다.\n```\n\n제한사항:\n\n- 2 `= n == nums.length `= 2 * 104\n- 1 `= k `= 109\n- 0 `= nums[i] `= 109\n- edges.length == n - 1\n- edges[i].length == 2\n- 0 `= edges[i][0], edges[i][1] `= n - 1\n- 입력은 edges가 유효한 트리를 나타내도록 생성됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 방법: 탐욕법 (정렬 기반 접근)\n\n## 직관\n\n노드 U에 대해 실행된 작업이 있다면, 노드의 새로운 값은 nums[U] XOR k가 됩니다. 각 노드에 대해, 작업을 수행한 후 값의 순 변화는 netChange[U] = nums[U] XOR k - nums[U]로 주어집니다.\n\n만약 이 순 변화가 양수라면, 모든 노드 값의 총합은 증가합니다. 그렇지 않으면 감소합니다.\n\n<div class=\"content-ad\"></div>\n\n\"가정해보겠습니다. 노드 쌍에서 노드 합에 가장 큰 증가를 제공하는\" 효율적인 작업 \"을 수행하려고 한다고 가정해봅시다. 가장 큰 양수 netChange 값을 가진 노드를 선택하면 노드 합에 가장 큰 증가를 제공할 것입니다.\n\n모든 노드에 대해 위에서 논의한 공식을 사용하여 net change 값을 계산할 수 있습니다. 이 값들을 내림차순으로 정렬한 후에는 positive sum을 가진 pair를 정렬 된 netChange 배열의 시작부터 선택할 수 있습니다.\n\n쌍의 합이 양수이면이 쌍에 대한 작업을 수행할 때 총 노드 합의 값을 증가시킵니다.\n\n## 알고리즘\"\n\n<div class=\"content-ad\"></div>\n\n1. nums의 크기인 n의 netChange 배열과 현재 nums의 합을 저장하는 정수 nodeSum을 초기화합니다.\n\n2. nums 배열을 반복합니다 (0부터 n-1까지):\n\n- 각 인덱스마다 intuition에서 논의한 아이디어를 사용하여 netChange의 값을 저장합니다.\n\n3. netChange 배열을 내림차순으로 정렬합니다.\n\n<div class=\"content-ad\"></div>\n\n4. netChange 배열을 반복합니다 (0부터 n-1까지, 단계 크기 = 2):\n\n- 인접한 요소의 쌍을 만들 수 없는 경우, 반복을 중단합니다.\n- 인접한 요소의 쌍의 합이 양수인 경우 이 합을 nodeSum에 추가합니다.\n\n5. 모든 netChange 요소를 반복한 후, 수행한 작업 이후 노드의 최대 가능한 합인 nodeSum을 반환합니다.\n\n## 구현\n\n<div class=\"content-ad\"></div>\n\n```java\nclass Solution {\n    public long maximumValueSum(int[] nums, int k, int[][] edges) {\n        int n = nums.length;\n        int[] netChange = new int[n];\n        long nodeSum = 0;\n\n        for (int i = 0; i < n; i++) {\n            netChange[i] = (nums[i] ^ k) - nums[i];\n            nodeSum += nums[i];\n        }\n\n        Arrays.sort(netChange);\n\n        for (int i = n-1; i >= 1; i -= 2) {\n            // If netChange contains odd number of elements break the loop\n            if (i - 1 == -1) {\n                break;\n            }\n            long pairSum = netChange[i] + netChange[i - 1];\n            // Include in nodeSum if pairSum is positive\n            if (pairSum > 0) {\n                nodeSum += pairSum;\n            } else {\n                return nodeSum;\n            }\n        }\n        return nodeSum;\n    }\n}\n```\n\n## 복잡도 분석\n\n노드 값 목록에 포함된 요소 수를 n이라고 합시다.\n\n- 시간 복잡도: O(n⋅logn)\n  - 정렬을 제외하고 목록에 대해 단순 선형 작업을 수행하기 때문에 런타임은 정렬의 O(n⋅logn) 복잡성에 지배됩니다.\n- 공간 복잡도: O(n)\n  - 새로운 크기 n의 netChange 배열을 만들고 정렬하기 때문에 추가 공간은 netChange 배열에 대한 O(n)이고 정렬에 대해 O(logn) 또는 O(n)이므로 순 공간 복잡도는 O(n)입니다.```","ogImage":{"url":"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png"},"coverImage":"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"문제 설명:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"0부터 n - 1까지 번호가 매겨진 노드로 구성된 무방향 트리가 있습니다. 길이가 n - 1인 0을 기준으로 한 2차원 정수 배열 edges가 주어지는데, edges[i] = [ui, vi]는 트리의 노드 ui와 vi 사이에 간선이 있음을 나타냅니다. 또한 양의 정수 k와 길이가 n인 0을 기준으로 한 음이 아닌 정수 배열 nums가 주어집니다. 여기서 nums[i]는 i번째로 번호가 매겨진 노드의 값을 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앨리스는 트리 노드의 값의 합을 최대로 하려고 합니다. 이를 위해 앨리스는 다음 작업을 트리에서 원하는 횟수만큼 (포함하여) 수행할 수 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"노드 u와 v를 연결하는 [u, v] 간선을 선택하고, 그들의 값들을 다음과 같이 업데이트합니다:\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"nums[u] = nums[u] XOR k\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"nums[v] = nums[v] XOR k\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Alice가 작업을 여러 번 수행하여 얻을 수 있는 값의 최대 합을 반환합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예시 1:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Input\"\n        }), \": nums = [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"], k = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \", edges = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"],[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"]]\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Output\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Explanation\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alice\"\n        }), \"가 다음을 수행하여 최대 합 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \"을 얻을 수 있습니다:\\n- [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"] 엣지를 선택합니다. nums[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] 및 nums[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"]는 다음과 같이 변경됩니다: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"XOR\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"이고, 배열 nums는 [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"] -> [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"] 로 변합니다.\\n값의 총 합은 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \" 입니다.\\n가능한 최대 값 합은 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6\"\n        }), \"임을 보여줄 수 있습니다.\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예제 2:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-SolvingLeetCode3068FindtheMaximumSumofNodeValues_1.png\",\n        alt: \"그림\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Input\"\n        }), \": nums = [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"], k = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \", edges = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"]]\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Output\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Explanation\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alice\"\n        }), \" can achieve the maximum sum \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9\"\n        }), \" using a single \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"operation\"\n        }), \":\\n- \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Choose\"\n        }), \" the edge [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"]. nums[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"becomes\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"XOR\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \" and nums[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"become\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"XOR\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \", and the array nums \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"becomes\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"] -> [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"].\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"The\"\n        }), \" total sum \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" values is \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \" + \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"It\"\n        }), \" can be shown that \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9\"\n        }), \" is the maximum achievable sum \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"of\"\n        }), \" values.\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"예제 3:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Input\"\n        }), \": nums = [\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7\"\n        }), \"], k = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \", edges = [[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"],[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \"],[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \"],[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"],[\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"]]\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Output\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"42\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Explanation\"\n        }), \": 최대 가능한 합은 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"42\"\n        }), \"로, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Alice\"\n        }), \"가 작업을 수행하지 않고 이를 달성할 수 있습니다.\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"제한사항:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"2 \", _jsx(_components.code, {\n          children: \"= n == nums.length \"\n        }), \"= 2 * 104\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"1 \", _jsx(_components.code, {\n          children: \"= k \"\n        }), \"= 109\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"0 \", _jsx(_components.code, {\n          children: \"= nums[i] \"\n        }), \"= 109\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"edges.length == n - 1\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"edges[i].length == 2\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"0 \", _jsx(_components.code, {\n          children: \"= edges[i][0], edges[i][1] \"\n        }), \"= n - 1\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"입력은 edges가 유효한 트리를 나타내도록 생성됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"방법: 탐욕법 (정렬 기반 접근)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"직관\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"노드 U에 대해 실행된 작업이 있다면, 노드의 새로운 값은 nums[U] XOR k가 됩니다. 각 노드에 대해, 작업을 수행한 후 값의 순 변화는 netChange[U] = nums[U] XOR k - nums[U]로 주어집니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 이 순 변화가 양수라면, 모든 노드 값의 총합은 증가합니다. 그렇지 않으면 감소합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"가정해보겠습니다. 노드 쌍에서 노드 합에 가장 큰 증가를 제공하는\\\" 효율적인 작업 \\\"을 수행하려고 한다고 가정해봅시다. 가장 큰 양수 netChange 값을 가진 노드를 선택하면 노드 합에 가장 큰 증가를 제공할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모든 노드에 대해 위에서 논의한 공식을 사용하여 net change 값을 계산할 수 있습니다. 이 값들을 내림차순으로 정렬한 후에는 positive sum을 가진 pair를 정렬 된 netChange 배열의 시작부터 선택할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"쌍의 합이 양수이면이 쌍에 대한 작업을 수행할 때 총 노드 합의 값을 증가시킵니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"알고리즘\\\"\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"nums의 크기인 n의 netChange 배열과 현재 nums의 합을 저장하는 정수 nodeSum을 초기화합니다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"nums 배열을 반복합니다 (0부터 n-1까지):\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"각 인덱스마다 intuition에서 논의한 아이디어를 사용하여 netChange의 값을 저장합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"netChange 배열을 내림차순으로 정렬합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"netChange 배열을 반복합니다 (0부터 n-1까지, 단계 크기 = 2):\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"인접한 요소의 쌍을 만들 수 없는 경우, 반복을 중단합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"인접한 요소의 쌍의 합이 양수인 경우 이 합을 nodeSum에 추가합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"모든 netChange 요소를 반복한 후, 수행한 작업 이후 노드의 최대 가능한 합인 nodeSum을 반환합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"구현\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Solution\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"long\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"maximumValueSum\"\n        }), _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \"[] nums, \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \" k, \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"int\"\n          }), \"[][] edges)\"]\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"int\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"n\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" nums.length;\\n        \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"int\"\n        }), \"[] netChange = \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"int\"\n        }), \"[n];\\n        \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"long\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"nodeSum\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \";\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"int\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"i\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"; i < n; i++) {\\n            netChange[i] = (nums[i] ^ k) - nums[i];\\n            nodeSum += nums[i];\\n        }\\n\\n        Arrays.sort(netChange);\\n\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" (\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"int\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"i\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" n-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"; i >= \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"; i -= \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2\"\n        }), \") {\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// If netChange contains odd number of elements break the loop\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (i - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \" == -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \") {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"break\"\n        }), \";\\n            }\\n            \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"long\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"pairSum\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" netChange[i] + netChange[i - \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"];\\n            \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// Include in nodeSum if pairSum is positive\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" (pairSum > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \") {\\n                nodeSum += pairSum;\\n            } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \" {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" nodeSum;\\n            }\\n        }\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" nodeSum;\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"복잡도 분석\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"노드 값 목록에 포함된 요소 수를 n이라고 합시다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"시간 복잡도: O(n⋅logn)\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"정렬을 제외하고 목록에 대해 단순 선형 작업을 수행하기 때문에 런타임은 정렬의 O(n⋅logn) 복잡성에 지배됩니다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"공간 복잡도: O(n)\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"새로운 크기 n의 netChange 배열을 만들고 정렬하기 때문에 추가 공간은 netChange 배열에 대한 O(n)이고 정렬에 대해 O(logn) 또는 O(n)이므로 순 공간 복잡도는 O(n)입니다.```\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}