{"pageProps":{"post":{"title":"마이크로소프트 Phi2의 Text2SQL 작업을 위한 지도 학습 세부 조정 SFT 파트 1","description":"","date":"2024-05-23 18:24","slug":"2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1","content":"\n\n![image](/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png)\n\n이 글에서는 우리만의 모델, LLM (Large Language Model)을 세밀하게 조정하여 자연어 텍스트에서 유효한 SQL 쿼리를 작성할 수 있는 기능을 추가할 것입니다.\n\n한 단계씩 살펴보겠습니다.\n\n- 소개\n  - 사전 훈련된 모델 선택\n  - 입력/출력 형식\n- 데이터셋 준비\n  - 정리 작업 진행\n  - 하위 집합 생성\n- (계속되는 내용은 Part 2에서)\n- 결론\n\n<div class=\"content-ad\"></div>\n\n# 소개\n\n요즘, 트랜스포머 기반 모델이 자연어 처리 분야에서 많은 문제를 해결하고 있어요. 잘 알려진 예시로는 GPT, LLAMA, Mistral 등이 있습니다. 이 모델들은 특정 자연어 처리 문제를 해결하기 위해 입력으로 프롬프트를 사용합니다.\n\n![이미지](/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_1.png)\n\n## 사전 학습된 모델 선택\n\n<div class=\"content-ad\"></div>\n\n미리 훈련된 모델을 사용하여 시작해 보세요. 미리 훈련된 모델의 정의는 무엇일까요?\n\n미리 훈련된 모델은 수천만 개 또는 수십억 개의 토큰을 사용하여 \"다음 단어 예측\" 목적으로 훈련된 모델입니다. 이 훈련 과정동안, 문장 내 단어의 구조와 의미를 학습합니다.\n\n이 작업에서는 미러소프트/파이2 미리 훈련된 모델을 사용할 것입니다. 이 모델은 1.4 조 토큰으로 훈련되었으며, 27 억 개의 파라미터를 갖추고 있습니다. 이 모델은 SLM(작은 언어 모델)로 간주될 수 있습니다.\n\n이 유형의 미리 훈련된 모델은 앞선 맥락을 기반으로 새로운 토큰을 생성할 수 있는 능력을 갖고 있습니다. 이 모델은 독립적인 질문, QA, 채팅 형식, 그리고 코드 생성과 같은 다양한 용도에 사용될 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이 모델을 QA 스타일로 텍스트2SQL 생성을 위해 미세 조정할 예정입니다.\n\n## 입력/출력 형식\n\n| | |\n|------------------|----------------------------------|\n| **input**        | User question                    |\n| **output**       | SQL query                        |\n\n질문은 다음과 같습니다: LLM은 사용자 질문에서 어떻게 SQL을 생성할까요?\n\n<div class=\"content-ad\"></div>\n\n인간이라도 할 수 없어요. 적어도 테이블 구조에 대한 정보와 샘플 데이터가 필요한데, 그럼에도 불구하고 질문에 대한 SQL 쿼리를 해결할 수 있을 거에요.\n\nLLM과 유사하게, 어떤 맥락을 제공해야 해요. 따라서 우리의 입력은 (맥락) + (사용자 질문)이고, LLM이 우리를 위해 SQL을 생성할 거에요.\n\n그러니 데이터셋 수집 및 준비를 시작해 보고, 그 다음으로 세밀하게 조정해 봐요.\n\n# 데이터셋 준비\n\n<div class=\"content-ad\"></div>\n\n잠시 찾아보니 huggingface의 “gretelai/synthetic_text_to_sql” 데이터셋을 찾았어요. 제가 찾고 있던 작업에 가장 적합한 것 같아요. 데이터셋에 대해 더 많은 정보를 얻으려면 링크를 클릭해주세요.\n\n```python\nfrom datasets import Dataset, load_dataset\n\n# 데이터셋 불러오고 원치 않는 열 제거하기\ndataset = load_dataset(\"gretelai/synthetic_text_to_sql\") \\\n    .remove_columns(['domain_description', 'sql_complexity_description',\n                     'sql_task_type_description', 'sql_explanation', 'sql_task_type'])\n\ndataset\n```\n\n```python\nDatasetDict({\n    train: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 100000\n    })\n    test: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 5851\n    })\n})\n```\n\n```python\ndataset['train'][0]\n```\n\n<div class=\"content-ad\"></div>\n\n데이터셋이 무엇인지 감을 잡기 위해 하나의 샘플을 살펴봅시다. 여기서 우리는 \"sql_context,\" \"sql_prompt,\" 그리고 \"sql\" 필드를 사용할 것입니다.\n\n- sql_context: 테이블 생성 및 삽입 문장\n- sql_prompt: 사용자 쿼리\n- sql: 대상 쿼리\n\n(sql_context + sql_prompt)가 입력이 되고, (sql)이 대상 생성이 됩니다.\n\n```js\n{'id': 5097,\n 'domain': 'forestry',\n 'sql_complexity': 'single join',\n 'sql_prompt': '각 영업사원이 판매한 총 목재 양을 영업사원별로 정렬하여 나타내시오.',\n 'sql_context': \"CREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT); INSERT INTO salesperson (salesperson_id, name, region) VALUES (1, 'John Doe', 'North'), (2, 'Jane Smith', 'South'); CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE); INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES (1, 1, 120, '2021-01-01'), (2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');\",\n 'sql': 'SELECT salesperson_id, name, SUM(volume) as total_volume FROM timber_sales JOIN salesperson ON timber_sales.salesperson_id = salesperson.salesperson_id GROUP BY salesperson_id, name ORDER BY total_volume DESC;'}\n```\n\n<div class=\"content-ad\"></div>\n\n## 정리를 해봅시다\n\n이 데이터셋은 합성 데이터입니다. 유효하지 않은 문맥이나 SQL 쿼리를 가질 수 있습니다. 이러한 레코드를 찾아 제거해봅시다. 쓰레기를 넣으면 쓰레기가 나온다는 말이죠.\n\n다음 조건에 따라 유효한 데이터를 확인할 것입니다:\n\n- SQL 문맥과 SQL 쿼리는 SQL Lite 데이터베이스에 유효해야 합니다.\n- 테이블은 샘플 레코드를 가져야 합니다.\n- SQL 쿼리를 실행한 후에 결과를 얻을 수 있어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\r\nimport sqlite3\n\ndef check_all_tables_have_values(row, debug=False):\n\n    # 테이블에 레코드가 있어야 함\n    if row['sql_context'].find('INSERT INTO') == -1:\n        return False\n\n    try:\n        db = sqlite3.connect(\":memory:\")\n        cur = db.cursor()\n        cur.executescript(row['sql_context'])\n        res = cur.execute(row['sql']).fetchall()\n        if debug: print(res)\n        # print(res, len(res))\n        return len(res) > 0\n    except:\n        # print(\"Error while run query\")\n        return False\n\ndataset = dataset.filter(lambda x : check_all_tables_have_values(x))\ndataset\r\n```\n\n```js\r\nDatasetDict({\n    train: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 53478\n    })\n    test: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 3133\n    })\n})\r\n```\n\n보시다시피 데이터의 약 46%가 제거되었습니다. 이것은 SQL Lite와 호환되지 않거나 데이터가 없을 수 있습니다.\n\n## 하위 집합 만들기```\n\n<div class=\"content-ad\"></div>\n\n그럼,이 초기 실험을 위한 데이터셋이 훨씬 큽니다. 이를 위해 그 중 일부를 만들어 보겠습니다.\n\n다음과 같이 14개 도메인과 3가지 SQL 복잡성 수준으로 데이터셋을 만들 것입니다:\n\n```js\nSELECTED_SQL_COMPLEXITY = ['basic SQL', 'aggregation','single join']\n\nSELECTED_DOMAINS = [\n    \"technology\", \"sports\", \"logistics\", \"space\", \"energy\",\n    \"finance\", \"agriculture\", \"justice\", \"retail\", \"media\",\n    \"education\", \"healthcare\", \"fashion\", \"music\"\n]\n\ndef filter_by_sql_task_type_and_domains(row):\n    return row['sql_complexity'] in SELECTED_SQL_COMPLEXITY \\\n         and row['domain'] in SELECTED_DOMAINS\n\ndataset = dataset.filter(lambda x : filter_by_sql_task_type_and_domains(x))\ndataset\n```\n\n```js\nDatasetDict({\n    train: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 6713\n    })\n    test: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 408\n    })\n})\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_3.png\" />\n\n여기에는 14개의 도메인 데이터셋이 있으며, 각 도메인은 훈련 데이터에 적어도 300개의 샘플이 있습니다. SQL 복잡성은 \"기본 SQL\"의 50%, \"단일 조인\"의 20%, 그리고 \"집계\"의 30%로 분포됩니다.\n\n# (계속, 파트 2로 이어집니다)\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n이 문서에서는 SLM이 무엇인지 알아보고 fine-tuning을 통해 Text2SQL 작업을 어떻게 해결할 것인지에 대한 아이디어를 얻게 됩니다.\n\n데이터셋에 대해 작업을 진행했으며, 다음 (제2부) 글에서 실제 fine-tuning 프로세스를 수행할 것입니다.","ogImage":{"url":"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png"},"coverImage":"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png","tag":["Tech"],"readingTime":7},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 글에서는 우리만의 모델, LLM (Large Language Model)을 세밀하게 조정하여 자연어 텍스트에서 유효한 SQL 쿼리를 작성할 수 있는 기능을 추가할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"한 단계씩 살펴보겠습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"소개\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"사전 훈련된 모델 선택\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"입력/출력 형식\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"데이터셋 준비\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"정리 작업 진행\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"하위 집합 생성\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"(계속되는 내용은 Part 2에서)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"결론\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"소개\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"요즘, 트랜스포머 기반 모델이 자연어 처리 분야에서 많은 문제를 해결하고 있어요. 잘 알려진 예시로는 GPT, LLAMA, Mistral 등이 있습니다. 이 모델들은 특정 자연어 처리 문제를 해결하기 위해 입력으로 프롬프트를 사용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"사전 학습된 모델 선택\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"미리 훈련된 모델을 사용하여 시작해 보세요. 미리 훈련된 모델의 정의는 무엇일까요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"미리 훈련된 모델은 수천만 개 또는 수십억 개의 토큰을 사용하여 \\\"다음 단어 예측\\\" 목적으로 훈련된 모델입니다. 이 훈련 과정동안, 문장 내 단어의 구조와 의미를 학습합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 작업에서는 미러소프트/파이2 미리 훈련된 모델을 사용할 것입니다. 이 모델은 1.4 조 토큰으로 훈련되었으며, 27 억 개의 파라미터를 갖추고 있습니다. 이 모델은 SLM(작은 언어 모델)로 간주될 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 유형의 미리 훈련된 모델은 앞선 맥락을 기반으로 새로운 토큰을 생성할 수 있는 능력을 갖고 있습니다. 이 모델은 독립적인 질문, QA, 채팅 형식, 그리고 코드 생성과 같은 다양한 용도에 사용될 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 모델을 QA 스타일로 텍스트2SQL 생성을 위해 미세 조정할 예정입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"입력/출력 형식\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"| | |\\n|------------------|----------------------------------|\\n| \", _jsx(_components.strong, {\n        children: \"input\"\n      }), \"        | User question                    |\\n| \", _jsx(_components.strong, {\n        children: \"output\"\n      }), \"       | SQL query                        |\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"질문은 다음과 같습니다: LLM은 사용자 질문에서 어떻게 SQL을 생성할까요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"인간이라도 할 수 없어요. 적어도 테이블 구조에 대한 정보와 샘플 데이터가 필요한데, 그럼에도 불구하고 질문에 대한 SQL 쿼리를 해결할 수 있을 거에요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LLM과 유사하게, 어떤 맥락을 제공해야 해요. 따라서 우리의 입력은 (맥락) + (사용자 질문)이고, LLM이 우리를 위해 SQL을 생성할 거에요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러니 데이터셋 수집 및 준비를 시작해 보고, 그 다음으로 세밀하게 조정해 봐요.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"데이터셋 준비\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"잠시 찾아보니 huggingface의 “gretelai/synthetic_text_to_sql” 데이터셋을 찾았어요. 제가 찾고 있던 작업에 가장 적합한 것 같아요. 데이터셋에 대해 더 많은 정보를 얻으려면 링크를 클릭해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" datasets \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" Dataset, load_dataset\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 데이터셋 불러오고 원치 않는 열 제거하기\"\n        }), \"\\ndataset = load_dataset(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"gretelai/synthetic_text_to_sql\\\"\"\n        }), \") \\\\\\n    .remove_columns([\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain_description'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity_description'\"\n        }), \",\\n                     \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_task_type_description'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_explanation'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_task_type'\"\n        }), \"])\\n\\ndataset\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [\"DatasetDict({\\n    train: Dataset({\\n        features: [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_prompt'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \"],\\n        num_rows: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"100000\"\n        }), \"\\n    })\\n    test: Dataset({\\n        features: [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_prompt'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \"],\\n        num_rows: \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5851\"\n        }), \"\\n    })\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [\"dataset[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'train'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"]\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터셋이 무엇인지 감을 잡기 위해 하나의 샘플을 살펴봅시다. 여기서 우리는 \\\"sql_context,\\\" \\\"sql_prompt,\\\" 그리고 \\\"sql\\\" 필드를 사용할 것입니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"sql_context: 테이블 생성 및 삽입 문장\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"sql_prompt: 사용자 쿼리\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"sql: 대상 쿼리\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(sql_context + sql_prompt)가 입력이 되고, (sql)이 대상 생성이 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5097\"\n        }), \",\\n \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'forestry'\"\n        }), \",\\n \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'single join'\"\n        }), \",\\n \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_prompt'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'각 영업사원이 판매한 총 목재 양을 영업사원별로 정렬하여 나타내시오.'\"\n        }), \",\\n \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"CREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT); INSERT INTO salesperson (salesperson_id, name, region) VALUES (1, 'John Doe', 'North'), (2, 'Jane Smith', 'South'); CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE); INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES (1, 1, 120, '2021-01-01'), (2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');\\\"\"\n        }), \",\\n \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'SELECT salesperson_id, name, SUM(volume) as total_volume FROM timber_sales JOIN salesperson ON timber_sales.salesperson_id = salesperson.salesperson_id GROUP BY salesperson_id, name ORDER BY total_volume DESC;'\"\n        }), \"}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"정리를 해봅시다\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 데이터셋은 합성 데이터입니다. 유효하지 않은 문맥이나 SQL 쿼리를 가질 수 있습니다. 이러한 레코드를 찾아 제거해봅시다. 쓰레기를 넣으면 쓰레기가 나온다는 말이죠.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 조건에 따라 유효한 데이터를 확인할 것입니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"SQL 문맥과 SQL 쿼리는 SQL Lite 데이터베이스에 유효해야 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"테이블은 샘플 레코드를 가져야 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"SQL 쿼리를 실행한 후에 결과를 얻을 수 있어야 합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" sqlite3\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"check_all_tables_have_values\"\n        }), \"(row, debug=\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"False\"\n        }), \"):\\n\\n    # 테이블에 레코드가 있어야 함\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" row[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \"].\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"find\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'INSERT INTO'\"\n        }), \") == -\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \":\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"False\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"try\"\n        }), \":\\n        db = sqlite3.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"connect\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\":memory:\\\"\"\n        }), \")\\n        cur = db.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"cursor\"\n        }), \"()\\n        cur.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"executescript\"\n        }), \"(row[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \"])\\n        res = cur.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"execute\"\n        }), \"(row[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \"]).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchall\"\n        }), \"()\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"debug\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(res)\\n        # \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(res, \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"len\"\n        }), \"(res))\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"len\"\n        }), \"(res) > \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"except\"\n        }), \":\\n        # \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Error while run query\\\"\"\n        }), \")\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"False\"\n        }), \"\\n\\ndataset = dataset.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(lambda x : \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"check_all_tables_have_values\"\n        }), \"(x))\\ndataset\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DatasetDict\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"train\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dataset\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"features\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_prompt'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \"],\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"num_rows\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"53478\"\n        }), \"\\n    })\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"test\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dataset\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"features\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_prompt'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \"],\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"num_rows\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3133\"\n        }), \"\\n    })\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보시다시피 데이터의 약 46%가 제거되었습니다. 이것은 SQL Lite와 호환되지 않거나 데이터가 없을 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"하위 집합 만들기```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그럼,이 초기 실험을 위한 데이터셋이 훨씬 큽니다. 이를 위해 그 중 일부를 만들어 보겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음과 같이 14개 도메인과 3가지 SQL 복잡성 수준으로 데이터셋을 만들 것입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECTED_SQL_COMPLEXITY\"\n        }), \" = [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'basic SQL'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'aggregation'\"\n        }), \",\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'single join'\"\n        }), \"]\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECTED_DOMAINS\"\n        }), \" = [\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"technology\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"sports\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"logistics\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"space\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"energy\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"finance\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"agriculture\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"justice\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"retail\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"media\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"education\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"healthcare\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"fashion\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"music\\\"\"\n        }), \"\\n]\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter_by_sql_task_type_and_domains\"\n        }), \"(row):\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" row[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECTED_SQL_COMPLEXITY\"\n        }), \" \\\\\\n         and row[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"SELECTED_DOMAINS\"\n        }), \"\\n\\ndataset = dataset.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter\"\n        }), \"(lambda x : \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"filter_by_sql_task_type_and_domains\"\n        }), \"(x))\\ndataset\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"DatasetDict\"\n        }), \"({\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"train\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dataset\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"features\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_prompt'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \"],\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"num_rows\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"6713\"\n        }), \"\\n    })\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"test\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Dataset\"\n        }), \"({\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"features\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'id'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'domain'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_complexity'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_prompt'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql_context'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'sql'\"\n        }), \"],\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"num_rows\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"408\"\n        }), \"\\n    })\\n})\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_3.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에는 14개의 도메인 데이터셋이 있으며, 각 도메인은 훈련 데이터에 적어도 300개의 샘플이 있습니다. SQL 복잡성은 \\\"기본 SQL\\\"의 50%, \\\"단일 조인\\\"의 20%, 그리고 \\\"집계\\\"의 30%로 분포됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"(계속, 파트 2로 이어집니다)\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 문서에서는 SLM이 무엇인지 알아보고 fine-tuning을 통해 Text2SQL 작업을 어떻게 해결할 것인지에 대한 아이디어를 얻게 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터셋에 대해 작업을 진행했으며, 다음 (제2부) 글에서 실제 fine-tuning 프로세스를 수행할 것입니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}