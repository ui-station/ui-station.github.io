{"pageProps":{"post":{"title":"Python 정규 표현식을 사용하여 여러 공백을 하나의 공백으로 압축하기","description":"","date":"2024-05-20 15:59","slug":"2024-05-20-CondensingMultipleSpacesIntoOneSpaceUsingPythonRegex","content":"\n\n\n![image](/assets/img/2024-05-20-CondensingMultipleSpacesIntoOneSpaceUsingPythonRegex_0.png)\n\n만약 여러 개의 공백 문자를 하나의 공백 문자로 변환해야 한다면, 이 기사가 여러분을 위한 것입니다.\n\n```js\nx = 'apple   orange  pear     pineapple'\n```\n\n^ 이 문자열에서 단어 사이에 여러 개의 공백이 있습니다. 여러 개의 공백을 하나의 공백으로 압축해야 합니다.\n```\n\n<div class=\"content-ad\"></div>\n\n```js\noutput = 'apple orange pear pineapple'\n```\n\n# 수동 방법\n\n```js\nx = 'apple   orange  pear     pineapple'\n\ndef condense(x):\n    words = x.split(' ')\n    words = [w for w in words if w]\n    return ' '.join(words)\n\nprint(condense(x))\n\n# apple orange pear pineapple\n```\n\n- .split()을 사용하면 `['apple', '', '', 'orange', '', 'pear', '', '', '', '', 'pineapple']` 와 같이 단어가 됩니다.\n- 리스트 내포는 모든 빈 문자열을 필터링하고 [`apple`, `orange`, `pear`, `pineapple`]를 얻습니다.\n- ` ` .join()은 이 4개 단어를 `apple orange pear pineapple`로 결합합니다.\n\n<div class=\"content-ad\"></div>\n\n하지만 이 방법은 다소 수동적입니다. 한 줄의 코드로 정규식을 사용하여 이 문제를 해결할 수 있다는 걸 아셨나요?\n\n# 정규식 방법\n\n```js\nx = 'apple   orange  pear     pineapple'\n\nimport re\nprint(re.sub(' +', ' ', x))\n\n# apple orange pear pineapple\n```\n\n- re.sub은 정규식 ` +`와 일치하는 모든 문자열을 ` `로 바꿉니다.\n- ` +`는 1개 이상의 공백을 포함하는 모든 문자열과 일치합니다.\n- 이는 연속으로 여러 개의 공백이 포함된 모든 경우에 일치합니다.\n- 각각의 경우가 한 개의 공백으로 대체됩니다.\n- 이게 전부입니다.\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n이 내용을 이해하기 쉽고 명확했기를 바랍니다.\n\n# 크리에이터로서 저를 지원하고 싶다면\n\n- 이 이야기에 대해 50번 박수를 치세요\n- 생각을 나누는 댓글을 남겨주세요\n- 이야기에서 가장 마음에 드는 부분을 강조해주세요\n\n<div class=\"content-ad\"></div>\n\n감사합니다! 이런 작은 행동들이 큰 도움이 되어요. 정말 감사드려요!\n\nYouTube: [https://www.youtube.com/@zlliu246](https://www.youtube.com/@zlliu246)\n\nLinkedIn: [https://www.linkedin.com/in/zlliu/](https://www.linkedin.com/in/zlliu/)\n\n나의 이북: [https://zlliu.co/ebooks](https://zlliu.co/ebooks)","ogImage":{"url":"/assets/img/2024-05-20-CondensingMultipleSpacesIntoOneSpaceUsingPythonRegex_0.png"},"coverImage":"/assets/img/2024-05-20-CondensingMultipleSpacesIntoOneSpaceUsingPythonRegex_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-CondensingMultipleSpacesIntoOneSpaceUsingPythonRegex_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"만약 여러 개의 공백 문자를 하나의 공백 문자로 변환해야 한다면, 이 기사가 여러분을 위한 것입니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"x = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'apple   orange  pear     pineapple'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"^ 이 문자열에서 단어 사이에 여러 개의 공백이 있습니다. 여러 개의 공백을 하나의 공백으로 압축해야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n<div class=\\\"content-ad\\\"></div>\\n\\n```js\\noutput = 'apple orange pear pineapple'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"수동 방법\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"x = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'apple   orange  pear     pineapple'\"\n        }), \"\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"condense\"\n        }), \"(x):\\n    words = x.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"split\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"' '\"\n        }), \")\\n    words = [w \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" w \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" words \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \" w]\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"' '\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"join\"\n        }), \"(words)\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"condense\"\n        }), \"(x))\\n\\n# apple orange pear pineapple\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\".split()을 사용하면 \", _jsx(_components.code, {\n          children: \"['apple', '', '', 'orange', '', 'pear', '', '', '', '', 'pineapple']\"\n        }), \" 와 같이 단어가 됩니다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"리스트 내포는 모든 빈 문자열을 필터링하고 [\", _jsx(_components.code, {\n          children: \"apple\"\n        }), \", \", _jsx(_components.code, {\n          children: \"orange\"\n        }), \", \", _jsx(_components.code, {\n          children: \"pear\"\n        }), \", \", _jsx(_components.code, {\n          children: \"pineapple\"\n        }), \"]를 얻습니다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \" \"\n        }), \" .join()은 이 4개 단어를 \", _jsx(_components.code, {\n          children: \"apple orange pear pineapple\"\n        }), \"로 결합합니다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 이 방법은 다소 수동적입니다. 한 줄의 코드로 정규식을 사용하여 이 문제를 해결할 수 있다는 걸 아셨나요?\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"정규식 방법\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"x = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'apple   orange  pear     pineapple'\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" re\\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(re.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"sub\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"' +'\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"' '\"\n        }), \", x))\\n\\n# apple orange pear pineapple\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"re.sub은 정규식 \", _jsx(_components.code, {\n          children: \" +\"\n        }), \"와 일치하는 모든 문자열을 \", _jsx(_components.code, {\n          children: \" \"\n        }), \"로 바꿉니다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \" +\"\n        }), \"는 1개 이상의 공백을 포함하는 모든 문자열과 일치합니다.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이는 연속으로 여러 개의 공백이 포함된 모든 경우에 일치합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"각각의 경우가 한 개의 공백으로 대체됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이게 전부입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"결론\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 내용을 이해하기 쉽고 명확했기를 바랍니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"크리에이터로서 저를 지원하고 싶다면\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이 이야기에 대해 50번 박수를 치세요\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"생각을 나누는 댓글을 남겨주세요\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"이야기에서 가장 마음에 드는 부분을 강조해주세요\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"감사합니다! 이런 작은 행동들이 큰 도움이 되어요. 정말 감사드려요!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"YouTube: \", _jsx(_components.a, {\n        href: \"https://www.youtube.com/@zlliu246\",\n        children: \"https://www.youtube.com/@zlliu246\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"LinkedIn: \", _jsx(_components.a, {\n        href: \"https://www.linkedin.com/in/zlliu/\",\n        children: \"https://www.linkedin.com/in/zlliu/\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"나의 이북: \", _jsx(_components.a, {\n        href: \"https://zlliu.co/ebooks\",\n        children: \"https://zlliu.co/ebooks\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}