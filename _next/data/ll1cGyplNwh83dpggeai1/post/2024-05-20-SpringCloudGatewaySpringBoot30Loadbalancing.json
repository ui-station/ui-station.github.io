{"pageProps":{"post":{"title":"스프링 클라우드 게이트웨이  스프링 부트 30  로드 밸런싱","description":"","date":"2024-05-20 15:39","slug":"2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing","content":"\n\n\n![Spring Cloud Gateway](/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_0.png)\n\nSpring Cloud Gateway는 Spring Boot 애플리케이션에서 API 게이트웨이를 구축하는 강력하고 유연한 솔루션을 제공합니다. 다양한 기능을 갖춘 Spring Cloud Gateway는 라우팅, 요금 제한, 보안 및 장애 관리를 처리할 수 있습니다.\n\n![Spring Cloud Gateway](/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_1.png)\n\n마이크로서비스 아키텍처 시대에는 견고하고 확장 가능한 시스템 구축이 중요합니다. Spring Boot와 Spring Cloud의 발전으로 개발자들은 이전 Netflix Zuul에 의존하지 않고도 견고한 마이크로서비스 기반 애플리케이션을 생성할 수 있는 강력한 도구를 사용할 수 있습니다. 이 블로그 포스트에서는 Spring Boot 3.0과 함께 Spring Cloud Gateway를 사용하여 현대적인 마이크로서비스 아키텍처를 어떻게 만들 수 있는지 살펴보겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\nSpring Boot이 계속 발전함에 따라 더 최신 기술과 모범 사례에 적응하는 것이 중요합니다. Spring Boot 3.0에서는 마이크로서비스를 구축하기 위한 현대적인 솔루션에 중점을 두고 있습니다. Spring WebFlux 기반으로 구축된 강력한 API 게이트웨이인 Spring Cloud Gateway가 그러한 솔루션 중 하나로, 라우팅, 필터링, 로드 밸런싱과 같은 기능을 제공합니다.\n\n게이트웨이를 설명하기 위해 적합한 아키텍처가 필요합니다.\n\n- Eureka 서버: 마이크로서비스를 관리하기 위한 서비스 레지스트리 및 디스커버리 서버입니다. Eureka 서버와 함께 스프링 부트 프로젝트를 생성하세요.\n- Payment MS: 테스트를 위한 사용자 정의 마이크로서비스로, 웹 및 Eureka 클라이언트 종속성 및 설정이 있는 간단한 마이크로서비스입니다.\n- Spring Cloud Gateway: 적절한 마이크로서비스로 요청을 라우팅하는 API 게이트웨이입니다.\n\n아래 종속성을 가진 Spring Boot 애플리케이션을 만들어 보세요. Eureka는 서비스 디스커버리 서버로 사용될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n의존성 테이블을 다음과 같이 변경해보세요:\n\n\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n</dependency>\n\n\n- @EnableEurekaServer 주석을 사용하여 주 클래스에 Eureka 서버를 활성화하세요.\n\n```java\n@SpringBootApplication\n@EnableEurekaServer\npublic class MyEurekaServerApplication {\n```\n\n```java\n public static void main(String[] args) {\n  SpringApplication.run(MyEurekaServerApplication.class, args);\n }\n}\n```\n\n그리고 My application.properties 파일에도 변경을 적용해주세요.\n\n<div class=\"content-ad\"></div>\n\n```bash\n// application.properties\neureka.client.fetch-registry=false\neureka.client.register-with-eureka=false\nserver.port=8761\nspring.application.name=MY-EUREKA-SERVER\n```\n\n아래 종속성을 사용하여 Spring Boot 어플리케이션을 생성하세요.\n\n```js\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n\n```js\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-test</artifactId>\n   <scope>test</scope>\n</dependency>\n```\n\n<div class=\"content-ad\"></div>\n\n서버 포트를 출력하는 REST API를 작성해보세요. 이것은 테스트 중에 호출된 서비스의 어떤 인스턴스인지 식별하는 데 도움이 될 것입니다 [로드 밸런싱]\n\n```java\n@RestController\n@RequestMapping(\"/payment\")\npublic class PayController {\n```\n\n```java\n@Value(\"${server.port}\")\nprivate String serverPort;\n    \n@GetMapping(\"/say\")\npublic String getMethodName() {\n    return new String(\"안녕하세요, Payment MS에서 온 메시지입니다. \"+serverPort);\n}\n```\n\n그리고 Eureka 서버 세부 정보를 추가하고 메인 클래스에 Eureka 클라이언트를 활성화하는 주석을 추가하는 것을 잊지 마세요 (@EnableDiscoveryClient)\n\n<div class=\"content-ad\"></div>\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class PaymentMsApplication {\n \n public static void main(String[] args) {\n  SpringApplication.run(PaymentMsApplication.class, args);\n }\n}\n```\n\n- 그리고 나의 MS를 위한 어플리케이션 프로퍼티\n\n```java\nspring.application.name=PAYMENT-SERVICE\neureka.client.service-url.defaultZone=http://localhost:8761/eureka\nserver.port=9811 (어플리케이션을 실행하기 전에 다른 포트를 사용 중입니다)\neureka.instance.ip-address=localhost\n```\n\n<div class=\"content-ad\"></div>\n\n```md\n<dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n\n```md\n<!--\nhttps://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-gateway -->\n<dependency>\n   <groupId>org.springframework.cloud</groupId>\n   <artifactId>spring-cloud-starter-gateway</artifactId>\n   <version>4.1.2</version>\n</dependency>\n```\n\n그래서 최신 버전(내 경우 3.2.4v)의 스프링 부트 프로젝트를 만들고 위의 종속성을 추가합니다.\n\n- application.yml 파일에 라우팅 구성을 추가하십시오. `service-name` 프로토콜을 사용하여 API 게이트웨이에 서비스 검색을 지시합니다. 두 개의 payment-service 인스턴스가 있으므로 부하 처리가 필요하고 동적으로 처리해야 합니다.\n\n\n<div class=\"content-ad\"></div>\n\n```yaml\nspring:\n  application:\n    name: gateway\n  cloud:\n    gateway:\n      routes:\n        - id: payment-service\n          uri: lb://payment-service\n          predicates:\n            - Path=/payment/**\n```\n\n- API Gateway는 마이크로서비스로도 불리우며 유레카 서버에 등록되어야 합니다. 메인 클래스에 `@EnableDiscoveryClient`를 추가하지 않는 것을 잊지 마세요.\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class ApiGtApplication {\n```\n\n```java\n public static void main(String[] args) {\n  SpringApplication.run(ApiGtApplication.class, args);\n }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 지금 테스트해 보세요!\n\n진행 방법:\n\n- 유레카 서버 실행\n- 포트 9810 및 9811에서 결제 서비스 실행\n- API 게이트웨이 서비스 실행\n\n![이미지](/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_2.png)\n\n<div class=\"content-ad\"></div>\n\n브라우저에서 게이트웨이 엔드포인트를 방문해서 확인해보세요 (http://localhost:8080/payment/say) \n\n/payment은 술어 패턴입니다 — 이 패턴이 발생하면 API 게이트웨이는 요청을 지불 서비스로 라우팅하고 지불 서비스에는 컨트롤러 /payment과 GET 메소드 /say가 있습니다. 이것이 실행되어 응답을 게이트웨이로 반환합니다. 유레카는 API 게이트웨이로 인스턴스 정보를 보내기 위한 것이며 내부 통신을 위한 것이 아닙니다.\n\n독자 여러분의 읽어주셔서 감사합니다. 도움이 되었다면 공유하고 좋아요를 눌러주세요.","ogImage":{"url":"/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_0.png"},"coverImage":"/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_0.png\",\n        alt: \"Spring Cloud Gateway\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spring Cloud Gateway는 Spring Boot 애플리케이션에서 API 게이트웨이를 구축하는 강력하고 유연한 솔루션을 제공합니다. 다양한 기능을 갖춘 Spring Cloud Gateway는 라우팅, 요금 제한, 보안 및 장애 관리를 처리할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_1.png\",\n        alt: \"Spring Cloud Gateway\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마이크로서비스 아키텍처 시대에는 견고하고 확장 가능한 시스템 구축이 중요합니다. Spring Boot와 Spring Cloud의 발전으로 개발자들은 이전 Netflix Zuul에 의존하지 않고도 견고한 마이크로서비스 기반 애플리케이션을 생성할 수 있는 강력한 도구를 사용할 수 있습니다. 이 블로그 포스트에서는 Spring Boot 3.0과 함께 Spring Cloud Gateway를 사용하여 현대적인 마이크로서비스 아키텍처를 어떻게 만들 수 있는지 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spring Boot이 계속 발전함에 따라 더 최신 기술과 모범 사례에 적응하는 것이 중요합니다. Spring Boot 3.0에서는 마이크로서비스를 구축하기 위한 현대적인 솔루션에 중점을 두고 있습니다. Spring WebFlux 기반으로 구축된 강력한 API 게이트웨이인 Spring Cloud Gateway가 그러한 솔루션 중 하나로, 라우팅, 필터링, 로드 밸런싱과 같은 기능을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"게이트웨이를 설명하기 위해 적합한 아키텍처가 필요합니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Eureka 서버: 마이크로서비스를 관리하기 위한 서비스 레지스트리 및 디스커버리 서버입니다. Eureka 서버와 함께 스프링 부트 프로젝트를 생성하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Payment MS: 테스트를 위한 사용자 정의 마이크로서비스로, 웹 및 Eureka 클라이언트 종속성 및 설정이 있는 간단한 마이크로서비스입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Spring Cloud Gateway: 적절한 마이크로서비스로 요청을 라우팅하는 API 게이트웨이입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 종속성을 가진 Spring Boot 애플리케이션을 만들어 보세요. Eureka는 서비스 디스커버리 서버로 사용될 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"의존성 테이블을 다음과 같이 변경해보세요:\"\n    }), \"\\n\", _jsxs(\"dependency\", {\n      children: [_jsx(\"groupId\", {\n        children: \"org.springframework.cloud\"\n      }), _jsx(\"artifactId\", {\n        children: \"spring-cloud-starter-netflix-eureka-server\"\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"@EnableEurekaServer 주석을 사용하여 주 클래스에 Eureka 서버를 활성화하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@SpringBootApplication\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@EnableEurekaServer\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MyEurekaServerApplication\"\n        }), \" {\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"static\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"(String[] args)\"\n        }), \" {\\n  SpringApplication.run(MyEurekaServerApplication.class, args);\\n }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 My application.properties 파일에도 변경을 적용해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"// application.properties\\neureka.client.fetch-registry=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\neureka.client.register-with-eureka=\", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"false\"\n        }), \"\\nserver.port=8761\\nspring.application.name=MY-EUREKA-SERVER\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래 종속성을 사용하여 Spring Boot 어플리케이션을 생성하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<dependency>\\n   \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"org.springframework.boot\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          })]\n        }), \"\\n   \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"spring-boot-starter-web\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          })]\n        }), \"\\n</dependency>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          }), \"\\n   \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"org.springframework.cloud\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"\\n   \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"spring-cloud-starter-netflix-eureka-client\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<dependency>\\n   \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          }), \"org.springframework.boot\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          })]\n        }), \"\\n   \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          }), \"spring-boot-starter-test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          })]\n        }), \"\\n   \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          }), \"test\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"scope\"\n            }), \">\"]\n          })]\n        }), \"\\n</dependency>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"서버 포트를 출력하는 REST API를 작성해보세요. 이것은 테스트 중에 호출된 서비스의 어떤 인스턴스인지 식별하는 데 도움이 될 것입니다 [로드 밸런싱]\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@RestController\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@RequestMapping(\\\"/payment\\\")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PayController\"\n        }), \" {\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Value(\\\"${server.port}\\\")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"private\"\n        }), \" String serverPort;\\n    \\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@GetMapping(\\\"/say\\\")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" String \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"getMethodName\"\n        }), _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"()\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"String\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"안녕하세요, Payment MS에서 온 메시지입니다. \\\"\"\n        }), \"+serverPort);\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 Eureka 서버 세부 정보를 추가하고 메인 클래스에 Eureka 클라이언트를 활성화하는 주석을 추가하는 것을 잊지 마세요 (@EnableDiscoveryClient)\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@SpringBootApplication\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@EnableDiscoveryClient\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"PaymentMsApplication\"\n        }), \" {\\n \\n \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"static\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"(String[] args)\"\n        }), \" {\\n  SpringApplication.run(PaymentMsApplication.class, args);\\n }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"그리고 나의 MS를 위한 어플리케이션 프로퍼티\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [\"spring.application.name=PAYMENT-SERVICE\\neureka.client.service-url.defaultZone=http:\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//localhost:8761/eureka\"\n        }), \"\\nserver.port=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"9811\"\n        }), \" (어플리케이션을 실행하기 전에 다른 포트를 사용 중입니다)\\neureka.instance.ip-address=localhost\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [_jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          })\n        }), \"\\n   \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          })\n        }), \"org.springframework.cloud\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          })\n        }), \"\\n   \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          })\n        }), \"spring-cloud-starter-netflix-eureka-client\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          })\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          })\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [\"<!--\\nhttps://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-gateway -->\\n\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          })\n        }), \"\\n   \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          })\n        }), \"org.springframework.cloud\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"groupId\"\n            }), \">\"]\n          })\n        }), \"\\n   \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          })\n        }), \"spring-cloud-starter-gateway\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"artifactId\"\n            }), \">\"]\n          })\n        }), \"\\n   \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          })\n        }), \"4.1.2\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"version\"\n            }), \">\"]\n          })\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"dependency\"\n            }), \">\"]\n          })\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그래서 최신 버전(내 경우 3.2.4v)의 스프링 부트 프로젝트를 만들고 위의 종속성을 추가합니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"application.yml 파일에 라우팅 구성을 추가하십시오. \", _jsx(_components.code, {\n          children: \"service-name\"\n        }), \" 프로토콜을 사용하여 API 게이트웨이에 서비스 검색을 지시합니다. 두 개의 payment-service 인스턴스가 있으므로 부하 처리가 필요하고 동적으로 처리해야 합니다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spring:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"application:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"gateway\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"cloud:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"gateway:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"routes:\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"payment-service\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"uri:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"lb://payment-service\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"predicates:\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Path=/payment/**\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"API Gateway는 마이크로서비스로도 불리우며 유레카 서버에 등록되어야 합니다. 메인 클래스에 \", _jsx(_components.code, {\n          children: \"@EnableDiscoveryClient\"\n        }), \"를 추가하지 않는 것을 잊지 마세요.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@SpringBootApplication\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@EnableDiscoveryClient\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ApiGtApplication\"\n        }), \" {\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [\" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"static\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"main\"\n        }), _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"(String[] args)\"\n        }), \" {\\n  SpringApplication.run(ApiGtApplication.class, args);\\n }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"지금 테스트해 보세요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"진행 방법:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"유레카 서버 실행\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"포트 9810 및 9811에서 결제 서비스 실행\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"API 게이트웨이 서비스 실행\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-SpringCloudGatewaySpringBoot30Loadbalancing_2.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"브라우저에서 게이트웨이 엔드포인트를 방문해서 확인해보세요 (http://localhost:8080/payment/say)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"/payment은 술어 패턴입니다 — 이 패턴이 발생하면 API 게이트웨이는 요청을 지불 서비스로 라우팅하고 지불 서비스에는 컨트롤러 /payment과 GET 메소드 /say가 있습니다. 이것이 실행되어 응답을 게이트웨이로 반환합니다. 유레카는 API 게이트웨이로 인스턴스 정보를 보내기 위한 것이며 내부 통신을 위한 것이 아닙니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"독자 여러분의 읽어주셔서 감사합니다. 도움이 되었다면 공유하고 좋아요를 눌러주세요.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}