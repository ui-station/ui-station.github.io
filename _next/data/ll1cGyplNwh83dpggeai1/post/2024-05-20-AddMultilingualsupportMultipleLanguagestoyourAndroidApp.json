{"pageProps":{"post":{"title":"당신의 안드로이드 앱에 다국어 지원다국어 추가하기","description":"","date":"2024-05-20 17:37","slug":"2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp","content":"\n\n\n![다국어 지원 이미지](/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_0.png)\n\n여러 언어를 지원하는 것은 애플리케이션을 확장하고 대중에 도달하는 데 중요합니다. 인도의 약 25%와 유럽의 64%의 작업 성인 인구가 다국어를 구사하며 미국도 다국어 구사자가 약 194% 증가했습니다. (출처)\n\n또한, 소비자의 65% 이상이 선호하는 언어로 콘텐츠를 소비하는 것으로 나타나므로 이는 Amazon, WhatsApp, Facebook 등 대부분의 선도적인 애플리케이션에서 이미 제공되는 중요한 기능으로 고려되어야 합니다.\n\n그러니 다국어 세계를 위해 함께 만들어봅시다!\n\n\n<div class=\"content-ad\"></div>\n\n## 1. 문자열 리소스를 체계화하세요.\n\n코드에서 하드코딩된 문자열 값을 사용하지 마세요.\n\n올바르게\n\n```js\nText(stringResources(R.string.follow_me))\n```\n\n<div class=\"content-ad\"></div>\n\nUsing strings.xml, we will have a common place for all our string resources and we can then support multiple languages by adding more strings.xml files.\n\n## 2. Add Multiple Languages\n\n<div class=\"content-ad\"></div>\n\n이미 모든 문자열 리소스를 저장할 수 있는 곳이 있습니다. 이제 모든 문자열 리소스를 다른 지원되는 언어로 번역하기만 하면 됩니다.\n\n```js\n//힌디어 문자열 리소스 파일 예제\n<resources>\n    <string name=\"subscribe_to_sagar_malhotra\">सागर मल्होत्रा की सदस्यता लें</string>\n    <string name=\"language\">हिन्दी</string>\n</resources>\n```\n\n이 작업을 수행하기 위해 \"AndroidLocalize\"라는 Android Studio 플러그인을 사용하고 있습니다.\n\n![이미지](/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_1.png)\n\n<div class=\"content-ad\"></div>\n\n## 3. 언어 변경 트리거\n\n어떤 UI를 사용하더라도(여기서는 ExposedDropDownMenu), 애플리케이션의 로캘을 변경했음을 OS에 알리기 위해 onClick 이벤트를 트리거해야 합니다. 이렇게 하면 OS도 특정 언어의 strings.xml 파일로 전환할 수 있습니다.\n\n```js\nonClick = {\n    // 사용자가 선택한 로캘에 따라 앱 로캘 설정\n    AppCompatDelegate.setApplicationLocales(\n        LocaleListCompat.forLanguageTags(\n            \"hi\"// 힌디어를 위한 ISO 코드\n        )\n    )\n}\n```\n\n<div class=\"content-ad\"></div>\n\n\n귀하는 해당 언어의 ISO-639 코드를 전달하여 OS에 언어 환경 설정 변경을 알릴 필요가 있습니다.\n\n## 3.1 문제 해결\n\n현재 이 방법은 AppCompatActivity에만 작동하므로 귀하의 애플리케이션에 맞지 않을 수도 있습니다. 특정 Activity에 ComponentActivity를 확장하고 있는지 확인하십시오.\n\n```js\nclass MainActivity : AppCompatActivity() { ... }\n```\n\n<div class=\"content-ad\"></div>\n\nAppCompatActivity를 확장한 후에도, 특정 활동을 위해 지원되는 테마를 변경해야 합니다.\n\n```js\n<style name=\"Theme.MultilingualApp\" parent=\"Theme.AppCompat.Light.NoActionBar\" />\n```\n\n## 4. 로케일 설정 저장\n\nAndroid 12 이하 버전에서는 선택한 언어 환경 값을 수동으로 저장하거나 AndroidX가 로케일 환경을 스스로 처리하도록 AndroidManifest에서 이 구성을 사용해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```bash\n<service//Inside application tag\n    android:name=\"androidx.appcompat.app.AppLocalesMetadataHolderService\"\n    android:enabled=\"false\"\n    android:exported=\"false\">\n    <meta-data\n        android:name=\"autoStoreLocales\"\n        android:value=\"true\" />\n</service>\n```\n\n## 5. Android OS Per-App Language Preferences\n\nIn Android 13 and above, the Android OS also supports changing the Per-App Language preference from system settings.\n\n<img src=\"/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_2.png\" />\n\n\n<div class=\"content-ad\"></div>\n\n귀하의 응용 프로그램이 여러 언어도 지원한다는 것을 운영 체계에 알리려면 AndroidManifest 파일에 필요한 구성을 추가하십시오.\n\n```js\n// application 태그에 다음을 추가하세요\nandroid:localeConfig=\"@xml/locale_config\"\n```\n\nlocal_config.xml 파일에 모든 지원하는 언어를 정의하세요.\n\n```js\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<locale-config xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <locale android:name=\"en\" />\n    <locale android:name=\"gu\" />\n    <locale android:name=\"hi\" />\n    <locale android:name=\"ar-AE\" />\n</locale-config>\n```\n\n<div class=\"content-ad\"></div>\n\n이제 앱에서 시스템 설정에서 언어를 변경하는 것도 지원하게 됩니다.\n\n## 6. 활동 재생성 피하기\n\n앱 언어를 변경할 때 활동이 재생성되는 것을 눈치챌 수 있습니다. 이는 로캘을 변경하는 것도 구성 변경의 한 종류이기 때문에 기본적으로 활동이 구성 변경이 발생할 때마다 재생성됩니다.\n\nAndroidManifest를 사용하여 이 기본 동작을 방지할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n// 특정 활동 태그에 다음을 추가하십시오\nandroid:configChanges=\"layoutDirection|locale\"\n\n\n## 비디오:\n\n이 기능이 보다 많은 관객에 도움이 되기를 바라며, 더 많은 유용한 콘텐츠를 위해 저를 팔로우하시기 바랍니다.\n","ogImage":{"url":"/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_0.png"},"coverImage":"/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    div: \"div\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_0.png\",\n        alt: \"다국어 지원 이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여러 언어를 지원하는 것은 애플리케이션을 확장하고 대중에 도달하는 데 중요합니다. 인도의 약 25%와 유럽의 64%의 작업 성인 인구가 다국어를 구사하며 미국도 다국어 구사자가 약 194% 증가했습니다. (출처)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, 소비자의 65% 이상이 선호하는 언어로 콘텐츠를 소비하는 것으로 나타나므로 이는 Amazon, WhatsApp, Facebook 등 대부분의 선도적인 애플리케이션에서 이미 제공되는 중요한 기능으로 고려되어야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그러니 다국어 세계를 위해 함께 만들어봅시다!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 문자열 리소스를 체계화하세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드에서 하드코딩된 문자열 값을 사용하지 마세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"올바르게\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Text\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"stringResources\"\n        }), \"(R.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"string\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"follow_me\"\n        }), \"))\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using strings.xml, we will have a common place for all our string resources and we can then support multiple languages by adding more strings.xml files.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. Add Multiple Languages\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이미 모든 문자열 리소스를 저장할 수 있는 곳이 있습니다. 이제 모든 문자열 리소스를 다른 지원되는 언어로 번역하기만 하면 됩니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//힌디어 문자열 리소스 파일 예제\"\n        }), \"\\n<resources>\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"string\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"subscribe_to_sagar_malhotra\\\"\"\n            }), \">\"]\n          }), \"सागर मल्होत्रा की सदस्यता लें\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"string\"\n            }), \">\"]\n          })]\n        }), \"\\n    \", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"string\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"language\\\"\"\n            }), \">\"]\n          }), \"हिन्दी\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"string\"\n            }), \">\"]\n          })]\n        }), \"\\n</resources>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 작업을 수행하기 위해 \\\"AndroidLocalize\\\"라는 Android Studio 플러그인을 사용하고 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 언어 변경 트리거\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"어떤 UI를 사용하더라도(여기서는 ExposedDropDownMenu), 애플리케이션의 로캘을 변경했음을 OS에 알리기 위해 onClick 이벤트를 트리거해야 합니다. 이렇게 하면 OS도 특정 언어의 strings.xml 파일로 전환할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"onClick = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 사용자가 선택한 로캘에 따라 앱 로캘 설정\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppCompatDelegate\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"setApplicationLocales\"\n        }), \"(\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"LocaleListCompat\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"forLanguageTags\"\n        }), \"(\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"hi\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 힌디어를 위한 ISO 코드\"\n        }), \"\\n        )\\n    )\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"귀하는 해당 언어의 ISO-639 코드를 전달하여 OS에 언어 환경 설정 변경을 알릴 필요가 있습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3.1 문제 해결\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현재 이 방법은 AppCompatActivity에만 작동하므로 귀하의 애플리케이션에 맞지 않을 수도 있습니다. 특정 Activity에 ComponentActivity를 확장하고 있는지 확인하십시오.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MainActivity\"\n        }), \" : \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppCompatActivity\"\n        }), \"() { ... }\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AppCompatActivity를 확장한 후에도, 특정 활동을 위해 지원되는 테마를 변경해야 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<style name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Theme.MultilingualApp\\\"\"\n        }), \" parent=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Theme.AppCompat.Light.NoActionBar\\\"\"\n        }), \" />\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. 로케일 설정 저장\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Android 12 이하 버전에서는 선택한 언어 환경 값을 수동으로 저장하거나 AndroidX가 로케일 환경을 스스로 처리하도록 AndroidManifest에서 이 구성을 사용해야 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-bash\",\n        children: [\"<service//Inside application tag\\n    android:name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"androidx.appcompat.app.AppLocalesMetadataHolderService\\\"\"\n        }), \"\\n    android:enabled=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"false\\\"\"\n        }), \"\\n    android:exported=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"false\\\"\"\n        }), \">\\n    <meta-data\\n        android:name=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"autoStoreLocales\\\"\"\n        }), \"\\n        android:value=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"true\\\"\"\n        }), \" />\\n</service>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. Android OS Per-App Language Preferences\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Android 13 and above, the Android OS also supports changing the Per-App Language preference from system settings.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-20-AddMultilingualsupportMultipleLanguagestoyourAndroidApp_2.png\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"귀하의 응용 프로그램이 여러 언어도 지원한다는 것을 운영 체계에 알리려면 AndroidManifest 파일에 필요한 구성을 추가하십시오.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// application 태그에 다음을 추가하세요\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"android\"\n        }), \":localeConfig=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@xml/locale_config\\\"\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"local_config.xml 파일에 모든 지원하는 언어를 정의하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"<?xml version=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"1.0\\\"\"\n        }), \" encoding=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"utf-8\\\"\"\n        }), \"?>\\n\", _jsxs(_components.span, {\n          className: \"xml\",\n          children: [_jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"locale-config\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"xmlns:android\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"http://schemas.android.com/apk/res/android\\\"\"\n            }), \">\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"locale\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"android:name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"en\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"locale\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"android:name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"gu\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"locale\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"android:name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"hi\\\"\"\n            }), \" />\"]\n          }), \"\\n    \", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"locale\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"android:name\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"\\\"ar-AE\\\"\"\n            }), \" />\"]\n          }), \"\\n\", _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"</\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"locale-config\"\n            }), \">\"]\n          })]\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 앱에서 시스템 설정에서 언어를 변경하는 것도 지원하게 됩니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. 활동 재생성 피하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앱 언어를 변경할 때 활동이 재생성되는 것을 눈치챌 수 있습니다. 이는 로캘을 변경하는 것도 구성 변경의 한 종류이기 때문에 기본적으로 활동이 구성 변경이 발생할 때마다 재생성됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AndroidManifest를 사용하여 이 기본 동작을 방지할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"// 특정 활동 태그에 다음을 추가하십시오\\nandroid\", _jsx(_components.div, {}), \"=\\\"layoutDirection|locale\\\"\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"비디오:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 기능이 보다 많은 관객에 도움이 되기를 바라며, 더 많은 유용한 콘텐츠를 위해 저를 팔로우하시기 바랍니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}