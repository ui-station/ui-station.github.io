{"pageProps":{"post":{"title":"YouTube 데이터 파이프라인 구축하기 Docker 컨테이너에서 Airflow 사용하기","description":"","date":"2024-05-18 18:03","slug":"2024-05-18-YoutubeDataPipelineusingAirflowinDockerContainer","content":"\n\n그게 많은 양이겠죠! 조금씩 나눠서 살펴봐요.\n\n![YoutubeDataPipeline](/assets/img/2024-05-18-YoutubeDataPipelineusingAirflowinDockerContainer_0.png)\n\n## 사용 사례: —\n\n상상해봐요! 성장하는 YouTube 채널을 운영하는 콘텐츠 크리에이터라고 상상해봐요. 시청자들의 댓글과 답글을 통해 시청자를 이해하는 것은 귀중한 통찰력을 제공할 수 있어요. 그러나 수많은 동영상의 댓글을 수동으로 분류하는 것은 지칠 수 있죠. 이 프로세스를 자동화할 수 있는 방법이 있다면 어떨까요?\n\n<div class=\"content-ad\"></div>\n\n## 제안된 해결책: —\n\n위의 그림을 보시면, YouTube 비디오에서 댓글과 답글을 추출하기 위한 자동화된 솔루션을 안내해 드리겠습니다. 이 과정에는 여러 가지 주요 구성 요소가 포함됩니다:\n\n— YouTube 데이터 API용 Python 라이브러리: YouTube 데이터 API와 상호 작용하기 위해 Python 라이브러리를 사용하여 댓글과 답글을 프로그래밍 방식으로 가져올 수 있습니다.\n\n— 작업 관리를 위한 Airflow: 데이터 추출 및 처리 작업을 체계적으로 관리하기 위해 Apache Airflow를 Docker 컨테이너 내에서 사용할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n- 데이터 저장을 위한 AWS S3: 마지막으로, boto3 라이브러리를 사용하여 처리된 데이터를 AWS S3에 저장하게 됩니다. 나중에 쉽게 액세스하고 분석할 수 있습니다.\n\n이 솔루션은 추출 프로세스를 자동화하는 데 그치지 않고 데이터가 구성되어 안전하게 저장되어 나중에 깊이 있는 분석을 위해 준비되어 있음을 보장합니다. 이제 이 워크플로우를 설정하고 실행하는 자세한 내용을 살펴보겠습니다.\n\n## 구현\n\n구현은 주로 두 가지 작업으로 구성되어 있습니다. 첫 번째는 인프라 구축, 두 번째는 코드 작업입니다. 그래서 이제 인프라 설정을 먼저 살펴보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n도커 데스크톱을 설치해보세요 — https://www.docker.com/get-started/\n\n머신에 도커를 설치한 후에는 다음 명령어를 확인하여 설치가 성공적으로 이루어졌는지 확인하세요.\n\n```js\ndocker --version\nDocker version 20.10.23, build 7155243\n```\n\n최신 apache/airflow 이미지를 받아보세요\n\n<div class=\"content-ad\"></div>\n\n```sh\n도커 pull apache/airflow\n```\n\n다음 명령어를 사용하여 아파치 에어플로우 컨테이너를 시작하세요.\n\n```sh\n도커 run -p 8080:8080 -v /Users/local_user/airflow/dags:/opt/airflow/dags -v /Users/local_user/airflow/creds:/home/airflow/.aws -d apache/airflow standalone\n```\n\nAWS 자격 증명을 생성하여 원격 s3 버킷과 통신하여 날짜를 쓸 수 있습니다. 다음 링크를 통해 생성하세요 — 루트 사용자를 위한 액세스 키 생성하기\n```\n\n<div class=\"content-ad\"></div>\n\n```json\nconfig\n\n```json\n[default]\nregion = ap-south-1\n```\n\ncredentials\n\n```json\n[default]\naws_access_key_id = AKIB******AXPCMO\naws_secret_access_key = 4D7HkaIBsqu***********+0AT2a8j\n```\n\n<div class=\"content-ad\"></div>\n\n지역 사용자의 경우 두 파일을 로컬 머신의 /Users/local_user/airflow/creds/ 폴더로 복사해주세요. 이렇게 함으로써 이 파일들이 컨테이너에서 /home/airflow/.aws/ 경로에 마운트되도록 할 수 있습니다.\n\n도커 데스크톱 애플리케이션을 열고 Airflow 컨테이너를 선택해주세요. 컨테이너 내에서 standalone_admin_password.txt 파일을 찾아주세요. 이 파일을 열고 Airflow 포털에 로그인하기 위한 비밀번호를 복사해주세요.\n\n![이미지](/assets/img/2024-05-18-YoutubeDataPipelineusingAirflowinDockerContainer_1.png)\n\n웹 브라우저를 열고 `http://localhost:8080` 주소로 이동해주세요. username에 admin을 입력하고 이전 단계에서 복사한 비밀번호로 로그인해주세요.\n\n<div class=\"content-ad\"></div>\n\n`aws_write_utility.py` 파일을 만들 때 평소처럼 진행하시면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n```js\nimport boto3\nimport json\nimport uuid\n\ndef write_json_to_s3(json_data, bucket_name, key_name):\n\n    # S3 클라이언트 초기화\n    s3 = boto3.client('s3')\n    \n    # JSON 데이터를 바이트로 변환\n    json_bytes = json.dumps(json_data).encode('utf-8')\n    \n    # JSON 데이터를 S3에 쓰기\n    s3.put_object(Bucket=bucket_name, Key=key_name, Body=json_bytes)\n\n\ndef generate_uuid():\n    \"\"\"UUID와 유사한 문자열 생성.\"\"\"\n    return str(uuid.uuid4())\n```\n\nyoutube_comments.py\n\n```js\n# -*- coding: utf-8 -*-\n\n# youtube.commentThreads.list를 위한 샘플 Python 코드\n# 이 코드 샘플을 로컬에서 실행하는 방법은 다음 링크를 참고하세요:\n# https://developers.google.com/explorer-help/code-samples#python\n\nimport os\n\nimport googleapiclient.discovery\nimport aws_write_utility\nfrom aws_write_utility import write_json_to_s3\n\ndef start_process():\n    # 로컬에서 실행 시 OAuthlib의 HTTPS 확인 비활성화\n    # 제품 환경에서는 이 옵션을 활성화하지 마세요.\n    os.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n\n    api_service_name = \"youtube\"\n    api_version = \"v3\"\n    DEVELOPER_KEY = \"AIzaS*****************PiwBdaP_IE\"\n\n    youtube = googleapiclient.discovery.build(\n        api_service_name, api_version, developerKey=DEVELOPER_KEY)\n\n    request = youtube.commentThreads().list(\n        part=\"snippet,replies\",\n        videoId=\"r_K*****PKU\"\n    )\n    response = request.execute()\n\n    process_comments(response)\n\n\ndef process_comments(response_items):\n\n    # 예시 S3 버킷 및 키 이름\n    bucket_name = 'youtube-comments-analysis'\n    key_name = 'data/{}.json'.format(aws_write_utility.generate_uuid())\n\n    comments = []\n    for comment in response_items['items']:\n        author = comment['snippet']['topLevelComment']['snippet']['authorDisplayName']\n        comment_text = comment['snippet']['topLevelComment']['snippet']['textOriginal']\n        publish_time = comment['snippet']['topLevelComment']['snippet']['publishedAt']\n        comment_info = {'author': author, 'comment': comment_text, 'published_at': publish_time}\n        comments.append(comment_info)\n    print(f'총 {len(comments)}개의 댓글 처리 완료.')\n    write_json_to_s3(comments, bucket_name, key_name)\n```\n\nyoutube_dag.py\n\n\n<div class=\"content-ad\"></div>\n\n```python\nfrom datetime import datetime, timedelta\nfrom airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\nfrom youtube_comments import start_process\n\n# 기본 인수 정의\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'start_date': datetime(2024, 5, 16),\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5),\n}\n\n# DAG 객체 생성\ndag = DAG(\n    'youtube_python_operator_dag',\n    default_args=default_args,\n    description='Python 함수를 호출하는 간단한 DAG',\n    schedule_interval=timedelta(days=1),\n)\n\n# PythonOperator 작업 생성\npython_task = PythonOperator(\n    task_id='my_python_task',\n    python_callable=start_process,\n    dag=dag,\n)\n\n# 작업 간 의존성 정의\npython_task\n\n# DAG 등록\ndag\n```\n\n위의 .py 파일을 로컬 머신의 /Users/local_user/airflow/dags로 복사하세요. 이렇게 함으로써 컨테이너 내의 경로 /opt/airflow/dags로 마운트됩니다.\n\n좋아요!!\n\n이제 Airflow에서 DAG 페이지를 새로고침하세요. 위의 DAG가 표시될 것입니다. 실행해보고 문제가 있는지 로그를 확인해보세요. 녹색으로 변하면 작업이 완료된 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n이 구현은 AWS EC2 인스턴스에 Airflow를 설정하여 수행할 수도 있습니다.","ogImage":{"url":"/assets/img/2024-05-18-YoutubeDataPipelineusingAirflowinDockerContainer_0.png"},"coverImage":"/assets/img/2024-05-18-YoutubeDataPipelineusingAirflowinDockerContainer_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"그게 많은 양이겠죠! 조금씩 나눠서 살펴봐요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-YoutubeDataPipelineusingAirflowinDockerContainer_0.png\",\n        alt: \"YoutubeDataPipeline\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"사용 사례: —\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"상상해봐요! 성장하는 YouTube 채널을 운영하는 콘텐츠 크리에이터라고 상상해봐요. 시청자들의 댓글과 답글을 통해 시청자를 이해하는 것은 귀중한 통찰력을 제공할 수 있어요. 그러나 수많은 동영상의 댓글을 수동으로 분류하는 것은 지칠 수 있죠. 이 프로세스를 자동화할 수 있는 방법이 있다면 어떨까요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"제안된 해결책: —\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 그림을 보시면, YouTube 비디오에서 댓글과 답글을 추출하기 위한 자동화된 솔루션을 안내해 드리겠습니다. 이 과정에는 여러 가지 주요 구성 요소가 포함됩니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"— YouTube 데이터 API용 Python 라이브러리: YouTube 데이터 API와 상호 작용하기 위해 Python 라이브러리를 사용하여 댓글과 답글을 프로그래밍 방식으로 가져올 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"— 작업 관리를 위한 Airflow: 데이터 추출 및 처리 작업을 체계적으로 관리하기 위해 Apache Airflow를 Docker 컨테이너 내에서 사용할 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"데이터 저장을 위한 AWS S3: 마지막으로, boto3 라이브러리를 사용하여 처리된 데이터를 AWS S3에 저장하게 됩니다. 나중에 쉽게 액세스하고 분석할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 솔루션은 추출 프로세스를 자동화하는 데 그치지 않고 데이터가 구성되어 안전하게 저장되어 나중에 깊이 있는 분석을 위해 준비되어 있음을 보장합니다. 이제 이 워크플로우를 설정하고 실행하는 자세한 내용을 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"구현\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구현은 주로 두 가지 작업으로 구성되어 있습니다. 첫 번째는 인프라 구축, 두 번째는 코드 작업입니다. 그래서 이제 인프라 설정을 먼저 살펴보겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"도커 데스크톱을 설치해보세요 — https://www.docker.com/get-started/\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"머신에 도커를 설치한 후에는 다음 명령어를 확인하여 설치가 성공적으로 이루어졌는지 확인하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"docker --version\\n\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Docker\"\n        }), \" version \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"20.10\"\n        }), _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \".23\"\n        }), \", build \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"7155243\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"최신 apache/airflow 이미지를 받아보세요\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-sh\",\n        children: \"도커 pull apache/airflow\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 명령어를 사용하여 아파치 에어플로우 컨테이너를 시작하세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-sh\",\n        children: \"도커 run -p 8080:8080 -v /Users/local_user/airflow/dags:/opt/airflow/dags -v /Users/local_user/airflow/creds:/home/airflow/.aws -d apache/airflow standalone\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"AWS 자격 증명을 생성하여 원격 s3 버킷과 통신하여 날짜를 쓸 수 있습니다. 다음 링크를 통해 생성하세요 — 루트 사용자를 위한 액세스 키 생성하기\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\n<div class=\\\"content-ad\\\"></div>\\n\\n```json\\nconfig\\n\\n```json\\n[default]\\nregion = ap-south-1\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"credentials\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), \"default\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), \"\\naws_access_key_id = AKIB******AXPCMO\\naws_secret_access_key = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"4\"\n        }), \"D7HkaIBsqu***********+\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"AT2a8j\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"지역 사용자의 경우 두 파일을 로컬 머신의 /Users/local_user/airflow/creds/ 폴더로 복사해주세요. 이렇게 함으로써 이 파일들이 컨테이너에서 /home/airflow/.aws/ 경로에 마운트되도록 할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"도커 데스크톱 애플리케이션을 열고 Airflow 컨테이너를 선택해주세요. 컨테이너 내에서 standalone_admin_password.txt 파일을 찾아주세요. 이 파일을 열고 Airflow 포털에 로그인하기 위한 비밀번호를 복사해주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-YoutubeDataPipelineusingAirflowinDockerContainer_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"웹 브라우저를 열고 \", _jsx(_components.code, {\n        children: \"http://localhost:8080\"\n      }), \" 주소로 이동해주세요. username에 admin을 입력하고 이전 단계에서 복사한 비밀번호로 로그인해주세요.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"aws_write_utility.py\"\n      }), \" 파일을 만들 때 평소처럼 진행하시면 됩니다.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" boto3\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" json\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" uuid\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"write_json_to_s3\"\n        }), \"(json_data, bucket_name, key_name):\\n\\n    # \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"S3\"\n        }), \" 클라이언트 초기화\\n    s3 = boto3.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"client\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'s3'\"\n        }), \")\\n    \\n    # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \" 데이터를 바이트로 변환\\n    json_bytes = json.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"dumps\"\n        }), \"(json_data).\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"encode\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'utf-8'\"\n        }), \")\\n    \\n    # \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JSON\"\n        }), \" 데이터를 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"S3\"\n        }), \"에 쓰기\\n    s3.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"put_object\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Bucket\"\n        }), \"=bucket_name, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Key\"\n        }), \"=key_name, \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Body\"\n        }), \"=json_bytes)\\n\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_uuid\"\n        }), \"():\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"UUID와 유사한 문자열 생성.\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"\\\"\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"str\"\n        }), \"(uuid.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"uuid4\"\n        }), \"())\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"youtube_comments.py\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# -*- \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"coding\"\n        }), \": utf-\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"8\"\n        }), \" -*-\\n\\n# youtube.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"commentThreads\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"list\"\n        }), \"를 위한 샘플 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Python\"\n        }), \" 코드\\n# 이 코드 샘플을 로컬에서 실행하는 방법은 다음 링크를 참고하세요:\\n# \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"https\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//developers.google.com/explorer-help/code-samples#python\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" os\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" googleapiclient.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"discovery\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" aws_write_utility\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" aws_write_utility \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" write_json_to_s3\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"start_process\"\n        }), \"():\\n    # 로컬에서 실행 시 \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"OAuthlib\"\n        }), \"의 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"HTTPS\"\n        }), \" 확인 비활성화\\n    # 제품 환경에서는 이 옵션을 활성화하지 마세요.\\n    os.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"environ\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"OAUTHLIB_INSECURE_TRANSPORT\\\"\"\n        }), \"] = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"1\\\"\"\n        }), \"\\n\\n    api_service_name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"youtube\\\"\"\n        }), \"\\n    api_version = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"v3\\\"\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DEVELOPER_KEY\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"AIzaS*****************PiwBdaP_IE\\\"\"\n        }), \"\\n\\n    youtube = googleapiclient.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"discovery\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"build\"\n        }), \"(\\n        api_service_name, api_version, developerKey=\", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"DEVELOPER_KEY\"\n        }), \")\\n\\n    request = youtube.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"commentThreads\"\n        }), \"().\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"list\"\n        }), \"(\\n        part=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"snippet,replies\\\"\"\n        }), \",\\n        videoId=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"r_K*****PKU\\\"\"\n        }), \"\\n    )\\n    response = request.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"execute\"\n        }), \"()\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"process_comments\"\n        }), \"(response)\\n\\n\\ndef \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"process_comments\"\n        }), \"(response_items):\\n\\n    # 예시 \", _jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"S3\"\n        }), \" 버킷 및 키 이름\\n    bucket_name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'youtube-comments-analysis'\"\n        }), \"\\n    key_name = \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'data/{}.json'\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"format\"\n        }), \"(aws_write_utility.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"generate_uuid\"\n        }), \"())\\n\\n    comments = []\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"for\"\n        }), \" comment \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \" response_items[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'items'\"\n        }), \"]:\\n        author = comment[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'snippet'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'topLevelComment'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'snippet'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'authorDisplayName'\"\n        }), \"]\\n        comment_text = comment[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'snippet'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'topLevelComment'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'snippet'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'textOriginal'\"\n        }), \"]\\n        publish_time = comment[\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'snippet'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'topLevelComment'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'snippet'\"\n        }), \"][\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'publishedAt'\"\n        }), \"]\\n        comment_info = {\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'author'\"\n        }), \": author, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'comment'\"\n        }), \": comment_text, \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'published_at'\"\n        }), \": publish_time}\\n        comments.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"append\"\n        }), \"(comment_info)\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"print\"\n        }), \"(f\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'총 {len(comments)}개의 댓글 처리 완료.'\"\n        }), \")\\n    \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"write_json_to_s3\"\n        }), \"(comments, bucket_name, key_name)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"youtube_dag.py\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-python\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" datetime \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" datetime, timedelta\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" airflow \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" DAG\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" airflow.operators.python_operator \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" PythonOperator\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" youtube_comments \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" start_process\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 기본 인수 정의\"\n        }), \"\\ndefault_args = {\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'owner'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'airflow'\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'depends_on_past'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"False\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'start_date'\"\n        }), \": datetime(\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"2024\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"16\"\n        }), \"),\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'email_on_failure'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"False\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'email_on_retry'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"False\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'retries'\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'retry_delay'\"\n        }), \": timedelta(minutes=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"5\"\n        }), \"),\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# DAG 객체 생성\"\n        }), \"\\ndag = DAG(\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'youtube_python_operator_dag'\"\n        }), \",\\n    default_args=default_args,\\n    description=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Python 함수를 호출하는 간단한 DAG'\"\n        }), \",\\n    schedule_interval=timedelta(days=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"),\\n)\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# PythonOperator 작업 생성\"\n        }), \"\\npython_task = PythonOperator(\\n    task_id=\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'my_python_task'\"\n        }), \",\\n    python_callable=start_process,\\n    dag=dag,\\n)\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 작업 간 의존성 정의\"\n        }), \"\\npython_task\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# DAG 등록\"\n        }), \"\\ndag\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위의 .py 파일을 로컬 머신의 /Users/local_user/airflow/dags로 복사하세요. 이렇게 함으로써 컨테이너 내의 경로 /opt/airflow/dags로 마운트됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"좋아요!!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 Airflow에서 DAG 페이지를 새로고침하세요. 위의 DAG가 표시될 것입니다. 실행해보고 문제가 있는지 로그를 확인해보세요. 녹색으로 변하면 작업이 완료된 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 구현은 AWS EC2 인스턴스에 Airflow를 설정하여 수행할 수도 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}