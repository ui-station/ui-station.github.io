{"pageProps":{"post":{"title":"리액트 네이티브에서의 애니메이션으로 구현한 타이핑 효과의 매력","description":"","date":"2024-05-20 16:23","slug":"2024-05-20-TheMagicofAnimatedTypingTransitioninReactNative","content":"\n\n제 웹사이트에 방문해주셔서 감사합니다!\n\n![Click Here](https://miro.medium.com/v2/resize:fit:852/1*nUVr8lekbEbpfkq53IZ2fQ.gif)\n\n당신의 React Native 앱의 사용자 경험에 몇 가지 풍미를 더하고 싶나요? 애니메이션된 타자 효과의 매료되는 세계로 빠져들어보세요! 이 글에서는 글자가 한 글자씩 나타나는 화려한 애니메이션 효과를 생성하는 방법을 살펴볼 것입니다. 이 애니메이션은 사용자에게 매혹적인 타자 경험을 제공합니다.\n\n이 매혹적인 효과를 어떻게 달성하는지 단계별로 코드를 자세히 살펴보면서 시작해봅시다.\n\n<div class=\"content-ad\"></div>\n\n- 초기 설정: 필요한 모듈을 가져와 컴포넌트의 props를 정의하는 것으로 시작합니다.\n- 상태 관리: 컴포넌트는 React 훅 (useState 및 useRef)을 사용하여 상태와 참조를 관리합니다. text 상태는 현재 표시된 텍스트를 보유하고, completed는 입력이 완료되었는지를 나타내며, cursorColor는 커서 표시 여부를 관리합니다. 또한 textIndex를 추적하여 다음에 표시할 문자를 파악합니다.\n- 스타일링: StyleSheet.create를 사용하여 텍스트의 모양을 사용자 정의하는 스타일을 정의합니다.\n- 타이핑 애니메이션: typingAnimation 함수는 주요 애니메이션 논리를 처리합니다. text prop에서 문자를 순차적으로 추가하여 입력하는 것을 모방하여 현재 표시된 텍스트에 문자를 추가합니다. 부드러운 애니메이션을 위해 재귀적 setTimeout이 사용됩니다.\n- 커서 애니메이션: cursorAnimation 함수는 깜빡이는 효과를 만들기 위해 커서의 색상을 토글합니다.\n- 효과 및 정리: useEffect 훅은 애니메이션 타이밍과 정리를 관리합니다. 컴포넌트가 마운트될 때 타이핑 애니메이션 및 커서 깜박임을 시작하고 언마운트할 때 타이머를 정리합니다.\n\n이제 앱에서 이 컴포넌트를 생성하는 방법을 살펴보겠습니다:\n\n```js\nimport React, { useRef, useState, useEffect } from 'react';\nimport { StyleSheet, Text } from 'react-native';\n\ninterface AnimatedTypingProps {\n  text: string;\n  onComplete?: () => void;\n}\n\nconst AnimatedTyping: React.FC<AnimatedTypingProps> = (props) => {\n  // 코드 생략\n\nexport default AnimatedTyping;\n```\n\n컴포넌트에서 AnimatedTyping을 가져와 원하는 텍스트 및 onComplete 콜백과 함께 사용하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n```jsx\n<AnimatedTyping\n    text={query}\n    onComplete={handleAnimationDefaultComplete}\n/>\n```\n\n저희와 함께 이 자극적인 애니메이션 기술을 살펴봐 주셔서 감사합니다! LinkedIn에서 의견과 피드백을 남겨주시면 감사하겠습니다. 연락해서 경험을 공유해주세요. 즐거운 코딩하세요!\n\n# 매우 쉽게 설명하기 🚀\n\nIn Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 떠나시기 전에:```\n\n<div class=\"content-ad\"></div>\n\n- 저자를 응원하고 팔로우하기 잊지 마세요! 👏️️\n- 저희를 팔로우하세요: X | LinkedIn | YouTube | Discord | 뉴스레터\n- 다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed\n- 알고리즘 콘텐츠를 다루도록 강요하는 블로깅 플랫폼에 지쳤나요? Differ를 시도해보세요\n- PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요","ogImage":{"url":"/assets/img/2024-05-20-TheMagicofAnimatedTypingTransitioninReactNative_0.png"},"coverImage":"/assets/img/2024-05-20-TheMagicofAnimatedTypingTransitioninReactNative_0.png","tag":["Tech"],"readingTime":2},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"제 웹사이트에 방문해주셔서 감사합니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://miro.medium.com/v2/resize:fit:852/1*nUVr8lekbEbpfkq53IZ2fQ.gif\",\n        alt: \"Click Here\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"당신의 React Native 앱의 사용자 경험에 몇 가지 풍미를 더하고 싶나요? 애니메이션된 타자 효과의 매료되는 세계로 빠져들어보세요! 이 글에서는 글자가 한 글자씩 나타나는 화려한 애니메이션 효과를 생성하는 방법을 살펴볼 것입니다. 이 애니메이션은 사용자에게 매혹적인 타자 경험을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 매혹적인 효과를 어떻게 달성하는지 단계별로 코드를 자세히 살펴보면서 시작해봅시다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"초기 설정: 필요한 모듈을 가져와 컴포넌트의 props를 정의하는 것으로 시작합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"상태 관리: 컴포넌트는 React 훅 (useState 및 useRef)을 사용하여 상태와 참조를 관리합니다. text 상태는 현재 표시된 텍스트를 보유하고, completed는 입력이 완료되었는지를 나타내며, cursorColor는 커서 표시 여부를 관리합니다. 또한 textIndex를 추적하여 다음에 표시할 문자를 파악합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"스타일링: StyleSheet.create를 사용하여 텍스트의 모양을 사용자 정의하는 스타일을 정의합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"타이핑 애니메이션: typingAnimation 함수는 주요 애니메이션 논리를 처리합니다. text prop에서 문자를 순차적으로 추가하여 입력하는 것을 모방하여 현재 표시된 텍스트에 문자를 추가합니다. 부드러운 애니메이션을 위해 재귀적 setTimeout이 사용됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"커서 애니메이션: cursorAnimation 함수는 깜빡이는 효과를 만들기 위해 커서의 색상을 토글합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"효과 및 정리: useEffect 훅은 애니메이션 타이밍과 정리를 관리합니다. 컴포넌트가 마운트될 때 타이핑 애니메이션 및 커서 깜박임을 시작하고 언마운트할 때 타이머를 정리합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 앱에서 이 컴포넌트를 생성하는 방법을 살펴보겠습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \", { useRef, useState, useEffect } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react'\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"StyleSheet\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Text\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'react-native'\"\n        }), \";\\n\\ninterface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnimatedTypingProps\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"text\"\n        }), \": string;\\n  onComplete?: \", _jsx(_components.span, {\n          className: \"hljs-function\",\n          children: \"() =>\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"void\"\n        }), \";\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnimatedTyping\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"React\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"FC\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnimatedTypingProps\"\n        }), \"> = \", _jsxs(_components.span, {\n          className: \"hljs-function\",\n          children: [\"(\", _jsx(_components.span, {\n            className: \"hljs-params\",\n            children: \"props\"\n          }), \") =>\"]\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 코드 생략\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnimatedTyping\"\n        }), \";\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컴포넌트에서 AnimatedTyping을 가져와 원하는 텍스트 및 onComplete 콜백과 함께 사용하면 됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-jsx\",\n        children: [\"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AnimatedTyping\"\n        }), \"\\n    text={query}\\n    onComplete={handleAnimationDefaultComplete}\\n/>\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저희와 함께 이 자극적인 애니메이션 기술을 살펴봐 주셔서 감사합니다! LinkedIn에서 의견과 피드백을 남겨주시면 감사하겠습니다. 연락해서 경험을 공유해주세요. 즐거운 코딩하세요!\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"매우 쉽게 설명하기 🚀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In Plain English 커뮤니티의 일원이 되어 주셔서 감사합니다! 떠나시기 전에:```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"저자를 응원하고 팔로우하기 잊지 마세요! 👏️️\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"저희를 팔로우하세요: X | LinkedIn | YouTube | Discord | 뉴스레터\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"다른 플랫폼에서도 만나보세요: Stackademic | CoFeed | Venture | Cubed\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"알고리즘 콘텐츠를 다루도록 강요하는 블로깅 플랫폼에 지쳤나요? Differ를 시도해보세요\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PlainEnglish.io에서 더 많은 콘텐츠를 만나보세요\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}