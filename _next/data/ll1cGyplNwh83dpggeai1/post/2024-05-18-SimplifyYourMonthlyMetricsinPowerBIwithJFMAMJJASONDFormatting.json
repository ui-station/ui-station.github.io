{"pageProps":{"post":{"title":"파워 BI에서 JFMAMJJASOND 형식으로 매월 메트릭을 간편하게 만들어보세요","description":"","date":"2024-05-18 17:53","slug":"2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting","content":"\n\n## 이 문서는 월별 메트릭 보고서를 시각적으로 매력적으로 만드는 방법을 안내합니다. 이를 위해 월 이름을 약어로 변환하여 더 깔끔한 모양을 만들어봅시다.\n\n## Metrics vs. KPIs\n\n![이미지](/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_0.png)\n\n메트릭이란 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n메트릭(Metric)은 특정 활동을 측정함으로써 비즈니스 성과를 추적하는 방법입니다. 목표에 얼마나 가까운지를 보여주는 점수표와 같은 역할을 합니다. 전닻 활동에서 다운로드 횟수부터 새로운 리드가 영업으로 이어지는 횟수까지 거의 모든 것을 측정할 수 있습니다.\n\nKPI란 무엇인가요?\n\nKPI(Key Performance Indicator)는 메트릭과 유사하게 측정 가능한 값에 관련된 지표입니다. 그러나 KPI는 한 발짝 더 나아갑니다. 이러한 측정을 비즈니스의 특정 전략적 목표와 연결합니다. KPI는 메트릭이 이러한 대표적 목표 달성을 향해 어떻게 추적되는지 알려주는 기준으로 생각할 수 있습니다. 예를 들어, KPI는 시장 점유율을 어떤 비율로 증가시키는 것일 수 있고, 추적하는 메트릭(예: 영업 수치)이 목표에 부합하는지 여부를 보여줍니다.\n\n이들은 어떻게 관련되어 있나요?\n\n<div class=\"content-ad\"></div>\n\n피라미드를 상상해보세요. 피라미드의 바닥은 메트릭으로 이루어져 있습니다. 이는 추적하는 모든 개별 측정값입니다. 이러한 메트릭은 그 다음으로 가는 피라미드 위쪽의 구성 요소인 KPI로 전달됩니다. KPI는 그러한 메트릭을 가져와 구체적인 목표에 연결합니다. 마지막으로, 피라미드의 꼭대기에는 전반적인 비즈니스 목표가 있습니다. 따라서 메트릭은 기초를 제공하고, KPI는 그러한 측정값에 목적을 부여하며, 둘 다 함께 작동하여 큰 그림 목표를 달성하는 데 도움이 됩니다.\n\n참고:\n\n이 문서는 월간 메트릭을 JFMAMJJASOND 약어를 사용하여 간단하고 깔끔한 형식으로 쉽게 변환하는 방법을 안내합니다. 4가지 쉬운 단계로 나눠 설명할 것입니다.\n\n![이미지](/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_1.png)\n\n<div class=\"content-ad\"></div>\n\n단계 1: 월 번호 추출하기\n\n테이블에 새 열을 추가하고 다음 공식을 입력하여 날짜 열에서 숫자 월 값을 추출하십시오. 월 약자를 나중에 날짜순으로 정렬할 때 이 월 번호가 유용합니다:\n\n```js\nMonthNumber = MONTH('Table1'[YourDateColumn])\n```\n\n단계 2: 월 이름 추출하기\n\n<div class=\"content-ad\"></div>\n\n날짜 열에서 전체 월 이름을 추출하세요. 나중에 이러한 이름을 해당하는 JFMAMJJASOND 약어로 변환할 것입니다. 이를 위해 다른 계산 열을 추가하고 다음 수식을 사용하세요:\n\n```js\nMonthNameLong = FORMAT('Table1'[YourDateColumn], \"MMMM\")\n```\n\n단계 3: 월 이름을 약어로 변환\n\n전체 월 이름을 JFMAMJJASOND 약어로 변환하고 정렬 문제를 피하기 위해 세 번째 계산 열을 만드세요. 요렇게 합니다: 중복 약어가 있는 월에 대해 첫 글자 뒤에 공백을 추가해야 합니다 (예: 'January'는 'J', 'June'는 'J ' (한 칸 띄우기), 'July'는 'J ' (두 칸 띄우기)로 변환). 이렇게 하면 정확한 정렬을 보장할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n다음 SWITCH 문은 이 작업을 수행합니다:\n\n```js\nMonthAbbr = \nSWITCH(\n  Table1[MonthNameLong],\n  \"January\", \"J\",\n  \"February\", \"F\",\n  \"March\", \"M\",\n  \"April\", \"A\",\n  \"May\", \"M \",\n  \"June\", \"J \",\n  \"July\", \"J  \",\n  \"August\", \"A \",\n  \"September\", \"S\",\n  \"October\", \"O\",\n  \"November\", \"N\",\n  \"December\", \"D\"\n)\n```\n\n단계 4: 월 약어를 월 번호로 정렬\n\n마지막 단계에서는 'MonthNumber' 열에 따라 'MonthAbbr' 열을 정렬하여 월이 원하는 JFMAMJJASOND 순서로 표시되도록합니다. Power BI의 'Sort By Column' 기능을 사용하여 이 작업을 쉽게 수행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n![image1](/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_2.png)\n\nNow, simply replace your current month field with the newly created ‘MonthAbbr’ column, and your metrics will have a cleaner, more streamlined look. You’re done!\n\n![image2](/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_3.png)\n\n![image3](/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_4.png)\n\n\n<div class=\"content-ad\"></div>\n\n이 접근법을 dimDate 테이블에도 적용할 수 있습니다. dimDate 테이블을 만드는 데 관련된 자세한 정보는 이 문서를 참고하실 수 있습니다:\n\n독자 여러분의 관심을 가져 주셔서 감사합니다! 이 안내서가 유익하게 느껴졌으면 좋겠습니다. 궁금한 점이나 문제가 발생하면 언제든지 연락 주세요.\n\n참고로, .pbix 파일은 여기서 다운로드할 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_0.png"},"coverImage":"/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"이 문서는 월별 메트릭 보고서를 시각적으로 매력적으로 만드는 방법을 안내합니다. 이를 위해 월 이름을 약어로 변환하여 더 깔끔한 모양을 만들어봅시다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Metrics vs. KPIs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_0.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"메트릭이란 무엇인가요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"메트릭(Metric)은 특정 활동을 측정함으로써 비즈니스 성과를 추적하는 방법입니다. 목표에 얼마나 가까운지를 보여주는 점수표와 같은 역할을 합니다. 전닻 활동에서 다운로드 횟수부터 새로운 리드가 영업으로 이어지는 횟수까지 거의 모든 것을 측정할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"KPI란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"KPI(Key Performance Indicator)는 메트릭과 유사하게 측정 가능한 값에 관련된 지표입니다. 그러나 KPI는 한 발짝 더 나아갑니다. 이러한 측정을 비즈니스의 특정 전략적 목표와 연결합니다. KPI는 메트릭이 이러한 대표적 목표 달성을 향해 어떻게 추적되는지 알려주는 기준으로 생각할 수 있습니다. 예를 들어, KPI는 시장 점유율을 어떤 비율로 증가시키는 것일 수 있고, 추적하는 메트릭(예: 영업 수치)이 목표에 부합하는지 여부를 보여줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이들은 어떻게 관련되어 있나요?\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"피라미드를 상상해보세요. 피라미드의 바닥은 메트릭으로 이루어져 있습니다. 이는 추적하는 모든 개별 측정값입니다. 이러한 메트릭은 그 다음으로 가는 피라미드 위쪽의 구성 요소인 KPI로 전달됩니다. KPI는 그러한 메트릭을 가져와 구체적인 목표에 연결합니다. 마지막으로, 피라미드의 꼭대기에는 전반적인 비즈니스 목표가 있습니다. 따라서 메트릭은 기초를 제공하고, KPI는 그러한 측정값에 목적을 부여하며, 둘 다 함께 작동하여 큰 그림 목표를 달성하는 데 도움이 됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 문서는 월간 메트릭을 JFMAMJJASOND 약어를 사용하여 간단하고 깔끔한 형식으로 쉽게 변환하는 방법을 안내합니다. 4가지 쉬운 단계로 나눠 설명할 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 1: 월 번호 추출하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테이블에 새 열을 추가하고 다음 공식을 입력하여 날짜 열에서 숫자 월 값을 추출하십시오. 월 약자를 나중에 날짜순으로 정렬할 때 이 월 번호가 유용합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MonthNumber\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"MONTH\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Table1'\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"YourDateColumn\"\n        }), \"])\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 2: 월 이름 추출하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"날짜 열에서 전체 월 이름을 추출하세요. 나중에 이러한 이름을 해당하는 JFMAMJJASOND 약어로 변환할 것입니다. 이를 위해 다른 계산 열을 추가하고 다음 수식을 사용하세요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MonthNameLong\"\n        }), \" = \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"FORMAT\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Table1'\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"YourDateColumn\"\n        }), \"], \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"MMMM\\\"\"\n        }), \")\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 3: 월 이름을 약어로 변환\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"전체 월 이름을 JFMAMJJASOND 약어로 변환하고 정렬 문제를 피하기 위해 세 번째 계산 열을 만드세요. 요렇게 합니다: 중복 약어가 있는 월에 대해 첫 글자 뒤에 공백을 추가해야 합니다 (예: 'January'는 'J', 'June'는 'J ' (한 칸 띄우기), 'July'는 'J ' (두 칸 띄우기)로 변환). 이렇게 하면 정확한 정렬을 보장할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음 SWITCH 문은 이 작업을 수행합니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MonthAbbr\"\n        }), \" = \\n\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"SWITCH\"\n        }), \"(\\n  \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Table1\"\n        }), \"[\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"MonthNameLong\"\n        }), \"],\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"January\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"J\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"February\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"F\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"March\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"M\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"April\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"A\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"May\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"M \\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"June\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"J \\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"July\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"J  \\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"August\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"A \\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"September\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"S\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"October\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"O\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"November\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"N\\\"\"\n        }), \",\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"December\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"D\\\"\"\n        }), \"\\n)\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"단계 4: 월 약어를 월 번호로 정렬\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마지막 단계에서는 'MonthNumber' 열에 따라 'MonthAbbr' 열을 정렬하여 월이 원하는 JFMAMJJASOND 순서로 표시되도록합니다. Power BI의 'Sort By Column' 기능을 사용하여 이 작업을 쉽게 수행할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_2.png\",\n        alt: \"image1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now, simply replace your current month field with the newly created ‘MonthAbbr’ column, and your metrics will have a cleaner, more streamlined look. You’re done!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_3.png\",\n        alt: \"image2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-18-SimplifyYourMonthlyMetricsinPowerBIwithJFMAMJJASONDFormatting_4.png\",\n        alt: \"image3\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 접근법을 dimDate 테이블에도 적용할 수 있습니다. dimDate 테이블을 만드는 데 관련된 자세한 정보는 이 문서를 참고하실 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"독자 여러분의 관심을 가져 주셔서 감사합니다! 이 안내서가 유익하게 느껴졌으면 좋겠습니다. 궁금한 점이나 문제가 발생하면 언제든지 연락 주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고로, .pbix 파일은 여기서 다운로드할 수 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}