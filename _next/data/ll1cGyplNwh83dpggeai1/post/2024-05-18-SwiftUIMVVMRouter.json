{"pageProps":{"post":{"title":"스위프트UI MVVM  라우터","description":"","date":"2024-05-18 15:41","slug":"2024-05-18-SwiftUIMVVMRouter","content":"\n\n<img src=\"/assets/img/2024-05-18-SwiftUIMVVMRouter_0.png\" />\n\n# MVVM 및 Router 이해하기\n\nMVVM 아키텍처는 코드베이스를 세 가지 주요 구성 요소로 나눕니다.\n\n- Model: 데이터 및 비즈니스 로직을 나타냅니다.\n- View: 프레젠테이션 및 사용자 상호 작용을 처리합니다.\n- ViewModel: Model과 View 사이의 중간 역할을 수행하여 데이터 로직과 상태를 관리합니다.\n\n<div class=\"content-ad\"></div>\n\n# 라우터\n\n라우터는 응용 프로그램 내에서 다른 뷰나 화면 간의 탐색을 관리하는 역할을 합니다. 네비게이션 로직을 캡슐화하여 전환을 관리하고 관심사의 깔끔한 분리를 유지하기 쉽게 만듭니다.\n\n# SwiftUI에서 MVVM + 라우터 구현\n\n간단한 SwiftUI 앱을 만들어서 항목 목록을 가져와 표시하는 방법을 알아봅시다. 항목을 선택하면 해당 항목의 상세보기로 이동하는 기능을 구현해보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n## 모델\n\n아이템 모델은 id와 이름을 가진 기본 데이터 구조를 나타냅니다.\n\n```swift\nstruct Item: Identifiable {\n    let id: UUID\n    let name: String\n}\n```\n\n아이템 구조체는 간단합니다. id와 이름을 가진 아이템을 정의합니다. 이 모델은 앱 전반에서 사용되는 핵심 데이터 구조를 나타냅니다.\n\n<div class=\"content-ad\"></div>\n\n## ViewModel\n\nItemViewModel은 항목을 가져오고 뷰에 노출하는 역할을 합니다.\n\n```swift\nclass ItemViewModel: ObservableObject {\n    @Published var items: [Item] = []\n    \n    func fetchItems() {\n        // 원격 서버에서 항목을 가져오는 것을 모방\n        self.items = [\n            Item(id: UUID(), name: \"항목 1\"),\n            Item(id: UUID(), name: \"항목 2\"),\n            Item(id: UUID(), name: \"항목 3\")\n        ]\n    }\n}\n```\n\nItemViewModel 클래스는 데이터를 가져오는 로직을 처리합니다. @Published 프로퍼티 래퍼를 사용하여 SwiftUI 뷰가 항목 배열이 변경될 때 반응적으로 업데이트되도록합니다. 실제 애플리케이션에서는 네트워크 요청이나 데이터베이스에서 데이터를 가져올 수 있지만 여기서는 간단함을 위해 더미 데이터를 채웁니다.\n\n<div class=\"content-ad\"></div>\n\n## 라우터\n\n라우터 클래스는 현재 네비게이션 상태를 관리합니다.\n\n```js\nenum AppRoute {\n    case itemList\n    case itemDetail(Item)\n}\n\nclass Router: ObservableObject {\n    @Published var currentRoute: AppRoute?\n    \n    func navigateToItemDetail(_ item: Item) {\n        currentRoute = .itemDetail(item)\n    }\n    \n    func navigateToItemList() {\n        currentRoute = .itemList\n    }\n}\n```\n\n라우터 클래스는 앱의 네비게이션 상태를 관리합니다. @Published 속성을 사용하여 뷰가 네비게이션 변경에 반응할 수 있습니다. navigateToItemDetail 및 navigateToItemList 메서드는 현재 경로를 업데이트하고 적절한 뷰가 표시됩니다.\n\n<div class=\"content-ad\"></div>\n\n## 화면\n\n아이템 목록 뷰\n아이템 목록 뷰는 아이템 목록을 표시하고, 아이템을 선택하면 상세 뷰로 이동합니다.\n\n```swift\nstruct ItemListView: View {\n    @ObservedObject var viewModel: ItemViewModel\n    @EnvironmentObject var router: Router\n    \n    var body: some View {\n        List(viewModel.items) { item in\n            Button(action: {\n                router.navigateToItemDetail(item)\n            }) {\n                Text(item.name)\n            }\n        }\n        .onAppear {\n            viewModel.fetchItems()\n        }\n        .navigationTitle(\"Items\")\n    }\n}\n```\n\n아이템 목록 뷰는 ItemViewModel이 가져온 아이템 목록을 표시합니다. 각각의 아이템은 탭되면 상세 뷰로 이동하는 Button으로 둘러싸여 있습니다. 화면이 나타날 때도 onAppear 수정자를 사용하여 아이템을 가져옵니다.\n\n<div class=\"content-ad\"></div>\n\n아이템 상세보기\n아이템 상세보기는 선택된 항목의 세부 정보를 표시하고 목록 보기로 돌아가는 버튼을 제공합니다.\n\n```js\nstruct ItemDetailView: View {\n    let item: Item\n    @EnvironmentObject var router: Router\n\n    var body: some View {\n        VStack {\n            Text(item.name)\n                .font(.largeTitle)\n            Spacer()\n            Button(\"목록으로\") {\n                router.navigateToItemList()\n            }\n            .padding()\n        }\n        .navigationTitle(\"아이템 상세\")\n    }\n}\n```\n\n아이템 상세보기 화면은 선택된 항목의 세부 정보를 보여주며, 아이템 목록으로 이동할 수 있는 버튼이 포함되어 있습니다. 이 화면은 @EnvironmentObject를 사용하여 라우터에 액세스하여 탐색 작업을 수행합니다.\n\n컨텐츠뷰\n컨텐츠뷰는 현재 경로에 따라 아이템 목록 뷰와 아이템 상세보기 뷰 간의 탐색을 관리하는 주요 진입점 역할을 합니다.\n\n<div class=\"content-ad\"></div>\n\n```swift\nstruct ContentView: View {\n    @StateObject var itemViewModel = ItemViewModel()\n    @StateObject var router = Router()\n    \n    var body: some View {\n        NavigationView {\n            VStack {\n                switch router.currentRoute {\n                case .none, .some(.itemList):\n                    ItemListView(viewModel: itemViewModel)\n                        .environmentObject(router)\n                case .some(.itemDetail(let item)):\n                    ItemDetailView(item: item)\n                        .environmentObject(router)\n                }\n            }\n        }\n        .onAppear {\n            router.navigateToItemList()\n        }\n    }\n}\n```\n\nContentView은 현재 라우터가 관리하는 현재 경로에 따라 탐색을 조율하는 주요 뷰입니다. 뷰 모델과 라우터를 초기화하고, switch 문을 사용하여 표시할 뷰를 결정합니다.\n\nMVVM 및 라우터를 SwiftUI에서 구현함으로써, 잘 구조화되고 유지보수 가능한 코드베이스를 달성할 수 있습니다. 역할 분리를 통해 각 구성 요소가 명확한 책임을 갖도록하여 코드를 이해하기 쉽고 확장하기 쉽게 만듭니다. 이 아키텍처는 상태 및 탐색을 관리하기 어려운 복잡한 애플리케이션에 특히 유용합니다.\n\n이 예시는 더 복잡한 시나리오에 맞게 확장할 수 있는 기초적인 접근 방식을 제공하여 SwiftUI 프로젝트가 확장 가능하고 견고하게 유지될 수 있도록 보장합니다.```","ogImage":{"url":"/assets/img/2024-05-18-SwiftUIMVVMRouter_0.png"},"coverImage":"/assets/img/2024-05-18-SwiftUIMVVMRouter_0.png","tag":["Tech"],"readingTime":5},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-18-SwiftUIMVVMRouter_0.png\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"MVVM 및 Router 이해하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MVVM 아키텍처는 코드베이스를 세 가지 주요 구성 요소로 나눕니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Model: 데이터 및 비즈니스 로직을 나타냅니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"View: 프레젠테이션 및 사용자 상호 작용을 처리합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ViewModel: Model과 View 사이의 중간 역할을 수행하여 데이터 로직과 상태를 관리합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"라우터\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라우터는 응용 프로그램 내에서 다른 뷰나 화면 간의 탐색을 관리하는 역할을 합니다. 네비게이션 로직을 캡슐화하여 전환을 관리하고 관심사의 깔끔한 분리를 유지하기 쉽게 만듭니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"SwiftUI에서 MVVM + 라우터 구현\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간단한 SwiftUI 앱을 만들어서 항목 목록을 가져와 표시하는 방법을 알아봅시다. 항목을 선택하면 해당 항목의 상세보기로 이동하는 기능을 구현해보겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"모델\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이템 모델은 id와 이름을 가진 기본 데이터 구조를 나타냅니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-swift\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"struct\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Item\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Identifiable\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" id: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"UUID\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" name: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"String\"\n        }), \"\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이템 구조체는 간단합니다. id와 이름을 가진 아이템을 정의합니다. 이 모델은 앱 전반에서 사용되는 핵심 데이터 구조를 나타냅니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"ViewModel\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ItemViewModel은 항목을 가져오고 뷰에 노출하는 역할을 합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-swift\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ItemViewModel\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ObservableObject\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Published\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" items: [\", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Item\"\n        }), \"] \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" []\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"fetchItems\"\n        }), \"() {\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// 원격 서버에서 항목을 가져오는 것을 모방\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"self\"\n        }), \".items \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" [\\n            \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Item\"\n        }), \"(id: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"UUID\"\n        }), \"(), name: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"항목 1\\\"\"\n        }), \"),\\n            \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Item\"\n        }), \"(id: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"UUID\"\n        }), \"(), name: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"항목 2\\\"\"\n        }), \"),\\n            \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Item\"\n        }), \"(id: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"UUID\"\n        }), \"(), name: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"항목 3\\\"\"\n        }), \")\\n        ]\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ItemViewModel 클래스는 데이터를 가져오는 로직을 처리합니다. @Published 프로퍼티 래퍼를 사용하여 SwiftUI 뷰가 항목 배열이 변경될 때 반응적으로 업데이트되도록합니다. 실제 애플리케이션에서는 네트워크 요청이나 데이터베이스에서 데이터를 가져올 수 있지만 여기서는 간단함을 위해 더미 데이터를 채웁니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"라우터\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라우터 클래스는 현재 네비게이션 상태를 관리합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"enum \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppRoute\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"case\"\n        }), \" itemList\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"case\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"itemDetail\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Item\"\n        }), \")\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ObservableObject\"\n        }), \" {\\n    @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Published\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"currentRoute\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppRoute\"\n        }), \"?\\n    \\n    func \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"navigateToItemDetail\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"_ item: Item\"\n        }), \") {\\n        currentRoute = .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"itemDetail\"\n        }), \"(item)\\n    }\\n    \\n    func \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"navigateToItemList\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-params\"\n        }), \") {\\n        currentRoute = .\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"itemList\"\n        }), \"\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라우터 클래스는 앱의 네비게이션 상태를 관리합니다. @Published 속성을 사용하여 뷰가 네비게이션 변경에 반응할 수 있습니다. navigateToItemDetail 및 navigateToItemList 메서드는 현재 경로를 업데이트하고 적절한 뷰가 표시됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"화면\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이템 목록 뷰\\n아이템 목록 뷰는 아이템 목록을 표시하고, 아이템을 선택하면 상세 뷰로 이동합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-swift\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"struct\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ItemListView\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"View\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@ObservedObject\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" viewModel: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"ItemViewModel\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@EnvironmentObject\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" router: \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Router\"\n        }), \"\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" body: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"some\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"View\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"List\"\n        }), \"(viewModel.items) { item \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"in\"\n        }), \"\\n            \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Button\"\n        }), \"(action: {\\n                router.navigateToItemDetail(item)\\n            }) {\\n                \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Text\"\n        }), \"(item.name)\\n            }\\n        }\\n        .onAppear {\\n            viewModel.fetchItems()\\n        }\\n        .navigationTitle(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Items\\\"\"\n        }), \")\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이템 목록 뷰는 ItemViewModel이 가져온 아이템 목록을 표시합니다. 각각의 아이템은 탭되면 상세 뷰로 이동하는 Button으로 둘러싸여 있습니다. 화면이 나타날 때도 onAppear 수정자를 사용하여 아이템을 가져옵니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이템 상세보기\\n아이템 상세보기는 선택된 항목의 세부 정보를 표시하고 목록 보기로 돌아가는 버튼을 제공합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"struct \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ItemDetailView\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"View\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"item\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Item\"\n        }), \"\\n    @\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EnvironmentObject\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"router\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Router\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"body\"\n        }), \": some \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"View\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"VStack\"\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Text\"\n        }), \"(item.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"name\"\n        }), \")\\n                .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"font\"\n        }), \"(.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"largeTitle\"\n        }), \")\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Spacer\"\n        }), \"()\\n            \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Button\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"목록으로\\\"\"\n        }), \") {\\n                router.\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"navigateToItemList\"\n        }), \"()\\n            }\\n            .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"padding\"\n        }), \"()\\n        }\\n        .\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"navigationTitle\"\n        }), \"(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"아이템 상세\\\"\"\n        }), \")\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이템 상세보기 화면은 선택된 항목의 세부 정보를 보여주며, 아이템 목록으로 이동할 수 있는 버튼이 포함되어 있습니다. 이 화면은 @EnvironmentObject를 사용하여 라우터에 액세스하여 탐색 작업을 수행합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"컨텐츠뷰\\n컨텐츠뷰는 현재 경로에 따라 아이템 목록 뷰와 아이템 상세보기 뷰 간의 탐색을 관리하는 주요 진입점 역할을 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-swift\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"struct\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ContentView\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"View\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@StateObject\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" itemViewModel \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"ItemViewModel\"\n        }), \"()\\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@StateObject\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" router \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"Router\"\n        }), \"()\\n    \\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"var\"\n        }), \" body: \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"some\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"View\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"NavigationView\"\n        }), \" {\\n            \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"VStack\"\n        }), \" {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"switch\"\n        }), \" router.currentRoute {\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"case\"\n        }), \" .none, .some(.itemList):\\n                    \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"ItemListView\"\n        }), \"(viewModel: itemViewModel)\\n                        .environmentObject(router)\\n                \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"case\"\n        }), \" .some(.itemDetail(\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"let\"\n        }), \" item)):\\n                    \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"ItemDetailView\"\n        }), \"(item: item)\\n                        .environmentObject(router)\\n                }\\n            }\\n        }\\n        .onAppear {\\n            router.navigateToItemList()\\n        }\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ContentView은 현재 라우터가 관리하는 현재 경로에 따라 탐색을 조율하는 주요 뷰입니다. 뷰 모델과 라우터를 초기화하고, switch 문을 사용하여 표시할 뷰를 결정합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"MVVM 및 라우터를 SwiftUI에서 구현함으로써, 잘 구조화되고 유지보수 가능한 코드베이스를 달성할 수 있습니다. 역할 분리를 통해 각 구성 요소가 명확한 책임을 갖도록하여 코드를 이해하기 쉽고 확장하기 쉽게 만듭니다. 이 아키텍처는 상태 및 탐색을 관리하기 어려운 복잡한 애플리케이션에 특히 유용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 예시는 더 복잡한 시나리오에 맞게 확장할 수 있는 기초적인 접근 방식을 제공하여 SwiftUI 프로젝트가 확장 가능하고 견고하게 유지될 수 있도록 보장합니다.```\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}