{"pageProps":{"post":{"title":"자바 SpringBoot를 사용한 JSON 스키마 유효성 검사기","description":"","date":"2024-05-17 17:43","slug":"2024-05-17-JSONSchemaValidatorusingJavaSpringBoot","content":"\n\n## Json 스키마란 무엇인가요?\n\nJSON Schema은 선언적 언어입니다. 이는 우리 서비스에 특정한 json 구조를 정의하고 유효성을 검사합니다. 주어진 json 데이터에 대한 표준 구조로 여러 시스템에서 사용할 수 있습니다. 자세한 내용은 여기를 참조하세요: what-is-jsonschema?\n\n## Json 스키마를 사용하는 이유는 무엇인가요?\n\n대부분의 경우, 서비스에서 들어오는 json을 유효성 검사하는 것이 필요합니다. 간단한 json은 속성에 제약 조건을 적용하여 POJO 또는 모델에 매핑할 때 유효성을 검사할 수 있습니다. 그러나 때로는 json이 복잡하여 이러한 제약 조건을 사용하여 모든 필드를 유효성을 검사할 수 없는 경우가 있습니다. JsonSchema를 사용하면 표준화된 구조를 사용하여 복잡한 json을 유효성을 검사할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 내용:\n\nSpringBoot와 Json Schema를 사용하는 단계별 가이드입니다. 이를 위해 networknt 라이브러리를 사용할 것입니다. 단계를 거친 후에는 테스트를 위해 수신된 json에 대한 몇 가지 시나리오가 있습니다.\n\n참고: 이 문서는 SpringBoot와 JsonSchema의 사용을 위한 것입니다. 이는 JsonSchema의 일부 기능 및 사용법에 대해 가르치기 위한 것입니다.\n\n## 1. SpringBoot 웹 애플리케이션을 생성하세요: https://start.spring.io/\n\n<div class=\"content-ad\"></div>\n\n```md\n![image](/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png)\n\n알림: spring-boot 및 java의 모든 버전 및 프로젝트 유형을 선택할 수 있습니다.\n\n## 2. pom.xml 또는 build.gradle에 종속성 추가.\n\n```js\n<--\npom.xml\nhttps://mvnrepository.com/artifact/com.networknt/json-schema-validator\n-->\n<dependency>\n  <groupId>com.networknt</groupId>\n  <artifactId>json-schema-validator</artifactId>\n  <version>1.4.0</version>\n</dependency>\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n// build.gradle\n// https://mvnrepository.com/artifact/com.networknt/json-schema-validator\nimplementation 'com.networknt:json-schema-validator:1.4.0'\n```\n\n## 3. 리소스 유효성 검사 JSON 파일을 생성합니다.\n\n```js\n{\n \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"title\": \"Order Event\",\n    \"description\": \"예제용 주문 이벤트 스키마\",\n    \"required\": [\"order_id\", \"total_price\", \"products\" ],\n    \"properties\": {\n       \"order_id\": {\n          \"type\": \"string\"\n        },\n        \"event\": {\n          \"enum\": [\"PLACED\", \"DELIVERED\", \"RETURNED\"],\n          \"type\": \"string\"\n        },\n        \"total_price\": { \n         \"type\": \"number\",\n             \"minimum\": 0\n     },\n        \"products\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"additionalProperties\": true,\n        \"required\": [\"product_id\", \"price\"],\n        \"minItems\": 1,\n        \"properties\": {\n          \"product_id\": {\n            \"type\": \"string\"\n          },\n          \"price\": {\n            \"type\": \"number\",\n            \"minimum\": 0\n          },\n          \"quantity\": {\n            \"type\": \"integer\"\n          }\n        }\n      }\n    }\n   }\n}\n```\n\n## 4. JsonSchema 빈을 생성합니다.\n\n\n<div class=\"content-ad\"></div>\n\n호출자 메서드에서는 JsonSchema 객체를 직접 생성할 수 있지만, 빈을 생성하고 사용하는 것을 권장합니다.\n\n```java\n@Configuration\npublic class AppConfiguration {\n    private static final String SCHEMA_VALIDATION_FILE = \"validation.json\";\n   \n    @Bean\n    public JsonSchema jsonSchema() {\n        return JsonSchemaFactory\n                .getInstance( SpecVersion.VersionFlag.V7 )\n                .getSchema( getClass().getResourceAsStream( SCHEMA_VALIDATION_FILE ) );\n    }\n}\n```\n\n## 5. JsonSchema 사용법\n\n이제 JsonSchema 객체를 사용해보겠습니다. JsonNode를 매개변수로 사용하는 메서드가 있는 Service 클래스를 만들겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```java\n@Slf4j\n@Service\npublic class JsonSchemaValidationService{\n  \n  @Autowired\n  private JsonSchema jsonSchema;\n  \n  public String validateJson(JsonNode jsonNode){\n    \n    Set<ValidationMessage> errors = jsonSchema.validate(jsonNode);\n    //if errors have a single miss match, there would be a value in the errors set.\n    if(errors.isEmpty()){\n      //event is valid.\n      log.info(\"event is valid\");\n    }else{\n        //event is in_valid.\n      log.info(\"event is invalid\");\n     }\n      return errors.toString();\n  }\n}\n```\n\n## 6. Create a Rest Controller.\n\n```java\nimport com.fasterxml.jackson.databind.JsonNode;\n@RestController\npublic class JsonSchemaController {\n    @Autowired\n    private JsonSchemaValidationService service;\n\n    @PostMapping(\"/validate\")\n    public String validateEvent( @RequestBody JsonNode jsonNode ){\n       return service.validateJson(jsonNode);\n    }\n}\n```\n\n## 7. Start the SpringBoot Application and start sending requests.```\n\n<div class=\"content-ad\"></div>\n\n이제 모든 것이 준비되었으니, 즐겨 사용하는 클라이언트를 사용하여 코드를 테스트할 수 있습니다. 저는 PostMan을 사용하고 있어요. 아래에서 유효한 이벤트로 시작해보겠습니다.\n\n```js\n# 유효한 데이터\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"order_id\":\"order134\",\n   \"event\": \"PLACED\",\n   \"products\": [\n     {\n       \"product_id\": \"product_1\",\n        \"price\":20.5,\n       \"quantity\":2\n     }\n   ],\n   \"total_price\": 41\n}'\n```\n\n응답:\n\n```js\n[]\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n# order id 없는 페이로드\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n   \"event\": \"PLACED\",\n   \"products\": [\n     {\n       \"product_id\": \"product_1\",\n        \"price\":20.5,\n       \"quantity\":2\n     }\n   ],\n   \"total_price\": 41\n}'\n```\n\n응답 :\n\n```js\n[$.order_id: 필수 항목이지만 누락되었습니다]\n```\n\n```js\n# order id 없는 페이로드\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n\"order_id\":\"order134\",\n   \"event\": \"PLACED\",\n   \"total_price\": 41\n}'\n```\n\n<div class=\"content-ad\"></div>\n\n```js\n[$.products: is missing but it is required]\n```\n\n```js\n# order id가 없는 payload\ncurl --location 'localhost:8080/validate' \\\n--header 'Content-Type: application/json' \\\n--data '{\n \"order_id\" : \"order_123\",\n   \"event\": \"PLACED\",\n   \"products\": [\n\n   ],\n   \"total_price\": 41\n}'\n```\n\n응답 :\n\n<div class=\"content-ad\"></div>\n\n```js\n[$.products: 배열에는 최소 1개의 항목이 있어야 합니다.]\n```\n\n<img src=\"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_1.png\" />","ogImage":{"url":"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png"},"coverImage":"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Json 스키마란 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JSON Schema은 선언적 언어입니다. 이는 우리 서비스에 특정한 json 구조를 정의하고 유효성을 검사합니다. 주어진 json 데이터에 대한 표준 구조로 여러 시스템에서 사용할 수 있습니다. 자세한 내용은 여기를 참조하세요: what-is-jsonschema?\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Json 스키마를 사용하는 이유는 무엇인가요?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"대부분의 경우, 서비스에서 들어오는 json을 유효성 검사하는 것이 필요합니다. 간단한 json은 속성에 제약 조건을 적용하여 POJO 또는 모델에 매핑할 때 유효성을 검사할 수 있습니다. 그러나 때로는 json이 복잡하여 이러한 제약 조건을 사용하여 모든 필드를 유효성을 검사할 수 없는 경우가 있습니다. JsonSchema를 사용하면 표준화된 구조를 사용하여 복잡한 json을 유효성을 검사할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"내용:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SpringBoot와 Json Schema를 사용하는 단계별 가이드입니다. 이를 위해 networknt 라이브러리를 사용할 것입니다. 단계를 거친 후에는 테스트를 위해 수신된 json에 대한 몇 가지 시나리오가 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"참고: 이 문서는 SpringBoot와 JsonSchema의 사용을 위한 것입니다. 이는 JsonSchema의 일부 기능 및 사용법에 대해 가르치기 위한 것입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. SpringBoot 웹 애플리케이션을 생성하세요: https://start.spring.io/\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-md\",\n        children: [\"![\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"image\"\n        }), \"](\", _jsx(_components.span, {\n          className: \"hljs-link\",\n          children: \"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_0.png\"\n        }), \")\\n\\n알림: spring-boot 및 java의 모든 버전 및 프로젝트 유형을 선택할 수 있습니다.\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-section\",\n          children: \"## 2. pom.xml 또는 build.gradle에 종속성 추가.\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-code\",\n          children: \"```js\\n<--\\npom.xml\\nhttps://mvnrepository.com/artifact/com.networknt/json-schema-validator\\n-->\\n<dependency>\\n  <groupId>com.networknt</groupId>\\n  <artifactId>json-schema-validator</artifactId>\\n  <version>1.4.0</version>\\n</dependency>\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// build.gradle\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// https://mvnrepository.com/artifact/com.networknt/json-schema-validator\"\n        }), \"\\nimplementation \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'com.networknt:json-schema-validator:1.4.0'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 리소스 유효성 검사 JSON 파일을 생성합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"$schema\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"http://json-schema.org/draft-07/schema#\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"title\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Order Event\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"description\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"예제용 주문 이벤트 스키마\\\"\"\n        }), \",\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"required\\\"\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"order_id\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"total_price\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"products\\\"\"\n        }), \" ],\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"properties\\\"\"\n        }), \": {\\n       \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"order_id\\\"\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"string\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"event\\\"\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"enum\\\"\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"PLACED\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"DELIVERED\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"RETURNED\\\"\"\n        }), \"],\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"string\\\"\"\n        }), \"\\n        },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"total_price\\\"\"\n        }), \": { \\n         \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"number\\\"\"\n        }), \",\\n             \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"minimum\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\n     },\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"products\\\"\"\n        }), \": {\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"array\\\"\"\n        }), \",\\n      \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"items\\\"\"\n        }), \": {\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"additionalProperties\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"required\\\"\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"product_id\\\"\"\n        }), \", \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"price\\\"\"\n        }), \"],\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"minItems\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \",\\n        \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"properties\\\"\"\n        }), \": {\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"product_id\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"string\\\"\"\n        }), \"\\n          },\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"price\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"number\\\"\"\n        }), \",\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"minimum\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0\"\n        }), \"\\n          },\\n          \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"quantity\\\"\"\n        }), \": {\\n            \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"type\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"integer\\\"\"\n        }), \"\\n          }\\n        }\\n      }\\n    }\\n   }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. JsonSchema 빈을 생성합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"호출자 메서드에서는 JsonSchema 객체를 직접 생성할 수 있지만, 빈을 생성하고 사용하는 것을 권장합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Configuration\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"AppConfiguration\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"private\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"static\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"final\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-type\",\n          children: \"String\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-variable\",\n          children: \"SCHEMA_VALIDATION_FILE\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"validation.json\\\"\"\n        }), \";\\n   \\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Bean\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" JsonSchema \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"jsonSchema\"\n        }), _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"()\"\n        }), \" {\\n        \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" JsonSchemaFactory\\n                .getInstance( SpecVersion.VersionFlag.V7 )\\n                .getSchema( getClass().getResourceAsStream( SCHEMA_VALIDATION_FILE ) );\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. JsonSchema 사용법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 JsonSchema 객체를 사용해보겠습니다. JsonNode를 매개변수로 사용하는 메서드가 있는 Service 클래스를 만들겠습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Slf4j\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Service\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JsonSchemaValidationService\"\n        }), \"{\\n  \\n  \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Autowired\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"private\"\n        }), \" JsonSchema jsonSchema;\\n  \\n  \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" String \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"validateJson\"\n        }), _jsx(_components.span, {\n          className: \"hljs-params\",\n          children: \"(JsonNode jsonNode)\"\n        }), \"{\\n    \\n    Set<ValidationMessage> errors = jsonSchema.validate(jsonNode);\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//if errors have a single miss match, there would be a value in the errors set.\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"if\"\n        }), \"(errors.isEmpty()){\\n      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//event is valid.\"\n        }), \"\\n      log.info(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"event is valid\\\"\"\n        }), \");\\n    }\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"else\"\n        }), \"{\\n        \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//event is in_valid.\"\n        }), \"\\n      log.info(\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"event is invalid\\\"\"\n        }), \");\\n     }\\n      \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" errors.toString();\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. Create a Rest Controller.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-java\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" com.fasterxml.jackson.databind.JsonNode;\\n\", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@RestController\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"class\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"JsonSchemaController\"\n        }), \" {\\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@Autowired\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"private\"\n        }), \" JsonSchemaValidationService service;\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-meta\",\n          children: \"@PostMapping(\\\"/validate\\\")\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"public\"\n        }), \" String \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"validateEvent\"\n        }), _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [\"( \", _jsx(_components.span, {\n            className: \"hljs-meta\",\n            children: \"@RequestBody\"\n          }), \" JsonNode jsonNode )\"]\n        }), \"{\\n       \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"return\"\n        }), \" service.validateJson(jsonNode);\\n    }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7. Start the SpringBoot Application and start sending requests.```\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이제 모든 것이 준비되었으니, 즐겨 사용하는 클라이언트를 사용하여 코드를 테스트할 수 있습니다. 저는 PostMan을 사용하고 있어요. 아래에서 유효한 이벤트로 시작해보겠습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# 유효한 데이터\\ncurl --location \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'localhost:8080/validate'\"\n        }), \" \\\\\\n--header \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Content-Type: application/json'\"\n        }), \" \\\\\\n--data \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'{\\n  \\\"order_id\\\":\\\"order134\\\",\\n   \\\"event\\\": \\\"PLACED\\\",\\n   \\\"products\\\": [\\n     {\\n       \\\"product_id\\\": \\\"product_1\\\",\\n        \\\"price\\\":20.5,\\n       \\\"quantity\\\":2\\n     }\\n   ],\\n   \\\"total_price\\\": 41\\n}'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"응답:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"[]\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# order id 없는 페이로드\\ncurl --location \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'localhost:8080/validate'\"\n        }), \" \\\\\\n--header \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Content-Type: application/json'\"\n        }), \" \\\\\\n--data \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'{\\n   \\\"event\\\": \\\"PLACED\\\",\\n   \\\"products\\\": [\\n     {\\n       \\\"product_id\\\": \\\"product_1\\\",\\n        \\\"price\\\":20.5,\\n       \\\"quantity\\\":2\\n     }\\n   ],\\n   \\\"total_price\\\": 41\\n}'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"응답 :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[$.\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"order_id\"\n        }), \": 필수 항목이지만 누락되었습니다]\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# order id 없는 페이로드\\ncurl --location \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'localhost:8080/validate'\"\n        }), \" \\\\\\n--header \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Content-Type: application/json'\"\n        }), \" \\\\\\n--data \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'{\\n\\\"order_id\\\":\\\"order134\\\",\\n   \\\"event\\\": \\\"PLACED\\\",\\n   \\\"total_price\\\": 41\\n}'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[$.\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"products\"\n        }), \": is missing but it is required]\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"# order id가 없는 payload\\ncurl --location \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'localhost:8080/validate'\"\n        }), \" \\\\\\n--header \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'Content-Type: application/json'\"\n        }), \" \\\\\\n--data \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"'{\\n \\\"order_id\\\" : \\\"order_123\\\",\\n   \\\"event\\\": \\\"PLACED\\\",\\n   \\\"products\\\": [\\n\\n   ],\\n   \\\"total_price\\\": 41\\n}'\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"응답 :\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"[$.\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"products\"\n        }), \": 배열에는 최소 \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1\"\n        }), \"개의 항목이 있어야 합니다.]\\n\"]\n      })\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-JSONSchemaValidatorusingJavaSpringBoot_1.png\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}