{"pageProps":{"post":{"title":"쿠버네티스 시크릿을 암호화하는 방법","description":"","date":"2024-05-20 16:42","slug":"2024-05-20-HowtoEncryptKubernetesSecrets","content":"\n\n쿠버네티스 시크릿은 Kubernetes 클러스터에서 실행되는 애플리케이션에서 필요한 비밀 정보를 저장하고 관리하는 메커니즘입니다.\n\n- 민감한 데이터를 응용 프로그램 코드와 분리하여 보관합니다.\n- 시크릿을 생성, 업데이트 및 처리하기 위해 Kubernetes API를 통해 관리됩니다.\n- 시크릿 액세스를 제한하는 구성 가능한 액세스 정책이 있습니다.\n- 볼륨 내의 파일로 노출되거나 환경 변수로 포드에 노출됩니다.\n\n# 시크릿 암호화의 중요성 :\n\n- etcd에서 암호화되지 않은 시크릿은 데이터베이스가 침해당한 경우에 접근할 수 있습니다.\n- 구성이 잘못된 리소스를 통해 실수로 노출될 수 있는 위험이 있습니다.\n- 스토리지 액세스 권한이 있는 관리자 및 사용자가 액세스할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 암호화의 장점 :\n\n- 복호화 키 없이 비밀을 읽을 수 없게 만듭니다.\n- 규정 준수를 통해 데이터 보호 요구 사항 충족을 돕습니다.\n- 암호화된 데이터는 키 없이는 쓸모 없어서 침해로부터의 피해를 줄입니다.\n- 네트워크 전송 중 가로채기를 방지합니다.\n\n# Kubernetes Secrets의 예시 :\n\n- 비밀번호: 데이터베이스 자격 증명, 애플리케이션 로그인 비밀번호 또는 다른 형태의 사용자 인증 비밀번호입니다.\n\n<div class=\"content-ad\"></div>\n\n- 예시: MySQL 데이터베이스 비밀번호.\n\n2. API 키: 외부 서비스 및 API에 인증하고 액세스하기 위한 토큰.\n\n- 예시: 구글 맵스 API 키, Stripe API 키.\n\n3. SSH 키: 서버에 안전한 셸 액세스에 사용되는 키.\n\n<div class=\"content-ad\"></div>\n\n- 예시: 원격 Git 저장소에 액세스하는 개인 SSH 키.\n\n4. TLS 인증서: 안전한 HTTPS 연결 설정에 사용되는 인증서.\n\n- 예시: 웹 서버용 SSL/TLS 인증서.\n\n5. OAuth 토큰: OAuth 흐름에서 권한 부여에 사용되는 토큰.\n\n<div class=\"content-ad\"></div>\n\n- 예시: GitHub 또는 Google과 같은 타사 API에 액세스 토큰입니다.\n\n7. Docker 레지스트리 자격 증명: 개인 Docker 레지스트리에 액세스하기 위한 자격 증명입니다.\n\n- 예시: Docker Hub 또는 기타 컨테이너 레지스트리의 사용자 이름과 비밀번호입니다.\n\n8. 암호화 키: 데이터를 암호화하고 해독하는 데 사용되는 키입니다.\n\n<div class=\"content-ad\"></div>\n\n- 예시: 데이터를 안전하게 보관하기 위해 사용되는 AES 암호화 키.\n\n# 쿠버네티스에서 Secrets 사용법:\n\n- 환경 변수: Secrets는 컨테이너 내에서 환경 변수로 노출될 수 있습니다.\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mycontainer\n    image: myimage\n    env:\n    - name: DB_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: mysecret\n          key: db_password\n```\n\n<div class=\"content-ad\"></div>\n\n2. 볼륨 마운트: 시크릿은 컨테이너 내에서 파일로 마운트될 수 있어요.\n\n```js\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mycontainer\n    image: myimage\n    volumeMounts:\n    - name: secret-volume\n      mountPath: \"/etc/secrets\"\n  volumes:\n  - name: secret-volume\n    secret:\n      secretName: mysecret\n```\n\n# 쿠버네티스 시크릿의 암호화 유형:\n\n- 암호화 철자: 무엇을 의미하며 왜 중요한지 설명합니다.\n- 전송 중 암호화: 시크릿이 전송 중에 암호화되도록 보장하는 방법에 간단히 언급합니다.\n\n<div class=\"content-ad\"></div>\n\n# 암호화 구성 파일 만들기:\n\n이 파일은 암호화 공급자와 암호화에 사용되는 키를 지정합니다.\n\n```js\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n  - resources:\n    - secrets\n    providers:\n    - aescbc:\n        keys:\n        - name: key1\n          secret: <base64-encoded-secret>\n    - identity: {}\n```\n\n# Encryption Key 생성하기:\n\n<div class=\"content-ad\"></div>\n\n256비트 암호화 키를 Base64로 인코딩하세요. 다양한 도구를 사용하여 이 작업을 수행할 수 있습니다. OpenSSL을 사용하여 다음과 같이 수행할 수 있습니다:\n\n```js\nhead -c 32 /dev/urandom | base64\n```\n\n생성된 키로 구성 파일에서 `base64-encoded-secret`을(를) 교체하세요.\n\n# 암호화 구성 적용하기:\n\n<div class=\"content-ad\"></div>\n\nAPI 서버 Manifest 파일을 수정해야 합니다. 일반적으로 /etc/kubernetes/manifests/kube-apiserver.yaml 경로에 위치합니다. 다음과 같이 API 서버 Manifest 파일을 수정해주세요.\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-apiserver\n  namespace: kube-system\nspec:\n  containers:\n  - name: kube-apiserver\n    command:\n    - kube-apiserver\n    # 다른 플래그들...\n    - --encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n암호화 구성 파일이 모든 제어 평면 노드의 지정된 경로에서 액세스 가능한지 확인해주세요.\n\n<div class=\"content-ad\"></div>\n\n# API 서버 재시작:\n\nAPI 서버는 새 구성을 적용하고 비밀을 안전하게 암호화하기 시작할 것입니다.\n\n# 암호화 확인:\n\n비밀이 정상적으로 암호화되고 있는지 확인하려면:\n\n<div class=\"content-ad\"></div>\n\n- 테스트 비밀 정보 만들기:\n\n```js\nkubectl create secret generic test-secret --from-literal=key1=supersecret\n```\n\n- etcd 확인: etcd 데이터에 직접 액세스하시면서 (일반적으로 프로덕션에서 피해야 하는 직접적인 etcd 쿼리를 수행하므로 주의하세요). 데이터가 암호화되어 있는지 확인하기 위해 etcdctl 도구를 사용하세요.\n\n```js\nETCDCTL_API=3 etcdctl get /registry/secrets/default/test-secret --prefix --key-file=<path-to-key-file> --cert-file=<path-to-cert-file> --cacert=<path-to-ca-cert>\n```\n\n<div class=\"content-ad\"></div>\n\n# 암호화 키 회전:\n\n보안을 강화하기 위해 주기적으로 암호화 키를 회전하세요.\n\n- 새 키 추가: 새 키를 목록 상단에 업데이트된 암호화 구성 파일에 추가하세요.\n- 비밀 정보 재암호화: 새 키로 모든 비밀 정보를 재암호화하세요.\n\n```js\nkubectl get secrets --all-namespaces -o json | kubectl replace -f -\n```\n\n<div class=\"content-ad\"></div>\n\n- 이전 키 제거: 모든 비밀을 재암호화한 후, 구성에서 이전 키를 제거하십시오.\n\n# Kubernetes Secrets을 암호화하는 것은 클러스터 내의 민감한 데이터를 안전하게 보호하는 데 중요합니다. Kubernetes Secrets를 암호화하는 다양한 방법은 다음과 같습니다:\n\n## 1. 내장된 메커니즘을 사용하여 정지 상태의 Secrets 암호화\n\nKubernetes은 정지 상태의 Secrets를 암호화하는 내장 지원을 제공합니다. 이는 가장 간단한 방법이며 API 서버를 암호화 제공자로 구성하는 것이 포함됩니다. 이것이 수행하는 방법은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n## 단계:\n\n- 암호화 구성 파일 만들기:\n\n```js\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: <base64-encoded-key>\n  - identity: {}\n```\n\n2. API 서버에서 암호화 구성 지정: kube-apiserver 매니페스트를 편집하십시오 (보통 /etc/kubernetes/manifests/kube-apiserver.yaml에 위치함).\n\n<div class=\"content-ad\"></div>\n\n```plaintext\n--encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n3. API 서버 재시작: 매니페스트를 업데이트한 후에는 kube-apiserver가 자동으로 재시작되어 비밀을 암호화하기 시작합니다.\n\n## 2. 외부 키 관리 서비스(KMS) 사용\n\n보안을 강화하기 위해 Kubernetes는 AWS KMS, Google Cloud KMS 또는 HashiCorp Vault와 같은 외부 키 관리 서비스와 통합할 수 있습니다. 이 방법을 사용하면 Kubernetes가 외부 시스템을 사용하여 키 관리를 수행할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 단계:\n\n- KMS 프로바이더 구성:\n\n  - AWS KMS의 경우: AWS KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 해당대로 구성합니다.\n  - Google Cloud KMS의 경우: GCP KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 구성합니다.\n  - HashiCorp Vault의 경우: Vault를 구성하여 키를 관리하고 Vault 프로바이더를 설정합니다.\n\n2. Encryption Configuration 파일 업데이트:\n\n<div class=\"content-ad\"></div>\n\n```yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - kms:\n      name: <provider-name>\n      endpoint: <kms-endpoint>\n      cachesize: 1000\n  - identity: {}\n```\n\n3. API 서버 구성 업데이트:\n\n```bash\n--encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n4. API 서버 재시작: API 서버가 새 구성을 사용하도록 합니다.```\n\n<div class=\"content-ad\"></div>\n\n## 3. 커스텀 암호화 제공자를 사용하여 시크릿 암호화\n\n더 많은 제어를 필요로 하는 경우, 커스텀 암호화 제공자를 구현할 수 있습니다. 이 방법은 커스텀 암호화 플러그인을 작성하고 배포하는 과정을 포함합니다.\n\n## 단계:\n\n- 커스텀 프로바이더 개발: 요구 사항에 기반하여 암호화 및 복호화 로직을 구현합니다.\n- 커스텀 프로바이더 배포: 커스텀 프로바이더가 API 서버에서 접근 가능하도록 합니다.\n- 암호화 구성 설정:\n\n<div class=\"content-ad\"></div>\n\n```yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - custom:\n      name: <custom-provider-name>\n      endpoint: <custom-provider-endpoint>\n  - identity: {}\n```\n\n4. API 서버 업데이트:\n\n```bash\n--encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n5. API 서버 재시작: 구성 변경을 적용하세요.```\n\n<div class=\"content-ad\"></div>\n\n## 4. 응용 프로그램 수준에서 비밀을 암호화하는 방법\n\n데이터를 안전하게 보관하기 위해 데이터를 안전하게 저장하는 대신 또는 그 외에 데이터를 Kubernetes Secrets에 저장하기 전에 응용 프로그램 수준에서 데이터를 암호화할 수 있습니다. 이 방법은 응용 프로그램이 암호화 및 복호화를 처리해야 합니다.\n\n## 단계:\n\n- 응용 프로그램에서 암호화 구현: Kubernetes Secret을 만들기 전에 민감한 데이터를 암호화하는 라이브러리나 도구를 사용합니다.\n- Kubernetes Secret으로 암호화된 데이터 저장: Secret에 저장된 데이터는 이미 암호화되어 있습니다.\n- 응용 프로그램에서 데이터 복호화: 응용 프로그램이 Secret을 검색할 때 데이터를 사용하기 전에 데이터를 복호화해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n## 5. Sealed Secrets 사용하기\n\nSealed Secrets는 비트나미에서 개발한 프로젝트로, Git 저장소에 암호화된 비밀을 저장할 수 있게 해줍니다.\n\n## 단계:\n\n- kubeseal 설치: kubeseal CLI 도구를 설치합니다.\n- Secret 암호화: kubeseal을 사용하여 쿠버네티스 Secret에서 SealedSecret을 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nkubectl create secret generic mysecret --from-literal=username=myuser --from-literal=password=mypass -o yaml --dry-run=client > mysecret.yaml\nkubeseal < mysecret.yaml > mysealedsecret.yaml\n```\n\n3. SealedSecret 적용: SealedSecret 매니페스트를 클러스터에 적용합니다.\n\n```js\nkubectl apply -f mysealedsecret.yaml\n```\n\n4. 런타임에서 Controller 복호화: 클러스터의 Sealed Secrets 컨트롤러가 시크릿을 복호화하고 실제 시크릿 리소스를 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n## 6. SOPS(비밀 작업) 사용하기\n\nSOPS는 Kubernetes 시크릿 매니페스트를 암호화하는 데 사용할 수 있는 도구입니다.\n\n## 단계:\n\n- SOPS 설치: SOPS CLI 도구를 설치합니다.\n- 시크릿 매니페스트 암호화: Kubernetes 시크릿 매니페스트를 작성하고 SOPS를 사용하여 암호화합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nsops --encrypt --kms arn:aws:kms:region:account-id:key/key-id secret.yaml > encrypted-secret.yaml\n```\n\n3. Apply the Encrypted Secret: 클러스터에 암호화된 매니페스트를 적용하세요.\n\n```js\nkubectl apply -f encrypted-secret.yaml\n```\n\n4. Decrypt at Runtime: CI/CD 파이프라인이나 애플리케이션 로직 내에서 런타임에 시크릿을 복호화하는 데 SOPS를 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n이러한 방법들은 귀하의 인프라 및 보안 요구사항에 따라 다양한 수준의 보안과 유연성을 제공합니다. Kubernetes Secrets에 대한 암호화를 구현하면, 클러스터 내에서 민감한 데이터가 수명 주기 전체에 걸쳐 보호되도록 할 수 있습니다.\n\n# 이 안내서가 도움이 되었다면 👏 버튼을 클릭해주세요.\n\n더 많은 학습을 위해 팔로우 해주세요 😊\n\n특정 주제에 궁금한 점이 있으시면, 개인적인 메모나 댓글을 남겨주세요. 궁금해하는 내용을 탐험하는 데 도움을 드리겠습니다!\n\n<div class=\"content-ad\"></div>\n\n# 소중한 시간을 내어 지식을 향상시키기 위해 노력하셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-20-HowtoEncryptKubernetesSecrets_0.png"},"coverImage":"/assets/img/2024-05-20-HowtoEncryptKubernetesSecrets_0.png","tag":["Tech"],"readingTime":9},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    ol: \"ol\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"쿠버네티스 시크릿은 Kubernetes 클러스터에서 실행되는 애플리케이션에서 필요한 비밀 정보를 저장하고 관리하는 메커니즘입니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"민감한 데이터를 응용 프로그램 코드와 분리하여 보관합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"시크릿을 생성, 업데이트 및 처리하기 위해 Kubernetes API를 통해 관리됩니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"시크릿 액세스를 제한하는 구성 가능한 액세스 정책이 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"볼륨 내의 파일로 노출되거나 환경 변수로 포드에 노출됩니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시크릿 암호화의 중요성 :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"etcd에서 암호화되지 않은 시크릿은 데이터베이스가 침해당한 경우에 접근할 수 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"구성이 잘못된 리소스를 통해 실수로 노출될 수 있는 위험이 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"스토리지 액세스 권한이 있는 관리자 및 사용자가 액세스할 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"암호화의 장점 :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"복호화 키 없이 비밀을 읽을 수 없게 만듭니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"규정 준수를 통해 데이터 보호 요구 사항 충족을 돕습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"암호화된 데이터는 키 없이는 쓸모 없어서 침해로부터의 피해를 줄입니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"네트워크 전송 중 가로채기를 방지합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Kubernetes Secrets의 예시 :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"비밀번호: 데이터베이스 자격 증명, 애플리케이션 로그인 비밀번호 또는 다른 형태의 사용자 인증 비밀번호입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"예시: MySQL 데이터베이스 비밀번호.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"API 키: 외부 서비스 및 API에 인증하고 액세스하기 위한 토큰.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"예시: 구글 맵스 API 키, Stripe API 키.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"SSH 키: 서버에 안전한 셸 액세스에 사용되는 키.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"예시: 원격 Git 저장소에 액세스하는 개인 SSH 키.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"TLS 인증서: 안전한 HTTPS 연결 설정에 사용되는 인증서.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"예시: 웹 서버용 SSL/TLS 인증서.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"OAuth 토큰: OAuth 흐름에서 권한 부여에 사용되는 토큰.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"예시: GitHub 또는 Google과 같은 타사 API에 액세스 토큰입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"7\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Docker 레지스트리 자격 증명: 개인 Docker 레지스트리에 액세스하기 위한 자격 증명입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"예시: Docker Hub 또는 기타 컨테이너 레지스트리의 사용자 이름과 비밀번호입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"8\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"암호화 키: 데이터를 암호화하고 해독하는 데 사용되는 키입니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"예시: 데이터를 안전하게 보관하기 위해 사용되는 AES 암호화 키.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"쿠버네티스에서 Secrets 사용법:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"환경 변수: Secrets는 컨테이너 내에서 환경 변수로 노출될 수 있습니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Pod\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"mypod\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spec:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"containers:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"mycontainer\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"image:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"myimage\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"env:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"DB_PASSWORD\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"valueFrom:\"\n        }), \"\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"secretKeyRef:\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"mysecret\"\n        }), \"\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"key:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"db_password\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"볼륨 마운트: 시크릿은 컨테이너 내에서 파일로 마운트될 수 있어요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion\"\n        }), \": v1\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"Pod\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": mypod\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spec\"\n        }), \":\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"containers\"\n        }), \":\\n  - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": mycontainer\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"image\"\n        }), \": myimage\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"volumeMounts\"\n        }), \":\\n    - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": secret-volume\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"mountPath\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"/etc/secrets\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"volumes\"\n        }), \":\\n  - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": secret-volume\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"secret\"\n        }), \":\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"secretName\"\n        }), \": mysecret\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"쿠버네티스 시크릿의 암호화 유형:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"암호화 철자: 무엇을 의미하며 왜 중요한지 설명합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"전송 중 암호화: 시크릿이 전송 중에 암호화되도록 보장하는 방법에 간단히 언급합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"암호화 구성 파일 만들기:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 파일은 암호화 공급자와 암호화에 사용되는 키를 지정합니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion\"\n        }), \": apiserver.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"config\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"k8s\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"io\"\n        }), \"/v1\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EncryptionConfiguration\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources\"\n        }), \":\\n  - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources\"\n        }), \":\\n    - secrets\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"providers\"\n        }), \":\\n    - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"aescbc\"\n        }), \":\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"keys\"\n        }), \":\\n        - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": key1\\n          \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"secret\"\n        }), \": <base64-encoded-secret>\\n    - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"identity\"\n        }), \": {}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Encryption Key 생성하기:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"256비트 암호화 키를 Base64로 인코딩하세요. 다양한 도구를 사용하여 이 작업을 수행할 수 있습니다. OpenSSL을 사용하여 다음과 같이 수행할 수 있습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"head -c \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"32\"\n        }), \" /dev/urandom | base64\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"생성된 키로 구성 파일에서 \", _jsx(_components.code, {\n        children: \"base64-encoded-secret\"\n      }), \"을(를) 교체하세요.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"암호화 구성 적용하기:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 서버 Manifest 파일을 수정해야 합니다. 일반적으로 /etc/kubernetes/manifests/kube-apiserver.yaml 경로에 위치합니다. 다음과 같이 API 서버 Manifest 파일을 수정해주세요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"Pod\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"metadata:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"kube-apiserver\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"namespace:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"kube-system\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"spec:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"containers:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"kube-apiserver\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"command:\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"kube-apiserver\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"# 다른 플래그들...\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"--encryption-provider-config=/path/to/encryption-config.yaml\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"암호화 구성 파일이 모든 제어 평면 노드의 지정된 경로에서 액세스 가능한지 확인해주세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"API 서버 재시작:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"API 서버는 새 구성을 적용하고 비밀을 안전하게 암호화하기 시작할 것입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"암호화 확인:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"비밀이 정상적으로 암호화되고 있는지 확인하려면:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"테스트 비밀 정보 만들기:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"kubectl create secret generic test-secret --\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \"-literal=key1=supersecret\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"etcd 확인: etcd 데이터에 직접 액세스하시면서 (일반적으로 프로덕션에서 피해야 하는 직접적인 etcd 쿼리를 수행하므로 주의하세요). 데이터가 암호화되어 있는지 확인하기 위해 etcdctl 도구를 사용하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-variable constant_\",\n          children: \"ETCDCTL_API\"\n        }), \"=\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \" etcdctl get /registry/secrets/\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \"/test-secret --prefix --key-file=<path-to-key-file> --cert-file=<path-to-cert-file> --cacert=<path-to-ca-cert>\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"암호화 키 회전:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보안을 강화하기 위해 주기적으로 암호화 키를 회전하세요.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"새 키 추가: 새 키를 목록 상단에 업데이트된 암호화 구성 파일에 추가하세요.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"비밀 정보 재암호화: 새 키로 모든 비밀 정보를 재암호화하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"kubectl get secrets --all-namespaces -o json | kubectl replace -f -\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"이전 키 제거: 모든 비밀을 재암호화한 후, 구성에서 이전 키를 제거하십시오.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Kubernetes Secrets을 암호화하는 것은 클러스터 내의 민감한 데이터를 안전하게 보호하는 데 중요합니다. Kubernetes Secrets를 암호화하는 다양한 방법은 다음과 같습니다:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. 내장된 메커니즘을 사용하여 정지 상태의 Secrets 암호화\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Kubernetes은 정지 상태의 Secrets를 암호화하는 내장 지원을 제공합니다. 이는 가장 간단한 방법이며 API 서버를 암호화 제공자로 구성하는 것이 포함됩니다. 이것이 수행하는 방법은 다음과 같습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"암호화 구성 파일 만들기:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion\"\n        }), \": apiserver.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"config\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"k8s\"\n        }), \".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"io\"\n        }), \"/v1\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"EncryptionConfiguration\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources\"\n        }), \":\\n- \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources\"\n        }), \":\\n  - secrets\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"providers\"\n        }), \":\\n  - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"aescbc\"\n        }), \":\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"keys\"\n        }), \":\\n      - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name\"\n        }), \": key1\\n        \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"secret\"\n        }), \": <base64-encoded-key>\\n  - \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"identity\"\n        }), \": {}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"API 서버에서 암호화 구성 지정: kube-apiserver 매니페스트를 편집하십시오 (보통 /etc/kubernetes/manifests/kube-apiserver.yaml에 위치함).\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-plaintext\",\n        children: \"--encryption-provider-config=/path/to/encryption-config.yaml\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"API 서버 재시작: 매니페스트를 업데이트한 후에는 kube-apiserver가 자동으로 재시작되어 비밀을 암호화하기 시작합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. 외부 키 관리 서비스(KMS) 사용\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"보안을 강화하기 위해 Kubernetes는 AWS KMS, Google Cloud KMS 또는 HashiCorp Vault와 같은 외부 키 관리 서비스와 통합할 수 있습니다. 이 방법을 사용하면 Kubernetes가 외부 시스템을 사용하여 키 관리를 수행할 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"KMS 프로바이더 구성:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"AWS KMS의 경우: AWS KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 해당대로 구성합니다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"Google Cloud KMS의 경우: GCP KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 구성합니다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"HashiCorp Vault의 경우: Vault를 구성하여 키를 관리하고 Vault 프로바이더를 설정합니다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Encryption Configuration 파일 업데이트:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"apiserver.config.k8s.io/v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"EncryptionConfiguration\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"secrets\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"providers:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kms:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"<provider-name>\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"endpoint:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"<kms-endpoint>\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"cachesize:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1000\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"identity:\"\n        }), \" {}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"API 서버 구성 업데이트:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"--encryption-provider-config=/path/to/encryption-config.yaml\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"API 서버 재시작: API 서버가 새 구성을 사용하도록 합니다.```\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 커스텀 암호화 제공자를 사용하여 시크릿 암호화\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 많은 제어를 필요로 하는 경우, 커스텀 암호화 제공자를 구현할 수 있습니다. 이 방법은 커스텀 암호화 플러그인을 작성하고 배포하는 과정을 포함합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"커스텀 프로바이더 개발: 요구 사항에 기반하여 암호화 및 복호화 로직을 구현합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"커스텀 프로바이더 배포: 커스텀 프로바이더가 API 서버에서 접근 가능하도록 합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"암호화 구성 설정:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-yaml\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"apiVersion:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"apiserver.config.k8s.io/v1\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kind:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"EncryptionConfiguration\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources:\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"resources:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"secrets\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"providers:\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"custom:\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"name:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"<custom-provider-name>\"\n        }), \"\\n      \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"endpoint:\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"<custom-provider-endpoint>\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-bullet\",\n          children: \"-\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"identity:\"\n        }), \" {}\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"API 서버 업데이트:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-bash\",\n        children: \"--encryption-provider-config=/path/to/encryption-config.yaml\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"5\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"API 서버 재시작: 구성 변경을 적용하세요.```\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. 응용 프로그램 수준에서 비밀을 암호화하는 방법\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"데이터를 안전하게 보관하기 위해 데이터를 안전하게 저장하는 대신 또는 그 외에 데이터를 Kubernetes Secrets에 저장하기 전에 응용 프로그램 수준에서 데이터를 암호화할 수 있습니다. 이 방법은 응용 프로그램이 암호화 및 복호화를 처리해야 합니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"응용 프로그램에서 암호화 구현: Kubernetes Secret을 만들기 전에 민감한 데이터를 암호화하는 라이브러리나 도구를 사용합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Kubernetes Secret으로 암호화된 데이터 저장: Secret에 저장된 데이터는 이미 암호화되어 있습니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"응용 프로그램에서 데이터 복호화: 응용 프로그램이 Secret을 검색할 때 데이터를 사용하기 전에 데이터를 복호화해야 합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. Sealed Secrets 사용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sealed Secrets는 비트나미에서 개발한 프로젝트로, Git 저장소에 암호화된 비밀을 저장할 수 있게 해줍니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"kubeseal 설치: kubeseal CLI 도구를 설치합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Secret 암호화: kubeseal을 사용하여 쿠버네티스 Secret에서 SealedSecret을 생성합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"kubectl create secret generic mysecret --\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \"-literal=username=myuser --\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \"-literal=password=mypass -o yaml --dry-run=client > mysecret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"\\nkubeseal < mysecret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \" > mysealedsecret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"SealedSecret 적용: SealedSecret 매니페스트를 클러스터에 적용합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"kubectl apply -f mysealedsecret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"런타임에서 Controller 복호화: 클러스터의 Sealed Secrets 컨트롤러가 시크릿을 복호화하고 실제 시크릿 리소스를 생성합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. SOPS(비밀 작업) 사용하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SOPS는 Kubernetes 시크릿 매니페스트를 암호화하는 데 사용할 수 있는 도구입니다.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"단계:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"SOPS 설치: SOPS CLI 도구를 설치합니다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"시크릿 매니페스트 암호화: Kubernetes 시크릿 매니페스트를 작성하고 SOPS를 사용하여 암호화합니다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"sops --encrypt --kms \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"arn\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"aws\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"kms\"\n        }), \":\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"region\"\n        }), \":account-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"id\"\n        }), \":key/key-id secret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \" > encrypted-secret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"3\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Apply the Encrypted Secret: 클러스터에 암호화된 매니페스트를 적용하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"kubectl apply -f encrypted-secret.\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"yaml\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"4\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Decrypt at Runtime: CI/CD 파이프라인이나 애플리케이션 로직 내에서 런타임에 시크릿을 복호화하는 데 SOPS를 사용하세요.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 방법들은 귀하의 인프라 및 보안 요구사항에 따라 다양한 수준의 보안과 유연성을 제공합니다. Kubernetes Secrets에 대한 암호화를 구현하면, 클러스터 내에서 민감한 데이터가 수명 주기 전체에 걸쳐 보호되도록 할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"이 안내서가 도움이 되었다면 👏 버튼을 클릭해주세요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"더 많은 학습을 위해 팔로우 해주세요 😊\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"특정 주제에 궁금한 점이 있으시면, 개인적인 메모나 댓글을 남겨주세요. 궁금해하는 내용을 탐험하는 데 도움을 드리겠습니다!\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"소중한 시간을 내어 지식을 향상시키기 위해 노력하셔서 감사합니다!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}