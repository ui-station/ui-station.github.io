{"pageProps":{"post":{"title":"자바로 간단한 규칙 엔진 구축하기","description":"","date":"2024-06-19 22:08","slug":"2024-06-19-BuildingaSimpleRuleEngineinJava","content":"\n![Building a Simple Rule Engine in Java](/assets/img/2024-06-19-BuildingaSimpleRuleEngineinJava_0.png)\n\n소프트웨어 개발에서는 종종 데이터를 필터링하거나 처리하기 위해 일련의 규칙이나 조건을 적용해야 하는 상황이 있습니다. 전통적인 if 및 else 문을 사용하여 이러한 규칙을 관리하면 유지 관리하기 어렵고 번거로울 수 있습니다. 규칙 엔진은 이러한 규칙을 정의하고 실행하는 더 유연하고 조직화된 방법을 제공합니다. 이 기사에서는 함수형 프로그래밍 원칙을 사용하여 Java에서 간단한 규칙 엔진을 구축하는 방법을 탐색하겠습니다.\n\n준비 사항\n\n규칙 엔진을 구축하기에 앞서 필요한 구성 요소를 정의해 보겠습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 규칙:\n\n규칙은 우리가 평가하고 싶은 조건 또는 기준을 나타냅니다. 규칙은 주어진 객체가 규칙의 기준을 충족하는지 여부를 결정하는 술어로 구성됩니다. Enum 또는 Map`key, value`를 사용하세요 (이 부분에서 Enum을 사용합니다).\n\n# 규칙 엔진:\n\n규칙 엔진은 규칙 컬렉션을 관리하고 이를 객체 집합에 적용하는 것을 담당합니다. 정의된 규칙에 기반하여 객체를 필터링하고 필터된 결과를 반환합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 대상-객체:\n\n규칙을 사용하여 필터링하고자 하는 간단한 Person 클래스를 예시 객체로 사용하겠습니다. 이름과 나이와 같은 속성이 있습니다.\n\n# 규칙 엔진 구축하기\n\n규칙 엔진을 단계별로 구축해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n규칙 정의:\n먼저 Rule이라는 enum을 사용하여 규칙을 정의합니다. enum의 각 규칙은 우리가 평가하고 싶은 특정 조건이나 기준을 나타냅니다. 예를 들어, 코드에서 우리는 AGE_GREATER_THAN_30과 NAME_STARTS_WITH_B 두 가지 규칙을 정의했습니다. 각 규칙에는 해당 규칙의 조건을 정의하는 프레디케이트가 있습니다.\n\n```js\nimport java.util.function.Predicate;\n\n// 여러 enum을 가질 수 있어요. 이를 통해 규칙이나 조건을 관리할 수 있어요.\npublic enum Rule implements TestRule {\n    AGE_GREATER_THAN_30(person -> person.getAge() > 30),\n    NAME_STARTS_WITH_B(person -> person.getName().startsWith(\"B\"));\n\n    private final Predicate<Person> predicate;\n\n    Rule(Predicate<Person> predicate) {\n        this.predicate = predicate;\n    }\n\n    public Predicate<Person> getPredicate() {\n        return predicate;\n    }\n}\n```\n\nRule Engine 생성:\n다음으로 RuleEngine 클래스를 생성합니다. 이 클래스는 규칙의 관리와 실행을 처리할 것입니다. 규칙 목록을 유지하고 이러한 규칙에 기반한 새로운 규칙을 추가하고 개체를 필터링하기 위한 메서드를 제공합니다.\n\n필터링 로직 구현:\nRuleEngine 클래스의 filter 메서드에서는 개체 목록을 반복하고 Java 8 Stream API의 allMatch 메서드를 사용하여 각 규칙을 적용합니다. 이 메서드는 주어진 개체에 대해 모든 규칙이 통과되었는지 확인합니다. 모든 규칙이 통과되면 해당 개체를 필터링된 목록에 추가합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\npublic interface TestRule {\n    <T> Predicate<T> getPredicate();\n}\n```\n\n```js\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RuleEngine<T> {\n    private List<TestRule> rules;\n\n    public RuleEngine() {\n        this.rules = new ArrayList<>();\n    }\n\n    public void addRule(TestRule rule) {\n        rules.add(rule);\n    }\n\n    public List<T> filter(List<T> items) {\n        List<T> filteredItems = new ArrayList<>();\n        for (T item : items) {\n            if (rules.stream().allMatch(rule -> rule.getPredicate().test(item))) {\n                filteredItems.add(item);\n            }\n        }\n        return filteredItems;\n    }\n}\n```\n\n샘플 대상 객체 만들기:\n\n```js\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모두 함께 해보기\n\nMain 클래스에서는 우리의 규칙 엔진 사용법을 보여줍니다. Person 객체의 리스트를 생성하고 RuleEngine을 AGE_GREATER_THAN_30과 NAME_STARTS_WITH_B 두 가지 규칙으로 초기화합니다. 그런 다음 규칙 엔진의 filter 메소드를 호출하여 Person 객체의 리스트를 전달합니다. 규칙 엔진은 각 사람에게 규칙을 적용하고 필터링된 리스트를 반환합니다.\n\n마지막으로 필터링된 리스트를 반복하고 지정된 규칙을 충족하는 사람들의 이름을 출력합니다.\n\n```java\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Person> people = List.of(\n                new Person(\"Alice\", 25),\n                new Person(\"Bob\", 31),\n                new Person(\"Charlie\", 35)\n        );\n\n        RuleEngine<Person> ruleEngine = new RuleEngine<>();\n        ruleEngine.addRule(Rule.AGE_GREATER_THAN_30);\n        ruleEngine.addRule(Rule.NAME_STARTS_WITH_B);\n\n        List<Person> filteredPeople = ruleEngine.filter(people);\n\n        // 이 부분은 결과만 출력합니다.\n        for (Person person : filteredPeople) {\n            System.out.println(person.getName());\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이 글에서는 Java로 간단한 규칙 엔진을 구축하는 방법을 살펴보았습니다. 이 규칙 엔진을 사용하면 프레디케이트를 사용하여 규칙을 정의하고 객체 컬렉션에 적용할 수 있습니다. 함수형 프로그래밍 원칙을 활용하여 유연하고 확장 가능한 규칙 엔진을 만들어 다양한 시나리오에서 사용할 수 있습니다.\n\n여기서 제시된 개념과 코드를 이해하면 이 기반을 확장하여 특정 필요에 맞는 보다 복잡한 규칙 엔진을 구축할 수 있습니다.\n\nhttps://github.com/KiaShamaei/ruleEngine\n","ogImage":{"url":"/assets/img/2024-06-19-BuildingaSimpleRuleEngineinJava_0.png"},"coverImage":"/assets/img/2024-06-19-BuildingaSimpleRuleEngineinJava_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-BuildingaSimpleRuleEngineinJava_0.png\" alt=\"Building a Simple Rule Engine in Java\"></p>\n<p>소프트웨어 개발에서는 종종 데이터를 필터링하거나 처리하기 위해 일련의 규칙이나 조건을 적용해야 하는 상황이 있습니다. 전통적인 if 및 else 문을 사용하여 이러한 규칙을 관리하면 유지 관리하기 어렵고 번거로울 수 있습니다. 규칙 엔진은 이러한 규칙을 정의하고 실행하는 더 유연하고 조직화된 방법을 제공합니다. 이 기사에서는 함수형 프로그래밍 원칙을 사용하여 Java에서 간단한 규칙 엔진을 구축하는 방법을 탐색하겠습니다.</p>\n<p>준비 사항</p>\n<p>규칙 엔진을 구축하기에 앞서 필요한 구성 요소를 정의해 보겠습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>규칙:</h1>\n<p>규칙은 우리가 평가하고 싶은 조건 또는 기준을 나타냅니다. 규칙은 주어진 객체가 규칙의 기준을 충족하는지 여부를 결정하는 술어로 구성됩니다. Enum 또는 Map<code>key, value</code>를 사용하세요 (이 부분에서 Enum을 사용합니다).</p>\n<h1>규칙 엔진:</h1>\n<p>규칙 엔진은 규칙 컬렉션을 관리하고 이를 객체 집합에 적용하는 것을 담당합니다. 정의된 규칙에 기반하여 객체를 필터링하고 필터된 결과를 반환합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>대상-객체:</h1>\n<p>규칙을 사용하여 필터링하고자 하는 간단한 Person 클래스를 예시 객체로 사용하겠습니다. 이름과 나이와 같은 속성이 있습니다.</p>\n<h1>규칙 엔진 구축하기</h1>\n<p>규칙 엔진을 단계별로 구축해 봅시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>규칙 정의:\n먼저 Rule이라는 enum을 사용하여 규칙을 정의합니다. enum의 각 규칙은 우리가 평가하고 싶은 특정 조건이나 기준을 나타냅니다. 예를 들어, 코드에서 우리는 AGE_GREATER_THAN_30과 NAME_STARTS_WITH_B 두 가지 규칙을 정의했습니다. 각 규칙에는 해당 규칙의 조건을 정의하는 프레디케이트가 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">function</span>.<span class=\"hljs-property\">Predicate</span>;\n\n<span class=\"hljs-comment\">// 여러 enum을 가질 수 있어요. 이를 통해 규칙이나 조건을 관리할 수 있어요.</span>\npublic enum <span class=\"hljs-title class_\">Rule</span> implements <span class=\"hljs-title class_\">TestRule</span> {\n    <span class=\"hljs-title function_\">AGE_GREATER_THAN_30</span>(person -> person.<span class=\"hljs-title function_\">getAge</span>() > <span class=\"hljs-number\">30</span>),\n    <span class=\"hljs-title function_\">NAME_STARTS_WITH_B</span>(person -> person.<span class=\"hljs-title function_\">getName</span>().<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">\"B\"</span>));\n\n    private final <span class=\"hljs-title class_\">Predicate</span>&#x3C;<span class=\"hljs-title class_\">Person</span>> predicate;\n\n    <span class=\"hljs-title class_\">Rule</span>(<span class=\"hljs-title class_\">Predicate</span>&#x3C;<span class=\"hljs-title class_\">Person</span>> predicate) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">predicate</span> = predicate;\n    }\n\n    public <span class=\"hljs-title class_\">Predicate</span>&#x3C;<span class=\"hljs-title class_\">Person</span>> <span class=\"hljs-title function_\">getPredicate</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> predicate;\n    }\n}\n</code></pre>\n<p>Rule Engine 생성:\n다음으로 RuleEngine 클래스를 생성합니다. 이 클래스는 규칙의 관리와 실행을 처리할 것입니다. 규칙 목록을 유지하고 이러한 규칙에 기반한 새로운 규칙을 추가하고 개체를 필터링하기 위한 메서드를 제공합니다.</p>\n<p>필터링 로직 구현:\nRuleEngine 클래스의 filter 메서드에서는 개체 목록을 반복하고 Java 8 Stream API의 allMatch 메서드를 사용하여 각 규칙을 적용합니다. 이 메서드는 주어진 개체에 대해 모든 규칙이 통과되었는지 확인합니다. 모든 규칙이 통과되면 해당 개체를 필터링된 목록에 추가합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">public interface <span class=\"hljs-title class_\">TestRule</span> {\n    &#x3C;T> <span class=\"hljs-title class_\">Predicate</span>&#x3C;T> <span class=\"hljs-title function_\">getPredicate</span>();\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">ArrayList</span>;\n<span class=\"hljs-keyword\">import</span> java.<span class=\"hljs-property\">util</span>.<span class=\"hljs-property\">List</span>;\n\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RuleEngine</span>&#x3C;T> {\n    private <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">TestRule</span>> rules;\n\n    public <span class=\"hljs-title class_\">RuleEngine</span>() {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rules</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&#x3C;>();\n    }\n\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addRule</span>(<span class=\"hljs-params\">TestRule rule</span>) {\n        rules.<span class=\"hljs-title function_\">add</span>(rule);\n    }\n\n    public <span class=\"hljs-title class_\">List</span>&#x3C;T> <span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-params\">List&#x3C;T> items</span>) {\n        <span class=\"hljs-title class_\">List</span>&#x3C;T> filteredItems = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&#x3C;>();\n        <span class=\"hljs-keyword\">for</span> (T item : items) {\n            <span class=\"hljs-keyword\">if</span> (rules.<span class=\"hljs-title function_\">stream</span>().<span class=\"hljs-title function_\">allMatch</span>(rule -> rule.<span class=\"hljs-title function_\">getPredicate</span>().<span class=\"hljs-title function_\">test</span>(item))) {\n                filteredItems.<span class=\"hljs-title function_\">add</span>(item);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> filteredItems;\n    }\n}\n</code></pre>\n<p>샘플 대상 객체 만들기:</p>\n<pre><code class=\"hljs language-js\">public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> {\n    private <span class=\"hljs-title class_\">String</span> name;\n    private int age;\n\n    public <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-title class_\">String</span> name, int age) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;\n    }\n\n    public <span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n\n    public int <span class=\"hljs-title function_\">getAge</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> age;\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>모두 함께 해보기</p>\n<p>Main 클래스에서는 우리의 규칙 엔진 사용법을 보여줍니다. Person 객체의 리스트를 생성하고 RuleEngine을 AGE_GREATER_THAN_30과 NAME_STARTS_WITH_B 두 가지 규칙으로 초기화합니다. 그런 다음 규칙 엔진의 filter 메소드를 호출하여 Person 객체의 리스트를 전달합니다. 규칙 엔진은 각 사람에게 규칙을 적용하고 필터링된 리스트를 반환합니다.</p>\n<p>마지막으로 필터링된 리스트를 반복하고 지정된 규칙을 충족하는 사람들의 이름을 출력합니다.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        List&#x3C;Person> people = List.of(\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">\"Alice\"</span>, <span class=\"hljs-number\">25</span>),\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">\"Bob\"</span>, <span class=\"hljs-number\">31</span>),\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">\"Charlie\"</span>, <span class=\"hljs-number\">35</span>)\n        );\n\n        RuleEngine&#x3C;Person> ruleEngine = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuleEngine</span>&#x3C;>();\n        ruleEngine.addRule(Rule.AGE_GREATER_THAN_30);\n        ruleEngine.addRule(Rule.NAME_STARTS_WITH_B);\n\n        List&#x3C;Person> filteredPeople = ruleEngine.filter(people);\n\n        <span class=\"hljs-comment\">// 이 부분은 결과만 출력합니다.</span>\n        <span class=\"hljs-keyword\">for</span> (Person person : filteredPeople) {\n            System.out.println(person.getName());\n        }\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>결론</h1>\n<p>이 글에서는 Java로 간단한 규칙 엔진을 구축하는 방법을 살펴보았습니다. 이 규칙 엔진을 사용하면 프레디케이트를 사용하여 규칙을 정의하고 객체 컬렉션에 적용할 수 있습니다. 함수형 프로그래밍 원칙을 활용하여 유연하고 확장 가능한 규칙 엔진을 만들어 다양한 시나리오에서 사용할 수 있습니다.</p>\n<p>여기서 제시된 개념과 코드를 이해하면 이 기반을 확장하여 특정 필요에 맞는 보다 복잡한 규칙 엔진을 구축할 수 있습니다.</p>\n<p><a href=\"https://github.com/KiaShamaei/ruleEngine\" rel=\"nofollow\" target=\"_blank\">https://github.com/KiaShamaei/ruleEngine</a></p>\n</body>\n</html>\n"},"__N_SSG":true}