{"pageProps":{"post":{"title":"Swift의 모던 동시성 프로그래밍 Async Await와 Alamofire 활용 방법","description":"","date":"2024-06-23 21:26","slug":"2024-06-23-ModernConcurrencyinSwiftAsyncAwaitAlamofire","content":"\n![이미지](/assets/img/2024-06-23-ModernConcurrencyinSwiftAsyncAwaitAlamofire_0.png)\n\n안녕하세요! 모두 다시 만나서 반가워요! 이번 달에는 async/await에 대해 배운 내용을 Alamofire 네트워크 라이브러리에 적용해볼 거에요. 이 시리즈의 첫 번째 부분을 아직 읽지 못했다면, 여기서 잠시 멈추시고 읽어보시는 걸 강력히 추천드려요. 이렇게 하면 속도를 낼 수 있어요.\n\n# Alamofire란 무엇인가요?\n\nAlamofire는 iOS 개발 커뮤니티에서 널리 사용되는 네트워크 라이브러리로, 네트워크 요청을 처리하는 우아한 솔루션을 제공해요. 아마도 이미 Alamofire와 iOS 개발에서의 사용법에 익숙하실 거예요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Alamofire을 사용한 Async-Await 구현\n\n첫 번째 부분에서 배운 개념들을 Alamofire로 통합하고, 작업 실행 및 오류 처리에 초점을 맞춥니다. 또한, 액터가 어떻게 병렬성 관리를 향상시킬 수 있는지 살펴볼 것입니다.\n\n## 네트워크 매니저 생성\n\n다음은 Alamofire를 사용하여 API 요청을 초기화하는 기본 코드 스니펫입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// Alamofire를 사용하여 API 요청을 수행하는 코드 조각입니다.\nclass NetworkManager {\n    func request<T: Decodable>(\n        method: HTTPMethod,\n        url: String,\n        headers: [String: String],\n        params: Parameters?,\n        of type: T.Type,\n        completion: @escaping (Result<T, Error>) -> Void\n    ) {\n        // 인코딩 설정\n        var encoding: ParameterEncoding = JSONEncoding.default\n        switch method {\n        case .post:\n            encoding = JSONEncoding.default\n        case .get:\n            encoding = URLEncoding.default\n        default:\n            encoding = JSONEncoding.default\n        }\n\n        AF.request(\n            url,\n            method: method,\n            parameters: params,\n            encoding: encoding,\n            headers: HTTPHeaders(headers)\n        ).responseDecodable(of: type) { response in\n            switch response.result {\n            case let .success(data):\n                completion(.success(data))\n\n            case let .failure(error):\n                completion(.failure(error))\n            }\n        }\n    }\n}\n```\n\n이제 이 함수에 async-await을 적용해 보겠습니다:\n\n```js\n// Async-await을 사용하여 API 요청을 수행하는 코드 조각입니다.\nclass NetworkManager {\n    func request<T: Decodable>(\n        method: HTTPMethod,\n        url: String,\n        headers: [String: String],\n        params: Parameters?,\n        of type: T.Type\n    ) async throws -> T {\n        // 인코딩 설정\n        var encoding: ParameterEncoding = JSONEncoding.default\n        switch method {\n        case .post:\n            encoding = JSONEncoding.default\n        case .get:\n            encoding = URLEncoding.default\n        default:\n            encoding = JSONEncoding.default\n        }\n\n        // 반드시 continuation을 한 번만 재개해야 합니다.\n        return try await withCheckedThrowingContinuation { continuation in\n            AF.request(\n                url,\n                method: method,\n                parameters: params,\n                encoding: encoding,\n                headers: HTTPHeaders(headers)\n            ).responseDecodable(of: type) { response in\n                switch response.result {\n                case let .success(data):\n                    continuation.resume(returning: data)\n\n                case let .failure(error):\n                    continuation.resume(throwing: error)\n                }\n            }\n        }\n    }\n}\n```\n\n하지만 여기서 멈추지 않고, 더 나아가서 actor를 도입하여 접근 방식을 더욱 세련되게 만들 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 배우자들 소개\n\n배우들은 여러 스레드 간에 안전하게 상태를 공유하기 위해 사용할 수 있는 동시적인 객체 유형입니다. 배우들은 코드를 연속적으로 실행한다는 것이 보장되어 있어서, 동시적인 응용 프로그램에서 공유 상태를 관리하는 데 이상적입니다.\n\nasync/await를 사용하여 배우들을 사용하려면, 간단히 배우를 async로 선언하고, 배우의 async 메서드를 호출하기 위해 await를 사용하면 됩니다.\n\n```js\n// 배우 사용을 보여주는 코드 스니펫\n배우 NetworkManager {\n    func request<T: Decodable>(\n        method: HTTPMethod,\n        url: String,\n        headers: [String: String],\n        params: Parameters?,\n        of type: T.Type\n    ) async throws -> T {\n        // 인코딩 설정\n        var encoding: ParameterEncoding = JSONEncoding.default\n        switch method {\n        case .post:\n            encoding = JSONEncoding.default\n        case .get:\n            encoding = URLEncoding.default\n        default:\n            encoding = JSONEncoding.default\n        }\n\n        // 계속을 정확히 한 번만 재개해야 합니다.\n        return try await withCheckedThrowingContinuation { continuation in\n            AF.request(\n                url,\n                method: method,\n                parameters: params,\n                encoding: encoding,\n                headers: HTTPHeaders(headers)\n            ).responseDecodable(of: type) { response in\n                switch response.result {\n                case let .success(data):\n                    continuation.resume(returning: data)\n\n                case let .failure(error):\n                    continuation.resume(throwing: error)\n                }\n            }\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n네트워크 매니저가 이제 async 액터로 변경되었으므로 안전하고 동시성 있는 방식으로 상호 작용하는 방법을 소개합니다:\n\n```js\n// 코드의 어딘가.\nlet network = NetworkManager()\n\n...\n\nfunc getPeople() async -> Result<ApiPeopleResponse, Error> {\n    do {\n        // API 요청 보내기\n        let response = try await network.request(method: .get, url: \"https://swapi.dev/api/people\", headers: [:], params: [:], of: ApiPeopleResponse.self)\n        return .success(response)\n    } catch {\n        return .failure(error)\n    }\n}\n\n...\n\n// 코드 어딘가에서 비동기 함수 getPeople 호출합니다.\nlet result = await getPeople()\nswitch result {\ncase .success(let response):\n    // 여기에서 데이터 응답 처리\n    break\n\ncase .failure(let error):\n    // 실패한 응답 처리.\n    print(\"불러오기 실패: \\(error.localizedDescription)\")\n    break\n}\n```\n\n아래는 async/await와 함께 작업(tasks)을 활용하는 방법을 간단히 살펴봅니다:\n\n```js\n// async/await와 Task를 함께 사용하는 예제\nfunc getPeople(completion: @escaping (Result<ApiPeopleResponse, Error>) -> Void) {\n    Task {\n        do {\n            // API 요청 보내기\n            let response = try await network.request(method: .get, url: \"https://swapi.dev/api/people\", headers: [:], params: [:], of: ApiPeopleResponse.self)\n            await MainActor.run {\n                completion(.success(response))\n            }\n        } catch {\n            await MainActor.run {\n                completion(.failure(error))\n            }\n        }\n    }\n}\n\n...\n\n// 코드 어딘가에서 완료 함수인 getPeople 호출합니다.\ngetPeople { result in\n    switch result {\n    case .success(let response):\n        // 여기에서 데이터 응답 처리\n        break\n    case .failure(let error):\n        // 실패한 응답 처리.\n        print(\"불러오기 실패: \\(error.localizedDescription)\")\n        break\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\nSwift에서의 Async/await는 깔끔하고 유지보수 가능한 비동기 코드 작성을 위한 가능성을 열어줍니다. 이 글을 통해 우리는 이러한 기능에 대해 더 깊게 파고들어 보았고, 에러 처리, 취소, 그리고 중요한 동시성과 같은 고급 기능에 초점을 맞췄습니다. 이러한 개념을 Alamofire와 통합하면 iOS 애플리케이션의 성능과 신뢰성을 향상시킬 수 있습니다. 항상 강조하듯이, 연습이 중요하니 여러분들의 프로젝트에서 이러한 개념을 실험해보는 것을 적극 권장합니다.\n\nActor와 task의 사용은 공유 리소스 관리와 효율적인 동시 작업 실행에 대한 우리의 이해를 더욱 확고하게 만들어줍니다. 앞으로 나아가면서 이 경험이 우리에게 계속 더 나은 iOS 개발의 최신 동향을 탐색하고 통합하는 데 영감을 줄 것입니다. 이를 통해 우리의 기술과 애플리케이션이 최신 기술과 함께 선도적인 위치를 유지할 수 있도록 하세요.\n\n![이미지](/assets/img/2024-06-23-ModernConcurrencyinSwiftAsyncAwaitAlamofire_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\niOS 엔지니어링에 대한 더 많은 통찰을 기대해주세요! 코딩을 즐기며 행복하게 일하세요! 🌟👩‍💻👨‍💻📱\n","ogImage":{"url":"/assets/img/2024-06-23-ModernConcurrencyinSwiftAsyncAwaitAlamofire_0.png"},"coverImage":"/assets/img/2024-06-23-ModernConcurrencyinSwiftAsyncAwaitAlamofire_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-ModernConcurrencyinSwiftAsyncAwaitAlamofire_0.png\" alt=\"이미지\"></p>\n<p>안녕하세요! 모두 다시 만나서 반가워요! 이번 달에는 async/await에 대해 배운 내용을 Alamofire 네트워크 라이브러리에 적용해볼 거에요. 이 시리즈의 첫 번째 부분을 아직 읽지 못했다면, 여기서 잠시 멈추시고 읽어보시는 걸 강력히 추천드려요. 이렇게 하면 속도를 낼 수 있어요.</p>\n<h1>Alamofire란 무엇인가요?</h1>\n<p>Alamofire는 iOS 개발 커뮤니티에서 널리 사용되는 네트워크 라이브러리로, 네트워크 요청을 처리하는 우아한 솔루션을 제공해요. 아마도 이미 Alamofire와 iOS 개발에서의 사용법에 익숙하실 거예요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Alamofire을 사용한 Async-Await 구현</h1>\n<p>첫 번째 부분에서 배운 개념들을 Alamofire로 통합하고, 작업 실행 및 오류 처리에 초점을 맞춥니다. 또한, 액터가 어떻게 병렬성 관리를 향상시킬 수 있는지 살펴볼 것입니다.</p>\n<h2>네트워크 매니저 생성</h2>\n<p>다음은 Alamofire를 사용하여 API 요청을 초기화하는 기본 코드 스니펫입니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Alamofire를 사용하여 API 요청을 수행하는 코드 조각입니다.</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NetworkManager</span> {\n    func request&#x3C;<span class=\"hljs-attr\">T</span>: <span class=\"hljs-title class_\">Decodable</span>>(\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-title class_\">HTTPMethod</span>,\n        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-title class_\">String</span>,\n        <span class=\"hljs-attr\">headers</span>: [<span class=\"hljs-title class_\">String</span>: <span class=\"hljs-title class_\">String</span>],\n        <span class=\"hljs-attr\">params</span>: <span class=\"hljs-title class_\">Parameters</span>?,\n        <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">type</span>: T.<span class=\"hljs-property\">Type</span>,\n        <span class=\"hljs-attr\">completion</span>: @escaping (<span class=\"hljs-title class_\">Result</span>&#x3C;T, <span class=\"hljs-title class_\">Error</span>>) -> <span class=\"hljs-title class_\">Void</span>\n    ) {\n        <span class=\"hljs-comment\">// 인코딩 설정</span>\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-title class_\">ParameterEncoding</span> = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-keyword\">switch</span> method {\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">post</span>:\n            encoding = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">get</span>:\n            encoding = <span class=\"hljs-title class_\">URLEncoding</span>.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-attr\">default</span>:\n            encoding = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        }\n\n        <span class=\"hljs-variable constant_\">AF</span>.<span class=\"hljs-title function_\">request</span>(\n            url,\n            <span class=\"hljs-attr\">method</span>: method,\n            <span class=\"hljs-attr\">parameters</span>: params,\n            <span class=\"hljs-attr\">encoding</span>: encoding,\n            <span class=\"hljs-attr\">headers</span>: <span class=\"hljs-title class_\">HTTPHeaders</span>(headers)\n        ).<span class=\"hljs-title function_\">responseDecodable</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">of</span>: type</span>) { response <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-keyword\">switch</span> response.<span class=\"hljs-property\">result</span> {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> .<span class=\"hljs-title function_\">success</span>(data):\n                <span class=\"hljs-title function_\">completion</span>(.<span class=\"hljs-title function_\">success</span>(data))\n\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> .<span class=\"hljs-title function_\">failure</span>(error):\n                <span class=\"hljs-title function_\">completion</span>(.<span class=\"hljs-title function_\">failure</span>(error))\n            }\n        }\n    }\n}\n</code></pre>\n<p>이제 이 함수에 async-await을 적용해 보겠습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Async-await을 사용하여 API 요청을 수행하는 코드 조각입니다.</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NetworkManager</span> {\n    func request&#x3C;<span class=\"hljs-attr\">T</span>: <span class=\"hljs-title class_\">Decodable</span>>(\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-title class_\">HTTPMethod</span>,\n        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-title class_\">String</span>,\n        <span class=\"hljs-attr\">headers</span>: [<span class=\"hljs-title class_\">String</span>: <span class=\"hljs-title class_\">String</span>],\n        <span class=\"hljs-attr\">params</span>: <span class=\"hljs-title class_\">Parameters</span>?,\n        <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">type</span>: T.<span class=\"hljs-property\">Type</span>\n    ) <span class=\"hljs-keyword\">async</span> throws -> T {\n        <span class=\"hljs-comment\">// 인코딩 설정</span>\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-title class_\">ParameterEncoding</span> = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-keyword\">switch</span> method {\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">post</span>:\n            encoding = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">get</span>:\n            encoding = <span class=\"hljs-title class_\">URLEncoding</span>.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-attr\">default</span>:\n            encoding = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        }\n\n        <span class=\"hljs-comment\">// 반드시 continuation을 한 번만 재개해야 합니다.</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> withCheckedThrowingContinuation { continuation <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-variable constant_\">AF</span>.<span class=\"hljs-title function_\">request</span>(\n                url,\n                <span class=\"hljs-attr\">method</span>: method,\n                <span class=\"hljs-attr\">parameters</span>: params,\n                <span class=\"hljs-attr\">encoding</span>: encoding,\n                <span class=\"hljs-attr\">headers</span>: <span class=\"hljs-title class_\">HTTPHeaders</span>(headers)\n            ).<span class=\"hljs-title function_\">responseDecodable</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">of</span>: type</span>) { response <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">switch</span> response.<span class=\"hljs-property\">result</span> {\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> .<span class=\"hljs-title function_\">success</span>(data):\n                    continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">returning</span>: data)\n\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> .<span class=\"hljs-title function_\">failure</span>(error):\n                    continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">throwing</span>: error)\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p>하지만 여기서 멈추지 않고, 더 나아가서 actor를 도입하여 접근 방식을 더욱 세련되게 만들 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>배우자들 소개</h2>\n<p>배우들은 여러 스레드 간에 안전하게 상태를 공유하기 위해 사용할 수 있는 동시적인 객체 유형입니다. 배우들은 코드를 연속적으로 실행한다는 것이 보장되어 있어서, 동시적인 응용 프로그램에서 공유 상태를 관리하는 데 이상적입니다.</p>\n<p>async/await를 사용하여 배우들을 사용하려면, 간단히 배우를 async로 선언하고, 배우의 async 메서드를 호출하기 위해 await를 사용하면 됩니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 배우 사용을 보여주는 코드 스니펫</span>\n배우 <span class=\"hljs-title class_\">NetworkManager</span> {\n    func request&#x3C;<span class=\"hljs-attr\">T</span>: <span class=\"hljs-title class_\">Decodable</span>>(\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-title class_\">HTTPMethod</span>,\n        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-title class_\">String</span>,\n        <span class=\"hljs-attr\">headers</span>: [<span class=\"hljs-title class_\">String</span>: <span class=\"hljs-title class_\">String</span>],\n        <span class=\"hljs-attr\">params</span>: <span class=\"hljs-title class_\">Parameters</span>?,\n        <span class=\"hljs-keyword\">of</span> <span class=\"hljs-attr\">type</span>: T.<span class=\"hljs-property\">Type</span>\n    ) <span class=\"hljs-keyword\">async</span> throws -> T {\n        <span class=\"hljs-comment\">// 인코딩 설정</span>\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-title class_\">ParameterEncoding</span> = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-keyword\">switch</span> method {\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">post</span>:\n            encoding = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">get</span>:\n            encoding = <span class=\"hljs-title class_\">URLEncoding</span>.<span class=\"hljs-property\">default</span>\n        <span class=\"hljs-attr\">default</span>:\n            encoding = <span class=\"hljs-title class_\">JSON</span>Encoding.<span class=\"hljs-property\">default</span>\n        }\n\n        <span class=\"hljs-comment\">// 계속을 정확히 한 번만 재개해야 합니다.</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> withCheckedThrowingContinuation { continuation <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-variable constant_\">AF</span>.<span class=\"hljs-title function_\">request</span>(\n                url,\n                <span class=\"hljs-attr\">method</span>: method,\n                <span class=\"hljs-attr\">parameters</span>: params,\n                <span class=\"hljs-attr\">encoding</span>: encoding,\n                <span class=\"hljs-attr\">headers</span>: <span class=\"hljs-title class_\">HTTPHeaders</span>(headers)\n            ).<span class=\"hljs-title function_\">responseDecodable</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">of</span>: type</span>) { response <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">switch</span> response.<span class=\"hljs-property\">result</span> {\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> .<span class=\"hljs-title function_\">success</span>(data):\n                    continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">returning</span>: data)\n\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-keyword\">let</span> .<span class=\"hljs-title function_\">failure</span>(error):\n                    continuation.<span class=\"hljs-title function_\">resume</span>(<span class=\"hljs-attr\">throwing</span>: error)\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>네트워크 매니저가 이제 async 액터로 변경되었으므로 안전하고 동시성 있는 방식으로 상호 작용하는 방법을 소개합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 코드의 어딘가.</span>\n<span class=\"hljs-keyword\">let</span> network = <span class=\"hljs-title class_\">NetworkManager</span>()\n\n...\n\nfunc <span class=\"hljs-title function_\">getPeople</span>() <span class=\"hljs-keyword\">async</span> -> <span class=\"hljs-title class_\">Result</span>&#x3C;<span class=\"hljs-title class_\">ApiPeopleResponse</span>, <span class=\"hljs-title class_\">Error</span>> {\n    <span class=\"hljs-keyword\">do</span> {\n        <span class=\"hljs-comment\">// API 요청 보내기</span>\n        <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> network.<span class=\"hljs-title function_\">request</span>(<span class=\"hljs-attr\">method</span>: .<span class=\"hljs-property\">get</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"https://swapi.dev/api/people\"</span>, <span class=\"hljs-attr\">headers</span>: [:], <span class=\"hljs-attr\">params</span>: [:], <span class=\"hljs-attr\">of</span>: <span class=\"hljs-title class_\">ApiPeopleResponse</span>.<span class=\"hljs-property\">self</span>)\n        <span class=\"hljs-keyword\">return</span> .<span class=\"hljs-title function_\">success</span>(response)\n    } <span class=\"hljs-keyword\">catch</span> {\n        <span class=\"hljs-keyword\">return</span> .<span class=\"hljs-title function_\">failure</span>(error)\n    }\n}\n\n...\n\n<span class=\"hljs-comment\">// 코드 어딘가에서 비동기 함수 getPeople 호출합니다.</span>\n<span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getPeople</span>()\n<span class=\"hljs-keyword\">switch</span> result {\n<span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-keyword\">let</span> response):\n    <span class=\"hljs-comment\">// 여기에서 데이터 응답 처리</span>\n    <span class=\"hljs-keyword\">break</span>\n\n<span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">failure</span>(<span class=\"hljs-keyword\">let</span> error):\n    <span class=\"hljs-comment\">// 실패한 응답 처리.</span>\n    <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"불러오기 실패: \\(error.localizedDescription)\"</span>)\n    <span class=\"hljs-keyword\">break</span>\n}\n</code></pre>\n<p>아래는 async/await와 함께 작업(tasks)을 활용하는 방법을 간단히 살펴봅니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// async/await와 Task를 함께 사용하는 예제</span>\nfunc <span class=\"hljs-title function_\">getPeople</span>(<span class=\"hljs-params\">completion: @escaping (Result&#x3C;ApiPeopleResponse, <span class=\"hljs-built_in\">Error</span>>) -> Void</span>) {\n    <span class=\"hljs-title class_\">Task</span> {\n        <span class=\"hljs-keyword\">do</span> {\n            <span class=\"hljs-comment\">// API 요청 보내기</span>\n            <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">await</span> network.<span class=\"hljs-title function_\">request</span>(<span class=\"hljs-attr\">method</span>: .<span class=\"hljs-property\">get</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"https://swapi.dev/api/people\"</span>, <span class=\"hljs-attr\">headers</span>: [:], <span class=\"hljs-attr\">params</span>: [:], <span class=\"hljs-attr\">of</span>: <span class=\"hljs-title class_\">ApiPeopleResponse</span>.<span class=\"hljs-property\">self</span>)\n            <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">MainActor</span>.<span class=\"hljs-property\">run</span> {\n                <span class=\"hljs-title function_\">completion</span>(.<span class=\"hljs-title function_\">success</span>(response))\n            }\n        } <span class=\"hljs-keyword\">catch</span> {\n            <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">MainActor</span>.<span class=\"hljs-property\">run</span> {\n                <span class=\"hljs-title function_\">completion</span>(.<span class=\"hljs-title function_\">failure</span>(error))\n            }\n        }\n    }\n}\n\n...\n\n<span class=\"hljs-comment\">// 코드 어딘가에서 완료 함수인 getPeople 호출합니다.</span>\ngetPeople { result <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">switch</span> result {\n    <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">success</span>(<span class=\"hljs-keyword\">let</span> response):\n        <span class=\"hljs-comment\">// 여기에서 데이터 응답 처리</span>\n        <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">failure</span>(<span class=\"hljs-keyword\">let</span> error):\n        <span class=\"hljs-comment\">// 실패한 응답 처리.</span>\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"불러오기 실패: \\(error.localizedDescription)\"</span>)\n        <span class=\"hljs-keyword\">break</span>\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>결론</h1>\n<p>Swift에서의 Async/await는 깔끔하고 유지보수 가능한 비동기 코드 작성을 위한 가능성을 열어줍니다. 이 글을 통해 우리는 이러한 기능에 대해 더 깊게 파고들어 보았고, 에러 처리, 취소, 그리고 중요한 동시성과 같은 고급 기능에 초점을 맞췄습니다. 이러한 개념을 Alamofire와 통합하면 iOS 애플리케이션의 성능과 신뢰성을 향상시킬 수 있습니다. 항상 강조하듯이, 연습이 중요하니 여러분들의 프로젝트에서 이러한 개념을 실험해보는 것을 적극 권장합니다.</p>\n<p>Actor와 task의 사용은 공유 리소스 관리와 효율적인 동시 작업 실행에 대한 우리의 이해를 더욱 확고하게 만들어줍니다. 앞으로 나아가면서 이 경험이 우리에게 계속 더 나은 iOS 개발의 최신 동향을 탐색하고 통합하는 데 영감을 줄 것입니다. 이를 통해 우리의 기술과 애플리케이션이 최신 기술과 함께 선도적인 위치를 유지할 수 있도록 하세요.</p>\n<p><img src=\"/assets/img/2024-06-23-ModernConcurrencyinSwiftAsyncAwaitAlamofire_1.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>iOS 엔지니어링에 대한 더 많은 통찰을 기대해주세요! 코딩을 즐기며 행복하게 일하세요! 🌟👩‍💻👨‍💻📱</p>\n</body>\n</html>\n"},"__N_SSG":true}