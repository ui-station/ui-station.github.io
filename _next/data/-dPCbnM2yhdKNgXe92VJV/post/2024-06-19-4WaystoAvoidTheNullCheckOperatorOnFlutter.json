{"pageProps":{"post":{"title":"4가지 방법으로 플러터에서 널 체크  연산자를 피하는 방법","description":"","date":"2024-06-19 11:24","slug":"2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter","content":"\n![4 Ways to Avoid the Null Check Operator on Flutter](/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_0.png)\n\n널 체크 연산자는 컴파일러에게, 널일 수 있는 변수가 실제로 널이 아님을 알려주는 연산자입니다. 이것은 변수 뒤에 느낌표를 붙여서 수행됩니다. 예를 들어, 아래 코드는 (!) 없이 실행시 오류를 발생시킵니다:\n\n```js\nString getString() {\n  final String? nullableString = null;\n\n  return nullableString!;\n}\n```\n\n이는 기본적으로 \"믿어봐, 안전해!\"라고 컴파일러에 말하며, 코드의 오류를 평가하는 린터가(위의 예제에서는 널이 아닌 함수에서 널이 가능한 문자열을 반환하는 부분) 오류를 발생시키는 것을 방지합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 마크다운 형식으로 변경해보세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_1.png)\n\n문제에서 쉽게 벗어나는 방법입니다. 기본적으로 널 병합 연산자가 하는 일은 연산의 왼쪽 부분을 확인합니다. 만약 왼쪽 부분이 널이 아니라면 그 값을 사용하고, 그렇지 않다면 대신 오른쪽 부분을 사용합니다. 반환 값인 nullableString ?? “”은 다음과 같이 해석할 수 있습니다:\n\n```js\nif (nullableString != null) {\n  return nullableString;\n} else {\n  return \"\";\n}\n```\n\n## 전략 2: 선택적 체이닝 (?.)과 널 병합 (??) 사용하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_2.png)\n\n옵셔널 체이닝 연산자는 오브젝트가 널일 수 있는 상황에서 유용합니다. nullableString?.contains(\"haha\") ?? false 코드는 다음과 같이 해석할 수 있습니다:\n\n```js\nbool value = false;\nif(nullableString != null) {\n  value = nullableString.contains(\"haha\");\n}\n```\n\n또한 이 연산자를 사용하여 조건부로 작업을 호출할 수도 있습니다. 예를 들어 API에서 가져온 널 가능한 데이터 페쳐가 있다면 다음과 같이 호출할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ndataFetcher?.getData();\n```\n\n대신에:\n\n```js\ndataFetcher != null ? dataFetcher.getData() : undefined;\n```\n\n## 전략 3: 삼항 연산자(?) 사용하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_3.png\" />\n\n만약 삼항 연산자에 대해 익숙하지 않다면, 다음과 같이 사용됩니다\n\n```js\ncondition ? valueIfTrue : valueIfFalse;\n```\n\n기본적으로 우리는 사용할 값을 결정하기 위해 미리 조건을 평가합니다. 그러나 긴 메소드에 대해 삼항 연산자를 사용하면 코드가 지저분해 보일 수 있으니 조심하세요, 예를 들어:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_4.png)\n\n그래서 제 시니어로부터 받은 피드백을 기반으로, 긴 삼항 연산 대신 간단한 if-else 문을 사용하는 것이 더 나은 것 같아요. 그들의 규칙은 한 줄이라면 삼항 연산을 사용하는 것이라고 합니다. 저도 그것에 동의합니다.\n\n## 전략 4: 배열에 조건 스프레딩(…?) 사용하기\n\n![image](/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n오늘 이것을 배웠어요. 기본적으로, 우리는 조건부로 목록을 퍼뜨릴 수 있어요. 퍼뜨리기는 한 목록의 모든 값을 다른 목록으로 복사하는 거예요. 이건 배열을 결합하는 데 유용합니다. 위의 코드가 제안한 대로, 조합하는 데 유용한 방법이죠. 만약 배열이 널일 경우 문제가 생길 수 있는데, 그 때는 느낌표(!)를 사용하지 않으면 퍼뜨릴 수 없을 것 같아요. 다행히도 우리에게 조건부 퍼뜨리기는 있어요. 배열이 널이면 아무것도 전달되지 않아요.\n\n코드 [...?item1, ...?item2]은 다음과 같습니다:\n\n```js\nfinal list = [];\nlist.add(item1);\nlist.add(item2);\n```\n\n또는, 멋있게 하고 싶다면:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n[]..add(item1)..add(item2);\n```\n\n이상입니다. 읽어주셔서 감사합니다!\n","ogImage":{"url":"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_0.png"},"coverImage":"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_0.png","tag":["Tech"],"readingTime":5},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_0.png\" alt=\"4 Ways to Avoid the Null Check Operator on Flutter\"></p>\n<p>널 체크 연산자는 컴파일러에게, 널일 수 있는 변수가 실제로 널이 아님을 알려주는 연산자입니다. 이것은 변수 뒤에 느낌표를 붙여서 수행됩니다. 예를 들어, 아래 코드는 (!) 없이 실행시 오류를 발생시킵니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">String</span> <span class=\"hljs-title function_\">getString</span>(<span class=\"hljs-params\"></span>) {\n  final <span class=\"hljs-title class_\">String</span>? nullableString = <span class=\"hljs-literal\">null</span>;\n\n  <span class=\"hljs-keyword\">return</span> nullableString!;\n}\n</code></pre>\n<p>이는 기본적으로 \"믿어봐, 안전해!\"라고 컴파일러에 말하며, 코드의 오류를 평가하는 린터가(위의 예제에서는 널이 아닌 함수에서 널이 가능한 문자열을 반환하는 부분) 오류를 발생시키는 것을 방지합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테이블 태그를 마크다운 형식으로 변경해보세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_1.png\" alt=\"이미지\"></p>\n<p>문제에서 쉽게 벗어나는 방법입니다. 기본적으로 널 병합 연산자가 하는 일은 연산의 왼쪽 부분을 확인합니다. 만약 왼쪽 부분이 널이 아니라면 그 값을 사용하고, 그렇지 않다면 대신 오른쪽 부분을 사용합니다. 반환 값인 nullableString ?? “”은 다음과 같이 해석할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> (nullableString != <span class=\"hljs-literal\">null</span>) {\n  <span class=\"hljs-keyword\">return</span> nullableString;\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n}\n</code></pre>\n<h2>전략 2: 선택적 체이닝 (?.)과 널 병합 (??) 사용하기</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_2.png\" alt=\"image\"></p>\n<p>옵셔널 체이닝 연산자는 오브젝트가 널일 수 있는 상황에서 유용합니다. nullableString?.contains(\"haha\") ?? false 코드는 다음과 같이 해석할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">bool value = <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-keyword\">if</span>(nullableString != <span class=\"hljs-literal\">null</span>) {\n  value = nullableString.<span class=\"hljs-title function_\">contains</span>(<span class=\"hljs-string\">\"haha\"</span>);\n}\n</code></pre>\n<p>또한 이 연산자를 사용하여 조건부로 작업을 호출할 수도 있습니다. 예를 들어 API에서 가져온 널 가능한 데이터 페쳐가 있다면 다음과 같이 호출할 수 있습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">dataFetcher?.<span class=\"hljs-title function_\">getData</span>();\n</code></pre>\n<p>대신에:</p>\n<pre><code class=\"hljs language-js\">dataFetcher != <span class=\"hljs-literal\">null</span> ? dataFetcher.<span class=\"hljs-title function_\">getData</span>() : <span class=\"hljs-literal\">undefined</span>;\n</code></pre>\n<h2>전략 3: 삼항 연산자(?) 사용하기</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_3.png\">\n<p>만약 삼항 연산자에 대해 익숙하지 않다면, 다음과 같이 사용됩니다</p>\n<pre><code class=\"hljs language-js\">condition ? valueIfTrue : valueIfFalse;\n</code></pre>\n<p>기본적으로 우리는 사용할 값을 결정하기 위해 미리 조건을 평가합니다. 그러나 긴 메소드에 대해 삼항 연산자를 사용하면 코드가 지저분해 보일 수 있으니 조심하세요, 예를 들어:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_4.png\" alt=\"image\"></p>\n<p>그래서 제 시니어로부터 받은 피드백을 기반으로, 긴 삼항 연산 대신 간단한 if-else 문을 사용하는 것이 더 나은 것 같아요. 그들의 규칙은 한 줄이라면 삼항 연산을 사용하는 것이라고 합니다. 저도 그것에 동의합니다.</p>\n<h2>전략 4: 배열에 조건 스프레딩(…?) 사용하기</h2>\n<p><img src=\"/assets/img/2024-06-19-4WaystoAvoidTheNullCheckOperatorOnFlutter_5.png\" alt=\"image\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>오늘 이것을 배웠어요. 기본적으로, 우리는 조건부로 목록을 퍼뜨릴 수 있어요. 퍼뜨리기는 한 목록의 모든 값을 다른 목록으로 복사하는 거예요. 이건 배열을 결합하는 데 유용합니다. 위의 코드가 제안한 대로, 조합하는 데 유용한 방법이죠. 만약 배열이 널일 경우 문제가 생길 수 있는데, 그 때는 느낌표(!)를 사용하지 않으면 퍼뜨릴 수 없을 것 같아요. 다행히도 우리에게 조건부 퍼뜨리기는 있어요. 배열이 널이면 아무것도 전달되지 않아요.</p>\n<p>코드 [...?item1, ...?item2]은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">final list = [];\nlist.<span class=\"hljs-title function_\">add</span>(item1);\nlist.<span class=\"hljs-title function_\">add</span>(item2);\n</code></pre>\n<p>또는, 멋있게 하고 싶다면:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">[]..<span class=\"hljs-title function_\">add</span>(item1)..<span class=\"hljs-title function_\">add</span>(item2);\n</code></pre>\n<p>이상입니다. 읽어주셔서 감사합니다!</p>\n</body>\n</html>\n"},"__N_SSG":true}