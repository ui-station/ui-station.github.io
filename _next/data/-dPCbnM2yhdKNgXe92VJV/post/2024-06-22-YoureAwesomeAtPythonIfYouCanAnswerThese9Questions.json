{"pageProps":{"post":{"title":"이 9가지 질문에 답할 수 있다면 당신은 파이썬 전문가입니다","description":"","date":"2024-06-22 23:01","slug":"2024-06-22-YoureAwesomeAtPythonIfYouCanAnswerThese9Questions","content":"\n아래는 링크한 이미지입니다.\n\n9가지 까다로운 파이썬 문제가 있어요. 대부분의 독자들이 적어도 7개 이상의 문제를 벌써 보지 않고 정확하게 대답할 수 없을 거라고 확신해요. 하지만 제가 틀렸다는 것을 증명해 주세요.\n\n범죄는 코드를 실행하거나 다른 자료를 찾는 것을 의미해요.\n\n# 1) 데코레이터 관련 부분\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ndef add(symbol):\ndef wrapper1(func):\ndef wrapper2(*args, \\*\\*kwargs):\nreturn func(*args, \\*\\*kwargs) + symbol\nreturn wrapper1\n\n@add('!!')\ndef hello(name):\nreturn 'hello' + name\n\nprint(hello('tom'))\n\n위 코드를 실행하면 무엇이 출력됩니까?\n\n- A) hello tom\n- B) hello tom!\n- C) hello tom!!\n- D) `function add.`locals`.wrapper1.`locals`.wrapper2 at 0x1053c1080`\n- E) TypeError: ‘NoneType’ object is not callable\n- F) SyntaxError: iterable argument unpacking follows keyword argument unpacking\n\n# 2) 어떤 마법과 같은 메소드들\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def __getattr__(self, key):\n        return '사과'\n\n    def __getattribute__(self, key):\n        return '오렌지'\n\n    def __getitem__(self, key):\n        return '배'\n\ndog = Dog('rocky')\nprint(dog.name)      #??\n```\n\n이것은 무엇을 출력합니까?\n\n- A) `rocky`\n- B) `사과`\n- C) `오렌지`\n- D) `배`\n- E) 구문 오류\n- F) KeyError 오류\n\n# 3) 별의 다발\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nx = [*[1,2]*2*3]\n\nprint(x)\n```\n\nx를 출력하면 무엇이 됩니까?\n\n- A) SyntaxError\n- B) ValueError: too many values to unpack\n- C) [1, 2, 2, 3]\n- D) [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]\n- E) [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n- F) [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]\n\n# 4) List Comprehension Shenanigans\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nout = []\nfor i in [1,2,3]:\n    row = []\n    for j in [4,5,6]:\n        row.append(i+j)\n    out.append(row)\n```\n\n위와 동일한 결과를 얻는 리스트 컴프리헨션은 무엇입니까?\n\n- A) out = [[i+j for j in [4,5,6]] for i in [1,2,3]]\n- B) out = [[i+j for i in [4,5,6]] for j in [1,2,3]]\n- C) out = [i+j for i in [4,5,6] for j in [1,2,3]]\n- D) out = [i+j for j in [1,2,3] for i in [4,5,6]]\n- E) out = [i+j for i,j in zip([1,2,3], [4,5,6])]\n- F) out = [[i,j] for i,j in enumerate(zip(_[1,2,3], _[4,5,6]))]\n\n# 5) Switching Shenanigans\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```python\na, b, c, d = 1, 2, 3, 4\na, b, c, d = b, c, d, a\na, b, c, d = b, c, d, a\na, b, c, d = b, c, d, a\na, b, c, d = b, c, d, a\n\nprint(a, b, c, d)\n```\n\n여기서 출력되는 값은?\n\nA) 1 2 3 4\nB) 2 3 4 1\nC) 3 4 1 2\nD) 4 1 2 3\nE) 4 3 2 1\nF) 1 4 3 2\n\n# 6) 람다 함수\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어떤 람다 함수가 잘못되었나요?\n\n- A) lambda a, b, c: [*(a, b, c)]\n- B) lambda \\*a, \\*\\*b: print(a, b)\n- C) lambda \\**b, *a: print(a, b)\n- D) lambda a, b: map(int, [a, b])\n- E) 위의 모든 람다 함수\n- F) 위의 람다 함수 중에 없음\n\n# 7) 클래스에서의 속임수\n\n```js\nclass Dog:\n    def __getattr__(self, key):\n        return Dog()\n\n    def __getitem__(self, key):\n        return 0\n\ndog = Dog()\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 중 어떤 옵션이 오류를 발생시키나요?\n\n- A) dog._.\\_\\_._.**_._.**.**\\_\\_\\_**.\\_.**\\_.\\_\\_\\_**.\\_\\_\n- B) dog.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗\n- C) dog.狗.狗[`apple 3.14159`]\n- D) dog.**123._1234._**654\n- E) dog[dog]\n- F) dog.14*.\\_14.14*.\\_14\n\n```js\nx = -1--2---3----4-----5\nprint(x)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nx를 출력하면 무엇이 발생하나요?\n\n- A) SyntaxError\n- B) OperatorError\n- C) IndentationError\n- D) MemoryError\n- E) -1\n- F) -3\n\n## 9) 비트 조작\n\n```js\nx = 9;\nx = ((((~~~~x << 5) >> 2) << 5) >> 8) | ((9 & 9) ^ 16 ^ 16);\nprint(x);\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 표를 Markdown 형식으로 변경하면 다음과 같습니다.\n\n---\n\n**What happens when we print x?**\n\n- A) 0\n- B) -9\n- C) 9\n- D) 25\n- E) ZeroDivisionError\n- F) SyntaxError\n\n---\n\n# 경고 — 아래에 정답이 있습니다\n\n이를 확인하시기 전에 조금 시간을 내어 스스로 시도해보시고, 가능하면 참고하지 않고 풀어보세요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 1) 장식자 관련\n\n```javascript\ndef add(symbol):\n    def wrapper1(func):\n        def wrapper2(*args, **kwargs):\n            return func(*args, **kwargs) + symbol\n    return wrapper1\n\n@add('!!')\ndef hello(name):\n    return 'hello' + name\n\nprint(hello('tom'))\n```\n\n무엇이 출력됩니까?\n\n- A) hello tom\n- B) hello tom!\n- C) hello tom!!\n- D) `function add.`locals`.wrapper1.`locals`.wrapper2 at 0x1053c1080`\n- E) TypeError: 'NoneType' object is not callable\n- F) SyntaxError: iterable argument unpacking follows keyword argument unpacking\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음을 출력합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- A) `rocky`\n- B) `apple`\n- C) `orange`\n- D) `pear`\n- E) Syntax 오류 발생\n- F) KeyError 발생\n\n- `__getattr__`은 우리가 `dog.key`를 할 때 key가 존재하지 않을 때의 동작을 정의합니다.\n- `__getattribute__`은 우리가 `dog.key`를 할 때 key가 존재 여부에 관계없이 동작을 정의합니다. 이는 `__getattr__`을 덮어씁니다.\n- `__getitem__`은 `dog[key]`를 할 때의 동작을 정의합니다. 이 메서드는 사용되지 않습니다.\n\n# 3) 별의 무리\n\n```js\nx = [*[1,2]*2*3]\n\nprint(x)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n`x`를 출력하면 무엇이 될까요?\n\n- A) SyntaxError\n- B) ValueError: too many values to unpack\n- C) [1, 2, 2, 3]\n- D) [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]\n- E) [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n- F) [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]\n\n```js\nx = [*[1,2]*2*3]\n  = [* ([1,2]*2*3) ]\n  = [* ([1,2,1,2]*3) ]\n  = [* [1,2,1,2,1,2,1,2,1,2,1,2] ]\n  = [1,2,1,2,1,2,1,2,1,2,1,2]\n```\n\n^ 처음 *은 언팩하고, 이후 *는 곱셈합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 4) 리스트 내포 흥분\n\n```js\nout = []\nfor i in [1,2,3]:\n    row = []\n    for j in [4,5,6]:\n        row.append(i+j)\n    out.append(row)\n```\n\n위와 동일한 작업을 하는 리스트 내포는 무엇입니까?\n\n- A) out = [[i+j for j in [4,5,6]] for i in [1,2,3]]\n- B) out = [i+j for i,j in [i for i in [[1,2,3],[4,5,6]]]]\n- C) out = [i+j for i in [4,5,6] for j in [1,2,3]]\n- D) out = [i+j for j in [1,2,3] for i in [4,5,6]]\n- E) out = [i+j for i,j in zip([1,2,3], [4,5,6])]\n- F) out = [[i,j] for i,j in enumerate(zip(_[1,2,3], _[4,5,6])]\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nB, E 그리고 F는 무의미해요. C와 D는 중첩된 목록을 생성하지 않아요.\n\n# 5) 변환 광기\n\n```js\na, b, c, (d = 1), 2, 3, 4;\na, b, c, (d = b), c, d, a;\na, b, c, (d = b), c, d, a;\na, b, c, (d = b), c, d, a;\na, b, c, (d = b), c, d, a;\n\nprint(a, b, c, d);\n```\n\n여기서 무엇이 출력될까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- A) 1 2 3 4\n- B) 2 3 4 1\n- C) 3 4 1 2\n- D) 4 1 2 3\n- E) 4 3 2 1\n- F) 1 4 3 2\n\n```js\na, b, c, d = 1, 2, 3, 4    # a=1 b=2 c=3 d=4\na, b, c, d = b, c, d, a    # a=2 b=3 c=4 d=1\na, b, c, d = b, c, d, a    # a=3 b=4 c=1 d=2\na, b, c, d = b, c, d, a    # a=4 b=1 c=2 d=3\na, b, c, d = b, c, d, a    # a=1 b=2 c=3 d=4\n```\n\n매번 a, b, c, d = b, c, d, a를 실행할 때마다, a, b, c, d의 값이 오른쪽으로 한 칸씩 이동합니다. 그러나 이를 4번 반복하면 1, 2, 3, 4로 다시 돌아옵니다.\n\n# 6) 람다 함수\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어떤 lambda 함수가 잘못되었나요?\n\n- A) lambda a, b, c: [*(a, b, c)]\n- B) lambda \\*a, \\*\\*b: print(a, b)\n- C) lambda \\**b, *a: print(a, b)\n- D) lambda a, b: map(int, [a, b])\n- E) 위의 모든 람다 함수\n- F) 위의 람다 함수 중에 없음\n\n함수를 정의할 때 (람다 함수 포함), 모든 *args는 **kwargs보다 먼저 정의되어야 합니다. C)에서 **b가 *a보다 먼저 정의되어서 틀렸어요.\n\n# 7) Class Shenanigans\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nclass Dog {\n    override fun __getattr__(key: String): Dog {\n        return Dog()\n    }\n\n    override fun __getitem__(key: String): Int {\n        return 0\n    }\n}\n\nval dog = Dog()\n```\n\n다음 중 어떤 옵션이 오류를 발생시킵니까?\n\n- A) dog._.\\_\\_._.**_._.**.**\\_\\_\\_**.\\_.**\\_.\\_\\_\\_**.\\_\\_\n- B) dog.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗\n- C) dog.狗.狗[`apple 3.14159`]\n- D) dog.**123._1234._**654\n- E) dog[dog]\n- F) dog.14*.\\_14.14*.\\_14\n\n- A) **getattr**이 또 다른 Dog 개체를 반환하므로, .\\_\\_ 등을 사용해도 계속 Dog 개체를 얻게됩니다\n- B) A와 같지만, 중국어 유니코드 문자를 사용하여 유효한 변수 이름을 사용합니다\n- C) A와 동일합니다. 하지만 키 값을 사용하여 dog[key]를 마지막에 사용하므로 0을 얻습니다\n- D) A와 동일합니다. 변수 이름은 \\_\\_로 시작하고 숫자를 포함할 수 있습니다\n- E) 이것은 단순히 0을 반환합니다\n- F) 변수 이름은 숫자로 시작할 수 없습니다. 따라서 이는 잘못된 것입니다\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 8) -\n\n```js\nx = -1--2---3----4-----5\nprint(x)\n```\n\nWhen we print x, the output will be:\n\n- F) -3\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nx = -5       # x는 -5\nx = --5      # x는 5\nx = ---5     # x는 -5\nx = ----5    # x는 5\nx = -----5   # x는 -5\n```\n\n^ 숫자 5 앞에 더 많은 -를 추가하면 계속해서 부호가 뒤바뀔 것인데, 음수 음수 5는 5와 같습니다.\n\n```js\nx = -1--2---3----4-----5\n  = -1-(-2)-(--3)-(---4)-(----5)\n  = -1-(-2)-(3)-(-4)-(5)\n  = -1+2-3+4-5\n  = -3\n```\n\n# 9) 비트 연산 광기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nx = 9;\nx = ((((~~x << 5) >> 2) << 5) >> 8) | ((9 & 9) ^ 16 ^ 16);\nprint(x);\n```\n\nx를 인쇄할 때 무슨 일이 벌어질까요?\n\n- A) 0\n- B) -9\n- C) 9\n- D) 25\n- E) ZeroDivisionError\n- F) SyntaxError\n\n- x `5` 2 `5` 8는 x를 왼쪽으로 5번 이동시키고, 오른쪽으로 2번 이동시키고, 다시 왼쪽으로 5번 이동시키고, 오른쪽으로 8번 이동시킵니다. 이 작업은 x에 아무런 영향을 미치지 않아서 결과적으로 x는 9로 유지됩니다.\n- 9 | 9는 단순히 9를 반환합니다.\n- 9 & 9는 단순히 9를 반환합니다.\n- 9 ^ 16 (XOR 연산자)는 25를 반환합니다.\n- 그러나 우리가 두 번 XOR을 한다면, 9를 다시 돌려받을 것입니다.\n- (9 ^ 16) ^ 16은 다시 한 번 9를 돌려줄 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이 중 몇 개를 참으로 대답할 수 있었나요? 법을 어겨 대답하지 않고 성공했다면 멋집니다!\n\n- 모두 정확히 대답했다면 잘 했어요!\n- 적어도 7개 이상을 맞추었다면 여전히 멋져요!\n- 그렇지 않다면 괜찮아요 — 이것이 당신이 파이썬을 잘못 이해했다는 것을 의미하는 것은 아닙니다.\n\n이 문제들을 시도하면서 즐거운 시간 보냈기를 바랍니다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 만약 나를 창작자로 지원하고 싶다면\n\n- 이 이야기에 대해 50번 박수를 치세요\n- 당신의 생각을 나에게 남겨주세요\n- 이야기 중 가장 마음에 드는 부분을 강조해주세요\n\n감사합니다! 이 작은 조치들이 큰 영향을 미치고, 정말 감사드립니다!\n\nYouTube: https://www.youtube.com/@zlliu246\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nLinkedIn: [https://www.linkedin.com/in/zlliu/](https://www.linkedin.com/in/zlliu/)\n","ogImage":{"url":"/assets/img/2024-06-22-YoureAwesomeAtPythonIfYouCanAnswerThese9Questions_0.png"},"coverImage":"/assets/img/2024-06-22-YoureAwesomeAtPythonIfYouCanAnswerThese9Questions_0.png","tag":["Tech"],"readingTime":15},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>아래는 링크한 이미지입니다.</p>\n<p>9가지 까다로운 파이썬 문제가 있어요. 대부분의 독자들이 적어도 7개 이상의 문제를 벌써 보지 않고 정확하게 대답할 수 없을 거라고 확신해요. 하지만 제가 틀렸다는 것을 증명해 주세요.</p>\n<p>범죄는 코드를 실행하거나 다른 자료를 찾는 것을 의미해요.</p>\n<h1>1) 데코레이터 관련 부분</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>def add(symbol):\ndef wrapper1(func):\ndef wrapper2(*args, **kwargs):\nreturn func(*args, **kwargs) + symbol\nreturn wrapper1</p>\n<p>@add('!!')\ndef hello(name):\nreturn 'hello' + name</p>\n<p>print(hello('tom'))</p>\n<p>위 코드를 실행하면 무엇이 출력됩니까?</p>\n<ul>\n<li>A) hello tom</li>\n<li>B) hello tom!</li>\n<li>C) hello tom!!</li>\n<li>D) <code>function add.</code>locals<code>.wrapper1.</code>locals<code>.wrapper2 at 0x1053c1080</code></li>\n<li>E) TypeError: ‘NoneType’ object is not callable</li>\n<li>F) SyntaxError: iterable argument unpacking follows keyword argument unpacking</li>\n</ul>\n<h1>2) 어떤 마법과 같은 메소드들</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, name</span>):\n        self.name = name\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__getattr__</span>(<span class=\"hljs-params\">self, key</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'사과'</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__getattribute__</span>(<span class=\"hljs-params\">self, key</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'오렌지'</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__getitem__</span>(<span class=\"hljs-params\">self, key</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'배'</span>\n\ndog = Dog(<span class=\"hljs-string\">'rocky'</span>)\n<span class=\"hljs-built_in\">print</span>(dog.name)      <span class=\"hljs-comment\">#??</span>\n</code></pre>\n<p>이것은 무엇을 출력합니까?</p>\n<ul>\n<li>A) <code>rocky</code></li>\n<li>B) <code>사과</code></li>\n<li>C) <code>오렌지</code></li>\n<li>D) <code>배</code></li>\n<li>E) 구문 오류</li>\n<li>F) KeyError 오류</li>\n</ul>\n<h1>3) 별의 다발</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">x = [*[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]*<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-title function_\">print</span>(x)\n</code></pre>\n<p>x를 출력하면 무엇이 됩니까?</p>\n<ul>\n<li>A) SyntaxError</li>\n<li>B) ValueError: too many values to unpack</li>\n<li>C) [1, 2, 2, 3]</li>\n<li>D) [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]</li>\n<li>E) [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]</li>\n<li>F) [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]</li>\n</ul>\n<h1>4) List Comprehension Shenanigans</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">out = []\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]:\n    row = []\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]:\n        row.<span class=\"hljs-title function_\">append</span>(i+j)\n    out.<span class=\"hljs-title function_\">append</span>(row)\n</code></pre>\n<p>위와 동일한 결과를 얻는 리스트 컴프리헨션은 무엇입니까?</p>\n<ul>\n<li>A) out = [[i+j for j in [4,5,6]] for i in [1,2,3]]</li>\n<li>B) out = [[i+j for i in [4,5,6]] for j in [1,2,3]]</li>\n<li>C) out = [i+j for i in [4,5,6] for j in [1,2,3]]</li>\n<li>D) out = [i+j for j in [1,2,3] for i in [4,5,6]]</li>\n<li>E) out = [i+j for i,j in zip([1,2,3], [4,5,6])]</li>\n<li>F) out = [[i,j] for i,j in enumerate(zip(_[1,2,3], _[4,5,6]))]</li>\n</ul>\n<h1>5) Switching Shenanigans</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-python\">a, b, c, d = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>\na, b, c, d = b, c, d, a\na, b, c, d = b, c, d, a\na, b, c, d = b, c, d, a\na, b, c, d = b, c, d, a\n\n<span class=\"hljs-built_in\">print</span>(a, b, c, d)\n</code></pre>\n<p>여기서 출력되는 값은?</p>\n<p>A) 1 2 3 4\nB) 2 3 4 1\nC) 3 4 1 2\nD) 4 1 2 3\nE) 4 3 2 1\nF) 1 4 3 2</p>\n<h1>6) 람다 함수</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>어떤 람다 함수가 잘못되었나요?</p>\n<ul>\n<li>A) lambda a, b, c: [*(a, b, c)]</li>\n<li>B) lambda *a, **b: print(a, b)</li>\n<li>C) lambda **b, *a: print(a, b)</li>\n<li>D) lambda a, b: map(int, [a, b])</li>\n<li>E) 위의 모든 람다 함수</li>\n<li>F) 위의 람다 함수 중에 없음</li>\n</ul>\n<h1>7) 클래스에서의 속임수</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>:\n    def <span class=\"hljs-title function_\">__getattr__</span>(self, key):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Dog</span>()\n\n    def <span class=\"hljs-title function_\">__getitem__</span>(self, key):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\ndog = <span class=\"hljs-title class_\">Dog</span>()\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음 중 어떤 옵션이 오류를 발생시키나요?</p>\n<ul>\n<li>A) dog.<em>.__.</em>.<strong><em>.</em>.</strong>.<strong>___</strong>._.<strong>_.___</strong>.__</li>\n<li>B) dog.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗</li>\n<li>C) dog.狗.狗[<code>apple 3.14159</code>]</li>\n<li>D) dog.<strong>123.<em>1234.</em></strong>654</li>\n<li>E) dog[dog]</li>\n<li>F) dog.14*._14.14*._14</li>\n</ul>\n<pre><code class=\"hljs language-js\">x = -<span class=\"hljs-number\">1</span>--<span class=\"hljs-number\">2</span>---<span class=\"hljs-number\">3</span>----<span class=\"hljs-number\">4</span>-----<span class=\"hljs-number\">5</span>\n<span class=\"hljs-title function_\">print</span>(x)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>x를 출력하면 무엇이 발생하나요?</p>\n<ul>\n<li>A) SyntaxError</li>\n<li>B) OperatorError</li>\n<li>C) IndentationError</li>\n<li>D) MemoryError</li>\n<li>E) -1</li>\n<li>F) -3</li>\n</ul>\n<h2>9) 비트 조작</h2>\n<pre><code class=\"hljs language-js\">x = <span class=\"hljs-number\">9</span>;\nx = ((((~~~~x &#x3C;&#x3C; <span class=\"hljs-number\">5</span>) >> <span class=\"hljs-number\">2</span>) &#x3C;&#x3C; <span class=\"hljs-number\">5</span>) >> <span class=\"hljs-number\">8</span>) | ((<span class=\"hljs-number\">9</span> &#x26; <span class=\"hljs-number\">9</span>) ^ <span class=\"hljs-number\">16</span> ^ <span class=\"hljs-number\">16</span>);\n<span class=\"hljs-title function_\">print</span>(x);\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 표를 Markdown 형식으로 변경하면 다음과 같습니다.</p>\n<hr>\n<p><strong>What happens when we print x?</strong></p>\n<ul>\n<li>A) 0</li>\n<li>B) -9</li>\n<li>C) 9</li>\n<li>D) 25</li>\n<li>E) ZeroDivisionError</li>\n<li>F) SyntaxError</li>\n</ul>\n<hr>\n<h1>경고 — 아래에 정답이 있습니다</h1>\n<p>이를 확인하시기 전에 조금 시간을 내어 스스로 시도해보시고, 가능하면 참고하지 않고 풀어보세요!</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>1) 장식자 관련</h1>\n<pre><code class=\"hljs language-javascript\">def <span class=\"hljs-title function_\">add</span>(symbol):\n    def <span class=\"hljs-title function_\">wrapper1</span>(func):\n        def <span class=\"hljs-title function_\">wrapper2</span>(*args, **kwargs):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(*args, **kwargs) + symbol\n    <span class=\"hljs-keyword\">return</span> wrapper1\n\n@<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">'!!'</span>)\ndef <span class=\"hljs-title function_\">hello</span>(name):\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'hello'</span> + name\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-string\">'tom'</span>))\n</code></pre>\n<p>무엇이 출력됩니까?</p>\n<ul>\n<li>A) hello tom</li>\n<li>B) hello tom!</li>\n<li>C) hello tom!!</li>\n<li>D) <code>function add.</code>locals<code>.wrapper1.</code>locals<code>.wrapper2 at 0x1053c1080</code></li>\n<li>E) TypeError: 'NoneType' object is not callable</li>\n<li>F) SyntaxError: iterable argument unpacking follows keyword argument unpacking</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음을 출력합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>\n<p>A) <code>rocky</code></p>\n</li>\n<li>\n<p>B) <code>apple</code></p>\n</li>\n<li>\n<p>C) <code>orange</code></p>\n</li>\n<li>\n<p>D) <code>pear</code></p>\n</li>\n<li>\n<p>E) Syntax 오류 발생</p>\n</li>\n<li>\n<p>F) KeyError 발생</p>\n</li>\n<li>\n<p><code>__getattr__</code>은 우리가 <code>dog.key</code>를 할 때 key가 존재하지 않을 때의 동작을 정의합니다.</p>\n</li>\n<li>\n<p><code>__getattribute__</code>은 우리가 <code>dog.key</code>를 할 때 key가 존재 여부에 관계없이 동작을 정의합니다. 이는 <code>__getattr__</code>을 덮어씁니다.</p>\n</li>\n<li>\n<p><code>__getitem__</code>은 <code>dog[key]</code>를 할 때의 동작을 정의합니다. 이 메서드는 사용되지 않습니다.</p>\n</li>\n</ul>\n<h1>3) 별의 무리</h1>\n<pre><code class=\"hljs language-js\">x = [*[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]*<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-title function_\">print</span>(x)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><code>x</code>를 출력하면 무엇이 될까요?</p>\n<ul>\n<li>A) SyntaxError</li>\n<li>B) ValueError: too many values to unpack</li>\n<li>C) [1, 2, 2, 3]</li>\n<li>D) [[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]</li>\n<li>E) [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]</li>\n<li>F) [[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]]</li>\n</ul>\n<pre><code class=\"hljs language-js\">x = [*[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]*<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">3</span>]\n  = [* ([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]*<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">3</span>) ]\n  = [* ([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]*<span class=\"hljs-number\">3</span>) ]\n  = [* [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>] ]\n  = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]\n</code></pre>\n<p>^ 처음 *은 언팩하고, 이후 *는 곱셈합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>4) 리스트 내포 흥분</h1>\n<pre><code class=\"hljs language-js\">out = []\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]:\n    row = []\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]:\n        row.<span class=\"hljs-title function_\">append</span>(i+j)\n    out.<span class=\"hljs-title function_\">append</span>(row)\n</code></pre>\n<p>위와 동일한 작업을 하는 리스트 내포는 무엇입니까?</p>\n<ul>\n<li>A) out = [[i+j for j in [4,5,6]] for i in [1,2,3]]</li>\n<li>B) out = [i+j for i,j in [i for i in [[1,2,3],[4,5,6]]]]</li>\n<li>C) out = [i+j for i in [4,5,6] for j in [1,2,3]]</li>\n<li>D) out = [i+j for j in [1,2,3] for i in [4,5,6]]</li>\n<li>E) out = [i+j for i,j in zip([1,2,3], [4,5,6])]</li>\n<li>F) out = [[i,j] for i,j in enumerate(zip(_[1,2,3], _[4,5,6])]</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>B, E 그리고 F는 무의미해요. C와 D는 중첩된 목록을 생성하지 않아요.</p>\n<h1>5) 변환 광기</h1>\n<pre><code class=\"hljs language-js\">a, b, c, (d = <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>;\na, b, c, (d = b), c, d, a;\na, b, c, (d = b), c, d, a;\na, b, c, (d = b), c, d, a;\na, b, c, (d = b), c, d, a;\n\n<span class=\"hljs-title function_\">print</span>(a, b, c, d);\n</code></pre>\n<p>여기서 무엇이 출력될까요?</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>A) 1 2 3 4</li>\n<li>B) 2 3 4 1</li>\n<li>C) 3 4 1 2</li>\n<li>D) 4 1 2 3</li>\n<li>E) 4 3 2 1</li>\n<li>F) 1 4 3 2</li>\n</ul>\n<pre><code class=\"hljs language-js\">a, b, c, d = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>    # a=<span class=\"hljs-number\">1</span> b=<span class=\"hljs-number\">2</span> c=<span class=\"hljs-number\">3</span> d=<span class=\"hljs-number\">4</span>\na, b, c, d = b, c, d, a    # a=<span class=\"hljs-number\">2</span> b=<span class=\"hljs-number\">3</span> c=<span class=\"hljs-number\">4</span> d=<span class=\"hljs-number\">1</span>\na, b, c, d = b, c, d, a    # a=<span class=\"hljs-number\">3</span> b=<span class=\"hljs-number\">4</span> c=<span class=\"hljs-number\">1</span> d=<span class=\"hljs-number\">2</span>\na, b, c, d = b, c, d, a    # a=<span class=\"hljs-number\">4</span> b=<span class=\"hljs-number\">1</span> c=<span class=\"hljs-number\">2</span> d=<span class=\"hljs-number\">3</span>\na, b, c, d = b, c, d, a    # a=<span class=\"hljs-number\">1</span> b=<span class=\"hljs-number\">2</span> c=<span class=\"hljs-number\">3</span> d=<span class=\"hljs-number\">4</span>\n</code></pre>\n<p>매번 a, b, c, d = b, c, d, a를 실행할 때마다, a, b, c, d의 값이 오른쪽으로 한 칸씩 이동합니다. 그러나 이를 4번 반복하면 1, 2, 3, 4로 다시 돌아옵니다.</p>\n<h1>6) 람다 함수</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>어떤 lambda 함수가 잘못되었나요?</p>\n<ul>\n<li>A) lambda a, b, c: [*(a, b, c)]</li>\n<li>B) lambda *a, **b: print(a, b)</li>\n<li>C) lambda **b, *a: print(a, b)</li>\n<li>D) lambda a, b: map(int, [a, b])</li>\n<li>E) 위의 모든 람다 함수</li>\n<li>F) 위의 람다 함수 중에 없음</li>\n</ul>\n<p>함수를 정의할 때 (람다 함수 포함), 모든 *args는 **kwargs보다 먼저 정의되어야 합니다. C)에서 **b가 *a보다 먼저 정의되어서 틀렸어요.</p>\n<h1>7) Class Shenanigans</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> {\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">__getattr__</span><span class=\"hljs-params\">(key: <span class=\"hljs-type\">String</span>)</span></span>: Dog {\n        <span class=\"hljs-keyword\">return</span> Dog()\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">__getitem__</span><span class=\"hljs-params\">(key: <span class=\"hljs-type\">String</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n}\n\n<span class=\"hljs-keyword\">val</span> dog = Dog()\n</code></pre>\n<p>다음 중 어떤 옵션이 오류를 발생시킵니까?</p>\n<ul>\n<li>\n<p>A) dog.<em>.__.</em>.<strong><em>.</em>.</strong>.<strong>___</strong>._.<strong>_.___</strong>.__</p>\n</li>\n<li>\n<p>B) dog.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗.狗</p>\n</li>\n<li>\n<p>C) dog.狗.狗[<code>apple 3.14159</code>]</p>\n</li>\n<li>\n<p>D) dog.<strong>123.<em>1234.</em></strong>654</p>\n</li>\n<li>\n<p>E) dog[dog]</p>\n</li>\n<li>\n<p>F) dog.14*._14.14*._14</p>\n</li>\n<li>\n<p>A) <strong>getattr</strong>이 또 다른 Dog 개체를 반환하므로, .__ 등을 사용해도 계속 Dog 개체를 얻게됩니다</p>\n</li>\n<li>\n<p>B) A와 같지만, 중국어 유니코드 문자를 사용하여 유효한 변수 이름을 사용합니다</p>\n</li>\n<li>\n<p>C) A와 동일합니다. 하지만 키 값을 사용하여 dog[key]를 마지막에 사용하므로 0을 얻습니다</p>\n</li>\n<li>\n<p>D) A와 동일합니다. 변수 이름은 __로 시작하고 숫자를 포함할 수 있습니다</p>\n</li>\n<li>\n<p>E) 이것은 단순히 0을 반환합니다</p>\n</li>\n<li>\n<p>F) 변수 이름은 숫자로 시작할 수 없습니다. 따라서 이는 잘못된 것입니다</p>\n</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>8) -</h1>\n<pre><code class=\"hljs language-js\">x = -<span class=\"hljs-number\">1</span>--<span class=\"hljs-number\">2</span>---<span class=\"hljs-number\">3</span>----<span class=\"hljs-number\">4</span>-----<span class=\"hljs-number\">5</span>\n<span class=\"hljs-title function_\">print</span>(x)\n</code></pre>\n<p>When we print x, the output will be:</p>\n<ul>\n<li>F) -3</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">x = -<span class=\"hljs-number\">5</span>       # x는 -<span class=\"hljs-number\">5</span>\nx = --<span class=\"hljs-number\">5</span>      # x는 <span class=\"hljs-number\">5</span>\nx = ---<span class=\"hljs-number\">5</span>     # x는 -<span class=\"hljs-number\">5</span>\nx = ----<span class=\"hljs-number\">5</span>    # x는 <span class=\"hljs-number\">5</span>\nx = -----<span class=\"hljs-number\">5</span>   # x는 -<span class=\"hljs-number\">5</span>\n</code></pre>\n<p>^ 숫자 5 앞에 더 많은 -를 추가하면 계속해서 부호가 뒤바뀔 것인데, 음수 음수 5는 5와 같습니다.</p>\n<pre><code class=\"hljs language-js\">x = -<span class=\"hljs-number\">1</span>--<span class=\"hljs-number\">2</span>---<span class=\"hljs-number\">3</span>----<span class=\"hljs-number\">4</span>-----<span class=\"hljs-number\">5</span>\n  = -<span class=\"hljs-number\">1</span>-(-<span class=\"hljs-number\">2</span>)-(--<span class=\"hljs-number\">3</span>)-(---<span class=\"hljs-number\">4</span>)-(----<span class=\"hljs-number\">5</span>)\n  = -<span class=\"hljs-number\">1</span>-(-<span class=\"hljs-number\">2</span>)-(<span class=\"hljs-number\">3</span>)-(-<span class=\"hljs-number\">4</span>)-(<span class=\"hljs-number\">5</span>)\n  = -<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">4</span>-<span class=\"hljs-number\">5</span>\n  = -<span class=\"hljs-number\">3</span>\n</code></pre>\n<h1>9) 비트 연산 광기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">x = <span class=\"hljs-number\">9</span>;\nx = ((((~~x &#x3C;&#x3C; <span class=\"hljs-number\">5</span>) >> <span class=\"hljs-number\">2</span>) &#x3C;&#x3C; <span class=\"hljs-number\">5</span>) >> <span class=\"hljs-number\">8</span>) | ((<span class=\"hljs-number\">9</span> &#x26; <span class=\"hljs-number\">9</span>) ^ <span class=\"hljs-number\">16</span> ^ <span class=\"hljs-number\">16</span>);\n<span class=\"hljs-title function_\">print</span>(x);\n</code></pre>\n<p>x를 인쇄할 때 무슨 일이 벌어질까요?</p>\n<ul>\n<li>\n<p>A) 0</p>\n</li>\n<li>\n<p>B) -9</p>\n</li>\n<li>\n<p>C) 9</p>\n</li>\n<li>\n<p>D) 25</p>\n</li>\n<li>\n<p>E) ZeroDivisionError</p>\n</li>\n<li>\n<p>F) SyntaxError</p>\n</li>\n<li>\n<p>x <code>5</code> 2 <code>5</code> 8는 x를 왼쪽으로 5번 이동시키고, 오른쪽으로 2번 이동시키고, 다시 왼쪽으로 5번 이동시키고, 오른쪽으로 8번 이동시킵니다. 이 작업은 x에 아무런 영향을 미치지 않아서 결과적으로 x는 9로 유지됩니다.</p>\n</li>\n<li>\n<p>9 | 9는 단순히 9를 반환합니다.</p>\n</li>\n<li>\n<p>9 &#x26; 9는 단순히 9를 반환합니다.</p>\n</li>\n<li>\n<p>9 ^ 16 (XOR 연산자)는 25를 반환합니다.</p>\n</li>\n<li>\n<p>그러나 우리가 두 번 XOR을 한다면, 9를 다시 돌려받을 것입니다.</p>\n</li>\n<li>\n<p>(9 ^ 16) ^ 16은 다시 한 번 9를 돌려줄 것입니다.</p>\n</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>결론</h1>\n<p>이 중 몇 개를 참으로 대답할 수 있었나요? 법을 어겨 대답하지 않고 성공했다면 멋집니다!</p>\n<ul>\n<li>모두 정확히 대답했다면 잘 했어요!</li>\n<li>적어도 7개 이상을 맞추었다면 여전히 멋져요!</li>\n<li>그렇지 않다면 괜찮아요 — 이것이 당신이 파이썬을 잘못 이해했다는 것을 의미하는 것은 아닙니다.</li>\n</ul>\n<p>이 문제들을 시도하면서 즐거운 시간 보냈기를 바랍니다!</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>만약 나를 창작자로 지원하고 싶다면</h1>\n<ul>\n<li>이 이야기에 대해 50번 박수를 치세요</li>\n<li>당신의 생각을 나에게 남겨주세요</li>\n<li>이야기 중 가장 마음에 드는 부분을 강조해주세요</li>\n</ul>\n<p>감사합니다! 이 작은 조치들이 큰 영향을 미치고, 정말 감사드립니다!</p>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n</body>\n</html>\n"},"__N_SSG":true}