{"pageProps":{"post":{"title":"Swift에서의 유니트 테스트 시작 가이드","description":"","date":"2024-05-23 13:12","slug":"2024-05-23-UnitTestinSwiftAStartingGuide","content":"\n# iOS 프로젝트에 단위 테스트 추가하는 방법과 테스트에 관한 주요 개념 배우기\n\n![image](/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_0.png)\n\n버그를 고치는 걸 좋아하시나요?\n\n확실히 싫어하시죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n안녕하세요! 적절한 유닛 테스트 구조를 갖는 것은 미래에 머리 아픈 문제를 피하는 데 도움이 됩니다.\n\n단위 테스트는 당신이 만든 모든 변경 사항 후에 코드가 여전히 예상대로 작동하는지 확인하고, 새 코드를 프로덕션 환경에 배포할 때 더 확신을 갖게 해주며, 전체 코드 품질을 향상시키고, 코드베이스 복잡성을 줄이는 등의 암묵적인 이점이 있습니다.\n\n이제 테스트의 주요 개념과 iOS 프로젝트에 어떻게 추가하는지 알아봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단위 테스트란 무엇인가요?\n\n우리가 함께 이야기할 때, 단위 테스트는 우리 애플리케이션 코드의 작은, 독립적이며 명확한 블록(유닛이라고도 함)이 예상대로 작동하는 지를 확인하는 코드 조각들이라고 말할 수 있어요.\n\n### 테스트 구조\n\n코딩 부분으로 바로 들어가기 전에 이해해야 할 여러 구성 요소가 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![UnitTestinSwiftAStartingGuide_1.png](/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_1.png)\n\n- 테스트 메소드는 코드 일부를 유효성 검사하는 메소드입니다. 여기서 우리는 테스트를 생성하고 개발합니다. 이러한 메소드는 테스트 결과를 생성하며, 통과하거나 실패할 수 있습니다.\n- 테스트 클래스는 테스트 메소드의 집합입니다. 일반적으로 특정 로직을 테스트하는 데 사용되며, 예를 들어 인증(Authentication)을 그룹화합니다.\n- 테스트 번들에는 테스트 클래스의 집합이 포함되며, 두 가지 테스트 유형 중 하나인 Unit 또는 UI를 나타냅니다.\n- 테스트 계획은 테스트 번들의 집합이며, 여기에는 Unit 및 UI 테스트를 모두 포함할 수 있습니다. 테스트 계획에서는 테스트 실행 시 고려해야 할 구성 목록을 설정합니다.\n\n# 테스트 번들 생성으로 시작\n\n`파일` -> `새로 만들기` -> `타겟`으로 이동하여 Unit Testing Bundle을 검색합니다. 대상에 적절한 이름을 지정하고 일반적으로 앱 이름 뒤에 Tests로 끝납니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트 번들을 만들면 기본 구성으로 테스트 계획이 자동으로 생성됩니다.\n\n![Unit Testing in Swift: A Starting Guide](/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_2.png)\n\n# 단위 테스트 설정하기\n\n모든 프로그래밍 언어에는 단위 테스트를 실행하기 위한 프레임워크나 라이브러리가 있습니다. iOS 개발 환경에서는 XCTest 프레임워크를 사용합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 테스트 번들이 준비되었으니 새로운 테스트 클래스를 추가할 수 있습니다. 네비게이션 패널이나 메뉴(File -> File -> Unit Test Case Class)를 통해 새로 만들어주세요.\n\nOrderManager 클래스 뒤에 있는 로직을 테스트하기를 원하므로, 테스트 클래스의 좋은 이름은 OrderTests가 될 것 같아요.\n\n```js\n// 새 주문 추가\nfunc add(_ order: Order) throws { ... }\n// 마지막 주문을 반복하며 주문 목록에 추가\nfunc repeatLastOrder() { ... }\n```\n\n테스트 클래스 안에 각 함수마다 테스트 메소드를 만들어봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n앱의 코드에 접근하지 않고 파일 단위로 공유하지 않고 테스트 대상에서 앱의 코드에 액세스하려면 @testable 지시문을 추가하고 앱을 가져와야 합니다.\n\n```swift\nimport XCTest\n@testable import Coffee_Shop_App\n\nfinal class OrderTests: XCTestCase {\n\n    override func setUpWithError() throws {}\n    override func tearDownWithError() throws {}\n\n    func testAddNewOrder() {}\n    func testRepeatLastOrder() {}\n}\n```\n\n<img src=\"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_3.png\" />\n\n각 테스트가 시작하기 전에 XCTest는 setUpWithError() 함수를 실행합니다. 따라서 여기서 테스트의 초기 상태를 설정해야 합니다. 특정 클래스의 인스턴스 생성, 의존성 주입, 변수 값 구성 등이 될 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트가 끝난 후에는 tearDownWithError()가 호출됩니다. 여기서 우리가 고려하는 모든 것을 정리하기에 좋은 장소입니다.\n\n## 이제 Unit Tests를 작성하기 시작할 준비가 모두 완료되었습니다\n\n먼저, OrdersManager에 액세스해야 합니다.\n\n- 클래스에 속성을 추가합니다.\n- setUpWithError() 메서드에서 인스턴스를 만듭니다.\n- tearDownWithError() 메서드에서 상태를 정리합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@testable import Coffee_Shop_App\n\nfinal class OrderTests: XCTestCase {\n  private var ordersManager: OrdersManager!\n\n  override func setUpWithError() throws {\n    ordersManager = OrdersManager.shared\n  }\n\n  override func tearDownWithError() throws {\n    ordersManager.removeAllOrders()\n    ordersManager = nil\n  }\n\n  func testAddNewOrder() {}\n  func testRepeatLastOrder() {}\n}\n```\n\n만약 단위 테스트를 시작한다면, 'Arrange / Act / Assert' 패턴을 사용하는 것이 좋은 초보자를 위한 초기 단계입니다. 이 패턴을 사용하여 테스트를 다음과 같이 분해하시면 됩니다:\n\n- Arrange → 테스트가 사용할 모든 필요한 객체나 데이터를 생성합니다.\n- Act → 테스트하려는 메서드나 함수를 실행합니다.\n- Assert → 얻은 결과를 기대한 결과와 비교합니다.\n\n```kotlin\nfinal class OrderTests: XCTestCase {\n  private var ordersManager: OrdersManager!\n\n  override func setUpWithError() throws {\n    ordersManager = OrdersManager.shared\n  }\n\n  override func tearDownWithError() throws {\n    ordersManager.removeAllOrders()\n    ordersManager = nil\n  }\n\n  func testAddNewOrder() {\n    // 1 - Arrange\n    let orderItems: [OrderItem] = [\n      .init(item: AnyMenuItem(Coffee.flatwhite), size: .regular, quantity: 1),\n      .init(item: AnyMenuItem(Food.chickenSandwich), size: .regular, quantity: 1),\n    ]\n    let order = Order(items: orderItems)\n\n    // 2 - Act\n    try? ordersManager.add(order)\n\n    // 3 - Assert\n    XCTAssertEqual(ordersManager.orders.count, 1)\n  }\n\n  func testRepeatLastOrder() {\n    // 1 - Arrange\n    let orderItems: [OrderItem] = [\n      .init(item: AnyMenuItem(Coffee.flatwhite), size: .regular, quantity: 1),\n      .init(item: AnyMenuItem(Food.chickenSandwich), size: .regular, quantity: 1),\n    ]\n\n    // 2 - Act\n    let order = Order(items: orderItems)\n    try? ordersManager.add(order))\n    ordersManager.repeatLastOrder()\n\n    // 3 - Assert\n    XCTAssertEqual(ordersManager.orders.count, 2)\n  }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# Xcode에서 단위 테스트 직접 실행하기\n\n구성 세트에 포함된 모든 테스트, 테스트 번들에 포함된 모든 테스트, 테스트 클래스에 포함된 모든 테스트, 일부 특정 테스트 메서드의 그룹 또는 한 번에 하나의 테스트 메서드를 실행할 수 있습니다.\n\n테스트를 실행한 후에는 결과가 포함된 테스트 보고서를 받을 수 있습니다. 또한 Test 네비게이터 및 테스트 클래스 내에서 테스트 결과를 직접 확인할 수 있습니다.\n\n![image](/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 테스트 커버리지\n\n테스트를 실행한 후에 테스트 커버리지 정보를 활성화할 수 있습니다. 시험한 코드 안에서 테스트 된 코드 부분을 볼 수 있습니다.\n\n![unit test](/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_5.png)\n\n녹색으로 표시된 부분은 최근 테스트 실행에서 도달한 코드 부분이고, 빨간색으로 표시된 부분은 도달하지 못한 코드 부분입니다. 데모에서 주문 최소 금액을 확인하는 부분이 누락되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 이 시나리오를 발견하면, 새로운 유닛 테스트를 추가해서 이를 확인하고 테스트를 다시 실행할 수 있어요.\n\n# 다른 XCTAssert 사용\n\n테스트 결과를 확인할 때 사용할 수 있는 다양한 함수들이 있어요. 몇 가지 예시를 보여드릴게요.\n\n```js\n// 1 - throw 함수가 예외를 발생시키지 않는지 확인\nXCTAssertNoThrow(try ordersManager.add(order))\n\n// 2 - throw 함수가 에러를 발생시키는지 확인\nXCTAssertThrowsError(try ordersManager.add(order)) { error in\n  if let appError = error as? AppError, let errorType = appError.type as? OrderError {\n    XCTAssertEqual(errorType.code, 2)\n  } else {\n    XCTFail(\"잘못된 에러 유형이 트리거됐어요\")\n  }\n}\n\n// 3 - 옵셔널 값이 nil이 아닌지 확인\nlet lastCoffeeDescription = ordersManager.getLastCoffee()\nXCTAssertNotNil(lastCoffeeDescription)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nXCTAssertEqual(\n  ordersManager.orders.count,\n  1,\n  \"주문이 올바르게 추가되지 않았습니다\"\n);\n```\n\n# 명심해야 할 점\n\n- 버그를 수정하는 것보다 테스트를 작성하는 데 시간을 소비하는 것이 항상 좋습니다.\n- 단위 테스트를 추가하는 것을 추가 작업으로 보지 마세요. 개발 과정의 일부로 테스트를 추가하려고 노력하세요.\n- FIRST 원칙을 기억하세요. 모든 단위 테스트는 빠르고 독립적이며 반복 가능하며 자가 검증 가능하며 적시성을 가져야 합니다.\n- 테스트가 실패하면 조심해야 합니다. 테스트를 적응시키려고 할 수 있습니다. 그러나 이는 일부 경우에는 올바를 수 있지만 (테스트가 잘못 작성된 경우) 대게 테스트하려는 논리가 잘못된 것입니다.\n- 100%의 테스트 커버리지를 추구하지 마세요. 100%의 커버리지가 있더라도 10가지 가능한 시나리오 중 1개에 대한 테스트만 있는 경우가 있습니다. 대신 품질 높은 테스트를 작성하는 데 중점을 두세요.\n- 테스트를 사용하여 전체적인 코드 품질을 높일 수 있는 작은 코드 리팩터링을 찾을 수 있는 기회로 활용하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n질문이 있으시면 언제든지 메시지 보내주세요! 🙂\n\n- 🤓 iOS 개발 팁 및 통찰력이 담긴 규칙적인 콘텐츠를 보려면 X에 들러주세요.\n- 🚀 제 GitHub에서 제 예제 프로젝트를 모두 공유하고 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_0.png"},"coverImage":"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>iOS 프로젝트에 단위 테스트 추가하는 방법과 테스트에 관한 주요 개념 배우기</h1>\n<p><img src=\"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_0.png\" alt=\"image\"></p>\n<p>버그를 고치는 걸 좋아하시나요?</p>\n<p>확실히 싫어하시죠.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>안녕하세요! 적절한 유닛 테스트 구조를 갖는 것은 미래에 머리 아픈 문제를 피하는 데 도움이 됩니다.</p>\n<p>단위 테스트는 당신이 만든 모든 변경 사항 후에 코드가 여전히 예상대로 작동하는지 확인하고, 새 코드를 프로덕션 환경에 배포할 때 더 확신을 갖게 해주며, 전체 코드 품질을 향상시키고, 코드베이스 복잡성을 줄이는 등의 암묵적인 이점이 있습니다.</p>\n<p>이제 테스트의 주요 개념과 iOS 프로젝트에 어떻게 추가하는지 알아봅시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>단위 테스트란 무엇인가요?</h2>\n<p>우리가 함께 이야기할 때, 단위 테스트는 우리 애플리케이션 코드의 작은, 독립적이며 명확한 블록(유닛이라고도 함)이 예상대로 작동하는 지를 확인하는 코드 조각들이라고 말할 수 있어요.</p>\n<h3>테스트 구조</h3>\n<p>코딩 부분으로 바로 들어가기 전에 이해해야 할 여러 구성 요소가 있어요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_1.png\" alt=\"UnitTestinSwiftAStartingGuide_1.png\"></p>\n<ul>\n<li>테스트 메소드는 코드 일부를 유효성 검사하는 메소드입니다. 여기서 우리는 테스트를 생성하고 개발합니다. 이러한 메소드는 테스트 결과를 생성하며, 통과하거나 실패할 수 있습니다.</li>\n<li>테스트 클래스는 테스트 메소드의 집합입니다. 일반적으로 특정 로직을 테스트하는 데 사용되며, 예를 들어 인증(Authentication)을 그룹화합니다.</li>\n<li>테스트 번들에는 테스트 클래스의 집합이 포함되며, 두 가지 테스트 유형 중 하나인 Unit 또는 UI를 나타냅니다.</li>\n<li>테스트 계획은 테스트 번들의 집합이며, 여기에는 Unit 및 UI 테스트를 모두 포함할 수 있습니다. 테스트 계획에서는 테스트 실행 시 고려해야 할 구성 목록을 설정합니다.</li>\n</ul>\n<h1>테스트 번들 생성으로 시작</h1>\n<p><code>파일</code> -> <code>새로 만들기</code> -> <code>타겟</code>으로 이동하여 Unit Testing Bundle을 검색합니다. 대상에 적절한 이름을 지정하고 일반적으로 앱 이름 뒤에 Tests로 끝납니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테스트 번들을 만들면 기본 구성으로 테스트 계획이 자동으로 생성됩니다.</p>\n<p><img src=\"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_2.png\" alt=\"Unit Testing in Swift: A Starting Guide\"></p>\n<h1>단위 테스트 설정하기</h1>\n<p>모든 프로그래밍 언어에는 단위 테스트를 실행하기 위한 프레임워크나 라이브러리가 있습니다. iOS 개발 환경에서는 XCTest 프레임워크를 사용합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이제 테스트 번들이 준비되었으니 새로운 테스트 클래스를 추가할 수 있습니다. 네비게이션 패널이나 메뉴(File -> File -> Unit Test Case Class)를 통해 새로 만들어주세요.</p>\n<p>OrderManager 클래스 뒤에 있는 로직을 테스트하기를 원하므로, 테스트 클래스의 좋은 이름은 OrderTests가 될 것 같아요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 새 주문 추가</span>\nfunc <span class=\"hljs-title function_\">add</span>(_ <span class=\"hljs-attr\">order</span>: <span class=\"hljs-title class_\">Order</span>) throws { ... }\n<span class=\"hljs-comment\">// 마지막 주문을 반복하며 주문 목록에 추가</span>\nfunc <span class=\"hljs-title function_\">repeatLastOrder</span>(<span class=\"hljs-params\"></span>) { ... }\n</code></pre>\n<p>테스트 클래스 안에 각 함수마다 테스트 메소드를 만들어봅시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>앱의 코드에 접근하지 않고 파일 단위로 공유하지 않고 테스트 대상에서 앱의 코드에 액세스하려면 @testable 지시문을 추가하고 앱을 가져와야 합니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">import</span> XCTest\n<span class=\"hljs-keyword\">@testable</span> <span class=\"hljs-keyword\">import</span> Coffee_Shop_App\n\n<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderTests</span>: <span class=\"hljs-title class_\">XCTestCase</span> {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">setUpWithError</span>() <span class=\"hljs-keyword\">throws</span> {}\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">tearDownWithError</span>() <span class=\"hljs-keyword\">throws</span> {}\n\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">testAddNewOrder</span>() {}\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">testRepeatLastOrder</span>() {}\n}\n</code></pre>\n<img src=\"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_3.png\">\n<p>각 테스트가 시작하기 전에 XCTest는 setUpWithError() 함수를 실행합니다. 따라서 여기서 테스트의 초기 상태를 설정해야 합니다. 특정 클래스의 인스턴스 생성, 의존성 주입, 변수 값 구성 등이 될 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테스트가 끝난 후에는 tearDownWithError()가 호출됩니다. 여기서 우리가 고려하는 모든 것을 정리하기에 좋은 장소입니다.</p>\n<h2>이제 Unit Tests를 작성하기 시작할 준비가 모두 완료되었습니다</h2>\n<p>먼저, OrdersManager에 액세스해야 합니다.</p>\n<ul>\n<li>클래스에 속성을 추가합니다.</li>\n<li>setUpWithError() 메서드에서 인스턴스를 만듭니다.</li>\n<li>tearDownWithError() 메서드에서 상태를 정리합니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@testable</span> <span class=\"hljs-keyword\">import</span> Coffee_Shop_App\n\n<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderTests</span>: <span class=\"hljs-type\">XCTestCase</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> ordersManager: OrdersManager!\n\n  <span class=\"hljs-keyword\">override</span> func setUpWithError() throws {\n    ordersManager = OrdersManager.shared\n  }\n\n  <span class=\"hljs-keyword\">override</span> func tearDownWithError() throws {\n    ordersManager.removeAllOrders()\n    ordersManager = nil\n  }\n\n  func testAddNewOrder() {}\n  func testRepeatLastOrder() {}\n}\n</code></pre>\n<p>만약 단위 테스트를 시작한다면, 'Arrange / Act / Assert' 패턴을 사용하는 것이 좋은 초보자를 위한 초기 단계입니다. 이 패턴을 사용하여 테스트를 다음과 같이 분해하시면 됩니다:</p>\n<ul>\n<li>Arrange → 테스트가 사용할 모든 필요한 객체나 데이터를 생성합니다.</li>\n<li>Act → 테스트하려는 메서드나 함수를 실행합니다.</li>\n<li>Assert → 얻은 결과를 기대한 결과와 비교합니다.</li>\n</ul>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderTests</span>: <span class=\"hljs-type\">XCTestCase</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> ordersManager: OrdersManager!\n\n  <span class=\"hljs-keyword\">override</span> func setUpWithError() throws {\n    ordersManager = OrdersManager.shared\n  }\n\n  <span class=\"hljs-keyword\">override</span> func tearDownWithError() throws {\n    ordersManager.removeAllOrders()\n    ordersManager = nil\n  }\n\n  func testAddNewOrder() {\n    <span class=\"hljs-comment\">// 1 - Arrange</span>\n    let orderItems: [OrderItem] = [\n      .<span class=\"hljs-keyword\">init</span>(item: AnyMenuItem(Coffee.flatwhite), size: .regular, quantity: <span class=\"hljs-number\">1</span>),\n      .<span class=\"hljs-keyword\">init</span>(item: AnyMenuItem(Food.chickenSandwich), size: .regular, quantity: <span class=\"hljs-number\">1</span>),\n    ]\n    let order = Order(items: orderItems)\n\n    <span class=\"hljs-comment\">// 2 - Act</span>\n    <span class=\"hljs-keyword\">try</span>? ordersManager.add(order)\n\n    <span class=\"hljs-comment\">// 3 - Assert</span>\n    XCTAssertEqual(ordersManager.orders.count, <span class=\"hljs-number\">1</span>)\n  }\n\n  func testRepeatLastOrder() {\n    <span class=\"hljs-comment\">// 1 - Arrange</span>\n    let orderItems: [OrderItem] = [\n      .<span class=\"hljs-keyword\">init</span>(item: AnyMenuItem(Coffee.flatwhite), size: .regular, quantity: <span class=\"hljs-number\">1</span>),\n      .<span class=\"hljs-keyword\">init</span>(item: AnyMenuItem(Food.chickenSandwich), size: .regular, quantity: <span class=\"hljs-number\">1</span>),\n    ]\n\n    <span class=\"hljs-comment\">// 2 - Act</span>\n    let order = Order(items: orderItems)\n    <span class=\"hljs-keyword\">try</span>? ordersManager.add(order))\n    ordersManager.repeatLastOrder()\n\n    <span class=\"hljs-comment\">// 3 - Assert</span>\n    XCTAssertEqual(ordersManager.orders.count, <span class=\"hljs-number\">2</span>)\n  }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>Xcode에서 단위 테스트 직접 실행하기</h1>\n<p>구성 세트에 포함된 모든 테스트, 테스트 번들에 포함된 모든 테스트, 테스트 클래스에 포함된 모든 테스트, 일부 특정 테스트 메서드의 그룹 또는 한 번에 하나의 테스트 메서드를 실행할 수 있습니다.</p>\n<p>테스트를 실행한 후에는 결과가 포함된 테스트 보고서를 받을 수 있습니다. 또한 Test 네비게이터 및 테스트 클래스 내에서 테스트 결과를 직접 확인할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_4.png\" alt=\"image\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>테스트 커버리지</h1>\n<p>테스트를 실행한 후에 테스트 커버리지 정보를 활성화할 수 있습니다. 시험한 코드 안에서 테스트 된 코드 부분을 볼 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-23-UnitTestinSwiftAStartingGuide_5.png\" alt=\"unit test\"></p>\n<p>녹색으로 표시된 부분은 최근 테스트 실행에서 도달한 코드 부분이고, 빨간색으로 표시된 부분은 도달하지 못한 코드 부분입니다. 데모에서 주문 최소 금액을 확인하는 부분이 누락되었습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>만약 이 시나리오를 발견하면, 새로운 유닛 테스트를 추가해서 이를 확인하고 테스트를 다시 실행할 수 있어요.</p>\n<h1>다른 XCTAssert 사용</h1>\n<p>테스트 결과를 확인할 때 사용할 수 있는 다양한 함수들이 있어요. 몇 가지 예시를 보여드릴게요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 1 - throw 함수가 예외를 발생시키지 않는지 확인</span>\n<span class=\"hljs-title class_\">XCTAssertNoThrow</span>(<span class=\"hljs-keyword\">try</span> ordersManager.<span class=\"hljs-title function_\">add</span>(order))\n\n<span class=\"hljs-comment\">// 2 - throw 함수가 에러를 발생시키는지 확인</span>\n<span class=\"hljs-title class_\">XCTAssertThrowsError</span>(<span class=\"hljs-keyword\">try</span> ordersManager.<span class=\"hljs-title function_\">add</span>(order)) { error <span class=\"hljs-keyword\">in</span>\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> appError = error <span class=\"hljs-keyword\">as</span>? <span class=\"hljs-title class_\">AppError</span>, <span class=\"hljs-keyword\">let</span> errorType = appError.<span class=\"hljs-property\">type</span> <span class=\"hljs-keyword\">as</span>? <span class=\"hljs-title class_\">OrderError</span> {\n    <span class=\"hljs-title class_\">XCTAssertEqual</span>(errorType.<span class=\"hljs-property\">code</span>, <span class=\"hljs-number\">2</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-title class_\">XCTFail</span>(<span class=\"hljs-string\">\"잘못된 에러 유형이 트리거됐어요\"</span>)\n  }\n}\n\n<span class=\"hljs-comment\">// 3 - 옵셔널 값이 nil이 아닌지 확인</span>\n<span class=\"hljs-keyword\">let</span> lastCoffeeDescription = ordersManager.<span class=\"hljs-title function_\">getLastCoffee</span>()\n<span class=\"hljs-title class_\">XCTAssertNotNil</span>(lastCoffeeDescription)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">XCTAssertEqual</span>(\n  ordersManager.<span class=\"hljs-property\">orders</span>.<span class=\"hljs-property\">count</span>,\n  <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-string\">\"주문이 올바르게 추가되지 않았습니다\"</span>\n);\n</code></pre>\n<h1>명심해야 할 점</h1>\n<ul>\n<li>버그를 수정하는 것보다 테스트를 작성하는 데 시간을 소비하는 것이 항상 좋습니다.</li>\n<li>단위 테스트를 추가하는 것을 추가 작업으로 보지 마세요. 개발 과정의 일부로 테스트를 추가하려고 노력하세요.</li>\n<li>FIRST 원칙을 기억하세요. 모든 단위 테스트는 빠르고 독립적이며 반복 가능하며 자가 검증 가능하며 적시성을 가져야 합니다.</li>\n<li>테스트가 실패하면 조심해야 합니다. 테스트를 적응시키려고 할 수 있습니다. 그러나 이는 일부 경우에는 올바를 수 있지만 (테스트가 잘못 작성된 경우) 대게 테스트하려는 논리가 잘못된 것입니다.</li>\n<li>100%의 테스트 커버리지를 추구하지 마세요. 100%의 커버리지가 있더라도 10가지 가능한 시나리오 중 1개에 대한 테스트만 있는 경우가 있습니다. 대신 품질 높은 테스트를 작성하는 데 중점을 두세요.</li>\n<li>테스트를 사용하여 전체적인 코드 품질을 높일 수 있는 작은 코드 리팩터링을 찾을 수 있는 기회로 활용하세요.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>질문이 있으시면 언제든지 메시지 보내주세요! 🙂</p>\n<ul>\n<li>🤓 iOS 개발 팁 및 통찰력이 담긴 규칙적인 콘텐츠를 보려면 X에 들러주세요.</li>\n<li>🚀 제 GitHub에서 제 예제 프로젝트를 모두 공유하고 있습니다.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}