{"pageProps":{"post":{"title":"Compose를 통해 유연한 컴포넌트 만드는 방법","description":"","date":"2024-06-23 01:16","slug":"2024-06-23-CreatingflexiblecomponentsinCompose","content":"\n어떠한 개발에서도, 디자이너들이 또 다른 변형이 필요하다며 당신이 막 완성한 컴포넌트에 또 다른 변형을 요구하는 경우가 종종 있습니다. 이 새로운 컴포넌트가 이전 것들을 모두 망가뜨릴지도 확실하지 않은 상황이죠. 오늘은 Compose를 사용하여 유연한 컴포넌트를 만드는 원칙에 대해 이야기해보고, 앞으로를 생각하며 아름답게 구현해보려 합니다.\n\n# 입력 데이터\n\n가장 기초적인 시작부터 시작해봅시다. 여러분의 프로젝트에는 세 가지 다른 컴포넌트가 있다고 상상해보세요. 하지만 이 모든 것들은 한 가지 엔티티인 - 특정 타입의 연락처 사람을 대표합니다. 이번 예제에서, 우리는 셋의 변형을 가지게 될 것입니다:\n![그림](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image1](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_1.png)\n\n![image2](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_2.png)\n\n# ContactFullNameView\n\n우선 주어진 레이아웃의 구조를 이해해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_3.png\" />\n\n```js\nRow {\n  Image\n  Text\n}\n```\n\n가장 간단한 형태이며 내부에 컴포넌트가 있는 행(Row)일 뿐이라 특별한 점은 없습니다.\n\n코드를 정리한 후 결과물은 다음과 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n@Preview 주석으로 이를 커버해보겠습니다. 결과를 확인하고 비교할 수 있습니다.\n\n```js\n@Preview\n@Composable\nprivate fun ContactFullNameV1ViewPreview() = ReusableComponentsTheme {\n    ContactFullNameV1View(\n        imageUrl = \"https://images.stockcake.com/public/1/b/e/1be26278-b679-47a6-b17a-f3a66bc3db92_large/elegant-senior-portrait-stockcake.jpg\",\n        fullName = \"Eleanor Pena\",\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(MaterialTheme.colorScheme.surface),\n    )\n}\n```\n\n그러나 첫 미리보기 이후에 문제가 발생합니다. - 폰이나 에뮬레이터에서 미리보기를 실행하지 않고 결과를 보는 방법이 필요합니다. 또한 코드에 링크를 유지하면 심지어 @Preview에도 크게 멋지지 않습니다. 여기서 @Composable 함수를 만드는 접근 방식을 변경해야 합니다.\n\n![이미지](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n원칙적으로 유연한 구성 요소를 만들려고 하면 작업 중인 모델에서 어느 정도 추상화해야 합니다.\n\n```js\n@Composable\nfun ContactFullNameV2View(\n    imagePainter: Painter,\n    fullName: String,\n    modifier: Modifier = Modifier,\n)\n```\n\nPainter 클래스 유형에 대한 참조를 변경함으로써 세 가지 작업을 동시에 해결할 수 있습니다. @Preview에서 결과를 보는 것, 특정 링크를 통해 기기에서 이미지를 볼 수 있는 것(원하는 경우), 실제 @Composable에서 이미지를 로드하는 것에 대한 완전한 제어를 갖는 것입니다.\n\n```js\n@Preview\n@Composable\nfun ContactFullNameV2ViewPreview() = ReusableComponentsTheme {\n    ContactFullNameV2View(\n        imagePainter = when {\n            LocalInspectionMode.current -> painterResource(id = R.drawable.eleanor_pena)\n            else -> rememberAsyncImagePainter(model = \"https://images.stockcake.com/public/1/b/e/1be26278-b679-47a6-b17a-f3a66bc3db92_large/elegant-senior-portrait-stockcake.jpg\")\n        },\n        fullName = \"Eleanor Pena\",\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(MaterialTheme.colorScheme.surface),\n    )\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_5.png\" />\n\n# ContactActionsView\n\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_6.png\" />\n\n우리가 새로 만들 컴포넌트의 대략적인 구조를 한 번 더 정의해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nRow {\n  Image\n  Column {\n    Text\n    Text\n  }\n  IconButton\n  IconButton\n  IconButton\n}\n```\n\n디자인과 비교한 후에는 약간 변경될 것이지만, 본질은 같을 것입니다. 이전 컴포넌트와 비교하여 새 필드를 추가하고 작업 버튼을 도입했습니다. 우리가 가진 지식을 활용하여 이 기능을 정확하게 설명합니다. 추가 변경 사항에는 여백 및 컨테이너 자체의 최소 크기도 포함됩니다.\n\n```kotlin\n@Composable\nfun ContactActionsV1View(\n    imagePainter: Painter,\n    fullName: String,\n    modifiedTime: String,\n    modifier: Modifier = Modifier,\n    onChatClicked: () -> Unit = {},\n    onMainClicked: () -> Unit = {},\n    onCallClicked: () -> Unit = {},\n)\n```\n\n![Image](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_7.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# ContactDetailsView\n\n![ContactDetailsView](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_8.png)\n\n우리는 방금 이 버튼들을 추가했는데, 이제 제거해야 해요... 디자이너 분들! 컴포넌트의 구조를 다시 생각해 봐요.\n\n```js\nRow {\n  Image\n  Column {\n    Text\n    Text\n    Row {\n      Image\n      Text\n    }\n  }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에도 특별한 것은 없습니다. 텍스트와 새로운 사진이 초기 버전에 추가된 간단한 레이아웃입니다. 차이점은 여백, 컨테이너의 최소 크기 및 연락처 사진의 정렬에 있습니다.\n\n```kotlin\n@Composable\nfun ContactDetailsV1View(\n    imagePainter: Painter,\n    managerPainter: Painter,\n    title: String,\n    fullName: String,\n    modifiedTime: String,\n    modifier: Modifier = Modifier,\n)\n```\n\n![이미지](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_9.png)\n\n# 프랑켄슈타인의 몬스터 만들기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마음에 떠오를 수 있는 첫 번째 아이디어는 우리 컴포넌트에 존재하는 모든 매개변수를 수집하고 모든 것을 할 수 있고 모든 것을 아는 하나의 매우 크고 강력한 @Composable을 만드는 것입니다. 그러나 이런 이리저리 섞인 것을 조립하는 동안 코드에 나타나는 여러 when 조건들을 발견할 수 있습니다. 이런 조건들이 대량으로 존재하는 것은 무언가 잘못되었음을 나타낼 수 있습니다. 여기서 단점은 특정 구성에서 우리 컴포넌트와 논리적으로 관련이 없는 많은 매개변수에 대한 접근이며, 또한 컴포넌트의 불안정성입니다. 새로운 요구사항이 들어오면 기존의 유연성으로는 원하는 기능을 추가하는 데 충분하지 않을 수 있습니다.\n\n```kotlin\n@Composable\nfun ContactViewV1(\n    imagePainter: Painter,\n    managerPainter: Painter?,\n    title: String?,\n    fullName: String,\n    modifiedTime: String?,\n    modifier: Modifier = Modifier,\n    onChatClicked: (() -> Unit)? = null,\n    onMainClicked: (() -> Unit)? = null,\n    onCallClicked: (() -> Unit)? = null,\n) {\n    Row(\n        modifier = modifier\n            .sizeIn(\n                minHeight = when {\n                    title.isNullOrBlank() && modifiedTime.isNullOrBlank() -> 56.dp\n                    !title.isNullOrBlank() -> 72.dp\n                    else -> 88.dp\n                },\n            )\n            .padding(\n                horizontal = 16.dp,\n                vertical = when {\n                    title.isNullOrBlank() && modifiedTime.isNullOrBlank() -> 8.dp\n                    else -> 16.dp\n                },\n            ),\n        horizontalArrangement = Arrangement.spacedBy(\n            space = 16.dp,\n        ),\n    ) {\n\n    ... other stuff ...\n}\n```\n\n# 이론\n\n높은 사용자 정의를 목표로 하는 새로운 컴포넌트를 구축할 때에는 정교하게 계획하여 무언가를 추가하거나 완전히 독특한 외관을 만들 때 고통을 최소화하는 것이 중요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n컴포넌트 구성의 첫 번째 규칙은 @Composable의 첫 번째 선택적 매개변수로 Modifier를 사용하는 것입니다. 이 가이드라인은 우리가 컴포넌트를 외부에서 제어할 수 있도록 해주기 때문에 중요합니다. 두 번째 Modifier를 추가해야 한다면, 함수 구조를 재검토하는 것이 좋습니다. 각 함수는 하나의 Modifier만 포함해야 한다는 가이드라인이 있어 잠재적인 함수 디자인 문제를 나타냅니다. 따라서 해당 Modifier는 루트 @Composable에만 적용되어야 합니다.\n\n컴포넌트는 UI 및 기능을 표현하는 다양한 메커니즘을 가질 수 있습니다. 필수 매개변수는 함수의 핵심 내용을 정의하고 기본값을 가지면 안 됩니다. 미리 정의된 값이 있는 선택적 매개변수는 컴포넌트에서 사용할 수도, 사용하지 않을 수도 있는 선택적 수정 사항으로 작용합니다.\n\n선택적 값을 선언하는 방법을 고려하는 것도 중요합니다. Nullable은 기능이 사용되거나 완전히 생략될 수 있다는 것을 의미합니다. 빈 구현은 기능이 필수적이지만 빈 값을 또는 사용자 정의 로직을 사용할 수 있다는 것을 의미합니다. 기본값은 비-nullable이어야 하고 명확하게 이해돼야 합니다.\n\n컴포넌트 스타일을 처리할 때, 일부 매개변수는 함수 본문 내에 남겨둘 수 있습니다. 단, 이 매개변수가 간단하고 명확하다면입니다. 그러나 보다 복잡한 컴포넌트의 경우 그룹화하는 것이 좋습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여러 논리적 블록으로 구성된 컴포넌트의 경우, 이러한 블록들은 슬롯이라고 명명됩니다. 이 접근 방식은 표준 구현을 사용하거나 우리의 필요에 맞게 확장적으로 사용할 수 있도록 유연성을 제공합니다.\n\n총괄적으로, 필수 항목을 다루었습니다. 나머지는 이후에 계속해서 다룰 것입니다.\n\n# 아름다움을 창조하다\n\n우선, 컴포넌트를 논리적으로 슬롯으로 나눕니다. 여기서 매우 명확합니다. 로고 슬롯, 정보 슬롯 및 액션 슬롯이 있습니다. 우리는 이를 기반으로 구조를 만들겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```html\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_10.png\" />\n\n항상 전체 이름과 연락처 사진이 있으므로 이러한 데이터는 @Composable 함수의 필수\n매개변수로 사용할 수 있습니다. 사진의 경우 Painter를 전달하여 나중에 외부에서\n사진 로드를 제어하고 @Preview에서 결과를 미리 볼 수 있게합니다. 또한 구성 요소의\n구조를 대략적으로 스케치하고 모든 슬롯을 비워 둡시다. @Composable private fun\nContactView( leadingPainter: Painter, title: String, modifier: Modifier =\nModifier, leadingView: @Composable RowScope.() -> Unit = {}, content:\n@Composable ColumnScope.() -> Unit = {}, trailingView: (@Composable RowScope.()\n-> Unit)? = null, ) { Row( modifier = modifier .sizeIn( minHeight =\nDp.Unspecified, ) .padding( horizontal = 16.dp, vertical = Dp.Unspecified, ),\nhorizontalArrangement = Arrangement.spacedBy( space = 16.dp, ), ) {\nleadingView.invoke(this) Column( modifier = Modifier\n.align(Alignment.CenterVertically), ) { content.invoke(this) }\ntrailingView?.invoke(this) } } 첫 번째 슬롯을 살펴보고 있습니다. 여기서 사진은\n항상 존재하며 정렬만 변경되므로 이러한 매개변수를 함수에 남겨두기로 하였습니다.\n그 외의 모든 것은 일정합니다.\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@Composable\nfun RowScope.ContactLeadingView(\n    imagePainter: Painter,\n    headerAlignment: Alignment.Vertical,\n) {\n    Image(\n        painter = imagePainter,\n        contentDescription = \"연락처 이미지\",\n        modifier = Modifier\n            .requiredSize(40.dp)\n            .clip(CircleShape)\n            .align(\n                alignment = headerAlignment,\n            ),\n    )\n}\n```\n\n두 번째 슬롯에는 미래 호환성을 보장하기 위해 제목이라는 필수 매개변수가 하나 있습니다. 이렇게 하면 성과 이름 이외의 정보를 전달해도 구조가 변경되지 않습니다.\n\n```kotlin\n@Composable\nfun ColumnScope.ContactContentView(\n    title: String,\n    header: String? = null,\n    subtitle: String? = null,\n    managerPainter: Painter? = null,\n) {\n    if (!header.isNullOrBlank()) { ... }\n\n    Text(\n        text = title,\n        color = MaterialTheme.colorScheme.onSurface,\n        style = MaterialTheme.typography.bodyMedium,\n    )\n\n    Row(\n        modifier = Modifier,\n        horizontalArrangement = Arrangement.spacedBy(\n            space = 8.dp,\n        ),\n    ) {\n        if (managerPainter != null) { ... }\n        if (!subtitle.isNullOrBlank()) { ... }\n    }\n}\n```\n\n세 번째 슬롯은 세 가지 다른 콜백을 포함하는 작업을 포함할 것입니다. 여기서는 존재 여부를 제어할 수 있도록 각각을 nullable로 표시했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n@Composable\nfun RowScope.ContactActionsView(\n    onChatClicked: (() -> Unit)? = null,\n    onMainClicked: (() -> Unit)? = null,\n    onCallClicked: (() -> Unit)? = null,\n) {\n    Row(\n        modifier = Modifier\n            .align(Alignment.CenterVertically),\n    ) { ... }\n}\n```\n\n모든 슬롯을 조립하고 이를 함수의 기초로 선언한 후 결과적으로 구조는 다음과 같아야 합니다:\n\n```js\n@Composable\nprivate fun ContactView(\n    leadingPainter: Painter,\n    title: String,\n    modifier: Modifier = Modifier,\n    config: ContactViewConfig = ContactViewDefaults.config(),\n    leadingView: @Composable RowScope.() -> Unit = {\n        ContactLeadingView(\n            imagePainter = leadingPainter,\n            headerAlignment = config.headerAlignment,\n        )\n    },\n    content: @Composable ColumnScope.() -> Unit = {\n        ContactContentView(\n            title = title,\n        )\n    },\n    trailingView: (@Composable RowScope.() -> Unit)? = null,\n)\n```\n\n이 구조에서 새로운 추가 요소는 컴포넌트의 다양한 설정을 제어하는 ContactViewConfig입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.\n\n```js\n// 이렇게 하지 마세요\n@Immutable\nclass ContactViewConfig internal constructor(\n    internal val minHeight: Dp,\n    internal val verticalPadding: Dp,\n    internal val headerAlignment: Alignment.Vertical,\n)\n\nobject ContactViewDefaults {\n\n    @Composable\n    fun config(\n        minHeight: Dp = 56.dp,\n        verticalPadding: Dp = 8.dp,\n        headerAlignment: Alignment.Vertical = Alignment.CenterVertically,\n    ): ContactViewConfig = ContactViewConfig(\n        minHeight = minHeight,\n        verticalPadding = verticalPadding,\n        headerAlignment = headerAlignment,\n    )\n}\n```\n\n자, 이제 구성 가능하고 작동하는 @Preview가 있는 컴포넌트가 준비되었습니다.\n\n다음에는 기본 기능을 확장하기 위해 기본 함수 위에 추가 컴포넌트를 작성할 수 있습니다. 선택 사항으로 간단한 타입 대신 도메인 클래스를 사용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\n@Composable\nfun FullNameContactView(\n    imagePainter: Painter,\n    fullName: String,\n    modifier: Modifier = Modifier,\n) {\n    ContactView(\n        leadingPainter = imagePainter,\n        title = fullName,\n        modifier = modifier,\n    )\n}\n```\n\n```kotlin\n@Composable\nfun ActionsContactView(\n    imagePainter: Painter,\n    fullName: String,\n    modifiedTime: String,\n    modifier: Modifier = Modifier,\n    onChatClicked: (() -> Unit)? = null,\n    onMainClicked: (() -> Unit)? = null,\n    onCallClicked: (() -> Unit)? = null,\n) {\n    ContactView(\n        leadingPainter = imagePainter,\n        title = fullName,\n        modifier = modifier,\n        config = ContactViewDefaults.config(\n            minHeight = 72.dp,\n            verticalPadding = 16.dp,\n        ),\n        content = {\n            ContactContentView(\n                title = fullName,\n                subtitle = modifiedTime,\n            )\n        },\n        trailingView = {\n            ContactActionsView(\n                onChatClicked = onChatClicked,\n                onMainClicked = onMainClicked,\n                onCallClicked = onCallClicked,\n            )\n        },\n    )\n}\n```\n\n```kotlin\n@Composable\nfun DetailsContactView(\n    imagePainter: Painter,\n    managerPainter: Painter,\n    title: String,\n    fullName: String,\n    modifiedTime: String,\n    modifier: Modifier = Modifier,\n) {\n    ContactView(\n        leadingPainter = imagePainter,\n        title = fullName,\n        modifier = modifier,\n        config = ContactViewDefaults.config(\n            minHeight = 88.dp,\n            verticalPadding = 16.dp,\n            headerAlignment = Alignment.Top,\n        ),\n        content = {\n            ContactContentView(\n                title = fullName,\n                header = title,\n                subtitle = modifiedTime,\n                managerPainter = managerPainter,\n            )\n        },\n    )\n}\n```\n\n# 일부 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n@Preview를 살펴보면 컴포넌트 사이에는 차이가 거의 없을 것입니다. 코드적으로도 거의 차이가 없을 것입니다. 유연한 기능과 설정을 가진 컴포넌트는 세 가지 다른 독립적인 함수만큼의 코드 라인을 차지할 것입니다. 이 글이 유연한 컴포넌트를 작성하는 방법에 대해 더 잘 이해하는 데 도움이 되었으면 좋겠습니다. 더 많은 개발을 위해 필요시 이 비디오와 코드를 살펴보시기를 권장합니다.\n\n![Creating flexible components in Compose](/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_11.png)\n","ogImage":{"url":"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_0.png"},"coverImage":"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_0.png","tag":["Tech"],"readingTime":18},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>어떠한 개발에서도, 디자이너들이 또 다른 변형이 필요하다며 당신이 막 완성한 컴포넌트에 또 다른 변형을 요구하는 경우가 종종 있습니다. 이 새로운 컴포넌트가 이전 것들을 모두 망가뜨릴지도 확실하지 않은 상황이죠. 오늘은 Compose를 사용하여 유연한 컴포넌트를 만드는 원칙에 대해 이야기해보고, 앞으로를 생각하며 아름답게 구현해보려 합니다.</p>\n<h1>입력 데이터</h1>\n<p>가장 기초적인 시작부터 시작해봅시다. 여러분의 프로젝트에는 세 가지 다른 컴포넌트가 있다고 상상해보세요. 하지만 이 모든 것들은 한 가지 엔티티인 - 특정 타입의 연락처 사람을 대표합니다. 이번 예제에서, 우리는 셋의 변형을 가지게 될 것입니다:\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_0.png\" alt=\"그림\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_1.png\" alt=\"image1\"></p>\n<p><img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_2.png\" alt=\"image2\"></p>\n<h1>ContactFullNameView</h1>\n<p>우선 주어진 레이아웃의 구조를 이해해야 합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_3.png\">\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> {\n  <span class=\"hljs-title class_\">Image</span>\n  <span class=\"hljs-title class_\">Text</span>\n}\n</code></pre>\n<p>가장 간단한 형태이며 내부에 컴포넌트가 있는 행(Row)일 뿐이라 특별한 점은 없습니다.</p>\n<p>코드를 정리한 후 결과물은 다음과 같습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>@Preview 주석으로 이를 커버해보겠습니다. 결과를 확인하고 비교할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Preview</span>\n@<span class=\"hljs-title class_\">Composable</span>\nprivate fun <span class=\"hljs-title class_\">ContactFullNameV1ViewPreview</span>() = <span class=\"hljs-title class_\">ReusableComponentsTheme</span> {\n    <span class=\"hljs-title class_\">ContactFullNameV1View</span>(\n        imageUrl = <span class=\"hljs-string\">\"https://images.stockcake.com/public/1/b/e/1be26278-b679-47a6-b17a-f3a66bc3db92_large/elegant-senior-portrait-stockcake.jpg\"</span>,\n        fullName = <span class=\"hljs-string\">\"Eleanor Pena\"</span>,\n        modifier = <span class=\"hljs-title class_\">Modifier</span>\n            .<span class=\"hljs-title function_\">fillMaxWidth</span>()\n            .<span class=\"hljs-title function_\">background</span>(<span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">surface</span>),\n    )\n}\n</code></pre>\n<p>그러나 첫 미리보기 이후에 문제가 발생합니다. - 폰이나 에뮬레이터에서 미리보기를 실행하지 않고 결과를 보는 방법이 필요합니다. 또한 코드에 링크를 유지하면 심지어 @Preview에도 크게 멋지지 않습니다. 여기서 @Composable 함수를 만드는 접근 방식을 변경해야 합니다.</p>\n<p><img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_4.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>원칙적으로 유연한 구성 요소를 만들려고 하면 작업 중인 모델에서 어느 정도 추상화해야 합니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">ContactFullNameV2View</span>(\n    <span class=\"hljs-attr\">imagePainter</span>: <span class=\"hljs-title class_\">Painter</span>,\n    <span class=\"hljs-attr\">fullName</span>: <span class=\"hljs-title class_\">String</span>,\n    <span class=\"hljs-attr\">modifier</span>: <span class=\"hljs-title class_\">Modifier</span> = <span class=\"hljs-title class_\">Modifier</span>,\n)\n</code></pre>\n<p>Painter 클래스 유형에 대한 참조를 변경함으로써 세 가지 작업을 동시에 해결할 수 있습니다. @Preview에서 결과를 보는 것, 특정 링크를 통해 기기에서 이미지를 볼 수 있는 것(원하는 경우), 실제 @Composable에서 이미지를 로드하는 것에 대한 완전한 제어를 갖는 것입니다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Preview</span>\n@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">ContactFullNameV2ViewPreview</span>() = <span class=\"hljs-title class_\">ReusableComponentsTheme</span> {\n    <span class=\"hljs-title class_\">ContactFullNameV2View</span>(\n        imagePainter = when {\n            <span class=\"hljs-title class_\">LocalInspectionMode</span>.<span class=\"hljs-property\">current</span> -> <span class=\"hljs-title function_\">painterResource</span>(id = R.<span class=\"hljs-property\">drawable</span>.<span class=\"hljs-property\">eleanor_pena</span>)\n            <span class=\"hljs-keyword\">else</span> -> <span class=\"hljs-title function_\">rememberAsyncImagePainter</span>(model = <span class=\"hljs-string\">\"https://images.stockcake.com/public/1/b/e/1be26278-b679-47a6-b17a-f3a66bc3db92_large/elegant-senior-portrait-stockcake.jpg\"</span>)\n        },\n        fullName = <span class=\"hljs-string\">\"Eleanor Pena\"</span>,\n        modifier = <span class=\"hljs-title class_\">Modifier</span>\n            .<span class=\"hljs-title function_\">fillMaxWidth</span>()\n            .<span class=\"hljs-title function_\">background</span>(<span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">surface</span>),\n    )\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_5.png\">\n<h1>ContactActionsView</h1>\n<img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_6.png\">\n<p>우리가 새로 만들 컴포넌트의 대략적인 구조를 한 번 더 정의해 봅시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\">Row {\n  Image\n  Column {\n    Text\n    Text\n  }\n  IconButton\n  IconButton\n  IconButton\n}\n</code></pre>\n<p>디자인과 비교한 후에는 약간 변경될 것이지만, 본질은 같을 것입니다. 이전 컴포넌트와 비교하여 새 필드를 추가하고 작업 버튼을 도입했습니다. 우리가 가진 지식을 활용하여 이 기능을 정확하게 설명합니다. 추가 변경 사항에는 여백 및 컨테이너 자체의 최소 크기도 포함됩니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">ContactActionsV1View</span><span class=\"hljs-params\">(\n    imagePainter: <span class=\"hljs-type\">Painter</span>,\n    fullName: <span class=\"hljs-type\">String</span>,\n    modifiedTime: <span class=\"hljs-type\">String</span>,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier,\n    onChatClicked: () -> <span class=\"hljs-type\">Unit</span> = {},\n    onMainClicked: () -> <span class=\"hljs-type\">Unit</span> = {},\n    onCallClicked: () -> <span class=\"hljs-type\">Unit</span> = {},\n)</span></span>\n</code></pre>\n<p><img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_7.png\" alt=\"Image\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>ContactDetailsView</h1>\n<p><img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_8.png\" alt=\"ContactDetailsView\"></p>\n<p>우리는 방금 이 버튼들을 추가했는데, 이제 제거해야 해요... 디자이너 분들! 컴포넌트의 구조를 다시 생각해 봐요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Row</span> {\n  <span class=\"hljs-title class_\">Image</span>\n  <span class=\"hljs-title class_\">Column</span> {\n    <span class=\"hljs-title class_\">Text</span>\n    <span class=\"hljs-title class_\">Text</span>\n    <span class=\"hljs-title class_\">Row</span> {\n      <span class=\"hljs-title class_\">Image</span>\n      <span class=\"hljs-title class_\">Text</span>\n    }\n  }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여기에도 특별한 것은 없습니다. 텍스트와 새로운 사진이 초기 버전에 추가된 간단한 레이아웃입니다. 차이점은 여백, 컨테이너의 최소 크기 및 연락처 사진의 정렬에 있습니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">ContactDetailsV1View</span><span class=\"hljs-params\">(\n    imagePainter: <span class=\"hljs-type\">Painter</span>,\n    managerPainter: <span class=\"hljs-type\">Painter</span>,\n    title: <span class=\"hljs-type\">String</span>,\n    fullName: <span class=\"hljs-type\">String</span>,\n    modifiedTime: <span class=\"hljs-type\">String</span>,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier,\n)</span></span>\n</code></pre>\n<p><img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_9.png\" alt=\"이미지\"></p>\n<h1>프랑켄슈타인의 몬스터 만들기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>마음에 떠오를 수 있는 첫 번째 아이디어는 우리 컴포넌트에 존재하는 모든 매개변수를 수집하고 모든 것을 할 수 있고 모든 것을 아는 하나의 매우 크고 강력한 @Composable을 만드는 것입니다. 그러나 이런 이리저리 섞인 것을 조립하는 동안 코드에 나타나는 여러 when 조건들을 발견할 수 있습니다. 이런 조건들이 대량으로 존재하는 것은 무언가 잘못되었음을 나타낼 수 있습니다. 여기서 단점은 특정 구성에서 우리 컴포넌트와 논리적으로 관련이 없는 많은 매개변수에 대한 접근이며, 또한 컴포넌트의 불안정성입니다. 새로운 요구사항이 들어오면 기존의 유연성으로는 원하는 기능을 추가하는 데 충분하지 않을 수 있습니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">ContactViewV1</span><span class=\"hljs-params\">(\n    imagePainter: <span class=\"hljs-type\">Painter</span>,\n    managerPainter: <span class=\"hljs-type\">Painter</span>?,\n    title: <span class=\"hljs-type\">String</span>?,\n    fullName: <span class=\"hljs-type\">String</span>,\n    modifiedTime: <span class=\"hljs-type\">String</span>?,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier,\n    onChatClicked: (() -> <span class=\"hljs-type\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n    onMainClicked: (() -> <span class=\"hljs-type\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n    onCallClicked: (() -> <span class=\"hljs-type\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n)</span></span> {\n    Row(\n        modifier = modifier\n            .sizeIn(\n                minHeight = <span class=\"hljs-keyword\">when</span> {\n                    title.isNullOrBlank() &#x26;&#x26; modifiedTime.isNullOrBlank() -> <span class=\"hljs-number\">56.</span>dp\n                    !title.isNullOrBlank() -> <span class=\"hljs-number\">72.</span>dp\n                    <span class=\"hljs-keyword\">else</span> -> <span class=\"hljs-number\">88.</span>dp\n                },\n            )\n            .padding(\n                horizontal = <span class=\"hljs-number\">16.</span>dp,\n                vertical = <span class=\"hljs-keyword\">when</span> {\n                    title.isNullOrBlank() &#x26;&#x26; modifiedTime.isNullOrBlank() -> <span class=\"hljs-number\">8.</span>dp\n                    <span class=\"hljs-keyword\">else</span> -> <span class=\"hljs-number\">16.</span>dp\n                },\n            ),\n        horizontalArrangement = Arrangement.spacedBy(\n            space = <span class=\"hljs-number\">16.</span>dp,\n        ),\n    ) {\n\n    ... other stuff ...\n}\n</code></pre>\n<h1>이론</h1>\n<p>높은 사용자 정의를 목표로 하는 새로운 컴포넌트를 구축할 때에는 정교하게 계획하여 무언가를 추가하거나 완전히 독특한 외관을 만들 때 고통을 최소화하는 것이 중요합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>컴포넌트 구성의 첫 번째 규칙은 @Composable의 첫 번째 선택적 매개변수로 Modifier를 사용하는 것입니다. 이 가이드라인은 우리가 컴포넌트를 외부에서 제어할 수 있도록 해주기 때문에 중요합니다. 두 번째 Modifier를 추가해야 한다면, 함수 구조를 재검토하는 것이 좋습니다. 각 함수는 하나의 Modifier만 포함해야 한다는 가이드라인이 있어 잠재적인 함수 디자인 문제를 나타냅니다. 따라서 해당 Modifier는 루트 @Composable에만 적용되어야 합니다.</p>\n<p>컴포넌트는 UI 및 기능을 표현하는 다양한 메커니즘을 가질 수 있습니다. 필수 매개변수는 함수의 핵심 내용을 정의하고 기본값을 가지면 안 됩니다. 미리 정의된 값이 있는 선택적 매개변수는 컴포넌트에서 사용할 수도, 사용하지 않을 수도 있는 선택적 수정 사항으로 작용합니다.</p>\n<p>선택적 값을 선언하는 방법을 고려하는 것도 중요합니다. Nullable은 기능이 사용되거나 완전히 생략될 수 있다는 것을 의미합니다. 빈 구현은 기능이 필수적이지만 빈 값을 또는 사용자 정의 로직을 사용할 수 있다는 것을 의미합니다. 기본값은 비-nullable이어야 하고 명확하게 이해돼야 합니다.</p>\n<p>컴포넌트 스타일을 처리할 때, 일부 매개변수는 함수 본문 내에 남겨둘 수 있습니다. 단, 이 매개변수가 간단하고 명확하다면입니다. 그러나 보다 복잡한 컴포넌트의 경우 그룹화하는 것이 좋습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>여러 논리적 블록으로 구성된 컴포넌트의 경우, 이러한 블록들은 슬롯이라고 명명됩니다. 이 접근 방식은 표준 구현을 사용하거나 우리의 필요에 맞게 확장적으로 사용할 수 있도록 유연성을 제공합니다.</p>\n<p>총괄적으로, 필수 항목을 다루었습니다. 나머지는 이후에 계속해서 다룰 것입니다.</p>\n<h1>아름다움을 창조하다</h1>\n<p>우선, 컴포넌트를 논리적으로 슬롯으로 나눕니다. 여기서 매우 명확합니다. 로고 슬롯, 정보 슬롯 및 액션 슬롯이 있습니다. 우리는 이를 기반으로 구조를 만들겠습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_10.png\"</span> /></span>\n\n항상 전체 이름과 연락처 사진이 있으므로 이러한 데이터는 @Composable 함수의 필수\n매개변수로 사용할 수 있습니다. 사진의 경우 Painter를 전달하여 나중에 외부에서\n사진 로드를 제어하고 @Preview에서 결과를 미리 볼 수 있게합니다. 또한 구성 요소의\n구조를 대략적으로 스케치하고 모든 슬롯을 비워 둡시다. @Composable private fun\nContactView( leadingPainter: Painter, title: String, modifier: Modifier =\nModifier, leadingView: @Composable RowScope.() -> Unit = {}, content:\n@Composable ColumnScope.() -> Unit = {}, trailingView: (@Composable RowScope.()\n-> Unit)? = null, ) { Row( modifier = modifier .sizeIn( minHeight =\nDp.Unspecified, ) .padding( horizontal = 16.dp, vertical = Dp.Unspecified, ),\nhorizontalArrangement = Arrangement.spacedBy( space = 16.dp, ), ) {\nleadingView.invoke(this) Column( modifier = Modifier\n.align(Alignment.CenterVertically), ) { content.invoke(this) }\ntrailingView?.invoke(this) } } 첫 번째 슬롯을 살펴보고 있습니다. 여기서 사진은\n항상 존재하며 정렬만 변경되므로 이러한 매개변수를 함수에 남겨두기로 하였습니다.\n그 외의 모든 것은 일정합니다.\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> RowScope.<span class=\"hljs-title\">ContactLeadingView</span><span class=\"hljs-params\">(\n    imagePainter: <span class=\"hljs-type\">Painter</span>,\n    headerAlignment: <span class=\"hljs-type\">Alignment</span>.<span class=\"hljs-type\">Vertical</span>,\n)</span></span> {\n    Image(\n        painter = imagePainter,\n        contentDescription = <span class=\"hljs-string\">\"연락처 이미지\"</span>,\n        modifier = Modifier\n            .requiredSize(<span class=\"hljs-number\">40.</span>dp)\n            .clip(CircleShape)\n            .align(\n                alignment = headerAlignment,\n            ),\n    )\n}\n</code></pre>\n<p>두 번째 슬롯에는 미래 호환성을 보장하기 위해 제목이라는 필수 매개변수가 하나 있습니다. 이렇게 하면 성과 이름 이외의 정보를 전달해도 구조가 변경되지 않습니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> ColumnScope.<span class=\"hljs-title\">ContactContentView</span><span class=\"hljs-params\">(\n    title: <span class=\"hljs-type\">String</span>,\n    header: <span class=\"hljs-type\">String</span>? = <span class=\"hljs-literal\">null</span>,\n    subtitle: <span class=\"hljs-type\">String</span>? = <span class=\"hljs-literal\">null</span>,\n    managerPainter: <span class=\"hljs-type\">Painter</span>? = <span class=\"hljs-literal\">null</span>,\n)</span></span> {\n    <span class=\"hljs-keyword\">if</span> (!header.isNullOrBlank()) { ... }\n\n    Text(\n        text = title,\n        color = MaterialTheme.colorScheme.onSurface,\n        style = MaterialTheme.typography.bodyMedium,\n    )\n\n    Row(\n        modifier = Modifier,\n        horizontalArrangement = Arrangement.spacedBy(\n            space = <span class=\"hljs-number\">8.</span>dp,\n        ),\n    ) {\n        <span class=\"hljs-keyword\">if</span> (managerPainter != <span class=\"hljs-literal\">null</span>) { ... }\n        <span class=\"hljs-keyword\">if</span> (!subtitle.isNullOrBlank()) { ... }\n    }\n}\n</code></pre>\n<p>세 번째 슬롯은 세 가지 다른 콜백을 포함하는 작업을 포함할 것입니다. 여기서는 존재 여부를 제어할 수 있도록 각각을 nullable로 표시했습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">RowScope</span>.<span class=\"hljs-title class_\">ContactActionsView</span>(\n    <span class=\"hljs-attr\">onChatClicked</span>: (() -> <span class=\"hljs-title class_\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">onMainClicked</span>: (() -> <span class=\"hljs-title class_\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">onCallClicked</span>: (() -> <span class=\"hljs-title class_\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n) {\n    <span class=\"hljs-title class_\">Row</span>(\n        modifier = <span class=\"hljs-title class_\">Modifier</span>\n            .<span class=\"hljs-title function_\">align</span>(<span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterVertically</span>),\n    ) { ... }\n}\n</code></pre>\n<p>모든 슬롯을 조립하고 이를 함수의 기초로 선언한 후 결과적으로 구조는 다음과 같아야 합니다:</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nprivate fun <span class=\"hljs-title class_\">ContactView</span>(\n    <span class=\"hljs-attr\">leadingPainter</span>: <span class=\"hljs-title class_\">Painter</span>,\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">String</span>,\n    <span class=\"hljs-attr\">modifier</span>: <span class=\"hljs-title class_\">Modifier</span> = <span class=\"hljs-title class_\">Modifier</span>,\n    <span class=\"hljs-attr\">config</span>: <span class=\"hljs-title class_\">ContactViewConfig</span> = <span class=\"hljs-title class_\">ContactViewDefaults</span>.<span class=\"hljs-title function_\">config</span>(),\n    <span class=\"hljs-attr\">leadingView</span>: @<span class=\"hljs-title class_\">Composable</span> <span class=\"hljs-title class_\">RowScope</span>.() -> <span class=\"hljs-title class_\">Unit</span> = {\n        <span class=\"hljs-title class_\">ContactLeadingView</span>(\n            imagePainter = leadingPainter,\n            headerAlignment = config.<span class=\"hljs-property\">headerAlignment</span>,\n        )\n    },\n    <span class=\"hljs-attr\">content</span>: @<span class=\"hljs-title class_\">Composable</span> <span class=\"hljs-title class_\">ColumnScope</span>.() -> <span class=\"hljs-title class_\">Unit</span> = {\n        <span class=\"hljs-title class_\">ContactContentView</span>(\n            title = title,\n        )\n    },\n    <span class=\"hljs-attr\">trailingView</span>: (@<span class=\"hljs-title class_\">Composable</span> <span class=\"hljs-title class_\">RowScope</span>.() -> <span class=\"hljs-title class_\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n)\n</code></pre>\n<p>이 구조에서 새로운 추가 요소는 컴포넌트의 다양한 설정을 제어하는 ContactViewConfig입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테이블 태그를 마크다운 형식으로 변경해주세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 이렇게 하지 마세요</span>\n@<span class=\"hljs-title class_\">Immutable</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ContactViewConfig</span> internal <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    internal val minHeight: Dp,\n    internal val verticalPadding: Dp,\n    internal val headerAlignment: Alignment.Vertical,\n</span>)\n\nobject <span class=\"hljs-title class_\">ContactViewDefaults</span> {\n\n    @<span class=\"hljs-title class_\">Composable</span>\n    fun <span class=\"hljs-title function_\">config</span>(\n        <span class=\"hljs-attr\">minHeight</span>: <span class=\"hljs-title class_\">Dp</span> = <span class=\"hljs-number\">56.</span>dp,\n        <span class=\"hljs-attr\">verticalPadding</span>: <span class=\"hljs-title class_\">Dp</span> = <span class=\"hljs-number\">8.</span>dp,\n        <span class=\"hljs-attr\">headerAlignment</span>: <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">Vertical</span> = <span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">CenterVertically</span>,\n    ): <span class=\"hljs-title class_\">ContactViewConfig</span> = <span class=\"hljs-title class_\">ContactViewConfig</span>(\n        minHeight = minHeight,\n        verticalPadding = verticalPadding,\n        headerAlignment = headerAlignment,\n    )\n}\n</code></pre>\n<p>자, 이제 구성 가능하고 작동하는 @Preview가 있는 컴포넌트가 준비되었습니다.</p>\n<p>다음에는 기본 기능을 확장하기 위해 기본 함수 위에 추가 컴포넌트를 작성할 수 있습니다. 선택 사항으로 간단한 타입 대신 도메인 클래스를 사용할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">FullNameContactView</span><span class=\"hljs-params\">(\n    imagePainter: <span class=\"hljs-type\">Painter</span>,\n    fullName: <span class=\"hljs-type\">String</span>,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier,\n)</span></span> {\n    ContactView(\n        leadingPainter = imagePainter,\n        title = fullName,\n        modifier = modifier,\n    )\n}\n</code></pre>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">ActionsContactView</span><span class=\"hljs-params\">(\n    imagePainter: <span class=\"hljs-type\">Painter</span>,\n    fullName: <span class=\"hljs-type\">String</span>,\n    modifiedTime: <span class=\"hljs-type\">String</span>,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier,\n    onChatClicked: (() -> <span class=\"hljs-type\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n    onMainClicked: (() -> <span class=\"hljs-type\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n    onCallClicked: (() -> <span class=\"hljs-type\">Unit</span>)? = <span class=\"hljs-literal\">null</span>,\n)</span></span> {\n    ContactView(\n        leadingPainter = imagePainter,\n        title = fullName,\n        modifier = modifier,\n        config = ContactViewDefaults.config(\n            minHeight = <span class=\"hljs-number\">72.</span>dp,\n            verticalPadding = <span class=\"hljs-number\">16.</span>dp,\n        ),\n        content = {\n            ContactContentView(\n                title = fullName,\n                subtitle = modifiedTime,\n            )\n        },\n        trailingView = {\n            ContactActionsView(\n                onChatClicked = onChatClicked,\n                onMainClicked = onMainClicked,\n                onCallClicked = onCallClicked,\n            )\n        },\n    )\n}\n</code></pre>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">DetailsContactView</span><span class=\"hljs-params\">(\n    imagePainter: <span class=\"hljs-type\">Painter</span>,\n    managerPainter: <span class=\"hljs-type\">Painter</span>,\n    title: <span class=\"hljs-type\">String</span>,\n    fullName: <span class=\"hljs-type\">String</span>,\n    modifiedTime: <span class=\"hljs-type\">String</span>,\n    modifier: <span class=\"hljs-type\">Modifier</span> = Modifier,\n)</span></span> {\n    ContactView(\n        leadingPainter = imagePainter,\n        title = fullName,\n        modifier = modifier,\n        config = ContactViewDefaults.config(\n            minHeight = <span class=\"hljs-number\">88.</span>dp,\n            verticalPadding = <span class=\"hljs-number\">16.</span>dp,\n            headerAlignment = Alignment.Top,\n        ),\n        content = {\n            ContactContentView(\n                title = fullName,\n                header = title,\n                subtitle = modifiedTime,\n                managerPainter = managerPainter,\n            )\n        },\n    )\n}\n</code></pre>\n<h1>일부 결론</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>@Preview를 살펴보면 컴포넌트 사이에는 차이가 거의 없을 것입니다. 코드적으로도 거의 차이가 없을 것입니다. 유연한 기능과 설정을 가진 컴포넌트는 세 가지 다른 독립적인 함수만큼의 코드 라인을 차지할 것입니다. 이 글이 유연한 컴포넌트를 작성하는 방법에 대해 더 잘 이해하는 데 도움이 되었으면 좋겠습니다. 더 많은 개발을 위해 필요시 이 비디오와 코드를 살펴보시기를 권장합니다.</p>\n<p><img src=\"/assets/img/2024-06-23-CreatingflexiblecomponentsinCompose_11.png\" alt=\"Creating flexible components in Compose\"></p>\n</body>\n</html>\n"},"__N_SSG":true}