{"pageProps":{"post":{"title":"간단한 안드로이드 Compose Flow 라이프사이클 처리 및 카운터로 배우기","description":"","date":"2024-05-18 15:24","slug":"2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter","content":"\n## 안드로이드 개발 배우기\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png)\n\n가끔 안드로이드 라이프사이클을 이해하려고 머리를 싸매면서, 정말 중요한 시나리오는 무엇인지 궁금해 할 때가 있습니다. 이해하지 못하면 적절하게 활용을 놓치게 될 수 있습니다.\n\n여기, 매우 간단한 디자인인 카운터를 고안해 보았습니다. 이를 통해 각종 간단한 라이프사이클 시나리오를 살펴볼 수 있습니다. 도움이 되길 바랍니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 간단한 흐름\n\n간단한 카운터를 만들기 위해, 제 ViewModel에 아래와 같은 흐름이 있습니다. 매 초마다 1씩 증가하는 흐름입니다.\n\n```js\nval counter = flow {\n    var value = 0\n    while (true) {\n       emit(value++)\n       delay(1000)\n    }\n}\n```\n\nMainActivity에서 트리거된 Composable 함수에서는, 상태 변수로 수집하고 표시합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsState(0)\nText(\"${stateVariable.value}\")\n```\n\n작동은 됩니다. 하지만 한 가지 문제가 있어요.\n\n## 화면을 회전하면 초기화돼요!\n\n화면을 회전할 때마다(세로에서 가로로 변경할 때) 숫자가 다시 시작돼요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_1.png\" />\n\n처음에는 카운터가 재설정되어 깜짝 놀랐습니다. ViewModel이 화면 회전(구성 변경)을 통해 유지되는 것에 대해 생각해 보았더니, 화면이 회전될 때마다 MainActivity가 파괴되고 카운터가 다시 수집된다는 것을 깨달았습니다.\n\n```js\nval stateVariable = viewModel.counter.collectAsState(0)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n각 컬렉션은 새로운 플로우 이벤트를 시작합니다. 따라서 화면을 회전할 때 카운터가 재설정됩니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_2.png)\n\n# 외부 변수를 플로우로 변경\n\n이 문제를 해결하기 위해 제가 고안한 해결책은 다음과 같습니다. 카운터 값을 플로우에 저장하는 대신 외부에서 정의하겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nvar value = 0\nval counter = flow {\n    while (true) {\n       emit(value++)\n       delay(1000)\n    }\n}\n```\n\n제 MainActivity에서 트리거된 Composable Function에서는 상태 변수로만 수집하고 표시합니다.\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsState(0)\nText(\"${stateVariable.value}\")\n```\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_3.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 방법은 작동합니다. 그리고 꾸준히 계속 작동합니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_4.png)\n\n## 백그라운드에서 멈추지 않음\n\n하지만 한 가지 문제가 있습니다. 앱을 백그라운드로 이동시키면 작동이 멈추지 않고 계속 실행됩니다 (활동이 종료되지 않고 계속 활성 상태로 남아 있음).\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_5.png\" />\n\n이게 이상적이지 않아요. 우리가 백그라운드로 가면(즉, 액티비티가 onPause되면), 일시 중지되기를 원했고, 다시 포어그라운드로 돌아오면 계속되기를 원했어요.\n\n그 이유는 collectAsState는 라이프사이클 변경을 인식하지 못하기 때문에, 흐름을 멈추거나 일시 중지시키지 못하기 때문이에요.\n\n## CollectAsStateWithLifecycle가 구조안으로 와서 구원을 줍니다\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n좋은 소식이 있어요. 구글에서 Manuel Vivo가 공유한 collectAsStateWithLifecycle을 소개했어요.\n\n우리는 이렇게만 하면 돼요:\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsStateWithLifecycle(0)\nText(\"${stateVariable.value}\")\n```\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_6.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n잠시 일시 중단해볼게요\n\n![image](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_7.png)\n\n## 시스템에 의해 종료될 때 상태를 저장하지 않음\n\nViewModel은 회전되더라도 앱이 계속 실행되도록 할 수 있어 좋습니다. 그러나 시스템에 의해 앱이 종료될 경우 계속 실행되지 않을 수 있습니다. 기기 메모리가 부족한 경우에는 OS가 백그라운드에서 실행 중인 앱을 종료할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이렇게 되면 우리 카운터에 무슨 일이 벌어집니다.\n\n![LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8.png)\n\n우리는 savedStateHandle을 사용하여 외부 값 저장 및 복원할 수 있습니다.\n\n```js\nvar value = savedStateHandle[KEY] ?: 0\nval counter = flow {\n    while (true) {\n       emit(value++)\n       savedStateHandle[KEY] = value\n       delay(1000)\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# StateFlow With Lifecycle Aware\n\n하지만 flow를 사용하고 있기 때문에, savedStateHandle에서 stateFlow를 직접 얻을 수 있다면 stateFlow를 사용해보는 것은 어떨까요?\n\n```kotlin\nval stateFlow = savedStateHandle.getStateFlow(KEY, 0)\n```\n\nflow와는 달리, stateFlow는 hot flow입니다. 이는 stateFlow 자체에서 값이 발행되지 않고, 외부에서 값을 받는다는 것을 의미합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그래서, ViewModel에서 아래의 간단한 코드를 가지고 있어요.\n\n```js\nval stateFlowCounter = savedStateHandle.getStateFlow(KEY, 0)\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n그리고 Activity에서는 아래와 같이 수집도 해요.\n\n```js\nval stateVariable\n    = viewModel.stateFlowCounter.collectAsStateWithLifecycle()\nText(\"${stateVariable.value}\")\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 방법은 상태Flow 변수를 저장하고 복원하므로 좋습니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_9.png)\n\n그러나 이 방식에는 문제가 있습니다. collectAsStateWithLifecycle를 사용하더라도 수집 부분이 MainActivity에 있습니다.\n\nstateFlow는 핫 플로우이며, 발행 프로세스도 ViewModel에 있기 때문에 발행 프로세스는 라이프사이클을 인식하지 못한 채 계속 실행됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n따라서 결과는 아래와 같습니다.\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_10.png\" />\n\n회전 문제와 저장 및 복원 문제를 해결했습니다. 그러나 백그라운드에서 일시 중지되지 않는 문제가 되돌아왔습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 이미지를 참고해 주세요.\n\n## WhileSubcribed가 도와 주었어요\n\n답을 찾기 위해 검색한 후, 답을 찾도록 도와준\nManuel Vivo님에게 감사드립니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간략하게 말하자면, stateFlow에 대해 WhileSubscribed를 사용하여 구독자(수집 중인)가 있는 경우에만 stateFlow가 활성화되도록 해야합니다.\n\n이를 위해 아래와 같이 stateIn을 추가해야 합니다.\n\n```js\nval stateFlowCounter = savedStateHandle\n    .getStateFlow(KEY, 0)\n    .stateIn(\n        viewModelScope,\n        SharingStarted.WhileSubscribed(0),\n        0\n    )\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n이렇게 해야합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```kotlin\nval stateVariable\n    = viewModel.stateFlowCounter.collectAsStateWithLifecycle()\nText(\"${stateVariable.value}\")\n```\n\n아래에 최신 코드가 설명되어 있습니다.\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_12.png\" />\n\n원하는 동작을 모두 갖게 될 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지1](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_13.png)\n\n![이미지2](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_14.png)\n\n![이미지3](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_15.png)\n\n# TL;DR\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 Google에서 권장하는 Lifecycle Aware한 Flow를 원한다면,\n\n- 보통 플로우나 핫 플로우와 관계없이 collectAsStateWithLifecycle을 사용하세요.\n- 모든 핫 플로우 (예: StateFlow)에는 WhileSubscribed를 적용하세요.\n\n이 내용이 유용하고 상태로 수집된 Flow 및 해당 라이프사이클 처리를 설명했기를 바랍니다.\n\n여기에서 코드와 디자인을 가져와 직접 실험해 볼 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png"},"coverImage":"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png","tag":["Tech"],"readingTime":12},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>안드로이드 개발 배우기</h2>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png\" alt=\"이미지\"></p>\n<p>가끔 안드로이드 라이프사이클을 이해하려고 머리를 싸매면서, 정말 중요한 시나리오는 무엇인지 궁금해 할 때가 있습니다. 이해하지 못하면 적절하게 활용을 놓치게 될 수 있습니다.</p>\n<p>여기, 매우 간단한 디자인인 카운터를 고안해 보았습니다. 이를 통해 각종 간단한 라이프사이클 시나리오를 살펴볼 수 있습니다. 도움이 되길 바랍니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>간단한 흐름</h1>\n<p>간단한 카운터를 만들기 위해, 제 ViewModel에 아래와 같은 흐름이 있습니다. 매 초마다 1씩 증가하는 흐름입니다.</p>\n<pre><code class=\"hljs language-js\">val counter = flow {\n    <span class=\"hljs-keyword\">var</span> value = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n       <span class=\"hljs-title function_\">emit</span>(value++)\n       <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>)\n    }\n}\n</code></pre>\n<p>MainActivity에서 트리거된 Composable 함수에서는, 상태 변수로 수집하고 표시합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> stateVariable = viewModel.counter.collectAsState(<span class=\"hljs-number\">0</span>)\nText(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${stateVariable.value}</span>\"</span>)\n</code></pre>\n<p>작동은 됩니다. 하지만 한 가지 문제가 있어요.</p>\n<h2>화면을 회전하면 초기화돼요!</h2>\n<p>화면을 회전할 때마다(세로에서 가로로 변경할 때) 숫자가 다시 시작돼요!</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_1.png\">\n<p>처음에는 카운터가 재설정되어 깜짝 놀랐습니다. ViewModel이 화면 회전(구성 변경)을 통해 유지되는 것에 대해 생각해 보았더니, 화면이 회전될 때마다 MainActivity가 파괴되고 카운터가 다시 수집된다는 것을 깨달았습니다.</p>\n<pre><code class=\"hljs language-js\">val stateVariable = viewModel.<span class=\"hljs-property\">counter</span>.<span class=\"hljs-title function_\">collectAsState</span>(<span class=\"hljs-number\">0</span>)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>각 컬렉션은 새로운 플로우 이벤트를 시작합니다. 따라서 화면을 회전할 때 카운터가 재설정됩니다.</p>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_2.png\" alt=\"이미지\"></p>\n<h1>외부 변수를 플로우로 변경</h1>\n<p>이 문제를 해결하기 위해 제가 고안한 해결책은 다음과 같습니다. 카운터 값을 플로우에 저장하는 대신 외부에서 정의하겠습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">var</span> value = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">val</span> counter = flow {\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n       emit(value++)\n       delay(<span class=\"hljs-number\">1000</span>)\n    }\n}\n</code></pre>\n<p>제 MainActivity에서 트리거된 Composable Function에서는 상태 변수로만 수집하고 표시합니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> stateVariable = viewModel.counter.collectAsState(<span class=\"hljs-number\">0</span>)\nText(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${stateVariable.value}</span>\"</span>)\n</code></pre>\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_3.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 방법은 작동합니다. 그리고 꾸준히 계속 작동합니다.</p>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_4.png\" alt=\"이미지\"></p>\n<h2>백그라운드에서 멈추지 않음</h2>\n<p>하지만 한 가지 문제가 있습니다. 앱을 백그라운드로 이동시키면 작동이 멈추지 않고 계속 실행됩니다 (활동이 종료되지 않고 계속 활성 상태로 남아 있음).</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_5.png\">\n<p>이게 이상적이지 않아요. 우리가 백그라운드로 가면(즉, 액티비티가 onPause되면), 일시 중지되기를 원했고, 다시 포어그라운드로 돌아오면 계속되기를 원했어요.</p>\n<p>그 이유는 collectAsState는 라이프사이클 변경을 인식하지 못하기 때문에, 흐름을 멈추거나 일시 중지시키지 못하기 때문이에요.</p>\n<h2>CollectAsStateWithLifecycle가 구조안으로 와서 구원을 줍니다</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>좋은 소식이 있어요. 구글에서 Manuel Vivo가 공유한 collectAsStateWithLifecycle을 소개했어요.</p>\n<p>우리는 이렇게만 하면 돼요:</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> stateVariable = viewModel.counter.collectAsStateWithLifecycle(<span class=\"hljs-number\">0</span>)\nText(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${stateVariable.value}</span>\"</span>)\n</code></pre>\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_6.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>잠시 일시 중단해볼게요</p>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_7.png\" alt=\"image\"></p>\n<h2>시스템에 의해 종료될 때 상태를 저장하지 않음</h2>\n<p>ViewModel은 회전되더라도 앱이 계속 실행되도록 할 수 있어 좋습니다. 그러나 시스템에 의해 앱이 종료될 경우 계속 실행되지 않을 수 있습니다. 기기 메모리가 부족한 경우에는 OS가 백그라운드에서 실행 중인 앱을 종료할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이렇게 되면 우리 카운터에 무슨 일이 벌어집니다.</p>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8.png\" alt=\"LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8\"></p>\n<p>우리는 savedStateHandle을 사용하여 외부 값 저장 및 복원할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> value = savedStateHandle[<span class=\"hljs-variable constant_\">KEY</span>] ?: <span class=\"hljs-number\">0</span>\nval counter = flow {\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n       <span class=\"hljs-title function_\">emit</span>(value++)\n       savedStateHandle[<span class=\"hljs-variable constant_\">KEY</span>] = value\n       <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>)\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>StateFlow With Lifecycle Aware</h1>\n<p>하지만 flow를 사용하고 있기 때문에, savedStateHandle에서 stateFlow를 직접 얻을 수 있다면 stateFlow를 사용해보는 것은 어떨까요?</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> stateFlow = savedStateHandle.getStateFlow(KEY, <span class=\"hljs-number\">0</span>)\n</code></pre>\n<p>flow와는 달리, stateFlow는 hot flow입니다. 이는 stateFlow 자체에서 값이 발행되지 않고, 외부에서 값을 받는다는 것을 의미합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그래서, ViewModel에서 아래의 간단한 코드를 가지고 있어요.</p>\n<pre><code class=\"hljs language-js\">val stateFlowCounter = savedStateHandle.<span class=\"hljs-title function_\">getStateFlow</span>(<span class=\"hljs-variable constant_\">KEY</span>, <span class=\"hljs-number\">0</span>)\ninit {\n    viewModelScope.<span class=\"hljs-property\">launch</span> {\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n           <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>)\n           savedStateHandle[<span class=\"hljs-variable constant_\">KEY</span>] = stateFlowCounter.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span>\n        }\n    }\n}\n</code></pre>\n<p>그리고 Activity에서는 아래와 같이 수집도 해요.</p>\n<pre><code class=\"hljs language-js\">val stateVariable\n    = viewModel.<span class=\"hljs-property\">stateFlowCounter</span>.<span class=\"hljs-title function_\">collectAsStateWithLifecycle</span>()\n<span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"${stateVariable.value}\"</span>)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 방법은 상태Flow 변수를 저장하고 복원하므로 좋습니다.</p>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_9.png\" alt=\"이미지\"></p>\n<p>그러나 이 방식에는 문제가 있습니다. collectAsStateWithLifecycle를 사용하더라도 수집 부분이 MainActivity에 있습니다.</p>\n<p>stateFlow는 핫 플로우이며, 발행 프로세스도 ViewModel에 있기 때문에 발행 프로세스는 라이프사이클을 인식하지 못한 채 계속 실행됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">init {\n    viewModelScope.<span class=\"hljs-property\">launch</span> {\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n           <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>)\n           savedStateHandle[<span class=\"hljs-variable constant_\">KEY</span>] = stateFlowCounter.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span>\n        }\n    }\n}\n</code></pre>\n<p>따라서 결과는 아래와 같습니다.</p>\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_10.png\">\n<p>회전 문제와 저장 및 복원 문제를 해결했습니다. 그러나 백그라운드에서 일시 중지되지 않는 문제가 되돌아왔습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래 이미지를 참고해 주세요.</p>\n<h2>WhileSubcribed가 도와 주었어요</h2>\n<p>답을 찾기 위해 검색한 후, 답을 찾도록 도와준\nManuel Vivo님에게 감사드립니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>간략하게 말하자면, stateFlow에 대해 WhileSubscribed를 사용하여 구독자(수집 중인)가 있는 경우에만 stateFlow가 활성화되도록 해야합니다.</p>\n<p>이를 위해 아래와 같이 stateIn을 추가해야 합니다.</p>\n<pre><code class=\"hljs language-js\">val stateFlowCounter = savedStateHandle\n    .<span class=\"hljs-title function_\">getStateFlow</span>(<span class=\"hljs-variable constant_\">KEY</span>, <span class=\"hljs-number\">0</span>)\n    .<span class=\"hljs-title function_\">stateIn</span>(\n        viewModelScope,\n        <span class=\"hljs-title class_\">SharingStarted</span>.<span class=\"hljs-title class_\">WhileSubscribed</span>(<span class=\"hljs-number\">0</span>),\n        <span class=\"hljs-number\">0</span>\n    )\ninit {\n    viewModelScope.<span class=\"hljs-property\">launch</span> {\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n           <span class=\"hljs-title function_\">delay</span>(<span class=\"hljs-number\">1000</span>)\n           savedStateHandle[<span class=\"hljs-variable constant_\">KEY</span>] = stateFlowCounter.<span class=\"hljs-property\">value</span> + <span class=\"hljs-number\">1</span>\n        }\n    }\n}\n</code></pre>\n<p>이렇게 해야합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-keyword\">val</span> stateVariable\n    = viewModel.stateFlowCounter.collectAsStateWithLifecycle()\nText(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${stateVariable.value}</span>\"</span>)\n</code></pre>\n<p>아래에 최신 코드가 설명되어 있습니다.</p>\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_12.png\">\n<p>원하는 동작을 모두 갖게 될 것입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_13.png\" alt=\"이미지1\"></p>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_14.png\" alt=\"이미지2\"></p>\n<p><img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_15.png\" alt=\"이미지3\"></p>\n<h1>TL;DR</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>만약 Google에서 권장하는 Lifecycle Aware한 Flow를 원한다면,</p>\n<ul>\n<li>보통 플로우나 핫 플로우와 관계없이 collectAsStateWithLifecycle을 사용하세요.</li>\n<li>모든 핫 플로우 (예: StateFlow)에는 WhileSubscribed를 적용하세요.</li>\n</ul>\n<p>이 내용이 유용하고 상태로 수집된 Flow 및 해당 라이프사이클 처리를 설명했기를 바랍니다.</p>\n<p>여기에서 코드와 디자인을 가져와 직접 실험해 볼 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}