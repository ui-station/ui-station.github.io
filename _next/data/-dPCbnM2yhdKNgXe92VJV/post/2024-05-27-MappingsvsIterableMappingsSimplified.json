{"pageProps":{"post":{"title":"맵핑 대 이터러블 맵핑 간단히 해석하기","description":"","date":"2024-05-27 16:20","slug":"2024-05-27-MappingsvsIterableMappingsSimplified","content":"\n안녕하세요! 모두들! 저는 모든 것을 간단하게 만들어 설명해드릴게요. 데이터 구조가 어떻게 작동하는지 설명하는 글이 정말 많죠. 하지만 여기서는 조금 더 쉽게 설명할 거에요. 이 글을 끝까지 읽어보시면 제대로 이해하실 거에요. 확실해요💯.\n\n![이미지](/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_0.png)\n\n# 표준 Mapping\n\nMappings이 뭔가요? 하하, 제가 어이가 없네요! Solidity에서의 Mappings은 간단한 전화번호부와 같아요. 사람의 이름을 통해 전화번호를 찾을 수 있지만, 전화번호를 통해 이름을 찾을 수는 없어요. (Mapping이라고 말할 때는 표준 Mapping을 의미합니다 😉) 지금쯤 완전 쉽다고 생각하셨을 거예요. 그래요, 이렇게 말해볼게요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n매핑은 Solidity에서 키-값 데이터 구조입니다. 고유한 키를 기반으로 값을 저장하고 검색할 수 있습니다. 주로 고유한 이더리움 주소와 다양한 값 유형을 연결하는 데 사용되어, 스마트 계약에서 데이터를 관리하는 데 필수적인 도구입니다.\n\n# 매핑의 종류\n\n간단한 매핑:\n\n간단한 매핑의 예제를 살펴봅시다. 이곳에서는 이더리움 주소와 해당 잔액 간의 연결을 만들고 있습니다. 이를 \"잔액(balances)\"이라는 매핑으로 부르겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n매핑 :address => uint) public balances;\n```\n\n<img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_1.png\" />\n\n컨트랙트인 SimpleMapping을 살펴보겠습니다.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\ncontract SimpleMapping {\n    mapping(address => uint) public balances;\n\n    function setBalance(address _user, uint _balance) public {\n        balances[_user] = _balance;\n    }\n\n    function getBalance(address _user) public view returns (uint) {\n        return balances[_user];\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래는 배포된 계약의 스크린샷입니다. 'setBalance' 함수를 호출할 때 이더리움 주소와 해당 잔고를 제공했습니다. 'getBalance'에서는 그 이더리움 주소의 잔고를 검색했습니다.\n\n![contract-screenshot](/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_2.png)\n\nSolidity에서 매핑을 선언할 때 주의할 점:\n\n- 사실상 두 값 사이의 연결을 만드는 것입니다.\n- 매핑에서 키를 사용하여 해당 값을 찾을 수 있지만, 역은 찾을 수 없습니다. 즉, 값을 사용하여 키를 찾을 수는 없습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n중첩 매핑:\n\n이제 중첩 매핑에 대해 알아보겠습니다. 두 개의 이더리움 주소와 불리언 값 사이의 링크를 생성 중입니다. 불리언 값이 true이면, 두 주소는 관련이 있습니다.\n\n```js\nmapping(address => mapping(address => bool)) public isRelated;\n```\n\n<img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_3.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n안녕하세요! 아래는 'NestedMapping' 계약에 대한 정보입니다.\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\ncontract NestedMapping {\n    mapping(address => mapping(address => bool)) public isRelated;\n\n    function setRelationship(address _user1, address _user2, bool _isRelated) public {\n        isRelated[_user1][_user2] = _isRelated;\n    }\n\n    function checkRelationship(address _user1, address _user2) public view returns (bool) {\n        return isRelated[_user1][_user2];\n    }\n}\n```\n\n배포된 계약의 스크린샷을 아래에서 확인할 수 있습니다. 'setRelationship' 함수를 사용하여 두 이더리움 주소 및 false 값을 제공하였습니다. 'checkRelationship' 함수에서 해당 중첩 매핑의 부울 값을 검색하였습니다.\n\n![매핑 이미지](/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n또한 중첩된 매핑의 경우:\n\n- 순서가 중요합니다.\n- \\_user1에 값 설정 후 \\_user2에 값 설정하는 것은 자동으로 \\_user2에 값 설정 후 \\_user1에 값 설정하는 것을 의미하지 않습니다.\n\n# 반복 가능한 매핑\n\n반복 가능한 매핑이란 무엇인가요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n반복 가능한 매핑은 모든 이름과 전화번호를 나열할 수 있는 향상된 전화번호부와 같습니다. 이름으로 전화번호를 찾을 수는 있지만 모든 항목을 하나씩 차례대로 확인할 수도 있습니다.\n\n주요 포인트:\n\n- 양방향 상호작용: 키로 값을 찾거나 모든 키를 나열할 수 있습니다.\n- 더 많은 제어: 보다 복잡한 작업을 수행할 수 있습니다. 예를 들어 보고서 생성이나 모든 항목에 대한 작업 수행 등이 가능합니다.\n\n예시:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\ncontract IterableMapping {\n\n    mapping(address => uint) private balances;\n\n    address[] private keys;\n\n    mapping(address => bool) private isKey;\n\n    function setBalance(address _user, uint _balance) public {\n        if (!isKey[_user]) {\n            keys.push(_user);\n            isKey[_user] = true;\n        }\n        balances[_user] = _balance;\n    }\n\n    function getBalance(address _user) public view returns (uint) {\n        return balances[_user];\n    }\n\n    function getAllKeys() public view returns (address[] memory) {\n        return keys;\n    }\n}\n```\n\n배포된 스마트 계약의 스크린샷이 아래에 있습니다. ‘getAllKeys’ 함수를 호출했습니다. 현재 ‘keys’ 배열에 저장된 모든 키를 반환해야 합니다. 이는 Iterable Mapping을 사용하여 가능한 내용 중 하나에 불과합니다… 모두 나열했습니다.\n\n<img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_5.png\" />\n\n# 왜 Iterable Mappings를 사용해야 하는가?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 모든 것 나열하기: 모든 항목을 보고 싶을 때 반복 가능한 매핑을 사용할 수 있어요. 예를 들어, 모든 토큰 소지자를 나열하는 경우입니다.\n- 복잡한 작업: 모든 항목에 작업을 수행할 수 있도록해주어, 모든 사용자에게 보상을 분배하는 것과 같은 작업을 수행할 수 있어요.\n\n각각을 사용하는 시점:\n\n- 표준 매핑: 간단하고 빠른 조회가 필요하며 모든 항목을 나열할 필요가 없는 경우에 사용하세요. 예를 들어, 사용자의 잔고를 확인하는 경우입니다.\n- 반복 가능한 매핑: 모든 항목을 나열하거나 관리해야 할 때 사용하세요. 예를 들어, 모든 사용자의 잔액을 처리하는 경우입니다.\n\n# 비교 요약\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<table> 태그를 Markdown 형식으로 변경해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 마크다운 형식으로 변경해 주세요!\n","ogImage":{"url":"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_0.png"},"coverImage":"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 모두들! 저는 모든 것을 간단하게 만들어 설명해드릴게요. 데이터 구조가 어떻게 작동하는지 설명하는 글이 정말 많죠. 하지만 여기서는 조금 더 쉽게 설명할 거에요. 이 글을 끝까지 읽어보시면 제대로 이해하실 거에요. 확실해요💯.</p>\n<p><img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_0.png\" alt=\"이미지\"></p>\n<h1>표준 Mapping</h1>\n<p>Mappings이 뭔가요? 하하, 제가 어이가 없네요! Solidity에서의 Mappings은 간단한 전화번호부와 같아요. 사람의 이름을 통해 전화번호를 찾을 수 있지만, 전화번호를 통해 이름을 찾을 수는 없어요. (Mapping이라고 말할 때는 표준 Mapping을 의미합니다 😉) 지금쯤 완전 쉽다고 생각하셨을 거예요. 그래요, 이렇게 말해볼게요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>매핑은 Solidity에서 키-값 데이터 구조입니다. 고유한 키를 기반으로 값을 저장하고 검색할 수 있습니다. 주로 고유한 이더리움 주소와 다양한 값 유형을 연결하는 데 사용되어, 스마트 계약에서 데이터를 관리하는 데 필수적인 도구입니다.</p>\n<h1>매핑의 종류</h1>\n<p>간단한 매핑:</p>\n<p>간단한 매핑의 예제를 살펴봅시다. 이곳에서는 이더리움 주소와 해당 잔액 간의 연결을 만들고 있습니다. 이를 \"잔액(balances)\"이라는 매핑으로 부르겠습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">매핑 :<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> uint) public balances;\n</code></pre>\n<img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_1.png\">\n<p>컨트랙트인 SimpleMapping을 살펴보겠습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\npragma solidity ^<span class=\"hljs-number\">0.8</span><span class=\"hljs-number\">.25</span>;\n\ncontract <span class=\"hljs-title class_\">SimpleMapping</span> {\n    <span class=\"hljs-title function_\">mapping</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> uint) public balances;\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setBalance</span>(<span class=\"hljs-params\">address _user, uint _balance</span>) public {\n        balances[_user] = _balance;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getBalance</span>(<span class=\"hljs-params\">address _user</span>) public view returns (uint) {\n        <span class=\"hljs-keyword\">return</span> balances[_user];\n    }\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래는 배포된 계약의 스크린샷입니다. 'setBalance' 함수를 호출할 때 이더리움 주소와 해당 잔고를 제공했습니다. 'getBalance'에서는 그 이더리움 주소의 잔고를 검색했습니다.</p>\n<p><img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_2.png\" alt=\"contract-screenshot\"></p>\n<p>Solidity에서 매핑을 선언할 때 주의할 점:</p>\n<ul>\n<li>사실상 두 값 사이의 연결을 만드는 것입니다.</li>\n<li>매핑에서 키를 사용하여 해당 값을 찾을 수 있지만, 역은 찾을 수 없습니다. 즉, 값을 사용하여 키를 찾을 수는 없습니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>중첩 매핑:</p>\n<p>이제 중첩 매핑에 대해 알아보겠습니다. 두 개의 이더리움 주소와 불리언 값 사이의 링크를 생성 중입니다. 불리언 값이 true이면, 두 주소는 관련이 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">mapping</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> <span class=\"hljs-title function_\">mapping</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> bool)) public isRelated;\n</code></pre>\n<img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_3.png\">\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>안녕하세요! 아래는 'NestedMapping' 계약에 대한 정보입니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\npragma solidity ^<span class=\"hljs-number\">0.8</span><span class=\"hljs-number\">.25</span>;\n\ncontract <span class=\"hljs-title class_\">NestedMapping</span> {\n    <span class=\"hljs-title function_\">mapping</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> <span class=\"hljs-title function_\">mapping</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> bool)) public isRelated;\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setRelationship</span>(<span class=\"hljs-params\">address _user1, address _user2, bool _isRelated</span>) public {\n        isRelated[_user1][_user2] = _isRelated;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkRelationship</span>(<span class=\"hljs-params\">address _user1, address _user2</span>) public view returns (bool) {\n        <span class=\"hljs-keyword\">return</span> isRelated[_user1][_user2];\n    }\n}\n</code></pre>\n<p>배포된 계약의 스크린샷을 아래에서 확인할 수 있습니다. 'setRelationship' 함수를 사용하여 두 이더리움 주소 및 false 값을 제공하였습니다. 'checkRelationship' 함수에서 해당 중첩 매핑의 부울 값을 검색하였습니다.</p>\n<p><img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_4.png\" alt=\"매핑 이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>또한 중첩된 매핑의 경우:</p>\n<ul>\n<li>순서가 중요합니다.</li>\n<li>_user1에 값 설정 후 _user2에 값 설정하는 것은 자동으로 _user2에 값 설정 후 _user1에 값 설정하는 것을 의미하지 않습니다.</li>\n</ul>\n<h1>반복 가능한 매핑</h1>\n<p>반복 가능한 매핑이란 무엇인가요?</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>반복 가능한 매핑은 모든 이름과 전화번호를 나열할 수 있는 향상된 전화번호부와 같습니다. 이름으로 전화번호를 찾을 수는 있지만 모든 항목을 하나씩 차례대로 확인할 수도 있습니다.</p>\n<p>주요 포인트:</p>\n<ul>\n<li>양방향 상호작용: 키로 값을 찾거나 모든 키를 나열할 수 있습니다.</li>\n<li>더 많은 제어: 보다 복잡한 작업을 수행할 수 있습니다. 예를 들어 보고서 생성이나 모든 항목에 대한 작업 수행 등이 가능합니다.</li>\n</ul>\n<p>예시:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\npragma solidity <span class=\"hljs-number\">0.8</span><span class=\"hljs-number\">.25</span>;\n\ncontract <span class=\"hljs-title class_\">IterableMapping</span> {\n\n    <span class=\"hljs-title function_\">mapping</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> uint) private balances;\n\n    address[] private keys;\n\n    <span class=\"hljs-title function_\">mapping</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">address</span> =></span> bool) private isKey;\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setBalance</span>(<span class=\"hljs-params\">address _user, uint _balance</span>) public {\n        <span class=\"hljs-keyword\">if</span> (!isKey[_user]) {\n            keys.<span class=\"hljs-title function_\">push</span>(_user);\n            isKey[_user] = <span class=\"hljs-literal\">true</span>;\n        }\n        balances[_user] = _balance;\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getBalance</span>(<span class=\"hljs-params\">address _user</span>) public view returns (uint) {\n        <span class=\"hljs-keyword\">return</span> balances[_user];\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getAllKeys</span>(<span class=\"hljs-params\"></span>) public view returns (address[] memory) {\n        <span class=\"hljs-keyword\">return</span> keys;\n    }\n}\n</code></pre>\n<p>배포된 스마트 계약의 스크린샷이 아래에 있습니다. ‘getAllKeys’ 함수를 호출했습니다. 현재 ‘keys’ 배열에 저장된 모든 키를 반환해야 합니다. 이는 Iterable Mapping을 사용하여 가능한 내용 중 하나에 불과합니다… 모두 나열했습니다.</p>\n<img src=\"/assets/img/2024-05-27-MappingsvsIterableMappingsSimplified_5.png\">\n<h1>왜 Iterable Mappings를 사용해야 하는가?</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>모든 것 나열하기: 모든 항목을 보고 싶을 때 반복 가능한 매핑을 사용할 수 있어요. 예를 들어, 모든 토큰 소지자를 나열하는 경우입니다.</li>\n<li>복잡한 작업: 모든 항목에 작업을 수행할 수 있도록해주어, 모든 사용자에게 보상을 분배하는 것과 같은 작업을 수행할 수 있어요.</li>\n</ul>\n<p>각각을 사용하는 시점:</p>\n<ul>\n<li>표준 매핑: 간단하고 빠른 조회가 필요하며 모든 항목을 나열할 필요가 없는 경우에 사용하세요. 예를 들어, 사용자의 잔고를 확인하는 경우입니다.</li>\n<li>반복 가능한 매핑: 모든 항목을 나열하거나 관리해야 할 때 사용하세요. 예를 들어, 모든 사용자의 잔액을 처리하는 경우입니다.</li>\n</ul>\n<h1>비교 요약</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n 태그를 Markdown 형식으로 변경해주세요.\n\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n\n<p>테이블 태그를 마크다운 형식으로 변경해 주세요!</p><table><!-- ui-station 사각형 --><script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script></table>\n</body>\n</html>\n"},"__N_SSG":true}