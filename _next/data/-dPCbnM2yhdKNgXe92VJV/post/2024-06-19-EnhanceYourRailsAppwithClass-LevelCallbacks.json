{"pageProps":{"post":{"title":"레일즈 앱에 클래스 레벨 콜백을 추가해보세요","description":"","date":"2024-06-19 22:14","slug":"2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks","content":"\n<img src=\"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png\" />\n\n# 소개\n\n지난 주에는 ActiveJob의 결과를 처리해야 하는 기능을 작업했습니다. 해당 작업은 젬 내에 존재했고, 호스트 애플리케이션의 클래스에서 메소드를 호출하기 위해 젬을 수정해야 했습니다. 이 상황은 클래스 인스턴스와는 독립적으로 처리되어야 했기 때문에 클래스 수준의 콜백이 필요했습니다.\n\n# Rails에서 콜백 이해하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n콜백은 객체의 라이프사이클 중 특정 시점에 호출되는 메서드입니다. Rails에서는 콜백이 널리 사용되어 객체의 생성, 업데이트 및 삭제 중에 코드를 자동으로 실행합니다. 콜백에 대해 더 알고 싶다면 Rails 가이드의 콜백 섹션을 참조해보세요.\n\n# 예시 코드\n\n## ActiveJob의 젬\n\n여기에는 호스트 애플리케이션의 클래스에서 메서드를 호출해야 하는 젬 내의 작업이 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# ActiveJob in the gem\n\nclass MyJob < ActiveJob::Base\ndef perform\nresult = # perform the job and get the result\nif ModelName.respond_to?(:after_result, true)\nModelName.after_result { result }\nend\nend\nend\n\n이 스니펫에서는 호스트 애플리케이션의 ModelName 클래스가 after_result 클래스 메소드를 갖고 있는지 확인합니다. 해당 메소드가 있다면 블록을 사용하여 작업 결과를 이 메소드로 전달합니다.\n\n## Host Application Class Method\n\n호스트 애플리케이션에서는 클래스 내에 after_result 메소드를 정의합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 호스트 응용프로그램의 클래스\n\nClass ModelName\ndef self.after_result\nresult = yield if block_given?\nprocess(result) if result.present?\nend\n\ndef self.process(result) # 결과를 처리합니다\nend\nend\n\n여기서 yield는 작업 결과를 after_result 메서드로 전달하며, 결과가 있는 경우 처리합니다.\n\n## 인스턴스 메서드 콜백\n\n인스턴스 메서드와 Rails 콜백을 사용한다면 조금 다르게 보일 것입니다. define_callbacks와 set_callback을 사용하여 클래스 인스턴스에서 콜백을 정의할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```ruby\n# 호스트 응용 프로그램의 클래스\nclass ModelName\n  define_callbacks :result\n  set_callback :result, :after, :after_result, if: -> { respond_to?(:after_result, true) }\n\n  def after_result\n    result = yield if block_given?\n    process(result) if result.present?\n  end\n\n  def process(result)\n    # 결과 처리\n  end\nend\n```\n\n이 예에서 after_result는 인스턴스 메서드입니다. :result 콜백을 정의하고, :result 콜백이 트리거된 후에 after_result 메서드가 실행되어야 함을 지정합니다.\n\n## 젬 내 수정된 ActiveJob\n\n인스턴스 메서드 콜백을 사용하려면 작업을 다음과 같이 수정하십시오:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# ActiveJob in the gem\nclass MyJob < ActiveJob::Base\n  def perform(instance)\n    result = # perform the job and get the result\n    if instance.respond_to?(:after_result, true)\n      instance.run_callbacks(:result) { result }\n    end\n  end\nend\n```\n\n여기서 instance는 호스트 애플리케이션의 ModelName의 인스턴스입니다. after_result에 응답하는지 확인하고 :result 콜백을 실행합니다.\n\n# 결론\n\n클래스 메서드를 콜백으로 사용하는 방법과 인스턴스 메서드에 대해 Rails의 set_callback을 활용하는 방법을 다루었습니다. 사용 사례에 따라 클래스 수준 또는 인스턴스 수준 메서드가 필요한 경우 적절한 콜백 메커니즘을 구현할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png"},"coverImage":"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png\">\n<h1>소개</h1>\n<p>지난 주에는 ActiveJob의 결과를 처리해야 하는 기능을 작업했습니다. 해당 작업은 젬 내에 존재했고, 호스트 애플리케이션의 클래스에서 메소드를 호출하기 위해 젬을 수정해야 했습니다. 이 상황은 클래스 인스턴스와는 독립적으로 처리되어야 했기 때문에 클래스 수준의 콜백이 필요했습니다.</p>\n<h1>Rails에서 콜백 이해하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>콜백은 객체의 라이프사이클 중 특정 시점에 호출되는 메서드입니다. Rails에서는 콜백이 널리 사용되어 객체의 생성, 업데이트 및 삭제 중에 코드를 자동으로 실행합니다. 콜백에 대해 더 알고 싶다면 Rails 가이드의 콜백 섹션을 참조해보세요.</p>\n<h1>예시 코드</h1>\n<h2>ActiveJob의 젬</h2>\n<p>여기에는 호스트 애플리케이션의 클래스에서 메서드를 호출해야 하는 젬 내의 작업이 있습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>ActiveJob in the gem</h1>\n<p>class MyJob &#x3C; ActiveJob::Base\ndef perform\nresult = # perform the job and get the result\nif ModelName.respond_to?(:after_result, true)\nModelName.after_result { result }\nend\nend\nend</p>\n<p>이 스니펫에서는 호스트 애플리케이션의 ModelName 클래스가 after_result 클래스 메소드를 갖고 있는지 확인합니다. 해당 메소드가 있다면 블록을 사용하여 작업 결과를 이 메소드로 전달합니다.</p>\n<h2>Host Application Class Method</h2>\n<p>호스트 애플리케이션에서는 클래스 내에 after_result 메소드를 정의합니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>호스트 응용프로그램의 클래스</h1>\n<p>Class ModelName\ndef self.after_result\nresult = yield if block_given?\nprocess(result) if result.present?\nend</p>\n<p>def self.process(result) # 결과를 처리합니다\nend\nend</p>\n<p>여기서 yield는 작업 결과를 after_result 메서드로 전달하며, 결과가 있는 경우 처리합니다.</p>\n<h2>인스턴스 메서드 콜백</h2>\n<p>인스턴스 메서드와 Rails 콜백을 사용한다면 조금 다르게 보일 것입니다. define_callbacks와 set_callback을 사용하여 클래스 인스턴스에서 콜백을 정의할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-comment\"># 호스트 응용 프로그램의 클래스</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ModelName</span>\n  define_callbacks <span class=\"hljs-symbol\">:result</span>\n  set_callback <span class=\"hljs-symbol\">:result</span>, <span class=\"hljs-symbol\">:after</span>, <span class=\"hljs-symbol\">:after_result</span>, <span class=\"hljs-symbol\">if:</span> -> { respond_to?(<span class=\"hljs-symbol\">:after_result</span>, <span class=\"hljs-literal\">true</span>) }\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">after_result</span>\n    result = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">if</span> block_given?\n    process(result) <span class=\"hljs-keyword\">if</span> result.present?\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\">result</span>)\n    <span class=\"hljs-comment\"># 결과 처리</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n</code></pre>\n<p>이 예에서 after_result는 인스턴스 메서드입니다. :result 콜백을 정의하고, :result 콜백이 트리거된 후에 after_result 메서드가 실행되어야 함을 지정합니다.</p>\n<h2>젬 내 수정된 ActiveJob</h2>\n<p>인스턴스 메서드 콜백을 사용하려면 작업을 다음과 같이 수정하십시오:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-title class_\">ActiveJob</span> <span class=\"hljs-keyword\">in</span> the gem\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyJob</span> &#x3C; <span class=\"hljs-title class_\">ActiveJob</span>::<span class=\"hljs-title class_\">Base</span>\n  def <span class=\"hljs-title function_\">perform</span>(instance)\n    result = # perform the job and get the result\n    <span class=\"hljs-keyword\">if</span> instance.<span class=\"hljs-property\">respond_to</span>?(:after_result, <span class=\"hljs-literal\">true</span>)\n      instance.<span class=\"hljs-title function_\">run_callbacks</span>(<span class=\"hljs-params\">:result</span>) { result }\n    end\n  end\nend\n</code></pre>\n<p>여기서 instance는 호스트 애플리케이션의 ModelName의 인스턴스입니다. after_result에 응답하는지 확인하고 :result 콜백을 실행합니다.</p>\n<h1>결론</h1>\n<p>클래스 메서드를 콜백으로 사용하는 방법과 인스턴스 메서드에 대해 Rails의 set_callback을 활용하는 방법을 다루었습니다. 사용 사례에 따라 클래스 수준 또는 인스턴스 수준 메서드가 필요한 경우 적절한 콜백 메커니즘을 구현할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}