{"pageProps":{"post":{"title":"Python 스크립트를 가벼운 도커 스케줄러로 조율하기","description":"","date":"2024-05-27 17:21","slug":"2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler","content":"\n<img src=\"/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_0.png\" />\n\n안녕하세요,\n\n요즘에 미니 PC를 사서 집에 작은 개인 서버를 세팅해봤어요 — 진짜 게이머 같은 스타일, ㅋㅋㅋ. 이 서버에서 몇 가지 개인 프로젝트를 돌릴 계획이었는데, 그래서 crontab만큼 단순하지 않은 가벼운 Python 스크립트 스케줄러가 필요했어요.\n\n조사를 하다가 Cronicle을 발견했고, Docker에서 실행할 수 있는 프로젝트도 찾았어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_1.png)\n\n문제는... Cronicle은 기본적으로 셸 및 HTTP 요청 두 가지 유형의 작업만 지원합니다. 셸 스크립트에서 Python을 실행하는 것이 항상 최상의 경험은 아니며 (게다가 이미지에는 Python이 설치되어 있지도 않습니다. Cronicle은 Node.js에서 실행됩니다).\n\n그래서 저는 Python 환경이 설정되고 Cronicle 내부에 사용할 준비가 된 기존 이미지를 기반으로 나만의 도커 이미지를 만들기로 결정했습니다!\n\n```js\nFROM soulteary/cronicle:0.9.46\n\nENV PYTHONUNBUFFERED=1\n\nRUN apk add --no-cache python3 py3-pip\n\nCOPY bin/python-script-plugin.py /opt/cronicle/bin/python-script-plugin.py\nRUN chmod +x /opt/cronicle/bin/python-script-plugin.py\nCOPY config/plugins.pixl /tmp/plugins.pixl\nRUN /opt/cronicle/bin/control.sh import /tmp/plugins.pixl\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n내 플러그인에서는 스크립트뿐만 아니라 작업을 생성할 때 Python 라이브러리, 환경 변수, 실행 매개변수를 구성할 수 있어요. 각 Python \"이벤트\" (Cronicle이 작업/작업을 위한 용어로 사용하는 용어)는 자체 \"런타임\"에서 실행되며, 라이브러리나 환경 변수를 혼합하지 않아 모든 실행에서 무결성을 보장해요.\n\n![이미지](/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_2.png)\n\n개인 프로젝트(또는 소규모/중규모 전문 프로젝트)를 진행 중인 분들을 위해 Cronicle은 놀라운 오케스트레이터 대안이에요. 왜냐하면:\n\n- 작업 실행 일정 짜기 및 연결하기\n- 이메일 알림\n- 작업 실행 로그, 통계, 이력 등에 접근하기 가능해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image](/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_3.png)\n\nThe link to my repository with the image is [here](repository_link).\nFeel free to access my other repositories, I post a lot of snippets and personal projects that could help you!\n","ogImage":{"url":"/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_0.png"},"coverImage":"/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_0.png\">\n<p>안녕하세요,</p>\n<p>요즘에 미니 PC를 사서 집에 작은 개인 서버를 세팅해봤어요 — 진짜 게이머 같은 스타일, ㅋㅋㅋ. 이 서버에서 몇 가지 개인 프로젝트를 돌릴 계획이었는데, 그래서 crontab만큼 단순하지 않은 가벼운 Python 스크립트 스케줄러가 필요했어요.</p>\n<p>조사를 하다가 Cronicle을 발견했고, Docker에서 실행할 수 있는 프로젝트도 찾았어요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_1.png\" alt=\"이미지\"></p>\n<p>문제는... Cronicle은 기본적으로 셸 및 HTTP 요청 두 가지 유형의 작업만 지원합니다. 셸 스크립트에서 Python을 실행하는 것이 항상 최상의 경험은 아니며 (게다가 이미지에는 Python이 설치되어 있지도 않습니다. Cronicle은 Node.js에서 실행됩니다).</p>\n<p>그래서 저는 Python 환경이 설정되고 Cronicle 내부에 사용할 준비가 된 기존 이미지를 기반으로 나만의 도커 이미지를 만들기로 결정했습니다!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">FROM</span> soulteary/<span class=\"hljs-attr\">cronicle</span>:<span class=\"hljs-number\">0.9</span><span class=\"hljs-number\">.46</span>\n\n<span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-variable constant_\">PYTHONUNBUFFERED</span>=<span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-variable constant_\">RUN</span> apk add --no-cache python3 py3-pip\n\n<span class=\"hljs-variable constant_\">COPY</span> bin/python-script-plugin.<span class=\"hljs-property\">py</span> /opt/cronicle/bin/python-script-plugin.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-variable constant_\">RUN</span> chmod +x /opt/cronicle/bin/python-script-plugin.<span class=\"hljs-property\">py</span>\n<span class=\"hljs-variable constant_\">COPY</span> config/plugins.<span class=\"hljs-property\">pixl</span> /tmp/plugins.<span class=\"hljs-property\">pixl</span>\n<span class=\"hljs-variable constant_\">RUN</span> /opt/cronicle/bin/control.<span class=\"hljs-property\">sh</span> <span class=\"hljs-keyword\">import</span> /tmp/plugins.<span class=\"hljs-property\">pixl</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>내 플러그인에서는 스크립트뿐만 아니라 작업을 생성할 때 Python 라이브러리, 환경 변수, 실행 매개변수를 구성할 수 있어요. 각 Python \"이벤트\" (Cronicle이 작업/작업을 위한 용어로 사용하는 용어)는 자체 \"런타임\"에서 실행되며, 라이브러리나 환경 변수를 혼합하지 않아 모든 실행에서 무결성을 보장해요.</p>\n<p><img src=\"/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_2.png\" alt=\"이미지\"></p>\n<p>개인 프로젝트(또는 소규모/중규모 전문 프로젝트)를 진행 중인 분들을 위해 Cronicle은 놀라운 오케스트레이터 대안이에요. 왜냐하면:</p>\n<ul>\n<li>작업 실행 일정 짜기 및 연결하기</li>\n<li>이메일 알림</li>\n<li>작업 실행 로그, 통계, 이력 등에 접근하기 가능해요.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-05-27-OrchestratingPythonscriptswithalightweightdockerscheduler_3.png\" alt=\"Image\"></p>\n<p>The link to my repository with the image is <a href=\"repository_link\">here</a>.\nFeel free to access my other repositories, I post a lot of snippets and personal projects that could help you!</p>\n</body>\n</html>\n"},"__N_SSG":true}