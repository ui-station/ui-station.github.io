{"pageProps":{"post":{"title":"Jetpack Compose에서 사용자 정의 3D 대화 상자 애니메이션 만들기","description":"","date":"2024-06-19 22:26","slug":"2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose","content":"\n환영합니다 👋\n\n젯팩 컴포즈의 기본 대화 상자 모양 애니메이션에 지루한가요? 그럼 다행히도 올바른 곳에 오신 것을 환영합니다.\n\n이 기사에서는 사용자를 기쁘게 할 멋진 3D 애니메이션을 젯팩 컴포즈의 대화 상자에 5분 안에 만들어 보겠습니다.\n\n다행히도, 젯팩 컴포즈를 사용하면 이를 쉽게 할 수 있습니다 🤗\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_0.png)\n\n# AnimatedDialog 함수\n\n다이얼로그를 재사용 가능하고 어떤 시나리오에도 적용할 수 있게 하기 위해, 애니메이션을 포함하고 다이얼로그의 내용과 속성을 지정할 수 있는 함수를 만들어 봅시다.\n\n```js\n@Composable\nfun AnimatedDialog(\n    onDismiss: () -> Unit,\n    inAnimDuration: Int = 720,\n    outAnimDuration: Int = 450,\n    properties: DialogProperties = DialogProperties(),\n    content: @Composable (triggerDismiss: () -> Unit) -> Unit,\n)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 함수는 여러 개의 매개변수를 사용합니다. 함께 살펴보겠습니다:\n\n✨ onDismiss ➜ 대화 상자가 닫힐 때 트리거되는 콜백 함수입니다.\n\n✨ inAnimDuration ➜ 대화 상자의 표시 애니메이션 지속 시간입니다.\n\n✨ outAnimDuration ➜ 대화 상자의 사라짐 애니메이션 지속 시간입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n✨ properties ➜ 대화 상자의 설정 속성입니다.\n\n✨ content ➜ 대화 상자 내용을 정의하는 composable 람다입니다. 이 람다는 대화 상자를 종료 애니메이션과 함께 프로그래밍 방식으로 닫을 수 있는 함수 (triggerDismiss)를 받습니다.\n\n# 구현\n\n자, 이제 애니메이션 구현으로 넘어갈까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 변수 정의\n\n먼저, 몇 가지 변수를 정의해야 합니다:\n\n```js\n// 종료 애니메이션 처리를 위한 코루틴 범위\nval scope = rememberCoroutineScope()\n// 애니메이션을 관리하는 상태\nvar isDialogVisible by remember { mutableStateOf(false) }\n// 다양한 애니메이션에서 사용될 공통 애니메이션 스펙\nval animationSpec = tween<Float>(\n    if (isDialogVisible) inAnimDuration else outAnimDuration\n)\n```\n\n## 애니메이션 상태\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그 다음으로, alpha, rotationX 및 scale에 대한 세 가지 애니메이션 상태를 정의해야합니다:\n\n```js\nval dialogAlpha by animateFloatAsState(\n    targetValue = if (isDialogVisible) 1f else 0f,\n    animationSpec = animationSpec\n)\n\nval dialogRotationX by animateFloatAsState(\n    targetValue = if (isDialogVisible) 0f else -90f,\n    animationSpec = animationSpec\n)\n\nval dialogScale by animateFloatAsState(\n    targetValue = if (isDialogVisible) 1f else 0f,\n    animationSpec = animationSpec\n)\n```\n\n## 애니메이션 람다로 닫기\n\n또한 다이얼로그를 종료 애니메이션으로 닫을 람다 함수를 정의해야하며, 이것은 컨텐츠에 전달할 것입니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nval dismissWithAnimation: () -> Unit = {\n    scope.launch {\n        // 종료 애니메이션을 트리거합니다\n        isDialogVisible = false\n        // 완료될 때까지 기다립니다\n        delay(outAnimDuration.toLong())\n        // 대화 상자를 닫습니다\n        onDismiss()\n    }\n}\n```\n\n## Entry Animation 트리거하기\n\n컴포저블을 실행했을 때 진입 애니메이션을 트리거하려면 LaunchedEffect와 Unit을 키로 사용할 수 있습니다:\n\n```js\nLaunchedEffect(Unit) {\n    isDialogVisible = true\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 대화창 만들기\n\n최종 부분에서는 모든 것을 함께 결합하고이 매혹적인 애니메이션으로 대화창을 만들 준비가 되었습니다:\n\n```js\nDialog(\n    onDismissRequest = dismissWithAnimation,\n    properties = properties\n) {\n    Box(\n        modifier = Modifier\n            // 알파 전환 적용\n            .alpha(dialogAlpha)\n            // 스케일 전환 적용\n            .scale(dialogScale)\n            // x축 회전 전환 적용\n            .graphicsLayer { rotationX = dialogRotationX },\n        content = {\n            content(dismissWithAnimation)\n        }\n    )\n}\n```\n\n축하합니다🥳! 성공적으로 만들었어요👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있습니다🧑‍💻. 이제 어떻게 활용할 수 있는지 알아봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 광고\n\n외국어를 배우고 새 어휘에서 고민 중이신가요? 그렇다면, 여행을 쉽고 편리하게 만들어줄 이 어휘 학습 앱을 확인해보시는 것을 강력히 추천드립니다!\n\n![이미지](/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_1.png)\n\n# 사용법\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n좋아요, 이제 이 기능을 사용하여 일반적인 샘플을 만들어볼게요.\n\n## 변수 선언하기\n\n먼저, 대화 상태를 저장할 변수를 선언해보세요:\n\n```js\nvar showDialog by remember { mutableStateOf(false) }\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 대화 상자를 트리거하는 버튼\n\n이제 우리는 대화 상자를 열기 위한 버튼이 필요합니다:\n\n```js\nButton(\n    onClick = { showDialog = true }\n) {\n    Text(\"대화 상자 열기\")\n}\n```\n\n## 대화 상자 표시\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마지막으로, showDialog가 true로 설정되면 다이얼로그가 표시됩니다:\n\n```js\nif (showDialog) {\n    AnimatedDialog(\n        onDismiss = { showDialog = false }\n    ) { triggerDismiss ->\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .background(\n                    color = MaterialTheme.colorScheme.surface,\n                    shape = RoundedCornerShape(24.dp)\n                )\n                .padding(16.dp)\n        ) {\n            Text(\n                text = \"👏 박수 알림 대화 상자\",\n                color = MaterialTheme.colorScheme.contentColorFor(MaterialTheme.colorScheme.surface),\n                style = MaterialTheme.typography.titleLarge\n            )\n\n            Spacer(Modifier.height(8.dp))\n\n            Text(\n                text = \"박수 버튼을 눌러 감사를 표현해 주세요.\",\n                color = MaterialTheme.colorScheme.contentColorFor(MaterialTheme.colorScheme.surface),\n                style = MaterialTheme.typography.bodyLarge\n            )\n\n            Spacer(Modifier.height(16.dp))\n\n            Button(\n                onClick = triggerDismiss,\n                modifier = Modifier.align(Alignment.End)\n            ) {\n                Text(\"박수\")\n            }\n        }\n    }\n}\n```\n\n결과를 확인해보세요 😍\n\n![결과 확인](https://miro.medium.com/v2/resize:fit:1200/1*3rjr41FLlYZwKl-SFagv4w.gif)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*A8bBm5VjKaGTe-jMEoLDUg.gif)\n\n맞춤화할 수 있는 여지가 많지만, 이것이 영감의 출발점이 되기를 바랍니다. 완벽한 설정을 찾는 데 행운을 빕니다! ✨\n\n이것도 마음에 드실지도요 👇\n\n이 기사를 읽어 주셔서 감사합니다! ❤️ 즐겁고 가치 있는 시간이었길 바랍니다. 마음에 드셨다면 박수를 치는 👏 버튼을 눌러 감사를 표현하고, 더 많고 흥미로운 기사를 보시려면 Kappdev를 팔로우해 주세요 😊\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n행복한 코딩!\n\n![이미지](/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_2.png)\n","ogImage":{"url":"/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_0.png"},"coverImage":"/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>환영합니다 👋</p>\n<p>젯팩 컴포즈의 기본 대화 상자 모양 애니메이션에 지루한가요? 그럼 다행히도 올바른 곳에 오신 것을 환영합니다.</p>\n<p>이 기사에서는 사용자를 기쁘게 할 멋진 3D 애니메이션을 젯팩 컴포즈의 대화 상자에 5분 안에 만들어 보겠습니다.</p>\n<p>다행히도, 젯팩 컴포즈를 사용하면 이를 쉽게 할 수 있습니다 🤗</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_0.png\" alt=\"이미지\"></p>\n<h1>AnimatedDialog 함수</h1>\n<p>다이얼로그를 재사용 가능하고 어떤 시나리오에도 적용할 수 있게 하기 위해, 애니메이션을 포함하고 다이얼로그의 내용과 속성을 지정할 수 있는 함수를 만들어 봅시다.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Composable</span>\nfun <span class=\"hljs-title class_\">AnimatedDialog</span>(\n    <span class=\"hljs-attr\">onDismiss</span>: () -> <span class=\"hljs-title class_\">Unit</span>,\n    <span class=\"hljs-attr\">inAnimDuration</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">720</span>,\n    <span class=\"hljs-attr\">outAnimDuration</span>: <span class=\"hljs-title class_\">Int</span> = <span class=\"hljs-number\">450</span>,\n    <span class=\"hljs-attr\">properties</span>: <span class=\"hljs-title class_\">DialogProperties</span> = <span class=\"hljs-title class_\">DialogProperties</span>(),\n    <span class=\"hljs-attr\">content</span>: @<span class=\"hljs-title class_\">Composable</span> (<span class=\"hljs-attr\">triggerDismiss</span>: () -> <span class=\"hljs-title class_\">Unit</span>) -> <span class=\"hljs-title class_\">Unit</span>,\n)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 함수는 여러 개의 매개변수를 사용합니다. 함께 살펴보겠습니다:</p>\n<p>✨ onDismiss ➜ 대화 상자가 닫힐 때 트리거되는 콜백 함수입니다.</p>\n<p>✨ inAnimDuration ➜ 대화 상자의 표시 애니메이션 지속 시간입니다.</p>\n<p>✨ outAnimDuration ➜ 대화 상자의 사라짐 애니메이션 지속 시간입니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>✨ properties ➜ 대화 상자의 설정 속성입니다.</p>\n<p>✨ content ➜ 대화 상자 내용을 정의하는 composable 람다입니다. 이 람다는 대화 상자를 종료 애니메이션과 함께 프로그래밍 방식으로 닫을 수 있는 함수 (triggerDismiss)를 받습니다.</p>\n<h1>구현</h1>\n<p>자, 이제 애니메이션 구현으로 넘어갈까요?</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>변수 정의</h2>\n<p>먼저, 몇 가지 변수를 정의해야 합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 종료 애니메이션 처리를 위한 코루틴 범위</span>\nval scope = <span class=\"hljs-title function_\">rememberCoroutineScope</span>()\n<span class=\"hljs-comment\">// 애니메이션을 관리하는 상태</span>\n<span class=\"hljs-keyword\">var</span> isDialogVisible by remember { <span class=\"hljs-title function_\">mutableStateOf</span>(<span class=\"hljs-literal\">false</span>) }\n<span class=\"hljs-comment\">// 다양한 애니메이션에서 사용될 공통 애니메이션 스펙</span>\nval animationSpec = tween&#x3C;<span class=\"hljs-title class_\">Float</span>>(\n    <span class=\"hljs-keyword\">if</span> (isDialogVisible) inAnimDuration <span class=\"hljs-keyword\">else</span> outAnimDuration\n)\n</code></pre>\n<h2>애니메이션 상태</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그 다음으로, alpha, rotationX 및 scale에 대한 세 가지 애니메이션 상태를 정의해야합니다:</p>\n<pre><code class=\"hljs language-js\">val dialogAlpha by <span class=\"hljs-title function_\">animateFloatAsState</span>(\n    targetValue = <span class=\"hljs-keyword\">if</span> (isDialogVisible) 1f <span class=\"hljs-keyword\">else</span> 0f,\n    animationSpec = animationSpec\n)\n\nval dialogRotationX by <span class=\"hljs-title function_\">animateFloatAsState</span>(\n    targetValue = <span class=\"hljs-keyword\">if</span> (isDialogVisible) 0f <span class=\"hljs-keyword\">else</span> -90f,\n    animationSpec = animationSpec\n)\n\nval dialogScale by <span class=\"hljs-title function_\">animateFloatAsState</span>(\n    targetValue = <span class=\"hljs-keyword\">if</span> (isDialogVisible) 1f <span class=\"hljs-keyword\">else</span> 0f,\n    animationSpec = animationSpec\n)\n</code></pre>\n<h2>애니메이션 람다로 닫기</h2>\n<p>또한 다이얼로그를 종료 애니메이션으로 닫을 람다 함수를 정의해야하며, 이것은 컨텐츠에 전달할 것입니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\">val <span class=\"hljs-attr\">dismissWithAnimation</span>: () -> <span class=\"hljs-title class_\">Unit</span> = {\n    scope.<span class=\"hljs-property\">launch</span> {\n        <span class=\"hljs-comment\">// 종료 애니메이션을 트리거합니다</span>\n        isDialogVisible = <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-comment\">// 완료될 때까지 기다립니다</span>\n        <span class=\"hljs-title function_\">delay</span>(outAnimDuration.<span class=\"hljs-title function_\">toLong</span>())\n        <span class=\"hljs-comment\">// 대화 상자를 닫습니다</span>\n        <span class=\"hljs-title function_\">onDismiss</span>()\n    }\n}\n</code></pre>\n<h2>Entry Animation 트리거하기</h2>\n<p>컴포저블을 실행했을 때 진입 애니메이션을 트리거하려면 LaunchedEffect와 Unit을 키로 사용할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">LaunchedEffect</span>(<span class=\"hljs-title class_\">Unit</span>) {\n    isDialogVisible = <span class=\"hljs-literal\">true</span>\n}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>대화창 만들기</h2>\n<p>최종 부분에서는 모든 것을 함께 결합하고이 매혹적인 애니메이션으로 대화창을 만들 준비가 되었습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Dialog</span>(\n    onDismissRequest = dismissWithAnimation,\n    properties = properties\n) {\n    <span class=\"hljs-title class_\">Box</span>(\n        modifier = <span class=\"hljs-title class_\">Modifier</span>\n            <span class=\"hljs-comment\">// 알파 전환 적용</span>\n            .<span class=\"hljs-title function_\">alpha</span>(dialogAlpha)\n            <span class=\"hljs-comment\">// 스케일 전환 적용</span>\n            .<span class=\"hljs-title function_\">scale</span>(dialogScale)\n            <span class=\"hljs-comment\">// x축 회전 전환 적용</span>\n            .<span class=\"hljs-property\">graphicsLayer</span> { rotationX = dialogRotationX },\n        content = {\n            <span class=\"hljs-title function_\">content</span>(dismissWithAnimation)\n        }\n    )\n}\n</code></pre>\n<p>축하합니다🥳! 성공적으로 만들었어요👏. 전체 코드 구현은 GitHub Gist에서 확인하실 수 있습니다🧑‍💻. 이제 어떻게 활용할 수 있는지 알아봅시다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>광고</h2>\n<p>외국어를 배우고 새 어휘에서 고민 중이신가요? 그렇다면, 여행을 쉽고 편리하게 만들어줄 이 어휘 학습 앱을 확인해보시는 것을 강력히 추천드립니다!</p>\n<p><img src=\"/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_1.png\" alt=\"이미지\"></p>\n<h1>사용법</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>좋아요, 이제 이 기능을 사용하여 일반적인 샘플을 만들어볼게요.</p>\n<h2>변수 선언하기</h2>\n<p>먼저, 대화 상태를 저장할 변수를 선언해보세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> showDialog by remember { <span class=\"hljs-title function_\">mutableStateOf</span>(<span class=\"hljs-literal\">false</span>) }\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>대화 상자를 트리거하는 버튼</h2>\n<p>이제 우리는 대화 상자를 열기 위한 버튼이 필요합니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Button</span>(\n    onClick = { showDialog = <span class=\"hljs-literal\">true</span> }\n) {\n    <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"대화 상자 열기\"</span>)\n}\n</code></pre>\n<h2>대화 상자 표시</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>마지막으로, showDialog가 true로 설정되면 다이얼로그가 표시됩니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> (showDialog) {\n    <span class=\"hljs-title class_\">AnimatedDialog</span>(\n        onDismiss = { showDialog = <span class=\"hljs-literal\">false</span> }\n    ) { triggerDismiss ->\n        <span class=\"hljs-title class_\">Column</span>(\n            modifier = <span class=\"hljs-title class_\">Modifier</span>\n                .<span class=\"hljs-title function_\">fillMaxWidth</span>()\n                .<span class=\"hljs-title function_\">background</span>(\n                    color = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">surface</span>,\n                    shape = <span class=\"hljs-title class_\">RoundedCornerShape</span>(<span class=\"hljs-number\">24.</span>dp)\n                )\n                .<span class=\"hljs-title function_\">padding</span>(<span class=\"hljs-number\">16.</span>dp)\n        ) {\n            <span class=\"hljs-title class_\">Text</span>(\n                text = <span class=\"hljs-string\">\"👏 박수 알림 대화 상자\"</span>,\n                color = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-title function_\">contentColorFor</span>(<span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">surface</span>),\n                style = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">typography</span>.<span class=\"hljs-property\">titleLarge</span>\n            )\n\n            <span class=\"hljs-title class_\">Spacer</span>(<span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">height</span>(<span class=\"hljs-number\">8.</span>dp))\n\n            <span class=\"hljs-title class_\">Text</span>(\n                text = <span class=\"hljs-string\">\"박수 버튼을 눌러 감사를 표현해 주세요.\"</span>,\n                color = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-title function_\">contentColorFor</span>(<span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">colorScheme</span>.<span class=\"hljs-property\">surface</span>),\n                style = <span class=\"hljs-title class_\">MaterialTheme</span>.<span class=\"hljs-property\">typography</span>.<span class=\"hljs-property\">bodyLarge</span>\n            )\n\n            <span class=\"hljs-title class_\">Spacer</span>(<span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">height</span>(<span class=\"hljs-number\">16.</span>dp))\n\n            <span class=\"hljs-title class_\">Button</span>(\n                onClick = triggerDismiss,\n                modifier = <span class=\"hljs-title class_\">Modifier</span>.<span class=\"hljs-title function_\">align</span>(<span class=\"hljs-title class_\">Alignment</span>.<span class=\"hljs-property\">End</span>)\n            ) {\n                <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"박수\"</span>)\n            }\n        }\n    }\n}\n</code></pre>\n<p>결과를 확인해보세요 😍</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*3rjr41FLlYZwKl-SFagv4w.gif\" alt=\"결과 확인\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*A8bBm5VjKaGTe-jMEoLDUg.gif\" alt=\"image\"></p>\n<p>맞춤화할 수 있는 여지가 많지만, 이것이 영감의 출발점이 되기를 바랍니다. 완벽한 설정을 찾는 데 행운을 빕니다! ✨</p>\n<p>이것도 마음에 드실지도요 👇</p>\n<p>이 기사를 읽어 주셔서 감사합니다! ❤️ 즐겁고 가치 있는 시간이었길 바랍니다. 마음에 드셨다면 박수를 치는 👏 버튼을 눌러 감사를 표현하고, 더 많고 흥미로운 기사를 보시려면 Kappdev를 팔로우해 주세요 😊</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>행복한 코딩!</p>\n<p><img src=\"/assets/img/2024-06-19-CraftingCustom3DDialogAnimationinJetpackCompose_2.png\" alt=\"이미지\"></p>\n</body>\n</html>\n"},"__N_SSG":true}