{"pageProps":{"post":{"title":"Swift에서 클로저 사용하는 방법 - 완벽 가이드","description":"","date":"2024-06-23 21:23","slug":"2024-06-23-AGuideToClosuresInSwift","content":"\n![Closure](/assets/img/2024-06-23-AGuideToClosuresInSwift_0.png)\n\n스위프트에서 클로저는 코드에서 전달하고 사용할 수 있는 자체 포함 블록 기능입니다. 클로저는 함수와 유사하지만 구문 최적화가 있으며 주변 컨텍스트에서 변수 및 상수에 대한 참조를 캡처하고 저장할 수 있습니다. 이 동작은 클로저가 동작을 캡슐화하고 값을 전달하는 데 강력하게 만듭니다.\n\n클로저는 다양한 시나리오에서 사용할 수 있습니다. 이 글에서는 다음과 같은 내용을 배우게 됩니다:\n\n- 인수 및 반환 값으로서\n- 정렬 및 필터링을 위해\n- 비동기 작업\n- 값 캡처\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 인수 및 반환 값으로서의 클로저:\n\n클로저는 함수 및 메소드에 인수로 전달될 수 있으며, 함수에서 반환하거나 변수 또는 속성에 저장할 수도 있습니다.\n\n예시:\n\n```js\n// 클로저를 인수로 전달하는 함수\nfunc performOperation(on a: Int, and b: Int, operation: (Int, Int) -> Int) -> Int {\n    return operation(a, b)\n}\n\n// 다양한 연산을 위한 클로저 표현 정의\nlet addClosure: (Int, Int) -> Int = { $0 + $1 }\nlet subtractClosure: (Int, Int) -> Int = { $0 - $1 }\nlet multiplyClosure: (Int, Int) -> Int = { $0 * $1 }\n\nlet resultAdd = performOperation(on: 5, and: 3, operation: addClosure) // 결과: 8\nlet resultSubtract = performOperation(on: 10, and: 4, operation: subtractClosure) // 결과: 6\nlet resultMultiply = performOperation(on: 6, and: 2, operation: multiplyClosure) // 결과: 12\n\nprint(resultAdd, resultSubtract, resultMultiply)\n\n// 클로저를 반환하는 함수\nfunc makeMultiplier(factor: Int) -> (Int) -> Int {\n    return { number in\n        return number * factor\n    }\n}\n\nlet double = makeMultiplier(factor: 2)\nlet triple = makeMultiplier(factor: 3)\n\nlet resultDouble = double(5) // 결과: 10\nlet resultTriple = triple(4) // 결과: 12\n\nprint(resultDouble, resultTriple)\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예제에서는 performOperation이라는 함수를 정의합니다. 이 함수는 두 정수와 산술 연산을 나타내는 클로저를 받습니다. 이 함수는 제공된 클로저를 두 정수에 적용합니다.\n\n또한 makeMultiplier라는 함수를 정의합니다. 이 함수는 클로저를 반환합니다. 반환된 클로저는 인수를 지정된 인수로 곱합니다.\n\n그런 다음, 덧셈, 뺄셈 및 곱셈을 위한 다른 클로저 표현식을 만듭니다. 이러한 클로저를 performOperation의 인수로 전달하고, 반환된 makeMultiplier의 클로저를 사용하여 숫자를 2배와 3배로 만듭니다.\n\n# Sorting and Filtering:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 마크다운 형식으로 변경해 주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\nstruct Person {\n    var name: String\n    var age: Int\n}\n\nlet people = [\n    Person(name: \"Alice\", age: 28),\n    Person(name: \"Bob\", age: 22),\n    Person(name: \"Charlie\", age: 35)\n]\n\n// 나이 기준으로 정렬하는 클로저 사용\nlet sortedByAge = people.sorted { (person1, person2) in\n    return person1.age < person2.age\n}\n\nprint(sortedByAge)\n// 결과: [Person(name: \"Bob\", age: 22), Person(name: \"Alice\", age: 28), Person(name: \"Charlie\", age: 35)]\n\n```\n\n이 예제에서는 sorted(by:) 메서드가 각 Person 인스턴스의 age 속성을 기준으로 people 배열을 정렬하는 클로저를 사용합니다.\n\n2. 클로저로 필터링:\n\n클로저를 사용하여 특정 조건에 따라 배열에서 요소를 필터링할 수도 있습니다. filter(\\_:) 메서드를 사용하여, 필터링된 결과에 포함되어야 하는지 여부를 나타내는 Boolean 값을 반환하는 클로저를 제공할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예시:\n\n```js\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n// 클로저를 사용하여 짝수만 필터링하는 예시\nlet evenNumbers = numbers.filter { number in\n    return number % 2 == 0\n}\n\nprint(evenNumbers) // 출력: [2, 4, 6, 8, 10]\n```\n\n본 예시에서는 filter(\\_:) 메서드가 클로저를 사용하여 numbers 배열에서 홀수를 필터링하는 방법을 보여줍니다.\n\n# 비동기 작업:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클로저는 네트워크 요청이나 애니메이션과 같은 비동기 작업에서 완료 핸들러로 자주 사용됩니다.\n\n비동기 예시: 네트워크 요청\n\n```swift\nfunc fetchData(completion: @escaping (Result<Data, Error>) -> Void) {\n    // 네트워크 요청 지연 시간 시뮬레이션\n    DispatchQueue.global().asyncAfter(deadline: .now() + 2) {\n        if Bool.random() { // 성공 또는 실패를 랜덤하게 시뮬레이션\n            let data = Data(\"샘플 데이터\".utf8)\n            completion(.success(data))\n        } else {\n            let error = NSError(domain: \"com.example\", code: 1, userInfo: nil)\n            completion(.failure(error))\n        }\n    }\n}\n\n// 클로저를 사용하여 fetchData 함수 호출\nfetchData { result in\n    switch result {\n    case .success(let data):\n        print(\"받은 데이터:\", data)\n    case .failure(let error):\n        print(\"에러:\", error)\n    }\n}\n```\n\n이 예시에서 fetchData 함수는 지연 후 완료되는 네트워크 요청을 시뮬레이션합니다. 네트워크 요청이 완료되면 실행되는 클로저(completion)를 인자로 받습니다. 클로저는 성공(가져온 데이터와 함께) 또는 실패(에러와 함께)를 나타내는 Result 타입을 갖습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n비동기 예제: 애니메이션\n\n```js\nimport UIKit\n\nUIView.animate(withDuration: 0.5, animations: {\n    // 애니메이션할 UI 속성 업데이트\n    someView.alpha = 0.0\n}) { _ in\n    // 이 클로저는 애니메이션이 완료될 때 실행됩니다\n    someView.removeFromSuperview()\n}\n```\n\n이 예제에서는 UIView.animate(withDuration:animations:completion:) 함수를 사용하여 뷰의 알파 속성을 애니메이션화합니다. animations로 전달된 클로저는 애니메이션 변경을 정의하며, completion 클로저는 애니메이션이 완료되면 실행됩니다.\n\n# 값 캡처하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클로저는 주변 컨텍스트에서 변수와 상수에 대한 참조를 캡처하고 저장할 수 있습니다. 이는 클로저 내부에서 상태를 유지하는 데 유용할 수 있습니다.\n\n예시:\n\n```js\nfunc makeIncrementer(incrementAmount: Int) -> () -> Int {\n    var total = 0\n\n    let incrementer: () -> Int = {\n        total += incrementAmount\n        return total\n    }\n\n    return incrementer\n}\n\nlet incrementByTwo = makeIncrementer(incrementAmount: 2)\nprint(incrementByTwo()) // Prints: 2\nprint(incrementByTwo()) // Prints: 4\n\nlet incrementByFive = makeIncrementer(incrementAmount: 5)\nprint(incrementByFive()) // Prints: 5\nprint(incrementByFive()) // Prints: 10\n\nprint(incrementByTwo()) // Prints: 6\n```\n\n이 예시에서 makeIncrementer 함수는 주변 컨텍스트에서 total 변수를 캡처하는 클로저인 incrementer를 반환합니다. 반환된 클로저는 캡처된 total을 지정된 incrementAmount만큼 증가시킵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nmakeIncrementer(incrementAmount: 2)을 호출하면 incrementByTwo 클로저를 얻게 됩니다. incrementByTwo()를 호출할 때마다 총합이 2씩 증가하고 업데이트된 값이 반환됩니다.\n\n비슷하게, makeIncrementer(incrementAmount: 5)를 호출하면 총합을 5씩 증가시키는 incrementByFive 클로저를 얻게 됩니다.\n\n클로저는 생성될 때 값을 캡처합니다. 이는 각 캡처된 값이 클로저 인스턴스에 고유하다는 것을 의미합니다. 이 예시에서 incrementByTwo와 incrementByFive는 각각 고유한 캡처된 총합 값을 갖습니다.\n\n클로저에서 값들을 캡처하는 것은 상태를 유지하고 컨텍스트를 기억하는 동작을 만들 수 있게 해줍니다. 이러한 특성으로 인해 클로저는 다양한 프로그래밍 시나리오에 강력한 도구가 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 문법:\n\n스위프트에서 클로저의 기본 문법은 다음과 같습니다:\n\n```js\nlet closureName: (파라미터들) -> 반환타입 = { // 클로저 내용 }\n```\n\n두 정수를 더하는 클로저의 예시:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\nlet addClosure: (Int, Int) -> Int = { (a, b) in\n    return a + b\n}\n\nlet result = addClosure(5, 3) // 결과는 8이 될 것입니다\n```\n\n클로저는 그들의 타입을 유추할 수 있는 경우에 더 간결한 형식으로 작성할 수 있습니다:\n\n```swift\nlet addClosure = { (a: Int, b: Int) in\n    return a + b\n}\n\nlet result = addClosure(5, 3)\n```\n\n더 간결하게도:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nlet addClosure: (Int, Int) -> Int = { $0 + $1 }\n\nlet result = addClosure(5, 3)\n```\n\n클로저는 주변 컨텍스트에서 값들을 캡쳐할 수 있어요.\n\n예를들어:\n\n```js\nfunc makeIncrementer(incrementAmount: Int) -> () -> Int {\n    var total = 0\n    let incrementer: () -> Int = {\n        total += incrementAmount\n        return total\n    }\n    return incrementer\n}\n\nlet incrementByTwo = makeIncrementer(incrementAmount: 2)\nprint(incrementByTwo()) // 2 출력\nprint(incrementByTwo()) // 4 출력\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 예시에서 증가자 클로저는 주변 함수 컨텍스트에서 total 변수와 incrementAmount 매개변수를 캡처합니다.\n\n이 게시물을 즐기셨다면 공유하고 클랩도 부탁드려요👏🏻👏🏻👏🏻👏🏻👏🏻\n\n또한 아래 연락처로 연락하실 수도 있어요📲\n\nLinkedIn\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래에서 제 코드를 확인할 수 있어요👇🏻\n\nGitHub\n\n잘 읽었나요?\n\n의견, 질문 또는 추천이 있으면 자유롭게 아래 댓글 섹션에 남겨주세요💬\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n💁🏻‍♀️ 즐거운 코딩하세요!\n\n감사합니다 😊\n","ogImage":{"url":"/assets/img/2024-06-23-AGuideToClosuresInSwift_0.png"},"coverImage":"/assets/img/2024-06-23-AGuideToClosuresInSwift_0.png","tag":["Tech"],"readingTime":11},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-23-AGuideToClosuresInSwift_0.png\" alt=\"Closure\"></p>\n<p>스위프트에서 클로저는 코드에서 전달하고 사용할 수 있는 자체 포함 블록 기능입니다. 클로저는 함수와 유사하지만 구문 최적화가 있으며 주변 컨텍스트에서 변수 및 상수에 대한 참조를 캡처하고 저장할 수 있습니다. 이 동작은 클로저가 동작을 캡슐화하고 값을 전달하는 데 강력하게 만듭니다.</p>\n<p>클로저는 다양한 시나리오에서 사용할 수 있습니다. 이 글에서는 다음과 같은 내용을 배우게 됩니다:</p>\n<ul>\n<li>인수 및 반환 값으로서</li>\n<li>정렬 및 필터링을 위해</li>\n<li>비동기 작업</li>\n<li>값 캡처</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>인수 및 반환 값으로서의 클로저:</h1>\n<p>클로저는 함수 및 메소드에 인수로 전달될 수 있으며, 함수에서 반환하거나 변수 또는 속성에 저장할 수도 있습니다.</p>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 클로저를 인수로 전달하는 함수</span>\nfunc <span class=\"hljs-title function_\">performOperation</span>(on <span class=\"hljs-attr\">a</span>: <span class=\"hljs-title class_\">Int</span>, and <span class=\"hljs-attr\">b</span>: <span class=\"hljs-title class_\">Int</span>, <span class=\"hljs-attr\">operation</span>: (<span class=\"hljs-title class_\">Int</span>, <span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">operation</span>(a, b)\n}\n\n<span class=\"hljs-comment\">// 다양한 연산을 위한 클로저 표현 정의</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">addClosure</span>: (<span class=\"hljs-title class_\">Int</span>, <span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Int</span> = { $0 + $1 }\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">subtractClosure</span>: (<span class=\"hljs-title class_\">Int</span>, <span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Int</span> = { $0 - $1 }\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">multiplyClosure</span>: (<span class=\"hljs-title class_\">Int</span>, <span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Int</span> = { $0 * $1 }\n\n<span class=\"hljs-keyword\">let</span> resultAdd = <span class=\"hljs-title function_\">performOperation</span>(<span class=\"hljs-attr\">on</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">and</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">operation</span>: addClosure) <span class=\"hljs-comment\">// 결과: 8</span>\n<span class=\"hljs-keyword\">let</span> resultSubtract = <span class=\"hljs-title function_\">performOperation</span>(<span class=\"hljs-attr\">on</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">and</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">operation</span>: subtractClosure) <span class=\"hljs-comment\">// 결과: 6</span>\n<span class=\"hljs-keyword\">let</span> resultMultiply = <span class=\"hljs-title function_\">performOperation</span>(<span class=\"hljs-attr\">on</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-attr\">and</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">operation</span>: multiplyClosure) <span class=\"hljs-comment\">// 결과: 12</span>\n\n<span class=\"hljs-title function_\">print</span>(resultAdd, resultSubtract, resultMultiply)\n\n<span class=\"hljs-comment\">// 클로저를 반환하는 함수</span>\nfunc <span class=\"hljs-title function_\">makeMultiplier</span>(<span class=\"hljs-attr\">factor</span>: <span class=\"hljs-title class_\">Int</span>) -> (<span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">return</span> { number <span class=\"hljs-keyword\">in</span>\n        <span class=\"hljs-keyword\">return</span> number * factor\n    }\n}\n\n<span class=\"hljs-keyword\">let</span> double = <span class=\"hljs-title function_\">makeMultiplier</span>(<span class=\"hljs-attr\">factor</span>: <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">let</span> triple = <span class=\"hljs-title function_\">makeMultiplier</span>(<span class=\"hljs-attr\">factor</span>: <span class=\"hljs-number\">3</span>)\n\n<span class=\"hljs-keyword\">let</span> resultDouble = <span class=\"hljs-title function_\">double</span>(<span class=\"hljs-number\">5</span>) <span class=\"hljs-comment\">// 결과: 10</span>\n<span class=\"hljs-keyword\">let</span> resultTriple = <span class=\"hljs-title function_\">triple</span>(<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">// 결과: 12</span>\n\n<span class=\"hljs-title function_\">print</span>(resultDouble, resultTriple)\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 예제에서는 performOperation이라는 함수를 정의합니다. 이 함수는 두 정수와 산술 연산을 나타내는 클로저를 받습니다. 이 함수는 제공된 클로저를 두 정수에 적용합니다.</p>\n<p>또한 makeMultiplier라는 함수를 정의합니다. 이 함수는 클로저를 반환합니다. 반환된 클로저는 인수를 지정된 인수로 곱합니다.</p>\n<p>그런 다음, 덧셈, 뺄셈 및 곱셈을 위한 다른 클로저 표현식을 만듭니다. 이러한 클로저를 performOperation의 인수로 전달하고, 반환된 makeMultiplier의 클로저를 사용하여 숫자를 2배와 3배로 만듭니다.</p>\n<h1>Sorting and Filtering:</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테이블 태그를 마크다운 형식으로 변경해 주세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Person</span> {\n    <span class=\"hljs-keyword\">var</span> name: <span class=\"hljs-type\">String</span>\n    <span class=\"hljs-keyword\">var</span> age: <span class=\"hljs-type\">Int</span>\n}\n\n<span class=\"hljs-keyword\">let</span> people <span class=\"hljs-operator\">=</span> [\n    <span class=\"hljs-type\">Person</span>(name: <span class=\"hljs-string\">\"Alice\"</span>, age: <span class=\"hljs-number\">28</span>),\n    <span class=\"hljs-type\">Person</span>(name: <span class=\"hljs-string\">\"Bob\"</span>, age: <span class=\"hljs-number\">22</span>),\n    <span class=\"hljs-type\">Person</span>(name: <span class=\"hljs-string\">\"Charlie\"</span>, age: <span class=\"hljs-number\">35</span>)\n]\n\n<span class=\"hljs-comment\">// 나이 기준으로 정렬하는 클로저 사용</span>\n<span class=\"hljs-keyword\">let</span> sortedByAge <span class=\"hljs-operator\">=</span> people.sorted { (person1, person2) <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">return</span> person1.age <span class=\"hljs-operator\">&#x3C;</span> person2.age\n}\n\n<span class=\"hljs-built_in\">print</span>(sortedByAge)\n<span class=\"hljs-comment\">// 결과: [Person(name: \"Bob\", age: 22), Person(name: \"Alice\", age: 28), Person(name: \"Charlie\", age: 35)]</span>\n\n</code></pre>\n<p>이 예제에서는 sorted(by:) 메서드가 각 Person 인스턴스의 age 속성을 기준으로 people 배열을 정렬하는 클로저를 사용합니다.</p>\n<ol start=\"2\">\n<li>클로저로 필터링:</li>\n</ol>\n<p>클로저를 사용하여 특정 조건에 따라 배열에서 요소를 필터링할 수도 있습니다. filter(_:) 메서드를 사용하여, 필터링된 결과에 포함되어야 하는지 여부를 나타내는 Boolean 값을 반환하는 클로저를 제공할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]\n\n<span class=\"hljs-comment\">// 클로저를 사용하여 짝수만 필터링하는 예시</span>\n<span class=\"hljs-keyword\">let</span> evenNumbers = numbers.<span class=\"hljs-property\">filter</span> { number <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">return</span> number % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-title function_\">print</span>(evenNumbers) <span class=\"hljs-comment\">// 출력: [2, 4, 6, 8, 10]</span>\n</code></pre>\n<p>본 예시에서는 filter(_:) 메서드가 클로저를 사용하여 numbers 배열에서 홀수를 필터링하는 방법을 보여줍니다.</p>\n<h1>비동기 작업:</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>클로저는 네트워크 요청이나 애니메이션과 같은 비동기 작업에서 완료 핸들러로 자주 사용됩니다.</p>\n<p>비동기 예시: 네트워크 요청</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">fetchData</span>(<span class=\"hljs-params\">completion</span>: <span class=\"hljs-keyword\">@escaping</span> (<span class=\"hljs-type\">Result</span>&#x3C;<span class=\"hljs-type\">Data</span>, <span class=\"hljs-type\">Error</span>>) -> <span class=\"hljs-type\">Void</span>) {\n    <span class=\"hljs-comment\">// 네트워크 요청 지연 시간 시뮬레이션</span>\n    <span class=\"hljs-type\">DispatchQueue</span>.global().asyncAfter(deadline: .now() <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-type\">Bool</span>.random() { <span class=\"hljs-comment\">// 성공 또는 실패를 랜덤하게 시뮬레이션</span>\n            <span class=\"hljs-keyword\">let</span> data <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Data</span>(<span class=\"hljs-string\">\"샘플 데이터\"</span>.utf8)\n            completion(.success(data))\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">let</span> error <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">NSError</span>(domain: <span class=\"hljs-string\">\"com.example\"</span>, code: <span class=\"hljs-number\">1</span>, userInfo: <span class=\"hljs-literal\">nil</span>)\n            completion(.failure(error))\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// 클로저를 사용하여 fetchData 함수 호출</span>\nfetchData { result <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">switch</span> result {\n    <span class=\"hljs-keyword\">case</span> .success(<span class=\"hljs-keyword\">let</span> data):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"받은 데이터:\"</span>, data)\n    <span class=\"hljs-keyword\">case</span> .failure(<span class=\"hljs-keyword\">let</span> error):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"에러:\"</span>, error)\n    }\n}\n</code></pre>\n<p>이 예시에서 fetchData 함수는 지연 후 완료되는 네트워크 요청을 시뮬레이션합니다. 네트워크 요청이 완료되면 실행되는 클로저(completion)를 인자로 받습니다. 클로저는 성공(가져온 데이터와 함께) 또는 실패(에러와 함께)를 나타내는 Result 타입을 갖습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>비동기 예제: 애니메이션</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">UIKit</span>\n\n<span class=\"hljs-title class_\">UIView</span>.<span class=\"hljs-title function_\">animate</span>(<span class=\"hljs-params\">withDuration: <span class=\"hljs-number\">0.5</span>, animations: {\n    // 애니메이션할 UI 속성 업데이트\n    someView.alpha = <span class=\"hljs-number\">0.0</span>\n}</span>) { _ <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-comment\">// 이 클로저는 애니메이션이 완료될 때 실행됩니다</span>\n    someView.<span class=\"hljs-title function_\">removeFromSuperview</span>()\n}\n</code></pre>\n<p>이 예제에서는 UIView.animate(withDuration:animations:completion:) 함수를 사용하여 뷰의 알파 속성을 애니메이션화합니다. animations로 전달된 클로저는 애니메이션 변경을 정의하며, completion 클로저는 애니메이션이 완료되면 실행됩니다.</p>\n<h1>값 캡처하기:</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>클로저는 주변 컨텍스트에서 변수와 상수에 대한 참조를 캡처하고 저장할 수 있습니다. 이는 클로저 내부에서 상태를 유지하는 데 유용할 수 있습니다.</p>\n<p>예시:</p>\n<pre><code class=\"hljs language-js\">func <span class=\"hljs-title function_\">makeIncrementer</span>(<span class=\"hljs-attr\">incrementAmount</span>: <span class=\"hljs-title class_\">Int</span>) -> () -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">incrementer</span>: () -> <span class=\"hljs-title class_\">Int</span> = {\n        total += incrementAmount\n        <span class=\"hljs-keyword\">return</span> total\n    }\n\n    <span class=\"hljs-keyword\">return</span> incrementer\n}\n\n<span class=\"hljs-keyword\">let</span> incrementByTwo = <span class=\"hljs-title function_\">makeIncrementer</span>(<span class=\"hljs-attr\">incrementAmount</span>: <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">incrementByTwo</span>()) <span class=\"hljs-comment\">// Prints: 2</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">incrementByTwo</span>()) <span class=\"hljs-comment\">// Prints: 4</span>\n\n<span class=\"hljs-keyword\">let</span> incrementByFive = <span class=\"hljs-title function_\">makeIncrementer</span>(<span class=\"hljs-attr\">incrementAmount</span>: <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">incrementByFive</span>()) <span class=\"hljs-comment\">// Prints: 5</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">incrementByFive</span>()) <span class=\"hljs-comment\">// Prints: 10</span>\n\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">incrementByTwo</span>()) <span class=\"hljs-comment\">// Prints: 6</span>\n</code></pre>\n<p>이 예시에서 makeIncrementer 함수는 주변 컨텍스트에서 total 변수를 캡처하는 클로저인 incrementer를 반환합니다. 반환된 클로저는 캡처된 total을 지정된 incrementAmount만큼 증가시킵니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>makeIncrementer(incrementAmount: 2)을 호출하면 incrementByTwo 클로저를 얻게 됩니다. incrementByTwo()를 호출할 때마다 총합이 2씩 증가하고 업데이트된 값이 반환됩니다.</p>\n<p>비슷하게, makeIncrementer(incrementAmount: 5)를 호출하면 총합을 5씩 증가시키는 incrementByFive 클로저를 얻게 됩니다.</p>\n<p>클로저는 생성될 때 값을 캡처합니다. 이는 각 캡처된 값이 클로저 인스턴스에 고유하다는 것을 의미합니다. 이 예시에서 incrementByTwo와 incrementByFive는 각각 고유한 캡처된 총합 값을 갖습니다.</p>\n<p>클로저에서 값들을 캡처하는 것은 상태를 유지하고 컨텍스트를 기억하는 동작을 만들 수 있게 해줍니다. 이러한 특성으로 인해 클로저는 다양한 프로그래밍 시나리오에 강력한 도구가 됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>문법:</h1>\n<p>스위프트에서 클로저의 기본 문법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">closureName</span>: (파라미터들) -> 반환타입 = { <span class=\"hljs-comment\">// 클로저 내용 }</span>\n</code></pre>\n<p>두 정수를 더하는 클로저의 예시:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">let</span> addClosure: (<span class=\"hljs-type\">Int</span>, <span class=\"hljs-type\">Int</span>) -> <span class=\"hljs-type\">Int</span> <span class=\"hljs-operator\">=</span> { (a, b) <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">return</span> a <span class=\"hljs-operator\">+</span> b\n}\n\n<span class=\"hljs-keyword\">let</span> result <span class=\"hljs-operator\">=</span> addClosure(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 결과는 8이 될 것입니다</span>\n</code></pre>\n<p>클로저는 그들의 타입을 유추할 수 있는 경우에 더 간결한 형식으로 작성할 수 있습니다:</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">let</span> addClosure <span class=\"hljs-operator\">=</span> { (a: <span class=\"hljs-type\">Int</span>, b: <span class=\"hljs-type\">Int</span>) <span class=\"hljs-keyword\">in</span>\n    <span class=\"hljs-keyword\">return</span> a <span class=\"hljs-operator\">+</span> b\n}\n\n<span class=\"hljs-keyword\">let</span> result <span class=\"hljs-operator\">=</span> addClosure(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)\n</code></pre>\n<p>더 간결하게도:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">addClosure</span>: (<span class=\"hljs-title class_\">Int</span>, <span class=\"hljs-title class_\">Int</span>) -> <span class=\"hljs-title class_\">Int</span> = { $0 + $1 }\n\n<span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-title function_\">addClosure</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)\n</code></pre>\n<p>클로저는 주변 컨텍스트에서 값들을 캡쳐할 수 있어요.</p>\n<p>예를들어:</p>\n<pre><code class=\"hljs language-js\">func <span class=\"hljs-title function_\">makeIncrementer</span>(<span class=\"hljs-attr\">incrementAmount</span>: <span class=\"hljs-title class_\">Int</span>) -> () -> <span class=\"hljs-title class_\">Int</span> {\n    <span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">incrementer</span>: () -> <span class=\"hljs-title class_\">Int</span> = {\n        total += incrementAmount\n        <span class=\"hljs-keyword\">return</span> total\n    }\n    <span class=\"hljs-keyword\">return</span> incrementer\n}\n\n<span class=\"hljs-keyword\">let</span> incrementByTwo = <span class=\"hljs-title function_\">makeIncrementer</span>(<span class=\"hljs-attr\">incrementAmount</span>: <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">incrementByTwo</span>()) <span class=\"hljs-comment\">// 2 출력</span>\n<span class=\"hljs-title function_\">print</span>(<span class=\"hljs-title function_\">incrementByTwo</span>()) <span class=\"hljs-comment\">// 4 출력</span>\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 예시에서 증가자 클로저는 주변 함수 컨텍스트에서 total 변수와 incrementAmount 매개변수를 캡처합니다.</p>\n<p>이 게시물을 즐기셨다면 공유하고 클랩도 부탁드려요👏🏻👏🏻👏🏻👏🏻👏🏻</p>\n<p>또한 아래 연락처로 연락하실 수도 있어요📲</p>\n<p>LinkedIn</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>아래에서 제 코드를 확인할 수 있어요👇🏻</p>\n<p>GitHub</p>\n<p>잘 읽었나요?</p>\n<p>의견, 질문 또는 추천이 있으면 자유롭게 아래 댓글 섹션에 남겨주세요💬</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>💁🏻‍♀️ 즐거운 코딩하세요!</p>\n<p>감사합니다 😊</p>\n</body>\n</html>\n"},"__N_SSG":true}