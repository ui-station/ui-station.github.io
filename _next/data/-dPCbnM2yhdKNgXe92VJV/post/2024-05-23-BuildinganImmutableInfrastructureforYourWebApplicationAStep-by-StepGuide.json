{"pageProps":{"post":{"title":"웹 애플리케이션을 위한 변경 불가능한 인프라 구축하기 단계별 가이드","description":"","date":"2024-05-23 14:32","slug":"2024-05-23-BuildinganImmutableInfrastructureforYourWebApplicationAStep-by-StepGuide","content":"\n# 소개\n\n소프트웨어 개발의 빠르게 변화하는 세계에서 일관성, 확장성 및 신뢰성을 보장하는 것이 중요합니다. 데브옵스에서 핵심 개념인 불변 인프라는 인프라 구성요소를 불변하게 만들어 이러한 요구 사항을 해결합니다. 이 블로그에서는 Docker, Kubernetes 및 Terraform을 사용하여 간단한 웹 애플리케이션을 위한 불변 인프라를 생성하는 방법을 안내하겠습니다.\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 불변 인프라란?\n\n불변 인프라는 서버(또는 다른 인프라 구성 요소)를 배포한 후에는 결코 수정하지 않는 방식을 말합니다. 업데이트나 변경이 필요한 경우 새로운 서버를 빌드하고 배포하며 이전 서버는 해제됩니다. 이 접근 방식은 일관성과 반복성을 보장하며 구성 드리프트를 줄이고 의도하지 않은 변경의 위험을 최소화합니다.\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n# 프로젝트 개요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 프로젝트에서는 Node.js 웹 애플리케이션을 위한 불변 인프라를 만들 것입니다. 이 프로젝트에는 다음이 포함됩니다:\n\n- Docker를 사용하여 애플리케이션을 컨테이너화하기\n- Kubernetes를 사용하여 배포를 조정하기\n- Terraform을 사용하여 인프라 프로비저닝 및 관리하기\n- CI/CD 파이프라인을 통해 빌드, 테스트 및 배포 프로세스 자동화하기\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n# 단계 1: Docker를 사용하여 애플리케이션을 컨테이너화하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저 Docker를 사용하여 웹 애플리케이션을 컨테이너화해야 합니다. 프로젝트 디렉토리에 Dockerfile을 만들어주세요:\n\n```js\nDockerfile;\n```\n\n```js\n# 부모 이미지로 공식 Node.js 런타임 사용\nFROM node:14\n```\n\n```js\n# 작업 디렉토리 설정\nWORKDIR /usr/src/app\n# package.json 복사 및 종속성 설치\nCOPY package*.json ./\nRUN npm install\n# 나머지 애플리케이션 코드 복사\nCOPY . .\n# 애플리케이션 포트 노출\nEXPOSE 3000\n# 앱 실행 명령 정의\nCMD [\"node\", \"app.js\"]\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n도커 이미지를 빌드하고 테스트해보세요:\n\n```bash\ndocker build -t my-web-app .\ndocker run -p 3000:3000 my-web-app\n```\n\n# 단계 2: 쿠버네티스로 오케스트레이션하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음으로, 도커 컨테이너를 쿠버네티스 클러스터에 배포할 것입니다. deployment.yaml 및 service.yaml 파일을 생성해주세요:\n\n```yaml\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-app-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: web-app\n  template:\n    metadata:\n      labels:\n        app: web-app\n    spec:\n      containers:\n        - name: web-app\n          image: my-web-app:latest\n          ports:\n            - containerPort: 3000\n```\n\n```yaml\n# service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: web-app-service\nspec:\n  selector:\n    app: web-app\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 3000\n  type: LoadBalancer\n```\n\n쿠버네티스 구성을 적용해주세요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\nkubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n```\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n# Step 3: Terraform으로 프로비저닝하기\n\n테라폼을 사용하여 쿠버네티스 클러스터를 프로비저닝할 것입니다. main.tf 파일을 작성해주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n# main.tf\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n```\n\n```js\nmodule \"eks\" {\n  source          = \"terraform-aws-modules/eks/aws\"\n  cluster_name    = \"my-cluster\"\n  cluster_version = \"1.20\"\n  subnets         = [\"subnet-0123456789abcdef0\", \"subnet-0123456789abcdef1\"]\n  vpc_id          = \"vpc-0123456789abcdef0\"\n  node_groups = {\n    my-node-group = {\n      desired_capacity = 2\n      max_capacity     = 3\n      min_capacity     = 1\n      instance_type = \"t3.medium\"\n    }\n  }\n}\noutput \"cluster_endpoint\" {\n  value = module.eks.cluster_endpoint\n}\n```\n\n테라폼 구성을 초기화하고 적용하십시오:\n\n```js\nterraform init\nterraform apply\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n새 클러스터를 사용하도록 kubectl을 구성하세요:\n\n```bash\naws eks --region us-west-2 update-kubeconfig --name my-cluster\n```\n\nLinkedIn 프로필: www.linkedin.com/in/mohammedtalhakalimi\n\n# 단계 4: CI/CD로 자동화\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마지막으로, GitHub Actions를 사용하여 CI/CD 파이프라인을 설정할 것입니다. .github/workflows/ci-cd-pipeline.yaml 파일을 만들어주세요:\n\n```yaml\n# .github/workflows/ci-cd-pipeline.yaml\nname: CI/CD Pipeline\n```\n\n```yaml\non:\n  push:\n    branches:\n      - main\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n      - name: Login to Docker Hub\n        uses: docker/login-action@v1\n        with:\n          username: ${secrets.DOCKER_USERNAME}\n          password: ${secrets.DOCKER_PASSWORD}\n      - name: Build and push Docker image\n        run: |\n          docker build -t my-web-app:latest .\n          docker tag my-web-app:latest ${secrets.DOCKER_USERNAME}/my-web-app:latest\n          docker push ${secrets.DOCKER_USERNAME}/my-web-app:latest\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up kubectl\n        uses: azure/setup-kubectl@v1\n        with:\n          version: \"v1.20.0\"\n      - name: Deploy to Kubernetes\n        run: |\n          kubectl apply -f deployment.yaml\n          kubectl apply -f service.yaml\n```\n\nwww.linkedin.com/in/mohammedtalhakalimi\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n위 단계를 따라 웹 애플리케이션을 위한 불변의 인프라를 구축했습니다. 이 방식을 통해 배포가 일관적이고 확장 가능하며 신뢰할 수 있음을 보장할 수 있습니다. 불변의 인프라 관행을 준수함으로써 응용 프로그램의 안정성과 관리 용이성을 크게 향상시킬 수 있습니다.\n\n의견이나 경험을 댓글로 공유해 주세요. 즐거운 코딩 되세요!\n\nwww.linkedin.com/in/mohammedtalhakalimi\n","ogImage":{"url":"/assets/img/2024-05-23-BuildinganImmutableInfrastructureforYourWebApplicationAStep-by-StepGuide_0.png"},"coverImage":"/assets/img/2024-05-23-BuildinganImmutableInfrastructureforYourWebApplicationAStep-by-StepGuide_0.png","tag":["Tech"],"readingTime":8},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>소개</h1>\n<p>소프트웨어 개발의 빠르게 변화하는 세계에서 일관성, 확장성 및 신뢰성을 보장하는 것이 중요합니다. 데브옵스에서 핵심 개념인 불변 인프라는 인프라 구성요소를 불변하게 만들어 이러한 요구 사항을 해결합니다. 이 블로그에서는 Docker, Kubernetes 및 Terraform을 사용하여 간단한 웹 애플리케이션을 위한 불변 인프라를 생성하는 방법을 안내하겠습니다.</p>\n<p><a href=\"http://www.linkedin.com/in/mohammedtalhakalimi\" rel=\"nofollow\" target=\"_blank\">www.linkedin.com/in/mohammedtalhakalimi</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>불변 인프라란?</h1>\n<p>불변 인프라는 서버(또는 다른 인프라 구성 요소)를 배포한 후에는 결코 수정하지 않는 방식을 말합니다. 업데이트나 변경이 필요한 경우 새로운 서버를 빌드하고 배포하며 이전 서버는 해제됩니다. 이 접근 방식은 일관성과 반복성을 보장하며 구성 드리프트를 줄이고 의도하지 않은 변경의 위험을 최소화합니다.</p>\n<p><a href=\"http://www.linkedin.com/in/mohammedtalhakalimi\" rel=\"nofollow\" target=\"_blank\">www.linkedin.com/in/mohammedtalhakalimi</a></p>\n<h1>프로젝트 개요</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 프로젝트에서는 Node.js 웹 애플리케이션을 위한 불변 인프라를 만들 것입니다. 이 프로젝트에는 다음이 포함됩니다:</p>\n<ul>\n<li>Docker를 사용하여 애플리케이션을 컨테이너화하기</li>\n<li>Kubernetes를 사용하여 배포를 조정하기</li>\n<li>Terraform을 사용하여 인프라 프로비저닝 및 관리하기</li>\n<li>CI/CD 파이프라인을 통해 빌드, 테스트 및 배포 프로세스 자동화하기</li>\n</ul>\n<p><a href=\"http://www.linkedin.com/in/mohammedtalhakalimi\" rel=\"nofollow\" target=\"_blank\">www.linkedin.com/in/mohammedtalhakalimi</a></p>\n<h1>단계 1: Docker를 사용하여 애플리케이션을 컨테이너화하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>먼저 Docker를 사용하여 웹 애플리케이션을 컨테이너화해야 합니다. 프로젝트 디렉토리에 Dockerfile을 만들어주세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Dockerfile</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"># 부모 이미지로 공식 <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\">js</span> 런타임 사용\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">node</span>:<span class=\"hljs-number\">14</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"># 작업 디렉토리 설정\n<span class=\"hljs-variable constant_\">WORKDIR</span> /usr/src/app\n# package.<span class=\"hljs-property\">json</span> 복사 및 종속성 설치\n<span class=\"hljs-variable constant_\">COPY</span> package*.<span class=\"hljs-property\">json</span> ./\n<span class=\"hljs-variable constant_\">RUN</span> npm install\n# 나머지 애플리케이션 코드 복사\n<span class=\"hljs-variable constant_\">COPY</span> . .\n# 애플리케이션 포트 노출\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n# 앱 실행 명령 정의\n<span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"node\"</span>, <span class=\"hljs-string\">\"app.js\"</span>]\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>도커 이미지를 빌드하고 테스트해보세요:</p>\n<pre><code class=\"hljs language-bash\">docker build -t my-web-app .\ndocker run -p 3000:3000 my-web-app\n</code></pre>\n<h1>단계 2: 쿠버네티스로 오케스트레이션하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>다음으로, 도커 컨테이너를 쿠버네티스 클러스터에 배포할 것입니다. deployment.yaml 및 service.yaml 파일을 생성해주세요:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># deployment.yaml</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">web-app-deployment</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">3</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">web-app</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">web-app</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">web-app</span>\n          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">my-web-app:latest</span>\n          <span class=\"hljs-attr\">ports:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">3000</span>\n</code></pre>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># service.yaml</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">web-app-service</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">web-app</span>\n  <span class=\"hljs-attr\">ports:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span>\n      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">3000</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">LoadBalancer</span>\n</code></pre>\n<p>쿠버네티스 구성을 적용해주세요:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-string\">kubectl</span> <span class=\"hljs-string\">apply</span> <span class=\"hljs-string\">-f</span> <span class=\"hljs-string\">deployment.yaml</span>\n<span class=\"hljs-string\">kubectl</span> <span class=\"hljs-string\">apply</span> <span class=\"hljs-string\">-f</span> <span class=\"hljs-string\">service.yaml</span>\n</code></pre>\n<p><a href=\"http://www.linkedin.com/in/mohammedtalhakalimi\" rel=\"nofollow\" target=\"_blank\">www.linkedin.com/in/mohammedtalhakalimi</a></p>\n<h1>Step 3: Terraform으로 프로비저닝하기</h1>\n<p>테라폼을 사용하여 쿠버네티스 클러스터를 프로비저닝할 것입니다. main.tf 파일을 작성해주세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"># main.<span class=\"hljs-property\">tf</span>\nprovider <span class=\"hljs-string\">\"aws\"</span> {\n  region = <span class=\"hljs-string\">\"us-west-2\"</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-string\">\"eks\"</span> {\n  source          = <span class=\"hljs-string\">\"terraform-aws-modules/eks/aws\"</span>\n  cluster_name    = <span class=\"hljs-string\">\"my-cluster\"</span>\n  cluster_version = <span class=\"hljs-string\">\"1.20\"</span>\n  subnets         = [<span class=\"hljs-string\">\"subnet-0123456789abcdef0\"</span>, <span class=\"hljs-string\">\"subnet-0123456789abcdef1\"</span>]\n  vpc_id          = <span class=\"hljs-string\">\"vpc-0123456789abcdef0\"</span>\n  node_groups = {\n    my-node-group = {\n      desired_capacity = <span class=\"hljs-number\">2</span>\n      max_capacity     = <span class=\"hljs-number\">3</span>\n      min_capacity     = <span class=\"hljs-number\">1</span>\n      instance_type = <span class=\"hljs-string\">\"t3.medium\"</span>\n    }\n  }\n}\noutput <span class=\"hljs-string\">\"cluster_endpoint\"</span> {\n  value = <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">eks</span>.<span class=\"hljs-property\">cluster_endpoint</span>\n}\n</code></pre>\n<p>테라폼 구성을 초기화하고 적용하십시오:</p>\n<pre><code class=\"hljs language-js\">terraform init\nterraform apply\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>새 클러스터를 사용하도록 kubectl을 구성하세요:</p>\n<pre><code class=\"hljs language-bash\">aws eks --region us-west-2 update-kubeconfig --name my-cluster\n</code></pre>\n<p>LinkedIn 프로필: <a href=\"http://www.linkedin.com/in/mohammedtalhakalimi\" rel=\"nofollow\" target=\"_blank\">www.linkedin.com/in/mohammedtalhakalimi</a></p>\n<h1>단계 4: CI/CD로 자동화</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>마지막으로, GitHub Actions를 사용하여 CI/CD 파이프라인을 설정할 것입니다. .github/workflows/ci-cd-pipeline.yaml 파일을 만들어주세요:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># .github/workflows/ci-cd-pipeline.yaml</span>\n<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">CI/CD</span> <span class=\"hljs-string\">Pipeline</span>\n</code></pre>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">on:</span>\n  <span class=\"hljs-attr\">push:</span>\n    <span class=\"hljs-attr\">branches:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span>\n<span class=\"hljs-attr\">jobs:</span>\n  <span class=\"hljs-attr\">build:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">code</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Set</span> <span class=\"hljs-string\">up</span> <span class=\"hljs-string\">Docker</span> <span class=\"hljs-string\">Buildx</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">docker/setup-buildx-action@v1</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Login</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">Docker</span> <span class=\"hljs-string\">Hub</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">docker/login-action@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">${secrets.DOCKER_USERNAME}</span>\n          <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">${secrets.DOCKER_PASSWORD}</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">push</span> <span class=\"hljs-string\">Docker</span> <span class=\"hljs-string\">image</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|\n          docker build -t my-web-app:latest .\n          docker tag my-web-app:latest ${secrets.DOCKER_USERNAME}/my-web-app:latest\n          docker push ${secrets.DOCKER_USERNAME}/my-web-app:latest\n</span>  <span class=\"hljs-attr\">deploy:</span>\n    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span>\n    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">build</span>\n    <span class=\"hljs-attr\">steps:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span> <span class=\"hljs-string\">code</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Set</span> <span class=\"hljs-string\">up</span> <span class=\"hljs-string\">kubectl</span>\n        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">azure/setup-kubectl@v1</span>\n        <span class=\"hljs-attr\">with:</span>\n          <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"v1.20.0\"</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">to</span> <span class=\"hljs-string\">Kubernetes</span>\n        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|\n          kubectl apply -f deployment.yaml\n          kubectl apply -f service.yaml\n</span></code></pre>\n<p><a href=\"http://www.linkedin.com/in/mohammedtalhakalimi\" rel=\"nofollow\" target=\"_blank\">www.linkedin.com/in/mohammedtalhakalimi</a></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>결론</h1>\n<p>위 단계를 따라 웹 애플리케이션을 위한 불변의 인프라를 구축했습니다. 이 방식을 통해 배포가 일관적이고 확장 가능하며 신뢰할 수 있음을 보장할 수 있습니다. 불변의 인프라 관행을 준수함으로써 응용 프로그램의 안정성과 관리 용이성을 크게 향상시킬 수 있습니다.</p>\n<p>의견이나 경험을 댓글로 공유해 주세요. 즐거운 코딩 되세요!</p>\n<p><a href=\"http://www.linkedin.com/in/mohammedtalhakalimi\" rel=\"nofollow\" target=\"_blank\">www.linkedin.com/in/mohammedtalhakalimi</a></p>\n</body>\n</html>\n"},"__N_SSG":true}