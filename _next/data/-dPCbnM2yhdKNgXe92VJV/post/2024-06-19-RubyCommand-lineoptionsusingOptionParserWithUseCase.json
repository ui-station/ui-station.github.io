{"pageProps":{"post":{"title":"루비 커맨드 라인 옵션을 다루는 OptionParser 사용 사례와 함께","description":"","date":"2024-06-19 10:24","slug":"2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase","content":"\n터미널에서 실행하는 간단한 응용 프로그램이나 스크립트를 명령줄 응용 프로그램이라고 합니다. 대부분의 경우, 명령줄 응용 프로그램을 사용할 때는 옵션과 인수를 사용하여 상호 작용해야 합니다.\n\n이 문서에서는 명령줄 옵션과 인수를 처리하기 위해 루비 OptionParser를 사용하는 방법을 배우게 될 것입니다. 간단한 사용 사례로도 배워보겠습니다.\n\n# 목차\n\n- 사용 사례\n- 디자인 구매\n- OptParse 동작\n- 결론\n- 참고문헌\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 사용 사례\n\n더 잘 이해하기 위해 간단한 사용 사례로 학습하겠습니다. 아래는 우리의 루비 스크립트에 대한 요구사항 목록입니다:\n\n- 이 스크립트는 3rd party 웹사이트로부터 데이터를 수집하는 scrapper.rb라고 불립니다.\n- 주어진 URL을 기반으로 데이터를 수집할 수 있어야 합니다.\n- verbose 옵션을 사용하여 데이터를 수집할 수 있지만, 이는 선택 사항입니다.\n- 수집된 데이터를 JSON 및 CSV로 내보낼 수 있어야 합니다.\n- 결과를 출력하기 위해 내보내기 또는 미내보내기를 사용할 수 있어야 합니다.\n- 짧은 이름 및 긴 이름 옵션을 사용할 수 있어야 합니다.\n- 필수 매개변수는 --target-url뿐입니다.\n- 사용 가능한 옵션과 매개변수를 확인하기 위해 --help 옵션을 사용할 수 있어야 합니다.\n\n# 디자인 구매하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 요구사항에 따라 아래와 같은 디자인이 완성되었습니다:\n\n![Ruby Command-line options using OptionParser With Use Case](/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_0.png)\n\n우리는 루비 스크립트를 scrapper.rb라는 이름으로 지었습니다. 선택적 옵션, 필수 옵션, 선택적 인자를 가지고 있음을 보실 수 있습니다. 그리고 가장 중요한 것은 사용 가능한 스크립트 옵션 목록을 표시하기 위해 --help 옵션을 구현해야 합니다.\n\n옵션 파서를 사용하여 처리하는 방법을 살펴보겠습니다. 정말로 생각보다 간단합니다 :))\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# OptionParser 활용하기\n\n위에서 설계한 내용을 OptionParser로 구현해봅시다.\n\n## ARGV\n\n시작하기 전에, 루비에는 명령행 옵션과 인수를 가져오기 위한 ARGV가 있습니다. 이는 우리 프로그램에서 배열로 출력됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image](/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_1.png)\n\n6번 라인을 살펴보세요. 옵션과 인자를 사용하여 스크립트를 실행하면 모든 값을 배열 값으로 출력합니다.\n\n```js\n➜ ruby scrapper.rb --name MyName --age 10\n[\"--name\", \"MyName\", \"--age\", \"10\"]\n```\n\nARGV에 대해 더 많이 알고 싶다면 [이 링크](https://link-to-more-info-about-ARGV)를 확인하세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 기본 설정 및 도움말 옵션\n\noptparse를 설정하고 --hello와 같은 샘플 옵션을 추가하여 스크립트가 제대로 작동하는지 확인합니다.\n\n![이미지](/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_2.png)\n\n긴 줄을 추가한 것 처럼 보여서 놀랐죠! 그러나 optparse를 사용할 때 기본 구조를 보여주는 것입니다. 자세한 내용은 아래와 같습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- line 1: optparse를 사용하려면 반드시 요구해야 합니다.\n- line 10: parser로 OptionParser 객체를 초기화합니다.\n- line 13: hello라는 간단한 옵션을 추가합니다. --hello로 사용할 수 있고 부울 값으로 반환됩니다.\n- line 16–17: options라는 빈 해시를 생성하고 17번째 줄에서 파싱 결과를 할당합니다.\n\n이제 scrapper.rb를 실행할 때 --help 및 --hello를 사용할 수 있습니다.\n\n```js\n➜ ruby scrapper.rb --hello\n[]\n{:hello=>true}\n\n➜ ruby scrapper.rb --help\nUsage: scrapper [options]\n        --hello                      hello world from parser\n```\n\n보시는 대로, --help를 사용하면 13번째 줄의 설명을 기반으로 명령 설명이 출력됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n네, 맞아요. optparse은 자동으로 우리를 위해 --help 옵션을 만들어 줄 거에요.\n\n## 대상 URL\n\n--hello 옵션을 제거하고 라인 12를 사용해서 대체해요. 우리는 Short Name과 Long Name을 사용하고 필수 인자를 가진 옵션을 추가해요.\n\n![이미지](/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트해보세요:\n\n```js\n➜ ruby scrapper.rb --target-url\nscrapper.rb:17:in `<main>': missing argument: --target-url (OptionParser::MissingArgument)\n\n➜ ruby scrapper.rb -t\nscrapper.rb:17:in `<main>': missing argument: -t (OptionParser::MissingArgument)\n\n➜ ruby scrapper.rb --target-url https://MyTargetUrl\n[]\n{:\"target-url\"=>\"https://MyTargetUrl\"}\n\n➜ ruby scrapper.rb -t https://MyTargetUrl\n[]\n{:\"target-url\"=>\"https://MyTargetUrl\"}\n```\n\n## 내보내기\n\n내보내기를 위해 `[no]export`라는 새로운 옵션을 추가했습니다. 이 옵션의 값은 부울(boolean)입니다. 이것은 스크립트에서 `--export` 및 `--no-export` 옵션이 사용 가능하게 만듭니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_4.png\" />\n\n테스트해보세요:\n\n```js\n➜ ruby scrapper.rb --export\n[]\n{:export=>true}\n\n➜ ruby scrapper.rb --no-export\n[]\n{:export=>false}\n```\n\n## 형식\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저희 스크립트는 출력 형식 지원을 하며, JSON 및 CSV 형식만 지원합니다.\n\n이 경우를 처리하려면 명시적인 값을 사용해야 합니다. 간단히 [‘JSON’, ‘CSV’]를 추가하면 됩니다. 저희 스크립트는 정의된 명시적인 값만 허용할 것입니다.\n\n이와 관련된 자세한 내용은 아래 이미지를 참고해 주세요.\n\n![이미지](/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_5.png)\n\n테스트해 보세요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n➜ ruby scrapper.rb --format HTML\nscrapper.rb:19:in `<main>': 올바르지 않은 인수입니다: --format HTML (OptionParser::InvalidArgument)\n\n➜ ruby scrapper.rb --format\nscrapper.rb:19:in `<main>': 인수가 누락되었습니다: --format (OptionParser::MissingArgument)\n\n➜ ruby scrapper.rb --format JSON\n[]\n{:format=>\"JSON\"}\n\n➜ ruby scrapper.rb -f JSON\n[]\n{:format=>\"JSON\"}\n\n## 상세모드\n\n마지막으로 --verbose라는 옵션이 있으면 15번 라인에 이것을 추가하세요.\n\n![Ruby Command Line Options Using OptionParser with Use Case](/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_6.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위 내용을 테스트해보세요:\n\n```js\n➜ ruby scrapper.rb -v\n[]\n{:verbose=>true}\n\n➜ ruby scrapper.rb --verbose\n[]\n{:verbose=>true}\n```\n\n## 도움말\n\n위에서 언급한대로, OptionParser는 자동으로 --help 옵션을 위한 명령어를 만들어줍니다. 스크립트를 업데이트하여 --help 옵션을 처리할 필요가 없습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n최종 도움말 출력을 확인해 봅시다.\n\n```js\n➜ ruby scrapper.rb --help\nUsage: scrapper [options]\n    -t, --target-url VALUE           데이터를 가져올 대상 URL입니다.\n        --[no-]export                데이터를 내보내려면 'export'를 사용하고, 터미널 출력만 되도록 하려면 'no-export'를 사용합니다.\n    -f, --format VALUE               JSON 또는 CSV로 출력 형식을 정의합니다.\n    -v, --verbose                    출력을 자세하게 설정합니다.\n```\n\n## 배너\n\n터미널에서 더 나은 출력 메시지를 위해 parser.banner를 사용할 때, 프리 텍스트로 배너 값을 설정할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_7.png)\n\nTry it out:\n\n```js\n➜ ruby scrapper.rb --help\n사용법: scrapper.rb [options]\n    -t, --target-url VALUE           데이터를 가져올 대상 URL입니다.\n        --[no-]export                데이터를 내보내려면 'export', 터미널 출력만을 원하면 'no-export'를 사용하십시오.\n    -f, --format VALUE               JSON 또는 CSV로 출력 형식을 정의합니다.\n    -v, --verbose                    출력을 상세하게 설정합니다.\n```\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n루비에는 많은 강력한 기능들이 있어요. 이 경우에는 옵션 파서를 사용하여 명령행 옵션과 인수를 다루고 있어요.\n\n이 글이 도움이 되었으면 좋겠어요. 읽어 주셔서 감사합니다.\n\n루비 친구들, 즐거운 하루 보내세요! 💎\n\n# 참고문헌\n","ogImage":{"url":"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_0.png"},"coverImage":"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>터미널에서 실행하는 간단한 응용 프로그램이나 스크립트를 명령줄 응용 프로그램이라고 합니다. 대부분의 경우, 명령줄 응용 프로그램을 사용할 때는 옵션과 인수를 사용하여 상호 작용해야 합니다.</p>\n<p>이 문서에서는 명령줄 옵션과 인수를 처리하기 위해 루비 OptionParser를 사용하는 방법을 배우게 될 것입니다. 간단한 사용 사례로도 배워보겠습니다.</p>\n<h1>목차</h1>\n<ul>\n<li>사용 사례</li>\n<li>디자인 구매</li>\n<li>OptParse 동작</li>\n<li>결론</li>\n<li>참고문헌</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>사용 사례</h1>\n<p>더 잘 이해하기 위해 간단한 사용 사례로 학습하겠습니다. 아래는 우리의 루비 스크립트에 대한 요구사항 목록입니다:</p>\n<ul>\n<li>이 스크립트는 3rd party 웹사이트로부터 데이터를 수집하는 scrapper.rb라고 불립니다.</li>\n<li>주어진 URL을 기반으로 데이터를 수집할 수 있어야 합니다.</li>\n<li>verbose 옵션을 사용하여 데이터를 수집할 수 있지만, 이는 선택 사항입니다.</li>\n<li>수집된 데이터를 JSON 및 CSV로 내보낼 수 있어야 합니다.</li>\n<li>결과를 출력하기 위해 내보내기 또는 미내보내기를 사용할 수 있어야 합니다.</li>\n<li>짧은 이름 및 긴 이름 옵션을 사용할 수 있어야 합니다.</li>\n<li>필수 매개변수는 --target-url뿐입니다.</li>\n<li>사용 가능한 옵션과 매개변수를 확인하기 위해 --help 옵션을 사용할 수 있어야 합니다.</li>\n</ul>\n<h1>디자인 구매하기</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위의 요구사항에 따라 아래와 같은 디자인이 완성되었습니다:</p>\n<p><img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_0.png\" alt=\"Ruby Command-line options using OptionParser With Use Case\"></p>\n<p>우리는 루비 스크립트를 scrapper.rb라는 이름으로 지었습니다. 선택적 옵션, 필수 옵션, 선택적 인자를 가지고 있음을 보실 수 있습니다. 그리고 가장 중요한 것은 사용 가능한 스크립트 옵션 목록을 표시하기 위해 --help 옵션을 구현해야 합니다.</p>\n<p>옵션 파서를 사용하여 처리하는 방법을 살펴보겠습니다. 정말로 생각보다 간단합니다 :))</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>OptionParser 활용하기</h1>\n<p>위에서 설계한 내용을 OptionParser로 구현해봅시다.</p>\n<h2>ARGV</h2>\n<p>시작하기 전에, 루비에는 명령행 옵션과 인수를 가져오기 위한 ARGV가 있습니다. 이는 우리 프로그램에서 배열로 출력됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_1.png\" alt=\"Image\"></p>\n<p>6번 라인을 살펴보세요. 옵션과 인자를 사용하여 스크립트를 실행하면 모든 값을 배열 값으로 출력합니다.</p>\n<pre><code class=\"hljs language-js\">➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --name <span class=\"hljs-title class_\">MyName</span> --age <span class=\"hljs-number\">10</span>\n[<span class=\"hljs-string\">\"--name\"</span>, <span class=\"hljs-string\">\"MyName\"</span>, <span class=\"hljs-string\">\"--age\"</span>, <span class=\"hljs-string\">\"10\"</span>]\n</code></pre>\n<p>ARGV에 대해 더 많이 알고 싶다면 <a href=\"https://link-to-more-info-about-ARGV\" rel=\"nofollow\" target=\"_blank\">이 링크</a>를 확인하세요.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>기본 설정 및 도움말 옵션</h2>\n<p>optparse를 설정하고 --hello와 같은 샘플 옵션을 추가하여 스크립트가 제대로 작동하는지 확인합니다.</p>\n<p><img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_2.png\" alt=\"이미지\"></p>\n<p>긴 줄을 추가한 것 처럼 보여서 놀랐죠! 그러나 optparse를 사용할 때 기본 구조를 보여주는 것입니다. 자세한 내용은 아래와 같습니다:</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<ul>\n<li>line 1: optparse를 사용하려면 반드시 요구해야 합니다.</li>\n<li>line 10: parser로 OptionParser 객체를 초기화합니다.</li>\n<li>line 13: hello라는 간단한 옵션을 추가합니다. --hello로 사용할 수 있고 부울 값으로 반환됩니다.</li>\n<li>line 16–17: options라는 빈 해시를 생성하고 17번째 줄에서 파싱 결과를 할당합니다.</li>\n</ul>\n<p>이제 scrapper.rb를 실행할 때 --help 및 --hello를 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --hello\n[]\n{:<span class=\"hljs-function\"><span class=\"hljs-params\">hello</span>=></span><span class=\"hljs-literal\">true</span>}\n\n➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --help\n<span class=\"hljs-title class_\">Usage</span>: scrapper [options]\n        --hello                      hello world <span class=\"hljs-keyword\">from</span> parser\n</code></pre>\n<p>보시는 대로, --help를 사용하면 13번째 줄의 설명을 기반으로 명령 설명이 출력됩니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>네, 맞아요. optparse은 자동으로 우리를 위해 --help 옵션을 만들어 줄 거에요.</p>\n<h2>대상 URL</h2>\n<p>--hello 옵션을 제거하고 라인 12를 사용해서 대체해요. 우리는 Short Name과 Long Name을 사용하고 필수 인자를 가진 옵션을 추가해요.</p>\n<p><img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_3.png\" alt=\"이미지\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>테스트해보세요:</p>\n<pre><code class=\"hljs language-js\">➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --target-url\nscrapper.<span class=\"hljs-property\">rb</span>:<span class=\"hljs-number\">17</span>:<span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">`&#x3C;main>': missing argument: --target-url (OptionParser::MissingArgument)\n\n➜ ruby scrapper.rb -t\nscrapper.rb:17:in `</span>&#x3C;main><span class=\"hljs-string\">': missing argument: -t (OptionParser::MissingArgument)\n\n➜ ruby scrapper.rb --target-url https://MyTargetUrl\n[]\n{:\"target-url\"=>\"https://MyTargetUrl\"}\n\n➜ ruby scrapper.rb -t https://MyTargetUrl\n[]\n{:\"target-url\"=>\"https://MyTargetUrl\"}\n</span></code></pre>\n<h2>내보내기</h2>\n<p>내보내기를 위해 <code>[no]export</code>라는 새로운 옵션을 추가했습니다. 이 옵션의 값은 부울(boolean)입니다. 이것은 스크립트에서 <code>--export</code> 및 <code>--no-export</code> 옵션이 사용 가능하게 만듭니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_4.png\">\n<p>테스트해보세요:</p>\n<pre><code class=\"hljs language-js\">➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --<span class=\"hljs-keyword\">export</span>\n[]\n{:<span class=\"hljs-function\"><span class=\"hljs-params\">export</span>=></span><span class=\"hljs-literal\">true</span>}\n\n➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --no-<span class=\"hljs-keyword\">export</span>\n[]\n{:<span class=\"hljs-function\"><span class=\"hljs-params\">export</span>=></span><span class=\"hljs-literal\">false</span>}\n</code></pre>\n<h2>형식</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>저희 스크립트는 출력 형식 지원을 하며, JSON 및 CSV 형식만 지원합니다.</p>\n<p>이 경우를 처리하려면 명시적인 값을 사용해야 합니다. 간단히 [‘JSON’, ‘CSV’]를 추가하면 됩니다. 저희 스크립트는 정의된 명시적인 값만 허용할 것입니다.</p>\n<p>이와 관련된 자세한 내용은 아래 이미지를 참고해 주세요.</p>\n<p><img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_5.png\" alt=\"이미지\"></p>\n<p>테스트해 보세요!</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>➜ ruby scrapper.rb --format HTML\nscrapper.rb:19:in `</p><main>': 올바르지 않은 인수입니다: --format HTML (OptionParser::InvalidArgument)<p></p>\n<p>➜ ruby scrapper.rb --format\nscrapper.rb:19:in `</p><main>': 인수가 누락되었습니다: --format (OptionParser::MissingArgument)<p></p>\n<p>➜ ruby scrapper.rb --format JSON\n[]\n{:format=>\"JSON\"}</p>\n<p>➜ ruby scrapper.rb -f JSON\n[]\n{:format=>\"JSON\"}</p>\n<h2>상세모드</h2>\n<p>마지막으로 --verbose라는 옵션이 있으면 15번 라인에 이것을 추가하세요.</p>\n<p><img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_6.png\" alt=\"Ruby Command Line Options Using OptionParser with Use Case\"></p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>위 내용을 테스트해보세요:</p>\n<pre><code class=\"hljs language-js\">➜ ruby scrapper.<span class=\"hljs-property\">rb</span> -v\n[]\n{:<span class=\"hljs-function\"><span class=\"hljs-params\">verbose</span>=></span><span class=\"hljs-literal\">true</span>}\n\n➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --verbose\n[]\n{:<span class=\"hljs-function\"><span class=\"hljs-params\">verbose</span>=></span><span class=\"hljs-literal\">true</span>}\n</code></pre>\n<h2>도움말</h2>\n<p>위에서 언급한대로, OptionParser는 자동으로 --help 옵션을 위한 명령어를 만들어줍니다. 스크립트를 업데이트하여 --help 옵션을 처리할 필요가 없습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>최종 도움말 출력을 확인해 봅시다.</p>\n<pre><code class=\"hljs language-js\">➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --help\n<span class=\"hljs-title class_\">Usage</span>: scrapper [options]\n    -t, --target-url <span class=\"hljs-variable constant_\">VALUE</span>           데이터를 가져올 대상 <span class=\"hljs-variable constant_\">URL</span>입니다.\n        --[no-]<span class=\"hljs-keyword\">export</span>                데이터를 내보내려면 <span class=\"hljs-string\">'export'</span>를 사용하고, 터미널 출력만 되도록 하려면 <span class=\"hljs-string\">'no-export'</span>를 사용합니다.\n    -f, --format <span class=\"hljs-variable constant_\">VALUE</span>               <span class=\"hljs-title class_\">JSON</span> 또는 <span class=\"hljs-variable constant_\">CSV</span>로 출력 형식을 정의합니다.\n    -v, --verbose                    출력을 자세하게 설정합니다.\n</code></pre>\n<h2>배너</h2>\n<p>터미널에서 더 나은 출력 메시지를 위해 parser.banner를 사용할 때, 프리 텍스트로 배너 값을 설정할 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p><img src=\"/assets/img/2024-06-19-RubyCommand-lineoptionsusingOptionParserWithUseCase_7.png\" alt=\"image\"></p>\n<p>Try it out:</p>\n<pre><code class=\"hljs language-js\">➜ ruby scrapper.<span class=\"hljs-property\">rb</span> --help\n사용법: scrapper.<span class=\"hljs-property\">rb</span> [options]\n    -t, --target-url <span class=\"hljs-variable constant_\">VALUE</span>           데이터를 가져올 대상 <span class=\"hljs-variable constant_\">URL</span>입니다.\n        --[no-]<span class=\"hljs-keyword\">export</span>                데이터를 내보내려면 <span class=\"hljs-string\">'export'</span>, 터미널 출력만을 원하면 <span class=\"hljs-string\">'no-export'</span>를 사용하십시오.\n    -f, --format <span class=\"hljs-variable constant_\">VALUE</span>               <span class=\"hljs-title class_\">JSON</span> 또는 <span class=\"hljs-variable constant_\">CSV</span>로 출력 형식을 정의합니다.\n    -v, --verbose                    출력을 상세하게 설정합니다.\n</code></pre>\n<h1>결론</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>루비에는 많은 강력한 기능들이 있어요. 이 경우에는 옵션 파서를 사용하여 명령행 옵션과 인수를 다루고 있어요.</p>\n<p>이 글이 도움이 되었으면 좋겠어요. 읽어 주셔서 감사합니다.</p>\n<p>루비 친구들, 즐거운 하루 보내세요! 💎</p>\n<h1>참고문헌</h1></main></main>\n</body>\n</html>\n"},"__N_SSG":true}