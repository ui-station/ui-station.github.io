{"pageProps":{"post":{"title":"마이크로소프트 Phi2의 Text2SQL 작업을 위한 지도 학습 세부 조정 SFT 파트 1","description":"","date":"2024-05-23 18:24","slug":"2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1","content":"\n![image](/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png)\n\n이 글에서는 우리만의 모델, LLM (Large Language Model)을 세밀하게 조정하여 자연어 텍스트에서 유효한 SQL 쿼리를 작성할 수 있는 기능을 추가할 것입니다.\n\n한 단계씩 살펴보겠습니다.\n\n- 소개\n  - 사전 훈련된 모델 선택\n  - 입력/출력 형식\n- 데이터셋 준비\n  - 정리 작업 진행\n  - 하위 집합 생성\n- (계속되는 내용은 Part 2에서)\n- 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 소개\n\n요즘, 트랜스포머 기반 모델이 자연어 처리 분야에서 많은 문제를 해결하고 있어요. 잘 알려진 예시로는 GPT, LLAMA, Mistral 등이 있습니다. 이 모델들은 특정 자연어 처리 문제를 해결하기 위해 입력으로 프롬프트를 사용합니다.\n\n![이미지](/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_1.png)\n\n## 사전 학습된 모델 선택\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n미리 훈련된 모델을 사용하여 시작해 보세요. 미리 훈련된 모델의 정의는 무엇일까요?\n\n미리 훈련된 모델은 수천만 개 또는 수십억 개의 토큰을 사용하여 \"다음 단어 예측\" 목적으로 훈련된 모델입니다. 이 훈련 과정동안, 문장 내 단어의 구조와 의미를 학습합니다.\n\n이 작업에서는 미러소프트/파이2 미리 훈련된 모델을 사용할 것입니다. 이 모델은 1.4 조 토큰으로 훈련되었으며, 27 억 개의 파라미터를 갖추고 있습니다. 이 모델은 SLM(작은 언어 모델)로 간주될 수 있습니다.\n\n이 유형의 미리 훈련된 모델은 앞선 맥락을 기반으로 새로운 토큰을 생성할 수 있는 능력을 갖고 있습니다. 이 모델은 독립적인 질문, QA, 채팅 형식, 그리고 코드 생성과 같은 다양한 용도에 사용될 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 모델을 QA 스타일로 텍스트2SQL 생성을 위해 미세 조정할 예정입니다.\n\n## 입력/출력 형식\n\n|            |               |\n| ---------- | ------------- |\n| **input**  | User question |\n| **output** | SQL query     |\n\n질문은 다음과 같습니다: LLM은 사용자 질문에서 어떻게 SQL을 생성할까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n인간이라도 할 수 없어요. 적어도 테이블 구조에 대한 정보와 샘플 데이터가 필요한데, 그럼에도 불구하고 질문에 대한 SQL 쿼리를 해결할 수 있을 거에요.\n\nLLM과 유사하게, 어떤 맥락을 제공해야 해요. 따라서 우리의 입력은 (맥락) + (사용자 질문)이고, LLM이 우리를 위해 SQL을 생성할 거에요.\n\n그러니 데이터셋 수집 및 준비를 시작해 보고, 그 다음으로 세밀하게 조정해 봐요.\n\n# 데이터셋 준비\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n잠시 찾아보니 huggingface의 “gretelai/synthetic_text_to_sql” 데이터셋을 찾았어요. 제가 찾고 있던 작업에 가장 적합한 것 같아요. 데이터셋에 대해 더 많은 정보를 얻으려면 링크를 클릭해주세요.\n\n```python\nfrom datasets import Dataset, load_dataset\n\n# 데이터셋 불러오고 원치 않는 열 제거하기\ndataset = load_dataset(\"gretelai/synthetic_text_to_sql\") \\\n    .remove_columns(['domain_description', 'sql_complexity_description',\n                     'sql_task_type_description', 'sql_explanation', 'sql_task_type'])\n\ndataset\n```\n\n```python\nDatasetDict({\n    train: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 100000\n    })\n    test: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 5851\n    })\n})\n```\n\n```python\ndataset['train'][0]\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터셋이 무엇인지 감을 잡기 위해 하나의 샘플을 살펴봅시다. 여기서 우리는 \"sql_context,\" \"sql_prompt,\" 그리고 \"sql\" 필드를 사용할 것입니다.\n\n- sql_context: 테이블 생성 및 삽입 문장\n- sql_prompt: 사용자 쿼리\n- sql: 대상 쿼리\n\n(sql_context + sql_prompt)가 입력이 되고, (sql)이 대상 생성이 됩니다.\n\n```js\n{'id': 5097,\n 'domain': 'forestry',\n 'sql_complexity': 'single join',\n 'sql_prompt': '각 영업사원이 판매한 총 목재 양을 영업사원별로 정렬하여 나타내시오.',\n 'sql_context': \"CREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT); INSERT INTO salesperson (salesperson_id, name, region) VALUES (1, 'John Doe', 'North'), (2, 'Jane Smith', 'South'); CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE); INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES (1, 1, 120, '2021-01-01'), (2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');\",\n 'sql': 'SELECT salesperson_id, name, SUM(volume) as total_volume FROM timber_sales JOIN salesperson ON timber_sales.salesperson_id = salesperson.salesperson_id GROUP BY salesperson_id, name ORDER BY total_volume DESC;'}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 정리를 해봅시다\n\n이 데이터셋은 합성 데이터입니다. 유효하지 않은 문맥이나 SQL 쿼리를 가질 수 있습니다. 이러한 레코드를 찾아 제거해봅시다. 쓰레기를 넣으면 쓰레기가 나온다는 말이죠.\n\n다음 조건에 따라 유효한 데이터를 확인할 것입니다:\n\n- SQL 문맥과 SQL 쿼리는 SQL Lite 데이터베이스에 유효해야 합니다.\n- 테이블은 샘플 레코드를 가져야 합니다.\n- SQL 쿼리를 실행한 후에 결과를 얻을 수 있어야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nimport sqlite3\n\ndef check_all_tables_have_values(row, debug=False):\n\n    # 테이블에 레코드가 있어야 함\n    if row['sql_context'].find('INSERT INTO') == -1:\n        return False\n\n    try:\n        db = sqlite3.connect(\":memory:\")\n        cur = db.cursor()\n        cur.executescript(row['sql_context'])\n        res = cur.execute(row['sql']).fetchall()\n        if debug: print(res)\n        # print(res, len(res))\n        return len(res) > 0\n    except:\n        # print(\"Error while run query\")\n        return False\n\ndataset = dataset.filter(lambda x : check_all_tables_have_values(x))\ndataset\n```\n\n```js\nDatasetDict({\n    train: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 53478\n    })\n    test: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 3133\n    })\n})\n```\n\n보시다시피 데이터의 약 46%가 제거되었습니다. 이것은 SQL Lite와 호환되지 않거나 데이터가 없을 수 있습니다.\n\n## 하위 집합 만들기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그럼,이 초기 실험을 위한 데이터셋이 훨씬 큽니다. 이를 위해 그 중 일부를 만들어 보겠습니다.\n\n다음과 같이 14개 도메인과 3가지 SQL 복잡성 수준으로 데이터셋을 만들 것입니다:\n\n```js\nSELECTED_SQL_COMPLEXITY = ['basic SQL', 'aggregation','single join']\n\nSELECTED_DOMAINS = [\n    \"technology\", \"sports\", \"logistics\", \"space\", \"energy\",\n    \"finance\", \"agriculture\", \"justice\", \"retail\", \"media\",\n    \"education\", \"healthcare\", \"fashion\", \"music\"\n]\n\ndef filter_by_sql_task_type_and_domains(row):\n    return row['sql_complexity'] in SELECTED_SQL_COMPLEXITY \\\n         and row['domain'] in SELECTED_DOMAINS\n\ndataset = dataset.filter(lambda x : filter_by_sql_task_type_and_domains(x))\ndataset\n```\n\n```js\nDatasetDict({\n    train: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 6713\n    })\n    test: Dataset({\n        features: ['id', 'domain', 'sql_complexity', 'sql_prompt', 'sql_context', 'sql'],\n        num_rows: 408\n    })\n})\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_3.png\" />\n\n여기에는 14개의 도메인 데이터셋이 있으며, 각 도메인은 훈련 데이터에 적어도 300개의 샘플이 있습니다. SQL 복잡성은 \"기본 SQL\"의 50%, \"단일 조인\"의 20%, 그리고 \"집계\"의 30%로 분포됩니다.\n\n# (계속, 파트 2로 이어집니다)\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 문서에서는 SLM이 무엇인지 알아보고 fine-tuning을 통해 Text2SQL 작업을 어떻게 해결할 것인지에 대한 아이디어를 얻게 됩니다.\n\n데이터셋에 대해 작업을 진행했으며, 다음 (제2부) 글에서 실제 fine-tuning 프로세스를 수행할 것입니다.\n","ogImage":{"url":"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png"},"coverImage":"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_0.png\" alt=\"image\"></p>\n<p>이 글에서는 우리만의 모델, LLM (Large Language Model)을 세밀하게 조정하여 자연어 텍스트에서 유효한 SQL 쿼리를 작성할 수 있는 기능을 추가할 것입니다.</p>\n<p>한 단계씩 살펴보겠습니다.</p>\n<ul>\n<li>소개\n<ul>\n<li>사전 훈련된 모델 선택</li>\n<li>입력/출력 형식</li>\n</ul>\n</li>\n<li>데이터셋 준비\n<ul>\n<li>정리 작업 진행</li>\n<li>하위 집합 생성</li>\n</ul>\n</li>\n<li>(계속되는 내용은 Part 2에서)</li>\n<li>결론</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h1>소개</h1>\n<p>요즘, 트랜스포머 기반 모델이 자연어 처리 분야에서 많은 문제를 해결하고 있어요. 잘 알려진 예시로는 GPT, LLAMA, Mistral 등이 있습니다. 이 모델들은 특정 자연어 처리 문제를 해결하기 위해 입력으로 프롬프트를 사용합니다.</p>\n<p><img src=\"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_1.png\" alt=\"이미지\"></p>\n<h2>사전 학습된 모델 선택</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>미리 훈련된 모델을 사용하여 시작해 보세요. 미리 훈련된 모델의 정의는 무엇일까요?</p>\n<p>미리 훈련된 모델은 수천만 개 또는 수십억 개의 토큰을 사용하여 \"다음 단어 예측\" 목적으로 훈련된 모델입니다. 이 훈련 과정동안, 문장 내 단어의 구조와 의미를 학습합니다.</p>\n<p>이 작업에서는 미러소프트/파이2 미리 훈련된 모델을 사용할 것입니다. 이 모델은 1.4 조 토큰으로 훈련되었으며, 27 억 개의 파라미터를 갖추고 있습니다. 이 모델은 SLM(작은 언어 모델)로 간주될 수 있습니다.</p>\n<p>이 유형의 미리 훈련된 모델은 앞선 맥락을 기반으로 새로운 토큰을 생성할 수 있는 능력을 갖고 있습니다. 이 모델은 독립적인 질문, QA, 채팅 형식, 그리고 코드 생성과 같은 다양한 용도에 사용될 수 있습니다.</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 모델을 QA 스타일로 텍스트2SQL 생성을 위해 미세 조정할 예정입니다.</p>\n<h2>입력/출력 형식</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>input</strong></td><td>User question</td></tr><tr><td><strong>output</strong></td><td>SQL query</td></tr></tbody></table>\n<p>질문은 다음과 같습니다: LLM은 사용자 질문에서 어떻게 SQL을 생성할까요?</p>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>인간이라도 할 수 없어요. 적어도 테이블 구조에 대한 정보와 샘플 데이터가 필요한데, 그럼에도 불구하고 질문에 대한 SQL 쿼리를 해결할 수 있을 거에요.</p>\n<p>LLM과 유사하게, 어떤 맥락을 제공해야 해요. 따라서 우리의 입력은 (맥락) + (사용자 질문)이고, LLM이 우리를 위해 SQL을 생성할 거에요.</p>\n<p>그러니 데이터셋 수집 및 준비를 시작해 보고, 그 다음으로 세밀하게 조정해 봐요.</p>\n<h1>데이터셋 준비</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>잠시 찾아보니 huggingface의 “gretelai/synthetic_text_to_sql” 데이터셋을 찾았어요. 제가 찾고 있던 작업에 가장 적합한 것 같아요. 데이터셋에 대해 더 많은 정보를 얻으려면 링크를 클릭해주세요.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> datasets <span class=\"hljs-keyword\">import</span> Dataset, load_dataset\n\n<span class=\"hljs-comment\"># 데이터셋 불러오고 원치 않는 열 제거하기</span>\ndataset = load_dataset(<span class=\"hljs-string\">\"gretelai/synthetic_text_to_sql\"</span>) \\\n    .remove_columns([<span class=\"hljs-string\">'domain_description'</span>, <span class=\"hljs-string\">'sql_complexity_description'</span>,\n                     <span class=\"hljs-string\">'sql_task_type_description'</span>, <span class=\"hljs-string\">'sql_explanation'</span>, <span class=\"hljs-string\">'sql_task_type'</span>])\n\ndataset\n</code></pre>\n<pre><code class=\"hljs language-python\">DatasetDict({\n    train: Dataset({\n        features: [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'domain'</span>, <span class=\"hljs-string\">'sql_complexity'</span>, <span class=\"hljs-string\">'sql_prompt'</span>, <span class=\"hljs-string\">'sql_context'</span>, <span class=\"hljs-string\">'sql'</span>],\n        num_rows: <span class=\"hljs-number\">100000</span>\n    })\n    test: Dataset({\n        features: [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'domain'</span>, <span class=\"hljs-string\">'sql_complexity'</span>, <span class=\"hljs-string\">'sql_prompt'</span>, <span class=\"hljs-string\">'sql_context'</span>, <span class=\"hljs-string\">'sql'</span>],\n        num_rows: <span class=\"hljs-number\">5851</span>\n    })\n})\n</code></pre>\n<pre><code class=\"hljs language-python\">dataset[<span class=\"hljs-string\">'train'</span>][<span class=\"hljs-number\">0</span>]\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>데이터셋이 무엇인지 감을 잡기 위해 하나의 샘플을 살펴봅시다. 여기서 우리는 \"sql_context,\" \"sql_prompt,\" 그리고 \"sql\" 필드를 사용할 것입니다.</p>\n<ul>\n<li>sql_context: 테이블 생성 및 삽입 문장</li>\n<li>sql_prompt: 사용자 쿼리</li>\n<li>sql: 대상 쿼리</li>\n</ul>\n<p>(sql_context + sql_prompt)가 입력이 되고, (sql)이 대상 생성이 됩니다.</p>\n<pre><code class=\"hljs language-js\">{<span class=\"hljs-string\">'id'</span>: <span class=\"hljs-number\">5097</span>,\n <span class=\"hljs-string\">'domain'</span>: <span class=\"hljs-string\">'forestry'</span>,\n <span class=\"hljs-string\">'sql_complexity'</span>: <span class=\"hljs-string\">'single join'</span>,\n <span class=\"hljs-string\">'sql_prompt'</span>: <span class=\"hljs-string\">'각 영업사원이 판매한 총 목재 양을 영업사원별로 정렬하여 나타내시오.'</span>,\n <span class=\"hljs-string\">'sql_context'</span>: <span class=\"hljs-string\">\"CREATE TABLE salesperson (salesperson_id INT, name TEXT, region TEXT); INSERT INTO salesperson (salesperson_id, name, region) VALUES (1, 'John Doe', 'North'), (2, 'Jane Smith', 'South'); CREATE TABLE timber_sales (sales_id INT, salesperson_id INT, volume REAL, sale_date DATE); INSERT INTO timber_sales (sales_id, salesperson_id, volume, sale_date) VALUES (1, 1, 120, '2021-01-01'), (2, 1, 150, '2021-02-01'), (3, 2, 180, '2021-01-01');\"</span>,\n <span class=\"hljs-string\">'sql'</span>: <span class=\"hljs-string\">'SELECT salesperson_id, name, SUM(volume) as total_volume FROM timber_sales JOIN salesperson ON timber_sales.salesperson_id = salesperson.salesperson_id GROUP BY salesperson_id, name ORDER BY total_volume DESC;'</span>}\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<h2>정리를 해봅시다</h2>\n<p>이 데이터셋은 합성 데이터입니다. 유효하지 않은 문맥이나 SQL 쿼리를 가질 수 있습니다. 이러한 레코드를 찾아 제거해봅시다. 쓰레기를 넣으면 쓰레기가 나온다는 말이죠.</p>\n<p>다음 조건에 따라 유효한 데이터를 확인할 것입니다:</p>\n<ul>\n<li>SQL 문맥과 SQL 쿼리는 SQL Lite 데이터베이스에 유효해야 합니다.</li>\n<li>테이블은 샘플 레코드를 가져야 합니다.</li>\n<li>SQL 쿼리를 실행한 후에 결과를 얻을 수 있어야 합니다.</li>\n</ul>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> sqlite3\n\ndef <span class=\"hljs-title function_\">check_all_tables_have_values</span>(row, debug=<span class=\"hljs-title class_\">False</span>):\n\n    # 테이블에 레코드가 있어야 함\n    <span class=\"hljs-keyword\">if</span> row[<span class=\"hljs-string\">'sql_context'</span>].<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">'INSERT INTO'</span>) == -<span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">False</span>\n\n    <span class=\"hljs-attr\">try</span>:\n        db = sqlite3.<span class=\"hljs-title function_\">connect</span>(<span class=\"hljs-string\">\":memory:\"</span>)\n        cur = db.<span class=\"hljs-title function_\">cursor</span>()\n        cur.<span class=\"hljs-title function_\">executescript</span>(row[<span class=\"hljs-string\">'sql_context'</span>])\n        res = cur.<span class=\"hljs-title function_\">execute</span>(row[<span class=\"hljs-string\">'sql'</span>]).<span class=\"hljs-title function_\">fetchall</span>()\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-attr\">debug</span>: <span class=\"hljs-title function_\">print</span>(res)\n        # <span class=\"hljs-title function_\">print</span>(res, <span class=\"hljs-title function_\">len</span>(res))\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">len</span>(res) > <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-attr\">except</span>:\n        # <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">\"Error while run query\"</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">False</span>\n\ndataset = dataset.<span class=\"hljs-title function_\">filter</span>(lambda x : <span class=\"hljs-title function_\">check_all_tables_have_values</span>(x))\ndataset\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">DatasetDict</span>({\n    <span class=\"hljs-attr\">train</span>: <span class=\"hljs-title class_\">Dataset</span>({\n        <span class=\"hljs-attr\">features</span>: [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'domain'</span>, <span class=\"hljs-string\">'sql_complexity'</span>, <span class=\"hljs-string\">'sql_prompt'</span>, <span class=\"hljs-string\">'sql_context'</span>, <span class=\"hljs-string\">'sql'</span>],\n        <span class=\"hljs-attr\">num_rows</span>: <span class=\"hljs-number\">53478</span>\n    })\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Dataset</span>({\n        <span class=\"hljs-attr\">features</span>: [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'domain'</span>, <span class=\"hljs-string\">'sql_complexity'</span>, <span class=\"hljs-string\">'sql_prompt'</span>, <span class=\"hljs-string\">'sql_context'</span>, <span class=\"hljs-string\">'sql'</span>],\n        <span class=\"hljs-attr\">num_rows</span>: <span class=\"hljs-number\">3133</span>\n    })\n})\n</code></pre>\n<p>보시다시피 데이터의 약 46%가 제거되었습니다. 이것은 SQL Lite와 호환되지 않거나 데이터가 없을 수 있습니다.</p>\n<h2>하위 집합 만들기</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>그럼,이 초기 실험을 위한 데이터셋이 훨씬 큽니다. 이를 위해 그 중 일부를 만들어 보겠습니다.</p>\n<p>다음과 같이 14개 도메인과 3가지 SQL 복잡성 수준으로 데이터셋을 만들 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">SELECTED_SQL_COMPLEXITY</span> = [<span class=\"hljs-string\">'basic SQL'</span>, <span class=\"hljs-string\">'aggregation'</span>,<span class=\"hljs-string\">'single join'</span>]\n\n<span class=\"hljs-variable constant_\">SELECTED_DOMAINS</span> = [\n    <span class=\"hljs-string\">\"technology\"</span>, <span class=\"hljs-string\">\"sports\"</span>, <span class=\"hljs-string\">\"logistics\"</span>, <span class=\"hljs-string\">\"space\"</span>, <span class=\"hljs-string\">\"energy\"</span>,\n    <span class=\"hljs-string\">\"finance\"</span>, <span class=\"hljs-string\">\"agriculture\"</span>, <span class=\"hljs-string\">\"justice\"</span>, <span class=\"hljs-string\">\"retail\"</span>, <span class=\"hljs-string\">\"media\"</span>,\n    <span class=\"hljs-string\">\"education\"</span>, <span class=\"hljs-string\">\"healthcare\"</span>, <span class=\"hljs-string\">\"fashion\"</span>, <span class=\"hljs-string\">\"music\"</span>\n]\n\ndef <span class=\"hljs-title function_\">filter_by_sql_task_type_and_domains</span>(row):\n    <span class=\"hljs-keyword\">return</span> row[<span class=\"hljs-string\">'sql_complexity'</span>] <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable constant_\">SELECTED_SQL_COMPLEXITY</span> \\\n         and row[<span class=\"hljs-string\">'domain'</span>] <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable constant_\">SELECTED_DOMAINS</span>\n\ndataset = dataset.<span class=\"hljs-title function_\">filter</span>(lambda x : <span class=\"hljs-title function_\">filter_by_sql_task_type_and_domains</span>(x))\ndataset\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">DatasetDict</span>({\n    <span class=\"hljs-attr\">train</span>: <span class=\"hljs-title class_\">Dataset</span>({\n        <span class=\"hljs-attr\">features</span>: [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'domain'</span>, <span class=\"hljs-string\">'sql_complexity'</span>, <span class=\"hljs-string\">'sql_prompt'</span>, <span class=\"hljs-string\">'sql_context'</span>, <span class=\"hljs-string\">'sql'</span>],\n        <span class=\"hljs-attr\">num_rows</span>: <span class=\"hljs-number\">6713</span>\n    })\n    <span class=\"hljs-attr\">test</span>: <span class=\"hljs-title class_\">Dataset</span>({\n        <span class=\"hljs-attr\">features</span>: [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'domain'</span>, <span class=\"hljs-string\">'sql_complexity'</span>, <span class=\"hljs-string\">'sql_prompt'</span>, <span class=\"hljs-string\">'sql_context'</span>, <span class=\"hljs-string\">'sql'</span>],\n        <span class=\"hljs-attr\">num_rows</span>: <span class=\"hljs-number\">408</span>\n    })\n})\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<img src=\"/assets/img/2024-05-23-SupervisedfinetuningSFTofMicrosoftPhi2forText2SQLTaskPart1_3.png\">\n<p>여기에는 14개의 도메인 데이터셋이 있으며, 각 도메인은 훈련 데이터에 적어도 300개의 샘플이 있습니다. SQL 복잡성은 \"기본 SQL\"의 50%, \"단일 조인\"의 20%, 그리고 \"집계\"의 30%로 분포됩니다.</p>\n<h1>(계속, 파트 2로 이어집니다)</h1>\n<h1>결론</h1>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>이 문서에서는 SLM이 무엇인지 알아보고 fine-tuning을 통해 Text2SQL 작업을 어떻게 해결할 것인지에 대한 아이디어를 얻게 됩니다.</p>\n<p>데이터셋에 대해 작업을 진행했으며, 다음 (제2부) 글에서 실제 fine-tuning 프로세스를 수행할 것입니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}