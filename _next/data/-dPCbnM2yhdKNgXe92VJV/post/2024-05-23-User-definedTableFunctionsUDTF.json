{"pageProps":{"post":{"title":"사용자 정의 테이블 함수 UDTF","description":"","date":"2024-05-23 15:41","slug":"2024-05-23-User-definedTableFunctionsUDTF","content":"\n![이미지](/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png)\n\nSpark 3.5에서는 파이썬 사용자 정의 테이블 함수(UDTF)를 소개했습니다. 이것은 새로운 종류의 사용자 정의 함수입니다. 스칼라 함수는 각 호출에 대해 하나의 결과를 생성하는 반면, UDTF는 쿼리의 FROM 절 내에서 호출되며 전체 테이블을 출력합니다. UDTF 호출은 스칼라 식이나 완전한 입력 테이블을 나타내는 테이블 인수 중 어떤 것이든 사용할 수 있습니다.\n\n![이미지](/assets/img/2024-05-23-User-definedTableFunctionsUDTF_1.png)\n\n## 파이썬 UDTF 사용 이유\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n만약 다양한 행과 열을 생성하면서 파이썬의 다양한 생태계를 활용하고 싶다면, Python UDTF가 이상적입니다.\n\n## Python UDTF 대 Python UDF\n\nSpark의 Python UDF는 입력으로 스칼라 값s 중 0개 이상을 받아들이고 단일 값을 반환하는 것이 설계되어 있습니다. 그에 반해, UDTF는 여러 행과 열을 반환할 수 있어 UDF의 기능을 더 확장시킬 수 있어 더 유연합니다.\n\n## Python UDTF 대 SQL UDTF\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSQL UDTFs는 효율적이고 다재다능하지만, Python은 더 다양한 라이브러리와 도구를 제공합니다. 통계 함수나 머신 러닝 추론과 같이 고급 기술이 필요한 변환 또는 계산을 위해서는 Python UDTFs가 특히 유리합니다.\n\n# LangChain과 함께 사용하는 UDTF\n\n이전 예제는 기본적으로 보일 수 있지만, Python UDTFs를 LangChain과 통합하여 더 흥미로운 시나리오를 탐색해 봅시다.\n\n```js\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom pyspark.sql.functions import lit, udtf\n\n@udtf(returnType=\"keyword: string\")\nclass KeywordsGenerator:\n    \"\"\"\n    Generate a list of comma separated keywords about a topic using an LLM.\n    Output only the keywords.\n    \"\"\"\n    def __init__(self):\n        llm = OpenAI(model_name=\"gpt-4\", openai_api_key=<your-key>)\n        prompt = PromptTemplate(\n            input_variables=[\"topic\"],\n            template=\"generate a couple of comma separated keywords about {topic}. Output only the keywords.\"\n        )\n        self.chain = LLMChain(llm=llm, prompt=prompt)\n\n    def eval(self, topic: str):\n        response = self.chain.run(topic)\n        keywords = [keyword.strip() for keyword in response.split(\",\")]\n        for keyword in keywords:\n            yield (keyword, )\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n세부 정보:-\n\n즐거운 학습하세요 🙂 !!!!!!\n","ogImage":{"url":"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png"},"coverImage":"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_0.png\" alt=\"이미지\"></p>\n<p>Spark 3.5에서는 파이썬 사용자 정의 테이블 함수(UDTF)를 소개했습니다. 이것은 새로운 종류의 사용자 정의 함수입니다. 스칼라 함수는 각 호출에 대해 하나의 결과를 생성하는 반면, UDTF는 쿼리의 FROM 절 내에서 호출되며 전체 테이블을 출력합니다. UDTF 호출은 스칼라 식이나 완전한 입력 테이블을 나타내는 테이블 인수 중 어떤 것이든 사용할 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-23-User-definedTableFunctionsUDTF_1.png\" alt=\"이미지\"></p>\n<h2>파이썬 UDTF 사용 이유</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>만약 다양한 행과 열을 생성하면서 파이썬의 다양한 생태계를 활용하고 싶다면, Python UDTF가 이상적입니다.</p>\n<h2>Python UDTF 대 Python UDF</h2>\n<p>Spark의 Python UDF는 입력으로 스칼라 값s 중 0개 이상을 받아들이고 단일 값을 반환하는 것이 설계되어 있습니다. 그에 반해, UDTF는 여러 행과 열을 반환할 수 있어 UDF의 기능을 더 확장시킬 수 있어 더 유연합니다.</p>\n<h2>Python UDTF 대 SQL UDTF</h2>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>SQL UDTFs는 효율적이고 다재다능하지만, Python은 더 다양한 라이브러리와 도구를 제공합니다. 통계 함수나 머신 러닝 추론과 같이 고급 기술이 필요한 변환 또는 계산을 위해서는 Python UDTFs가 특히 유리합니다.</p>\n<h1>LangChain과 함께 사용하는 UDTF</h1>\n<p>이전 예제는 기본적으로 보일 수 있지만, Python UDTFs를 LangChain과 통합하여 더 흥미로운 시나리오를 탐색해 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">from</span> langchain.<span class=\"hljs-property\">chains</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">LLMChain</span>\n<span class=\"hljs-keyword\">from</span> langchain.<span class=\"hljs-property\">llms</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">OpenAI</span>\n<span class=\"hljs-keyword\">from</span> langchain.<span class=\"hljs-property\">prompts</span> <span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">PromptTemplate</span>\n<span class=\"hljs-keyword\">from</span> pyspark.<span class=\"hljs-property\">sql</span>.<span class=\"hljs-property\">functions</span> <span class=\"hljs-keyword\">import</span> lit, udtf\n\n@<span class=\"hljs-title function_\">udtf</span>(returnType=<span class=\"hljs-string\">\"keyword: string\"</span>)\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KeywordsGenerator</span>:\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    Generate a list of comma separated keywords about a topic using an LLM.\n    Output only the keywords.\n    \"</span><span class=\"hljs-string\">\"\"</span>\n    def <span class=\"hljs-title function_\">__init__</span>(self):\n        llm = <span class=\"hljs-title class_\">OpenAI</span>(model_name=<span class=\"hljs-string\">\"gpt-4\"</span>, openai_api_key=&#x3C;your-key>)\n        prompt = <span class=\"hljs-title class_\">PromptTemplate</span>(\n            input_variables=[<span class=\"hljs-string\">\"topic\"</span>],\n            template=<span class=\"hljs-string\">\"generate a couple of comma separated keywords about {topic}. Output only the keywords.\"</span>\n        )\n        self.<span class=\"hljs-property\">chain</span> = <span class=\"hljs-title class_\">LLMChain</span>(llm=llm, prompt=prompt)\n\n    def <span class=\"hljs-built_in\">eval</span>(self, <span class=\"hljs-attr\">topic</span>: str):\n        response = self.<span class=\"hljs-property\">chain</span>.<span class=\"hljs-title function_\">run</span>(topic)\n        keywords = [keyword.<span class=\"hljs-title function_\">strip</span>() <span class=\"hljs-keyword\">for</span> keyword <span class=\"hljs-keyword\">in</span> response.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">\",\"</span>)]\n        <span class=\"hljs-keyword\">for</span> keyword <span class=\"hljs-keyword\">in</span> <span class=\"hljs-attr\">keywords</span>:\n            <span class=\"hljs-keyword\">yield</span> (keyword, )\n</code></pre>\n<!-- ui-station 사각형 -->\n<p><ins class=\"adsbygoogle\" style=\"display:block\" data-ad-client=\"ca-pub-4877378276818686\" data-ad-slot=\"7249294152\" data-ad-format=\"auto\" data-full-width-responsive=\"true\"></ins></p>\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n<p>세부 정보:-</p>\n<p>즐거운 학습하세요 🙂 !!!!!!</p>\n</body>\n</html>\n"},"__N_SSG":true}