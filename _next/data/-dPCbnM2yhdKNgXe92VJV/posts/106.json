{"pageProps":{"posts":[{"title":"로봇에 모터 컨트롤러를 추가하는 방법","description":"","date":"2024-05-17 19:25","slug":"2024-05-17-HowToAddAMotorControllerToYourROSRobot","content":"\n로봇에 직접주행 및 오도메트리 기능을 부여하세요!\n\n![이미지](/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_0.png)\n\nROS/ROS2와 함께 사용할 모바일 로봇을 만들고 있다면, 먼저해야 할 일 중 하나는 모터 컨트롤러를 통합하는 것입니다. 모터 컨트롤러의 목적은 네비게이션 스택과 같은 상위 레벨 소프트웨어로부터 메시지를 수신하고, 이를 모터를 구동하는 신호로 변환하는 것입니다. 또한 모터의 인코더에서 정보를 받아 로봇의 속도와 위치를 계산할 수 있습니다. 추가로 배터리 전압이 변동하거나 지형이 다를 때에도 일관된 바퀴 제어를 얻을 수 있습니다. 흥미가 생겼나요? 전형적인 차이 드라이브 로봇을 위한 ROS 모터 컨트롤러를 만들기 위해 필요한 모든 것과 참고용으로 사용할 수 있는 작동하는 코드가 준비되어 있습니다!\n\n이 프로젝트의 전체 코드는 GitHub 레포지토리에 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n배경\n\n내가 전에 썼던 ROS가 유용한 이유, ROS가 하는 일, 그리고 물리적 로봇과 어떻게 통합되는지에 대한 개요에 대해 읽은 것으로 가정하겠습니다.\n\n나는 아두이노, Pi Pico 또는 Teensy와 같은 일반적인 마이크로컨트롤러에 어느 정도 익숙하다고 가정합니다. 이 경우 Teensy를 사용할 것이지만, 다양한 마이크로컨트롤러 유형에 걸쳐 개념은 거의 동일합니다.\n\n중요한 개념\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모터 컨트롤러의 역할은 전형적으로 /cmd_vel과 같은 주제에 Twist 유형의 메시지를 받는 것입니다. 이 메시지는 두 구성 요소로 이루어져 있습니다. 첫째, 미터/초로 분할된 원하는 선형 속도를 정의합니다. 두 번째로는 원하는 각속도인 라디안/초의 회전 속도를 포함합니다.\n\n예를 들어, 내비게이션 스택은 이 메시지를 보낼 수 있으며, 이 메시지는 로봇을 1m/s로 직진하면서 초당 0.1 라디안으로 회전하도록 모터 컨트롤러에 지시합니다. x 방향은 앞쪽으로, Z 방향은 지면과 직교한 상단 방향이고, y는 좌우입니다. 결과적으로 곡선 경로가 생성됩니다.\n\n```js\nlinear: x: 1.0;\ny: 0.0;\nz: 0.0;\nangular: x: 0.0;\ny: 0.0;\nz: 0.1;\n```\n\n평범한 미끄럼 방지 구동 방식의 로봇은 일반적으로 가로 이동하거나 직접 올라가는 능력이 없으므로 선형 구성 요소는 주로 x 값을 사용합니다. 마찬가지로, 이 유형의 대부분 로봇은 Z 축을 중심으로 명령된 각속도만 사용할 것입니다. 방향과 단위에 대한 ROS 규칙은 REP 103에서 찾을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것이 지나치게 복잡해 보일 수도 있어요. 메시지 유형이 로봇이 물리적으로 따를 수 없는 구성요소를 가지는 이유가 뭘까요? 메시지 유형은 여러 유형의 로봇에서 사용될 것이기 때문이에요. 홀로노믹 드라이브 로봇은 옆으로 이동해서 미끄러짐 없이 움직일 수 있어요. 쿼드콥터 로봇은 회전하지 않고 동시에 위, 옆, 앞으로 움직일 수 있어요. 이 메시지 유형은 다양한 종류의 로봇에서 사용할 수 있도록 설계되었어요.\n\n각도 구성요소를 신경 써야 하는 이유가 뭘까요? 나중에 이것이 정말 유용해질 거에요. 직선으로 운전 중에 조금씩 벗어나기 시작할 경우에 코스 수정을 쉽게 보낼 수 있어요. 제자리에서 회전 명령을 쉽게 보낼 수 있어요. 우리가 아래에서 볼 때, 수학도 쉬워질 거에요.\n\n그래서 모터 컨트롤러는 cmd_vel에서 특정 선형 및 각속도 혼합을 주문받고, 그것이 모터 속도로 어떤 의미인지 계산해야 해요. 여기가 멋진 곳이에요. 곧 수학으로 돌아올게요 - 무서워하지 마세요. 먼저, 모터 속도를 정확히 제어하는 법에 대해 이야기해야 해요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n간단한 로봇을 만들었다면, 아마도 DC 모터의 속도를 제어할 수 있다는 개념에 익숙할 것입니다. 전압을 펄스로 제어함으로써 DC 모터의 속도를 조절할 수 있다는 아이디어에 편안해지셨을 겁니다. 전압이 켜져 있는 비율이 높을수록 모터는 최고 속도까지 빨리 회전합니다. 이를 펄스 폭 변조(Pulse Width Modulation)이라고 하며, 단순한 로봇에서도 동작하지만 문제가 있습니다. 가장 큰 문제는 모터 속도가 배터리 전압에 따라 변경된다는 것입니다. 모터가 회전하는 속도는 적용된 전압의 함수이므로 배터리가 방전될수록, 주어진 속도를 유지하기 위해 더 높은 켜는 시간 비율이 필요합니다. 또 다른 문제는 주어진 전압에 대해 한 모터가 조금이라도 다른 모터보다 빨리 회전한다면 어떻게 될까요? 양쪽에 동일한 비율을 보낸다면 로봇은 곡선 형태로 이동합니다. 또한 지형에 의해 바퀴 중 하나가 부분적으로 막혀 있다면 특정 바퀴 속도를 달성하는 데 더 많은 전력이 필요합니다. 일정한 속도를 명령하고 실제로 그 속도를 얻고 싶다면 휠로부터 피드백을 받아야 합니다. 우리는 폐쇄 루프 시스템이 필요합니다.\n\n운전 모터의 경우, 통합 자기 엔코더가 있는 모터를 사용하고 싶습니다. 홀 센서는 모터 축에있는 자석이 센서를 지날 때마다 펄스를 생성하는 데 사용됩니다. 이 펄스를 마이크로컨트롤러로 보내어 카운트하고 실제 바퀴 속도를 계산합니다. (이를 위해 기어 비율 및 기타 몇 가지 세부 정보가 필요합니다 — 나중에 자세히 살펴보겠습니다)\n\n아래 이미지에서 각 모터의 뒤쪽에 엔코더가 달려 있는 것을 볼 수 있습니다.\n\n![image](/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그래서 이제 마이크로컨트롤러는 PWM 펄스폭을 변화시킴으로써 모터의 속도를 제어하고, 샤프트의 실제 속도를 읽을 수 있게 되었습니다. 이는 배터리 전압, 지형, 또는 로봇의 왼쪽 구동 바퀴에 감겨있는 골든 리트리버 털과는 독립적으로 작동합니다. 우리는 이제 폐쇄 루프를 가지고 있으며 이제 어디론가 가고 있습니다. 그래서.. 우리가 원하는 바퀴 속도를 어떻게 얻을까요?\n\nPID 제어\n\n그것이 PID 제어 루프의 역할입니다. PID 루프는 다른 사람들에 의해 더 잘 이해되고 다뤄진 기사들에서 충분히 다루어졌기 때문에, 여기서는 다시 다루지 않겠습니다. 좋은 소개는 여기에 있고, 모터 제어에 좀 더 특화된 것은 여기에 있습니다. Youtube에도 좋은 비디오들이 있습니다. PID에 대해 배운 내용을 로봇에 매핑하는 방법을 요약하면 다음과 같습니다. 각 모터마다 한 개의 루프가 필요합니다. 인코더는 펄스 형태로 피드백을 제공하며, 이를 사용하여 바퀴 RPM을 계산합니다. 설정점은 선속도와 각속도에서 계산된 바퀴 속도입니다 (곧 설명될 것). 출력은 주로 0에서 255까지 변할 수 있는 펄스폭의 백분율입니다. 몇 초에 한 번씩 PID 루프는 설정점을 실제 바퀴 속도와 비교하고, 모터의 PWM 출력을 조정하여 배터리 전압, 부하 또는 다른 변수와 관계없이 목표치에 유지합니다. 이에는 나중에 다룰 튜닝 프로세스가 필요하며, 기사의 나중 부분에서도 이에 대해 논의할 것입니다. 지금은 바퀴 속도가 어떻게 계산되는지로 넘어갑시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n모터 컨트롤러는 로봇이 주어진 선속도와 각속도로 동시에 이동하도록 요청받은 메시지를 받았어요. 바퀴가 해야 할 일을 어떻게 계산하는 걸까요?\n\n여기 수학적 설명이 잘 나와 있어요. 거기서 이를 배웠어요. 이제 Twist 메시지가 선속도와 각속도를 따로 분리하는 이유가 분명해질 거예요.\n\n먼저 선속도부터 시작해봅시다. 그것은 상당히 쉬워요. 우리는 특정 바퀴의 속도를 PID 컨트롤러를 사용하여 정확하게 설정하는 방법을 알아요. 직선 운동에서 두 바퀴는 같은 속도로 회전해야 하므로, 우리는 단순히 우리가 원하는 전진 속도를 만들어내기 위한 그 바퀴 속도가 무엇인지 계산하고 두 바퀴 모두 그 속도로 설정하면 되요. 주요 구동 바퀴의 반경을 알아야 하는데, 그것으로부터 바퀴 둘레를 계산할 수 있어요. 그것이 바퀴 한 바퀴 회전마다 로봇이 이동하는 거리를 의미하죠. 그 후, 구동 바퀴의 기어 비율과 바퀴 당 엔코더 틱 수를 알아야 해요. 그럼 필요한 모터 속도를 계산할 충분한 정보가 생기게 되요.\n\n각속도를 계산하는 수학은 약간 복잡해요. 두 바퀴의 속도 차이를 도입해 로봇이 올바른 속도로 회전하도록 해야 해요. 우리는 바퀴베이스를 알아야 하는데, 이는 드라이브 바퀴 사이의 거리를 말해요. 처음에 내가 처음에 한 것처럼 각 바퀴의 안쪽 가장자리부터 측정하지 마세요. 회전 속도에 상당한 오차가 발생할 거에요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 코드가 모이게 됩니다:\n\n변수 data.linear.x는 요청된 속도의 x 구성 요소이고, data.angular.z는 로봇의 요청된 회전입니다. ROS 메시지가 이렇게 속도를 분리하여 제공하면 희망하는 바퀴 속도를 계산하기가 매우 간단해집니다. right_rpm과 left_rpm 변수는 각 모터에 대한 PID 루프의 세트 포인트입니다. 이것은 원하는 동작을 생성하기 위해 필요합니다.\n\n오도메트리 계산\n\n모터 속도를 올바르게 설정하는 것 외에도 모터 컨트롤러는 로봇의 위치와 방향을 데드 레커닝을 통해 추정해야 합니다. 로봇이 어디에 있고 어느 방향을 향해 있는지 추적하기 위해 모든 이동, 각도 및 선형 이동을 합산합니다. 완벽한 것은 아닙니다 — 바퀴 슬립과 누적 오차로 인해 오랜 시간과 거리에 걸쳐 부정확해지지만, 매우 유용한 도구입니다. 짧은 거리에서는 꽤 정확하며, SLAM 또는 GPS와 같은 다른 위치 결정 도구와 결합하면 개선된 전체 추정치를 얻을 수 있습니다. 위치의 다른 측정치를 결합하여 전반적인 위치 추정치를 더 정확하게 얻는 과정은 센서 퓨전의 예시이며, 일반적으로 칼만 필터를 통해 수행됩니다. 그렇다면 위치를 어떻게 계산할까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n수학 부분이 잘 다루어졌네요. 저는 Andrew Kramer의 예제 코드를 수정하여 계산한 후, 결과로부터 odometry 메시지를 채웠어요.\n\n내 로봇에서, 원래의 마이크로프로세서가 자원이 매우 부족했기 때문에, 나는 PID 루프를 마이크로컨트롤러에서만 실행하고 Raspberry Pi에서 Python 모터 컨트롤러 노드에서 odometry 계산을 수행하기로 선택했어요. 아래 코드 스니펫은 그 작동 방식을 보여줍니다.\n\nPython 노드는 원하는 바퀴 회전 속도를 마이크로컨트롤러로 보내요. 마이크로컨트롤러는 각 모터의 실제 인코더 틱 수를 매 초 20회 응답해요. 아래의 l_tick_cb() 함수는 Python 스크립트에서, 좌측 모터 인코더 틱 수가 수신될 때마다 작동하는 함수에요. 우측 모터의 콜백은 이 코드 스니펫에서 제외되었어요.\n\n실제 모터 틱 수가 수신될 때마다, 마지막 업데이트 이후에 주어진 쪽이 얼마나 이동했는지 계산되고, 로봇의 새로운 위치 추정 값이 계산돼요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n변수 theta는 로봇이 시작 방향에 대해 회전한 각도에 대한 현재 추정치입니다. 오도미트리 메시지를 완전히 채우려면 더 많은 정보가 필요합니다. 이 코드는 현재 속도를 계산하고 공분산 및 변환 필드를 채웁니다. 변환에 대해 자세한 내용은 다른 글에서 다루겠지만, 지금 당장 알아두실 점은 이 메시지에 대해 \"odom\" 및 \"base_link\" 자식 프레임으로 설정하는 것이 좋다는 것입니다. 이는 ROS 표준을 준수합니다. 곧 이에 대해 기사를 쓸 예정이지만, REP 105 및 최고 TF 설명은 이해를 시작하기에 좋은 자리입니다.\n\n오도멧리 변환은 쿼터니언으로 브로드캐스트됩니다. 함수를 사용하여 엔코더 값 (theta)으로부터 쿼터니언을 생성하며, 롤/피치는 우리의 미분 구동 로봇에 대해 제로로 가정됩니다. 이 코드는 해당 토론에서 가져온 것입니다.\n\n공분산은 주어진 측정치에 대한 예상 오차를 보고하는 메커니즘이며, 칼만 필터와 같은 센서 융합 중에 사용됩니다. 주어진 설정에 대한 계산 방법을 아직 이해하지 못하므로, 작은 미분 구동 로봇에 대해 찾은 전형적인 값들을 사용했습니다. 여기 개선할 수 있는 부분이 많이 있습니다.\n\n이 코드는 Github 리포지토리에서 마이크로컨트롤러에서 실행됩니다. 이 코드는 왼쪽 및 오른쪽 바퀴 RPM을 설정값으로 받아들이고, 모터를 펄스 폭 변조 (PWM)를 통해 제어하는 PID 루프를 실행합니다. 또한 각 바퀴의 사이클 동안 카운트된 엔코더 틱 수를 보고하여 코드 상에서 실제 바퀴 회전수를 계산합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n어떤 하드웨어가 있는지 궁금하신가요?\n\n여기 메인 구성 요소를 보여주는 블록 다이어그램이 있습니다.\n\n![하드웨어 블록 다이어그램](/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_2.png)\n\n보시다시피 Teensy는 모터 드라이버 모듈로 PWM 듀티 사이클을 출력하여 원하는 속도로 모터를 구동합니다. 모터 엔코더로부터 ticks를 받아 실제 속도를 계산하고 제어 루프를 닫습니다. 이들은 모터 PID 루프의 피드백입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 컨트롤러에서는 rosserial_arduino를 사용하여 원하는 바퀴 RPM 주제에 대해 구독하고 odometry/velocity 계산을 위해 각 바퀴의 실제 틱을 게시합니다.\n\n내 컨트롤러는 전압 분배기를 통해 팩 전압을 측정하고 전류 센서의 출력을 사용합니다.\n\n출력을 선택할 때는 모터 드라이버에 대해 PWM 출력을 사용해야 하며 엔코더 입력에 대해 일반 디지털 핀을 사용해야 합니다. Teensy에 대한 차트를 아래에서 볼 수 있습니다 — 다른 마이크로컨트롤러에 대한 유사한 차트도 있습니다.\n\n![Teensy 차트](/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPWM 출력은 모터 드라이버의 4개 입력으로 보내집니다. 내 로봇은 저전류 모터를 사용하므로 이와 같은 저렴한 LM298 듀얼 H-브리지 드라이버를 선택했습니다. 다양한 유형의 모터를 구동하는 다양한 보드가 많이 있습니다. 브러시리스 모터는 다른 유형의 컨트롤러를 사용하지만 많은 모터가 PWM 입력을 사용합니다. LM298 사용 방법에 대한 좋은 안내서가 여기 있습니다.\n\n![로봇의 전자 부품 덱](/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_4.png)\n\n여기에는 로봇의 전자 부품 덱이 있습니다. 라즈베리 파이 4 위에 앉은 쉴드 PCB에 Teensy가 보입니다.\n\n![로봇의 전자 부품 덱](/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_5.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n마이크로컨트롤러 선택\n\n처음에는 Arduino Uno용으로 이 코드를 작성했었는데, 주로 RAM이 부족해지는 문제가 발생했습니다. rosserial_arduino에는 보다 강력한 마이크로컨트롤러가 강력히 권장됩니다. 이 컨트롤러의 다음 버전은 ROS2용 Pi Pico를 사용하여 micro-ros로 만들 것입니다. 원칙적으로 이 코드는 rosserial_arduino에서 지원하는 모든 프로세서 상에서 작은 수정만으로도 실행되어야 합니다.\n\nTeensy 버전은 매우 잘 실행되었고, 현재 모든 프로젝트를 ROS2로 마이그레이션 중이며, Pico가 더 저렴합니다. 작동이 준비된 경우 해당에 대해 기사를 게시할 예정입니다.\n\nPID 튜닝\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPID 루프를 조정해야 하는데, 이는 이 글의 범위를 벗어납니다. 웹 검색을 통해 표준 접근 방식을 찾을 수 있습니다. 마이크로컨트롤러 코드에는 ROS 주제 에코 명령을 통해 조정 가능한 P, I 및 D 값을 구독자로 활성화하는 모드가 포함되어 있습니다. 이는 rqt_graph를 사용하여 명령된 rpm 대 실제 rpm을 그래프로 표시하면 튜닝 속도가 크게 향상됩니다.\n\n결론\n\n이 글이 실제 작동 예제를 제시하고 모든 자원을 한 곳에 모아서 작성한 것에 도움이 되었기를 바라며, 여러분의 프로젝트에 유용한 출발점이 되었으면 좋겠습니다. 개선할 점이 있다면 알려주시고, 여러분에게 가치 있었다면 알려주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 프로젝트의 코드는 주로 저의 것이지만, 일부는 다른 소스들을 참고하거나 수정한 것입니다.\n","ogImage":{"url":"/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_0.png"},"coverImage":"/assets/img/2024-05-17-HowToAddAMotorControllerToYourROSRobot_0.png","tag":["Tech"],"readingTime":12},{"title":"최종 - 서보 모터로 조종되는 미로","description":"","date":"2024-05-17 19:23","slug":"2024-05-17-FinalServoMotorcontrolledLabyrinth","content":"\n제 마지막 프로젝트에서는 게임을 만들고 싶었어요. 멀리 찾아보던 중에 이 튜토리얼을 발견했어요. 이 링크를 통해 프로젝트를 가이드받았지만, 최종적으로는 제가 독자적으로 만들었어요.\n\n가장 먼저 한 일은 부품을 잘라내는 것이었어요. 프로젝트에 페인트를 칠하고 더 일관된 모양을 주고 싶었기 때문에 먼저 페인트를 칠하기로 결정했어요. 원래는 이 부품들을 3D 프린팅하고 싶었지만, 시간이 부족했기 때문에 다른 대신 판지 캔버스 재료로 이러한 부품을 자르기로 했어요. 자르는 일이 정말 지루했어요.\n\n다음 단계는 많은 사고와 부품 이동이 필요했어요. 먼저 기본 부품을 묶어 붙인 다음, 더 잘 맞도록 부품을 잘라내고 다시 붙이면서 모든 부품을 함께 조립했어요.\n\n다음 단계는 하드웨어를 조립하는 것이었어요. 원래는 Instructables에서 배선을 따랐지만, 전혀 운이 없었고 발표 날이 다가오고 있었어요. 아주 흔들거리는 전후 운동만 하는 것이었죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n발표 날에 Danne Woo 교수님께서 도와주셔서 전선을 고쳐주셔서 정말 감사했어요. 그리고 코드도 수정해야 했어요.\n\n집에 도착하니 프로젝트가 대부분 부서져 있었어요. 다시 조립해야 했고 뜨거운 접착제만으로는 부족했어요.\n\n이 구조물에 강도를 높일 방법을 고안하려고 노력했어요. 수업 중 교수님께서 측면에 추가 지지대를 권장했지만 전 아이디어를 내지 못했어요. 아빠가 바닥에 바인더 클립을 추가하는 것을 권유했고, 그것이 천재적인 아이디어인 줄 알았어요. 뜨거운 접착제가 실제로 달라붙을 수 있는 텍스처를 제공하고 벽이 스스로 서 있을 수 있도록 해주었어요.\n\n<img src=\"/assets/img/2024-05-17-FinalServoMotorcontrolledLabyrinth_0.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n구조를 수정한 후 Arduino를 연결했을 때 똑같이 잘못된 위치에서 시작해서 조이스틱이 왼쪽으로 돌아가지 않는 문제들이 계속 발생했어요. 먼저 제가 한 일은 제한을 제거하는 것이었어요. 조이스틱이 잘못 연결된 것 같아 시리얼 모니터를 확인했지만 제대로 작동 중이었어요. 실제 문제를 해결한 것은 모터를 분리하고 45도로 돌리고 다시 연결한 후에 이전처럼 이동할 수 있었던 것이 해결책이었어요.\n\n```js\n#include <Servo.h>\nServo myServoX;\nServo myServoY;\nint ServoXPin = 8;\nint ServoYPin = 9;\nint ServoXHomePos = 190; //작은\nint ServoYHomePos = 50; //큰\nint ServoXPos = 190; //작은\nint ServoYPos = 50; //큰\nint XAxlePin = A0; //A0\nint YAxlePin = A1; //A1\nint XAxleValue = 0;\nint YAxleValue = 0;\nint Direction = 0;\nint range = 12; // X나 Y 이동 범위\nint center = range/2; // 휴식 위치 값\nint threshold = range/2; // 휴식 임계값\nvoid setup()\n{\nmyServoX.attach(ServoXPin);\nmyServoY.attach(ServoYPin);\nmyServoX.write(ServoXPos);\nmyServoY.write(ServoYPos);\nSerial.begin(9600);\n}\nvoid loop() {\n    XAxleValue = readAxis(XAxlePin);\n    YAxleValue = readAxis(YAxlePin);\n\n    Serial.print(\"X: \");\n    Serial.print(XAxleValue);\n    Serial.print(\" - Y: \");\n    Serial.println(YAxleValue);\n\n    int XSpeed = map(abs(XAxleValue), 0, range, 5, 1);\n    int YSpeed = map(abs(YAxleValue), 0, range, 5, 1);\n\n    if (XAxleValue > 0) {\n        ServoXPos++;\n        myServoX.write(ServoXPos);\n        delay(XSpeed * (7 - XAxleValue));\n    } else if (XAxleValue < 0) {\n        ServoXPos--;\n        myServoX.write(ServoXPos);\n        delay(XSpeed * (7 + XAxleValue));\n    }\n\n    if (YAxleValue > 0) {\n        ServoYPos++;\n        myServoY.write(ServoYPos);\n        delay(YSpeed * (7 - YAxleValue));\n    } else if (YAxleValue < 0) {\n        ServoYPos--;\n        myServoY.write(ServoYPos);\n        delay(YSpeed * (7 + YAxleValue));\n    }\n\n    delay(10);\n}\nint readAxis(int thisAxis) {\n// 아날로그 입력을 읽음:\nint reading = analogRead(thisAxis);\n// 아날로그 입력 범위에서 출력 범위로 매핑:\nreading = map(reading, 0, 1023, 0, range);\n// 출력 읽기가 휴식 위치 임계값을 벗어나면 사용:\nint distance = reading - center;\nif (abs(distance) < threshold) {\ndistance = 0;\n}\n// 이 축의 거리를 반환:\nreturn distance;\n}\n```\n\n<img src=\"/assets/img/2024-05-17-FinalServoMotorcontrolledLabyrinth_1.png\" />\n\n최종 제품에 대해 매우 만족합니다. 즐기고 새로 사용한 부품들과 그에 딸려 온 함수들을 실험할 수 있었어요. 미래에는 이 수업에서 배운 모든 기술을 계속 활용하고 발전시키는 것을 좋아할 거예요. 배선, 코딩, 아날로그 입력, 납땜 같은 기술을 많이 배웠고, 이런 것들에 항상 관심이 있었어요. 너무 겁먹고 시도해보지 못했을 거예요. 그런데 이 수업을 듣고 나니 이런 것들과 작업할 수 있는 능력이 있는 것을 깨달았어요.\n","ogImage":{"url":"/assets/img/2024-05-17-FinalServoMotorcontrolledLabyrinth_0.png"},"coverImage":"/assets/img/2024-05-17-FinalServoMotorcontrolledLabyrinth_0.png","tag":["Tech"],"readingTime":4},{"title":"3D 프린팅 장기 이식 의학의 게임 체인저","description":"","date":"2024-05-17 19:21","slug":"2024-05-17-3DPrintingOrgansAGame-ChangerinTransplantMedicine","content":"\n![Image](/assets/img/2024-05-17-3DPrintingOrgansAGame-ChangerinTransplantMedicine_0.png)\n\n# 이식 의학에서의 게임 체인저:\n\n의료 혁신의 영역에서, 3D 프린팅 기술은 장기 이식을 혁신할 수있는 잠재력을 가진 획기적인 도구로 등장했습니다. 최첨단 소재와 생물공학 기술을 활용하여, 연구자들은 3D 프린팅 장기의 개발을 선도하며, 생명을 구하는 이식이 필요한 환자들에게 새로운 희망을 제공합니다. 인공 심장이나 콩팥, 피부 이식, 뼈 이식 등 3D 프린팅 장기는 장기 부족, 호환성 문제 및 긴 대기 시간과 같은 중요한 과제를 해결하여 이식 의학에서 게임 체인저 역할을 합니다.\n\n# 3D 프린팅 장기 이해하기:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 3D 프린팅은 추가 제조라고도 불리는 기술로, 디지털 모델이나 청사진으로부터 층층히 쌓아 올려 세 가지 차원 객체를 만드는 과정입니다. 장기 이식의 관점에서 3D 프린팅 기술을 활용하면 생체 잉크, 생체 재료 및 생체 세포를 사용하여 복잡한 생물학적 구조물을 제작할 수 있습니다.\n\n# 전형적인 과정은 다음과 같습니다:\n\n# 영상 획득:\n\n의료 영상 기술인 컴퓨터 단층 촬영(CT) 스캔 또는 자기 공명 영상(MRI)을 사용하여 환자의 해부학적인 세부 영상을 캡처하여 해당 장기의 디지털 모델을 만드는 기초를 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 디자인 및 모델링:\n\n전문 소프트웨어를 사용하여 연구자들은 장기 구조를 설계하고 모델링하며 크기, 모양, 기능 등과 같은 요소를 고려합니다. 이 디지털 모델은 3D 프린팅 과정의 청사진으로 사용됩니다.\n\n# 프린팅:\n\n3D 프린터는 생체 재료, 바이오잉크 및 생체 세포의 층을 디지털 모델에 따라 점진적으로 쌓아가면서 장기 구조를 층층히 빌드업합니다. 장기의 복잡성 및 사용된 재료에 따라 압출 방식 프린팅, 스테레오리소그래피 또는 잉크젯 프린팅과 같은 다양한 3D 프린팅 기술을 사용할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 후속 처리:\n\n인쇄 후, 3D 프린팅된 장기는 건조, 교차링크, 치유 또는 세포 배양과 같은 추가 처리 단계를 거칠 수 있습니다. 이는 장기의 구조적 무결성, 기능성 및 수령자의 몸과의 호환성을 향상시킵니다.\n\n# 3D 프린팅 장기의 장점:\n\n3D 프린팅 장기는 전통적인 장기 이식 방법보다 여러 가지 이점을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n**맞춤 제작:** 3D 프린팅 기술은 개별 환자의 특정 요구 사항과 해부학적 특성에 맞춘 장기를 제작할 수 있어, 거부 반응의 위험을 감소시키고 이식 결과를 향상시킵니다.\n\n## 대기 시간 단축:\n\n전통적인 장기 이식에서 환자들은 호환되는 기증자 장기를 기다리는 데 오랜 대기 시간을 겪어 지연과 사망률이 증가하는 경우가 많습니다. 3D 프린팅 장기는 환자별 장기의 온디맨드 제작을 제공함으로써 대기 시간을 단축할 수 있는 가능성을 제공합니다. 기증장기에 의존을 줄이고 부족을 완화합니다.\n\n## 복잡성과 기능성:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3D 프린팅 기술을 사용하면 혈관, 신경 및 실제로 혈관, 신경 및 고함유 기능과 복잡한 조직 구조를 제작할 수 있습니다. 이러한 정확성과 맞춤화 수준은 3D 프린팅된 장기의 기능과 성능을 향상시키며 수련자의 몸과 더 호환되도록 만들어 장기 이식 후 장기 운용을 개선합니다.\n\n## 윤리적 고려사항:\n\n기증 장기에 대한 의존을 줄이고 이식 장기에 대한 수요를 완화함으로써 3D 프린팅 기술을 통해 윤리적 문제인 장기 밀매, 착취 및 이식 서비스 접근에 대한 불평등 문제를 해결할 수 있는 가능성이 있습니다.\n\n## 응용 및 향후 방향:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3D 프린팅 기술을 적용한 장기는 심장병학, 비뇨기과, 정형외과, 재건성 수술을 비롯한 다양한 의료 분야에 걸쳐 확대되고 있습니다. 연구자들은 심장병, 신부전, 골결함, 피부 손상과 같은 질환을 치료하는 데 3D 프린트된 장기의 잠재력을 적극적으로 탐구하고 있습니다.\n\n장기 이식뿐만 아니라 3D 프린팅 기술은 조직 공학, 재생 의학, 약물 시험 응용 분야에도 확대될 전망이 있습니다. 연구자들은 생체 잉크와 생체 재료를 개발하여 그것이 자연 조직과 장기의 특성을 모방할 수 있도록 하여 연구 및 임상 응용을 위한 기능적 조직 조형체와 장기모양체의 제작이 가능하게 합니다.\n\n전망을 보면 3D 프린팅 장기의 미래는 엄청난 약속을 가지고 있으며, 계속되는 연구와 혁신이 이 분야의 발전을 주도할 것입니다. 기술이 진보하고 제조 기술이 진화함에 따라 3D 프린트된 장기의 확장성, 가용성, 접근성이 향상되고, 장기 이식이 환자들에게 더 안전하고 효율적이며 보다 널리 이용 가능한 미래에 한 걸음 더 다가갈 것으로 기대됩니다.\n","ogImage":{"url":"/assets/img/2024-05-17-3DPrintingOrgansAGame-ChangerinTransplantMedicine_0.png"},"coverImage":"/assets/img/2024-05-17-3DPrintingOrgansAGame-ChangerinTransplantMedicine_0.png","tag":["Tech"],"readingTime":4},{"title":"Google Cloud IoT Core에서 설정 및 상태","description":"","date":"2024-05-17 19:20","slug":"2024-05-17-ConfigurationandStateinGoogleCloudIoTCore","content":"\n## IoT 코어에서 온라인 및 오프라인 장치 사용 방법\n\n![Configuration and State in Google Cloud IoT Core](/assets/img/2024-05-17-ConfigurationandStateinGoogleCloudIoTCore_0.png)\n\nGoogle Cloud IoT Core 서비스가 중단되어 파트너 기업들로 이전되고 있습니다. 자세한 정보는 여기서 확인하세요. 이 기사는 뉴스가 전해지자마자 발표 예정이었습니다. 저는 잠깐 동안 서랍에 보관해두다가 결국 이를 공개적으로 공유하기로 결정했습니다. 이는 아직도 IoT 코어 호환 서비스에 구글 파트너 솔루션을 구현하는 사람들에게 유용할 수 있습니다.\n\n# 디지털 트윈 및 \"그림자\"에 대해\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIoT 장치는 종종 클라우드의 가상 표현을 통해 작동됩니다. 해당 가상화된 장치와 함께 작업하는 주요 이유는 다음과 같습니다:\n\n- 시뮬레이션 및 백테스팅을 실행하여 동작을 예측하거나 모델을 검증합니다.\n- 장치의 마지막 알려진 상태에 액세스하거나 명령을 실행하거나 상태를 변경합니다. 가능한 빨리 요청합니다.\n\n위에 나열된 첫 번째 경우는 일반적으로 \"디지털 트윈\"이라고 알려져 있습니다. 장치나 플리트에서 상태 및 텔레메트리 데이터의 이력을 저장하고, 나중에 이 데이터를 사용하여 예측 모델을 구축하거나 다양한 운영 조건 하에서 가능한 결과를 시뮬레이션할 수 있게 합니다. 위키피디아에 따르면:\n\n두 번째로 매우 흔한 경우는 AWS가 \"장치 섀도우\"라고 참조하는 것입니다: 연결 상태와 관계없이 원격 장치와 완전한 읽기-쓰기 모드로 상호 작용할 수 있는 안정적인 방법입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nIoT 장치가 오프라인 상태가 되는 다양한 이유가 있습니다: 현재 위치에서 휴대전화 또는 Wi-Fi 네트워크 범위가 좋지 않을 수 있으며, 배터리가 방전될 수 있고, 사용자가 전원을 껐다 켤 수 있으며, 네트워크에 문제가 발생할 수 있습니다...\n따라서 비즈니스 연속성을 보장하고 사용자 경험을 원할하게 만들기 위해 중요한 것은 클라우드에서 최신 장치 상태 데이터를 읽을 수 있는 기능과 온라인 상태로 돌아오면 전달되는 \"메시지를 남기는\" 기능을 확보하는 것입니다.\n\n첫 번째 사용 사례(\"디지털 트윈\")는 논의가 더 길어질 수 있으므로 본 문서의 범위는 매우 일상적인 \"장치 그림자\" 사용으로 한정됩니다: 장치에서 원활한 작업을 보장하는 것입니다.\n\n# Google Cloud IoT Core의 \"그림자\"와 \"트윈\"\n\nIoT Core는 명시적인 \"그림자\" 또는 \"디지털 트윈\" 기능을 제공하지 않지만, 장치의 상태 및 구성 관리의 내장된 기능을 통해 그들의 경량 버전을 제공합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 상태\n\nIoT 코어에 연결된 기기들은 현재 상태를 보고할 것으로 예상됩니다.\n공식 문서에는 다음과 같이 설명되어 있습니다:\n\n클라우드에서 기기의 상태를 업데이트하려면, 기기는 MQTT 브릿지 또는 HTTP 브릿지를 통해 상태를 발행해야 합니다. 상태는 다음과 같을 것입니다:\n\n- 가로채지고 자동으로 제한된 히스토리 저장소에 저장됩니다 (현재 시점에서는 장치당 최근 10개의 상태가 유지됩니다), 이 저장소는 API 또는 SDK를 통해 액세스할 수 있습니다.\n- 게시된 내용이 목적지 주제의 구독자에게 Pub/Sub을 통해 전달될 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n장치 상태의 오랜 기록을 유지할 필요가 없다면 내장된 상태 저장소를 사용해보세요. 실제 프로젝트에서는 좀 더 긴 기록을 저장하기를 권장합니다. 그것은 가치 있는 정보입니다. 대규모로 이 데이터를 분석하고, 고객 지원팀에 귀중한 통찰을 제공할 수 있습니다.\n\n## 구성\n\n구성은 클라우드에 저장되며 다음과 같습니다:\n\n- MQTT를 통해 IoT Core에 연결된 장치에 빠르게 전송됩니다.\n- IoT Core에 연결하는 장치에게 MQTT를 통해 전달됩니다 (장치가 올바른 주제에 가입했는지 확인; 새 구성이 설정되지 않았다면, 최신 기존 버전이 매번 전송됩니다).\n- IoT Core HTTP API를 통해 가져올 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n클라우드는 또한 구성의 어떤 버전이 기기에 실제로 전달되었는지, 생성 및 전달 시간을 추적합니다. 아직 전달되지 않은 구성은 \"null\" 전달 타임스탬프가 있습니다.\n\n전달된 구성이 반드시 적용된 구성은 아닙니다. 그래서 기기들은 항상 상태를 클라우드로 푸시해야 합니다.\n\n상태에 관해서는, 10개의 최신 구성 버전이 유지됩니다.\n\n## 상태와 구성 비교\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n구성이 적용되었는지 확인하려면 기기가 상태에 대한 구성 객체의 동일한 키의 실제 값을보고해야합니다. 그래서 다시 Virtual Smart Plug 데모 프로젝트로 돌아가보겠습니다:\n\n- Smart Plug의 상태는 다음과 같습니다: ' \"switch\": \"off\" '\n- 새 구성이 전송됩니다: ' \"switch\": \"on\" '\n- 구성이 성공적으로 적용되었다면, Smart Plug은 새로운 상태를 보고해야합니다: ' \"switch\": \"on\" '\n\n매우 간단한 기기의 경우 구성 및 상태에 동일한 \"스키마\"를 사용할 수 있습니다.\n\n실제 프로젝트에서 상태에는 일반적으로 기기의 구성뿐만 아니라 더 많은 정보가 포함됩니다. 스마트 플러그는 상당히 간단한 기기이지만, 구성이 스위치의 간단한 켜기/끄기 상태에 대한 것일 수 있지만, 상태에는 일반적으로 장치 클라이언트 응용 프로그램 (모바일 앱 또는 스마트 홈 대시 보드)에서 표시하는 현재 사용 중인 전력과 같은 정보도 포함됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGoogle은 Configuration과 State에 동일한 JSON 스키마를 사용하도록 권장합니다. 실제로 기기 대시보드에서 상태를 선택하고 상태 페이로드 끝에 있는 Revert 버튼을 누르면 해당 상태가 Configuration으로 기기로 다시 전송됩니다.\n\n가상 스마트 플러그에서 이를 시도해 봅시다.\n목록에서 상태를 선택하고 Revert 버튼을 누릅니다:\n\n![image](/assets/img/2024-05-17-ConfigurationandStateinGoogleCloudIoTCore_1.png)\n\nConfiguration & State 대시보드의 목록은 다음과 같이 변경됩니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Configuration Overview](/assets/img/2024-05-17-ConfigurationandStateinGoogleCloudIoTCore_2.png)\n\n새로운 \"대기 중\" 구성이 작성되었고 장치로 전달되기를 기다리고 있습니다.\n\n만약 장치 시뮬레이터가 실행 중이라면 (또는 다음에 시작할 때) 다음 출력을 볼 수 있습니다:\n\n![Configuration State](/assets/img/2024-05-17-ConfigurationandStateinGoogleCloudIoTCore_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n변경된 Configuration 및 State가 그에 맞게 업데이트됩니다:\n\n![Configuration and State](/assets/img/2024-05-17-ConfigurationandStateinGoogleCloudIoTCore_4.png)\n\n만약 State에 대한 계층적인 형식으로 JSON과 같은 형식을 사용한다면, 보고된 Configuration은 State의 하위 노드에 게시될 수 있습니다. 이로써 Configuration JSON을 State의 하위 JSON 노드와 쉽게 1:1로 비교할 수 있게 됩니다 (내장 대시보드 도구에는 해당하지 않음). Configuration과 State는 텍스트로 저장 및 전달되지만, 텍스트로 직렬화될 수 있는 어떤 형식이라도 사용할 수 있습니다.\nPayload 크기에 Configuration 및 State는 모두 64KB의 제한이 있으므로, 실제 정보에 대한 일부 바이트를 저장하기 위해 복잡한 마크업 및 닫히는 태그가 포함된 형식은 추천하지 않습니다.\nGoogle은 자체 문서에서 Configuration 및 State에 JSON을 사용합니다.\n\n# 명령(Command) vs. 구성(Configuration)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nGoogle Cloud IoT Core은 MQTT를 사용하여 장치로 명령을 보낼 수도 있습니다.\n처음에는 조금 혼란스러울 수 있습니다. 명령과 구성 사이의 차이가 뭘까요?\n\n저는 디자인 선택을 할 때 이 간단한 프레임워크를 사용합니다:\n\n- 즉시 실행이 필요한 단기 작업은 명령입니다.\n  자판기용 실물, 디지털 결제 장치를 생각해보세요: 거래를 빨리 처리해야 합니다. 서버에 연결할 수 없을 때는 그냥 오류를 반환해야 합니다. 거래를 연기하면 의도하지 않은 결과로 이어질 수 있습니다. 사용자는 판매가 취소된 것으로 생각하고 그냥 떠날 수도 있습니다.\n- 장치 상태나 동작에 대한 장기적인 변경은 구성입니다.\n  우물에 설치된 스마트 전구를 상상해보세요: 루틴은 저녁에 불을 켜고(~6pm) 취침 전에 꺼야 합니다(~10pm). 6pm부터 6.15pm 사이에 네트워크에 연결할 수 없더라도 저녁에 불이 켜지길 원할 것이고, 약간의 지연을 감내할 수도 있습니다.\n\n명령과 구성 사이에는 약간의 기술적 차이가 있습니다. 이는 공식 Google 문서에서 가장 잘 설명됩니다.\n또한, HTTP 연결을 사용하는 장치는 명령을 수신할 수 없습니다(그들은 구성을 풀 모드로 요청할 수는 있습니다).\n","ogImage":{"url":"/assets/img/2024-05-17-ConfigurationandStateinGoogleCloudIoTCore_0.png"},"coverImage":"/assets/img/2024-05-17-ConfigurationandStateinGoogleCloudIoTCore_0.png","tag":["Tech"],"readingTime":8},{"title":"나는 아름다운 기술들과 함께 내 하루를 보내요","description":"","date":"2024-05-17 19:19","slug":"2024-05-17-Imakemydaywithbeautifultechnologies","content":"\n놀라운 기술로 모양잡힌 하루를 상상해보세요. 설렘이 가득한 곳에 혁신이 모든 순간을 건드립니다.\n\n해가 뜨면 세상은 일상 생활 속에서 완벽하게 어우러지는 기술로 깨어납니다.\n\n![image](/assets/img/2024-05-17-Imakemydaywithbeautifultechnologies_0.png)\n\n조용한 아침에 전기를 탄생시킨 뛰어난 두뇌 니콜라 테슬라를 떠올립니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n제가 원하는 대로 알고 있는 스마트 머신이 완벽하게 내려먹은 커피를 마시며, 나는 내 부엌에 있는 전구들에 대해 감사를 표합니다. 이는 테슬라의 영감을 받은 것입니다.\n\n일부러 지루한 출근길은 이제 즐거움으로 바뀌었습니다. 앨런 투링의 초기 인공 지능 연구에서 영감을 받은 자율 주행 자동차들이 거리를 부드럽게 지나갑니다.\n\n내 차는 내 캘린더와 동기화되어 최적의 경로를 선택하고, 내가 즐길만한 팟캐스트까지 추천해줍니다.\n\n![Image](/assets/img/2024-05-17-Imakemydaywithbeautifultechnologies_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사무실에서 기술은 알렉산더 그레이엄 벨이 상상하지 못했을 정도로 창의성과 팀워크를 촉진합니다.\n\n실시간 번역 기능을 갖춘 비디오 통화는 전 세계의 팀을 연결합니다.\n\n가상 비서는 회의 일정을 잡고, 알림을 설정하며 유용한 정보를 제공하여 벨의 비전을 현실로 만들어줍니다.\n\n![Image](/assets/img/2024-05-17-Imakemydaywithbeautifultechnologies_2.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n점심 시간은 내 스마트 주방 덕분에 즐거운 시간이에요. 인공지능이 선정한 레시피는 내 영양 요구와 취향을 딱 맞춰줘요.\n\n식사를 즐기면서 헤디 라마르를 떠올리게 돼요. 그녀의 무선 기술 연구 덕분에 내 스마트 기기를 사용할 수 있게 된 거지요.\n\n오후에는 공원 산책을 하면서 자연과 기술이 어우러지는 모습을 볼 수 있어요.\n\n태양광으로 작동하는 벤치에서 기기를 충전하고, 상호작용하는 키오스크에서 지역 식물과 동물 정보를 공유하는 것도 재미있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Grace Hopper](/assets/img/2024-05-17-Imakemydaywithbeautifultejsonlogies_3.png)\n\nGrace Hopper, 컴퓨터 프로그래밍의 선구자로서 데이터가 얼마나 접근하기 쉽고 매력적인지 좋아하셨을 것입니다.\n\n하루가 저물면, 가상 현실 전시회를 방문합니다.\n\n고대 로마로 옮겨져 폐허 사이를 걸으며 역사가 살아나는 것을 보게 됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 기술은 컴퓨터 그래픽 분야에서 이반 서덜랜드의 초기 작업을 기반으로하며 나의 시야를 넓히고 감각을 사로잡습니다.\n\n저녁이면 스마트 홈 시스템이 조명과 온도를 조절하여 아늑한 분위기를 연출해줍니다.\n\n전자책으로 책을 읽으면서 디지털 잉크의 편리함으로 눈에 부담을 덜어주는 쾌적한 시간을 보내게 되었습니다.\n\n이러한 원활한 기술 통합은 인터넷 창조자부터 고급 알고리즘 개발자에 이르기까지 여러 혁신가들을 위한 예방으로 이루어집니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n기술이 얼마나 깊게 뿌리를 내리고 있는지 알 수 있어요. 위대한 과학자들의 영감을 받은 기술은 우리 삶 안에 얽혀들어 있어요.\n\n각 상호 작용과 편리함은 그들의 유산을 존중해요. 기능적인 하루가 아니라 진정으로 아름다운 하루를 만들어내죠.\n\n![이미지](/assets/img/2024-05-17-Imakemydaywithbeautifultechnologies_4.png)\n","ogImage":{"url":"/assets/img/2024-05-17-Imakemydaywithbeautifultechnologies_0.png"},"coverImage":"/assets/img/2024-05-17-Imakemydaywithbeautifultechnologies_0.png","tag":["Tech"],"readingTime":4},{"title":"블록체인을 활용한 스마트 차량 IoV 보안 소개","description":"","date":"2024-05-17 19:16","slug":"2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN","content":"\n<img src=\"/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_0.png\" />\n\n요약 - 연결된 디바이스로부터 데이터를 수집하여 센서, 액추에이터, RFID 등을 사용하여 강력한 네트워크를 통해 자동차를 지능적으로 만들기 위한 (경험을 통해 학습) 블록체인은 이러한 안전하지만 무결하지 않을 수 있는 네트워크를 만드는 단일 솔루션으로, 보안을 높이는데 그치지 않고 동시에 블록체인은 탈중앙화되어 사용자에게 원활한 경험을 제공할 것임을 기반으로 한다. 또한, 실생활 문제들이 많이 있어야 한다(인지 이동성, 낮은 지연 시간, 큰 대역폭의 필요). 따라서 우리는 데이터 마이닝, apriori 알고리즘, 의사 결정, 컴퓨터 비전, 데이터 수집 및 경로 프로토콜을 사용하여 차량 간 통신을 간편하게 관리한다. 사물 인터넷의 인지 아이디어는 교통 관리를 모니터링, 저장 및 분석하고 충돌 경고와 더 나은 내비게이션을 제공하는데 극히 중요하다. 또한 격차 해소를 위한 양방향 통신의 간단한 구현과 자율 주행에 대한 미래 범위가 제안된다.\n\n## 연구 목적\n\n전기 자동차의 필요성\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n1. 우리제품은 배기가스를 배출하지 않아요 = 천식, 폐암, 폐포획증\n\n2. 자연자원 저감 없어요\n\n3. 연소되지 않은 화석연료는 지구온난화 야기\n\n4. 가격이 더 저렴해요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n5. 엔진 없음 소음 없음\n\n![image](/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_1.png)\n\n# 소개\n\n인구 증가 속도가 급격히 증가함에 따라 한정된 자원을 최대로 활용해야 하는 필요성이 매우 중요해졌습니다. 미래의 고갈을 줄이기 위해 충분한 유용한 공급품을 갖춘 좋은 연결 환경, 그리고 실시간 데이터를 모니터링하여 삶의 질을 향상시키는 것을 스마트 도시의 개념이라고 합니다. 나중에 발생할 문제를 이해하는 데 많은 도움이 될 스마트 도시의 기능을 강조하기 전에 나아가기 전에 좋은 아이디어가 될 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n요즘 EV가 블록체인 보안 없이 얼마나 안전한지에 대해 고민해 봅시다.\n\n도로에서 무단자가 제동을 제어하려고 하거나 의도적으로 사고를 일으키려 할 때 어떤 가능성이 발생할 수 있는지 상상해 보세요. 또한, 운전자, 승객, 차량 모델 및 동시에 그 e-차량의 구동 부품 상태에 대한 모든 기록을 저장하고 있는 데이터베이스가 있다면, 네트워크 상태가 약하다면 모든 데이터가 잘못된 손에 빠질 수 있습니다. 위장자는 클라우드에 악성 소프트웨어를 주입하고 남용할 수 있습니다. 이러한 경우 해커를 감지하고 식별하는 것은 거의 불가능한 일이 됩니다. 해커가 미리 시스템에 저장된 데이터를 변경하여 데이터 침해 활동에서 보이지 않도록 만든 경우 마찬가지입니다. 51% 공격은 중요한 데이터를 삭제하거나 변경하여 이중 소비를 유발할 수 있습니다.\n\n자동차와 관련된 스마트 시티의 특징\n\nI. 최신 및 시간을 절약하는 교통 시스템입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nII. 신뢰할 수 있는 분산 원장.\n\nIII. 자동 모니터링 시스템.\n\n이제 궁금증이 생깁니다. 어떻게 우리가 필요한 모든 세부 정보를 포함한 P2P 네트워크를 구축할 수 있을까요? 다행히도 블록체인이 우리를 구해줍니다.\n\n## 블록 + 체인 기술\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n중요한 점은 최종 사용자에게 충실성을 제공하는 제삼자 액세스를 제거하는 것입니다. 그 이름에서 알 수 있듯이, 이는 통신을 위해 연결된 개인 정보로 포함된 다양한 수의 블록으로 이루어진 데이터베이스입니다. 이 연결은 미토콘드리아에 있는 ATP(아데노신 삼인산)와 마찬가지로 저장 목적으로 사용됩니다.\n\n이러한 블록들이 서로 어떻게 연결되어 있는지, 어떻게 통신하고 있으며, 특정 블록에 액세스하기 전에 고려해야 할 속성 및 규칙에 대해 알아보겠습니다.\n\n저장된 모든 데이터와 정보는 디지턈 형태로 되어 있으며(이제 시스템의 관리자는 중요한 세부 정보에 변경을 할 수 없는) 불변입니다.\n\n특징들:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 변경할 수 없음\n- 되돌릴 수 없음\n- 타임 스탬프가 찍힘\n- 합의 과정\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 작업 증명\n\n해커들을 위해 만들어진 해시 함수와 해시 코드로 완전히 보호된 공급망으로 데이터 침범이 불가능합니다.\n\n## 해시 함수 사용의 장점\n\n해시 함수는 충돌 없이 올바른 매핑을 통해 해시 테이블을 통해 새로운 길이가 더 작은 문자(버킷)을 생성하는 데 도움을 줍니다. 키-값 쌍은 파이썬의 딕셔너리 개념과 마찬가지로 사용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 유형\n\n- **나눗셈 방식** h(K) = k mod M\n\n- **중간 제곱 방식** h(K) = h (k x k)\n\n- **접기 방식** h(K) = s\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 우리는 다양한 유형의 해시 함수에 대해 배웠으니 DTL'S라고 알려진 하이테크 보안 원장 시스템의 요구를 충족하는 일부 알고리즘을 살펴 보겠습니다.\n\n먼저, SHA-256 알고리즘\n\nSHA-1의 정제된 형태(중요한 속성을 상속함). 특별한 알고리즘이 필요한 이유와 왜 우리가 접근을 제한하여 이 보안 문제를 회피하지 않는지 궁금할 수 있습니다. 답은 질문 그 자체에 있습니다. 블록체인을 사용하여 데이터베이스를 유지하면 해커에게 혼란과 지연을 초래하는 결과로 코드가 변경됩니다.\n\n누군가가 디지털 화폐 형태(예: 비트코인, 리트코인, 이더리움)로 자금을 이체하고 싶을 때, 그는 애플리케이션을 믿으며 해당 애플리케이션의 소유자가 변경되지 않은 서비스를 제공하는 책임이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n두 가지 다른 당사자 간의 목적을 위한 계약을 체결하는 것과 유사한 상황입니다.\n\n![이미지1](/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_2.png)\n\n참고용 Merkle 트리\n\n![이미지2](/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 거래 구조\n\nXYZ Private Limited 회사에 자금을 이체하려고 한다고 가정해봅시다. 블록체인 기술은 전체 프로세스 동안 모든 측면의 기록을 유지하여 어떤 수단으로도 변경할 수 없게 합니다. 이 기록은 관리자가 'n'번의 요청에 따른 남용을 방지합니다.\n\n영구적인 기록은 시스템이 데이터 침해를 만날 때 빠른 시간 내에 생성됩니다. 그렇다면 해당 사용자는 이전에 존재하는 데이터에 수정을 가하면서 해당 블록에 대해 10분의 계산을 수행해야 합니다. 그 블록에 대해 새로운 해시 코드가 생성될 것입니다.\n\n여기서 합의 프로세스의 사용이 필요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Introducing Smart Vehicle Security with Blockchain](/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_4.png)\n\nIf client B wants to add some information into the block, then the system will generate an automatic vote poll which is completely unbiased. Client A has to agree upon the modification scheme, then only client B can make any changes in the data otherwise the request will be rejected.\n\nNowadays, cryptocurrencies are growing like never before.\n\n## Why is security so crucial in the automobile industry?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\na) 연결성을 높이는 것\n\nb) 데이터 취약성으로부터 안전\n\n한 예로 ARGUS CYBER SECURITY가 있습니다\n\n## 관련 작업\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- IOTA Tangle은 자신들의 원장이 블록체인의 탈중앙화된 원장보다 강력하고 빠르다고 주장했지만 2017년에 382만 달러의 도난 사건이 발생하여 MIOTA(IOTA)의 완전한 실패로 이어졌습니다.\n\n- Argus 보안\n\n- Movable type 스크립트(웹사이트)\n\n- SPIC-C는 사설 주차장을 위해 설계된 시스템 중 하나입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 2019년 6월 이후로, 미시건 공과대학교의 디지털 통화 이니셔티브는 40여 건 이상의 51% 공격을 감지하거나 관찰하였으며 알려졌습니다.\n\n- 2018년 CES에서 라스베이거스에서 닛산의 브레인 투 차량 기술을 소개했습니다.\n\n# 프로젝트는 네 가지 기본 기둥을 기반으로 합니다:\n\n1. EEG를 통한 웨어러블 및 무선 감지 기술\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n2. 운전자의 움직임을 감지하는 데이터 분석\n\n3. 운전자와 차량 간의 공유 제어 절차\n\n4. 시뮬레이션을 기반으로 한 통합 시스템 및 테스트\n\n## 어떤 알고리즘을 사용해야 할까요? (해결책)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# APRIORI 알고리즘\n\n두 개의 매개변수인 지지도(Support)와 신뢰도(Confidence) 사이에 연관 규칙을 설정하는 데 사용됩니다. 이 관계는 임계 값이 충족되어야만 수용되며 그렇지 않으면 거부되거나 후속 연관에 고려되지 않을 수 있습니다. 마지막으로는 아래쪽 폐쇄 속성을 사용하여 규칙이 생성됩니다.\n\n## 가상 상황\n\n학교로 향하는 도중 길에 흩어진 쓰레기통이나 자전거 타이어를 찔 수 있는 날카로운 가장자리를 가진 유리 조각 등이 몸에 영향을 주기 전까지 보이지 않을 수 있습니다. 이러한 상황 모두에서 공통점은 다양한 위험 상황에 노출될 가능성이 매우 높다는 것입니다. 누군가는 차량의 방향을 변경해서 피하면 된다고 생각할 수 있지만 실제로 그렇지 않습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n판단 능력을 지수적으로 향상시켜야 합니다. 시간 내 주변 상황을 미리 예측하는 능력은 실제로 생명을 구할 수 있는 응답 시간을 포함합니다.\n\n알고리즘은 기계에 무엇을 입력할지와 무엇을 입력하지 말아야 하는지 결정하는 데 우리를 도와줄 것입니다. 기계 학습과의 동등한 협력을 통해 인간 뇌처럼 생각하는 방식을 훈련시킬 것입니다. 이것은 도전적인 과제일 것입니다.\n\n뇌-컴퓨터 인터페이스(BCI) = 침범적, 부분적 침범적, 비침범적 연구는 상당히 유익한 결과를 보여줍니다.\n\n기계의 주요 단점은 고장과 실수에 매우 취약하다는 점입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n큰 양의 훈련된 데이터가 필요합니다.\n\n## 방법론\n\n컴퓨터 비전 사용\n\n컴퓨터 비전이 블록체인과 손을 잡아 중요한 역할을 하는 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n텍스타일 산업: 천연 원료를 인공적으로 가공하여 완제품으로 만드는 농업 기반 산업이에요. 천의 품질, 옷이 제공하는 안전 수준, 식품 산업 등이 중요한 요소에요.\n\n![image](/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_5.png)\n\n## 참고 자료\n\n- [Nissan brain to vehicle technology](https://www.bitbrain.com/blog/nissan-brain-to-vehicle-technology)\n- [IOTA](https://www.iota.org/)\n- [Argus Security](https://argus-sec.com/)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\"내게 말해주면 나는 잊어버리고, 가르쳐주면 기억할 수도 있지만, 함께 참여시켜주면 나는 배운다.\" - 벤자민 프랭클린\n\n의견이 있으면 언제든 환영합니다.\n","ogImage":{"url":"/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_0.png"},"coverImage":"/assets/img/2024-05-17-INTRODUCTIONTOSMARTVEHICLEINTERNETOFVEHICLESECURITYWITHBLOCKCHAIN_0.png","tag":["Tech"],"readingTime":12},{"title":"초보자를 위한 해킹 개방된 포트 악용하기","description":"","date":"2024-05-17 19:14","slug":"2024-05-17-HackingforBeginnersExploitingOpenPorts","content":"\n![Image](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_0.png)\n\n지난 번에는 몇 가지 스크립트와 열린 RTSP 포트를 사용하여 사무실 카메라에 들어가는 간단한 실행을 따라했다. 이번에는 새롭게 배운 지식을 기반으로 Hack the Box의 기계 중 하나의 열린 포트를 악용해 보기로 했다.\n\n지난 글에서는 내 해킹 지식이 매우 제한되었음을 다루었고, 이 글들의 목적은 비전문가가 윤리적 해킹에 접근할 때 어떻게 발전하는지를 관객들에게 보여주기 위한 것이다. 현재로서는 '스크립트 키디' 범주에 속하는데, 이는 자신의 해킹을 작성하는 기술 지식이 없어서 다른 사람들에게 의존하는 사람을 빗대는 사이버 보안 커뮤니티의 경멸적인 용어다. 그러므로 이것이라고 말하며 내 안쪽 스크립트 키디를 받아들이고 해킹에 대해 잘하지 못한 이유에 대해 말을 낭비하지 않겠다.\n\n해커 후드를 다시 뒤집어 씁시다. 시작해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n### Step 1: Network Scan\n\nFirst things first, as every good hack begins, we run an NMAP scan:\n\n![NMAP Scan](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_1.png)\n\nYou’ll notice that I’m using the `-v`, `-A`, and `-sV` commands to scan the given IP address. NMAP and NSE have hundreds of commands you can use to scan an IP, but I’ve chosen these commands for specific reasons; to increase verbosity, to enable OS and version detection, and to probe open ports for service information.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이는 3개의 오픈 포트를 반환합니다. 그 중 2개는 열린 것으로 예상됩니다(80과 443), 세 번째는 SSH인 포트 22입니다. 이것은 분명 열려 있으면 안 됩니다.\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_2.png)\n\n단계 2: 무차별 대입 시도\n\n그래서, 다음 단계는 포트 22으로 무차별 대입하여 접근하는 것입니다. 무차별 대입은 해커(나!)가 스크립트를 사용하여 사용자 이름과 비밀번호의 조합을 시도하여 올바르게 추측하여 접근 권한을 얻을 때까지 기기나 시스템에 접근하는 과정입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이전에 설명했던 것처럼 Kali Linux에는 OS에 내장된 해킹 도구 모음이 있습니다. 이 도구 중 하나가 Metasploit인데, 이는 취약점 데이터베이스를 보유하고 있어 쉽게 쿼리하여 디바이스/시스템에 해당하는 사용 사례를 확인할 수 있는 툴입니다. 그래서 한 번 시도해 봅시다.\n\n'SSH'를 검색하면 Metasploit이 71가지 잠재적인 취약점을 반환합니다. 그 중 하나는 ssh_login 보조 도구인데, 제 경우에는 몇 가지 기본 자격 증명을 사용하여 로그인을 시도하기 위해 몇 개의 스크립트를 로드하는 데 사용할 것입니다.\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_3.png)\n\n이 명령은 취약점을 실행하기 전에 완료해야 하는 모든 변수를 반환합니다. 이는 Metasploit을 통해로드 된 모든 취약점에서 동일하게 적용됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_4.png)\n\n그래서 무차별 공격을 실행하기 위해 필요한 변수를 식별한 후, 실행했습니다:\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_5.png)\n\n스크립트 무차별 공격 추측을 30분 동안 실행한 후 성공을 거두지 못했습니다. 아무것도 얻어지지 않았네요. 그럼 다시 처음부터 시작할게요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nStep 3: 서버에 액세스하는 방법\n\nNMAP 스캔에서 알 수 있듯이 열린 포트의 포트 버전을 스캔했습니다. 다음 열린 포트는 포트 80이며, 이미 서버와 웹사이트 버전을 알고 있습니다. 이어서 할 일은 찾은 버전을 기반으로 관련 exploit을 검색하는 것인데, 먼저 exploit을 실행하려는 대신 어떻게 서버에 백엔드에서 액세스할 지 확인하려고 합니다.\n\nCurl은 사용자 상호작용 없이 작동하도록 설계된 서버와 데이터를 전송하는 커맨드 라인 유틸리티입니다. 따라서 클라이언트 URL 커맨드 'curl'을 사용하고, 헤드라인을 표시하기 위해 -I 옵션을 사용하여 사용합니다:\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_6.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재 단계에서 해당 기계의 백엔드 서버를 'office.paper'라는 것으로 확인할 수 있습니다. 이를 브라우저를 통해 액세스하려면 도메인을 신뢰할 수 있는 호스트 목록에 추가해야 합니다. 따라서 다음으로 '/etc/hosts'에 위치한 호스트 파일로 이동하여 '10.10.11.143 office.paper'를 신뢰할 수 있는 호스트 목록에 추가합니다:\n\n![이미지](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_7.png)\n\n이제 기본 정보 이상을 표시하는 웹사이트에 액세스할 수 있습니다. 다음 단계는 흥미로운 정보를 모으는 방법을 찾는 것이니, 가치가 있을만한 내용을 찾아보도록 합시다.\n\n단계 4: WordPress 취약점 Exploiting\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nNMAP 스캔 초기 결과를 통해 도메인 버전이 확인되었고 (WordPress 5.2.3), 잠재적으로 이용할 수 있는 취약점을 찾기 위해 일부 조사를 진행합니다. Kali Linux에는 쉽게 사용 가능한 도구인 Metasploit과 Searchsploit 등이 있습니다. 그러나 나 자신을 위해 모든 것을 간단하게 유지하기 위해 구글을 사용할 것입니다.\n\n당연히 해당 버전의 WordPress에 사용할 수 있는 잠재적인 취약점 목록이 있습니다. 그러나 'office.paper' 웹 페이지에는 몇 가지 포럼을 제외하고는 흥미로운 내용이 없어보입니다. 따라서 이러한 잠재적인 취약점 중 WordPress 서비스 버전에 해당하는 것은 CVE-2019–17671입니다. 이 취약점은 WP_Query 내의 문제로 관련되어 있어 인증되지 않은 사용자가 개인 또는 초안 게시물을 볼 수 있게 합니다. 이 취약점을 이용하려면 도메인 이름 뒤에 'static=1'을 추가하여 다음과 같이 작성하면 됩니다:\n\nhttp://office.paper/?static=1\n\n이제 WordPress의 비공개 페이지에 액세스할 수 있었습니다. 이 시점에서 우리가 실제 시스템을 공격하는 것이 아니라는 것을 상기하는 것이 중요합니다. 즉, 이 해킹은 교육 목적을 위해 가상 머신에서 수행되는 것이지 시스템을 실제로 마비시키기 위한 것이 아닙니다. 그러나 이를 달성하기 위해 취한 조치는 실제 해킹이 발생할 수 있는 방식을 잘 대변하고 있습니다. 이제 Hackerman으로서 계속 진행합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n단계 5: 엿보기\n\n물론, '엿보기'는 내가 하려고 하는 것에 대한 기술적 용어가 아닙니다. 그러나 나는 기술적인 사람이 아니기 때문에 '엿보기'를 내 기술적 용어로 사용할 것입니다. 해킹의 이 시점에서, 내가 본질적으로 하려는 것은 다음 단계를 실행할 수 있도록 가능한 많은 정보를 수집하는 것입니다. 운이 좋게도, Hack the Box가 이를 상대적으로 간단하게 만들었습니다.\n\n숨겨진 페이지로 이동했을 때, '사무실.paper'의 내부 직원을 위한 '비밀 등록 URL'이 있는 것을 쉽게 볼 수 있습니다. 그래서 나는 앞으로 나아가서 직원 사이트로 URL을 통해 이동하려고 노력합니다. 그러나 작동하지 않습니다. 페이지에서 호스트가 신뢰할 수 없다고 알려주기 때문에, 이 단계에서 내가 접근하려는 도메인에 호스트 권한을 부여해야 한다는 것을 기억합니다. 아래에서 보여드리겠습니다:\n\n<img src=\"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_8.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용자 이름 및 비밀번호 정보를 수집하여 SSH를 통해 로그인할 수 있도록 하는 것이 이 해킹의 목적입니다. 따라서 모든 컴퓨터에서 일반적인 위치에 파일을 요청합니다:\n\nChat robot get file ../../../../etc/passwd\n\n6단계: SSH 로그인 실행\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이제 SSH를 통해 로그인하려는 자격 증명을 수집했으므로 해킹을 실행할 수 있습니다.\n\n![Hacking Image 9](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_9.png)\n\n사진에 나와 있듯이, 나는 이제 Dwight의 기계 안에 있습니다. 이 시점에서 'ls' 명령을 사용하여 사용자가 현재 갖고 있는 비표시 파일 목록을 볼 수 있습니다. 이렇게 하면 외부로서 접근할 수 없어야 하는 파일을 볼 수 있게 됩니다. Office.paper - 해킹당했어요:\n\n![Hacking Image 10](/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_10.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위에서 볼 수 있었던 것처럼 - 두 번째 해킹 성공 이네요! 다시 말하지만, 이것은 해킹에 대한 매우 낮은 수준의 접근 방식이므로 숙련된 보안 연구원/펜 테스터에게는 흥미로운 이야기가 아닐 수 있습니다. 그러나 나는 실질적인 진전이 이루어지고 있음을 분명히 알 수 있다고 생각하므로, 내 기술이 향상되면 이 기사들의 품질도 향상될 것이라고 희망합니다!\n\nIotabl에서 해커들과 보안 연구원들로 이뤄진 커뮤니티가 비즈니스의 선두에 있습니다. 저희는 산업을 더 포용적이고 접근 가능하며 협력적으로 만드는 플랫폼을 구축하고 있습니다. 윤리적 해커, 보안 연구원 또는 IoT 취미 전문가라면 www.iotabl.com에서 플랫폼의 조기 액세스를 신청하고 https://discord.gg/GAB6kKNrNM 에 가입하여 우리의 커뮤니티에 참여해보세요!\n","ogImage":{"url":"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_0.png"},"coverImage":"/assets/img/2024-05-17-HackingforBeginnersExploitingOpenPorts_0.png","tag":["Tech"],"readingTime":9},{"title":"오픈AI ChatGPT API를 SQL에서 사용하는 방법","description":"","date":"2024-05-17 19:12","slug":"2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL","content":"\n<img src=\"/assets/img/2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL_0.png\" />\n\n챗GPT 및 OpenAI API를 사용할 때 SQL이 먼저 떠오르지는 않겠지만, 데이터의 언어이기 때문에 SQL을 활용할 수 있다는 사실을 명심해야 합니다. SQL에서 HTTP 요청을 보낼 수 있다는 점은 다양한 가능성을 열어 줍니다.\n\n오늘의 글에서는 PL/SQL을 사용하여 사용자 지정 Oracle SQL 함수를 작성하는 방법을 보여 드리겠습니다. 질문 문자열을 입력으로 받아서 형식화된 JSON을 반환합니다. Oracle의 dbms_cloud 패키지가 API 호출을 수행하는 데 주로 사용되며, 다른 데이터베이스 공급업체를 사용하는 경우 해당 작업을 수행할 수 있는 대체 패키지 및 함수 세트를 찾을 수 있을 것입니다.\n\n따라서, 먼저 함께 따라 해야 할 전제 조건에 대해 설명하겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# ChatGPT in SQL — 필수 사항\n\n소개에서 언급했듯이, 저는 오라클 클라우드에서 프로비저닝된 항상 무료 인스턴스에서 실행되는 Oracle SQL을 사용하고 있습니다. 만약 따라하기를 원한다면 무료 계정을 등록하고 데이터베이스 인스턴스를 프로비저닝하고 연결 지갑을 다운로드해야 합니다.\n\n또한 필요한 것은 OpenAI API 키입니다. 링크된 기사를 통해 몇 분 안에 얻는 방법을 알 수 있습니다.\n\n그게 거의 다에요! 이제 본격적으로 시작해 봅시다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# OpenAI API — 대화 완성 엔드포인트 테스트\n\nSQL에서 구현할 대화 완성 예제는 매우 간단합니다. OpenAI의 공식 문서에서는 API에 요청하는 방법을 보여줍니다:\n\n![image](/assets/img/2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL_1.png)\n\nSQL에서는 Python과 같이 OpenAI를 위한 서드파티 라이브러리가 없기 때문에 좀 더 수동적인 방법을 선택해야 합니다. 이론적으로는 — 위의 curl 명령을 실행하고 응답을 받는다면 SQL에서도 동일한 작업을 수행할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것을 시연하는 가장 쉬운 방법은 Postman을 통해 하는 것입니다. https://api.openai.com/v1/chat/completions에 새로운 POST 요청의 헤더와 JSON 본문을 채우고, 나와 비슷한 응답을 받을 수 있습니다:\n\n![이미지](/assets/img/2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL_2.png)\n\n가장 인상적인 GPT 응답은 아닙니다만, 동작은 합니다. 이제 SQL로 가져와 봅시다.\n\n# SQL에서 ChatGPT 사용하기 — 사용자 지정 PL/SQL 함수에서 OpenAI API 사용 방법\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nPL/SQL을 사용하면 사용자 정의 함수를 정의할 수 있습니다. get_gpt_response() 함수는 문자열 질문을 받아 CLOB를 반환합니다. CLOB는 기본 VARCHAR2 타입으로는 너무 큰 문자열을 저장하는 데 사용되는 특별한 데이터 유형입니다.\n\n이 함수 내에서 v_api_key 상수는 OpenAI API 키의 값을 보유하고 있습니다. 따라서 꼭 바꾸지 않도록 주의하세요.\n\n이 함수는 Oracle의 dbms_cloud 패키지를 사용하여 OpenAI의 채팅 완료 엔드포인트로 HTTP 요청을 보냅니다. send_request() 프로시저는 다음 매개변수가 필요합니다:\n\n- uri — 엔드포인트의 URL입니다.\n- method — 요청에 사용되는 HTTP 메서드입니다. 여러분은 POST로 설정해야 합니다.\n- headers — 요청 헤더를 지정하는 JSON 객체입니다. 이전에 본 바와 같이 Content-Type 및 Authorization을 명시해야 합니다.\n- body — BLOB로 변환된 JSON 객체입니다. 보내는 데이터를 포함하며, 사용할 모델, 온도 매개변수(랜덤성) 및 GPT가 답변할 질문과 같은 정보가 포함됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nsend_request() 함수의 결과는 v_response 변수에 저장되며, 그것은 사용자에게 텍스트로 반환됩니다:\n\n```js\ncreate or replace function get_gpt_response(\n    p_question varchar2\n) return clob\nis\n    v_api_key constant varchar2(100) := '<your-api-key>';\n    v_response dbms_cloud_types.resp;\nbegin\n    v_response := dbms_cloud.send_request(\n        uri     => 'https://api.openai.com/v1/chat/completions',\n        method  => dbms_cloud.method_post,\n        -- Headers must be of type JSON_OBJECT\n        headers => json_object(\n            'Content-Type'  value 'application/json',\n            'Authorization' value 'Bearer ' || v_api_key\n        ),\n        -- Request body must be a JSON structure converted to BLOB\n        body    => utl_raw.cast_to_raw(\n            json_object(\n                'model'    value 'gpt-3.5-turbo',\n                'messages' value json_array(\n                    json_object(\n                        'role'    value 'user',\n                        'content' value p_question\n                    )\n                ),\n                'temperature' value 0.5\n            )\n        )\n    );\n    return dbms_cloud.get_response_text(v_response);\nend get_gpt_response;\n/\n```\n\n위 스니펫을 실행하면 해당 함수를 사용할 수 있게 됩니다.\n\n예상대로 작동하는지 확인해 봅시다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nselect\n    json_query(get_gpt_response('What is the capital of United States?'), '$' returning clob pretty) as response\nfrom dual;\n```\n\n여기에 얻은 응답이 있어요:\n\n<img src=\"/assets/img/2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL_3.png\" />\n\n매우 좋은 결과 나왔네요! 하지만 하나 문제가 있는데요 — 반환된 응답이 JSON 형식으로 표시되는데, 이는 관계형 데이터베이스를 다룰 때 기본적으로 원하는 형식은 아니죠.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다행히도, Oracle은 탁월한 JSON 지원을 제공하기 때문에 관련 필드를 추출하고 응답을 일반 데이터베이스 테이블 형식으로 포맷할 수 있습니다:\n\n```js\nwith response as (\n    select get_gpt_response('What is the capital of United States?') as data\n    from dual\n)\nselect\n    jt.*\nfrom response r,\n    json_table(\n        r.data,\n        '$'\n        columns(\n            id                varchar2(50)   path '$.id',\n            answer            varchar2(1000) path '$.choices[0].message.content',\n            prompt_tokens     number         path '$.usage.prompt_tokens',\n            completion_tokens number         path '$.usage.completion_tokens',\n            total_tokens      number         path '$.usage.total_tokens'\n        )\n    ) jt;\n```\n\n아래는 출력 결과입니다:\n\n![출력 이미지](/assets/img/2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL_4.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기서부터는 세상이 당신의 조개껍질처럼 열립니다. 결과를 그대로 사용하거나 표로 저장할 수도 있습니다. 토큰 사용 정보는 자주 이 함수를 실행할 계획이 있다면 사용된 리소스를 잘 보여주는 지표가 될 것입니다.\n\n# 개선할 수 있는 점 (하고야 할 것)\n\n오늘 구현한 솔루션은 작동하지만 상당히 기본적이며 몇 가지 조정이 필요합니다:\n\n- 예외 처리 — 현재 전혀 구현되지 않았습니다. dbms_cloud 오류뿐만 아니라 일반적인 다른 오류도 잡을 수 있도록 해야 합니다.\n- 하드코딩된 엔드포인트 — 현재 상태에서 함수는 채팅 완성 엔드포인트로만 요청을 보냅니다. 엔드포인트를 동적으로 만드는 것이 더 좋을 것입니다.\n- 응답이 저장되지 않음 — 사용자에게 반환하기 전에 응답을 데이터베이스 테이블에 저장하는 것이 좋을 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n위의 모든 부분은 기본적인 SQL 기술이 있다면 쉽게 해결할 수 있기 때문에 여러분에게 맡기겠습니다.\n\n# SQL에서 OpenAI API 요약\n\n많은 사람들이 SQL이 OpenAI API에 HTTP 호출을 위한 유효한 옵션으로 여겨지지 않는다고 생각하지만, 실제로 많은 신입사원들은 SQL이 기본적인 데이터 조작 이상의 기능을 수행할 수 있다는 것을 알지 못합니다. SQL은 데이터의 언어이며, 이에 따라 Python이 할 수 있는 거의 모든 작업을 데이터 이동 없이 수행할 수 있습니다.\n\n오늘의 예시는 Oracle SQL과 PL/SQL로 한정되어 있지만, 여러분이 나의 해결책을 SQL Server, MySQL 및 Postgres에 구현할 방법을 찾을 수 있을 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSQL 사용 사례 중에서 머신 러닝과 공간 데이터 분석과 같은 더 흥미로운 내용이 추가로 올라올 예정이니 기대해 주세요.\n\n읽어 주셔서 감사합니다.\n","ogImage":{"url":"/assets/img/2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL_0.png"},"coverImage":"/assets/img/2024-05-17-HowtoUseOpenAIChatGPTAPIInSQL_0.png","tag":["Tech"],"readingTime":8},{"title":"2024년에 알아야 할 시간을 절약하는 SQL 키워드 하나","description":"","date":"2024-05-17 19:11","slug":"2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024","content":"\n## SQL\n\n![Image 1](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_0.png)\n\n![Image 2](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_1.png)\n\n'GROUP BY... WITH ROLLUP'란 무엇인가요? — 예제와 함께 설명합니다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSQL, 여러분들도 잘 아시다시피, 관계형 데이터베이스와 상호 작용하기 위해 사용하는 언어입니다. 필요한 데이터를 추출하고 변환하는 데 사용됩니다.\n\n데이터 변환에 관해서 얘기할 때, 데이터 집계는 가장 중요한 개념 중 하나입니다. 데이터 집계를 생각해 볼 때 GROUP BY를 사용하지 않을 수 없습니다.\n\n그러므로 GROUP BY는 중요한 것뿐만 아니라, 대규모 데이터 세트에서 의미 있는 것을 만들고 데이터로부터 가치 있는 통찰을 얻기 위해 필수적입니다.\n\n지난 번 글 중 하나에서 이미 GROUP BY를 쉽게 사용하고 얼마든지 숙달시킬 수 있는 방법을 설명했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n읽어 주셨으면 좋겠어요!\n\n지금 이 글에서는 한 발자국 더 나아가서 GROUP BY에서 추가 키워드인 WITH ROLLUP을 사용하여 조금 더 시간을 절약하는 방법을 배울 거에요.\n\nWITH ROLLUP을 사용하면 하나의 쿼리로 집계 및 초계수준의 데이터 통찰력을 얻을 수 있어요.\n\n무슨 뜻인지 보여 드릴게요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래와 같이 간단한 9999 x 11 데이터셋이 있습니다.\n\n![Dataset](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_2.png)\n\n이 데이터셋에서 각 제품 카테고리별로 각 판매 관리자가 각 달에 선적한 총 수량을 파악하고 싶다고 가정해 봅시다.\n\n이는 일반적인 GROUP BY와 집계 함수인 SUM을 사용한 전형적인 예시입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```sql\nSELECT sales_manager\n        , product_category\n        , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- Get total number of products shipped\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager\n        , product_category\n        , month_name;\n```\n\n데이터셋이 크기 때문에 결과를 간단하게 유지하기 위해 'Healthcare' 및 'Fashion' 제품 카테고리 및 'Pablo' 및 'Sofia'를 판매 관리자로 선택했습니다.\n\n<img src=\"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_3.png\" />\n\n그러나 이 출력을 받은 후 이 두 제품 카테고리에서 'Sofia'나 'Pablo'가 모든 달에 얼마나 많은 제품을 배송했는지 정확히 알고 싶어질 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n한 가지 방법은 상기 결과로부터 total_quantity 열을 수동으로 합산하는 방법이 있습니다. 이 방법은 다소 지루할 수 있습니다.\n\n그렇지만, 만약 계산기를 사용하거나 수동으로 작업해야 한다면 SQL 데이터 변환의 의미가 무엇인가요?\n\n그래서 또 다른 방법으로는 SQL을 통해 sales_manager와 product_category만으로 행을 그룹화하는 또 다른 SQL 쿼리를 작성하는 것입니다.\n\n```sql\nSELECT sales_manager\n        , product_category\n        -- , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- 물품 출하량의 총 개수 가져오기\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager\n        , product_category;\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![OneTime-SavingSQLKeywordYouNeedtoKnowin2024](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_4.png)\n\n여기에서 원하는 것을 얻을 수 있지만, 여전히 당신이나 동료들이 생각할 문제가 있습니다: '소피아'나 '파블로'가 총으로 몇 개의 제품을 배송했는지 정확히 알고 싶다면?\n\n그에 대답하기 위해, 계산기를 사용하거나 다음과 같은 다른 SQL 문을 작성할 수 있습니다:\n\n```js\nSELECT sales_manager\n        -- , product_category\n        -- , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- 전체 제품 수를 얻습니다\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager;\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![SQL Keyword](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_5.png)\n\n많은 노력이 필요했죠, 맞죠?\n\n그렇죠! 이 키워드 — WITH ROLLUP으로 가능합니다. GROUP BY 절에 간단히 추가하세요.\n\n```js\nSELECT sales_manager\n        , product_category\n        , EXTRACT(MONTH FROM order_date) AS month_name\n        , SUM(quantity) AS total_quantity -- 운송된 제품의 총 수량 획득\nFROM alldata.salesdata\nWHERE 1=1\nAND sales_manager IN (\"Pablo\", \"Sofia\")\nAND product_category IN (\"Healthcare\", \"Fashion\")\nGROUP BY sales_manager\n        , product_category\n        , month_name WITH ROLLUP;\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![image](/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_6.png)\n\n와~ 빠르네요!\n\n내 컴퓨터에서는 WITH ROLLUP이 없는 쿼리와 실행하는 데 걸리는 시간이 동일했어요.\n\n위 출력에서 빨간색으로 강조된 행은 2번 질문에 대한 답을 제공합니다: 이 두 제품 카테고리 전체 월에 ‘Sofia’ 또는 ‘Pablo’가 보낸 제품 수는 얼마나 될까요? 파란색으로 강조된 행은 3번 질문에 답하는 데 도움이 됩니다: ‘Sofia’ 또는 ‘Pablo’가 총 보낸 제품 수는 얼마일까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지난 행은 아직 물어보지 않았지만 답변하는 질문을 다루고 있어요: ‘Pablo’와 ‘Sofia’가 이 두 제품 카테고리에서 함께 몇 개의 제품을 발송했는지요?\n\n보시다시피, WITH ROLLUP은 더 높은 수준의 집계를 얻도록 도와줍니다. 이는 여러 쿼리를 작성할 때 시간을 절약할 뿐만 아니라 여러 수준의 집계에 기반한 질문에도 단일 쿼리로 답변할 수 있도록 도와줍니다.\n\nWITH ROLLUP은 데이터의 2가지 보기를 옆에 나란히 제공하는데, 한 가지는 데이터를 여러 카테고리로 집계하고 다른 하나는 전반적인 그림을 보여줍니다.\n\n이러한 종류의 집계는 특히 데이터를 이해하고 그 안에 있는 트렌드와 패턴을 식별하는 데 도움이 될 수 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기까지...\n\n이야기를 좋아해주셨으면 좋겠고 유용하게 느꼈으며 빠르게 끝내셨으면 좋겠어요.\n\nGROUP BY 절에 WITH ROLLUP을 추가하면 하나의 SQL 쿼리로 상세한 통찰과 큰 그림을 함께 얻을 수 있습니다. 이를 사용하여 데이터의 숨겨진 트렌드를 탐색하고 최종적으로 정보 기반 결정을 내릴 수 있습니다.\n\n유용하게 느껴진 부분 강조하고 생각에 대해 의견을 나눠주세요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 많은 전문가 팁과 노하우를 위해 팔로우해주세요. 이 글을 꼭 여러분의 네트워크와 공유해주세요!\n\n읽어주셔서 감사합니다.\n","ogImage":{"url":"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_0.png"},"coverImage":"/assets/img/2024-05-17-OneTime-SavingSQLKeywordYouNeedtoKnowin2024_0.png","tag":["Tech"],"readingTime":8},{"title":"스노우플레이크 데이터 품질 테스트 및 이상 검출 시작하기","description":"","date":"2024-05-17 19:08","slug":"2024-05-17-GettingStartedwithSnowflakeDataQualityTestingandAnomalyDetection","content":"\nSnowflake에서 데이터 품질을 개선하는 데 제어 평면을 활용하는 방법에 관심이 있으신가요? 여기서 Orchestra로 시작해보세요 ❄️\n\n# 소개\n\nGenerative AI를 효과적으로 활용하려는 모든 기업의 기본 사전 조건은 견고한 데이터 인프라를 확보하는 것입니다.\n\n견고한 데이터 인프라가 없으면 AI에서 가치를 유지하는 것은 불가능합니다. 망가진 대시보드가 영업 실행 책임자를 실망시키는 것만큼, 환각이나 잘못된 정보를 제공하는 챗봇은 어떤 AI 전략의 야망을 소각시킬 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이번 튜토리얼에서는 스노우플레이크(Snowflake)의 데이터 파이프라인을 기존 도구 및 Orchestra를 활용하여 조정하는 방법과 데이터 품질을 모니터링하는 방법을 살펴볼 것입니다. 다양한 데이터 품질 테스트 유형을 다루며 \"데이터 품질이란 무엇인가?\" 라는 질문에 답할 것입니다.\n\n이 튜토리얼을 마치면 Orchestra와 기존 도구를 활용하여 스노우플레이크에서 데이터 품질을 모니터링하고 유지하는 경제적인 방법이 갖춰집니다. 더불어, AI를 준비하는 데 한 걸음 더 나아가게 될 것입니다. 함께 시작해봅시다.\n\n# 정의\n\n먼저, 데이터 품질이 무엇인지 이해하고 어떻게 향상시킬 수 있는지 알아보는 것이 중요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이것은 널리 인기가 있는 내용입니다 — 예를 들어, 지난 1시간 동안 주문이 없었지만 저는 방금 주문을 넣었을 때, 이겪이 거짓이라는 것을 알 수 있습니다. 중복 주문이 있다면, 이 역시 현실을 반영하지 못하는 것입니다.\n\n특정 시점의 데이터셋이 현실을 정확하게 대변하지 못하는 다양한 방법이 있습니다:\n\n- 최신성 — 데이터셋의 SLA에 따라 최신 데이터가 없음\n- 완전성 — 데이터셋에 관측치가 누락됨\n- 중복 — 데이터셋에 관측치가 너무 많음\n- 부정확성 — 데이터의 값이 부정확하게 기재됨\n- 스키마 이탈 — 데이터가 기대하는 스키마와 일치하지 않음\n\n두 번째로, 데이터 품질 테스트의 다양한 유형을 이해하는 것이 도움이 됩니다. 실무에서 테스트는 단순히 데이터가 데이터 품질 기준을 충족하지 못하면 실패하고(통과하지 못한다면), 그렇지 않으면 통과합니다. 데이터 품질 테스트에는 두 가지 유형이 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n데이터 품질 테스트 차단하기\n\n데이터 품질 테스트 비차단하기\n\n최소한의 기능을 갖춘 데이터 품질\n\n좋아요! 그렇게 하면 이제 간단한 파이프라인을 검토하고 Snowflake를 위한 데이터 품질 테스트를 활성화하는 방법을 살펴볼 준비가 되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# dbt 또는 Coalesce를 사용한 데이터 품질 테스트\n\n간단한 데이터 파이프라인에서 데이터는 Saslesforce나 Postgres와 같은 소스에서 Snowflake로 이동합니다. 때로는 S3를 경유할 수도 있습니다.\n\n우선, Snowflake로 데이터를 이동하는 프로세스에 대한 로깅 또는 알림을 설정해야 합니다. 이렇게 하면 데이터 팀이 이 프로세스가 실패하는 것을 가장 먼저 알 수 있습니다. 직접적인 데이터 품질 테스트는 아니지만, 데이터가 SLA 내에 있는지의 최근성이 데이터 품질에 영향을 줄 수 있으므로 이를 설정해두는 것이 좋습니다.\n\n두 번째는 소스 및 집계 테스트를 수행하는 것입니다. 이 방식은 신뢰할 수 있는 데이터 제품을 위한 최소한의 테스트를 실행하며, 중간 테이블에 대한 테스트는 무시하고 소스 및 집계 테이블을 집중적으로 테스트하는 것을 포함합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\ndbt를 사용하여 dbt 테스트로 실행하거나 Coalesce에서 테스트로 설정할 수 있습니다.\n\nOrchestra에서는 추가 조치가 필요하지 않습니다. Orchestra는 dbt/Coalesce를 트리거하고 모니터링하며 UI에서 테스트 작업을 렌더링합니다. 이렇게 하면 기존 도구를 사용하여 데이터 품질을 모니터링하면서 end-to-end 데이터 파이프라인에 대한 알림을 통합할 수 있습니다.\n\n참고 - 이러한 것들은 블로킹 테스트입니다. 품질 테스트가 실패하면 파이프라인도 실패합니다. 여기에 일반적인 예제 몇 가지를 포함했습니다.\n\n## 데이터 품질 테스트 스트림\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n스트림에서 데이터 품질 테스트를 쉽게 실행할 수 있습니다. \"Run as Data Quality Test\" 설정을 활성화하고 쿼리를 활용하면 Orchestra가 이 작업을 처리해줍니다. 스트림에서 테이블로 데이터를 로드하기 전에 필요하다면 임시 테이블을 만들어 이 데이터에 대한 데이터 품질 테스트를 실행할 수 있습니다.\n\n![이미지](/assets/img/2024-05-17-GettingStartedwithSnowflakeDataQualityTestingandAnomalyDetection_0.png)\n\n## 데이터 분석가를 위한 비차단형 데이터 품질 테스트\n\n데이터 제품 소유자는 데이터셋의 품질을 시간이 지남에 따라 모니터링하기 위해, 데이터가 현실을 정확히 반영하는지 여부 이외에도 데이터셋에 대해 더 많이 이해하고 싶어할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n예를 들어, 데이터는 현실을 (Salesforce) 대변할 수 있지만, 그것이 사람들이 보고 싶어하는 것을 반영하지 않을 수도 있습니다. 이는 우리 모두가 공감할 수 있는 예시입니다 — 영업 직원들은 관리 업무를 싫어합니다!\n\n그러므로 데이터 분석가는 이 사실에 주의를 기울일 수도 있습니다. 예를 들어, 연락 주인이 시간 경과에 따라 생성한 연락처 수를 이해하는 것이 도움이 될 수 있습니다. 중요한 변동이 있는 곳에는 엉뚱한 영업사원의 존재가 크게 나타날 것입니다 — 이는 그들의 데이터 청결에 대한 헌신을 우연히 포착하며, 비록 말하자면 이후에야 발견되는 것입니다.\n\n다른 예로는 리드 소스를 살펴볼 수 있습니다 — 예를 들어, 널 값의 수나 리드 소스의 중요한 변동 수를 모니터링할 수 있습니다 (변하지 않아야 할 것). 널 값의 비율이 높다고 해서 차단 테스트가 되어서는 안 됩니다 — 영업부장은 보고서를 필요로 하지만, 널 값을 확인하고 이를 강조하는 것은 반드시 필요합니다.\n\nOrchestra에서는 관련 데이터 품질 테스트를 수행하는 별도의 파이프라인을 생성하고 해당 파이프라인을 동일한 데이터 제품에 추가함으로써 이를 수행할 수 있습니다. 이렇게 하면 데이터 품질 테스트 파이프라인이 필요할 때마다 항상 실행되며, 분석가들은 시간에 따른 데이터 품질 결과를 가질 수 있지만, 추가적인 코드나 조직적인 허들이 필요하지 않으며, 비싼 데이터 관측 도구도 필요하지 않습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 생성 AI와 기계 학습을 활용한 이상 탐지\n\n많은 관측 도구는 플랫폼의 주요한 독특한 세일즈 포인트로서 이상을 탐지하는 능력을 강조합니다. 사실, Anomalo와 같은 소프트웨어 회사들은 특히 이를 위해 설계된 것처럼 보입니다.\n\n만약 당신이 Snowflake의 고객이라면 이러한 도구를 구매하는 것은 심각한 실수일 수 있습니다. 이상 탐지 모니터를 직접 작성하는 것이 번거로울 것으로 생각할 수 있지만, 그렇게 어렵지 않으며 할 수 있습니다. 그러나 실제 문제는 Snowflake 외부에서 이상 탐지 모니터를 실행하면서 발생하는 추가 비용입니다.\n\n이상 탐지 메커니즘은 Snowflake로부터 데이터를 가져 와야 하며(전송), 모델을 학습해야 합니다(연산), 다시 Snowflake로부터 데이터를 가져와야 하며(전송), 그리고 예측 서비스를 제공해야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n따라서, 제3자 이상 탐지 도구는 추가적인 Snowflake 비용이 들어갑니다 (오케스트레이션에 대한 생각을 하지 않았을 때입니다).\n\n걱정하지 마세요! Snowflake는 구글의 행적(Google’s stead)을 따라 (Vertex AI와 함께) 개발하여 자체적으로 Cortex AI를 개발했습니다.\n\n여기에 Snowflake에서 Cortex AI를 활용하는 방법이 있습니다.\n\n## Cortex AI를 사용한 Snowflake의 이상 감지\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저, 이상 탐지가 무엇이며 어떻게 작동하는지 이해하는 것이 중요합니다.\n\n이상은 관찰과 관련이 있습니다. 예를 들어, 체중이 기재된 100명의 명부가 있다면, 분포의 꼬리에 위치한 사람을 “이상” 또는 “이상점”으로 쉽게 식별할 수 있습니다.\n\n![이미지](/assets/img/2024-05-17-GettingStartedwithSnowflakeDataQualityTestingandAnomalyDetection_1.png)\n\n이는 Snowflake에서 간단하게 수행할 수 있습니다 — SQL 쿼리를 작성하여 백분위수를 계산하고 해당 값을 초과하는 것을 쉽게 가져올 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```sql\n-- `your_table`에서 `value` 열의 90 백분위수 계산\nSELECT PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY value) AS percentile_90\nFROM your_table;\n```\n\n그러나 시계열 데이터의 경우 조금 더 복잡해질 수 있습니다. 이는 두 가지 요인 때문에 발생합니다.\n\n- 다변량 시계열 데이터: 여러 기계의 시간에 따른 출력 같은 여러 시계열을 동시에 테스트하고 싶어할 수 있습니다.\n- 계절성: 모든 시계열 추세가 선형적이지는 않습니다.\n\n따라서 일반적으로 이상점 테스트 메커니즘은 먼저 데이터를 특징별로 분할한 후 (예: 이 예제에서는 기계로), \"적합\"할 과거(임의의) 데이터 하위 집합을 선택합니다. 일반적으로 이러한 곡선은 자기회귀 이동 평균(ARIMA) 또는 계절성 자기회귀 이동 평균(SARIMA)과 같은 모델을 사용하여 보정됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n남은 데이터 포인트는 예측됩니다. 합당한 한계를 벗어나는 것들은 (사용자가 결정할) 이상으로 간주됩니다.\n\n따라서, Snowflake에서 시계열을 위한 이상 감지를 활용하기 위해 다음과 같은 입력이 필요합니다.\n\n- 훈련 데이터셋\n- 다변량 특성\n- 시간 열\n- 패턴 (선형 시간 추세인가요? 계절적인가요? 다른 것인가요?)\n- 몇 퍼센트가 이상으로 간주될까요?\n\n이 정보를 갖고 있으면, 준비된 것입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## Snowflake에서 데이터 품질 테스트 및 이상 감지 구현하기\n\n저희는 Snowflake에서 이상 감지를 실행하는 방법을 보여주는 간단하고 유익한 비디오를 제작했습니다.\n\nOrchestra에 이상 감지를 추가하는 것도 간단합니다:\n\n이 비디오들에서 Snowflake의 강력함을 보실 수 있습니다. 그러나 이러한 강력한 기능들을 스키마 테스트 및 이상 감지에 통합하는 것은 엔드 투 엔드 파이프라인을 구축할 때 비 쉽습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n오케스트라가 등장하는 곳입니다. 오케스트라의 Snowflake 특화 작업을 통해 누구나 손쉽게 Snowflake에서 데이터 파이프라인을 구축할 수 있으며, 데이터 품질 및 이상 징후 테스트를 위해 Cortex ML Functions을 활용할 수 있습니다.\n\n# 결론\n\n잘 했어요! 여기까지 오신 여러분은 이제:\n\n- Snowflake에서 dbt 테스트 및 Coalesce 테스트를 활용하여 엄격한 소스 테스트를 구현하는 방법을 알게 되었습니다.\n- Snowflake Streams와 Tasks에 효율적으로 데이터 품질 테스트를 수행하는 방법을 알게 되었습니다.\n- 데이터 세트에 대한 이상 징후 테스트를 할 수 있습니다.\n- 블로킹되지 않는 데이터 품질 테스트를 실행할 수 있습니다.\n- 조직 내에서 모든 것을 모니터링하고 비즈니스에 작업 내용을 자랑스러이 보여줄 수 있는 강력한 UI가 오케스트라에 있다는 것을 알게 되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n시작 준비가 되셨나요? 여기로 이동해주세요.\n\n이 튜토리얼을 즐겁게 즐겼으면 좋겠고, 별도의 도구가 필요하지 않다는 점이 잘 드러났으면 좋겠어요. 데이터 품질 테스트를 실행하고 모니터링할 것이 필요하지만, 변환 도구가 이미 있을 것입니다.\n\nOrchestra와 같은 통합 제어 패널이 없다면 — 어쩌면 한 번 고려해 볼 필요가 있을지도 모릅니다. Orchestration과 Observability를 통합하는 여러 이점이 있지만, 그것은 나중에 다른 글에 포함시켜야 할 주제인 것 같아요.\n\n행복한 테스트 진행되길 바래요! ⏰\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 추가 자료\n\n더 많은 정보를 얻고 싶다면, 이 튜토리얼의 비디오 버전도 확인해보세요.\n\n- Snowflake 데이터 품질 및 이상 감지 (파트 1) [링크]\n- Snowflake 데이터 품질 및 이상 감지 (파트 2) [링크]\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n오케스트라를 사용하여 스노우플레이크에서 스키마 확인하십시오 (링크)\n\n오케스트라에서 스노우플레이크 데이터 품질 테스트 추가하기 (링크)\n\n# 스택데믹 🎓\n\n끝까지 읽어주셔서 감사합니다. 떠나시기 전에:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 이 글을 읽어주셔서 감사합니다! 👏\n- 팔로우하고 작가를 응원해주세요!\n- 저희를 팔로우해주세요: X | LinkedIn | YouTube | Discord\n- 다른 플랫폼에서 저희를 만나보세요: In Plain English | CoFeed | Venture | Cubed\n- 더 많은 콘텐츠는 Stackademic.com에서 확인할 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-17-GettingStartedwithSnowflakeDataQualityTestingandAnomalyDetection_0.png"},"coverImage":"/assets/img/2024-05-17-GettingStartedwithSnowflakeDataQualityTestingandAnomalyDetection_0.png","tag":["Tech"],"readingTime":12}],"page":"106","totalPageCount":110,"totalPageGroupCount":6,"lastPageGroup":10,"currentPageGroup":5},"__N_SSG":true}