{"pageProps":{"posts":[{"title":"RxSwift 심층 탐구 메커니즘 분석","description":"","date":"2024-06-22 23:24","slug":"2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms","content":"\n# 목적\n\n이 튜토리얼의 주요 목적은 RxSwift의 핵심 구성 요소에 대한 심층적인 이해를 제공하는 것입니다. RxSwift 뒷면의 구현에 주로 초점을 맞춰 설명합니다.\n\n이 게시물을 읽은 후에는 관찰 가능한(observables)이 무엇인지, 구독(subscriptions)이 무엇인지, 관찰 가능한이 어떻게 작동하는지에 대한 명확한 이해가 있을 것으로 기대됩니다.\n\n이 튜토리얼은 RxSwift에 대한 일부 경험이 있다고 가정하고 있습니다. 이는 이해하기 쉽게 만들어줄 것입니다. 저희 zen8labs에서는 RxSwift를 주로 멤버들에게 교육하고 있으며, Serg Dort의 멋진 튜토리얼 \"Learn Rx by implementing Observable\"을 주의 깊게 참고하도록 강력히 권장합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nSerg Dort님께 이 유용한 튜토리얼을 작성해 주신 것에 대해 진심으로 감사드립니다. 이 튜토리얼은 RxSwift의 구현을 간단하게 설명하여 RxSwift의 주요 구성 요소와 그들이 어떻게 함께 작동하는지 이해하기 쉽게 만들었습니다.\n\n한 번 다시, 이 튜토리얼을 주의 깊게 읽고 코드를 단계별로 따라 하시기를 부탁드립니다. 믿어 주세요, 정말 값어치가 있을 겁니다.\n\n정말 솔직히 말씀드리자면, RxSwift의 내부 작동 방식을 알 필요는 없습니다. 단지 옵저버블이 요소를 발행할 때, 정지할 때, 오류가 발생할 때, 옵저버블이 발행할 수 있는 요소의 개수, 그리고 구독을 해제해야 하는 시점에 집중하면 됩니다. 이러한 것들을 잘 이해하면 어떤 문제도 없이 RxSwift를 사용할 수 있습니다.\n\n하지만 제 경우에는 항상 사용 중인 것들이 어떤 일이 벌어지는지 이해하고 싶습니다. 제가 무엇을 올바르게 수행하고 있는지 확인하는 가장 좋은 방법입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 질문들\n\n간단한 예제를 살펴봅시다:\n\n![이미지](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_0.png)\n\n이것은 기본적인 예제입니다. 그러나 RxSwift의 중요한 개념들을 대부분 포함하고 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에는 많은 숨겨진 세부 사항이 있습니다.\n\n이에 대한 몇 가지 질문이 있습니다:\n\n- Observable은 추상 클래스이고 Disposable은 프로토콜입니다. 그래서 여기서 실제로 생성되는 유형은 무엇인가요?\n- 이러한 오퍼레이터들은 실제로 어떻게 작동합니까?\n- 데이터는 이러한 오퍼레이터들을 통해 어떻게 처리됩니까?\n- 오퍼레이터들은 어떻게 함께 구성되는가요?\n- 왜 우리는 로직을 실행하기 위해 구독해야 하죠?\n- 구독은 언제 끝나나요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이러한 질문에 대답하려면 이 연산자들의 구현을 살펴보겠습니다.\n\n## 구현\n\n연산자의 경우:\n\n![이미지](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_1.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n맵 연산자:\n\n![맵 연산자](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_2.png)\n\n필터 연산자:\n\n![필터 연산자](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_3.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테이블 태그를 Markdown 형식으로 변경해 주세요.\n\n| header1 | header2 |\n| ------- | ------- |\n| data1   | data2   |\n| data3   | data4   |\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n(1) Producer 클래스는 실제로 Observable 클래스의 하위 클래스이므로 RxSwift 연산자는 기본적으로 Producer의 다른 하위 유형을 반환하는 메서드입니다.\n\n(2) Producer에 구독할 때마다 SinkDisposer가 반환됩니다. 사실 Observable 클래스는 추상 유형이며 해당 인스턴스를 직접적으로 생성하지 않습니다. 대신, 우리는 연산자를 사용하여 observables을 만듭니다. 따라서 우리가 일상적으로 프로그래밍에서 사용하는 observables 대부분은 사실 Producer의 하위 클래스입니다. 따라서 observables에 구독할 때 대부분의 구독은 SinkDisposer입니다. 예시의 구독 또한 SinkDisposer입니다.\n\n(3) Producer 클래스에는 \"run\"이라는 내부 추상 메서드가 있습니다. 이는 Producer의 하위 클래스가 비즈니스 로직을 구현해야 하는 곳입니다. \"run\" 메서드는 항상 sink와 subscription 두 가지를 반환합니다.\n\n이제, 예시에서 네 가지 observables(ObservableSequence, Map, Filter, TakeCount)의 구현을 탐구하여 sink와 구독이 무엇인지에 대한 질문에 답해보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nObservableSequence\n\n![Image](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_6.png)\n\nMap\n\n![Image](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_7.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nFilter\n\n![Filter Image](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_8.png)\n\nTake\n\n![Take Image](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_9.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이상한가요?\n\n이 네 가지 옵저버블의 run 메서드에 주목해 봅시다. 각 유형의 옵저버블에는 해당하는 Sink 클래스가 있다는 것을 알 수 있어요: ObservableSequence에는 ObservableSequenceSink, Map에는 MapSink, Filter에는 FilterSink, TakeCount에는 TakeCountSink가 있어요. 그리고 RxSwift의 다른 옵저버블에도 마찬가지예요.\n\n게다가, 옵저버블 자체는 어떤 로직도 실행하지 않음을 알 수 있어요; 그저 옵저버블 로직을 위한 디자인 또는 템플릿으로 동작할 뿐이에요. 정작 모든 일을 하는 사람은 Sink라는 거죠.\n\n이를 시각화해 보면, 옵저버블이 기계의 청사진이라고 상상해 보세요. 반면 Sink 인스턴스는 그 청사진을 기반으로 구축된 실제 기계에요. 사실 Sink는 RxSwift에서 일어나는 모든 마법 같은 일들이 일어나는 곳이에요. 그것은 우리 관찰자에 대한 참조를 유지하고, 옵저버블 로직을 실행하며, 결과 이벤트를 관찰자에게 전달해요. RxSwift에서 특정 유형의 옵저버블이 어떻게 작동하는지, 그것이 처리되는 데이터를 어떻게 살펴야 하는지를 정말로 이해하려면 해당 옵저버블의 Sink를 살펴보면 돼요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n또 다른 중요한 점은 run 메서드에서 Observable을 구독할 때만 Sink 인스턴스가 생성된다는 것입니다. 이것이 Observable의 논리가 구독되어야만 실행되고, Observable을 구독할 때마다 논리가 다시 실행되는 이유를 설명합니다. 이는 새로운 Sink 인스턴스가 생성되기 때문에 발생하는 것입니다.\n\nProducer의 run 메서드가 항상 반환하는 하나 더의 구성 요소는 subscription입니다. 그렇다면 subscription이란 무엇일까요?\n\n이 질문에 답변하기 전에, RxSwift가 조합 가능하다는 점을 기억해 두세요. 즉, 여러 개의 각기 다른 유형의 Observable을 한 개의 Observable로 결합할 수 있다는 것이죠, 마치 다수의 객차로 구성된 기차와 유사합니다.\n\n![image](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_10.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n두 종류의 observable이 있습니다: Generation observables과 Transformation observables.\n\n- Generation observables는 자체적으로 이벤트를 생성하는 observables입니다. 예를 들어, create, of, from... 연산자에서 반환된 observables입니다. Generation observable은 항상 모든 파워를 생성하는 기차 머리와 같은 역할을 합니다. 어떤 이벤트도 Generation observable에서 시작됩니다. 위의 ObservableSequence 구현을 살펴보면, 구독은 sink 인스턴스를 실행한 결과입니다. 구독은 Sink 실행을 관리하기 위해 할당된 리소스를 관리하는 Disposable 프로토콜을 구현한 형식입니다. Sink가 생성을 완료하면, 구독은 Sink가 할당한 모든 리소스를 해제하기 위해 삭제됩니다.\n- Transformation observables는 원본으로부터 받은 이벤트를 observable로 변환하는 observables입니다. 예를 들어, map, filter, take... 연산자에서 반환된 observables입니다. Map, Filter, TakeCount 구현을 살펴봅시다. 각 클래스는 항상 기본적으로 이전 체인 내의 observable에 대한 참조인 원본 observable을 갖습니다. 구독은 sink를 원본 observable에 구독하는 결과입니다. 그리고 원본 observable이 사실상 다른 Producer인 경우, 구독도 SinkDisposer입니다. 이것은 RxSwift가 여러 연산자를 연결하는 방법입니다.\n\n모든 것을 연결하면, 다음과 같이 예시를 시각화할 수 있습니다:\n\n![이미지](/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_11.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음은 우리 예시에서 발생한 일입니다:\n\n1. 생성 단계:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n실제로 나오는 결과 observable은 TakeCount입니다. TakeCount는 Filter가 있는 observable 소스를 가지고 있습니다. Filter에는 observable 소스인 Map이 있습니다. Map은 observable 소스인 ObservableSequence를 가지고 있습니다. ObservableSequence는 자체적으로 이벤트를 생성할 수 있는 생성 observable입니다.\n\n2. 구독 단계:\n\n결과 observable에 구독하면 실제로 TakeCount observable에 구독하게 됩니다. TakeCountSink를 만들어 TakeCount의 로직을 실행하고 Filter observable을 해당 Sink에 구독하여 구독을 만듭니다. Sink 및 구독은 TakeCount에 구독을 할 때 반환된 SinkDisposer에 의해 관리됩니다. 예시에서 해당 구독은 바로 이 SinkDisposer입니다.\n\nFilter, Map 및 ObservableSequence에 대해서도 동일한 동작이 발생합니다. 각 단계는 자체 Sink 및 SinkDisposer를 만들며, 각 SinkDisposer의 구독은 이전 단계의 SinkDisposer입니다. ObservableSequence는 생성 observable이므로 ObservableSequenceSink 자체를 실행하기 위해 할당된 자원을 관리하는 인스턴스로 구독하는 것이며, 그 외의 단계에서 발생하는 것과는 다릅니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n### 3. Running phase:\n\nObservableSequenceSink가 이벤트를 방출하기 시작하고, 그 observer는 MapSink입니다. MapSink는 ObservableSequenceSink에서 이벤트를 가져와서 작업을 처리하고(2로 곱함), 그 결과를 그 observer인 FilterSink에게 방출하고, 이런 식으로 계속됩니다... 마지막 싱크는 TakeCountSink이며, 이는 예시에서 값이 프린트되는 클로저에 이벤트를 방출합니다.\n\n### 4. Dispose phase:\n\n작업을 마치면 구독을 해제합니다. 실제로 TakeCount의 SinkDisposer입니다. 그러면 이 SinkDisposer가 TakeCountSink와 그 구독을 해제하고, 이는 Filter의 SinkDisposer의 구독인 것입니다. ObservableSequence의 마지막 SinkDisposer에 이르기까지 해제 프로세스가 계속됩니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이것이 RxSwift의 전체 그림입니다. 이 게시물이 RxSwift 내부에서 무엇이 발생했는지에 대해 더 깊은 이해를 가지는 데 도움이 되기를 바랍니다. 다른 주제에 관심이 있다면, 여기에서 유용한 기술 정보를 확인해보세요!\n\n토안 누옌, 시니어 모바일 엔지니어\n","ogImage":{"url":"/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_0.png"},"coverImage":"/assets/img/2024-06-22-AdeepcutintoRxSwiftExploreitsmechanisms_0.png","tag":["Tech"],"readingTime":11},{"title":"오픈 소스의 힘 Flutter로 Maestro 성능 최적화 하는 방법","description":"","date":"2024-06-22 23:21","slug":"2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter","content":"\n마에스트로는 기본 또는 크로스 플랫폼 기술로 구축된 앱에 대한 최종 UI 테스트를 생성하는 가장 빠르고 쉬운 방법입니다. 마에스트로는 \"안드로이드 테스팅 프레임워크\"나 \"플러터 테스팅 프레임워크\"가 아니라, 접근성 정보에만 의존하는 \"UI\" 테스팅 프레임워크입니다.\n\n이 기사에서는 Flutter 앱을 테스트할 때 사용자가 마주한 문제와 우리가 Flutter 오픈 소스 프로젝트에 기여함으로써 그 문제를 어떻게 해결했는지 알아볼 수 있을 거예요!\n\n# Flutter에 대한 간단한 소개\n\nFlutter에 익숙하지 않은 분들을 위해, Flutter는 Dart 언어를 사용하여 앱을 구축하기 위한 크로스 플랫폼 프레임워크입니다. Flutter에서 UI의 거의 모든 부분(버튼, 목록, 화면 전체)을 위젯이라고 부릅니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n플러터의 독특한 특징 중 하나는 게임 엔진처럼 작동한다는 점입니다. 위젯은 캔버스 위에 직접 렌더링됩니다. 이에는 많은 장점이 있지만, 네이티브 구성 요소를 사용하지 않기 때문에 안드로이드와 iOS에서 제공하는 기본 UI 프레임워크에서처럼 UI를 설명하는 의미 정보를 자동으로 제공할 수 없습니다. 대신, 플러터 위젯은 전체 의미 정보 트리를 직접 구성합니다.\n\n## 플러터에서의 의미 정보\n\n여기서 플러터의 구성 요소인 접근성 브릿지라는 것이 필요합니다. 이는 플러터 앱 내부에 존재하는 가상 의미 트리를 TalkBack이나 VoiceOver와 같은 스크린 리더가 이해할 수 있는 네이티브 의미 트리로 번역합니다. 또는 Maestro와 같은 접근성 기반 테스트 프레임워크에서 이해할 수 있도록 합니다!\n\n![이미지](/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_0.png)\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n당연히 이것은 단순화된 내용입니다 (Flutter는 시맨틱 트리라는 다른 트리에서 접근성 정보를 유지합니다), 하지만 핵심은 동일합니다.\n\nFlutter의 탁월한 접근성 지원 덕분에 Maestro는 항상 훌륭하게 작동했습니다.\n\n## Flutter에서의 키\n\n반응형 프레임워크(예: React 또는 Flutter)를 사용한 적이 있다면 키(Key) 개념에 익숙할 것입니다. Flutter의 모든 위젯은 선택적인 \"key\" 인수를 받습니다. 키는 프레임워크가 어떻게 하나의 위젯이 다른 위젯을 대체하는지 제어하는 데 사용됩니다. 예를 들어 편집 가능한 목록에서 자주 발생하는 경우입니다. 키는 위젯을 화면에서 고유하게 식별하는 데도 사용될 수 있지만 그것이 주요 목적은 아닙니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 문제 설명\n\n몇 달 전에 Maestro 사용자 중 한 명이 GitHub에 흥미로운 기능 요청을 제출했습니다. 그는 Maestro가 키를 기반으로 플러터 앱과 상호 작용할 수 있기를 원했습니다:\n\n![image](/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_1.png)\n\n다시 말해, 그는 Maestro 플로우에서 이 코드를 작성할 수 있기를 원했습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- tapOn:\n  flutterKey: add_comment\n- tapOn:\n  flutterKey: comment_text_field\n- inputText: Mobile UI Testing, Simplified.\n\n이 기능 요청은 Maestro 사용자들에게 중요한 것으로 나타났습니다 - 빠르게 30개의 좋아요를 받아 GitHub 저장소에서 두 번째로 많이 추천된 이슈가 되었습니다!\n\n<img src=\"/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_2.png\" />\n\n커뮤니티로부터 이러한 강력한 피드백을 받아 우리는 이 문제에 대해 심층적으로 알아보기로 결정했습니다. 다행히 이 이슈 작성자는 자체적으로 flutter_driver 패키지를 사용한 초기 구현을 공유하기도 했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 입력: flutter_driver\n\n플러터 드라이버는 플러터의 원본 솔루션으로 엔드 투 엔드 UI 테스트를 위한 것입니다. 사용하려면, 개발자는 flutter_driver 패키지에 종속성을 추가하고 앱 시작 중에 이를 초기화해야 합니다. 그런 다음 테스트 스크립트를 Dart로 작성하여 호스트 기계에서 실행합니다. 테스트 스크립트는 웹소켓을 통해 실행 중인 앱과 JSON-RPC 명령(탭 또는 enterText와 같은)을 주고받습니다.\n\n![이미지](/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_3.png)\n\n드라이버 스크립트는 플러터 앱을 실행하는 동일한 Dart VM과 통신하기 때문에 탭, 클릭, 텍스트 입력 등 다양한 작업을 수행할 수 있습니다. 이는 위젯 키로 위젯을 찾는 것도 가능합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nasync void main() {\n  final driver = await FlutterDriver.connect();\n  await driver.tap(find.byValueKey('add_comment'));\n  await driver.close();\n}\n```\n\nflutter_driver의 중요한 제한 사항은 Flutter에 의해 렌더링된 UI와만 상호 작용할 수 있다는 것입니다. 즉, 권한 대화상자와 같은 네이티브 UI 요소에 액세스할 수 없다는 것입니다. 다행히 Maestro는 이미 시맨틱 정보를 사용하여 네이티브 UI와 상호 작용하고 있기 때문에 이것은 문제가 되지 않습니다.\n\n지금까지 잘 진행되고 있습니다. 그럼 함정은 무엇일까요?\n\n# flutter_driver에서 문제점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지금까지 몇 년 동안 플러터 팀에 의해 flutter_driver가 서서히 제거되고 있습니다. 제거될 예정이라는 신호는 없지만 구글 내부를 포함한 많은 기존 테스트가 이에 의존하므로 지원, 버그 수정 또는 개발을 거의 받지 않고 있습니다. 이는 처리되지 않은 이슈의 많은 숫자에서 확인할 수 있습니다.\n\n플러터 개발자들은 flutter_driver에서 integration_test 플러그인으로 이주하도록 권장받습니다. integration_test 플러그인은 flutter_driver의 몇 가지 문제점(예: 완전한 블랙박스인 것, JSON을 주고받기만 하는 것)을 해결하지만 새로운 문제점을 도입하고, 여전히 심각한 UI 테스트에 대한 실용적인 솔루션은 아닙니다. 또한 2021년 1분기에 Flutter 2.0에서 출시된 이후 큰 업데이트를 받지 않았습니다.\n\n이제 flutter_driver를 안정적인 기반으로 보지 않는 이유를 이해하셨습니다. 하지만 안정성과 유지 보수 측면을 제외하고도 다른 심각한 단점들이 있었습니다.\n\n## 릴리스 빌드에서 작동하지 않음\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n플러터 드라이버는 디버그 및 프로필 모드로 빌드된 앱에서만 작동합니다. 이 제한은 Dart VM 서비스 확장으로 구현되었기 때문에 릴리스 빌드에서는 비활성화된 서비스 확장으로 인해 발생합니다. 이 동작을 변경하려면 패키지를 포크하고 서비스 확장 대신 일반 HTTP 서버를 사용해야 합니다.\n\n## 앱 코드 수정 필요\n\n앱 개발자는 pubspec.yaml 파일에 flutter_driver를 포함하고 일부 초기화 코드를 추가해야 합니다. 이로 인해 Maestro의 가장 인기 있는 기능 중 하나인 놀랍도록 간단한 설정 또는 설정 없음이 사라지게 됩니다.\n\n## 컨텍스트 전환\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n현재 선택한 flutterKey 인수를 selectors에 추가해도 테스트 중인 Flutter 앱에서만 작동할 것입니다. 따라서 Maestro 사용자들은 테스트의 현재 \"컨텍스트\"(내 Flutter 앱이 현재 실행 중인가요?)를 추적해야 합니다. 이는 분명히 직관적이지 않습니다.\n\n## Flutter 위젯 트리와 의미 트리 간의 복잡한 상호작용\n\n탭 또는 입력 텍스트와 같은 간단한 경우는 잘 작동할 것입니다. 그러나 보다 복잡한 상황은 어떨까요? Maestro의 훌륭한 기능 중 하나는 강력한 selector 시스템입니다. 다음과 같이 복잡한 명령을 작성할 수 있습니다:\n\n```js\n- tapOn:\n    below: \"View above that has this text\"\n    above:\n        id: \"view_below_id\"\n    leftOf: \"View to the right has this text\"\n    rightOf: \"View to the left has this text\"\n    containsChild: \"Text in a child view\"\n    childOf:\n        - id: \"buy-now\"\n    containsDescendants:\n        - id: \"title_id\"\n          text: \"A descendant view has id 'title_id' and this text\"\n        - \"Another descendant view has this text\"\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n플러터 드라이버와 함께 작동할 수 있는 방법은 무엇일까요? 명확한 답이 없네요. 어떤 멋진 트리 병합을 사용해야 할까요? Maestro는 가장 간단하고 효과적인 테스트 프레임워크를 지향한다는 것을 기억하세요.\n\n## 불량 사례\n\n이 접근 방식은 전반적으로 Maestro에 플러터의 존재를 \"가르쳐 주어야 한다는\" 것을 필요로할 것입니다. 하지만 우리는 정말 그렇게 하고 싶지 않습니다. Maestro의 핵심 기능 중 하나는 당신이 앱을 작성하는 기술에 관계없이 항상 잘 작동한다는 것입니다. 이는 당신의 앱이 생성한 의미 정보만 사용함으로써 가능합니다. (내부 작동 방식에 대해 더 알아보려면 이 기사를 확인하세요).\n\n플러터를 위해 특별한 지원을 추가하면 잘못된 선례가 될 수 있습니다. 우리는 접근성만을 고려한 접근 방식에서 벗어나 Flutter를 지원하기 위해 존재하는 추가 코드를 유지해야 할 수도 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 다시 스케치하는 중\n\n플러터 드라이버 접근 방식이 마음에 들지 않았어요.\n\n에드워도(원래 이슈 작성자)가 제공한 초안 실행 방식만 사용하고 (화면 테스트 도구를 개발했던 제 경험을 많이 참고하여) 몇 가지 사고 실험을 진행했더니 이미 많은 문제점이 발견되었어요.\n\n한 발 물러나서 생각해 보았어요. 정말 옳은 문제를 해결하려고 노력 중인 걸까요?\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 시맨틱 위젯 — 누락된 조각\n\n처음에 Flutter 앱의 의미론 정보가 어떻게 AccessibilityBridge에 의해 네이티브 의미론으로 변환되는지 보여드렸습니다. 이것은 복잡한 시스템이지만, 앱 개발자의 관점에서는 위젯을 시맨틱 정보와 함께 주석 처리하기 위해 Semantics 위젯을 사용하는 것으로 이해할 수 있습니다:\n\n```js\nSemantics(\n  label: '이상한 빨간 상자 위젯',\n  child: InkWell(\n    onTap: () => launchUrl('https://youtu.be/YlUKcNNmywk?t=148'),\n    child: Container(width: 100, height: 100, color: Colors.red),\n  ),\n)\n```\n\nSemantics.label 필드는 AccessibilityBridge에 의해 접근성 레이블로 변환되며, 이는 텍스트 마에스트로의 선택기라고 불립니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\n- tapOn:\n    text: \"이상한 빨간 상자 위젯\"\n```\n\n접근성 레이블의 문제는 스크린 리더가 사용자에게 읽혀진다는 점입니다. 실제로 그것이 목적이죠. 도움이 되는 콘텐츠를 UI 테스트에 사용될 이상한 식별자로 대체하고 싶지 않으시겠죠. 악인이 되지 마세요!\n\n다행히도 안드로이드와 iOS의 기본 시맨틱 요소는 접근성 식별자도 지원합니다. 이는 접근성 레이블과 동일하지만 UI 테스트에만 사용됩니다. 스크린 리더는 이를 읽지 않습니다.\n\n마에스트로는 항상 시맨틱 식별자에 기반한 상호 작용을 지원해 왔습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```yaml\n- tapOn:\n    id: login_button\n```\n\nFlutter에서 작동하지 않는 이유는 무엇일까요? 답은 간단합니다: 'Semantics' 위젯에는 의미 식별자용 속성이 없습니다.\n\n빠른 구글 검색으로도 Flutter 문제인 \"테스트 목적을 위한 접근성 ID 누락\"이라는 적절한 이름의 문제가 확인되었습니다.\n\n<img src=\"/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_4.png\" />\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n테스트와 관련된 Flutter 이슈 중에서 가장 많이 투표를 받은 문제였어요. 2018년 5월 생성되어 129개의 투표를 받았죠. 접근성 식별자가 빠져 있어서 짜증났던 사람들이 우리뿐만이 아니었다는 사실을 알게 되었어요!\n\n만약 이 문제를 해결하면, Maestro 사용자뿐만 아니라 Flutter 앱을 진지하게 테스트하고자 하는 모든 사람들이 혜택을 받을 거예요.\n\n# Plan B — Flutter 수정하기\n\n이 문제를 해결하는 데 시간이 좀 걸렸어요. 5년 동안 120개의 댓글을 다 읽는 것은 꽤 어려운 작업이었죠! 하지만 해냈고, 이미 필요한 변경이 무엇인지 대충 감이 왔어요 — Semantics 위젯에 식별자 속성을 추가해야 합니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nSemantics(\n  identifier: 'tap_me',\n  label: 'A weird red box widget',\n  child: InkWell(\n    onTap: () => launchUrl('https://youtu.be/YlUKcNNmywk?t=147'),\n    child: Container(width: 100, height: 100, color: Colors.red),\n  ),\n)\n```\n\n위젯을 시멘틱스 식별자로 탭하려면:\n\n```js\n- tapOn:\n    id: \"tap-me\"\n```\n\n## 장단점\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n새로운 \"fix Flutter approach\"가 매력적으로 보였어요. 이점들은 분명하게 있었습니다:\n\n- 높은 보상 — 모든 것들이 갑자기 작동하기 시작할 거에요\n- Maestro의 철학에 충실 — 설정이 제로이고 사용하기 쉽고 간단함\n- flutter_driver의 문제점이 전혀 없어요\n\n불확실한 점들도 몇 가지 있었어요:\n\n- 외부 프로젝트에 (복잡한 지도) 기여가 필요해요\n- 프로젝트 소유자들이 받아들일 수도 없을 기여가 필요해요\n- 받아들여진다 해도, 주기적으로 큰 Flutter 릴리즈에만 사용 가능할 거에요, 이는 매 분기마다 일어나요\n- 앱 개발자들은 이를 활용하기 위해 Flutter 버전을 업그레이드해야만 할 거에요\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다행히도이 기능 요청은 긴급하지 않았기 때문에 우리는 시간을 들여 제대로 처리하기로 결정했습니다. \"Flutter 방식 수정\"이 실패할 경우 언제든지 \"flutter_driver 접근 방식\"을 재고할 수 있을 것이기 때문입니다.\n\n# 구현\n\n가장 재미있는 부분!\n\n우리가 기여한 기능은 간단해 보이지만, Flutter의 모든 레이어 — 프레임워크, 엔진 및 Android 및 iOS 내장 프로그램 — 에 변경이 필요했고, 다양한 프로그래밍 언어 — Dart, Java, Objective-C++ 및 C++ — 을 사용하여 일부 코드를 작성해야 했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n<img src=\"/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_5.png\" />\n\n플러터 프로젝트는 Framework(flutter/flutter)와 Engine(flutter/engine)로 두 가지 주요 리포지토리로 나뉘어져 있어요.\n\nFramework에서의 변경사항은 빠르고 즐거웠지만, Engine은 완전히 다른 수준이었어요. 수십만 줄의 코드가 있었죠. 컴파일하는 데 한 시간을 기다리는 것은 재미 없었지만 다행히도 점진적 빌드는 단 몇 분밖에 걸리지 않았어요.\n\n또한, 플러터 프로젝트는 모든 PR이 master로 병합되기 전에 모두 초록색이어야 한다고 강요하고 있어요. 이로 인해 Framework ↔ Engine 경계에서 일부 내부 API를 변경해야 했고, 결과적으로 빨간색 CI가 발생했던 어려움이 있었어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![이미지](/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_6.png)\n\n의도적인 순환 종속성은 프레임워크와 호환되지 않는 엔진 변경 사항을 병합할 수 없도록 합니다.\n\n임시 API를 도입하고 식별자 속성을 주의 깊게 추가함으로써 이 문제를 해결했습니다. 결과적으로 5개의 풀 리퀘스트가 생성되었습니다:\n\n- [엔진] 임시 API 추가\n- [프레임워크] 임시 API에 종속\n- [엔진] 원본 API를 임시 API와 동일하게 업데이트\n- [프레임워크] 원본 API에 종속, 임시 API에 대한 종속 제거\n- [엔진] 임시 API 제거\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n프로세스는 상당히 복잡했지만, Flutter와 같은 큰 프로젝트에서 완벽한 의미를 가집니다.\n\n# 결과\n\n성공! 🎉\n\n새 Semantics.identifier 속성은 Android 및 iOS의 원래 접근성 트리에 존재하며 Maestro 및 Maestro Studio 모두에서 매끄럽게 작동합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그리고 깜박해서 Flutter에서 가장 많은 추천을 받은 테스팅 이슈 #1도 해결해 버렸어요! 그리고 이건 Maestro뿐만 아니라 모든 모바일 UI 테스팅 프레임워크를 사용하는 사용자들을 위해 한 거에요! 그래서 여전히 Appium을 사용해서 Flutter 앱을 테스트하고 Maestro로 전환하고 싶지 않은 경우에도, 여전히 당신의 기여에서 이익을 얻을 수 있어요.\n\n커뮤니티에서는 5년 된 이슈가 해결되어 기뻤답니다 🤠\n\n<img src=\"/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_7.png\" />\n\n# 지금 바로 시도해보세요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n최신 안정화된 Flutter 3.19 릴리스에서는 이미 Semantics.identifier을 사용할 수 있어요:\n\n```js\n$ flutter channel stable\n$ flutter upgrade\n```\n\n또한 Flutter 문서도 업데이트했습니다 — 이제 Semantics.identifier 사용법을 설명하는 것뿐만 아니라 더 포괄적이고 유용해졌어요 🙌\n\n지금은 이만 글을 마치겠습니다 — 다음에 또 뵙겠습니다!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아직 Maestro를 사용하여 Flutter 앱을 테스트해보지 않았다면, 지금 해보세요! 확실히 머리가 터질 것입니다. 여기에서 시작하고 Slack에 참여해주세요!\n","ogImage":{"url":"/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_0.png"},"coverImage":"/assets/img/2024-06-22-Thepowerofopen-sourceMakingMaestroworkbetterwithFlutter_0.png","tag":["Tech"],"readingTime":16},{"title":"제가 처음으로 애플 스토어에 앱을 배포한 방법 1","description":"","date":"2024-06-22 23:20","slug":"2024-06-22-HowIpublishedmyfirstapptoAppleStore1","content":"\n![이미지](/assets/img/2024-06-22-HowIpublishedmyfirstapptoAppleStore1_0.png)\n\n# 배경\n\n안녕하세요! 저는 울라즈입니다. 첫 번째 iOS 애플리케이션을 작성 중이에요. 지난 주에 물병에서 물을 쏟아 노트북이 고장 났어요. 그래서 다음 몇 주 동안 코딩을 못하니 대신 글을 쓸 거예요...\n\n지난 몇 년 동안 자신의 일을 시작하고자 끊임없이 생각했어요. 나 자신을 위해 일하는 것을 꿈꿨죠. 새로운 사업을 시작하기 위한 기준은 몇 가지가 있었어요. 여가 시간에 해야하고 필요한 기술이나 배우기를 원하는 욕망이 있어야 했어요. 그리고 초기 투자가 적고 6개월 이내에 초기 결과를 볼 수 있는 잠재력이 있어야 했어요. 드롭 배송이나 프린트 온 디맨드 티셔츠 스토어부터 내 카페나 어린이 장난감 가게까지 아이디어는 다양했어요. 많은 아이디어가 지루해서 폐기되었지만 무언가가 동작하지 않을까 두려워서 대부분이었어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n두 해 전에 아빠가 되었고 성장하는 아기의 활동을 추적하기 위해 앱을 다운로드했어요. 이름은 기억이 안 나지만 목적을 잘 해결해 주었어요. 유료로 제공되어야 했던 몇 가지 기능이 구독 없이 사용할 수 없어서 아쉬웠지만, 급하게 제 자신의 앱을 만들어보려고 생각했어요.\n\n<img src=\"/assets/img/2024-06-22-HowIpublishedmyfirstapptoAppleStore1_1.png\" />\n\n이 아이디어가 마음에 들어서 모든 조건을 충족시킬 수 있다고 생각했어요: 매일 1~2시간을 코딩할 수 있었고, 휴대폰 개발을 배우고 싶었으며, 자금이 필요하지 않았어요 (전혀 사실이 아니라면, 다음 부분에서 설명할게요), 그리고 6개월 안에 완성할 수 있을 것 같았어요. 판매할 계획은 없었고, 주된 목적은 배우기와 개인적인 용도였어요. 릴리스 프로세스를 간소화하고 싶었기 때문에 변화를 가하기 위해 쉽게 새 버전을 릴리스할 수 있지 않을까 생각했어요. 만약 모든 것이 잘 풀린다면 미래에 수익창출을 시도하고 수동적인 소득을 얻을 수 있겠죠. 그래서 밤에 피트니스 볼 위에 앉아 딸을 흔들며 한 손으로 타이핑을 시작했어요.\n\n첫 번째 일은 무엇을 작성할지와 어느 플랫폼을 위해 작성할지를 결정하는 것이었어요. iOS에만 제한하지 않기로 결정해서 안드로이드 스마트폰 사용자들이 제 아름다운 작품을 사용할 기회를 놓치지 않게 하려고 했죠. 그래서 React Native과 Flutter 중에서 선택했어요. 회사에서 내부 서비스를 지원하기 위해 React를 배워야 했는데, React Native를 선호하는 이유였죠. 공식 문서를 보고 예상대로 시작해봤는데, 시뮬레이터에서 Hello World 예제를 실행하려고 해보니 예상보다 순조롭지 않았어요. 환경 설정 과정이 어색해서 제 동기부여가 금방 떨어졌어요. 종속성이 설치되지 않고, 시뮬레이터가 실행되지 않거나 이유를 알 수 없이 다운되기도 했어요. 게다가 앱 릴리스 프로세스가 불분명해서 2~3주간 투쟁한 끝에 아이디어를 포기했어요. 게다가 우리 아이의 일상이 안정되고 유료 앱을 사용하지 않게 되었거든요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![앱 이미지](/assets/img/2024-06-22-HowIpublishedmyfirstapptoAppleStore1_2.png)\n\n아홉 달이 지나자 우리는 다른 도시로 이사를 가게 되었고, 저는 체육관에 가입했어요. 이전에도 시도해 봤지만 오래 기억하지 못했어요. 이번에는 체육관이 걸어서 2분 거리에 있어서 규칙적으로 빠뜨릴 가능성이 거의 없었어요. 세트와 무게를 기록할 앱을 찾기 시작했고, 여러 개가 있었어요. 처음 발견한 앱이 나에게 적합했지만, 시간이 지남에 따라, 한 세트만 주석을 남길 수 없고, 세 개 이상의 루틴을 만들 수 없다는 것을 깨달았어요.\n\n그래서 나는 내 앱 아이디어로 돌아가고 무엇으로 쓸지 고민했어요. 이번에는 가장 쉬운 길인 작게 시작하고 빨리 배우는 길을 선택하기로 결정했어요. 주로 나 자신을 위해 쓰기 때문에, iOS만 지원하도록 제한하기로 했어요. 진입 장벽이 매우 낮았고, 애플의 공식 자습서로 시작했고, 처음 두 시간 안에 시험 앱을 핸드폰에 올렸어요. 그래서 매일 업무를 끝낸 후에 운동 기록 앱을 만들기 시작했어요 💪.\n\n지금까지입니다! 끝까지 읽어 주신 모든 분들께 감사드려요!\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다음 게시물에서는 다음과 같은 주제를 다룰 예정입니다:\n\n- 개발 프로세스 및 왜 스위프트를 배우지 않고 ChatGPT에게 물어보기로 결정했는지\n- 첫 번째 릴리스\n- 향후 계획\n\n여기서 스크린샷을 확인하거나 다운로드할 수 있습니다. 광고나 등록이 필요하지 않으며 무료로 제공됩니다.\n","ogImage":{"url":"/assets/img/2024-06-22-HowIpublishedmyfirstapptoAppleStore1_0.png"},"coverImage":"/assets/img/2024-06-22-HowIpublishedmyfirstapptoAppleStore1_0.png","tag":["Tech"],"readingTime":4},{"title":"안드로이드 앱 부정 방지 프로모션 남용을 막기 위한 최적의 디바이스 ID 선택 방법","description":"","date":"2024-06-22 23:17","slug":"2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention","content":"\n⚡주요 요점:\n\n- 프로모션 남용은 비즈니스의 가입 보너스, 추천, 쿠폰 또는 프로모션을 악용하는 사기 유형입니다.\n- 가능한 경우에는 MediaDRM을 디바이스 지문보다 선호해야 합니다.\n- 우리의 연구 결과, 블록리스트에 가장 적합한 최고의 디바이스 ID는 MediaDRM+디바이스 모델의 결합입니다.\n- 모바일 앱 백엔드 API를 보호하는 AppiCrypt(앱 보호), RASP(앱 쉴딩) 및 KYC 솔루션(고객 신원 확인)과 같은 여러 보안 계층을 항상 포함해야 합니다.\n- 특정 시나리오에 따라 다른 접근 방식이 필요할 수 있다는 것을 염두에 두세요. info@talsec.app으로 메시지를 남기면 Talsec 보안 전문가가 도와드릴 것입니다.\n\n# 사용자 파악 방법?\n\n최근에 모바일 디바이스 식별에서 어려움에 부딪혔습니다 - 사용자 개인정보를 침해하지 않으면서 사기적인 디바이스를 식별하고 블록리스트에 올리는 방법은 무엇일까요. 이 문제는 결제 회피 또는 다양한 보너스를 악용하는 사용자들과 빈번히 대면하는 모바일 애플리케이션 소유자에게 특히 중요합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n초기 가입 시 사용자들을 유혹하는 매력적인 보너스로 사용자를 유치하는 것은 흔한 일이지만, 이 전략은 내재적인 위험을 안고 있으며 남용될 수 있다는 점을 인지하는 것이 중요합니다. 이 악의적인 사용자들은 앱을 여러 번 다시 설치하여 계속해서 가입 보너스를 얻으려는 행위를 하는데, 이를 \"멀티 인스턴싱\"이라고 부릅니다.\n\n안드로이드는 각 앱 인스턴스마다 일부 디바이스 ID를 변경하므로, 동일한 악의적 사용자의 디바이스를 차단하기가 어려워집니다. 이는 효과적인 해결책을 찾기 위한 우리의 노력이 복잡함을 강조합니다.\n\n![이미지](/assets/img/2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_0.png)\n\n# 좋은 ID는 고유하며 충돌 방지, 지속적이고 개인정보 친화적이어야 합니다. 그리고 위조할 수 없어야 합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n과거에는 특별한 권한을 요청하지 않고 MAC 주소나 IMEI를 통해 기기를 식별할 수 있었어요. 오늘날 안드로이드 개인 정보 보호를 위한 다양한 변경 사항 이후, Android 기기에서 AndroidID, MediaDRM, GSF ID, FID 및 InstanceID와 같은 여러 반영구적 ID가 사용 가능해졌어요. 물론, 사용자에게 상승된 액세스 및 잠재적 보안 문제를 가진 권한을 요청하는 것은 현실적이지 않아요.\n\n각 ID에는 장단점이 있어 다양한 시나리오에서 유용하게 사용될 수 있어요. 아래 예시 테이블을 참고하세요. Android 문서에서 ID에 대한 추가 정보를 찾을 수 있어요.\n\n또 다른 방법으로는 다양한 디바이스 지문 라이브러리(예: fingerprintjs-android)를 사용하여 여러 기기 ID, 기기 상태, OS 지문 또는 설치된 앱을 기반으로 ID를 생성할 수 있어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n이 ID들을 더 자세히 살펴보겠습니다.\n\n# AndroidID, GSF ID, FID, InstanceID, Google 광고 ID\n\n이러한 식별 방법은 다른 맥락에서는 잘 작동할 수 있지만, 우리의 시나리오에서는 부정한 다중 인스턴싱에 견딜 수 있는 견고함이 부족합니다. 이러한 ID들은 비교적 쉽게 변경할 수 있으므로 각각에 대한 단점에 대해 간단한 설명만 제공하겠습니다.\n\n- AndroidID는 다시 패키징되거나 기기의 다른 사용자로 설치되는 경우 변경됩니다.\n- GSF ID (Google Play 서비스 프레임워크 ID)는 Google 기기에만 제한되며 XPrivacyLua에 의해 상대적으로 쉽게 위조될 수 있습니다. 또한 다른 사용자에 대해 변경됩니다.\n- FID (Firebase 설치 ID)는 재설치를 견뎌내지 못합니다.\n- InstanceID (GUID, UUID.randomUUID().toString())는 사용자 정의 생성 및 내부 저장 ID입니다만, 재설치를 견딜 수 없습니다.\n- Google 광고 ID는 전혀 적합하지 않습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n요약하면, 우리의 시나리오에서 나쁜 행위자를 식별하는 데 충분히 견고한 ID는 없습니다.\n\n# fingerprintjs-android 라이브러리 기반의 지문 ID\n\n참고: 전체 분석에서 우리는 상태 없는 오프라인 지문 ID를 위해 종합적인 신호 목록을 사용하는 fingerprintjs-android 라이브러리를 사용했습니다. 다른 지문 ID 라이브러리의 결과는 다를 수 있습니다. 이는 그들의 데이터 인사이트, 지리 위치, IP 위치, TEE 및 다른 요소에 기반한 더 많은 신호와 휴리스틱을 포함할 수 있습니다. Talsec는 fingerprintjs-android V3 및 StabilityLevel.OPTIMAL을 수집합니다. 안정성 수준 (STABLE — OPTIMAL — UNIQUE) 사이의 차이점은 여기에서 찾을 수 있습니다.\n\n위의 표를 다시 한 번 살펴보세요. 첫눈에는 하드웨어 지문 (위의 표 참조)가 최선의 선택일 수 있습니다. 이것은 인스턴트 앱 이벤트를 제외하고는 무엇이든 견딜 수 있습니다. 그러나 이 ID에는 한 가지 심각한 단점이 있습니다 — 충돌입니다. 이 충돌은 ID가 계산되는 방식에 의해 발생합니다. ID는 디바이스의 하드웨어에만 기반하기 때문에 발생합니다. 예를 들어, 조립 라인에서 직접 나오는 모든 삼성 갤럭시 Z 플립이 동일한 ID를 갖게 될 것입니다. 이 유형의 지문은 STABLE 지문이라고 불립니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_2.png](/assets/img/2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_2.png)\n\n한편, 고유한 지문(fingerprint)이 있습니다. 이것은 기기의 ID를 계산하기 위해 상당량의 신호를 사용합니다. 이 방식으로 생성된 ID는 하나의 사용자에게만 매칭될 가능성이 높습니다(충돌이 적음), 그러나 신호가 많기 때문에 ID가 자주 변경될 수 있습니다(예: 설정 변경시). 따라서 하나의 사용자에게 많은 ID가 생길 수 있어 우리의 사용 사례에는 유용하지 않습니다. 예: 설치된 앱이 변경되거나 데이터 로밍이 활성화/비활성화될 때 ID가 변경될 수 있습니다.\n\n세 번째 유형의 지문은 STABLE과 UNIQUE 지문 사이의 절충안인 OPTIMAL 지문입니다. 이 지문은 STABLE 지문보다는 덜 안정적이지만 더 고유하며 Talsec SDK에 의해 수집됩니다. 그러나 이 유형의 지문조차 이 기사에서 나중에 보여줄 것처럼 최적적이지 않습니다. 예: 사용자가 12시 및 24시간 형식으로 전환하거나 개발자 설정 또는 ADB가 활성화/비활성화될 때 ID가 변경될 수 있습니다.\n\n지문 예시: `f37fc958dc6d566a8f4bf1e0fd25b510`\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# MediaDRM\n\nMediaDrm은 프리미엄 콘텐츠 재생을 위해 암호화 키를 안전하게 제공하는 안드로이드 API입니다. Google의 Widevine 및 Microsoft의 PlayReady와 같은 DRM 공급자를 사용합니다. 초기 DRM 사용 중에는 장치 프로비저닝을 통해 장치의 DRM 서비스에 저장된 고유한 인증서를 획득합니다.\n\n이 API에서 제공되는 MediaDRM은 장치 상의 모든 사용자에게 동일하지만, 저희 상황에서는 위조하기 어렵고 많은 공격에도 견딜 수 있습니다. 이 ID를 얻으려면 권한이 필요하지 않습니다.\n\n하지만 여전히 제한 사항이 있습니다. MediaDrm을 지원하지 않는 장치에서는 사용할 수 없을 수 있습니다. 또한 동일한 제조업체의 장치 간에는 충돌이 많이 발생할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nMediaDRM 예시: `e3af1aa4dacb6b6637846488b511e7643c6ac20b65c95baad164b122ecb036b6`\n\n# MediaDRM vs 지문 ID?\n\n우리는 다섯 대의 기기와 에뮬레이터를 여러 개의 다중 인스턴싱 시나리오에서 테스트하고 ID가 변경되었는지 여부를 확인했습니다. 가장 흥미로운 부분은 MediaDRM과 Fingerprint (V3 & V5 Optimal)입니다. 그래서 우리는 특히 이 부분에 주의를 기울였습니다.\n\n다중 인스턴싱 시나리오:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 앱의 첫 설치\n- 앱 재설치\n- 작업 프로필에 설치\n- Island 앱을 사용하여 앱의 복제\n- Parallel Space를 사용하여 앱의 복제\n- 병렬 애플리케이션을 사용하여 앱의 복제\n- 두 번째 공간(Xiaomi)을 사용하여 앱의 복제\n- 손님 프로필에 설치\n- 공장 초기화\n- 안드로이드 에뮬레이터 대 실제 기기\n\n이 지루한 작업은 훌륭한 지문 OSS 데모 도구 덕분에 더 쉽게 진행되었습니다.\n\n<img src=\"/assets/img/2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_3.png\" />\n\n가장 중요한 관찰 결과를 여기에 나열하였습니다. 모든 테스트를 항상 수행할 수는 없었기 때문에 사소한 부분들은 모두 다시 시도했습니다 - 이는 공격자들이 시도할 것이기 때문입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n유지한 것 (= 좋은):\n\n- 미디어 DRM은 처음 설치 시 OnePlus 8 Pro의 Island App에서 동일하게 유지되었습니다.\n- 미디어 DRM은 Redmi Note 10 Pro의 두 번째 공간에서 동일하게 유지되었습니다.\n- 미디어 DRM은 OnePlus 8 Pro에서 공장 초기화 후에도 동일하게 유지되었습니다.\n- 미디어 DRM은 OnePlus 8T에서 처음 설치, 작업 프로필 및 여러 사용자에 대해 동일하게 유지되었습니다.\n- 첫 설치 및 병렬 공간에서의 OnePlus 8T의 Fingerprint V5 Optimal이 동일하게 유지되었습니다.\n- Redmi Note 10 Pro에서 다시 설치 후에도 미디어 DRM 및 Fingerprint V3 및 V5 Optimal이 동일하게 유지되었습니다.\n- OnePlus 8T의 첫 설치, 작업 프로필 및 병렬 공간에서 Fingerprint V5 Optimal이 다시 설치 후에도 동일하게 유지되었습니다.\n\n변경된 것 (= 나쁜):\n\n- 처음 설치 및 Island App에서 Fingerprint V5 Optimal이 변경되었습니다.\n- OnePlus 8 Pro에서 공장 초기화 후 Fingerprint V5 Optimal이 변경되었습니다.\n- Redmi Note 10 Pro의 두 번째 공간에서 Fingerprint V5 Optimal이 변경되었습니다.\n- OnePlus 8T의 병렬 공간에서 미디어 DRM이 변경되었습니다.\n- OnePlus 8T의 작업 프로필 및 게스트 사용자에서 Fingerprint V5 Optimal이 변경되었습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다른:\n\n- 에뮬레이터에서 FingerprintV3 Optimal이 Fingerprint V5 Optimal보다 성능이 더 좋았습니다.\n- Emulator 1과 Emulator 2에서 MediaDRM이 다르게 동작했는데 둘 다 동일한 Windows 기계에서 실행되었습니다.\n\n이러한 관찰을 바탕으로 Fingerprint V3과 V5 Optimal은 MediaDRM과 비교했을 때 많은 다중 인스턴스 사기 시나리오에서 실패했습니다. 이러한 테스트에서 우리는 MediaDRM이 더 나은 것으로 결론지었습니다.\n\n# 원시 데이터 분석\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n결과를 양적으로 파악하기 위해 우리는 데이터를 살펴보고 해당 ID들의 행동을 평가하여 데이터를 기반으로 가장 적합한 ID를 찾아냈습니다. 사용자 기반의 기기와 비교하여 우리의 데이터가 왜곡되어 있고 대표적이지 않을 수 있다는 점을 기억해 주세요.\n\n## 2주간의 데이터 수집\n\n우리는 2주 동안 freeRASP 데이터를 수집하여 분석했습니다. 이 기간이 비교적 짧기 때문에 다시 설치하는 경우가 많지 않다고 가정합니다. 다시 한 번 강조하지만, 특정 응용프로그램의 카테고리/사용 사례에 따라 실제 재설치 비율이 달라질 수 있으므로 이 창을 선택하는 데 실제 재설치 비율에 대한 연구가 없다는 점을 유의해 주세요.\n\n아래에서 각 ID의 고유 값 수와 이 데이터에서 캡처된 고유 디바이스 모델 수를 확인할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nAndroidID: 13 402 601\n\nFingerprintV3: 22 525 265\n\nMediaDRM: 13 285 081\n\nInstanceId: 13 740 706\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n다양한 기기 모델: 14,175 (예: Pixel 4, SM-G973N, ONEPLUS A5000, LG-H930, ...)\n\n처음에 봤을 때 다른 ID들의 수보다 훨씬 높은 FingerprintV3의 수를 알아차렸어요. 이것은 사용자가 32가지 관측된 지문 신호 중 일부를 변경할 때마다 변하는 FingerprintV3의 행동에 의한 것일 수 있어요.\n\n## ID들은 어떻게 관련이 있을까요?\n\n그 후, 우리는 ID들 간의 동시 발생을 살펴보았습니다. 이를 통해 그들 간의 관련성을 파악해 보았어요.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아래 테이블을 읽는 방법입니다. 하나의 AndroidID에는 1.00557개의 고유한 MediaDRM이 있으며, 고유한 AndroidID 중 0.54%가 하나 이상의 MediaDRM을 가지고 있습니다.\n\n## ID 충돌: 같은 ID지만 다른 기기\n\n데이터에 따르면, 우리는 여전히 \"최적\" 식별자를 찾고 있기 때문에 \"다른 기기\"가 무엇인지 말할 수 없습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n아이디 당 평균 모델 수를 살펴봐요. ID마다 모델이 하나만 있는 것이 이상적입니다 — 서로 다른 디바이스에 동일한 ID가 있는 충돌이 최소화되기를 바랍니다. 아래 표를 빠르게 살펴보면 진정한 불일치가 있음을 알 수 있어요.\n\n![표](/assets/img/2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_5.png)\n\n## 결과\n\n데이터 분석 결과, 다음과 같이 진술할 수 있어요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- FingerprintV3는 다른 ID들에 비해 값이 너무 많아서 우리 시나리오에서는 덜 유용합니다.\n- 하나의 AndroidID/MediaDRM/InstanceID에는 보통 여러 개의 FingerprintV3가 있습니다.\n- AndroidId와 MediaDRM은 대략 1:1 관계이며, 일부 MediaDRM 인스턴스에는 AndroidID보다 더 많은 AndroidID (AndroidId보다 더 많은 MediaDRM을 가지고 있는 경우도 있습니다).\n- 경우에 따라 하나의 AndroidID에는 여러 개의 InstanceID (MediaDRM보다 더 자주 발생), MediaDRM과 InstanceID 사이의 관계와 유사합니다.\n- InstanceID는 MediaDRM보다 AndroidID와 더 밀접한 관계에 있습니다.\n- AndroidID는 하나의 모델만 가지고 있습니다 (이상치의 양은 극히 적음).\n- MediaDRM은 일반적으로 하나의 모델을 가지나, 몇 가지 충돌이 있을 수 있습니다 (AndroidID의 경우보다 더 많음).\n- InstanceId는 이 두 모델 사이 어딘가에 위치합니다.\n\n총평으로, 이러한 식별자 중에서 AndroidID가 가장 우수해 보이며, MediaDRM이 그 뒤를 이어갑니다. InstanceId도 유용할 수 있지만 AndroidID만큼은 아닙니다. FingerprintV3은 우리 시나리오에서는 쓸모 없습니다. AndroidID는 다시 설치 후 변경되고 상대적으로 쉽게 위조될 수 있기 때문에 사기 탐지에는 MediaDRM이 가장 적합해 보입니다.\n\n다만, MediaDRM은 충돌이 꽤 많이 발생하는 것 같습니다 (모델 분석을 기반으로 확인한 결과). 같은 제조업체의 기기끼리(즉, 동일 제조업체의 기기일수록 다른 제조업체의 기기보다 더 같은 MediaDRM을 가질 가능성이 훨씬 높음) 충돌이 가장 자주 발생하는 것으로 밝혀졌습니다. 여기에 전반적인 개요를 제공해 드리겠습니다:\n\n- MediaDRM 중 0.005%가 여러 제조업체를 가지고 있음\n- MediaDRM 중 0.55%가 같은 제조업체의 여러 모델을 가지고 있음\n- 한 MediaDRM 당 평균 제조업체 수: 1.000085\n- 한 제조업체 당 MediaDRM의 평균 모델 수: 1.006362\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## MediaDRM를 개선할 수 있을까요?\n\n우리는 많은 시도(자세히 설명하지는 않겠습니다) 끝에 MediaDRM+모델의 조합을 잠재적 ID로 실험해 보았습니다.\n\n구글 Pixel 4의 MediaDRM+모델의 결합 예시: e3af1aa4dacb6b6637846488b511e7643c6ac20b65c95baad164b122ecb036b6+Pixel 4\n\n아래는 위와 동일한 공현 테이블이며, 이제 MediaDRM+모델과의 관계를 포함하고 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![Image](/assets/img/2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_6.png)\n\n우리는 MediaDRM+ 모델이 원래의 MediaDRM보다 더 나은 성능을 보여준다는 것을 확인할 수 있습니다. 각 MediaDRM+ 모델에는 연관된 다른 ID의 수가 더 적습니다. 이는 몇 가지 충돌을 피했다는 것을 의미합니다 (정확한 숫자를 측정하기는 어렵지만, 최소한의 경계는 MediaDRM과 MediaDRM+ 모델의 숫자로 추정됩니다).\n\n두 가지 특성의 조합으로 ID를 만들 때, 한 기기가 더 많은 ID를 가지는 문제가 발생할 수 있습니다. 그러나 MediaDRM+ 모델에서는 이런 경우가 발생하지 않아야 합니다. 한 기기에는 하나의 모델만 연결되어야 하기 때문에 (즉, 구글 픽셀 4 전화기의 물리적 단위는 항상 \"Pixel 4\" 모델 이름만을 가져야 함).\n\n그러므로 데이터를 기반으로, 사기 탐지 사례를 검토할 때 MediaDRM과 기기 모델의 간단한 조합을 ID로 사용하는 것을 제안합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 요약\n\n저희는 모바일 기기 식별에 대한 도전에 직면하고 있습니다 — 사용자 개인 정보를 침해하지 않고 사기꾼 기기를 차단하는 방법에 대해 고민하고 있습니다. 모바일 앱 소유자들은 사용자들이 결제를 회피하거나 보너스를 악용하는 문제에 직면하고 있는데, 이는 여러 번 앱을 재설치함으로써 이루어지는 다중 인스턴스화로 인한 문제입니다. 신뢰할 수 없는 기기 ID로 인해 꾸준한 악의적인 사용자를 식별하는 것이 어려워지고 있습니다. 저희의 연구 결과는 효과적인 차단을 위해 미디어 DRM을 기기 지문보다 우선시하는 것을 권장하며 (또는 더 나아가 미디어 DRM과 기기 모델 조합을 권장합니다). 또한 AppiCrypt, RASP 및 KYC 솔루션과 같은 추가적인 보안층으로 보호 강화를 잊지 마세요. 모든 시나리오는 유니크합니다. 맞춤형 조언이 필요하시면 info@talsec.app 으로 Talsec 보안 전문가에게 문의하세요.\n\n저자: Dáša Pawlasová, Matúš Šikyňa, Tomáš Soukal\n","ogImage":{"url":"/assets/img/2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_0.png"},"coverImage":"/assets/img/2024-06-22-Fraud-ProofinganAndroidAppChoosingtheBestDeviceIDforPromoAbusePrevention_0.png","tag":["Tech"],"readingTime":15},{"title":"2024 최신 Flutter에서 Bloc 사용법 효율적인 상태 관리 가이드","description":"","date":"2024-06-22 23:16","slug":"2024-06-22-Flutter-Bloc","content":"\n![Bloc](/assets/img/2024-06-22-Flutter-Bloc_0.png)\n\n## Bloc이란?\n\nBloc은 '비즈니스 로직 구성 요소'의 약자로, Google에서 권장하는 패턴 중 하나입니다. 이 패턴은 비즈니스 로직을 UI로부터 분리할 수 있도록 도와줍니다. 또한 응용 프로그램에서 책임을 분리하여 쉽게 테스트 가능한 코드를 작성할 수 있는 패턴입니다. Google에서 권장하는 다른 패턴은 여기에서 확인할 수 있습니다.\n\nBloc은 세 가지 구조로 구성됩니다. 이들은 이벤트 클래스, 상태 클래스 및 Bloc 클래스입니다. 이제 이들을 좀 더 자세히 살펴보겠습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n![img](/assets/img/2024-06-22-Flutter-Bloc_1.png)\n\n1. 이벤트:\n   이벤트는 응용 프로그램에서 수행하려는 작업을 나타냅니다. 연락처 응용 프로그램을 고려해보세요. 이 경우, 이벤트는 GetUsers, UpdateUser, DeleteUser 등이 될 것입니다. 이 이벤트에 대한 추상 클래스가 있으며, 다른 이벤트들은 이 추상 클래스를 상속받아 사용합니다.\n\n응용 프로그램에서 수행하려는 작업에 따라 직접 이벤트를 만들어야 합니다.\n\n2. 상태:\n   상태는 응용 프로그램에서 발생할 수 있는 상황을 나타냅니다. 어떤 상황에서 무엇을 해야 할지를 결정하는 데 사용됩니다. 연락처 앱의 경우 UsersInitial, UsersLoading, UsersLoaded 및 UsersError 등이 있을 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n3. 블록:\n   Bloc 클래스를 중간 클래스로 생각할 수 있습니다. 이 클래스는 이벤트와 상태를 연결합니다. 이벤트가 트리거되면, 어떤 함수가 호출될지와 어떤 상태로 애플리케이션이 전환될지는 블록 클래스에서 결정됩니다.\n\n## 블록 사용\n\n저는 Bloc을 사용하여 프로젝트를 개발했습니다. 이 프로젝트에는 화면이 있습니다. 이 화면에서는 The Last Airbender에서 캐릭터를 무작위로 가져올 수 있습니다. 저는 Clean Architecture로 프로젝트를 개발했지만, 이 이야기에서는 블록의 사용법만 설명합니다. Clean Architecture에 대한 자세한 내용은 여기에서 읽을 수 있습니다. 프로젝트 개발 중에는 The Last Airbender API를 사용했습니다.\n\n## 예제 채우기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저 코어, 구성 및 기능 폴더를 생성했습니다. 그런 다음 fetch characters의 기능을 위해 features 폴더 내에 characters 폴더를 만들었습니다. 마지막으로 characters 폴더 내에 데이터, 도메인 및 프리젠테이션 폴더를 생성했습니다.\n기능 폴더에 bloc 폴더를 만들었습니다. 이는 Bloc이 애플리케이션의 비즈니스 로직에 사용되기 때문입니다.\n\nBloc의 세 부분인 이벤트, 상태 및 bloc 파일을 추가했습니다.\n\n![2024-06-22-Flutter-Bloc_2.png](/assets/img/2024-06-22-Flutter-Bloc_2.png)\n\n## 코드 예시\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n먼저, 제가 CharactersInitial, CharactersLoading, CharactersError 및 CharactersLoaded 상태를 결정했고 CharactersState를 추상 클래스로 만들었습니다. 그런 다음 다른 상태에 CharactersState에서 상속을 제공했습니다.\n\n```js\npart of 'characters_bloc.dart';\n\nabstract class CharactersState {}\n\nclass CharactersInitial extends CharactersState {}\n\nclass CharactersLoading extends CharactersState {}\n\nclass CharactersLoaded extends CharactersState {\n  CharacterEntity character;\n  CharactersLoaded({required this.character});\n}\n\nclass CharactersError extends CharactersState {\n  String? errorMessage;\n  CharactersError(this.errorMessage);\n}\n```\n\n둘째로, 이벤트를 위한 추상 클래스를 만들었습니다. 이 어플리케이션에서는 캐릭터만 가져올 것이기 때문에 GetCharacter 이벤트만 생성했습니다. 그리고 CharactersEvent 클래스에서 GetCharacters 클래스로 상속을 제공했습니다.\n\n```js\npart of 'characters_bloc.dart';\n\nabstract class CharactersEvent {}\n\nclass GetCharacters extends CharactersEvent {}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nBloc으로부터 CharactersBloc으로 상속을 받았고, 클래스의 생성자 메서드에 이벤트를 추가했습니다. 그런 다음 데이터를 가져오기 위해 getCharacters 함수를 만들었습니다. 이 함수에서 API 결과에 따라 상황을 트리거했습니다.\n\n```js\npart 'characters_event.dart';\npart 'characters_state.dart';\n\nclass CharactersBloc extends Bloc<CharactersEvent,CharactersState> {\n   final GetCharacterUseCase _getCharactersUseCase;\n   CharactersBloc(this._getCharactersUseCase) : super(CharactersInitial()){\n     on<GetCharacters>(getCharacters);\n   }\n\n\n   Future<void> getCharacters(GetCharacters event, Emitter<CharactersState> emit) async {\n     emit(CharactersLoading());\n     final dataState = await _getCharactersUseCase.call(null);\n     if(dataState is DataSuccess){\n       emit(CharactersLoaded(character: dataState.data!));\n     } else if(dataState is DataFailed){\n       emit(CharactersError(dataState.exception!.message));\n     }\n   }\n}\n```\n\n마지막으로 CharactersPage를 작성했습니다. 상태를 감시하기 위해 BlocBuilder를 사용했습니다. 이것은 상태가 변경되었을 때 관련 함수를 반환할 수 있기 때문입니다.\n\n```js\n_buildBloc() {\n    return BlocBuilder(\n      bloc: _bloc,\n      builder: (BuildContext context, state) {\n        if(state is CharactersLoading){\n          return _showLoadingAnimation();\n        } else if(state is CharactersLoaded){\n          return _buildCharactersList(state);\n        } else if(state is CharactersError){\n          return _buildErrorView(state);\n        } else {\n          return _buildInitialView();\n        }\n      },\n    );\n  }\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n화면이 로드되면 GetCharacters 이벤트를 트리거합니다.\n\n```dart\n@override\nvoid initState() {\n  super.initState();\n  _bloc.add(GetCharacters());\n}\n```\n\n자세히 살펴보고 싶다면 GitHub 링크를 여기에서 찾을 수 있어요.\n\n😊 읽어 주셔서 감사합니다 😊\n","ogImage":{"url":"/assets/img/2024-06-22-Flutter-Bloc_0.png"},"coverImage":"/assets/img/2024-06-22-Flutter-Bloc_0.png","tag":["Tech"],"readingTime":6},{"title":"iOS에서 URLCache 사용하기 초보자를 위한 가이드","description":"","date":"2024-06-22 23:15","slug":"2024-06-22-URLCacheiniOSABeginnersGuide","content":"\n![이미지](/assets/img/2024-06-22-URLCacheiniOSABeginnersGuide_0.png)\n\niOS 개발자로서, 네트워크 요청을 효율적으로 관리하고 데이터를 캐시하는 방법을 이해하는 것은 앱의 성능과 사용자 경험을 크게 향상시킬 수 있습니다. URLCache는 애플이 제공하는 내장 프레임워크 중 하나로, 여러분이 이용할 강력한 도구 중 하나입니다. 이 가이드에서는 무엇인 URLCache인지, 핵심 개념, 실제 응용 사례, 그리고 iOS 프로젝트에서 효과적으로 사용하는 방법에 대해 알아보겠습니다.\n\n# URLCache란 무엇인가요?\n\nURLCache는 iOS의 Foundation 프레임워크에서 제공하는 메커니즘으로, URLSession과 같은 URL 로딩 시스템에서 응답을 캐시하여 네트워크 요청의 효율성을 향상시킬 수 있습니다. 이미지, JSON 또는 기타 리소스와 같은 다운로드된 데이터를 기기의 로컬에 저장하여 동일한 데이터를 반복적으로 네트워크에서 다시 가져오는 필요성을 줄입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 핵심 개념\n\n- 캐싱 정책: URLCache를 사용하여 다른 유형의 요청에 대한 캐싱 정책을 정의할 수 있습니다. 응답이 캐시에 얼마나 오랫동안 저장되어야 하는지 및 어떤 조건에서 서버를 통해 다시 유효성을 검사해야 하는지를 결정합니다.\n- 저장: 캐시된 응답은 디스크 기반 캐시에 저장되므로 앱이 닫혀도 다시 열릴 때까지 유지됩니다.\n- 유효성 검사: URLCache는 캐시된 응답을 서버와 유효성을 검사하기 위한 메커니즘을 제공하여 해당 응답이 여전히 유효하고 최신인지를 확인합니다.\n\n# 실용적인 응용\n\nURLCache는 다양한 시나리오에서 네트워크 요청을 최적화하고 사용자 경험을 향상시키는 데 사용할 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 성능 향상: 자주 액세스하는 데이터를 로컬로 캐싱하여 지연 시간을 줄이고 앱의 응답성을 향상시킬 수 있습니다.\n- 오프라인 지원: 캐시된 데이터는 기기가 오프라인 상태일 때도 액세스할 수 있어 사용자에게 원활한 경험을 제공합니다.\n- 대역폭 사용량 감소: 응답을 캐싱함으로써 네트워크를 통해 전송되는 데이터 양을 줄일 수 있습니다. 특히 데이터 요금제가 제한된 사용자에게 유용합니다.\n\n# URLCache 사용 방법\n\niOS 앱에서 URLCache를 사용하는 기본적인 단계를 살펴보겠습니다:\n\n## 초기화\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n지정된 메모리 용량 및 디스크 용량으로 URLCache 인스턴스를 초기화할 수 있어요:\n\n```js\nlet memoryCapacity = 4 * 1024 * 1024 // 4 MB\nlet diskCapacity = 100 * 1024 * 1024 // 100 MB\nlet urlCache = URLCache(memoryCapacity: memoryCapacity, diskCapacity: diskCapacity, diskPath: \"myCache\")\nURLCache.shared = urlCache // 공유 캐시로 설정\n```\n\n## 네트워크 요청 만들기\n\nURLSession을 사용하여 네트워크 요청을 만들 때 URLRequest에 지정된 캐싱 정책을 기반으로 URLCache가 자동으로 캐싱을 처리해 줘요:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```js\nlet url = URL(string: \"https://api.example.com/data\")!\nvar request = URLRequest(url: url)\nrequest.cachePolicy = .returnCacheDataElseLoad // 사용 가능한 캐시 데이터 사용\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in\n    // 응답 처리\n}\ntask.resume()\n```\n\n## 캐싱 정책 이해하기\n\nURLCache는 응답을 저장하고 캐시에서 검색하는 방법을 지정하는 여러 가지 캐싱 정책을 제공합니다. 일반적인 캐싱 정책에 대해 알아보겠습니다:\n\n- .CachePolicy.useProtocolCachePolicy: 이 정책은 서버에서 보낸 캐싱 헤더를 기반으로 응답이 캐시되어야 하는지를 결정합니다. 서버가 Cache-Control 또는 Expires와 같은 캐싱 헤더를 지정하면 URLCache는 해당 지침을 따릅니다.\n- .CachePolicy.reloadIgnoringLocalCacheData: 이 정책을 사용하면 URLCache는 항상 로컬로 캐시된 응답을 무시하고 데이터를 직접 서버에서 가져옵니다.\n- .CachePolicy.returnCacheDataElseLoad: 이 정책은 사용 가능한 캐시된 응답을 반환하거나 네트워크에서 데이터를 가져옵니다. 앱 성능을 향상시키면서 데이터 신선도를 보장하는 데 흔히 사용되는 정책입니다.\n- .CachePolicy.returnCacheDataDontLoad: 이 정책은 캐시된 응답을 반환하되, 캐시된 데이터가 없으면 네트워크에서 데이터를 가져오지 않습니다. 오프라인으로 캐시된 데이터에 액세스할 수 있는 시나리오에 유용합니다.\n- .CachePolicy.reloadIgnoringCacheData: 이 정책을 사용하면 URLCache는 캐시된 응답을 무시하고 데이터를 항상 네트워크에서 가져옵니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 응답 캐싱\n\n이제 URLCache를 사용하여 응답을 캐싱하는 방법을 살펴보겠습니다:\n\n```js\nlet url = URL(string: \"https://api.example.com/data\")!\nlet request = URLRequest(url: url)\n\nURLSession.shared.dataTask(with: request) { data, response, error in\n    guard let data = data, let httpResponse = response as? HTTPURLResponse, error == nil else {\n        // 오류 처리\n        return\n    }\n\n    if httpResponse.statusCode == 200 {\n        let cachedResponse = CachedURLResponse(response: httpResponse, data: data)\n        URLCache.shared.storeCachedResponse(cachedResponse, for: request)\n\n        // 데이터가 이제 캐싱되었습니다\n    }\n}.resume()\n```\n\n이 코드 샘플에서는 지정된 URL에서 데이터를 가져오기 위해 데이터 작업을 시작합니다. 성공적인 응답(상태 코드 200)을 받은 경우, 응답과 데이터를 캡슐화하는 CachedURLResponse 객체를 생성합니다. 그런 다음 이 응답을 미래 사용을 위해 캐시에 저장하기 위해 URLCache.shared.storeCachedResponse(\\_:for:)를 사용합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n캐싱 정책을 이해하고 URLCache를 사용하여 응답을 캐시하는 방법을 알면 iOS 개발자는 네트워크 요청을 최적화하고 앱 성능을 향상시키기 위해 캐싱 메커니즘을 효과적으로 활용할 수 있습니다.\n\n## 사용자 정의\n\ncachedResponse(for:) 및 storeCachedResponse(\\_:for:)와 같은 메서드를 서브클래싱하고 오버라이딩하여 URLCache 동작을 사용자 정의할 수 있습니다. 이를 통해 앱 요구 사항에 맞는 사용자 정의 캐싱 전략을 구현할 수 있습니다.\n\n# 결론\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nURLCache는 iOS 앱에서 네트워크 응답을 캐시하는 강력한 도구로, 다양한 캐싱 정책을 제공하여 다양한 요구 사항에 맞게 사용할 수 있습니다. 캐싱 정책을 숙지하고 캐싱 전략을 효과적으로 구현함으로써, 개발자들은 보다 부드럽고 반응성 있는 사용자 경험을 제공하는 앱을 만들 수 있습니다. iOS 프로젝트에서 캐싱을 실험해보고 URLCache를 최대한 활용해보세요. 즐거운 코딩 되세요!\n","ogImage":{"url":"/assets/img/2024-06-22-URLCacheiniOSABeginnersGuide_0.png"},"coverImage":"/assets/img/2024-06-22-URLCacheiniOSABeginnersGuide_0.png","tag":["Tech"],"readingTime":6},{"title":"Swift에서 weak와 unowned의 차이점 예제 포함","description":"","date":"2024-06-22 23:14","slug":"2024-06-22-DifferencesbetweenweakandunownedinSwiftwithexamples","content":"\n<img src=\"/assets/img/2024-06-22-DifferencesbetweenweakandunownedinSwiftwithexamples_0.png\" />\n\n# 소개\n\nSwift에서는 메모리 관리가 ARC(Automatic Reference Counting)를 통해 이루어집니다. weak 및 unowned 참조의 주요 개념을 이해하는 것은 메모리 누수와 강한 참조 순환을 방지하는 데 매우 중요합니다. 이러한 참조들이 어떻게 다르며 올바르게 사용하는 방법을 알아보겠습니다.\n\n# weak 참조\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n약한 참조는 한 객체가 다른 객체 없이 존재할 수 있을 때 사용됩니다. 이는 객체의 참조 카운트를 증가시키지 않아 강력한 참조 순환을 방지하는 데 도움이 됩니다.\n\n약한 참조의 특징:\n\n- 가리키는 객체가 해제될 수 있기 때문에 항상 옵셔널 변수(var)로 선언됩니다. 이 경우에 참조는 nil이 됩니다.\n- 델리게이트와 클로저를 사용할 때 메모리 누수를 방지하는 데 특히 유용합니다.\n\n약한 참조를 사용한 예시:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\nclass Department {\n    var manager: Employee?\n\n    deinit {\n        print(\"Department is being deinitialized\")\n    }\n}\n\nclass Employee {\n    weak var department: Department?\n\n    deinit {\n        print(\"Employee is being deinitialized\")\n    }\n}\n\nvar department: Department? = Department()\nvar manager: Employee? = Employee()\n\ndepartment?.manager = manager\nmanager?.department = department\n\ndepartment = nil\nmanager = nil\n// Prints: \"Employee is being deinitialized\" and then \"Department is being deinitialized\"\n\n```\n\n이 예시에서, Department와 Employee간의 연결을 끊음으로써 메모리 누수를 피할 수 있습니다.\n\n## 클로저에서 weak 사용\n\n클로저에서 weak를 사용하는 것은 강한 참조 순환을 방지하기 위해 종종 필요한데, 특히 클로저가 self, 즉 클래스 인스턴스를 캡처할 때입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nViewController 클래스는 비동기 작업을 수행하는 클래스입니다. 이 작업이 완료된 후에 코드가 실행되도록 하고, 동시에 강한 참조 순환에 의한 메모리 누수를 방지해야 합니다.\n\nweak 키워드를 사용한 예시:\n\n```js\nclass ViewController: UIViewController {\n    var dataLoader: DataLoader?\n\n    func fetchData() {\n        dataLoader?.loadData(completion: { [weak self] result in\n            guard let self = self else { return }\n\n            switch result {\n            case .success(let data):\n                self.updateUI(with: data)\n            case .failure(let error):\n                self.showErrorMessage(error)\n            }\n        })\n    }\n\n    private func updateUI(with data: Data) {\n        // 사용자 인터페이스 업데이트\n    }\n\n    private func showErrorMessage(_ error: Error) {\n        // 에러 메시지 표시\n    }\n}\n\nclass DataLoader {\n    func loadData(completion: @escaping (Result<Data, Error>) -> Void) {\n        // 데이터 로드 코드\n    }\n}\n```\n\n위 예시에서:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- ViewController에는 DataLoader의 loadData 메서드를 호출하는 fetchData 메서드가 있습니다.\n- loadData에 전달된 클로저 내에서 [weak self]를 사용하여 ViewController의 인스턴스인 self에 강한 참조를 방지합니다. 이는 DataLoader가 클로저를 오랫동안 유지할 수 있기 때문에 중요합니다. 예를 들어 비동기 작업 중에 발생할 수 있습니다.\n- 클로저 내에서 self에 안전하게 액세스하기 위해 guard let self = self else 'return'을 사용합니다. 만약 ViewController가 클로저가 실행되기 전에 해제되면 self는 nil이 되어 클로저 내의 코드가 실행되지 않아 잠재적인 오류나 충돌을 방지합니다.\n\n# unowned 참조\n\nunowned 참조는 weak와 유사하지만 두 가지 주요 차이점이 있습니다: 옵셔널이 아니며, 가리키는 객체가 해제될 때 nil이 되지 않습니다.\n\n## unowned 참조의 특징:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 다른 객체가 해제되기 전까지 한 객체를 해제하지 않을 때 사용됩니다.\n- 객체가 해제된 후 비소유 참조에 접근하면 충돌이 발생합니다.\n- 상수(let)와 함께만 작동합니다.\n\n비소유 참조를 사용한 예시:\n\n```js\nclass Customer {\n    let name: String\n    var card: CreditCard?\n\n    init(name: String) {\n        self.name = name\n    }\n\n    deinit {\n        print(\"\\(name) 해제 중\")\n    }\n}\n\nclass CreditCard {\n    let number: UInt64\n    unowned let customer: Customer\n\n    init(number: UInt64, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n\n    deinit {\n        print(\"카드 #\\(number) 해제 중\")\n    }\n}\n\nvar john: Customer? = Customer(name: \"John\")\njohn!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)\n\njohn = nil\n// 출력: \"John 해제 중\" 그리고 \"카드 #1234567890123456 해제 중\"\n```\n\n여기서 Customer가 해제된 후 관련된 CreditCard 객체도 해제되어 메모리 누수를 방지합니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 약한 참조와 미소유 참조 비교\n\n- 선언: 약한 참조는 항상 옵셔널이지만, 미소유 참조는 상수로 값이 옵셔널이 아닙니다.\n- 강한 참조 순환: 둘 다 강한 참조 순환을 방지하지만, 각각 다른 상황에서 사용됩니다.\n- 안전성: 약한 참조는 객체가 해제될 때 자동으로 nil이 되어 안전합니다. 미소유 참조는 객체가 파괴되면 크래시가 발생할 수 있습니다. 무엇을 하는지 잘 알아야 합니다.\n\n# 결론\n\nSwift에서 약한 참조와 미소유 참조의 차이를 이해하는 것은 안전하고 효율적인 메모리 관리를 위해 중요합니다. 두 참조 사이의 선택은 애플리케이션의 구조와 객체 간 관계에 따라 다릅니다. 항상 메모리 누수를 확인하여 신뢰성과 성능을 보증할 수 있도록 코드를 테스트하세요.\n","ogImage":{"url":"/assets/img/2024-06-22-DifferencesbetweenweakandunownedinSwiftwithexamples_0.png"},"coverImage":"/assets/img/2024-06-22-DifferencesbetweenweakandunownedinSwiftwithexamples_0.png","tag":["Tech"],"readingTime":6},{"title":"4단계로 iOS 앱에 실시간 활동 추가하는 방법","description":"","date":"2024-06-22 23:13","slug":"2024-06-22-AddLiveActivitiestoyouriOSappin4steps","content":"\n## iOS에서 라이브 액티비티로 사용자 경험과 실시간 상호작용 향상\n\n이미 라이브 액티비티를 앱에 통합하지 않았다면, 이제 강력한 잠재력을 고려해보는 것이 좋습니다.\n\n라이브 액티비티는 호환되는 아이폰의 잠금 화면과 다이나믹 아일랜드에 자연스럽게 나타나는 전용 UI로, 이 기능을 활용하면 사용자가 앱의 주요 부분을 벗어나도 사용자와 상호작용을 유지할 수 있습니다.\n\n푸시 알림을 보내지 않고 업데이트를 보내거나 실시간 정보를 표시할 수 있습니다. 그리고 가장 좋은 점은? 이를 추가하는 것이 놀랍도록 쉽습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n여기에 그것을 하는 방법이 있어요.\n\n![image1](/assets/img/2024-06-22-AddLiveActivitiestoyouriOSappin4steps_0.png)\n\n![image2](https://miro.medium.com/v2/resize:fit:460/1*RqsG45Gbo625UNKcIUElTQ.gif)\n\n## 단계1 — 라이브 활동 콘텐츠 정의\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n가장 처음으로 할 일은 라이브 활동에서 보여줄 정보를 정의하는 것입니다. 제한된 공간 때문에 사용자가 중요하게 생각할 데이터에 집중해야 합니다.\n\n그 생각을 기억하고 다음으로 할 일은 ActivityAttributes 프로토콜을 구현하는 것입니다.\n\n```js\npublic protocol ActivityAttributes : Decodable, Encodable {\n\n    /// 라이브 활동의 동적 콘텐츠를 설명하는 연관 타입.\n    ///\n    /// `ContentState`로 인코딩된 라이브 활동의 동적 데이터는 4KB를 초과할 수 없습니다.\n    associatedtype ContentState : Decodable, Encodable, Hashable\n}\n```\n\n알 수 있듯이, 우리는 정보를 두 가지 범주로 나눌 수 있습니다:\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- 정적 → ActivityAttributes를 구현하는 모델의 속성입니다.\n- 동적 → ContentState 타입에 저장됩니다.\n\n우리 경우에는 다음과 같이 정보를 정리할 수 있습니다:\n\n- 정적 → 주문 번호입니다. 사용자가 주문을 하면 번호가 바뀌지 않습니다.\n- 동적 → 주문 상태로, 주문의 현재 단계를 나타냅니다.\n\n```js\nstruct OrderAttributes: ActivityAttributes {\n\n    struct ContentState: Codable, Hashable {\n        enum OrderStatus: Float, Codable, Hashable {\n            case inQueue = 0\n            case aboutToTake\n            case making\n            case ready\n\n            var description: String {\n                switch self {\n                case .inQueue:\n                    return \"주문이 대기 중입니다\"\n                case .aboutToTake:\n                    return \"주문을 받을 준비 중입니다\"\n                case .making:\n                    return \"주문을 준비 중입니다\"\n                case .ready:\n                    return \"주문이 수령 가능합니다!\"\n                }\n            }\n        }\n\n        let status: OrderStatus\n    }\n\n    let orderNumber: Int\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 2 — UI 생성하기\n\n라이브 활동 UI는 앱의 위젯 범위에 있습니다. 따라서 앱에 위젯 확장 기능이 없는 경우, 먼저 하나를 생성해야 합니다.\n\n새로운 위젯 뷰를 생성하고 위젯 구현에서 ActivityConfiguration의 인스턴스를 반환합니다. 이전 단계에서 만든 ActivityAttributes 모델을 사용해야 합니다.\n\n```js\nstruct CoffeeShopWidgetLiveActivity: Widget {\n\n    var body: some WidgetConfiguration {\n        ActivityConfiguration(for: OrderAttributes.self) { context in\n            // 여기에 잠금 화면/배너 UI가 들어갑니다\n            LiveActivityView(state: context.state)\n        } dynamicIsland: { context in\n            // 동적 아일랜드 구현이 이곳에 들어갑니다\n            // 이 기사의 범위를 벗어난 내용입니다\n             ...\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\nLiveActivityView 내에서는 Live Activity UI를 구성합니다.\n\n```js\nstruct LiveActivityView: View {\n    let state: OrderAttributes.ContentState\n\n    var body: some View {\n        VStack {\n            HStack {\n                Image(systemName: \"cup.and.saucer\")\n                ProgressView(value: state.status.rawValue, total: 3)\n                    .tint(.black)\n                    .background(Color.brown)\n                Image(systemName: \"cup.and.saucer.fill\")\n            }\n            .padding(16)\n\n            Text(\"\\(state.status.description)\")\n                .font(.system(size: 18, weight: .semibold))\n                .padding(.bottom)\n            Spacer()\n        }\n        .background(Color.brown.opacity(0.6))\n    }\n}\n```\n\n마지막으로, Live Activity 위젯을 위한 위젯 번들에 추가해야 합니다. 이 경우, 위젯을 제공하지 않을 것이므로 Live Activity만 사용합니다.\n\n```js\n@main\nstruct CoffeeShopWidgetBundle: WidgetBundle {\n    var body: some Widget {\n        CoffeeShopWidgetLiveActivity()\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 3 — 라이브 활동 초기화\n\n라이브 활동과 상호 작용하는 데는 ActivityKit API를 사용해야 합니다.\n\n먼저, ActivityContent의 생성자인 init(state:staleDate:relevanceScore:)를 사용하여 라이브 활동의 초기 내용을 만들어야 합니다.\n\n- state: 라이브 활동에 대한 초기 ActivityAttributes.ContentState입니다.\n- staleDate: 라이브 활동이 오래되었음을 OS에 알리기 위한 날짜입니다. staleDate가 지정되지 않으면, 8시간 후 OS가 라이브 활동을 종료합니다.\n- relevanceScore: 여러 개의 라이브 활동이 있는 경우, relevanceScore는 다이나믹 아일랜드에 표시할 우선순위와 잠금 화면의 순서를 나타냅니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그럼 Activity 메서드 request(attributes: content: pushType:)를 호출하여 새로운 라이브 액티비티를 요청할 수 있어요.\n\n- attributes: Step 1에서 생성한 ActivityAttributes의 인스턴스입니다.\n- content: 라이브 액티비티의 초기 콘텐츠입니다.\n- pushType: 라이브 액티비티의 업데이트가 ActivityKit 푸시 알림에서 올 것인지를 나타냅니다. 업데이트 기능만 사용할 경우에는 nil을 전달할 수 있어요.\n\n📣 중요한 알림: 새로운 Activity를 요청할 때 앱은 활성화 상태여야 해요.\n\n```js\nlet orderAttributes = OrderAttributes(orderNumber: 1)\nlet initialState = OrderAttributes.ContentState(status: .inQueue)\nlet content = ActivityContent(state: initialState, staleDate: nil, relevanceScore: 1.0)\n\ndo {\n    let orderActivity = try Activity.request(\n        attributes: orderAttributes,\n        content: content,\n        pushType: nil\n    )\n} catch {\n    print(error.localizedDescription)\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n## 단계 4 — 라이브 활동 업데이트\n\n라이브 활동을 업데이트하려면 update(\\_:) 함수를 사용할 수 있습니다. 초기 상태를 생성한 것과 마찬가지로 업데이트로 ActivityContent를 작성할 수 있습니다.\n\n```js\nawait orderActivity?.update(\n    ActivityContent<OrderAttributes.ContentState>(\n        state: state,\n        staleDate: nil\n    )\n)\n```\n\n라이브 활동을 종료하려면 end(\\_:dismissalPolicy:) 함수를 사용합니다. 사용하는 종료 정책에 따라 라이브 활동은 사용자가 명시적으로 제거할 때까지 잠금 화면에 남게될 수 있습니다. 이것이 마지막 라이브 활동 상태를 전달하여 UI를 항상 최신 상태로 유지해야하는 이유입니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n사용 가능한 해제 정책 옵션은 세 가지입니다.\n\n- default: 라이브 액티비티는 최대 4시간 동안 잠금 화면에 유지됩니다. (사용자가 제거할 때까지)\n- immediate: 운영 체제가 즉시 라이브 액티비티를 제거합니다.\n- after(\\_ date:): 라이브 액티비티를 해제할 날짜를 지정할 수 있습니다. (라이브 액티비티 종료 시간으로부터 4시간 이내여야 함)\n\n# 다음 단계는 무엇인가요?\n\n앱의 사용 사례를 신중하게 고려해보세요. 라이브 액티비티는 배송 앱이나 스포츠 이벤트와 같은 실시간 애플리케이션에 특히 적합하지만, 푸시 알림에 대한 매력적인 대안으로도 사용될 수 있어 사용자에게 더 매력적인 경험을 제공할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n더 풍부한 사용자 경험을 위해 라이브 활동에 딥 링크를 통합하여 사용자가 라이브 활동을 탭할 때 연결이 원활하도록 할 수 있습니다.\n\n질문이 있으시면 언제든지 메시지 남겨주세요! 🙂\n\n- 🤓 iOS 개발 팁과 통찰을 정기적으로 제공하는 제 트위터에 참여해보세요.\n- 🚀 나의 예제 프로젝트를 모두 공유하는 GitHub를 확인해보세요.\n","ogImage":{"url":"/assets/img/2024-06-22-AddLiveActivitiestoyouriOSappin4steps_0.png"},"coverImage":"/assets/img/2024-06-22-AddLiveActivitiestoyouriOSappin4steps_0.png","tag":["Tech"],"readingTime":9},{"title":"Swift 비동기 처리에서 경합 상태 버그 해결 방법 ","description":"","date":"2024-06-22 23:11","slug":"2024-06-22-ResolvingaRaceConditionBuginSwiftConcurrency","content":"\n<img src=\"/assets/img/2024-06-22-ResolvingaRaceConditionBuginSwiftConcurrency_0.png\" />\n\niOS 캘린더 스케줄러에는 '기본 캘린더' 기능이 있어요. Apple 캘린더와 같은 외부 캘린더와 통합한 후에, 이 설정은 이벤트를 추가할 때 가장 자주 사용하는 캘린더가 기본적으로 선택되도록 합니다. 이 기능은 사용자가 정의한 '기본 캘린더'를 연결된 캘린더에서 이벤트 스케줄링 시에 에디터의 '캘린더 선택' 섹션에서 자동으로 선택되도록 설정합니다.\n\n<img src=\"/assets/img/2024-06-22-ResolvingaRaceConditionBuginSwiftConcurrency_1.png\" />\n\n# 💡 경합 조건으로 인한 문제 해결하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n그러나 때로는 다른 닠린더가 선택된 경우도 있었습니다. 항상 그런 것은 아니었고, 대부분의 경우 정상적으로 작동했습니다. 제가 이 문제를 디버그하는 방법을 잘 모르겠었는데, 가끔 발생하는 문제라서 더욱 더 어려웠습니다. 가끔씩 발생하더라도, 이 기능이 제대로 작동하지 않으면 사용자가 잘못된 링크된 달력에 이벤트를 알지 못하게 추가할 수 있어 나중에 불필요한 수정을 유발할 수 있습니다.\n\n최근에 이 문제를 해결할 실마리를 찾았습니다. Xcode 16 베타 버전의 새 기능에 대한 호기심으로 설치한 후 보게 된 경고 메시지 덕분이었습니다. 이 경고는 이전 버전의 Xcode에서는 나타나지 않았고, 스위프트 6의 보다 엄격한 Actor Isolation 규칙으로 인해 발생했습니다. 이 규칙은 동시성 모델을 더 안전하게 만들기 위한 것입니다.\n\n![Image](/assets/img/2024-06-22-ResolvingaRaceConditionBuginSwiftConcurrency_2.png)\n\n스위프트에서 Actor는 동시성 모델로, 내부 함수와 속성을 동시 액세스로부터 보호합니다. Actors는 수행하는 작업을 직렬화하여 각 작업이 순차적으로 실행되도록 합니다. 이를 통해 경합 조건 및 데이터 경주와 같은 동시성 문제를 방지할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n경주 조건은 시스템의 동작이 실행 순서에 따라 달라질 수 있는 다중 스레드 프로그래밍에서 중요한 개념입니다. 다시 말해, 경주 조건은 두 개 이상의 작업이 병렬로 실행되고 결과가 실행 순서나 시간에 따라 변경될 수 있는 경우 발생합니다. 경주 조건이 발생하면 프로그램이 예측할 수 없이 동작하거나 예상치 못한 결과를 내놓을 수 있습니다.\n\n데이터 경주는 두 개 이상의 스레드가 동시에 동일한 메모리 위치에 액세스하고, 그 중 적어도 하나가 쓰기 작업을 수행하는 경우 발생합니다. 이는 메모리 일관성을 파괴하고 예측할 수 없는 프로그램 동작으로 이어질 수 있습니다. Swift의 Actor는 이러한 문제를 방지하기 위해 상태를 안전하게 격리합니다.\n\n제 코드에서는 메인 Actor 콘텍스트에서 Actor로 격리된 ekRepository의 eventStore 속성에 액세스하려고 시도했으며, 이로 인해 Swift 6에서 컴파일 오류가 발생했습니다. 코드의 문제가 요약된 부분은 다음과 같습니다:\n\n```swift\nimport EventKit\n\nactor EKRepository {\n    let eventStore: EKEventStore\n\n    init() {\n        self.eventStore = EKEventStore()\n    }\n}\n\n@MainActor\nfinal class EKInteractor: ObservableObject {\n    private let ekRepository: EKRepository\n\n    var eventStore: EKEventStore {\n        /// 🔥 Actor-isolated property 'eventStore' can not be referenced from the main actor;\n        /// 🔥 this is an error in the Swift 6 language mode.\n        ekRepository.eventStore\n    }\n\n    init(ekRepository: EKRepository) {\n        self.ekRepository = ekRepository\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n저는 이 코드를 처음 작성할 때 'eventStore'가 'EKRepository' 내에서만 액세스되도록 보장하는 것이 목표였습니다. 처음에는 EKInteractor가 속성으로 eventStore를 정의하지 않았습니다. 그러나 EKEventEditViewController와 같은 Apple에서 제공하는 UI에 EKEventStore를 매개변수로 전달해야 하는 상황이 많았습니다. 그 결과, EKInteractor는 eventStore을 노출하기 시작했습니다.\n\n하지만, EKInteractor가 Actor Isolation을 무시하고 ekRepository의 eventStore에 액세스하고 있다면, 이는 경합 조건과 예기치 않은 문제를 초래할 수 있습니다.\n\n이를 해결하기 위해 코드를 리팩토링하여 Actor Isolation을 준수하도록 만들어 경합 조건을 피했습니다. 리팩토링된 코드는 다음과 같습니다:\n\n```swift\nactor EKRepository {\n    /// 💡 'getEventStore()' 메서드를 사용하여 eventStore에 대한 액세스 캡슐화\n    private let eventStore: EKEventStore\n\n    init() {\n        self.eventStore = EKEventStore()\n    }\n}\n\nextension EKRepository {\n    func getEventStore() -> EKEventStore {\n        return eventStore\n    }\n}\n\n@MainActor\nfinal class EKInteractor: ObservableObject {\n    private let ekRepository: EKRepository\n\n    private var cachedEventStore: EKEventStore? = nil\n\n    /// 💡 Actor Isolation을 준수하면서 eventStore에 비동기적으로 액세스하고 캐시합니다.\n    /// 우선 캐시된 eventStore이 있는지 확인하고,\n    /// 그렇지 않으면 EKRepository의 getEventStore 메서드를 비동기적으로 호출하여 eventStore을 가져와 캐시합니다.\n    var eventStore: EKEventStore {\n        get async {\n            if let eventStore = cachedEventStore {\n                return eventStore\n            }\n\n            let store = await ekRepository.getEventStore()\n            cachedEventStore = store\n            return store\n        }\n    }\n\n    init(ekRepository: EKRepository) {\n        self.ekRepository = ekRepository\n\n        /// 💡 시작할 때 eventStore을 비동기적으로 가져와 캐싱하여 이후 액세스 성능을 향상시킵니다.\n        initEventStore(ekRepository: ekRepository)\n    }\n}\n\nextension EKInteractor {\n    private func initEventStore(ekRepository: EKRepository) {\n        /// 💡 [Task] 이 메서드는 eventStore을 비동기적으로 가져와 캐시하지만,\n        /// 이 프로세스가 완료되기 전에 후속 작업이 진행될 수 있습니다.\n        Task {\n            self.cachedEventStore = await ekRepository.getEventStore()\n        }\n    }\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n또한, 'Default Calendar'를 설정하는 부분에서 레이스 컨디션에 민감한 코드를 발견했어요. 아래 코드에서는 newEKEvent의 캘린더(타입은 EKCalendar)가 Task 블록 내에서 비동기로 설정되어 있습니다. 이 비동기 작업은 getNewEKEvent 함수가 newEKEvent 객체를 반환한 뒤에 실행될 수 있습니다. 이는 반환된 newEKEvent 객체를 다른 곳에서 사용하려고 할 때 캘린더 속성이 아직 설정되지 않을 수 있다는 의미입니다. 이러한 상황은 '실행 순서(execution order)'에 따라 예측할 수 없는 동작을 유발할 수 있으며, 이는 해결하고자 했던 간헐적 버그와 일치합니다.\n\n```js\nprivate func getNewEKEvent(ekInteractor: EKInteractor, selectedDate: Date) -> EKEvent {\n    let newEKEvent = EKEvent(eventStore: ekInteractor.eventStore)\n\n    // 🔥 문제: 이 Task 블록은 비동기로 실행되므로, 함수가 newEKEvent를 반환한 후에 실행될 수 있습니다.\n    Task {\n        // 🔥 문제: 비동기 작업이 newEKEvent 반환 후에 완료된 경우, 캘린더 속성이 아직 설정되지 않을 수 있습니다.\n        if let defaultEKCalendarToAdd = await ekInteractor.getDefaultEKCalendarToAdd() {\n            newEKEvent.calendar = defaultEKCalendarToAdd\n        }\n    }\n\n    // 🔥 문제: 함수가 비동기 작업이 완료되기 전에 newEKEvent를 반환하므로, 데이터 레이스와 레이스 컨디션이 발생할 수 있습니다.\n    return newEKEvent\n}\n```\n\n요약하면, 위의 코드는 '레이스 컨디션'의 대상이 될 수 있으며, 비동기 작업이 완료되기 전에 객체가 반환됩니다. 이 문제는 아래에 표시된 대로 코드를 재구성하여 해결할 수 있습니다.\n\n```js\n/// 💡 비동기 작업을 수행할 수 있도록 getNewEKEvent 함수를 async로 선언하여,\n/// 모든 비동기 작업이 완료된 후에만 newEKEvent가 반환되도록 함.\n/// ---> 레이스 컨디션과 데이터 레이스 방지\nprivate func getNewEKEvent(ekInteractor: EKInteractor, selectedDate: Date) async -> EKEvent {\n    /// 💡 eventStore를 비동기로 가져오기 위해 await 사용\n    let newEKEvent = EKEvent(eventStore: await ekInteractor.eventStore)\n\n    /// 💡 defaultEKCalendarToAdd를 비동기로 가져와 newEKEvent의 캘린더 속성에 설정\n    if let defaultEKCalendarToAdd = await ekInteractor.getDefaultEKCalendarToAdd() {\n        newEKEvent.calendar = defaultEKCalendarToAdd\n    }\n\n    /// 💡 모든 비동기 작업이 완료된 후에 newEKEvent 반환\n    return newEKEvent\n}\n```\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n# 결론\n\n이 문제를 해결하면서 Swift 동시성에 대한 이해가 깊어졌습니다. 안전한 동시 코드 작성의 기초를 확립할 수 있어 기쁩니다. 무엇보다도, Scheduler 앱의 다음 업데이트에서 사용자에게 흠잡을 데 없는 '기본 캘린더' 기능을 제공할 수 있어 기쁩니다.\n\n'Reminders'부터 '기본 캘린더'까지 모든 것을 신속하게 통합하세요.\n다양한 위젯.\nScheduler: iPhone, iPad 및 Mac용 캘린더 앱.\n\n# 참고문헌\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n- Swift 프로그래밍 언어 — 동시성:\n  https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/\n- Apple 개발자 문서 — Swift 동시성:\n  https://developer.apple.com/documentation/swift/concurrency\n- Apple 개발자 문서 — EKEventStore:\n  https://developer.apple.com/documentation/eventkit/ekeventstore\n- 경합 조건 이해와 해결:\n  https://en.wikipedia.org/wiki/Race_condition\n- Apple 개발자 문서 — Task:\n  https://developer.apple.com/documentation/swift/task\n\n이러한 자료들은 Swift 동시성, 액터 및 관련 주제에 대해 자세한 정보를 제공하여 경합 조건과 같은 문제를 이해하고 해결하는 데 도움이 됩니다.\n","ogImage":{"url":"/assets/img/2024-06-22-ResolvingaRaceConditionBuginSwiftConcurrency_0.png"},"coverImage":"/assets/img/2024-06-22-ResolvingaRaceConditionBuginSwiftConcurrency_0.png","tag":["Tech"],"readingTime":9},{"title":"SwiftData로 원격 API에서 데이터 저장하는 방법","description":"","date":"2024-06-22 23:10","slug":"2024-06-22-UsingSwiftDatatoStoreDatafromaRemoteAPI","content":"\n앱 사용자에게 오프라인 기능을 제공하고 앱 운영 비용을 줄이는 데 중요한 로컬 데이터 저장은 매우 중요합니다.\n\n[![Image](/assets/img/2024-06-22-UsingSwiftDatatoStoreDatafromaRemoteAPI_0.png)](//)\n\n시작하기 전에 몇 초 동안 제 게시물을 팔로우하고 👏 클랩(clap)하여 더 많은 사람들이 이 유용한 내용을 배울 수 있도록 도와주세요.\n\n# API 호출로부터 SwiftData를 사용하여 로컬로 데이터 저장하기\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n코드로 넘어가기로 하겠습니다. SwiftData에 익숙하지 않으신 경우, 새로운 내용을 익히시려면 이 기사를 확인해보세요.\n\n우리는 구조체의 이름 뒤에 약어 DTO(Data Transfer Object)를 추가하기로 결정했습니다. DTO는 한 시스템에서 다른 시스템으로 데이터를 전송하는 데 사용됩니다. 우리의 예제에서는 API 응답의 데이터를 JSON에서 SwiftData entity로 전송하려고 합니다. DTO는 JSON 응답을 일시적으로 보유하여 해당 데이터를 파싱하고 Swift 객체로 변환할 수 있게 합니다. 앞으로 몇 개의 코드 블록에서는 해당 Swift 객체를 SwiftData entity로 변환할 것입니다.\n\n```swift\n// PhotoDTO.swift\nimport Foundation\n\nstruct PhotoDTO: Identifiable, Codable {\n    let albumId: Int\n    let id: Int\n    let title: String\n    let url: String\n    let thumbnailUrl: String\n}\n```\n\nSwiftData로 시작하는 기사를 읽으신 경우, 이 내용은 익숙하게 느껴질 것입니다. 클래스에 새로운 코드 조각을 추가했는데, 그것은 편의 이니셜라이저입니다. 이를 통해 DTO를 직접 전달하여 SwiftData entity를 생성할 수 있습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n```swift\n//  PhotoObject.swift\nimport Foundation\nimport SwiftData\n\n@Model\nclass PhotoObject {\n    var albumId: Int\n    @Attribute(.unique) var id: Int\n    var title: String\n    var url: String\n    var thumbnailUrl: String\n\n    init(albumId: Int, id: Int, title: String, url: String, thumbnailUrl: String) {\n        self.albumId = albumId\n        self.id = id\n        self.title = title\n        self.url = url\n        self.thumbnailUrl = thumbnailUrl\n    }\n\n    convenience init(item: PhotoDTO) {\n        self.init(\n            albumId: item.albumId,\n            id: item.id,\n            title: item.title,\n            url: item.url,\n            thumbnailUrl: item.thumbnailUrl\n        )\n    }\n}\n```\n\n웹 서비스도 만약 SwiftUI에서 API 호출을 만들고 파싱한 적이 있다면 익숙할 것입니다. 웹 서비스를 살펴보면, 그 기사에서 살짝 수정하여 새로운 기능을 보유한 웹 서비스를 가지고 있다는 것을 알 수 있습니다. updateDataInDatabase를 이용해 API 호출에서 데이터를 파싱할 때마다 데이터를 데이터베이스에 저장할 수 있도록 새 기능을 추가했습니다. updateDataInDatabase 함수는 PhotoDTO를 SwiftData 엔티티로 변환하고 각 레코드를 데이터베이스에 저장하는 메서드입니다. 또한, ID로 찾을 수 없는 경우 새 레코드를 생성할지 또는 기존 레코드를 업데이트할지 결정하기 위해 insert 메서드를 사용하고 있음을 알 수 있습니다.\n\n```swift\n//  WebService.swift\nimport Foundation\nimport SwiftData\n\nenum NetworkError: Error {\n    case badUrl\n    case invalidRequest\n    case badResponse\n    case badStatus\n    case failedToDecodeResponse\n}\n\nclass WebService {\n    @MainActor\n    func updateDataInDatabase(modelContext: ModelContext) async {\n        do {\n            let itemData: [PhotoDTO] = try await fetchData(fromUrl: \"https://jsonplaceholder.typicode.com/albums/1/photos\")\n            for eachItem in itemData {\n                let itemToStore = PhotoObject(item: eachItem)\n                modelContext.insert(itemToStore)\n            }\n        } catch {\n            print(\"Error fetching data\")\n            print(error.localizedDescription)\n        }\n    }\n\n    private func fetchData<T: Codable>(fromUrl: String) async throws -> [T] {\n        guard let downloadedData: [T] = await WebService().downloadData(fromURL: fromUrl) else { return [] }\n\n        return downloadedData\n    }\n\n    private func downloadData<T: Codable>(fromURL: String) async -> T? {\n        do {\n            guard let url = URL(string: fromURL) else { throw NetworkError.badUrl }\n            let (data, response) = try await URLSession.shared.data(from: url)\n            guard let response = response as? HTTPURLResponse else { throw NetworkError.badResponse }\n            guard response.statusCode >= 200 && response.statusCode < 300 else { throw NetworkError.badStatus }\n            guard let decodedResponse = try? JSONDecoder().decode(T.self, from: data) else { throw NetworkError.failedToDecodeResponse }\n\n            return decodedResponse\n        } catch NetworkError.badUrl {\n            print(\"There was an error creating the URL\")\n        } catch NetworkError.badResponse {\n            print(\"Did not get a valid response\")\n        } catch NetworkError.badStatus {\n            print(\"Did not get a 2xx status code from the response\")\n        } catch NetworkError.failedToDecodeResponse {\n            print(\"Failed to decode response into the given type\")\n        } catch {\n            print(\"An error occured downloading the data\")\n        }\n\n        return nil\n    }\n}\n```\n\n뷰 레이어에서는 데이터베이스에서 PhotoObjects를 읽어와 목록으로 표시합니다. 목록 내에서는 AsyncImage 구성 요소를 사용해 API에서 이미지를 표시하고 해당 항목의 ID를 이미지 옆에 표시합니다. 목록의 하단에는 몇 가지 다른 변형을 추가했습니다. overlay 변형은 목록이 비어 있을 때 진행 스피너를 표시합니다. task 변형은 목록이 비어 있으면 API에서 데이터를 자동으로 가져오도록 합니다. 또한, refreshable 변형을 사용해 목록 구성 요소에 pull to refresh를 추가했습니다.\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n\"task\" 및 \"refreshable\" 수정자를 사용하면 사용자가 업데이트된 데이터를 확인하려고 할 때만 API가 호출되도록 보장합니다(API를 실행하는 비용을 줄임). 이는 앱을 런칭할 때마다 API에서 데이터를 가져오는 대신 두 번째로 데이터가 데이터베이스에서 가져와지게 함을 의미합니다.\n\n또한 미리보기가 일반적인 경우보다 코드가 더 많이 보일 수 있습니다. SwiftData에서 데이터를 미리보는 것은 일반적인 뷰에서 데이터를 표시하는 것보다 조금 더 복잡하기 때문입니다. 미리보기에서는 데이터가 임시로 저장되는 새 컨테이너를 만들고(미리보기 장치에 데이터를 영구적으로 저장하지 않기 위함), 그런 다음 객체를 만들어 그 컨테이너에 저장합니다. 미리보기 데이터를 저장하는 별도의 파일을 생성하는 다른 자습서도 볼 수 있지만 이는 작동하며 전혀 문제가 없습니다. 저는 미리보기에 대한 코드를 미리보기 자체에 가까이 유지하고 싶어하여 별도의 파일을 생성하지 않았습니다.\n\n```js\n//  ContentView.swift\nimport SwiftData\nimport SwiftUI\n\nstruct ContentView: View {\n    @Environment(\\.modelContext) var modelContext\n    @Query(sort: \\PhotoObject.id) var photos: [PhotoObject]\n\n    var body: some View {\n        List(photos) { item in\n            HStack {\n                Text(item.id, format: .number)\n                Spacer()\n\n                AsyncImage(url: URL(string: item.url)!) { imagePhase in\n                    switch imagePhase {\n                    case .empty:\n                        Image(systemName: \"ellipsis\")\n                    case .success(let returnedImage):\n                        returnedImage\n                            .resizable()\n                            .scaledToFit()\n                    case .failure:\n                        Image(systemName: \"xmark.circle\")\n                            .font(.headline)\n                            .foregroundColor(.red)\n                    @unknown default:\n                        Image(systemName: \"ellipsis\")\n                    }\n                }\n            }\n        }\n        .overlay {\n            if photos.isEmpty {\n                ProgressView()\n            }\n        }\n        .task {\n            if photos.isEmpty {\n                await WebService().updateDataInDatabase(modelContext: modelContext)\n            }\n        }\n        .refreshable {\n            await WebService().updateDataInDatabase(modelContext: modelContext)\n        }\n    }\n}\n\n#Preview {\n    do {\n        let config = ModelConfiguration(isStoredInMemoryOnly: true)\n        let container = try ModelContainer(for: PhotoObject.self, configurations: config)\n        let sampleObject = PhotoObject(\n            albumId: 1,\n            id: 1,\n            title: \"accusamus beatae ad facilis cum similique qui sunt\",\n            url: \"https://via.placeholder.com/600/92c952\",\n            thumbnailUrl: \"https://via.placeholder.com/150/92c952\"\n        )\n        container.mainContext.insert(sampleObject)\n\n        return ContentView().modelContainer(container)\n    } catch {\n        fatalError(\"Failed to create model container\")\n    }\n}\n```\n\n이 글이 유익하다고 느끼신다면, 제를 팔로우하는 것, 이 글에 👏 반응을 보내는 것, 또는 공유하여 다른 사람이 더 쉽게 찾을 수 있도록 돕는 것도 고려해주세요.\"\n\n<!-- ui-station 사각형 -->\n\n<ins class=\"adsbygoogle\"\nstyle=\"display:block\"\ndata-ad-client=\"ca-pub-4877378276818686\"\ndata-ad-slot=\"7249294152\"\ndata-ad-format=\"auto\"\ndata-full-width-responsive=\"true\"></ins>\n\n<script>\n(adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n\n해당 주제에 대해 궁금한 점이 있거나 동일한 작업을 수행하는 다른 방법을 알고 계신다면, 이 게시물에 답글을 달거나 친구에게 공유하여 의견을 얻을 수 있습니다. Native 모바일 개발에 대해 더 배우고 싶다면, 여기에서 작성한 다른 기사들을 확인해보세요: [https://medium.com/@jpmtech](https://medium.com/@jpmtech). Native 모바일 개발로 제작된 앱들을 보고 싶다면, 여기에서 제가 만든 앱들을 확인해보세요: [https://jpmtech.io/apps](https://jpmtech.io/apps). 제 작품을 확인해주셔서 감사합니다!\n","ogImage":{"url":"/assets/img/2024-06-22-UsingSwiftDatatoStoreDatafromaRemoteAPI_0.png"},"coverImage":"/assets/img/2024-06-22-UsingSwiftDatatoStoreDatafromaRemoteAPI_0.png","tag":["Tech"],"readingTime":9}],"page":"21","totalPageCount":110,"totalPageGroupCount":6,"lastPageGroup":20,"currentPageGroup":1},"__N_SSG":true}