{"pageProps":{"post":{"title":"안드로이드에서 네트워크 호출 Retrofit을 이용한 비동기 프로그래밍","description":"","date":"2024-05-20 15:58","slug":"2024-05-20-NetworkCallsinAndroidAsynchronousProgrammingwithRetrofit","content":"\n\n<img src=\"/assets/img/2024-05-20-NetworkCallsinAndroidAsynchronousProgrammingwithRetrofit_0.png\" />\n\n안녕하세요! 안드로이드 개발 세계에서 네트워크 호출을 효율적으로 처리하는 것이 매우 중요해요. 원격 서버에서 데이터를 가져오거나 클라우드에 데이터를 업로드한다 하더라도, 네트워크 작업은 시간이 오래 걸릴 수 있고 제대로 처리되지 않으면 사용자 경험에 상당한 영향을 줄 수 있어요. 여기서 Retrofit이 등장하는데, 이는 Square에서 개발한 안드로이드와 자바용 타입 안전한 HTTP 클라이언트에요. 이 글에서는 Retrofit의 내부 동작과 안드로이드에서 네트워크 호출을 수행하는 데 어떻게 비동기 프로그래밍으로 사용할 수 있는지 알아볼 거에요.\n\n동기 호출의 문제점을 상상해보세요. 만약 앱이 서버에서 사용자 데이터를 다운로드해야 한다면, 개발자는 전통적인 동기 방식을 사용할 수 있어요:\n\n<div class=\"content-ad\"></div>\n\n```js\n문자열 userData = downloadUserDataSync();\n\n// 이제 userData를 앱 로직에서 사용하세요...\n```\n\n이 방법은 직관적으로 보이지만 문제점이 있습니다: downloadUserDataSync()가 실행 중일 때 전체 앱이 차단됩니다. 사용자가 화면과 상호 작용할 수 없게 되며, 버튼이 응답하지 않는 것처럼 보이고 데이터 다운로드가 완료될 때까지 앱이 멈춰 있는 것처럼 보입니다. 이는 사용자 경험을 저하시킵니다.\n\n비동기 프로그래밍 등장\n\n비동기 프로그래밍을 통해 앱이 네트워크 응답을 기다리는 동안에도 계속 실행할 수 있습니다. 핵심 아이디어는 백그라운드에서 네트워크 호출을 시작하고 응답이 준비되었을 때 알림을 받는 것입니다. 이렇게 하면 주 스레드가 사용 가능해져 사용자의 상호작용에 민첩하게 대응할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n레트로핏을 위한 구조체\n\n레트로핏은 안드로이드에서 네트워크 호출을 간소화하고 비동기 프로그래밍과 완벽하게 통합되는 인기 있는 HTTP 클라이언트 라이브러리입니다. 인터페이스를 사용하여 API 엔드포인트를 정의하고 요청을 생성하고 응답을 처리하는 방법을 제공합니다.\n\n다음은 레트로핏의 주요 기능 중 일부입니다:\n\n- 쉬운 사용: 네트워크 요청을 만들고 응답을 구문 분석하는 복잡성을 추상화합니다.\n- 타입 안전성: 작업 중인 데이터의 유형이 예상대로인지 확인합니다.\n- 비동기 요청: 원활한 사용자 경험을 위해 필수적인 비동기 네트워크 호출을 지원합니다.\n- 통합: OkHttp, RxJava, Gson과 같은 다른 라이브러리와 원활하게 작동합니다.\n\n<div class=\"content-ad\"></div>\n\n# Retrofit 설정하기\n\n```js\n의존성 {\n    구현체 'com.squareup.retrofit2:retrofit:2.9.0'\n    구현체 'com.squareup.retrofit2:converter-gson:2.9.0'\n}\n```\n\n이러한 종속성에는 Retrofit과 JSON 직렬화 및 역직렬화를 처리하기 위한 Gson 변환기가 포함되어 있습니다.\n\n# API 인터페이스 정의하기\n\n<div class=\"content-ad\"></div>\n\nRetrofit을 사용하려면 API의 엔드포인트를 Java 인터페이스로 정의해야 합니다. 사용자 목록을 제공하는 간단한 API와 작업 중이라고 가정해봅시다.\n\n```js\npublic interface ApiService {\n    @GET(\"/users\")\n    Call<List<User>> getUsers();\n}\n```\n\n```bash\n여기서 @GET(\"users\")는 /users 엔드포인트로 GET 요청을 보낸다는 것을 나타내고, Call<List<User>>는 이 요청이 User 객체의 목록을 반환할 것임을 나타냅니다.\n```\n\n# Retrofit 인스턴스 생성하기\n\n<div class=\"content-ad\"></div>\n\n다음으로 Retrofit의 인스턴스를 만들어보겠습니다. 보통은 애플리케이션에서 한 번만 이 작업을 수행하며 대부분 싱글톤 패턴으로 처리됩니다.\n\n```java\npublic class ApiClient {\n    private static final String BASE_URL = \"https://api.example.com/\";\n    private static Retrofit retrofit = null;\n\n    public static Retrofit getClient() {\n        if (retrofit == null) {\n            retrofit = new Retrofit.Builder()\n                    .baseUrl(BASE_URL)\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .build();\n        }\n        return retrofit;\n    }\n}\n```\n\n여기서 BASE_URL은 API의 루트 URL입니다. addConverterFactory(GsonConverterFactory.create())은 Retrofit에 Gson을 JSON 변환에 사용하도록 지시하는 부분입니다.\n\n# 비동기 네트워크 호출하기\n\n<div class=\"content-ad\"></div>\n\nRetrofit을 설정하면 이제 비동기 네트워크 호출을 할 수 있습니다. 사용자 목록을 가져오고 응답을 처리하는 방법은 다음과 같습니다:\n\n```js\npublic class MainActivity extends AppCompatActivity {\n\n    private ApiService apiService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        Retrofit retrofit = ApiClient.getClient();\n        apiService = retrofit.create(ApiService.class);\n\n        fetchUsers();\n    }\n\n    private void fetchUsers() {\n        Call<List<User>> call = apiService.getUsers();\n        call.enqueue(new Callback<List<User>>() {\n            @Override\n            public void onResponse(Call<List<User>> call, Response<List<User>> response) {\n                if (response.isSuccessful()) {\n                    List<User> users = response.body();\n                    // 사용자 목록 처리\n                } else {\n                    // 오류 처리\n                }\n            }\n\n            @Override\n            public void onFailure(Call<List<User>> call, Throwable t) {\n                // 실패 처리\n            }\n        });\n    }\n}\n```\n\n`fetchUsers` 메서드에서 enqueue를 호출하여 네트워크 요청을 비동기적으로 수행합니다. `onResponse` 메서드는 요청이 성공한 경우에 호출되고, `onFailure` 메서드는 요청이 실패한 경우에 호출됩니다.\n\n# 다양한 응답 유형 처리\n\n<div class=\"content-ad\"></div>\n\n레트로핏은 일반 텍스트, JSON 및 사용자 정의 타입을 포함한 다양한 유형의 응답을 지원합니다. 예를 들어, API가 추가 메타데이터를 포함한 JSON 객체를 반환하는 경우 사용자 정의 응답 유형을 정의할 수 있습니다:\n\n```js\npublic class ApiResponse<T> {\n    private T data;\n    private String status;\n    private String message;\n\n    // Getter 및 Setter 메서드\n}\n```\n\n그런 다음, API 인터페이스를 이 사용자 정의 타입을 사용하도록 업데이트하십시오:\n\n```js\npublic interface ApiService {\n    @GET(\"users\")\n    Call<ApiResponse<List<User>>> getUsers();\n}\n```\n\n<div class=\"content-ad\"></div>\n\n그리고 액티비티나 프래그먼트에서 응답을 처리해보세요:\n\n```js\ncall.enqueue(new Callback<ApiResponse<List<User>>>() {\n    @Override\n    public void onResponse(Call<ApiResponse<List<User>>> call, Response<ApiResponse<List<User>>> response) {\n        if (response.isSuccessful()) {\n            ApiResponse<List<User>> apiResponse = response.body();\n            if (apiResponse != null && \"success\".equals(apiResponse.getStatus())) {\n                List<User> users = apiResponse.getData();\n                // 사용자 목록 처리\n            } else {\n                // API 오류 처리\n            }\n        } else {\n            // 에러 처리\n        }\n    }\n\n    @Override\n    public void onFailure(Call<ApiResponse<List<User>>> call, Throwable t) {\n        // 실패 처리\n    }\n});\n```\n\n# 고급 사용법: 인터셉터와 로깅\n\n네트워크 요청에 대한 더 많은 제어를 위해 OkHttp를 사용하여 인터셉터를 추가할 수 있습니다. 인터셉터는 요청 및 응답을 수정하고 세부 정보를 기록하며 인증을 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n먼저 OkHttp 종속성을 추가해주세요:\n\n```js\nimplementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'\n```\n\n그런 다음 인터셉터를 사용하여 OkHttp 클라이언트를 설정하세요:\n\n```js\nHttpLoggingInterceptor logging = new HttpLoggingInterceptor();\nlogging.setLevel(HttpLoggingInterceptor.Level.BODY);\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addInterceptor(logging)\n        .build();\n\nRetrofit retrofit = new Retrofit.Builder()\n        .baseUrl(BASE_URL)\n        .client(client)\n        .addConverterFactory(GsonConverterFactory.create())\n        .build();\n```\n\n<div class=\"content-ad\"></div>\n\n이 설정을 통해 모든 네트워크 요청과 응답이 로깅되어 문제를 디버그하기가 더 쉬워집니다.\n\n# 결론\n\nRetrofit은 안드로이드에서 네트워크 호출을 처리하는 강력하고 유연한 라이브러리입니다. 그 간결함과 방대한 사용자 정의 옵션을 결합하여 네트워크 작업을 처리하는 데 탁월한 선택지가 됩니다. Retrofit을 사용함으로써 복잡한 API 및 대규모 데이터셋을 다룰 때에도 앱이 효율적으로 작동하고 부드러운 사용자 경험을 제공할 수 있습니다.\n\n본 문서에서 제공된 예제와 지침을 따라 Retrofit을 안드로이드 프로젝트에 통합하고 비동기 프로그래밍을 위한 기능을 활용할 수 있는 능력을 습득할 수 있을 것입니다. 즐거운 코딩 되세요!","ogImage":{"url":"/assets/img/2024-05-20-NetworkCallsinAndroidAsynchronousProgrammingwithRetrofit_0.png"},"coverImage":"/assets/img/2024-05-20-NetworkCallsinAndroidAsynchronousProgrammingwithRetrofit_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안녕하세요! 안드로이드 개발 세계에서 네트워크 호출을 효율적으로 처리하는 것이 매우 중요해요. 원격 서버에서 데이터를 가져오거나 클라우드에 데이터를 업로드한다 하더라도, 네트워크 작업은 시간이 오래 걸릴 수 있고 제대로 처리되지 않으면 사용자 경험에 상당한 영향을 줄 수 있어요. 여기서 Retrofit이 등장하는데, 이는 Square에서 개발한 안드로이드와 자바용 타입 안전한 HTTP 클라이언트에요. 이 글에서는 Retrofit의 내부 동작과 안드로이드에서 네트워크 호출을 수행하는 데 어떻게 비동기 프로그래밍으로 사용할 수 있는지 알아볼 거에요.</p>\n<p>동기 호출의 문제점을 상상해보세요. 만약 앱이 서버에서 사용자 데이터를 다운로드해야 한다면, 개발자는 전통적인 동기 방식을 사용할 수 있어요:</p>\n<pre><code class=\"hljs language-js\">문자열 userData = <span class=\"hljs-title function_\">downloadUserDataSync</span>();\n\n<span class=\"hljs-comment\">// 이제 userData를 앱 로직에서 사용하세요...</span>\n</code></pre>\n<p>이 방법은 직관적으로 보이지만 문제점이 있습니다: downloadUserDataSync()가 실행 중일 때 전체 앱이 차단됩니다. 사용자가 화면과 상호 작용할 수 없게 되며, 버튼이 응답하지 않는 것처럼 보이고 데이터 다운로드가 완료될 때까지 앱이 멈춰 있는 것처럼 보입니다. 이는 사용자 경험을 저하시킵니다.</p>\n<p>비동기 프로그래밍 등장</p>\n<p>비동기 프로그래밍을 통해 앱이 네트워크 응답을 기다리는 동안에도 계속 실행할 수 있습니다. 핵심 아이디어는 백그라운드에서 네트워크 호출을 시작하고 응답이 준비되었을 때 알림을 받는 것입니다. 이렇게 하면 주 스레드가 사용 가능해져 사용자의 상호작용에 민첩하게 대응할 수 있습니다.</p>\n<p>레트로핏을 위한 구조체</p>\n<p>레트로핏은 안드로이드에서 네트워크 호출을 간소화하고 비동기 프로그래밍과 완벽하게 통합되는 인기 있는 HTTP 클라이언트 라이브러리입니다. 인터페이스를 사용하여 API 엔드포인트를 정의하고 요청을 생성하고 응답을 처리하는 방법을 제공합니다.</p>\n<p>다음은 레트로핏의 주요 기능 중 일부입니다:</p>\n<ul>\n<li>쉬운 사용: 네트워크 요청을 만들고 응답을 구문 분석하는 복잡성을 추상화합니다.</li>\n<li>타입 안전성: 작업 중인 데이터의 유형이 예상대로인지 확인합니다.</li>\n<li>비동기 요청: 원활한 사용자 경험을 위해 필수적인 비동기 네트워크 호출을 지원합니다.</li>\n<li>통합: OkHttp, RxJava, Gson과 같은 다른 라이브러리와 원활하게 작동합니다.</li>\n</ul>\n<h1>Retrofit 설정하기</h1>\n<pre><code class=\"hljs language-js\">의존성 {\n    구현체 <span class=\"hljs-string\">'com.squareup.retrofit2:retrofit:2.9.0'</span>\n    구현체 <span class=\"hljs-string\">'com.squareup.retrofit2:converter-gson:2.9.0'</span>\n}\n</code></pre>\n<p>이러한 종속성에는 Retrofit과 JSON 직렬화 및 역직렬화를 처리하기 위한 Gson 변환기가 포함되어 있습니다.</p>\n<h1>API 인터페이스 정의하기</h1>\n<p>Retrofit을 사용하려면 API의 엔드포인트를 Java 인터페이스로 정의해야 합니다. 사용자 목록을 제공하는 간단한 API와 작업 중이라고 가정해봅시다.</p>\n<pre><code class=\"hljs language-js\">public interface <span class=\"hljs-title class_\">ApiService</span> {\n    @<span class=\"hljs-title function_\">GET</span>(<span class=\"hljs-string\">\"/users\"</span>)\n    <span class=\"hljs-title class_\">Call</span>&#x3C;<span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>>> <span class=\"hljs-title function_\">getUsers</span>();\n}\n</code></pre>\n<pre><code class=\"hljs language-bash\">여기서 @GET(<span class=\"hljs-string\">\"users\"</span>)는 /users 엔드포인트로 GET 요청을 보낸다는 것을 나타내고, Call&#x3C;List&#x3C;User>>는 이 요청이 User 객체의 목록을 반환할 것임을 나타냅니다.\n</code></pre>\n<h1>Retrofit 인스턴스 생성하기</h1>\n<p>다음으로 Retrofit의 인스턴스를 만들어보겠습니다. 보통은 애플리케이션에서 한 번만 이 작업을 수행하며 대부분 싱글톤 패턴으로 처리됩니다.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiClient</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">BASE_URL</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"https://api.example.com/\"</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Retrofit</span> <span class=\"hljs-variable\">retrofit</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Retrofit <span class=\"hljs-title function_\">getClient</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">if</span> (retrofit == <span class=\"hljs-literal\">null</span>) {\n            retrofit = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Retrofit</span>.Builder()\n                    .baseUrl(BASE_URL)\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .build();\n        }\n        <span class=\"hljs-keyword\">return</span> retrofit;\n    }\n}\n</code></pre>\n<p>여기서 BASE_URL은 API의 루트 URL입니다. addConverterFactory(GsonConverterFactory.create())은 Retrofit에 Gson을 JSON 변환에 사용하도록 지시하는 부분입니다.</p>\n<h1>비동기 네트워크 호출하기</h1>\n<p>Retrofit을 설정하면 이제 비동기 네트워크 호출을 할 수 있습니다. 사용자 목록을 가져오고 응답을 처리하는 방법은 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\">public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">AppCompatActivity</span> {\n\n    private <span class=\"hljs-title class_\">ApiService</span> apiService;\n\n    @<span class=\"hljs-title class_\">Override</span>\n    protected <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onCreate</span>(<span class=\"hljs-params\">Bundle savedInstanceState</span>) {\n        <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">onCreate</span>(savedInstanceState);\n        <span class=\"hljs-title function_\">setContentView</span>(R.<span class=\"hljs-property\">layout</span>.<span class=\"hljs-property\">activity_main</span>);\n\n        <span class=\"hljs-title class_\">Retrofit</span> retrofit = <span class=\"hljs-title class_\">ApiClient</span>.<span class=\"hljs-title function_\">getClient</span>();\n        apiService = retrofit.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">ApiService</span>.<span class=\"hljs-property\">class</span>);\n\n        <span class=\"hljs-title function_\">fetchUsers</span>();\n    }\n\n    private <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fetchUsers</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title class_\">Call</span>&#x3C;<span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>>> call = apiService.<span class=\"hljs-title function_\">getUsers</span>();\n        call.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Callback</span>&#x3C;<span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>>>() {\n            @<span class=\"hljs-title class_\">Override</span>\n            public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onResponse</span>(<span class=\"hljs-params\">Call&#x3C;List&#x3C;User>> call, Response&#x3C;List&#x3C;User>> response</span>) {\n                <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-title function_\">isSuccessful</span>()) {\n                    <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>> users = response.<span class=\"hljs-title function_\">body</span>();\n                    <span class=\"hljs-comment\">// 사용자 목록 처리</span>\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-comment\">// 오류 처리</span>\n                }\n            }\n\n            @<span class=\"hljs-title class_\">Override</span>\n            public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onFailure</span>(<span class=\"hljs-params\">Call&#x3C;List&#x3C;User>> call, Throwable t</span>) {\n                <span class=\"hljs-comment\">// 실패 처리</span>\n            }\n        });\n    }\n}\n</code></pre>\n<p><code>fetchUsers</code> 메서드에서 enqueue를 호출하여 네트워크 요청을 비동기적으로 수행합니다. <code>onResponse</code> 메서드는 요청이 성공한 경우에 호출되고, <code>onFailure</code> 메서드는 요청이 실패한 경우에 호출됩니다.</p>\n<h1>다양한 응답 유형 처리</h1>\n<p>레트로핏은 일반 텍스트, JSON 및 사용자 정의 타입을 포함한 다양한 유형의 응답을 지원합니다. 예를 들어, API가 추가 메타데이터를 포함한 JSON 객체를 반환하는 경우 사용자 정의 응답 유형을 정의할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ApiResponse</span>&#x3C;T> {\n    private T data;\n    private <span class=\"hljs-title class_\">String</span> status;\n    private <span class=\"hljs-title class_\">String</span> message;\n\n    <span class=\"hljs-comment\">// Getter 및 Setter 메서드</span>\n}\n</code></pre>\n<p>그런 다음, API 인터페이스를 이 사용자 정의 타입을 사용하도록 업데이트하십시오:</p>\n<pre><code class=\"hljs language-js\">public interface <span class=\"hljs-title class_\">ApiService</span> {\n    @<span class=\"hljs-title function_\">GET</span>(<span class=\"hljs-string\">\"users\"</span>)\n    <span class=\"hljs-title class_\">Call</span>&#x3C;<span class=\"hljs-title class_\">ApiResponse</span>&#x3C;<span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>>>> <span class=\"hljs-title function_\">getUsers</span>();\n}\n</code></pre>\n<p>그리고 액티비티나 프래그먼트에서 응답을 처리해보세요:</p>\n<pre><code class=\"hljs language-js\">call.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Callback</span>&#x3C;<span class=\"hljs-title class_\">ApiResponse</span>&#x3C;<span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>>>>() {\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onResponse</span>(<span class=\"hljs-params\">Call&#x3C;ApiResponse&#x3C;List&#x3C;User>>> call, Response&#x3C;ApiResponse&#x3C;List&#x3C;User>>> response</span>) {\n        <span class=\"hljs-keyword\">if</span> (response.<span class=\"hljs-title function_\">isSuccessful</span>()) {\n            <span class=\"hljs-title class_\">ApiResponse</span>&#x3C;<span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>>> apiResponse = response.<span class=\"hljs-title function_\">body</span>();\n            <span class=\"hljs-keyword\">if</span> (apiResponse != <span class=\"hljs-literal\">null</span> &#x26;&#x26; <span class=\"hljs-string\">\"success\"</span>.<span class=\"hljs-title function_\">equals</span>(apiResponse.<span class=\"hljs-title function_\">getStatus</span>())) {\n                <span class=\"hljs-title class_\">List</span>&#x3C;<span class=\"hljs-title class_\">User</span>> users = apiResponse.<span class=\"hljs-title function_\">getData</span>();\n                <span class=\"hljs-comment\">// 사용자 목록 처리</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// API 오류 처리</span>\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 에러 처리</span>\n        }\n    }\n\n    @<span class=\"hljs-title class_\">Override</span>\n    public <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onFailure</span>(<span class=\"hljs-params\">Call&#x3C;ApiResponse&#x3C;List&#x3C;User>>> call, Throwable t</span>) {\n        <span class=\"hljs-comment\">// 실패 처리</span>\n    }\n});\n</code></pre>\n<h1>고급 사용법: 인터셉터와 로깅</h1>\n<p>네트워크 요청에 대한 더 많은 제어를 위해 OkHttp를 사용하여 인터셉터를 추가할 수 있습니다. 인터셉터는 요청 및 응답을 수정하고 세부 정보를 기록하며 인증을 처리할 수 있습니다.</p>\n<p>먼저 OkHttp 종속성을 추가해주세요:</p>\n<pre><code class=\"hljs language-js\">implementation <span class=\"hljs-string\">'com.squareup.okhttp3:logging-interceptor:4.9.0'</span>\n</code></pre>\n<p>그런 다음 인터셉터를 사용하여 OkHttp 클라이언트를 설정하세요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">HttpLoggingInterceptor</span> logging = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HttpLoggingInterceptor</span>();\nlogging.<span class=\"hljs-title function_\">setLevel</span>(<span class=\"hljs-title class_\">HttpLoggingInterceptor</span>.<span class=\"hljs-property\">Level</span>.<span class=\"hljs-property\">BODY</span>);\n\n<span class=\"hljs-title class_\">OkHttpClient</span> client = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OkHttpClient</span>.<span class=\"hljs-title class_\">Builder</span>()\n        .<span class=\"hljs-title function_\">addInterceptor</span>(logging)\n        .<span class=\"hljs-title function_\">build</span>();\n\n<span class=\"hljs-title class_\">Retrofit</span> retrofit = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Retrofit</span>.<span class=\"hljs-title class_\">Builder</span>()\n        .<span class=\"hljs-title function_\">baseUrl</span>(<span class=\"hljs-variable constant_\">BASE_URL</span>)\n        .<span class=\"hljs-title function_\">client</span>(client)\n        .<span class=\"hljs-title function_\">addConverterFactory</span>(<span class=\"hljs-title class_\">GsonConverterFactory</span>.<span class=\"hljs-title function_\">create</span>())\n        .<span class=\"hljs-title function_\">build</span>();\n</code></pre>\n<p>이 설정을 통해 모든 네트워크 요청과 응답이 로깅되어 문제를 디버그하기가 더 쉬워집니다.</p>\n<h1>결론</h1>\n<p>Retrofit은 안드로이드에서 네트워크 호출을 처리하는 강력하고 유연한 라이브러리입니다. 그 간결함과 방대한 사용자 정의 옵션을 결합하여 네트워크 작업을 처리하는 데 탁월한 선택지가 됩니다. Retrofit을 사용함으로써 복잡한 API 및 대규모 데이터셋을 다룰 때에도 앱이 효율적으로 작동하고 부드러운 사용자 경험을 제공할 수 있습니다.</p>\n<p>본 문서에서 제공된 예제와 지침을 따라 Retrofit을 안드로이드 프로젝트에 통합하고 비동기 프로그래밍을 위한 기능을 활용할 수 있는 능력을 습득할 수 있을 것입니다. 즐거운 코딩 되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}