{"pageProps":{"post":{"title":"쿠버네티스 시크릿을 암호화하는 방법","description":"","date":"2024-05-20 16:42","slug":"2024-05-20-HowtoEncryptKubernetesSecrets","content":"\n\n쿠버네티스 시크릿은 Kubernetes 클러스터에서 실행되는 애플리케이션에서 필요한 비밀 정보를 저장하고 관리하는 메커니즘입니다.\n\n- 민감한 데이터를 응용 프로그램 코드와 분리하여 보관합니다.\n- 시크릿을 생성, 업데이트 및 처리하기 위해 Kubernetes API를 통해 관리됩니다.\n- 시크릿 액세스를 제한하는 구성 가능한 액세스 정책이 있습니다.\n- 볼륨 내의 파일로 노출되거나 환경 변수로 포드에 노출됩니다.\n\n# 시크릿 암호화의 중요성 :\n\n- etcd에서 암호화되지 않은 시크릿은 데이터베이스가 침해당한 경우에 접근할 수 있습니다.\n- 구성이 잘못된 리소스를 통해 실수로 노출될 수 있는 위험이 있습니다.\n- 스토리지 액세스 권한이 있는 관리자 및 사용자가 액세스할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 암호화의 장점 :\n\n- 복호화 키 없이 비밀을 읽을 수 없게 만듭니다.\n- 규정 준수를 통해 데이터 보호 요구 사항 충족을 돕습니다.\n- 암호화된 데이터는 키 없이는 쓸모 없어서 침해로부터의 피해를 줄입니다.\n- 네트워크 전송 중 가로채기를 방지합니다.\n\n# Kubernetes Secrets의 예시 :\n\n- 비밀번호: 데이터베이스 자격 증명, 애플리케이션 로그인 비밀번호 또는 다른 형태의 사용자 인증 비밀번호입니다.\n\n<div class=\"content-ad\"></div>\n\n- 예시: MySQL 데이터베이스 비밀번호.\n\n2. API 키: 외부 서비스 및 API에 인증하고 액세스하기 위한 토큰.\n\n- 예시: 구글 맵스 API 키, Stripe API 키.\n\n3. SSH 키: 서버에 안전한 셸 액세스에 사용되는 키.\n\n<div class=\"content-ad\"></div>\n\n- 예시: 원격 Git 저장소에 액세스하는 개인 SSH 키.\n\n4. TLS 인증서: 안전한 HTTPS 연결 설정에 사용되는 인증서.\n\n- 예시: 웹 서버용 SSL/TLS 인증서.\n\n5. OAuth 토큰: OAuth 흐름에서 권한 부여에 사용되는 토큰.\n\n<div class=\"content-ad\"></div>\n\n- 예시: GitHub 또는 Google과 같은 타사 API에 액세스 토큰입니다.\n\n7. Docker 레지스트리 자격 증명: 개인 Docker 레지스트리에 액세스하기 위한 자격 증명입니다.\n\n- 예시: Docker Hub 또는 기타 컨테이너 레지스트리의 사용자 이름과 비밀번호입니다.\n\n8. 암호화 키: 데이터를 암호화하고 해독하는 데 사용되는 키입니다.\n\n<div class=\"content-ad\"></div>\n\n- 예시: 데이터를 안전하게 보관하기 위해 사용되는 AES 암호화 키.\n\n# 쿠버네티스에서 Secrets 사용법:\n\n- 환경 변수: Secrets는 컨테이너 내에서 환경 변수로 노출될 수 있습니다.\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mycontainer\n    image: myimage\n    env:\n    - name: DB_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: mysecret\n          key: db_password\n```\n\n<div class=\"content-ad\"></div>\n\n2. 볼륨 마운트: 시크릿은 컨테이너 내에서 파일로 마운트될 수 있어요.\n\n```js\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mycontainer\n    image: myimage\n    volumeMounts:\n    - name: secret-volume\n      mountPath: \"/etc/secrets\"\n  volumes:\n  - name: secret-volume\n    secret:\n      secretName: mysecret\n```\n\n# 쿠버네티스 시크릿의 암호화 유형:\n\n- 암호화 철자: 무엇을 의미하며 왜 중요한지 설명합니다.\n- 전송 중 암호화: 시크릿이 전송 중에 암호화되도록 보장하는 방법에 간단히 언급합니다.\n\n<div class=\"content-ad\"></div>\n\n# 암호화 구성 파일 만들기:\n\n이 파일은 암호화 공급자와 암호화에 사용되는 키를 지정합니다.\n\n```js\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n  - resources:\n    - secrets\n    providers:\n    - aescbc:\n        keys:\n        - name: key1\n          secret: <base64-encoded-secret>\n    - identity: {}\n```\n\n# Encryption Key 생성하기:\n\n<div class=\"content-ad\"></div>\n\n256비트 암호화 키를 Base64로 인코딩하세요. 다양한 도구를 사용하여 이 작업을 수행할 수 있습니다. OpenSSL을 사용하여 다음과 같이 수행할 수 있습니다:\n\n```js\nhead -c 32 /dev/urandom | base64\n```\n\n생성된 키로 구성 파일에서 `base64-encoded-secret`을(를) 교체하세요.\n\n# 암호화 구성 적용하기:\n\n<div class=\"content-ad\"></div>\n\nAPI 서버 Manifest 파일을 수정해야 합니다. 일반적으로 /etc/kubernetes/manifests/kube-apiserver.yaml 경로에 위치합니다. 다음과 같이 API 서버 Manifest 파일을 수정해주세요.\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kube-apiserver\n  namespace: kube-system\nspec:\n  containers:\n  - name: kube-apiserver\n    command:\n    - kube-apiserver\n    # 다른 플래그들...\n    - --encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n암호화 구성 파일이 모든 제어 평면 노드의 지정된 경로에서 액세스 가능한지 확인해주세요.\n\n<div class=\"content-ad\"></div>\n\n# API 서버 재시작:\n\nAPI 서버는 새 구성을 적용하고 비밀을 안전하게 암호화하기 시작할 것입니다.\n\n# 암호화 확인:\n\n비밀이 정상적으로 암호화되고 있는지 확인하려면:\n\n<div class=\"content-ad\"></div>\n\n- 테스트 비밀 정보 만들기:\n\n```js\nkubectl create secret generic test-secret --from-literal=key1=supersecret\n```\n\n- etcd 확인: etcd 데이터에 직접 액세스하시면서 (일반적으로 프로덕션에서 피해야 하는 직접적인 etcd 쿼리를 수행하므로 주의하세요). 데이터가 암호화되어 있는지 확인하기 위해 etcdctl 도구를 사용하세요.\n\n```js\nETCDCTL_API=3 etcdctl get /registry/secrets/default/test-secret --prefix --key-file=<path-to-key-file> --cert-file=<path-to-cert-file> --cacert=<path-to-ca-cert>\n```\n\n<div class=\"content-ad\"></div>\n\n# 암호화 키 회전:\n\n보안을 강화하기 위해 주기적으로 암호화 키를 회전하세요.\n\n- 새 키 추가: 새 키를 목록 상단에 업데이트된 암호화 구성 파일에 추가하세요.\n- 비밀 정보 재암호화: 새 키로 모든 비밀 정보를 재암호화하세요.\n\n```js\nkubectl get secrets --all-namespaces -o json | kubectl replace -f -\n```\n\n<div class=\"content-ad\"></div>\n\n- 이전 키 제거: 모든 비밀을 재암호화한 후, 구성에서 이전 키를 제거하십시오.\n\n# Kubernetes Secrets을 암호화하는 것은 클러스터 내의 민감한 데이터를 안전하게 보호하는 데 중요합니다. Kubernetes Secrets를 암호화하는 다양한 방법은 다음과 같습니다:\n\n## 1. 내장된 메커니즘을 사용하여 정지 상태의 Secrets 암호화\n\nKubernetes은 정지 상태의 Secrets를 암호화하는 내장 지원을 제공합니다. 이는 가장 간단한 방법이며 API 서버를 암호화 제공자로 구성하는 것이 포함됩니다. 이것이 수행하는 방법은 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n## 단계:\n\n- 암호화 구성 파일 만들기:\n\n```js\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: <base64-encoded-key>\n  - identity: {}\n```\n\n2. API 서버에서 암호화 구성 지정: kube-apiserver 매니페스트를 편집하십시오 (보통 /etc/kubernetes/manifests/kube-apiserver.yaml에 위치함).\n\n<div class=\"content-ad\"></div>\n\n```plaintext\n--encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n3. API 서버 재시작: 매니페스트를 업데이트한 후에는 kube-apiserver가 자동으로 재시작되어 비밀을 암호화하기 시작합니다.\n\n## 2. 외부 키 관리 서비스(KMS) 사용\n\n보안을 강화하기 위해 Kubernetes는 AWS KMS, Google Cloud KMS 또는 HashiCorp Vault와 같은 외부 키 관리 서비스와 통합할 수 있습니다. 이 방법을 사용하면 Kubernetes가 외부 시스템을 사용하여 키 관리를 수행할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n## 단계:\n\n- KMS 프로바이더 구성:\n\n  - AWS KMS의 경우: AWS KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 해당대로 구성합니다.\n  - Google Cloud KMS의 경우: GCP KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 구성합니다.\n  - HashiCorp Vault의 경우: Vault를 구성하여 키를 관리하고 Vault 프로바이더를 설정합니다.\n\n2. Encryption Configuration 파일 업데이트:\n\n<div class=\"content-ad\"></div>\n\n```yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - kms:\n      name: <provider-name>\n      endpoint: <kms-endpoint>\n      cachesize: 1000\n  - identity: {}\n```\n\n3. API 서버 구성 업데이트:\n\n```bash\n--encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n4. API 서버 재시작: API 서버가 새 구성을 사용하도록 합니다.\n\n<div class=\"content-ad\"></div>\n\n## 3. 커스텀 암호화 제공자를 사용하여 시크릿 암호화\n\n더 많은 제어를 필요로 하는 경우, 커스텀 암호화 제공자를 구현할 수 있습니다. 이 방법은 커스텀 암호화 플러그인을 작성하고 배포하는 과정을 포함합니다.\n\n## 단계:\n\n- 커스텀 프로바이더 개발: 요구 사항에 기반하여 암호화 및 복호화 로직을 구현합니다.\n- 커스텀 프로바이더 배포: 커스텀 프로바이더가 API 서버에서 접근 가능하도록 합니다.\n- 암호화 구성 설정:\n\n<div class=\"content-ad\"></div>\n\n```yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  providers:\n  - custom:\n      name: <custom-provider-name>\n      endpoint: <custom-provider-endpoint>\n  - identity: {}\n```\n\n4. API 서버 업데이트:\n\n```bash\n--encryption-provider-config=/path/to/encryption-config.yaml\n```\n\n5. API 서버 재시작: 구성 변경을 적용하세요.\n\n<div class=\"content-ad\"></div>\n\n## 4. 응용 프로그램 수준에서 비밀을 암호화하는 방법\n\n데이터를 안전하게 보관하기 위해 데이터를 안전하게 저장하는 대신 또는 그 외에 데이터를 Kubernetes Secrets에 저장하기 전에 응용 프로그램 수준에서 데이터를 암호화할 수 있습니다. 이 방법은 응용 프로그램이 암호화 및 복호화를 처리해야 합니다.\n\n## 단계:\n\n- 응용 프로그램에서 암호화 구현: Kubernetes Secret을 만들기 전에 민감한 데이터를 암호화하는 라이브러리나 도구를 사용합니다.\n- Kubernetes Secret으로 암호화된 데이터 저장: Secret에 저장된 데이터는 이미 암호화되어 있습니다.\n- 응용 프로그램에서 데이터 복호화: 응용 프로그램이 Secret을 검색할 때 데이터를 사용하기 전에 데이터를 복호화해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n## 5. Sealed Secrets 사용하기\n\nSealed Secrets는 비트나미에서 개발한 프로젝트로, Git 저장소에 암호화된 비밀을 저장할 수 있게 해줍니다.\n\n## 단계:\n\n- kubeseal 설치: kubeseal CLI 도구를 설치합니다.\n- Secret 암호화: kubeseal을 사용하여 쿠버네티스 Secret에서 SealedSecret을 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nkubectl create secret generic mysecret --from-literal=username=myuser --from-literal=password=mypass -o yaml --dry-run=client > mysecret.yaml\nkubeseal < mysecret.yaml > mysealedsecret.yaml\n```\n\n3. SealedSecret 적용: SealedSecret 매니페스트를 클러스터에 적용합니다.\n\n```js\nkubectl apply -f mysealedsecret.yaml\n```\n\n4. 런타임에서 Controller 복호화: 클러스터의 Sealed Secrets 컨트롤러가 시크릿을 복호화하고 실제 시크릿 리소스를 생성합니다.\n\n<div class=\"content-ad\"></div>\n\n## 6. SOPS(비밀 작업) 사용하기\n\nSOPS는 Kubernetes 시크릿 매니페스트를 암호화하는 데 사용할 수 있는 도구입니다.\n\n## 단계:\n\n- SOPS 설치: SOPS CLI 도구를 설치합니다.\n- 시크릿 매니페스트 암호화: Kubernetes 시크릿 매니페스트를 작성하고 SOPS를 사용하여 암호화합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nsops --encrypt --kms arn:aws:kms:region:account-id:key/key-id secret.yaml > encrypted-secret.yaml\n```\n\n3. Apply the Encrypted Secret: 클러스터에 암호화된 매니페스트를 적용하세요.\n\n```js\nkubectl apply -f encrypted-secret.yaml\n```\n\n4. Decrypt at Runtime: CI/CD 파이프라인이나 애플리케이션 로직 내에서 런타임에 시크릿을 복호화하는 데 SOPS를 사용하세요.\n\n<div class=\"content-ad\"></div>\n\n이러한 방법들은 귀하의 인프라 및 보안 요구사항에 따라 다양한 수준의 보안과 유연성을 제공합니다. Kubernetes Secrets에 대한 암호화를 구현하면, 클러스터 내에서 민감한 데이터가 수명 주기 전체에 걸쳐 보호되도록 할 수 있습니다.\n\n# 이 안내서가 도움이 되었다면 👏 버튼을 클릭해주세요.\n\n더 많은 학습을 위해 팔로우 해주세요 😊\n\n특정 주제에 궁금한 점이 있으시면, 개인적인 메모나 댓글을 남겨주세요. 궁금해하는 내용을 탐험하는 데 도움을 드리겠습니다!\n\n<div class=\"content-ad\"></div>\n\n# 소중한 시간을 내어 지식을 향상시키기 위해 노력하셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-20-HowtoEncryptKubernetesSecrets_0.png"},"coverImage":"/assets/img/2024-05-20-HowtoEncryptKubernetesSecrets_0.png","tag":["Tech"],"readingTime":9},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>쿠버네티스 시크릿은 Kubernetes 클러스터에서 실행되는 애플리케이션에서 필요한 비밀 정보를 저장하고 관리하는 메커니즘입니다.</p>\n<ul>\n<li>민감한 데이터를 응용 프로그램 코드와 분리하여 보관합니다.</li>\n<li>시크릿을 생성, 업데이트 및 처리하기 위해 Kubernetes API를 통해 관리됩니다.</li>\n<li>시크릿 액세스를 제한하는 구성 가능한 액세스 정책이 있습니다.</li>\n<li>볼륨 내의 파일로 노출되거나 환경 변수로 포드에 노출됩니다.</li>\n</ul>\n<h1>시크릿 암호화의 중요성 :</h1>\n<ul>\n<li>etcd에서 암호화되지 않은 시크릿은 데이터베이스가 침해당한 경우에 접근할 수 있습니다.</li>\n<li>구성이 잘못된 리소스를 통해 실수로 노출될 수 있는 위험이 있습니다.</li>\n<li>스토리지 액세스 권한이 있는 관리자 및 사용자가 액세스할 수 있습니다.</li>\n</ul>\n<h1>암호화의 장점 :</h1>\n<ul>\n<li>복호화 키 없이 비밀을 읽을 수 없게 만듭니다.</li>\n<li>규정 준수를 통해 데이터 보호 요구 사항 충족을 돕습니다.</li>\n<li>암호화된 데이터는 키 없이는 쓸모 없어서 침해로부터의 피해를 줄입니다.</li>\n<li>네트워크 전송 중 가로채기를 방지합니다.</li>\n</ul>\n<h1>Kubernetes Secrets의 예시 :</h1>\n<ul>\n<li>비밀번호: 데이터베이스 자격 증명, 애플리케이션 로그인 비밀번호 또는 다른 형태의 사용자 인증 비밀번호입니다.</li>\n</ul>\n<ul>\n<li>예시: MySQL 데이터베이스 비밀번호.</li>\n</ul>\n<ol start=\"2\">\n<li>API 키: 외부 서비스 및 API에 인증하고 액세스하기 위한 토큰.</li>\n</ol>\n<ul>\n<li>예시: 구글 맵스 API 키, Stripe API 키.</li>\n</ul>\n<ol start=\"3\">\n<li>SSH 키: 서버에 안전한 셸 액세스에 사용되는 키.</li>\n</ol>\n<ul>\n<li>예시: 원격 Git 저장소에 액세스하는 개인 SSH 키.</li>\n</ul>\n<ol start=\"4\">\n<li>TLS 인증서: 안전한 HTTPS 연결 설정에 사용되는 인증서.</li>\n</ol>\n<ul>\n<li>예시: 웹 서버용 SSL/TLS 인증서.</li>\n</ul>\n<ol start=\"5\">\n<li>OAuth 토큰: OAuth 흐름에서 권한 부여에 사용되는 토큰.</li>\n</ol>\n<ul>\n<li>예시: GitHub 또는 Google과 같은 타사 API에 액세스 토큰입니다.</li>\n</ul>\n<ol start=\"7\">\n<li>Docker 레지스트리 자격 증명: 개인 Docker 레지스트리에 액세스하기 위한 자격 증명입니다.</li>\n</ol>\n<ul>\n<li>예시: Docker Hub 또는 기타 컨테이너 레지스트리의 사용자 이름과 비밀번호입니다.</li>\n</ul>\n<ol start=\"8\">\n<li>암호화 키: 데이터를 암호화하고 해독하는 데 사용되는 키입니다.</li>\n</ol>\n<ul>\n<li>예시: 데이터를 안전하게 보관하기 위해 사용되는 AES 암호화 키.</li>\n</ul>\n<h1>쿠버네티스에서 Secrets 사용법:</h1>\n<ul>\n<li>환경 변수: Secrets는 컨테이너 내에서 환경 변수로 노출될 수 있습니다.</li>\n</ul>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Pod</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mypod</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">containers:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mycontainer</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">myimage</span>\n    <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">DB_PASSWORD</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">secretKeyRef:</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mysecret</span>\n          <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">db_password</span>\n</code></pre>\n<ol start=\"2\">\n<li>볼륨 마운트: 시크릿은 컨테이너 내에서 파일로 마운트될 수 있어요.</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">apiVersion</span>: v1\n<span class=\"hljs-attr\">kind</span>: <span class=\"hljs-title class_\">Pod</span>\n<span class=\"hljs-attr\">metadata</span>:\n  <span class=\"hljs-attr\">name</span>: mypod\n<span class=\"hljs-attr\">spec</span>:\n  <span class=\"hljs-attr\">containers</span>:\n  - <span class=\"hljs-attr\">name</span>: mycontainer\n    <span class=\"hljs-attr\">image</span>: myimage\n    <span class=\"hljs-attr\">volumeMounts</span>:\n    - <span class=\"hljs-attr\">name</span>: secret-volume\n      <span class=\"hljs-attr\">mountPath</span>: <span class=\"hljs-string\">\"/etc/secrets\"</span>\n  <span class=\"hljs-attr\">volumes</span>:\n  - <span class=\"hljs-attr\">name</span>: secret-volume\n    <span class=\"hljs-attr\">secret</span>:\n      <span class=\"hljs-attr\">secretName</span>: mysecret\n</code></pre>\n<h1>쿠버네티스 시크릿의 암호화 유형:</h1>\n<ul>\n<li>암호화 철자: 무엇을 의미하며 왜 중요한지 설명합니다.</li>\n<li>전송 중 암호화: 시크릿이 전송 중에 암호화되도록 보장하는 방법에 간단히 언급합니다.</li>\n</ul>\n<h1>암호화 구성 파일 만들기:</h1>\n<p>이 파일은 암호화 공급자와 암호화에 사용되는 키를 지정합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">apiVersion</span>: apiserver.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">k8s</span>.<span class=\"hljs-property\">io</span>/v1\n<span class=\"hljs-attr\">kind</span>: <span class=\"hljs-title class_\">EncryptionConfiguration</span>\n<span class=\"hljs-attr\">resources</span>:\n  - <span class=\"hljs-attr\">resources</span>:\n    - secrets\n    <span class=\"hljs-attr\">providers</span>:\n    - <span class=\"hljs-attr\">aescbc</span>:\n        <span class=\"hljs-attr\">keys</span>:\n        - <span class=\"hljs-attr\">name</span>: key1\n          <span class=\"hljs-attr\">secret</span>: &#x3C;base64-encoded-secret>\n    - <span class=\"hljs-attr\">identity</span>: {}\n</code></pre>\n<h1>Encryption Key 생성하기:</h1>\n<p>256비트 암호화 키를 Base64로 인코딩하세요. 다양한 도구를 사용하여 이 작업을 수행할 수 있습니다. OpenSSL을 사용하여 다음과 같이 수행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\">head -c <span class=\"hljs-number\">32</span> /dev/urandom | base64\n</code></pre>\n<p>생성된 키로 구성 파일에서 <code>base64-encoded-secret</code>을(를) 교체하세요.</p>\n<h1>암호화 구성 적용하기:</h1>\n<p>API 서버 Manifest 파일을 수정해야 합니다. 일반적으로 /etc/kubernetes/manifests/kube-apiserver.yaml 경로에 위치합니다. 다음과 같이 API 서버 Manifest 파일을 수정해주세요.</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Pod</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-apiserver</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">kube-system</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">containers:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">kube-apiserver</span>\n    <span class=\"hljs-attr\">command:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">kube-apiserver</span>\n    <span class=\"hljs-comment\"># 다른 플래그들...</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">--encryption-provider-config=/path/to/encryption-config.yaml</span>\n</code></pre>\n<p>암호화 구성 파일이 모든 제어 평면 노드의 지정된 경로에서 액세스 가능한지 확인해주세요.</p>\n<h1>API 서버 재시작:</h1>\n<p>API 서버는 새 구성을 적용하고 비밀을 안전하게 암호화하기 시작할 것입니다.</p>\n<h1>암호화 확인:</h1>\n<p>비밀이 정상적으로 암호화되고 있는지 확인하려면:</p>\n<ul>\n<li>테스트 비밀 정보 만들기:</li>\n</ul>\n<pre><code class=\"hljs language-js\">kubectl create secret generic test-secret --<span class=\"hljs-keyword\">from</span>-literal=key1=supersecret\n</code></pre>\n<ul>\n<li>etcd 확인: etcd 데이터에 직접 액세스하시면서 (일반적으로 프로덕션에서 피해야 하는 직접적인 etcd 쿼리를 수행하므로 주의하세요). 데이터가 암호화되어 있는지 확인하기 위해 etcdctl 도구를 사용하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable constant_\">ETCDCTL_API</span>=<span class=\"hljs-number\">3</span> etcdctl get /registry/secrets/<span class=\"hljs-keyword\">default</span>/test-secret --prefix --key-file=&#x3C;path-to-key-file> --cert-file=&#x3C;path-to-cert-file> --cacert=&#x3C;path-to-ca-cert>\n</code></pre>\n<h1>암호화 키 회전:</h1>\n<p>보안을 강화하기 위해 주기적으로 암호화 키를 회전하세요.</p>\n<ul>\n<li>새 키 추가: 새 키를 목록 상단에 업데이트된 암호화 구성 파일에 추가하세요.</li>\n<li>비밀 정보 재암호화: 새 키로 모든 비밀 정보를 재암호화하세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">kubectl get secrets --all-namespaces -o json | kubectl replace -f -\n</code></pre>\n<ul>\n<li>이전 키 제거: 모든 비밀을 재암호화한 후, 구성에서 이전 키를 제거하십시오.</li>\n</ul>\n<h1>Kubernetes Secrets을 암호화하는 것은 클러스터 내의 민감한 데이터를 안전하게 보호하는 데 중요합니다. Kubernetes Secrets를 암호화하는 다양한 방법은 다음과 같습니다:</h1>\n<h2>1. 내장된 메커니즘을 사용하여 정지 상태의 Secrets 암호화</h2>\n<p>Kubernetes은 정지 상태의 Secrets를 암호화하는 내장 지원을 제공합니다. 이는 가장 간단한 방법이며 API 서버를 암호화 제공자로 구성하는 것이 포함됩니다. 이것이 수행하는 방법은 다음과 같습니다:</p>\n<h2>단계:</h2>\n<ul>\n<li>암호화 구성 파일 만들기:</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-attr\">apiVersion</span>: apiserver.<span class=\"hljs-property\">config</span>.<span class=\"hljs-property\">k8s</span>.<span class=\"hljs-property\">io</span>/v1\n<span class=\"hljs-attr\">kind</span>: <span class=\"hljs-title class_\">EncryptionConfiguration</span>\n<span class=\"hljs-attr\">resources</span>:\n- <span class=\"hljs-attr\">resources</span>:\n  - secrets\n  <span class=\"hljs-attr\">providers</span>:\n  - <span class=\"hljs-attr\">aescbc</span>:\n      <span class=\"hljs-attr\">keys</span>:\n      - <span class=\"hljs-attr\">name</span>: key1\n        <span class=\"hljs-attr\">secret</span>: &#x3C;base64-encoded-key>\n  - <span class=\"hljs-attr\">identity</span>: {}\n</code></pre>\n<ol start=\"2\">\n<li>API 서버에서 암호화 구성 지정: kube-apiserver 매니페스트를 편집하십시오 (보통 /etc/kubernetes/manifests/kube-apiserver.yaml에 위치함).</li>\n</ol>\n<pre><code class=\"hljs language-plaintext\">--encryption-provider-config=/path/to/encryption-config.yaml\n</code></pre>\n<ol start=\"3\">\n<li>API 서버 재시작: 매니페스트를 업데이트한 후에는 kube-apiserver가 자동으로 재시작되어 비밀을 암호화하기 시작합니다.</li>\n</ol>\n<h2>2. 외부 키 관리 서비스(KMS) 사용</h2>\n<p>보안을 강화하기 위해 Kubernetes는 AWS KMS, Google Cloud KMS 또는 HashiCorp Vault와 같은 외부 키 관리 서비스와 통합할 수 있습니다. 이 방법을 사용하면 Kubernetes가 외부 시스템을 사용하여 키 관리를 수행할 수 있습니다.</p>\n<h2>단계:</h2>\n<ul>\n<li>\n<p>KMS 프로바이더 구성:</p>\n<ul>\n<li>AWS KMS의 경우: AWS KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 해당대로 구성합니다.</li>\n<li>Google Cloud KMS의 경우: GCP KMS 프로바이더 플러그인을 사용하고 암호화 구성 파일을 구성합니다.</li>\n<li>HashiCorp Vault의 경우: Vault를 구성하여 키를 관리하고 Vault 프로바이더를 설정합니다.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Encryption Configuration 파일 업데이트:</li>\n</ol>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apiserver.config.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">EncryptionConfiguration</span>\n<span class=\"hljs-attr\">resources:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">resources:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">secrets</span>\n  <span class=\"hljs-attr\">providers:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kms:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&#x3C;provider-name></span>\n      <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">&#x3C;kms-endpoint></span>\n      <span class=\"hljs-attr\">cachesize:</span> <span class=\"hljs-number\">1000</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">identity:</span> {}\n</code></pre>\n<ol start=\"3\">\n<li>API 서버 구성 업데이트:</li>\n</ol>\n<pre><code class=\"hljs language-bash\">--encryption-provider-config=/path/to/encryption-config.yaml\n</code></pre>\n<ol start=\"4\">\n<li>API 서버 재시작: API 서버가 새 구성을 사용하도록 합니다.</li>\n</ol>\n<h2>3. 커스텀 암호화 제공자를 사용하여 시크릿 암호화</h2>\n<p>더 많은 제어를 필요로 하는 경우, 커스텀 암호화 제공자를 구현할 수 있습니다. 이 방법은 커스텀 암호화 플러그인을 작성하고 배포하는 과정을 포함합니다.</p>\n<h2>단계:</h2>\n<ul>\n<li>커스텀 프로바이더 개발: 요구 사항에 기반하여 암호화 및 복호화 로직을 구현합니다.</li>\n<li>커스텀 프로바이더 배포: 커스텀 프로바이더가 API 서버에서 접근 가능하도록 합니다.</li>\n<li>암호화 구성 설정:</li>\n</ul>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apiserver.config.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">EncryptionConfiguration</span>\n<span class=\"hljs-attr\">resources:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">resources:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">secrets</span>\n  <span class=\"hljs-attr\">providers:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">custom:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&#x3C;custom-provider-name></span>\n      <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">&#x3C;custom-provider-endpoint></span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">identity:</span> {}\n</code></pre>\n<ol start=\"4\">\n<li>API 서버 업데이트:</li>\n</ol>\n<pre><code class=\"hljs language-bash\">--encryption-provider-config=/path/to/encryption-config.yaml\n</code></pre>\n<ol start=\"5\">\n<li>API 서버 재시작: 구성 변경을 적용하세요.</li>\n</ol>\n<h2>4. 응용 프로그램 수준에서 비밀을 암호화하는 방법</h2>\n<p>데이터를 안전하게 보관하기 위해 데이터를 안전하게 저장하는 대신 또는 그 외에 데이터를 Kubernetes Secrets에 저장하기 전에 응용 프로그램 수준에서 데이터를 암호화할 수 있습니다. 이 방법은 응용 프로그램이 암호화 및 복호화를 처리해야 합니다.</p>\n<h2>단계:</h2>\n<ul>\n<li>응용 프로그램에서 암호화 구현: Kubernetes Secret을 만들기 전에 민감한 데이터를 암호화하는 라이브러리나 도구를 사용합니다.</li>\n<li>Kubernetes Secret으로 암호화된 데이터 저장: Secret에 저장된 데이터는 이미 암호화되어 있습니다.</li>\n<li>응용 프로그램에서 데이터 복호화: 응용 프로그램이 Secret을 검색할 때 데이터를 사용하기 전에 데이터를 복호화해야 합니다.</li>\n</ul>\n<h2>5. Sealed Secrets 사용하기</h2>\n<p>Sealed Secrets는 비트나미에서 개발한 프로젝트로, Git 저장소에 암호화된 비밀을 저장할 수 있게 해줍니다.</p>\n<h2>단계:</h2>\n<ul>\n<li>kubeseal 설치: kubeseal CLI 도구를 설치합니다.</li>\n<li>Secret 암호화: kubeseal을 사용하여 쿠버네티스 Secret에서 SealedSecret을 생성합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">kubectl create secret generic mysecret --<span class=\"hljs-keyword\">from</span>-literal=username=myuser --<span class=\"hljs-keyword\">from</span>-literal=password=mypass -o yaml --dry-run=client > mysecret.<span class=\"hljs-property\">yaml</span>\nkubeseal &#x3C; mysecret.<span class=\"hljs-property\">yaml</span> > mysealedsecret.<span class=\"hljs-property\">yaml</span>\n</code></pre>\n<ol start=\"3\">\n<li>SealedSecret 적용: SealedSecret 매니페스트를 클러스터에 적용합니다.</li>\n</ol>\n<pre><code class=\"hljs language-js\">kubectl apply -f mysealedsecret.<span class=\"hljs-property\">yaml</span>\n</code></pre>\n<ol start=\"4\">\n<li>런타임에서 Controller 복호화: 클러스터의 Sealed Secrets 컨트롤러가 시크릿을 복호화하고 실제 시크릿 리소스를 생성합니다.</li>\n</ol>\n<h2>6. SOPS(비밀 작업) 사용하기</h2>\n<p>SOPS는 Kubernetes 시크릿 매니페스트를 암호화하는 데 사용할 수 있는 도구입니다.</p>\n<h2>단계:</h2>\n<ul>\n<li>SOPS 설치: SOPS CLI 도구를 설치합니다.</li>\n<li>시크릿 매니페스트 암호화: Kubernetes 시크릿 매니페스트를 작성하고 SOPS를 사용하여 암호화합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">sops --encrypt --kms <span class=\"hljs-attr\">arn</span>:<span class=\"hljs-attr\">aws</span>:<span class=\"hljs-attr\">kms</span>:<span class=\"hljs-attr\">region</span>:account-<span class=\"hljs-attr\">id</span>:key/key-id secret.<span class=\"hljs-property\">yaml</span> > encrypted-secret.<span class=\"hljs-property\">yaml</span>\n</code></pre>\n<ol start=\"3\">\n<li>Apply the Encrypted Secret: 클러스터에 암호화된 매니페스트를 적용하세요.</li>\n</ol>\n<pre><code class=\"hljs language-js\">kubectl apply -f encrypted-secret.<span class=\"hljs-property\">yaml</span>\n</code></pre>\n<ol start=\"4\">\n<li>Decrypt at Runtime: CI/CD 파이프라인이나 애플리케이션 로직 내에서 런타임에 시크릿을 복호화하는 데 SOPS를 사용하세요.</li>\n</ol>\n<p>이러한 방법들은 귀하의 인프라 및 보안 요구사항에 따라 다양한 수준의 보안과 유연성을 제공합니다. Kubernetes Secrets에 대한 암호화를 구현하면, 클러스터 내에서 민감한 데이터가 수명 주기 전체에 걸쳐 보호되도록 할 수 있습니다.</p>\n<h1>이 안내서가 도움이 되었다면 👏 버튼을 클릭해주세요.</h1>\n<p>더 많은 학습을 위해 팔로우 해주세요 😊</p>\n<p>특정 주제에 궁금한 점이 있으시면, 개인적인 메모나 댓글을 남겨주세요. 궁금해하는 내용을 탐험하는 데 도움을 드리겠습니다!</p>\n<h1>소중한 시간을 내어 지식을 향상시키기 위해 노력하셔서 감사합니다!</h1>\n</body>\n</html>\n"},"__N_SSG":true}