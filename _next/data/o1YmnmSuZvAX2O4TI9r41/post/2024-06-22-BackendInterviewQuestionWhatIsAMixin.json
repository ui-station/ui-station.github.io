{"pageProps":{"post":{"title":"백엔드 면접 질문  믹스인이란 무엇인가요","description":"","date":"2024-06-22 22:53","slug":"2024-06-22-BackendInterviewQuestionWhatIsAMixin","content":"\n\nInterviewer가 데이터 구조 및 알고리즘 질문에 대한 면접을 마치면 임의로 짧은 기술 질문을 할 수 있습니다. \n\n예를 들어, 믹스인(Mixin)이 무엇이며 왜 사용하는지 설명해보세요.\n\n그리고 그 외에도 많은 다른 질문들이 있습니다. 이 질문들의 상당수에 대해 괜찮은 답변을 준비하는 것이 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n# Mixin이란 무엇인가요?\n\n- 기본적으로, Mixin은 간단한 클래스입니다.\n- 사용자 정의 클래스에 기능을 제공하는 클래스입니다.\n\n```js\nclass BarkMixin:\n    def bark(self):\n        print('woof')\n\nclass Animal:\n    ... \n\nclass Dog(Animal, BarkMixin):\n    ... \n```\n\n^ 여기서 BarkMixin은 해당 클래스에서 상속 받은 클래스에 'bark' 메소드를 제공합니다.\n\n<div class=\"content-ad\"></div>\n\nBarkMixin이 Dog의 부모 클래스로 사용되는 것이 아니라, 단순히 Dog에게 짖는 메서드를 제공하도록 설계되었습니다.\n\n# 믹스인은 섞어서 사용할 수 있습니다\n\n```js\nclass BarkMixin:\n    def bark(self):\n        print('woof')\n\nclass MeowMixin:\n    def meow(self):\n        print('meow')\n\nclass SqueakMixin:\n    def squeak(self):\n        print('squeak')\n```\n\n^ 각 믹스인에는 일반적으로 소수의 함수가 포함되어 있습니다. 이렇게 하면 조합하여 더 편리하게 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```javascript\nclass Monster1(BarkMixin, MeowMixin):\n    pass\n\nm = Monster1()\n\nm.bark()    # woo\nm.meow()    # 야옹\n```\n\n가령 Monster1이 짖고 야옹할 수 있다고 합시다. 내부에 짖고 야옹하는 메서드를 정의하는 대신, Monster1을 BarkMixin과 MeowMixin에서 상속받도록 만들면 됩니다.\n\n```javascript\nclass Monster2(BarkMixin, MeowMixin, SqueakMixin):\n    pass\n\nm = Monster2()\n\nm.bark()    # woo\nm.meow()    # 야옹\nm.squeak()  # squeak\n```\n\n그리고 Monster2가 짖고 야옹하며 삑삑 소리를 낼 수 있게 하려면 BarkMixin, MeowMixin, SqueakMixin에서 상속받으면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 그런데, 클래스 내에서 이들을 정의하는 것이 어떨까요???\n\n```js\nclass 짖기포함:\n    def 짖다(self):\n        print('왈왈')\n\nclass 고양이울음포함:\n    def 고양이울음(self):\n        print('야옹')\n\nclass 삑삑포함:\n    def 삑삑(self):\n        print('삐익')\n```\n\n다음과 같은 몬스터를 만들고 싶다고 가정해봅시다:\n\n- 몬스터1은 짖을 수 있고 야옹거릴 수 있습니다.\n- 몬스터2는 짖고 야옹하며 삑삑을 할 수 있습니다.\n- 몬스터3은 야옹하며 삑삑을 할 수 있습니다.\n- 몬스터4는 삑삑만 할 수 있습니다.\n- 몬스터5는 짖거나 삑삑을 할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n천천히 하나씩 mixins을 사용해보죠.\n\n```js\nclass Monster1:\n    def bark(self):\n        print('woof')\n\n    def meow(self): \n        print('meow')\n\nclass Monster2:\n    def bark(self):\n        print('woof')\n\n    def meow(self):\n        print('meow')\n\n    def squeak(self):\n        print('squeak')\n\nclass Monster3:\n    def meow(self):\n        print('meow')\n\n    def squeak(self):\n        print('squeak')\n\nclass Monster4:\n    def squeak(self):\n        print('squeak')\n\nclass Monster5:\n    def bark(self):\n        print('woof')\n\n    def squeak(self):\n        print('squeak')\n```\n\n우와, 말하게 해서 쓰기도 귀찮고, 코드가 중복되어서 짜증났죠! 이제 mixins을 사용해봅시다:\n\n```js\nclass BarkMixin:\n    def bark(self):\n        print('woof')\n\nclass MeowMixin:\n    def meow(self):\n        print('meow')\n\nclass SqueakMixin:\n    def squeak(self):\n        print('squeak')\n\nclass Monster1(BarkMixin, MeowMixin): pass\n\nclass Monster2(BarkMixin, MeowMixin, SqueakMixin): pass\n\nclass Monster3(MeowMixin, SqueakMixin): pass\n\nclass Monster4(SqueakMixin): pass\n\nclass Monster5(BarkMixin, SqueakMixin): pass\n```\n\n<div class=\"content-ad\"></div>\n\n훨씬 깔끔하고, 코드 반복이 훨씬 적으며, 읽기도 훨씬 쉬워요\n\n# 결론\n\n만약 당신이 다음과 같은 기능이 있다면:\n\n- 작고 모듈식이고\n- 상당 수의 클래스들이 필요로 하는\n- 혼합 및 매칭이 필요한\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해 보시는 것을 권장해 드립니다. 이 설명이 명확하고 이해하기 쉬웠으면 좋겠네요. \n\n# 만약 제가 창작자로서 지원받길 원하신다면\n\n- 이 이야기에 대해 50번 박수를 보내주세요.\n- 여러분의 생각을 말씀해 주는 댓글을 남겨주세요.\n- 이야기에서 가장 좋아하는 부분을 강조해 주세요.\n\n감사합니다! 이런 작은 조치들이 큰 도움이 되고 정말 감사히 받아들입니다!\n\n<div class=\"content-ad\"></div>\n\nYouTube: https://www.youtube.com/@zlliu246\n\nLinkedIn: https://www.linkedin.com/in/zlliu/\n\nMy Ebooks: https://zlliu.co/ebooks","ogImage":{"url":"/assets/img/2024-06-22-BackendInterviewQuestionWhatIsAMixin_0.png"},"coverImage":"/assets/img/2024-06-22-BackendInterviewQuestionWhatIsAMixin_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Interviewer가 데이터 구조 및 알고리즘 질문에 대한 면접을 마치면 임의로 짧은 기술 질문을 할 수 있습니다.</p>\n<p>예를 들어, 믹스인(Mixin)이 무엇이며 왜 사용하는지 설명해보세요.</p>\n<p>그리고 그 외에도 많은 다른 질문들이 있습니다. 이 질문들의 상당수에 대해 괜찮은 답변을 준비하는 것이 중요합니다.</p>\n<h1>Mixin이란 무엇인가요?</h1>\n<ul>\n<li>기본적으로, Mixin은 간단한 클래스입니다.</li>\n<li>사용자 정의 클래스에 기능을 제공하는 클래스입니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BarkMixin</span>:\n    def <span class=\"hljs-title function_\">bark</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'woof'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>:\n    ... \n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_\">Animal</span>, <span class=\"hljs-title class_\">BarkMixin</span>):\n    ... \n</code></pre>\n<p>^ 여기서 BarkMixin은 해당 클래스에서 상속 받은 클래스에 'bark' 메소드를 제공합니다.</p>\n<p>BarkMixin이 Dog의 부모 클래스로 사용되는 것이 아니라, 단순히 Dog에게 짖는 메서드를 제공하도록 설계되었습니다.</p>\n<h1>믹스인은 섞어서 사용할 수 있습니다</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BarkMixin</span>:\n    def <span class=\"hljs-title function_\">bark</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'woof'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MeowMixin</span>:\n    def <span class=\"hljs-title function_\">meow</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'meow'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SqueakMixin</span>:\n    def <span class=\"hljs-title function_\">squeak</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'squeak'</span>)\n</code></pre>\n<p>^ 각 믹스인에는 일반적으로 소수의 함수가 포함되어 있습니다. 이렇게 하면 조합하여 더 편리하게 사용할 수 있습니다.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster1</span>(<span class=\"hljs-title class_\">BarkMixin</span>, <span class=\"hljs-title class_\">MeowMixin</span>):\n    pass\n\nm = <span class=\"hljs-title class_\">Monster1</span>()\n\nm.<span class=\"hljs-title function_\">bark</span>()    # woo\nm.<span class=\"hljs-title function_\">meow</span>()    # 야옹\n</code></pre>\n<p>가령 Monster1이 짖고 야옹할 수 있다고 합시다. 내부에 짖고 야옹하는 메서드를 정의하는 대신, Monster1을 BarkMixin과 MeowMixin에서 상속받도록 만들면 됩니다.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster2</span>(<span class=\"hljs-title class_\">BarkMixin</span>, <span class=\"hljs-title class_\">MeowMixin</span>, <span class=\"hljs-title class_\">SqueakMixin</span>):\n    pass\n\nm = <span class=\"hljs-title class_\">Monster2</span>()\n\nm.<span class=\"hljs-title function_\">bark</span>()    # woo\nm.<span class=\"hljs-title function_\">meow</span>()    # 야옹\nm.<span class=\"hljs-title function_\">squeak</span>()  # squeak\n</code></pre>\n<p>그리고 Monster2가 짖고 야옹하며 삑삑 소리를 낼 수 있게 하려면 BarkMixin, MeowMixin, SqueakMixin에서 상속받으면 됩니다.</p>\n<h1>그런데, 클래스 내에서 이들을 정의하는 것이 어떨까요???</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> 짖기포함:\n    def 짖다(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'왈왈'</span>)\n\n<span class=\"hljs-keyword\">class</span> 고양이울음포함:\n    def 고양이울음(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'야옹'</span>)\n\n<span class=\"hljs-keyword\">class</span> 삑삑포함:\n    def 삑삑(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'삐익'</span>)\n</code></pre>\n<p>다음과 같은 몬스터를 만들고 싶다고 가정해봅시다:</p>\n<ul>\n<li>몬스터1은 짖을 수 있고 야옹거릴 수 있습니다.</li>\n<li>몬스터2는 짖고 야옹하며 삑삑을 할 수 있습니다.</li>\n<li>몬스터3은 야옹하며 삑삑을 할 수 있습니다.</li>\n<li>몬스터4는 삑삑만 할 수 있습니다.</li>\n<li>몬스터5는 짖거나 삑삑을 할 수 있습니다.</li>\n</ul>\n<p>천천히 하나씩 mixins을 사용해보죠.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster1</span>:\n    def <span class=\"hljs-title function_\">bark</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'woof'</span>)\n\n    def <span class=\"hljs-title function_\">meow</span>(self): \n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'meow'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster2</span>:\n    def <span class=\"hljs-title function_\">bark</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'woof'</span>)\n\n    def <span class=\"hljs-title function_\">meow</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'meow'</span>)\n\n    def <span class=\"hljs-title function_\">squeak</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'squeak'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster3</span>:\n    def <span class=\"hljs-title function_\">meow</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'meow'</span>)\n\n    def <span class=\"hljs-title function_\">squeak</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'squeak'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster4</span>:\n    def <span class=\"hljs-title function_\">squeak</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'squeak'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster5</span>:\n    def <span class=\"hljs-title function_\">bark</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'woof'</span>)\n\n    def <span class=\"hljs-title function_\">squeak</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'squeak'</span>)\n</code></pre>\n<p>우와, 말하게 해서 쓰기도 귀찮고, 코드가 중복되어서 짜증났죠! 이제 mixins을 사용해봅시다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BarkMixin</span>:\n    def <span class=\"hljs-title function_\">bark</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'woof'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MeowMixin</span>:\n    def <span class=\"hljs-title function_\">meow</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'meow'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SqueakMixin</span>:\n    def <span class=\"hljs-title function_\">squeak</span>(self):\n        <span class=\"hljs-title function_\">print</span>(<span class=\"hljs-string\">'squeak'</span>)\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster1</span>(<span class=\"hljs-title class_\">BarkMixin</span>, <span class=\"hljs-title class_\">MeowMixin</span>): pass\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster2</span>(<span class=\"hljs-title class_\">BarkMixin</span>, <span class=\"hljs-title class_\">MeowMixin</span>, <span class=\"hljs-title class_\">SqueakMixin</span>): pass\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster3</span>(<span class=\"hljs-title class_\">MeowMixin</span>, <span class=\"hljs-title class_\">SqueakMixin</span>): pass\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster4</span>(<span class=\"hljs-title class_\">SqueakMixin</span>): pass\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Monster5</span>(<span class=\"hljs-title class_\">BarkMixin</span>, <span class=\"hljs-title class_\">SqueakMixin</span>): pass\n</code></pre>\n<p>훨씬 깔끔하고, 코드 반복이 훨씬 적으며, 읽기도 훨씬 쉬워요</p>\n<h1>결론</h1>\n<p>만약 당신이 다음과 같은 기능이 있다면:</p>\n<ul>\n<li>작고 모듈식이고</li>\n<li>상당 수의 클래스들이 필요로 하는</li>\n<li>혼합 및 매칭이 필요한</li>\n</ul>\n<p>테이블 태그를 Markdown 형식으로 변경해 보시는 것을 권장해 드립니다. 이 설명이 명확하고 이해하기 쉬웠으면 좋겠네요.</p>\n<h1>만약 제가 창작자로서 지원받길 원하신다면</h1>\n<ul>\n<li>이 이야기에 대해 50번 박수를 보내주세요.</li>\n<li>여러분의 생각을 말씀해 주는 댓글을 남겨주세요.</li>\n<li>이야기에서 가장 좋아하는 부분을 강조해 주세요.</li>\n</ul>\n<p>감사합니다! 이런 작은 조치들이 큰 도움이 되고 정말 감사히 받아들입니다!</p>\n<p>YouTube: <a href=\"https://www.youtube.com/@zlliu246\" rel=\"nofollow\" target=\"_blank\">https://www.youtube.com/@zlliu246</a></p>\n<p>LinkedIn: <a href=\"https://www.linkedin.com/in/zlliu/\" rel=\"nofollow\" target=\"_blank\">https://www.linkedin.com/in/zlliu/</a></p>\n<p>My Ebooks: <a href=\"https://zlliu.co/ebooks\" rel=\"nofollow\" target=\"_blank\">https://zlliu.co/ebooks</a></p>\n</body>\n</html>\n"},"__N_SSG":true}