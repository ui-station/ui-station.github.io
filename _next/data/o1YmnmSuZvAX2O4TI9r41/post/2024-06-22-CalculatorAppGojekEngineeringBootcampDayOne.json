{"pageProps":{"post":{"title":"계산기 앱 만들기  Gojek 엔지니어링 부트캠프 첫날","description":"","date":"2024-06-22 22:44","slug":"2024-06-22-CalculatorAppGojekEngineeringBootcampDayOne","content":"\n\n내가 Gojek Engineering Bootcamp 첫 날에 만든 프로젝트에 대해 이야기하고 싶어. 나는 Calculator 앱을 만들었어. 이 앱은 Android 개발을 위해 학생으로서 주어진 프로젝트 중 일부로, XML 레이아웃 및 Kotlin에 대해 배우는 과정의 일환이었어. 프로젝트를 완료한 지 얼마 되지 않아서, 여전히 신선한 기분이어서 여기에 대해 써 보고 싶어.\n\n![Calculator App Gojek Engineering Bootcamp Day One 0](/assets/img/2024-06-22-CalculatorAppGojekEngineeringBootcampDayOne_0.png)\n\n프로젝트를 마치기 위해, 나는 XML부터 시작했어. 여기서 ConstraintLayout을 사용했어. 이 레이아웃을 사용함으로써 Calculator 단어, 결과 상자, 숫자 입력 등을 자유롭게 배치할 수 있었어. 제목(\"Calculator\"라고 적힌 부분)에는 textStyle를 Bold로 설정한 TextView를 사용했어. 결과 상자에도 TextView를 사용했지만, 여기에는 흥미로운 점이 있어. 결과 텍스트의 글꼴이 다른 텍스트와 다르다는 것을 알 수 있어. 네, 결과 텍스트는 숫자 글꼴을 사용했어. 나는 \"download number font ttf\"라는 키워드로 구글에서 검색하여 해당 글꼴을 얻었어. ttf는 파일 형식을 나타냈어. 이 글꼴을 다운로드하고(압축 파일이었기 때문에) 추출한 다음 res.font 폴더에 넣었어.\n\n![Calculator App Gojek Engineering Bootcamp Day One 1](/assets/img/2024-06-22-CalculatorAppGojekEngineeringBootcampDayOne_1.png)\n\n<div class=\"content-ad\"></div>\n\n결과 상자도 다소 독특합니다. 가까이 보면 상자의 텍스트가 아래 오른쪽에 배치되어 있습니다. 이것은 형식 설정 때문입니다. 형식을 지정하지 않으면 텍스트가 왼쪽 상단에 배치됩니다. 결과 상자의 코드는 다음과 같습니다.\n\n```js\n<TextView\n        android:id=\"@+id/result\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"120dp\"\n        android:text=\"0\"\n        android:textSize=\"80dp\"\n        android:gravity=\"bottom|right\"\n        android:fontFamily=\"@font/calculator_font\"\n        android:background=\"@color/cardview_shadow_start_color\"\n        app:layout_constraintTop_toBottomOf=\"@id/title\"\n        app:layout_constraintStart_toStartOf=\"parent\">\n\n    </TextView>\n```\n\n숫자 입력란에는 EditText를 사용했고, 연산자 버튼(더하기, 빼기 등)은 다음과 같이 제약 조건이 있는 버튼을 사용했습니다.\n\n```js\n    <Button\n        android:id=\"@+id/btnPlus\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"+\"\n        app:layout_constraintTop_toBottomOf=\"@id/secondInput\"\n        app:layout_constraintStart_toStartOf=\"parent\">\n\n    </Button>\n\n    <Button\n        android:id=\"@+id/btnMinus\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"-\"\n        app:layout_constraintEnd_toStartOf=\"@id/btnTimes\"\n        app:layout_constraintTop_toBottomOf=\"@id/secondInput\"\n        app:layout_constraintStart_toEndOf=\"@id/btnPlus\">\n\n    </Button>\n\n    <Button\n        android:id=\"@+id/btnTimes\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"*\"\n        app:layout_constraintEnd_toStartOf=\"@id/btnDivide\"\n        app:layout_constraintTop_toBottomOf=\"@id/secondInput\"\n        app:layout_constraintStart_toEndOf=\"@id/btnMinus\">\n\n    </Button>\n\n    <Button\n        android:id=\"@+id/btnDivide\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"/\"\n        app:layout_constraintTop_toBottomOf=\"@id/secondInput\"\n        app:layout_constraintStart_toEndOf=\"@id/btnTimes\"\n        app:layout_constraintEnd_toStartOf=\"@id/btnClear\">\n\n    </Button>\n\n    <Button\n        android:id=\"@+id/btnClear\"\n        android:layout_width=\"70dp\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"C\"\n        app:layout_constraintTop_toBottomOf=\"@id/secondInput\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        android:backgroundTint=\"#FF0000\">\n    </Button>\n```\n\n<div class=\"content-ad\"></div>\n\n좋아요, 레이아웃 작업을 마쳤으니 다음 단계로 진행해봐요. 그 전에 viewBinding을 사용하려면 build.gradle 파일에 something을 추가해야 해요.\n\n```js\n    buildFeatures {\n        viewBinding = true\n    }\n```\n\n그런 다음 MainActivity에서, 먼저 XML을 inflate하고 해당 TextView, EditText, Button과 같은 객체를 얻어와요.\n\n```js\n        var resultTv = binding.result\n        var result: Double\n\n        var firstInput = binding.firstInput\n        var secondInput = binding.secondInput\n\n        var plusButton = binding.btnPlus\n        var minusButton = binding.btnMinus\n        var timesButton = binding.btnTimes\n        var divideButton = binding.btnDivide\n        var clearButton = binding.btnClear\n```\n\n<div class=\"content-ad\"></div>\n\n그럼 각각의 연산자에 기반한 계산을 도와주는 몇 가지 함수를 선언했습니다.\n\n```js\n    fun adding(a: Double, b : Double):Double{\n        return a + b\n    }\n\n    fun minus(a: Double, b : Double) : Double {\n        return a - b\n    }\n\n    fun times(a: Double, b : Double) : Double {\n        return a * b\n    }\n\n    fun divide(a: Double, b : Double) : Double {\n        if (b == 0.0){\n            throw IOException()\n        }\n        return a / b\n    }\n```\n\ndivide 함수를 보면, b가 영인지 여부를 확인하는 것을 볼 수 있습니다. 왜일까요? 그 이유는 b가 식 아래에있는 숫자이기 때문입니다 (나눗셈 연산에서 \"a\"를 \"b\"로 나눈 것은 a/b입니다) 그리고 우리는 0으로 a를 나눌 수 없습니다. 왜냐하면 이것은 오류를 반환할 것이기 때문입니다. 왜 오류가 발생하나요? 바로 아래 숫자가 0으로 접근하거나 b가 점점 작아질수록, 연산의 결과가 무한에 수렴하고 이것은 이 상황에서는 좋지 않습니다. 결론적으로 b가 영일 때, 이를 허용할 수 없으므로 이러한 경우를 처리하지 않으면 프로그램도 오류가 발생합니다. 그래서 b가 영인 경우마다 IOException을 throw 합니다.\n\n그 뒤에는 모든 버튼의 onClickListener를 처리합니다. 버튼이 눌릴 때마다 연산을 수행하고 싶습니다.\n\n<div class=\"content-ad\"></div>\n\n첫째로, 수학 연산에서 첫 번째 숫자나 두 번째 숫자가 0인지 확인됩니다. 둘 중 하나가 0이면 계산을 수행할 수 없습니다. 입력란이 비어있다고 0으로 간주하고 싶지 않기 때문에 이렇게 처리했습니다. 그런 다음 양쪽 숫자가 모두 null이 아닌 경우에만 연산을 계속할 수 있습니다. 이 경우에 null은 사용자가 숫자 입력란에 아무것도 넣지 않았음을 의미합니다.\n\n또한 roundToString() 함수도 있습니다. 이 함수는 무엇을 하는 걸까요?\n\n```js\n    fun Double.roundToString() = when {\n        toInt().toDouble() == this -> toInt()\n        else -> this\n    }.toString()\n```\n\n<div class=\"content-ad\"></div>\n\nroundToString은 Double 클래스 라이브러리에 추가된 함수로, 소수점 뒤에 0이 있는 경우에만 double을 정수로 변환하는 기능을 제공합니다 (예: 0.0은 0으로 변환되고 1.2는 그대로 1.2로 유지됩니다).\n\n또한 roundOffDecimal() 함수가 있습니다.\n\n```kotlin\nfun roundOffDecimal(number: Double): Double {\n    val df = DecimalFormat(\"#.##\")\n    df.roundingMode = RoundingMode.FLOOR\n    return df.format(number).toDouble()\n}\n```\n\n이 함수는 숫자를 더 짧게 만듭니다. 예를 들어 1을 3으로 나눈 결과는 0.33333...이지만, 이 함수를 사용하면 결과가 0.33만 나오게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 마크다운 형식으로 변경해주세요.\n\n그리고 나누기 연산에서 IOException은 Toast를 이용해 catch했습니다.\n\n이제는 모두입니다. 이 프로젝트는 아직 초보적인 단계에 머물고 있습니다. 나중에 더 많은 기능을 추가할 예정이에요.\n\n나중에 봐요!","ogImage":{"url":"/assets/img/2024-06-22-CalculatorAppGojekEngineeringBootcampDayOne_0.png"},"coverImage":"/assets/img/2024-06-22-CalculatorAppGojekEngineeringBootcampDayOne_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>내가 Gojek Engineering Bootcamp 첫 날에 만든 프로젝트에 대해 이야기하고 싶어. 나는 Calculator 앱을 만들었어. 이 앱은 Android 개발을 위해 학생으로서 주어진 프로젝트 중 일부로, XML 레이아웃 및 Kotlin에 대해 배우는 과정의 일환이었어. 프로젝트를 완료한 지 얼마 되지 않아서, 여전히 신선한 기분이어서 여기에 대해 써 보고 싶어.</p>\n<p><img src=\"/assets/img/2024-06-22-CalculatorAppGojekEngineeringBootcampDayOne_0.png\" alt=\"Calculator App Gojek Engineering Bootcamp Day One 0\"></p>\n<p>프로젝트를 마치기 위해, 나는 XML부터 시작했어. 여기서 ConstraintLayout을 사용했어. 이 레이아웃을 사용함으로써 Calculator 단어, 결과 상자, 숫자 입력 등을 자유롭게 배치할 수 있었어. 제목(\"Calculator\"라고 적힌 부분)에는 textStyle를 Bold로 설정한 TextView를 사용했어. 결과 상자에도 TextView를 사용했지만, 여기에는 흥미로운 점이 있어. 결과 텍스트의 글꼴이 다른 텍스트와 다르다는 것을 알 수 있어. 네, 결과 텍스트는 숫자 글꼴을 사용했어. 나는 \"download number font ttf\"라는 키워드로 구글에서 검색하여 해당 글꼴을 얻었어. ttf는 파일 형식을 나타냈어. 이 글꼴을 다운로드하고(압축 파일이었기 때문에) 추출한 다음 res.font 폴더에 넣었어.</p>\n<p><img src=\"/assets/img/2024-06-22-CalculatorAppGojekEngineeringBootcampDayOne_1.png\" alt=\"Calculator App Gojek Engineering Bootcamp Day One 1\"></p>\n<p>결과 상자도 다소 독특합니다. 가까이 보면 상자의 텍스트가 아래 오른쪽에 배치되어 있습니다. 이것은 형식 설정 때문입니다. 형식을 지정하지 않으면 텍스트가 왼쪽 상단에 배치됩니다. 결과 상자의 코드는 다음과 같습니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;<span class=\"hljs-title class_\">TextView</span>\n        <span class=\"hljs-attr\">android</span>:id=<span class=\"hljs-string\">\"@+id/result\"</span>\n        <span class=\"hljs-attr\">android</span>:layout_width=<span class=\"hljs-string\">\"match_parent\"</span>\n        <span class=\"hljs-attr\">android</span>:layout_height=<span class=\"hljs-string\">\"120dp\"</span>\n        <span class=\"hljs-attr\">android</span>:text=<span class=\"hljs-string\">\"0\"</span>\n        <span class=\"hljs-attr\">android</span>:textSize=<span class=\"hljs-string\">\"80dp\"</span>\n        <span class=\"hljs-attr\">android</span>:gravity=<span class=\"hljs-string\">\"bottom|right\"</span>\n        <span class=\"hljs-attr\">android</span>:fontFamily=<span class=\"hljs-string\">\"@font/calculator_font\"</span>\n        <span class=\"hljs-attr\">android</span>:background=<span class=\"hljs-string\">\"@color/cardview_shadow_start_color\"</span>\n        <span class=\"hljs-attr\">app</span>:layout_constraintTop_toBottomOf=<span class=\"hljs-string\">\"@id/title\"</span>\n        <span class=\"hljs-attr\">app</span>:layout_constraintStart_toStartOf=<span class=\"hljs-string\">\"parent\"</span>>\n\n    &#x3C;/<span class=\"hljs-title class_\">TextView</span>>\n</code></pre>\n<p>숫자 입력란에는 EditText를 사용했고, 연산자 버튼(더하기, 빼기 등)은 다음과 같이 제약 조건이 있는 버튼을 사용했습니다.</p>\n<pre><code class=\"hljs language-js\">    &#x3C;<span class=\"hljs-title class_\">Button</span>\n        <span class=\"hljs-attr\">android</span>:id=<span class=\"hljs-string\">\"@+id/btnPlus\"</span>\n        <span class=\"hljs-attr\">android</span>:layout_width=<span class=\"hljs-string\">\"70dp\"</span>\n        <span class=\"hljs-attr\">android</span>:layout_height=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android</span>:text=<span class=\"hljs-string\">\"+\"</span>\n        <span class=\"hljs-attr\">app</span>:layout_constraintTop_toBottomOf=<span class=\"hljs-string\">\"@id/secondInput\"</span>\n        <span class=\"hljs-attr\">app</span>:layout_constraintStart_toStartOf=<span class=\"hljs-string\">\"parent\"</span>>\n\n    &#x3C;/<span class=\"hljs-title class_\">Button</span>>\n\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/btnMinus\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"70dp\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"-\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"hljs-string\">\"@id/btnTimes\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintTop_toBottomOf</span>=<span class=\"hljs-string\">\"@id/secondInput\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"hljs-string\">\"@id/btnPlus\"</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span></span>\n\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/btnTimes\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"70dp\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"*\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"hljs-string\">\"@id/btnDivide\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintTop_toBottomOf</span>=<span class=\"hljs-string\">\"@id/secondInput\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"hljs-string\">\"@id/btnMinus\"</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span></span>\n\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/btnDivide\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"70dp\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"/\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintTop_toBottomOf</span>=<span class=\"hljs-string\">\"@id/secondInput\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"hljs-string\">\"@id/btnTimes\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"hljs-string\">\"@id/btnClear\"</span>></span>\n\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span></span>\n\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/btnClear\"</span>\n        <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"70dp\"</span>\n        <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span>\n        <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"C\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintTop_toBottomOf</span>=<span class=\"hljs-string\">\"@id/secondInput\"</span>\n        <span class=\"hljs-attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"hljs-string\">\"parent\"</span>\n        <span class=\"hljs-attr\">android:backgroundTint</span>=<span class=\"hljs-string\">\"#FF0000\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span></span>\n</code></pre>\n<p>좋아요, 레이아웃 작업을 마쳤으니 다음 단계로 진행해봐요. 그 전에 viewBinding을 사용하려면 build.gradle 파일에 something을 추가해야 해요.</p>\n<pre><code class=\"hljs language-js\">    buildFeatures {\n        viewBinding = <span class=\"hljs-literal\">true</span>\n    }\n</code></pre>\n<p>그런 다음 MainActivity에서, 먼저 XML을 inflate하고 해당 TextView, EditText, Button과 같은 객체를 얻어와요.</p>\n<pre><code class=\"hljs language-js\">        <span class=\"hljs-keyword\">var</span> resultTv = binding.<span class=\"hljs-property\">result</span>\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-title class_\">Double</span>\n\n        <span class=\"hljs-keyword\">var</span> firstInput = binding.<span class=\"hljs-property\">firstInput</span>\n        <span class=\"hljs-keyword\">var</span> secondInput = binding.<span class=\"hljs-property\">secondInput</span>\n\n        <span class=\"hljs-keyword\">var</span> plusButton = binding.<span class=\"hljs-property\">btnPlus</span>\n        <span class=\"hljs-keyword\">var</span> minusButton = binding.<span class=\"hljs-property\">btnMinus</span>\n        <span class=\"hljs-keyword\">var</span> timesButton = binding.<span class=\"hljs-property\">btnTimes</span>\n        <span class=\"hljs-keyword\">var</span> divideButton = binding.<span class=\"hljs-property\">btnDivide</span>\n        <span class=\"hljs-keyword\">var</span> clearButton = binding.<span class=\"hljs-property\">btnClear</span>\n</code></pre>\n<p>그럼 각각의 연산자에 기반한 계산을 도와주는 몇 가지 함수를 선언했습니다.</p>\n<pre><code class=\"hljs language-js\">    fun <span class=\"hljs-title function_\">adding</span>(<span class=\"hljs-attr\">a</span>: <span class=\"hljs-title class_\">Double</span>, b : <span class=\"hljs-title class_\">Double</span>):<span class=\"hljs-title class_\">Double</span>{\n        <span class=\"hljs-keyword\">return</span> a + b\n    }\n\n    fun <span class=\"hljs-title function_\">minus</span>(<span class=\"hljs-attr\">a</span>: <span class=\"hljs-title class_\">Double</span>, b : <span class=\"hljs-title class_\">Double</span>) : <span class=\"hljs-title class_\">Double</span> {\n        <span class=\"hljs-keyword\">return</span> a - b\n    }\n\n    fun <span class=\"hljs-title function_\">times</span>(<span class=\"hljs-attr\">a</span>: <span class=\"hljs-title class_\">Double</span>, b : <span class=\"hljs-title class_\">Double</span>) : <span class=\"hljs-title class_\">Double</span> {\n        <span class=\"hljs-keyword\">return</span> a * b\n    }\n\n    fun <span class=\"hljs-title function_\">divide</span>(<span class=\"hljs-attr\">a</span>: <span class=\"hljs-title class_\">Double</span>, b : <span class=\"hljs-title class_\">Double</span>) : <span class=\"hljs-title class_\">Double</span> {\n        <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0.0</span>){\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">IOException</span>()\n        }\n        <span class=\"hljs-keyword\">return</span> a / b\n    }\n</code></pre>\n<p>divide 함수를 보면, b가 영인지 여부를 확인하는 것을 볼 수 있습니다. 왜일까요? 그 이유는 b가 식 아래에있는 숫자이기 때문입니다 (나눗셈 연산에서 \"a\"를 \"b\"로 나눈 것은 a/b입니다) 그리고 우리는 0으로 a를 나눌 수 없습니다. 왜냐하면 이것은 오류를 반환할 것이기 때문입니다. 왜 오류가 발생하나요? 바로 아래 숫자가 0으로 접근하거나 b가 점점 작아질수록, 연산의 결과가 무한에 수렴하고 이것은 이 상황에서는 좋지 않습니다. 결론적으로 b가 영일 때, 이를 허용할 수 없으므로 이러한 경우를 처리하지 않으면 프로그램도 오류가 발생합니다. 그래서 b가 영인 경우마다 IOException을 throw 합니다.</p>\n<p>그 뒤에는 모든 버튼의 onClickListener를 처리합니다. 버튼이 눌릴 때마다 연산을 수행하고 싶습니다.</p>\n<p>첫째로, 수학 연산에서 첫 번째 숫자나 두 번째 숫자가 0인지 확인됩니다. 둘 중 하나가 0이면 계산을 수행할 수 없습니다. 입력란이 비어있다고 0으로 간주하고 싶지 않기 때문에 이렇게 처리했습니다. 그런 다음 양쪽 숫자가 모두 null이 아닌 경우에만 연산을 계속할 수 있습니다. 이 경우에 null은 사용자가 숫자 입력란에 아무것도 넣지 않았음을 의미합니다.</p>\n<p>또한 roundToString() 함수도 있습니다. 이 함수는 무엇을 하는 걸까요?</p>\n<pre><code class=\"hljs language-js\">    fun <span class=\"hljs-title class_\">Double</span>.<span class=\"hljs-title function_\">roundToString</span>() = when {\n        <span class=\"hljs-title function_\">toInt</span>().<span class=\"hljs-title function_\">toDouble</span>() == <span class=\"hljs-variable language_\">this</span> -> <span class=\"hljs-title function_\">toInt</span>()\n        <span class=\"hljs-keyword\">else</span> -> <span class=\"hljs-variable language_\">this</span>\n    }.<span class=\"hljs-title function_\">toString</span>()\n</code></pre>\n<p>roundToString은 Double 클래스 라이브러리에 추가된 함수로, 소수점 뒤에 0이 있는 경우에만 double을 정수로 변환하는 기능을 제공합니다 (예: 0.0은 0으로 변환되고 1.2는 그대로 1.2로 유지됩니다).</p>\n<p>또한 roundOffDecimal() 함수가 있습니다.</p>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">roundOffDecimal</span><span class=\"hljs-params\">(number: <span class=\"hljs-type\">Double</span>)</span></span>: <span class=\"hljs-built_in\">Double</span> {\n    <span class=\"hljs-keyword\">val</span> df = DecimalFormat(<span class=\"hljs-string\">\"#.##\"</span>)\n    df.roundingMode = RoundingMode.FLOOR\n    <span class=\"hljs-keyword\">return</span> df.format(number).toDouble()\n}\n</code></pre>\n<p>이 함수는 숫자를 더 짧게 만듭니다. 예를 들어 1을 3으로 나눈 결과는 0.33333...이지만, 이 함수를 사용하면 결과가 0.33만 나오게 됩니다.</p>\n<p>테이블 태그를 마크다운 형식으로 변경해주세요.</p>\n<p>그리고 나누기 연산에서 IOException은 Toast를 이용해 catch했습니다.</p>\n<p>이제는 모두입니다. 이 프로젝트는 아직 초보적인 단계에 머물고 있습니다. 나중에 더 많은 기능을 추가할 예정이에요.</p>\n<p>나중에 봐요!</p>\n</body>\n</html>\n"},"__N_SSG":true}