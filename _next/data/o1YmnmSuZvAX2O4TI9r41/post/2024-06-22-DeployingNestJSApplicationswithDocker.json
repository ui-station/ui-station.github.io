{"pageProps":{"post":{"title":"Docker로 NestJS 애플리케이션 배포하는 방법","description":"","date":"2024-06-22 22:54","slug":"2024-06-22-DeployingNestJSApplicationswithDocker","content":"\n\n![이미지](/assets/img/2024-06-22-DeployingNestJSApplicationswithDocker_0.png)\n\n안녕하세요 여러분 👋, 여러분들이 잘 지내고 있기를 바라요! 오늘은 도커의 세계로 빠져보고, 응용 프로그램 개발과 배포에 미치는 변화를 이해해보려 합니다. 도커는 응용 프로그램과 종속성을 단일 컨테이너로 패키징하여 빌드, 배포 및 실행하는 방식을 혁신적으로 변화시켰습니다. 이는 다양한 환경 간에 일관성을 보장합니다. 이 블로그 포스트에서는 NestJS 응용 프로그램을 도커를 사용해 컨테이너화하고 원활하게 배포하는 과정을 이해해보겠습니다. 시작해봅시다!\n\n## NestJS 프로젝트 설정 🛠️:\n\n먼저 간단한 NestJS 애플리케이션을 만들어봅시다. NestJS CLI가 설치되어 있지 않다면 다음 명령어로 설치할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nnpm install -g @nestjs/cli\n// 새로운 nestjs 앱 생성하기\nnest new my-nest-app\n```\n\n## Dockerfile 작성:\n\nDockerfile을 만들기 전에 Docker 이미지와 컨테이너에 대한 단단한 기초적인 이해가 필요합니다. 다음과 같이 설명해보겠습니다:\n\nDocker 이미지: Docker 이미지는 코드, 런타임, 라이브러리 및 환경 변수를 포함하여 소프트웨어 조각을 실행하는 데 필요한 모든 것이 포함된 가벼운 실행 가능한 것입니다. \n\n\n<div class=\"content-ad\"></div>\n\n도커 컨테이너: 도커 컨테이너는 코드와 모든 종속성을 포장하여 응용 프로그램이 다양한 컴퓨팅 환경에서 빠르고 신뢰성 있게 실행될 수 있도록 하는 경량, 휴대용, 자체 완비형 환경입니다.\n\n이 컨테이너를 어디로든 이동하고 어떤 컴퓨터에서든 실행할 수 있으므로 소프트웨어 작업 여부를 걱정할 필요가 없습니다. 필요한 모든 것이 이미 안에 들어 있기 때문이죠.\n\n도커 파일: Dockerfile은 응용 프로그램을 위한 도커 이미지를 구축하는 방법에 대한 일련의 명령을 포함하는 스크립트입니다. 프로젝트의 루트에 Dockerfile이라는 파일을 만들고 다음 내용을 추가하세요.\n\n```js\n# 공식 Node.js 16 이미지를 기본 이미지로 사용합니다\nFROM node:16-alpine\n\n# 작업 디렉토리 설정\nWORKDIR /app\n\n# package.json 및 package-lock.json 파일 복사\nCOPY package*.json ./\n\n# 종속성 설치\nRUN npm install\n\n# 나머지 응용 프로그램 코드 복사\nCOPY . .\n\n# NestJS 응용 프로그램 빌드\nRUN npm run build\n\n# 응용 프로그램 포트 노출\nEXPOSE 3000\n\n# 응용 프로그램 시작\nCMD [\"node\", \"dist/main\"]\n```\n\n<div class=\"content-ad\"></div>\n\n## .dockerignore 파일 만들기:\n\n.dockerignore 파일은 .gitignore 파일과 비슷하게 작동합니다. 이미지를 빌드할 때 Docker에게 무시해야 할 파일과 디렉토리를 알려줍니다. 프로젝트의 루트에 .dockerignore 파일을 만들고 다음 내용을 추가해주세요.\n\n```js\nnode_modules\ndist\n.git\n.gitignore\nDockerfile\n```\n\n## Docker 이미지 빌드 및 실행하기:\n\n<div class=\"content-ad\"></div>\n\n이제 도커파일과 .dockerignore 파일이 있으니 도커 이미지를 빌드하고 실행해 봅시다.\n\n```js\n//도커에서 이미지를 빌드하는 명령어\ndocker build -t <이미지-이름>:태그\n\n//예시: my-nest-app 이미지를 빌드하는 방법\ndocker build -t my-nest-app:latest .\n```\n\n태그(Tag): 태그는 Docker 이미지의 특정 버전을 식별하는 라벨입니다. 동일한 이미지의 여러 버전을 관리하고 구분하는 데 사용됩니다.\n\n## 도커에서 이미지가 제대로 빌드되었는지 확인하는 방법:\n\n<div class=\"content-ad\"></div>\n\n```js\r\n//도커 이미지 목록을 제공합니다. \r\n도커 이미지 목록 확인\r\n\r\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\r\nmy-nest-app         latest              1d4f1e3f5b7e        2 hours ago         540MB\r\nanother-app         v1.0                3e23f1c3e6a4        3 days ago          350MB\r\n```\r\n\r\n## 도커 컨테이너 실행하기 :\r\n\r\n아래는 도커 컨테이너를 실행하는 명령어입니다. host_port는 사용하려는 기기의 포트를 나타내고, container_port는 컨테이너 내부에서 애플리케이션이 수신 대기하는 포트를 나타냅니다.\r\n\r\n```js\r\ndocker run -p [host_port]:[container_port] [image_name]:[tag]\r\n```\n\n<div class=\"content-ad\"></div>\n\n## 도커에 있는 컨테이너 목록 :\n\n```js\n// 모든 실행 중인 컨테이너 목록 표시\ndocker ps\n\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES\nf3b1c25a3ac8        my-nest-app:latest  \"docker-entrypoint.s…\"   2 hours ago         Up 2 hours          0.0.0.0:3000->3000/tcp   my-nest-app\na4d5f2b5c7a3        another-app:v1.0    \"python app.py\"          3 days ago          Up 3 days           0.0.0.0:5000->5000/tcp   another-app\n```\n\n이제 http://localhost:3000 에서 접속할 수 있어요 🚀.\n\n# 도커 컴포즈 :\n\n<div class=\"content-ad\"></div>\n\n도커 컴포즈는 여러 개의 컨테이너로 구성되는 도커 응용 프로그램을 정의하고 실행하는 도구입니다. NestJS 애플리케이션을 여러 개 실행하는 데 사용할 수 있습니다. 예를 들어, 마이크로서비스 또는 다른 서비스를 함께 실행하는 것이 가능합니다.\n\n## NestJS 애플리케이션 설정:\n\napp1 및 app2라는 두 개의 애플리케이션을 생성할 것이며, NestJS 프로젝트를 만드는 방법은 동일합니다.\n\n```js\n// 첫 번째 애플리케이션 생성\nnest new app1\n\n// 두 번째 애플리케이션 생성\nnest new app2\n```\n\n<div class=\"content-ad\"></div>\n\n## 각 응용 프로그램을 위한 도커 파일 작성:\n\n각 애플리케이션은 이미지를 빌드하기 위한 도커 파일이 필요합니다. 아래는 두 개의 NestJS 응용 프로그램에 동일한 도커 파일이 될 것입니다.\n\n```js\n# 공식 Node.js 이미지 사용\nFROM node:16-alpine\n\n# 작업 디렉토리 생성 및 변경\nWORKDIR /app\n\n# 응용 프로그램 종속성 파일을 이미지에 복사\nCOPY package*.json ./\n\n# 종속성 설치\nRUN npm install\n\n# 로컬 코드를 이미지에 복사\nCOPY . .\n\n# 응용 프로그램 빌드\nRUN npm run build\n\n# 응용 프로그램 시작\nCMD [ \"node\", \"dist/main.js\" ]\n```\n\n## 도커 컴포즈 파일 작성:\n\n<div class=\"content-ad\"></div>\n\n루트 디렉토리에 docker-compose.yml 파일을 만들어서 두 애플리케이션을 위한 서비스를 정의해야 해요.\n\n```js\n//도커  compose 파일의 버전 컨트롤러를 지정.\nversion: '3.8'\nservices:\n  app1:\n    build:\n      context: ./app1\n      dockerfile: Dockerfile\n    //컨테이너 내부의 포트 3000을 호스트 머신의 포트 3001로 매핑합니다.\n    ports:\n      - \"3001:3000\"\n    volumes:\n      - ./app1:/app\n    command: [\"npm\", \"run\", \"start:prod\"]\n\n  app2:\n    build:\n      context: ./app2\n      dockerfile: Dockerfile\n    //컨테이너 내부의 포트 3000을 호스트 머신의 포트 3002로 매핑합니다.\n    ports:\n      - \"3002:3000\"\n    volumes:\n      - ./app2:/app\n    command: [\"npm\", \"run\", \"start:prod\"]\n```\n\n## 파일 디렉토리 구조 :\n\n```js\nroot/\n├── app1/\n│   ├── Dockerfile\n│   ├── package.json\n│   ├── ...\n├── app2/\n│   ├── Dockerfile\n│   ├── package.json\n│   ├── ...\n└── docker-compose.yml\n```\n\n<div class=\"content-ad\"></div>\n\n## Docker Compose를 사용하여 응용 프로그램 빌드 및 실행하기:\n\ndocker-compose build 명령어는 docker-compose.yml에 지정된 도커 이미지를 빌드하는 데 사용됩니다.\n\ndocker-compose up 명령어는 서비스를 실행하는 데 사용됩니다.\n\n## 컨테이너 중지 또는 제거하기:\n\n<div class=\"content-ad\"></div>\n\n이 명령어는 docker-compose up 에 의해 생성된 네트워크를 포함하여 컨테이너 실행을 중지하고 그것들을 제거할 것입니다.\n\n```js\ndocker-compose down \n\n// 컨테이너를 중지하지만 제거하지 않고 싶은 경우\ndocker-compose stop\n```\n\n## 결론 :\n\n이 블로그 포스트에서는 Docker를 사용하여 NestJS 애플리케이션을 컨테이너화하는 기본 사항을 다뤘습니다. Dockerfile을 작성하고 .dockerignore 파일을 만들고 Docker Compose를 사용하여 컨테이너 실행을 간소화했습니다. Docker를 사용하면 응용 프로그램이 다른 환경에서 일관되게 실행되도록 보장할 수 있어 배포 및 확장을 쉽게 할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-22-DeployingNestJSApplicationswithDocker_0.png"},"coverImage":"/assets/img/2024-06-22-DeployingNestJSApplicationswithDocker_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-22-DeployingNestJSApplicationswithDocker_0.png\" alt=\"이미지\"></p>\n<p>안녕하세요 여러분 👋, 여러분들이 잘 지내고 있기를 바라요! 오늘은 도커의 세계로 빠져보고, 응용 프로그램 개발과 배포에 미치는 변화를 이해해보려 합니다. 도커는 응용 프로그램과 종속성을 단일 컨테이너로 패키징하여 빌드, 배포 및 실행하는 방식을 혁신적으로 변화시켰습니다. 이는 다양한 환경 간에 일관성을 보장합니다. 이 블로그 포스트에서는 NestJS 응용 프로그램을 도커를 사용해 컨테이너화하고 원활하게 배포하는 과정을 이해해보겠습니다. 시작해봅시다!</p>\n<h2>NestJS 프로젝트 설정 🛠️:</h2>\n<p>먼저 간단한 NestJS 애플리케이션을 만들어봅시다. NestJS CLI가 설치되어 있지 않다면 다음 명령어로 설치할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">npm install -g @nestjs/cli\n<span class=\"hljs-comment\">// 새로운 nestjs 앱 생성하기</span>\nnest <span class=\"hljs-keyword\">new</span> my-nest-app\n</code></pre>\n<h2>Dockerfile 작성:</h2>\n<p>Dockerfile을 만들기 전에 Docker 이미지와 컨테이너에 대한 단단한 기초적인 이해가 필요합니다. 다음과 같이 설명해보겠습니다:</p>\n<p>Docker 이미지: Docker 이미지는 코드, 런타임, 라이브러리 및 환경 변수를 포함하여 소프트웨어 조각을 실행하는 데 필요한 모든 것이 포함된 가벼운 실행 가능한 것입니다.</p>\n<p>도커 컨테이너: 도커 컨테이너는 코드와 모든 종속성을 포장하여 응용 프로그램이 다양한 컴퓨팅 환경에서 빠르고 신뢰성 있게 실행될 수 있도록 하는 경량, 휴대용, 자체 완비형 환경입니다.</p>\n<p>이 컨테이너를 어디로든 이동하고 어떤 컴퓨터에서든 실행할 수 있으므로 소프트웨어 작업 여부를 걱정할 필요가 없습니다. 필요한 모든 것이 이미 안에 들어 있기 때문이죠.</p>\n<p>도커 파일: Dockerfile은 응용 프로그램을 위한 도커 이미지를 구축하는 방법에 대한 일련의 명령을 포함하는 스크립트입니다. 프로젝트의 루트에 Dockerfile이라는 파일을 만들고 다음 내용을 추가하세요.</p>\n<pre><code class=\"hljs language-js\"># 공식 <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\">js</span> <span class=\"hljs-number\">16</span> 이미지를 기본 이미지로 사용합니다\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">node</span>:<span class=\"hljs-number\">16</span>-alpine\n\n# 작업 디렉토리 설정\n<span class=\"hljs-variable constant_\">WORKDIR</span> /app\n\n# package.<span class=\"hljs-property\">json</span> 및 package-lock.<span class=\"hljs-property\">json</span> 파일 복사\n<span class=\"hljs-variable constant_\">COPY</span> package*.<span class=\"hljs-property\">json</span> ./\n\n# 종속성 설치\n<span class=\"hljs-variable constant_\">RUN</span> npm install\n\n# 나머지 응용 프로그램 코드 복사\n<span class=\"hljs-variable constant_\">COPY</span> . .\n\n# <span class=\"hljs-title class_\">NestJS</span> 응용 프로그램 빌드\n<span class=\"hljs-variable constant_\">RUN</span> npm run build\n\n# 응용 프로그램 포트 노출\n<span class=\"hljs-variable constant_\">EXPOSE</span> <span class=\"hljs-number\">3000</span>\n\n# 응용 프로그램 시작\n<span class=\"hljs-variable constant_\">CMD</span> [<span class=\"hljs-string\">\"node\"</span>, <span class=\"hljs-string\">\"dist/main\"</span>]\n</code></pre>\n<h2>.dockerignore 파일 만들기:</h2>\n<p>.dockerignore 파일은 .gitignore 파일과 비슷하게 작동합니다. 이미지를 빌드할 때 Docker에게 무시해야 할 파일과 디렉토리를 알려줍니다. 프로젝트의 루트에 .dockerignore 파일을 만들고 다음 내용을 추가해주세요.</p>\n<pre><code class=\"hljs language-js\">node_modules\ndist\n.<span class=\"hljs-property\">git</span>\n.<span class=\"hljs-property\">gitignore</span>\n<span class=\"hljs-title class_\">Dockerfile</span>\n</code></pre>\n<h2>Docker 이미지 빌드 및 실행하기:</h2>\n<p>이제 도커파일과 .dockerignore 파일이 있으니 도커 이미지를 빌드하고 실행해 봅시다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//도커에서 이미지를 빌드하는 명령어</span>\ndocker build -t &#x3C;이미지-이름>:태그\n\n<span class=\"hljs-comment\">//예시: my-nest-app 이미지를 빌드하는 방법</span>\ndocker build -t my-nest-<span class=\"hljs-attr\">app</span>:latest .\n</code></pre>\n<p>태그(Tag): 태그는 Docker 이미지의 특정 버전을 식별하는 라벨입니다. 동일한 이미지의 여러 버전을 관리하고 구분하는 데 사용됩니다.</p>\n<h2>도커에서 이미지가 제대로 빌드되었는지 확인하는 방법:</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//도커 이미지 목록을 제공합니다. </span>\r\n도커 이미지 목록 확인\r\n\r\n<span class=\"hljs-variable constant_\">REPOSITORY</span>          <span class=\"hljs-variable constant_\">TAG</span>                 <span class=\"hljs-variable constant_\">IMAGE</span> <span class=\"hljs-variable constant_\">ID</span>            <span class=\"hljs-variable constant_\">CREATED</span>             <span class=\"hljs-variable constant_\">SIZE</span>\r\nmy-nest-app         latest              1d4f1e3f5b7e        <span class=\"hljs-number\">2</span> hours ago         540MB\r\nanother-app         v1<span class=\"hljs-number\">.0</span>                3e23f1c3e6a4        <span class=\"hljs-number\">3</span> days ago          350MB\n</code></pre>\n<h2>도커 컨테이너 실행하기 :</h2>\n<p>아래는 도커 컨테이너를 실행하는 명령어입니다. host_port는 사용하려는 기기의 포트를 나타내고, container_port는 컨테이너 내부에서 애플리케이션이 수신 대기하는 포트를 나타냅니다.</p>\n<pre><code class=\"hljs language-js\">docker run -p [host_port]:[container_port] [image_name]:[tag]\n</code></pre>\n<h2>도커에 있는 컨테이너 목록 :</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 모든 실행 중인 컨테이너 목록 표시</span>\ndocker ps\n\n<span class=\"hljs-variable constant_\">CONTAINER</span> <span class=\"hljs-variable constant_\">ID</span>        <span class=\"hljs-variable constant_\">IMAGE</span>               <span class=\"hljs-variable constant_\">COMMAND</span>                  <span class=\"hljs-variable constant_\">CREATED</span>             <span class=\"hljs-variable constant_\">STATUS</span>              <span class=\"hljs-variable constant_\">PORTS</span>                    <span class=\"hljs-variable constant_\">NAMES</span>\nf3b1c25a3ac8        my-nest-<span class=\"hljs-attr\">app</span>:latest  <span class=\"hljs-string\">\"docker-entrypoint.s…\"</span>   <span class=\"hljs-number\">2</span> hours ago         <span class=\"hljs-title class_\">Up</span> <span class=\"hljs-number\">2</span> hours          <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">3000</span>-><span class=\"hljs-number\">3000</span>/tcp   my-nest-app\na4d5f2b5c7a3        another-<span class=\"hljs-attr\">app</span>:v1<span class=\"hljs-number\">.0</span>    <span class=\"hljs-string\">\"python app.py\"</span>          <span class=\"hljs-number\">3</span> days ago          <span class=\"hljs-title class_\">Up</span> <span class=\"hljs-number\">3</span> days           <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">5000</span>-><span class=\"hljs-number\">5000</span>/tcp   another-app\n</code></pre>\n<p>이제 <a href=\"http://localhost:3000\" rel=\"nofollow\" target=\"_blank\">http://localhost:3000</a> 에서 접속할 수 있어요 🚀.</p>\n<h1>도커 컴포즈 :</h1>\n<p>도커 컴포즈는 여러 개의 컨테이너로 구성되는 도커 응용 프로그램을 정의하고 실행하는 도구입니다. NestJS 애플리케이션을 여러 개 실행하는 데 사용할 수 있습니다. 예를 들어, 마이크로서비스 또는 다른 서비스를 함께 실행하는 것이 가능합니다.</p>\n<h2>NestJS 애플리케이션 설정:</h2>\n<p>app1 및 app2라는 두 개의 애플리케이션을 생성할 것이며, NestJS 프로젝트를 만드는 방법은 동일합니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 첫 번째 애플리케이션 생성</span>\nnest <span class=\"hljs-keyword\">new</span> app1\n\n<span class=\"hljs-comment\">// 두 번째 애플리케이션 생성</span>\nnest <span class=\"hljs-keyword\">new</span> app2\n</code></pre>\n<h2>각 응용 프로그램을 위한 도커 파일 작성:</h2>\n<p>각 애플리케이션은 이미지를 빌드하기 위한 도커 파일이 필요합니다. 아래는 두 개의 NestJS 응용 프로그램에 동일한 도커 파일이 될 것입니다.</p>\n<pre><code class=\"hljs language-js\"># 공식 <span class=\"hljs-title class_\">Node</span>.<span class=\"hljs-property\">js</span> 이미지 사용\n<span class=\"hljs-variable constant_\">FROM</span> <span class=\"hljs-attr\">node</span>:<span class=\"hljs-number\">16</span>-alpine\n\n# 작업 디렉토리 생성 및 변경\n<span class=\"hljs-variable constant_\">WORKDIR</span> /app\n\n# 응용 프로그램 종속성 파일을 이미지에 복사\n<span class=\"hljs-variable constant_\">COPY</span> package*.<span class=\"hljs-property\">json</span> ./\n\n# 종속성 설치\n<span class=\"hljs-variable constant_\">RUN</span> npm install\n\n# 로컬 코드를 이미지에 복사\n<span class=\"hljs-variable constant_\">COPY</span> . .\n\n# 응용 프로그램 빌드\n<span class=\"hljs-variable constant_\">RUN</span> npm run build\n\n# 응용 프로그램 시작\n<span class=\"hljs-variable constant_\">CMD</span> [ <span class=\"hljs-string\">\"node\"</span>, <span class=\"hljs-string\">\"dist/main.js\"</span> ]\n</code></pre>\n<h2>도커 컴포즈 파일 작성:</h2>\n<p>루트 디렉토리에 docker-compose.yml 파일을 만들어서 두 애플리케이션을 위한 서비스를 정의해야 해요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//도커  compose 파일의 버전 컨트롤러를 지정.</span>\n<span class=\"hljs-attr\">version</span>: <span class=\"hljs-string\">'3.8'</span>\n<span class=\"hljs-attr\">services</span>:\n  <span class=\"hljs-attr\">app1</span>:\n    <span class=\"hljs-attr\">build</span>:\n      <span class=\"hljs-attr\">context</span>: ./app1\n      <span class=\"hljs-attr\">dockerfile</span>: <span class=\"hljs-title class_\">Dockerfile</span>\n    <span class=\"hljs-comment\">//컨테이너 내부의 포트 3000을 호스트 머신의 포트 3001로 매핑합니다.</span>\n    <span class=\"hljs-attr\">ports</span>:\n      - <span class=\"hljs-string\">\"3001:3000\"</span>\n    <span class=\"hljs-attr\">volumes</span>:\n      - ./<span class=\"hljs-attr\">app1</span>:/app\n    <span class=\"hljs-attr\">command</span>: [<span class=\"hljs-string\">\"npm\"</span>, <span class=\"hljs-string\">\"run\"</span>, <span class=\"hljs-string\">\"start:prod\"</span>]\n\n  <span class=\"hljs-attr\">app2</span>:\n    <span class=\"hljs-attr\">build</span>:\n      <span class=\"hljs-attr\">context</span>: ./app2\n      <span class=\"hljs-attr\">dockerfile</span>: <span class=\"hljs-title class_\">Dockerfile</span>\n    <span class=\"hljs-comment\">//컨테이너 내부의 포트 3000을 호스트 머신의 포트 3002로 매핑합니다.</span>\n    <span class=\"hljs-attr\">ports</span>:\n      - <span class=\"hljs-string\">\"3002:3000\"</span>\n    <span class=\"hljs-attr\">volumes</span>:\n      - ./<span class=\"hljs-attr\">app2</span>:/app\n    <span class=\"hljs-attr\">command</span>: [<span class=\"hljs-string\">\"npm\"</span>, <span class=\"hljs-string\">\"run\"</span>, <span class=\"hljs-string\">\"start:prod\"</span>]\n</code></pre>\n<h2>파일 디렉토리 구조 :</h2>\n<pre><code class=\"hljs language-js\">root/\n├── app1/\n│   ├── <span class=\"hljs-title class_\">Dockerfile</span>\n│   ├── package.<span class=\"hljs-property\">json</span>\n│   ├── ...\n├── app2/\n│   ├── <span class=\"hljs-title class_\">Dockerfile</span>\n│   ├── package.<span class=\"hljs-property\">json</span>\n│   ├── ...\n└── docker-compose.<span class=\"hljs-property\">yml</span>\n</code></pre>\n<h2>Docker Compose를 사용하여 응용 프로그램 빌드 및 실행하기:</h2>\n<p>docker-compose build 명령어는 docker-compose.yml에 지정된 도커 이미지를 빌드하는 데 사용됩니다.</p>\n<p>docker-compose up 명령어는 서비스를 실행하는 데 사용됩니다.</p>\n<h2>컨테이너 중지 또는 제거하기:</h2>\n<p>이 명령어는 docker-compose up 에 의해 생성된 네트워크를 포함하여 컨테이너 실행을 중지하고 그것들을 제거할 것입니다.</p>\n<pre><code class=\"hljs language-js\">docker-compose down \n\n<span class=\"hljs-comment\">// 컨테이너를 중지하지만 제거하지 않고 싶은 경우</span>\ndocker-compose stop\n</code></pre>\n<h2>결론 :</h2>\n<p>이 블로그 포스트에서는 Docker를 사용하여 NestJS 애플리케이션을 컨테이너화하는 기본 사항을 다뤘습니다. Dockerfile을 작성하고 .dockerignore 파일을 만들고 Docker Compose를 사용하여 컨테이너 실행을 간소화했습니다. Docker를 사용하면 응용 프로그램이 다른 환경에서 일관되게 실행되도록 보장할 수 있어 배포 및 확장을 쉽게 할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}