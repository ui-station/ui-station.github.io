{"pageProps":{"post":{"title":"SwiftUI에서 여러 개의 경고를 표시하는 방법","description":"","date":"2024-06-19 14:14","slug":"2024-06-19-HowtoshowMultipleAlertsinSwiftUI","content":"\n\n## SwiftUI에서 여러 경고를 표시하는 것은 조금 까다로울 수 있어요. 이 두 가지 방법을 소개해 드릴게요.\n\n![이미지](/assets/img/2024-06-19-HowtoshowMultipleAlertsinSwiftUI_0.png)\n\nSwiftUI에서 여러 경고를 표시하는 것은 귀찮을 수 있어요. 그러나, 하나의 경고를 표시하는 것은 꽤 간단해요. 먼저 하나의 경고를 표시하는 방법을 알아보죠.\n\n# 단일 경고\n\n<div class=\"content-ad\"></div>\n\n어플리케이션이 있어요. 사용자가 10진수를 입력하면, 해당 입력이 짝수일 경우 경고 메시지가 표시됩니다.\n\n```js\nstruct ContentView: View {\n    @State private var showEvenAlert: Bool = false\n    @State private var num = 2\n    \n    var body: some View {\n        VStack {\n             TextField(\"숫자를 입력하세요: \", value: $num, format: .number)\n                .textFieldStyle(.roundedBorder)\n                .frame(maxWidth: 150)\n            Button(\"숫자가 짝수일 때 경고 표시\") {\n                showEvenAlert = num % 2 == 0\n            }\n            .alert(isPresented: $showEvenAlert, content: {\n                Alert(title: Text(\"짝수\"), message: Text(\"\\(num)은(는) 짝수입니다\"), dismissButton: .cancel() )\n            })\n        }\n    }\n}\n```\n\n정상적으로 작동합니다. 사용자가 짝수를 입력하면 경고 메시지가 표시됩니다. \n\n<img src=\"https://miro.medium.com/v2/resize:fit:1200/1*uA2Shsj_0WoDUVHLylsHvw.gif\" />\n\n<div class=\"content-ad\"></div>\n\n# 다중 알림\n\n우리는 숫자가 홀수일 때도 알림을 표시하고 싶어요. 홀수는 외롭게 남겨두고 싶지 않아요. 그러니까 첫 번째 알림 아래에 추가 알림을 넣으면 작동할까요?\n\n```js\nstruct ContentView: View {\n    @State private var showEvenAlert:Bool = false\n    @State private var showOddAlert:Bool = false\n    @State private var num = 2\n    \n    var body: some View {\n        VStack {\n            TextField(\"숫자를 입력하세요: \", value: $num, format:.number)\n                .textFieldStyle(.roundedBorder)\n                .frame(maxWidth: 150)\n            Button(\"숫자가 홀수인지 짝수인지 확인\") {\n                showEvenAlert = num % 2 == 0\n                showOddAlert = num % 2 == 1\n            }\n            .alert(isPresented: $showEvenAlert, content: {\n                Alert(title: Text(\"짝수\"), message: Text(\"\\(num)은(는) 짝수입니다\"), dismissButton: .cancel() )\n            })\n            .alert(isPresented: $showOddAlert, content: {\n                Alert(title: Text(\"홀수\"), message: Text(\"\\(num)은(는) 홀수입니다\"), dismissButton: .cancel() )\n            })\n            \n        }\n    }\n}\n```\n\n안타깝게도 그 답은 아니에요. 위의 코드는 작동하지 않을 거예요. 홀수에 대한 알림은 표시되지만 짝수에 대한 알림은 나타나지 않을 거에요.\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:1200/1*JtKMxr1kTj-vWjPfBfa0bw.gif)\n\n이 무엇이 일어나고 있는지 이해해 봅시다. 뷰의 가장 바깥 쪽 알람만 작동합니다. 그래서 홀수 번째 알람은 작동하지만 짝수 번째는 작동하지 않습니다. 의왕, 컴파일러는 심지어 경고도 표시하지 않습니다. 그렇다면 해결책은 무엇일까요?\n\n# 해결책 1:\n\n한 알람을 여러 뷰에 할당할 수 있습니다. 그래서 단일 뷰에 한 개 이상의 알람이 없습니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n```swift\nstruct ContentView: View {\n    @State private var showEvenAlert: Bool = false\n    @State private var showOddAlert: Bool = false\n    @State private var num = 2\n    \n    var body: some View {\n        VStack {\n            TextField(\"Enter number: \", value: $num, format: .number)\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n                .frame(maxWidth: 150)\n                .alert(isPresented: $showOddAlert) {\n                    Alert(title: Text(\"Odd\"), message: Text(\"\\(num) is odd\"), dismissButton: .cancel())\n                }\n            \n            Button(\"Show Alert if number is odd or even\") {\n                showEvenAlert = num % 2 == 0\n                showOddAlert = num % 2 == 1\n            }\n            .alert(isPresented: $showEvenAlert) {\n                Alert(title: Text(\"Even\"), message: Text(\"\\(num) is even\"), dismissButton: .cancel())\n            }\n        }\n    }\n}\n```\n\n이렇게 수정하면 의도한 대로 작동할 것입니다. 하지만, 이 코드가 조금 어수선해 보입니다. 더 많은 알림이 있다면 어떻게 될까요? 코드가 더 어지러워질 것입니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1188/1*QoWoOOrtm-jHFuuIjTYEag.gif\" />\n\n# 해결책 2:\n\n\n<div class=\"content-ad\"></div>\n\n문제를 해결하는 한 가지 방법은 열거형(enum)을 사용하는 것이에요. 모든 종류의 알림에 대해 하나의 case를 만들고 열거형(enum)의 연관 값(associated value)을 사용하여 알림의 제목과 메시지를 나타낼 수 있어요.\n\n```js\nenum AlertContent {\n    case even(num:Int), odd(num:Int)\n    \n    var title:String {\n        switch self {\n        case .even:\n            \"짝수\"\n        case .odd:\n            \"홀수\"\n        }\n    }\n    \n    var message:String {\n        switch self {\n        case .even(let num):\n            \"\\(num)은(는) 짝수에요\"\n        case .odd(let num):\n            \"\\(num)은(는) 홀수에요\"\n        }\n    }\n}\n```\n\n이후에 뷰 코드도 훨씬 간단해질 거예요. 더 이상 여러 알림과 바인딩 변수가 필요하지 않아요. 하나의 알림, 하나의 바인딩 변수, 그리고 AlertContent 변수만 있으면 돼요. 알림 콘텐츠의 형식을 변경하고 알림을 표시할 수 있어요.\n\n```js\nstruct ContentView: View {\n    @State private var showAlert:Bool = false\n    @State private var num = 2\n    @State private var alertContent:AlertContent = .even(num: 2)\n    \n    var body: some View {\n        VStack {\n            TextField(\"숫자를 입력하세요: \", value: $num, format:.number)\n                .textFieldStyle(.roundedBorder)\n                .frame(maxWidth: 150)\n            Button(\"숫자가 홀수이거나 짝수이면 알림 표시\") {\n                alertContent = (num % 2 == 0) ? .even(num: num) : .odd(num: num)\n                showAlert = true\n            }\n            .alert(isPresented: $showAlert, content: {\n                Alert(title: Text(alertContent.title), message: Text(alertContent.message), dismissButton: .cancel() )\n            })\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n한 화면에 필요한 경고를 여러 개 보여야 할 때도 하나의 경고창으로 처리할 수 있습니다. 더 많은 경고를 위해 enum 케이스를 더 추가해야 할 뿐입니다. 이상적으로는 버튼 누름 로직은 다른 곳으로 이동하여, 필요한 경고의 수에 관계없이 뷰가 변하지 않습니다. GitHub에서 해당 프로젝트를 확인할 수 있습니다.\n\n# 함께 소통해요!\n\n- LinkedIn\n- Twitter\n- GitHub","ogImage":{"url":"/assets/img/2024-06-19-HowtoshowMultipleAlertsinSwiftUI_0.png"},"coverImage":"/assets/img/2024-06-19-HowtoshowMultipleAlertsinSwiftUI_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h2>SwiftUI에서 여러 경고를 표시하는 것은 조금 까다로울 수 있어요. 이 두 가지 방법을 소개해 드릴게요.</h2>\n<p><img src=\"/assets/img/2024-06-19-HowtoshowMultipleAlertsinSwiftUI_0.png\" alt=\"이미지\"></p>\n<p>SwiftUI에서 여러 경고를 표시하는 것은 귀찮을 수 있어요. 그러나, 하나의 경고를 표시하는 것은 꽤 간단해요. 먼저 하나의 경고를 표시하는 방법을 알아보죠.</p>\n<h1>단일 경고</h1>\n<p>어플리케이션이 있어요. 사용자가 10진수를 입력하면, 해당 입력이 짝수일 경우 경고 메시지가 표시됩니다.</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">showEvenAlert</span>: <span class=\"hljs-title class_\">Bool</span> = <span class=\"hljs-literal\">false</span>\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">2</span>\n    \n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">VStack</span> {\n             <span class=\"hljs-title class_\">TextField</span>(<span class=\"hljs-string\">\"숫자를 입력하세요: \"</span>, <span class=\"hljs-attr\">value</span>: $num, <span class=\"hljs-attr\">format</span>: .<span class=\"hljs-property\">number</span>)\n                .<span class=\"hljs-title function_\">textFieldStyle</span>(.<span class=\"hljs-property\">roundedBorder</span>)\n                .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">maxWidth</span>: <span class=\"hljs-number\">150</span>)\n            <span class=\"hljs-title class_\">Button</span>(<span class=\"hljs-string\">\"숫자가 짝수일 때 경고 표시\"</span>) {\n                showEvenAlert = num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n            }\n            .<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-attr\">isPresented</span>: $showEvenAlert, <span class=\"hljs-attr\">content</span>: {\n                <span class=\"hljs-title class_\">Alert</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"짝수\"</span>), <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"\\(num)은(는) 짝수입니다\"</span>), <span class=\"hljs-attr\">dismissButton</span>: .<span class=\"hljs-title function_\">cancel</span>() )\n            })\n        }\n    }\n}\n</code></pre>\n<p>정상적으로 작동합니다. 사용자가 짝수를 입력하면 경고 메시지가 표시됩니다.</p>\n<h1>다중 알림</h1>\n<p>우리는 숫자가 홀수일 때도 알림을 표시하고 싶어요. 홀수는 외롭게 남겨두고 싶지 않아요. 그러니까 첫 번째 알림 아래에 추가 알림을 넣으면 작동할까요?</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">showEvenAlert</span>:<span class=\"hljs-title class_\">Bool</span> = <span class=\"hljs-literal\">false</span>\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">showOddAlert</span>:<span class=\"hljs-title class_\">Bool</span> = <span class=\"hljs-literal\">false</span>\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">2</span>\n    \n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">VStack</span> {\n            <span class=\"hljs-title class_\">TextField</span>(<span class=\"hljs-string\">\"숫자를 입력하세요: \"</span>, <span class=\"hljs-attr\">value</span>: $num, <span class=\"hljs-attr\">format</span>:.<span class=\"hljs-property\">number</span>)\n                .<span class=\"hljs-title function_\">textFieldStyle</span>(.<span class=\"hljs-property\">roundedBorder</span>)\n                .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">maxWidth</span>: <span class=\"hljs-number\">150</span>)\n            <span class=\"hljs-title class_\">Button</span>(<span class=\"hljs-string\">\"숫자가 홀수인지 짝수인지 확인\"</span>) {\n                showEvenAlert = num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n                showOddAlert = num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>\n            }\n            .<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-attr\">isPresented</span>: $showEvenAlert, <span class=\"hljs-attr\">content</span>: {\n                <span class=\"hljs-title class_\">Alert</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"짝수\"</span>), <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"\\(num)은(는) 짝수입니다\"</span>), <span class=\"hljs-attr\">dismissButton</span>: .<span class=\"hljs-title function_\">cancel</span>() )\n            })\n            .<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-attr\">isPresented</span>: $showOddAlert, <span class=\"hljs-attr\">content</span>: {\n                <span class=\"hljs-title class_\">Alert</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"홀수\"</span>), <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">Text</span>(<span class=\"hljs-string\">\"\\(num)은(는) 홀수입니다\"</span>), <span class=\"hljs-attr\">dismissButton</span>: .<span class=\"hljs-title function_\">cancel</span>() )\n            })\n            \n        }\n    }\n}\n</code></pre>\n<p>안타깝게도 그 답은 아니에요. 위의 코드는 작동하지 않을 거예요. 홀수에 대한 알림은 표시되지만 짝수에 대한 알림은 나타나지 않을 거에요.</p>\n<p><img src=\"https://miro.medium.com/v2/resize:fit:1200/1*JtKMxr1kTj-vWjPfBfa0bw.gif\" alt=\"image\"></p>\n<p>이 무엇이 일어나고 있는지 이해해 봅시다. 뷰의 가장 바깥 쪽 알람만 작동합니다. 그래서 홀수 번째 알람은 작동하지만 짝수 번째는 작동하지 않습니다. 의왕, 컴파일러는 심지어 경고도 표시하지 않습니다. 그렇다면 해결책은 무엇일까요?</p>\n<h1>해결책 1:</h1>\n<p>한 알람을 여러 뷰에 할당할 수 있습니다. 그래서 단일 뷰에 한 개 이상의 알람이 없습니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> showEvenAlert: <span class=\"hljs-type\">Bool</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> showOddAlert: <span class=\"hljs-type\">Bool</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-meta\">@State</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> num <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>\n    \n    <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n        <span class=\"hljs-type\">VStack</span> {\n            <span class=\"hljs-type\">TextField</span>(<span class=\"hljs-string\">\"Enter number: \"</span>, value: <span class=\"hljs-variable\">$num</span>, format: .number)\n                .textFieldStyle(<span class=\"hljs-type\">RoundedBorderTextFieldStyle</span>())\n                .frame(maxWidth: <span class=\"hljs-number\">150</span>)\n                .alert(isPresented: <span class=\"hljs-variable\">$showOddAlert</span>) {\n                    <span class=\"hljs-type\">Alert</span>(title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"Odd\"</span>), message: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\(num)</span> is odd\"</span>), dismissButton: .cancel())\n                }\n            \n            <span class=\"hljs-type\">Button</span>(<span class=\"hljs-string\">\"Show Alert if number is odd or even\"</span>) {\n                showEvenAlert <span class=\"hljs-operator\">=</span> num <span class=\"hljs-operator\">%</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span>\n                showOddAlert <span class=\"hljs-operator\">=</span> num <span class=\"hljs-operator\">%</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">1</span>\n            }\n            .alert(isPresented: <span class=\"hljs-variable\">$showEvenAlert</span>) {\n                <span class=\"hljs-type\">Alert</span>(title: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"Even\"</span>), message: <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\(num)</span> is even\"</span>), dismissButton: .cancel())\n            }\n        }\n    }\n}\n</code></pre>\n<p>이렇게 수정하면 의도한 대로 작동할 것입니다. 하지만, 이 코드가 조금 어수선해 보입니다. 더 많은 알림이 있다면 어떻게 될까요? 코드가 더 어지러워질 것입니다.</p>\n<h1>해결책 2:</h1>\n<p>문제를 해결하는 한 가지 방법은 열거형(enum)을 사용하는 것이에요. 모든 종류의 알림에 대해 하나의 case를 만들고 열거형(enum)의 연관 값(associated value)을 사용하여 알림의 제목과 메시지를 나타낼 수 있어요.</p>\n<pre><code class=\"hljs language-js\">enum <span class=\"hljs-title class_\">AlertContent</span> {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title function_\">even</span>(<span class=\"hljs-attr\">num</span>:<span class=\"hljs-title class_\">Int</span>), <span class=\"hljs-title function_\">odd</span>(<span class=\"hljs-attr\">num</span>:<span class=\"hljs-title class_\">Int</span>)\n    \n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">title</span>:<span class=\"hljs-title class_\">String</span> {\n        <span class=\"hljs-keyword\">switch</span> self {\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">even</span>:\n            <span class=\"hljs-string\">\"짝수\"</span>\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-property\">odd</span>:\n            <span class=\"hljs-string\">\"홀수\"</span>\n        }\n    }\n    \n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">message</span>:<span class=\"hljs-title class_\">String</span> {\n        <span class=\"hljs-keyword\">switch</span> self {\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">even</span>(<span class=\"hljs-keyword\">let</span> num):\n            <span class=\"hljs-string\">\"\\(num)은(는) 짝수에요\"</span>\n        <span class=\"hljs-keyword\">case</span> .<span class=\"hljs-title function_\">odd</span>(<span class=\"hljs-keyword\">let</span> num):\n            <span class=\"hljs-string\">\"\\(num)은(는) 홀수에요\"</span>\n        }\n    }\n}\n</code></pre>\n<p>이후에 뷰 코드도 훨씬 간단해질 거예요. 더 이상 여러 알림과 바인딩 변수가 필요하지 않아요. 하나의 알림, 하나의 바인딩 변수, 그리고 AlertContent 변수만 있으면 돼요. 알림 콘텐츠의 형식을 변경하고 알림을 표시할 수 있어요.</p>\n<pre><code class=\"hljs language-js\">struct <span class=\"hljs-title class_\">ContentView</span>: <span class=\"hljs-title class_\">View</span> {\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">showAlert</span>:<span class=\"hljs-title class_\">Bool</span> = <span class=\"hljs-literal\">false</span>\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">2</span>\n    @<span class=\"hljs-title class_\">State</span> private <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">alertContent</span>:<span class=\"hljs-title class_\">AlertContent</span> = .<span class=\"hljs-title function_\">even</span>(<span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">2</span>)\n    \n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">View</span> {\n        <span class=\"hljs-title class_\">VStack</span> {\n            <span class=\"hljs-title class_\">TextField</span>(<span class=\"hljs-string\">\"숫자를 입력하세요: \"</span>, <span class=\"hljs-attr\">value</span>: $num, <span class=\"hljs-attr\">format</span>:.<span class=\"hljs-property\">number</span>)\n                .<span class=\"hljs-title function_\">textFieldStyle</span>(.<span class=\"hljs-property\">roundedBorder</span>)\n                .<span class=\"hljs-title function_\">frame</span>(<span class=\"hljs-attr\">maxWidth</span>: <span class=\"hljs-number\">150</span>)\n            <span class=\"hljs-title class_\">Button</span>(<span class=\"hljs-string\">\"숫자가 홀수이거나 짝수이면 알림 표시\"</span>) {\n                alertContent = (num % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) ? .<span class=\"hljs-title function_\">even</span>(<span class=\"hljs-attr\">num</span>: num) : .<span class=\"hljs-title function_\">odd</span>(<span class=\"hljs-attr\">num</span>: num)\n                showAlert = <span class=\"hljs-literal\">true</span>\n            }\n            .<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-attr\">isPresented</span>: $showAlert, <span class=\"hljs-attr\">content</span>: {\n                <span class=\"hljs-title class_\">Alert</span>(<span class=\"hljs-attr\">title</span>: <span class=\"hljs-title class_\">Text</span>(alertContent.<span class=\"hljs-property\">title</span>), <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">Text</span>(alertContent.<span class=\"hljs-property\">message</span>), <span class=\"hljs-attr\">dismissButton</span>: .<span class=\"hljs-title function_\">cancel</span>() )\n            })\n        }\n    }\n}\n</code></pre>\n<p>한 화면에 필요한 경고를 여러 개 보여야 할 때도 하나의 경고창으로 처리할 수 있습니다. 더 많은 경고를 위해 enum 케이스를 더 추가해야 할 뿐입니다. 이상적으로는 버튼 누름 로직은 다른 곳으로 이동하여, 필요한 경고의 수에 관계없이 뷰가 변하지 않습니다. GitHub에서 해당 프로젝트를 확인할 수 있습니다.</p>\n<h1>함께 소통해요!</h1>\n<ul>\n<li>LinkedIn</li>\n<li>Twitter</li>\n<li>GitHub</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}