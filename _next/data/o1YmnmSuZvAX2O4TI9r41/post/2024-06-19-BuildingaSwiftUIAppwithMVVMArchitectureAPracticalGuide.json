{"pageProps":{"post":{"title":"MVVM 아키텍처로 SwiftUI 앱 구축하기 실전 안내","description":"","date":"2024-06-19 10:58","slug":"2024-06-19-BuildingaSwiftUIAppwithMVVMArchitectureAPracticalGuide","content":"\n\n이 튜토리얼에서는 MVVM(Model-View-ViewModel) 아키텍처를 사용하여 간단한 SwiftUI 애플리케이션을 만드는 방법을 안내합니다. 데이터 처리 및 네트워킹을 위해 Combine 프레임워크를 활용할 것입니다. 이 예제에서는 REST API에서 데이터를 가져오고 게시하는 방법을 보여줍니다.\n\n# 개요\n\n다음과 같은 간단한 앱을 만들 것입니다:\n\n- 서버에서 게시물 목록을 가져오기.\n- SwiftUI 뷰에서 게시물을 표시하기.\n- 새 게시물을 생성하기.\n\n<div class=\"content-ad\"></div>\n\n# 프로젝트 설정\n\n먼저 Xcode에서 새로운 SwiftUI 프로젝트를 생성하세요. 그런 다음, 더 나은 구성을 위해 다음과 같은 폴더를 설정합니다:\n\n- Models\n- ViewModels\n- Views\n- Services\n\n# Models\n\n<div class=\"content-ad\"></div>\n\n\"Post\" 모델을 시작해봅시다. 이 모델은 Identifiable과 Codable을 준수합니다.\n\n```swift\n// Models/Post.swift\n\nimport Foundation\n\nstruct Post: Identifiable, Codable {\n    let id: Int\n    let title: String\n    let body: String\n}\n```\n\n# 서비스\n\n네트워크 요청을 처리하기 위한 서비스 레이어가 필요합니다. ApiService와 ApiEndpoints를 만들 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n// Services/ApiEndpoints.swift\n\nimport Foundation\n\nclass ApiEndpoints {\n    static let baseURL = \"https://jsonplaceholder.typicode.com\"\n    \n    static var posts: String { return \"\\(baseURL)/posts\" }\n    static func post(id: Int) -> String { return \"\\(baseURL)/posts/\\(id)\" }\n}\n\n\n\n// Services/ApiService.swift\n\nimport Foundation\nimport Combine\n\nclass ApiService {\n    static let shared = ApiService()\n    private init() {}\n    \n    private func makeRequest<T: Decodable>(url: String, method: String, body: Data? = nil) -> AnyPublisher<T, Error> {\n        guard let url = URL(string: url) else {\n            fatalError(\"Invalid URL\")\n        }\n        \n        var request = URLRequest(url: url)\n        request.httpMethod = method\n        if let body = body {\n            request.httpBody = body\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        }\n        \n        return URLSession.shared.dataTaskPublisher(for: request)\n            .tryMap { output in\n                guard let response = output.response as? HTTPURLResponse,\n                      response.statusCode >= 200 && response.statusCode < 300 else {\n                    throw URLError(.badServerResponse)\n                }\n                return output.data\n            }\n            .decode(type: T.self, decoder: JSONDecoder())\n            .eraseToAnyPublisher()\n    }\n    \n    func get<T: Decodable>(url: String) -> AnyPublisher<T, Error> {\n        return makeRequest(url: url, method: \"GET\")\n    }\n    \n    func post<T: Decodable, U: Encodable>(url: String, body: U) -> AnyPublisher<T, Error> {\n        guard let bodyData = try? JSONEncoder().encode(body) else {\n            fatalError(\"Invalid body data\")\n        }\n        return makeRequest(url: url, method: \"POST\", body: bodyData)\n    }\n    \n    func delete<T: Decodable>(url: String) -> AnyPublisher<T, Error> {\n        return makeRequest(url: url, method: \"DELETE\")\n    }\n}\n\n\n# ViewModels\n\n이제, PostViewModel을 만들어서 게시물을 가져오고 만들어봅시다.\n\n\n<div class=\"content-ad\"></div>\n\n```swift\n// ViewModels/PostViewModel.swift\n\nimport Foundation\nimport Combine\n\nclass PostViewModel: ObservableObject {\n    @Published var posts: [Post] = []\n    @Published var isLoading = false\n    @Published var errorMessage: String? = nil\n    \n    private var cancellables = Set<AnyCancellable>()\n    private let apiService = ApiService.shared\n    \n    func fetchPosts() {\n        self.isLoading = true\n        self.errorMessage = nil\n        \n        apiService.get(url: ApiEndpoints.posts)\n            .receive(on: DispatchQueue.main)\n            .sink(receiveCompletion: { [weak self] completion in\n                self?.isLoading = false\n                switch completion {\n                case .failure(let error):\n                    self?.errorMessage = error.localizedDescription\n                case .finished:\n                    break\n                }\n            }, receiveValue: { [weak self] posts in\n                self?.posts = posts\n            })\n            .store(in: &cancellables)\n    }\n    \n    func createPost() {\n        let newPost = Post(id: 101, title: \"New Post\", body: \"This is a new post.\")\n        \n        apiService.post(url: ApiEndpoints.posts, body: newPost)\n            .receive(on: DispatchQueue.main)\n            .sink(receiveCompletion: { completion in\n                switch completion {\n                case .failure(let error):\n                    print(\"Error: \\(error.localizedDescription)\")\n                case .finished:\n                    print(\"Post created successfully\")\n                }\n            }, receiveValue: { (post: Post) in\n                print(\"Created post: \\(post)\")\n            })\n            .store(in: &cancellables)\n    }\n}\n```\n\n# Views\n\n마지막으로, SwiftUI 뷰를 생성하여 게시물을 표시하고 사용자 상호작용을 처리합니다.\n\n```swift\n// Views/PostListView.swift\n\nimport SwiftUI\n\nstruct PostListView: View {\n    @StateObject private var viewModel = PostViewModel()\n    \n    var body: some View {\n        NavigationView {\n            VStack {\n                if viewModel.isLoading {\n                    ProgressView(\"로딩 중...\")\n                } else if let errorMessage = viewModel.errorMessage {\n                    Text(\"오류: \\(errorMessage)\")\n                } else {\n                    List(viewModel.posts) { post in\n                        VStack(alignment: .leading) {\n                            Text(post.title)\n                                .font(.headline)\n                            Text(post.body)\n                                .font(.subheadline)\n                        }\n                    }\n                }\n            }\n            .navigationTitle(\"게시물\")\n            .onAppear {\n                viewModel.fetchPosts()\n            }\n            .toolbar {\n                Button(action: {\n                    viewModel.createPost()\n                }) {\n                    Image(systemName: \"plus\")\n                }\n            }\n        }\n    }\n}\n\nstruct PostListView_Previews: PreviewProvider {\n    static var previews: some View {\n        PostListView()\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 모두 함께 적용하기\n\n모두가 동작하는 것을 보려면 PostListView를 App 구조체의 진입점으로 설정하세요.\n\n```js\n// demoApp.swift\n\nimport SwiftUI\n\n@main\nstruct demoApp: App {\n    var body: some Scene {\n        WindowGroup {\n            PostListView()\n        }\n    }\n}\n```\n\n이 튜토리얼에서는 SwiftUI 애플리케이션에서 간단한 MVVM 아키텍처를 구현했습니다. 이 구조는 관심사를 분리하여 코드를 보다 깨끗하고 유지보수하기 쉽게 만들어주며, Combine과 같은 Swift의 강력한 기능을 활용하여 비동기 데이터 스트림 처리에도 도움이 됩니다.\n\n<div class=\"content-ad\"></div>\n\n이 안내를 따르면 SwiftUI 프로젝트에서 MVVM을 설정하고 사용하는 방법에 대해 잘 이해할 수 있을 것입니다. 코딩을 즐기세요!","ogImage":{"url":"/assets/img/2024-06-19-BuildingaSwiftUIAppwithMVVMArchitectureAPracticalGuide_0.png"},"coverImage":"/assets/img/2024-06-19-BuildingaSwiftUIAppwithMVVMArchitectureAPracticalGuide_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이 튜토리얼에서는 MVVM(Model-View-ViewModel) 아키텍처를 사용하여 간단한 SwiftUI 애플리케이션을 만드는 방법을 안내합니다. 데이터 처리 및 네트워킹을 위해 Combine 프레임워크를 활용할 것입니다. 이 예제에서는 REST API에서 데이터를 가져오고 게시하는 방법을 보여줍니다.</p>\n<h1>개요</h1>\n<p>다음과 같은 간단한 앱을 만들 것입니다:</p>\n<ul>\n<li>서버에서 게시물 목록을 가져오기.</li>\n<li>SwiftUI 뷰에서 게시물을 표시하기.</li>\n<li>새 게시물을 생성하기.</li>\n</ul>\n<h1>프로젝트 설정</h1>\n<p>먼저 Xcode에서 새로운 SwiftUI 프로젝트를 생성하세요. 그런 다음, 더 나은 구성을 위해 다음과 같은 폴더를 설정합니다:</p>\n<ul>\n<li>Models</li>\n<li>ViewModels</li>\n<li>Views</li>\n<li>Services</li>\n</ul>\n<h1>Models</h1>\n<p>\"Post\" 모델을 시작해봅시다. 이 모델은 Identifiable과 Codable을 준수합니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// Models/Post.swift</span>\n\n<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Post</span>: <span class=\"hljs-title class_\">Identifiable</span>, <span class=\"hljs-title class_\">Codable</span> {\n    <span class=\"hljs-keyword\">let</span> id: <span class=\"hljs-type\">Int</span>\n    <span class=\"hljs-keyword\">let</span> title: <span class=\"hljs-type\">String</span>\n    <span class=\"hljs-keyword\">let</span> body: <span class=\"hljs-type\">String</span>\n}\n</code></pre>\n<h1>서비스</h1>\n<p>네트워크 요청을 처리하기 위한 서비스 레이어가 필요합니다. ApiService와 ApiEndpoints를 만들 것입니다.</p>\n<p>// Services/ApiEndpoints.swift</p>\n<p>import Foundation</p>\n<p>class ApiEndpoints {\nstatic let baseURL = \"<a href=\"https://jsonplaceholder.typicode.com\" rel=\"nofollow\" target=\"_blank\">https://jsonplaceholder.typicode.com</a>\"</p>\n<pre><code>static var posts: String { return \"\\(baseURL)/posts\" }\nstatic func post(id: Int) -> String { return \"\\(baseURL)/posts/\\(id)\" }\n</code></pre>\n<p>}</p>\n<p>// Services/ApiService.swift</p>\n<p>import Foundation\nimport Combine</p>\n<p>class ApiService {\nstatic let shared = ApiService()\nprivate init() {}</p>\n<pre><code>private func makeRequest&#x3C;T: Decodable>(url: String, method: String, body: Data? = nil) -> AnyPublisher&#x3C;T, Error> {\n    guard let url = URL(string: url) else {\n        fatalError(\"Invalid URL\")\n    }\n    \n    var request = URLRequest(url: url)\n    request.httpMethod = method\n    if let body = body {\n        request.httpBody = body\n        request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    }\n    \n    return URLSession.shared.dataTaskPublisher(for: request)\n        .tryMap { output in\n            guard let response = output.response as? HTTPURLResponse,\n                  response.statusCode >= 200 &#x26;&#x26; response.statusCode &#x3C; 300 else {\n                throw URLError(.badServerResponse)\n            }\n            return output.data\n        }\n        .decode(type: T.self, decoder: JSONDecoder())\n        .eraseToAnyPublisher()\n}\n\nfunc get&#x3C;T: Decodable>(url: String) -> AnyPublisher&#x3C;T, Error> {\n    return makeRequest(url: url, method: \"GET\")\n}\n\nfunc post&#x3C;T: Decodable, U: Encodable>(url: String, body: U) -> AnyPublisher&#x3C;T, Error> {\n    guard let bodyData = try? JSONEncoder().encode(body) else {\n        fatalError(\"Invalid body data\")\n    }\n    return makeRequest(url: url, method: \"POST\", body: bodyData)\n}\n\nfunc delete&#x3C;T: Decodable>(url: String) -> AnyPublisher&#x3C;T, Error> {\n    return makeRequest(url: url, method: \"DELETE\")\n}\n</code></pre>\n<p>}</p>\n<h1>ViewModels</h1>\n<p>이제, PostViewModel을 만들어서 게시물을 가져오고 만들어봅시다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// ViewModels/PostViewModel.swift</span>\n\n<span class=\"hljs-keyword\">import</span> Foundation\n<span class=\"hljs-keyword\">import</span> Combine\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PostViewModel</span>: <span class=\"hljs-title class_\">ObservableObject</span> {\n    <span class=\"hljs-meta\">@Published</span> <span class=\"hljs-keyword\">var</span> posts: [<span class=\"hljs-type\">Post</span>] <span class=\"hljs-operator\">=</span> []\n    <span class=\"hljs-meta\">@Published</span> <span class=\"hljs-keyword\">var</span> isLoading <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-meta\">@Published</span> <span class=\"hljs-keyword\">var</span> errorMessage: <span class=\"hljs-type\">String</span>? <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> cancellables <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Set</span>&#x3C;<span class=\"hljs-type\">AnyCancellable</span>>()\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">let</span> apiService <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">ApiService</span>.shared\n    \n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">fetchPosts</span>() {\n        <span class=\"hljs-keyword\">self</span>.isLoading <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-keyword\">self</span>.errorMessage <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>\n        \n        apiService.get(url: <span class=\"hljs-type\">ApiEndpoints</span>.posts)\n            .receive(on: <span class=\"hljs-type\">DispatchQueue</span>.main)\n            .sink(receiveCompletion: { [<span class=\"hljs-keyword\">weak</span> <span class=\"hljs-keyword\">self</span>] completion <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">self</span><span class=\"hljs-operator\">?</span>.isLoading <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>\n                <span class=\"hljs-keyword\">switch</span> completion {\n                <span class=\"hljs-keyword\">case</span> .failure(<span class=\"hljs-keyword\">let</span> error):\n                    <span class=\"hljs-keyword\">self</span><span class=\"hljs-operator\">?</span>.errorMessage <span class=\"hljs-operator\">=</span> error.localizedDescription\n                <span class=\"hljs-keyword\">case</span> .finished:\n                    <span class=\"hljs-keyword\">break</span>\n                }\n            }, receiveValue: { [<span class=\"hljs-keyword\">weak</span> <span class=\"hljs-keyword\">self</span>] posts <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">self</span><span class=\"hljs-operator\">?</span>.posts <span class=\"hljs-operator\">=</span> posts\n            })\n            .store(in: <span class=\"hljs-operator\">&#x26;</span>cancellables)\n    }\n    \n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">createPost</span>() {\n        <span class=\"hljs-keyword\">let</span> newPost <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Post</span>(id: <span class=\"hljs-number\">101</span>, title: <span class=\"hljs-string\">\"New Post\"</span>, body: <span class=\"hljs-string\">\"This is a new post.\"</span>)\n        \n        apiService.post(url: <span class=\"hljs-type\">ApiEndpoints</span>.posts, body: newPost)\n            .receive(on: <span class=\"hljs-type\">DispatchQueue</span>.main)\n            .sink(receiveCompletion: { completion <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-keyword\">switch</span> completion {\n                <span class=\"hljs-keyword\">case</span> .failure(<span class=\"hljs-keyword\">let</span> error):\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Error: <span class=\"hljs-subst\">\\(error.localizedDescription)</span>\"</span>)\n                <span class=\"hljs-keyword\">case</span> .finished:\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Post created successfully\"</span>)\n                }\n            }, receiveValue: { (post: <span class=\"hljs-type\">Post</span>) <span class=\"hljs-keyword\">in</span>\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Created post: <span class=\"hljs-subst\">\\(post)</span>\"</span>)\n            })\n            .store(in: <span class=\"hljs-operator\">&#x26;</span>cancellables)\n    }\n}\n</code></pre>\n<h1>Views</h1>\n<p>마지막으로, SwiftUI 뷰를 생성하여 게시물을 표시하고 사용자 상호작용을 처리합니다.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// Views/PostListView.swift</span>\n\n<span class=\"hljs-keyword\">import</span> SwiftUI\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">PostListView</span>: <span class=\"hljs-title class_\">View</span> {\n    <span class=\"hljs-meta\">@StateObject</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> viewModel <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">PostViewModel</span>()\n    \n    <span class=\"hljs-keyword\">var</span> body: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n        <span class=\"hljs-type\">NavigationView</span> {\n            <span class=\"hljs-type\">VStack</span> {\n                <span class=\"hljs-keyword\">if</span> viewModel.isLoading {\n                    <span class=\"hljs-type\">ProgressView</span>(<span class=\"hljs-string\">\"로딩 중...\"</span>)\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> errorMessage <span class=\"hljs-operator\">=</span> viewModel.errorMessage {\n                    <span class=\"hljs-type\">Text</span>(<span class=\"hljs-string\">\"오류: <span class=\"hljs-subst\">\\(errorMessage)</span>\"</span>)\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-type\">List</span>(viewModel.posts) { post <span class=\"hljs-keyword\">in</span>\n                        <span class=\"hljs-type\">VStack</span>(alignment: .leading) {\n                            <span class=\"hljs-type\">Text</span>(post.title)\n                                .font(.headline)\n                            <span class=\"hljs-type\">Text</span>(post.body)\n                                .font(.subheadline)\n                        }\n                    }\n                }\n            }\n            .navigationTitle(<span class=\"hljs-string\">\"게시물\"</span>)\n            .onAppear {\n                viewModel.fetchPosts()\n            }\n            .toolbar {\n                <span class=\"hljs-type\">Button</span>(action: {\n                    viewModel.createPost()\n                }) {\n                    <span class=\"hljs-type\">Image</span>(systemName: <span class=\"hljs-string\">\"plus\"</span>)\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">PostListView_Previews</span>: <span class=\"hljs-title class_\">PreviewProvider</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">var</span> previews: <span class=\"hljs-keyword\">some</span> <span class=\"hljs-type\">View</span> {\n        <span class=\"hljs-type\">PostListView</span>()\n    }\n}\n</code></pre>\n<h1>모두 함께 적용하기</h1>\n<p>모두가 동작하는 것을 보려면 PostListView를 App 구조체의 진입점으로 설정하세요.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// demoApp.swift</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">SwiftUI</span>\n\n@main\nstruct <span class=\"hljs-attr\">demoApp</span>: <span class=\"hljs-title class_\">App</span> {\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">body</span>: some <span class=\"hljs-title class_\">Scene</span> {\n        <span class=\"hljs-title class_\">WindowGroup</span> {\n            <span class=\"hljs-title class_\">PostListView</span>()\n        }\n    }\n}\n</code></pre>\n<p>이 튜토리얼에서는 SwiftUI 애플리케이션에서 간단한 MVVM 아키텍처를 구현했습니다. 이 구조는 관심사를 분리하여 코드를 보다 깨끗하고 유지보수하기 쉽게 만들어주며, Combine과 같은 Swift의 강력한 기능을 활용하여 비동기 데이터 스트림 처리에도 도움이 됩니다.</p>\n<p>이 안내를 따르면 SwiftUI 프로젝트에서 MVVM을 설정하고 사용하는 방법에 대해 잘 이해할 수 있을 것입니다. 코딩을 즐기세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}