{"pageProps":{"post":{"title":"Logstash에서 Ruby 코드를 공유하는 방법","description":"","date":"2024-05-23 12:44","slug":"2024-05-23-HowtoshareRubycodeinLogstash","content":"\n\n이전 기사에서는 루비 필터를 사용하여 문서를 비정규화하는 방법을 살펴보았습니다. 이 기사에서는 코드를 개선하고 필터간에 코드를 공유하는 방법을 보여드리겠습니다.\n\n## 이전 코드에 대해\n\n기억하시나요? 이전 코드는 다음과 같았습니다:\n\n```js\n# 'params'의 값은 로그스태시 구성에서 'script_params'로 전달된 해시의 값입니다.\ndef register(params)\n    @keep_original_event = params[\"keep_original_event\"]\nend\n\n# 필터 메서드는 이벤트를 받아들이고 이벤트 목록을 반환하여야 합니다.\n# 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.\n# 새로운 이벤트를 만들려면 반환된 배열에 LogStash::Event의 새 인스턴스를 추가하기만 하면 됩니다.\ndef filter(event)\n\n    items = Array.new\n\n    # 원본 이벤트를 유지하도록 요청되었는지 확인\n    logger.debug('keep_original_event is :' + @keep_original_event.to_s)\n\n    if @keep_original_event.to_s == 'true'\n        event.set('[@metadata][_index]', 'prizes-original');\n        items.push event\n    end\n\n    # 상금 아이템 가져오기 (비정규화)\n    prizes = event.get(\"prize\");\n    if prizes.nil?\n        logger.warn(\"No prizes for event \" + event.to_s)\n        return items\n    end\n\n    # 복제된 기본 이벤트 생성\n    eventBase = event.clone();\n    eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n    eventBase.remove(\"prize\");\n\n    # 각 상금 아이템별로 필요한 수정과 함께 이벤트 생성\n    prizes.each { |prize|\n        eventPrize = eventBase.clone();\n\n        # 각 상금 아이템 값을 상금 객체로 복사\n        prize.each { |key,value|\n            eventPrize.set(\"[prize][\" + key + \"]\", value)\n        }\n\n        items.push eventPrize\n    }\n\n    return items\nend\n```\n\n<div class=\"content-ad\"></div>\n\n보시다시피, 우리에게는 매개변수를 설명하는 register 함수와 필터 기능을 구현하는 다른 함수가 2개뿐입니다. 그러나 기능 전체를 한 방법에 구현하는 것은 가독성, 유지 관리 가능성, 테스트 가능성 등 여러 가지 이유로 최선의 선택이 아닙니다.\n\n# 루비 코드 공유\n\n코드를 공유하는 첫 번째 방법은 다른 루비 파일에 일부 함수를 외부화하고 이러한 함수를 우리의 루비 필터에서 호출하는 것입니다.\n\n예를 들어, 우리는 일부 코드 조각을 간단한 함수로 외부화할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n- 원본 이벤트를 얻기 위한 함수(원하면 현재 이벤트를 유지하려면)\n- 이벤트로부터 상품 배열을 얻기 위한 함수\n- 각 상품을 위해 복제되는 이벤트 베이스를 구성하는 함수\n- 각 상품마다 이벤트를 생성하는 함수\n\n```js\n# 필요 시 원본 이벤트 유지\ndef getOriginalEvent(event)\n    logger.debug('keep_original_event is :' + @keep_original_event.to_s)\n    if @keep_original_event.to_s == 'true'\n        event.set('[@metadata][_index]', 'prizes-original');\n        return event;\n    end\n    return nil;\nend\n\n# 상품 항목 가져오기 (정규화)\ndef getPrizes(event)\n    prizes = event.get(\"prize\");\n    if prizes.nil?\n        logger.warn(\"No prizes for event \" + event.to_s)\n    end\n    return prizes;\nend\n\n# 복제된 베이스 이벤트 생성\ndef getEventBase(event)\n    eventBase = event.clone();\n    eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n    eventBase.remove(\"prize\");\n    return eventBase;\nend\n\n# 필요한 수정을 수행한 현재 상품 항목 복제 이벤트 생성\ndef createEventForPrize(eventBase, prize)\n    eventPrize = eventBase.clone();\n    # 각 상품 항목 값을 상품 객체로 복사\n    prize.each { |key,value|\n        eventPrize.set(\"[prize][\" + key + \"]\", value)\n    }\n    return eventPrize;\nend\n```\n\n위 코드는 denormalized_by_prizes_utils.rb라는 이름의 파일에 작성되어 있습니다.\n\n그 이후에 필터의 주요 코드는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n```javascript\nrequire './script/denormalized_by_prizes_utils.rb'\n\n// `params`의 값은 로그스태시 구성에서 `script_params`로 전달된 해시 값입니다.\nfunction register(params) {\n    @keep_original_event = params[\"keep_original_event\"];\n}\n\n// 필터 메서드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.\n// 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.\n// 새 이벤트를 생성하려면 반환된 배열에 LogStash::Event 인스턴스를 추가하면 됩니다.\nfunction filter(event) {\n\n    var items = [];\n\n    // 필요하다면 원본 이벤트를 유지합니다.\n    var originalEvent = getOriginalEvent(event);\n    if (!originalEvent) {\n        items.push(originalEvent);\n    }\n\n    // 상금 아이템(정규화) 가져오기\n    var prizes = getPrizes(event);\n    if (!prizes) {\n        return items;\n    }\n   \n    // 클론 기본 이벤트 생성\n    var eventBase = getEventBase(event);\n\n    // 필요한 수정을 가진 상금 항목별 하나의 이벤트 생성\n    prizes.forEach(function(prize) {\n        items.push(createEventForPrize(eventBase, prize));\n    });\n\n    return items;\n}\n```\n\n기존 코드보다 훨씬 읽기 쉽고 필터 기능의 다른 단계를 직접 확인할 수 있습니다. 작은 함수로 잘 세분화되고 이해하기 쉽게 작성하여 유지보수성이 향상될 것입니다.\n\n하지만 경우에 따라 코드를 공유하는 여러 파일과 여러 파일이 필요한 필터를 갖고 있는 경우, 충돌이 발생하거나 유지보수성이 일부 저하될 수 있습니다.\n\n# 모듈 생성하기\n\n\n<div class=\"content-ad\"></div>\n\n다른 방법으로 코드를 공유하는 방법은 모듈을 만드는 것입니다. 이 모듈은 같은 기능적 범위의 코드 조각을 그룹화할 것입니다. 우리는 공유 함수를 사용하기 전에 모듈 이름을 지정해야 하기 때문에 충돌이 발생하지 않을 것입니다.\n\n이전에 공유된 함수는 다음과 같이 될 것입니다:\n\n```js\nmodule LogStash::Util::DenormalizationByPrizesHelper\n    include LogStash::Util::Loggable\n\n    # 원래 이벤트 유지\n    def self.getOriginalEvent(event, keepOriginalEvent)\n        logger.debug('keepOriginalEvent is :' + keepOriginalEvent.to_s)\n        if keepOriginalEvent.to_s == 'true'\n            event.set('[@metadata][_index]', 'prizes-original');\n            return event;\n        end\n        return nil;\n    end\n\n    # 상품 항목 가져오기 (정규화 해제)\n    def self.getPrizes(event)\n        prizes = event.get(\"prize\");\n        if prizes.nil?\n            logger.warn(\"No prizes for event \" + event.to_s)\n        end\n        return prizes;\n    end\n\n    # 복제 기본 이벤트 생성\n    def self.getEventBase(event)\n        eventBase = event.clone();\n        eventBase.set('[@metadata][_index]', 'prizes-denormalized');\n        eventBase.remove(\"prize\");\n        return eventBase;\n    end\n\n    # 필요한 수정으로 현재 상품 항목을 위한 복제 이벤트 생성\n    def self.createEventForPrize(eventBase, prize)\n        eventPrize = eventBase.clone();\n        # 각 상품 항목 값을 상품 객체로 복사\n        prize.each { |key,value|\n            eventPrize.set(\"[prize][\" + key + \"]\", value)\n        }\n        return eventPrize;\n    end\n\nend\n```\n\nlogger 인스턴스를 사용할 수 있도록 Loggable Util 모듈을 포함해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n주요 코드는 다음과 같습니다:\n\n```js\nrequire './script/denormalized_by_prizes_utils.rb'\n\n# `params`의 값은 Logstash 구성에서 `script_params`에 전달된 해시의 값입니다.\ndef register(params)\n    @keep_original_event = params[\"keep_original_event\"]\nend\n\n# 필터 메서드는 이벤트를 받아서 이벤트 목록을 반환해야 합니다.\n# 이벤트를 삭제하는 것은 반환 배열에 포함시키지 않는 것을 의미합니다.\n# 새 이벤트를 생성하는 것은 반환 배열에 LogStash::Event의 인스턴스를 추가하는 것만 필요합니다.\ndef filter(event)\n\n    items = Array.new\n\n    # 요청이 있을 경우 원본 이벤트 보존\n    originalEvent = LogStash::Util::DenormalizationByPrizesHelper::getOriginalEvent(event, @keep_original_event);\n    if not originalEvent.nil?\n        items.push originalEvent\n    end\n\n    # 상품 항목 가져오기 (정규화)\n    prizes = LogStash::Util::DenormalizationByPrizesHelper::getPrizes(event);\n    if prizes.nil?\n        return items\n    end\n   \n    # 복제된 기본 이벤트 생성\n    eventBase = LogStash::Util::DenormalizationByPrizesHelper::getEventBase(event);\n\n    # 필요한 수정을 가한 상품 항목별로 이벤트 생성\n    prizes.each { |prize| \n        items.push LogStash::Util::DenormalizationByPrizesHelper::createEventForPrize(eventBase, prize);\n    }\n\n    return items;\nend\n```\n\n주요 코드를 수정할 필요가 많지 않습니다. 함수 호출을 모듈 이름과 함께 접두사로 붙이면 됩니다. 따라서 필터 기능에 통합된 다른 모듈에 있는 여러 `getEventBase` 함수와 같은 함수들이 있을 경우 충돌 없이 사용할 수 있습니다. 명시적으로 각 경우에 사용할 모듈을 설정하고 가독성을 향상시키기 때문에 좋습니다.\n\n다음 글에서는 필터 코드를 테스트하는 방법에 대해 이야기할 것입니다...","ogImage":{"url":"/assets/img/2024-05-23-HowtoshareRubycodeinLogstash_0.png"},"coverImage":"/assets/img/2024-05-23-HowtoshareRubycodeinLogstash_0.png","tag":["Tech"],"readingTime":7},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>이전 기사에서는 루비 필터를 사용하여 문서를 비정규화하는 방법을 살펴보았습니다. 이 기사에서는 코드를 개선하고 필터간에 코드를 공유하는 방법을 보여드리겠습니다.</p>\n<h2>이전 코드에 대해</h2>\n<p>기억하시나요? 이전 코드는 다음과 같았습니다:</p>\n<pre><code class=\"hljs language-js\"># <span class=\"hljs-string\">'params'</span>의 값은 로그스태시 구성에서 <span class=\"hljs-string\">'script_params'</span>로 전달된 해시의 값입니다.\ndef <span class=\"hljs-title function_\">register</span>(params)\n    @keep_original_event = params[<span class=\"hljs-string\">\"keep_original_event\"</span>]\nend\n\n# 필터 메서드는 이벤트를 받아들이고 이벤트 목록을 반환하여야 합니다.\n# 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.\n# 새로운 이벤트를 만들려면 반환된 배열에 <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Event</span>의 새 인스턴스를 추가하기만 하면 됩니다.\ndef <span class=\"hljs-title function_\">filter</span>(event)\n\n    items = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\">new</span>\n\n    # 원본 이벤트를 유지하도록 요청되었는지 확인\n    logger.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">'keep_original_event is :'</span> + @keep_original_event.<span class=\"hljs-property\">to_s</span>)\n\n    <span class=\"hljs-keyword\">if</span> @keep_original_event.<span class=\"hljs-property\">to_s</span> == <span class=\"hljs-string\">'true'</span>\n        event.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-original'</span>);\n        items.<span class=\"hljs-property\">push</span> event\n    end\n\n    # 상금 아이템 가져오기 (비정규화)\n    prizes = event.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"prize\"</span>);\n    <span class=\"hljs-keyword\">if</span> prizes.<span class=\"hljs-property\">nil</span>?\n        logger.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">\"No prizes for event \"</span> + event.<span class=\"hljs-property\">to_s</span>)\n        <span class=\"hljs-keyword\">return</span> items\n    end\n\n    # 복제된 기본 이벤트 생성\n    eventBase = event.<span class=\"hljs-title function_\">clone</span>();\n    eventBase.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-denormalized'</span>);\n    eventBase.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"prize\"</span>);\n\n    # 각 상금 아이템별로 필요한 수정과 함께 이벤트 생성\n    prizes.<span class=\"hljs-property\">each</span> { |prize|\n        eventPrize = eventBase.<span class=\"hljs-title function_\">clone</span>();\n\n        # 각 상금 아이템 값을 상금 객체로 복사\n        prize.<span class=\"hljs-property\">each</span> { |key,value|\n            eventPrize.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"[prize][\"</span> + key + <span class=\"hljs-string\">\"]\"</span>, value)\n        }\n\n        items.<span class=\"hljs-property\">push</span> eventPrize\n    }\n\n    <span class=\"hljs-keyword\">return</span> items\nend\n</code></pre>\n<p>보시다시피, 우리에게는 매개변수를 설명하는 register 함수와 필터 기능을 구현하는 다른 함수가 2개뿐입니다. 그러나 기능 전체를 한 방법에 구현하는 것은 가독성, 유지 관리 가능성, 테스트 가능성 등 여러 가지 이유로 최선의 선택이 아닙니다.</p>\n<h1>루비 코드 공유</h1>\n<p>코드를 공유하는 첫 번째 방법은 다른 루비 파일에 일부 함수를 외부화하고 이러한 함수를 우리의 루비 필터에서 호출하는 것입니다.</p>\n<p>예를 들어, 우리는 일부 코드 조각을 간단한 함수로 외부화할 수 있습니다:</p>\n<ul>\n<li>원본 이벤트를 얻기 위한 함수(원하면 현재 이벤트를 유지하려면)</li>\n<li>이벤트로부터 상품 배열을 얻기 위한 함수</li>\n<li>각 상품을 위해 복제되는 이벤트 베이스를 구성하는 함수</li>\n<li>각 상품마다 이벤트를 생성하는 함수</li>\n</ul>\n<pre><code class=\"hljs language-js\"># 필요 시 원본 이벤트 유지\ndef <span class=\"hljs-title function_\">getOriginalEvent</span>(event)\n    logger.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">'keep_original_event is :'</span> + @keep_original_event.<span class=\"hljs-property\">to_s</span>)\n    <span class=\"hljs-keyword\">if</span> @keep_original_event.<span class=\"hljs-property\">to_s</span> == <span class=\"hljs-string\">'true'</span>\n        event.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-original'</span>);\n        <span class=\"hljs-keyword\">return</span> event;\n    end\n    <span class=\"hljs-keyword\">return</span> nil;\nend\n\n# 상품 항목 가져오기 (정규화)\ndef <span class=\"hljs-title function_\">getPrizes</span>(event)\n    prizes = event.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"prize\"</span>);\n    <span class=\"hljs-keyword\">if</span> prizes.<span class=\"hljs-property\">nil</span>?\n        logger.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">\"No prizes for event \"</span> + event.<span class=\"hljs-property\">to_s</span>)\n    end\n    <span class=\"hljs-keyword\">return</span> prizes;\nend\n\n# 복제된 베이스 이벤트 생성\ndef <span class=\"hljs-title function_\">getEventBase</span>(event)\n    eventBase = event.<span class=\"hljs-title function_\">clone</span>();\n    eventBase.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-denormalized'</span>);\n    eventBase.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"prize\"</span>);\n    <span class=\"hljs-keyword\">return</span> eventBase;\nend\n\n# 필요한 수정을 수행한 현재 상품 항목 복제 이벤트 생성\ndef <span class=\"hljs-title function_\">createEventForPrize</span>(eventBase, prize)\n    eventPrize = eventBase.<span class=\"hljs-title function_\">clone</span>();\n    # 각 상품 항목 값을 상품 객체로 복사\n    prize.<span class=\"hljs-property\">each</span> { |key,value|\n        eventPrize.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"[prize][\"</span> + key + <span class=\"hljs-string\">\"]\"</span>, value)\n    }\n    <span class=\"hljs-keyword\">return</span> eventPrize;\nend\n</code></pre>\n<p>위 코드는 denormalized_by_prizes_utils.rb라는 이름의 파일에 작성되어 있습니다.</p>\n<p>그 이후에 필터의 주요 코드는 다음과 같습니다:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">'./script/denormalized_by_prizes_utils.rb'</span>\n\n<span class=\"hljs-comment\">// `params`의 값은 로그스태시 구성에서 `script_params`로 전달된 해시 값입니다.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">register</span>(<span class=\"hljs-params\">params</span>) {\n    @keep_original_event = params[<span class=\"hljs-string\">\"keep_original_event\"</span>];\n}\n\n<span class=\"hljs-comment\">// 필터 메서드는 이벤트를 수신하고 이벤트 목록을 반환해야 합니다.</span>\n<span class=\"hljs-comment\">// 이벤트를 삭제하면 반환 배열에 포함되지 않습니다.</span>\n<span class=\"hljs-comment\">// 새 이벤트를 생성하려면 반환된 배열에 LogStash::Event 인스턴스를 추가하면 됩니다.</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-params\">event</span>) {\n\n    <span class=\"hljs-keyword\">var</span> items = [];\n\n    <span class=\"hljs-comment\">// 필요하다면 원본 이벤트를 유지합니다.</span>\n    <span class=\"hljs-keyword\">var</span> originalEvent = <span class=\"hljs-title function_\">getOriginalEvent</span>(event);\n    <span class=\"hljs-keyword\">if</span> (!originalEvent) {\n        items.<span class=\"hljs-title function_\">push</span>(originalEvent);\n    }\n\n    <span class=\"hljs-comment\">// 상금 아이템(정규화) 가져오기</span>\n    <span class=\"hljs-keyword\">var</span> prizes = <span class=\"hljs-title function_\">getPrizes</span>(event);\n    <span class=\"hljs-keyword\">if</span> (!prizes) {\n        <span class=\"hljs-keyword\">return</span> items;\n    }\n   \n    <span class=\"hljs-comment\">// 클론 기본 이벤트 생성</span>\n    <span class=\"hljs-keyword\">var</span> eventBase = <span class=\"hljs-title function_\">getEventBase</span>(event);\n\n    <span class=\"hljs-comment\">// 필요한 수정을 가진 상금 항목별 하나의 이벤트 생성</span>\n    prizes.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prize</span>) {\n        items.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-title function_\">createEventForPrize</span>(eventBase, prize));\n    });\n\n    <span class=\"hljs-keyword\">return</span> items;\n}\n</code></pre>\n<p>기존 코드보다 훨씬 읽기 쉽고 필터 기능의 다른 단계를 직접 확인할 수 있습니다. 작은 함수로 잘 세분화되고 이해하기 쉽게 작성하여 유지보수성이 향상될 것입니다.</p>\n<p>하지만 경우에 따라 코드를 공유하는 여러 파일과 여러 파일이 필요한 필터를 갖고 있는 경우, 충돌이 발생하거나 유지보수성이 일부 저하될 수 있습니다.</p>\n<h1>모듈 생성하기</h1>\n<p>다른 방법으로 코드를 공유하는 방법은 모듈을 만드는 것입니다. 이 모듈은 같은 기능적 범위의 코드 조각을 그룹화할 것입니다. 우리는 공유 함수를 사용하기 전에 모듈 이름을 지정해야 하기 때문에 충돌이 발생하지 않을 것입니다.</p>\n<p>이전에 공유된 함수는 다음과 같이 될 것입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span> <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>\n    include <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">Loggable</span>\n\n    # 원래 이벤트 유지\n    def self.<span class=\"hljs-title function_\">getOriginalEvent</span>(event, keepOriginalEvent)\n        logger.<span class=\"hljs-title function_\">debug</span>(<span class=\"hljs-string\">'keepOriginalEvent is :'</span> + keepOriginalEvent.<span class=\"hljs-property\">to_s</span>)\n        <span class=\"hljs-keyword\">if</span> keepOriginalEvent.<span class=\"hljs-property\">to_s</span> == <span class=\"hljs-string\">'true'</span>\n            event.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-original'</span>);\n            <span class=\"hljs-keyword\">return</span> event;\n        end\n        <span class=\"hljs-keyword\">return</span> nil;\n    end\n\n    # 상품 항목 가져오기 (정규화 해제)\n    def self.<span class=\"hljs-title function_\">getPrizes</span>(event)\n        prizes = event.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">\"prize\"</span>);\n        <span class=\"hljs-keyword\">if</span> prizes.<span class=\"hljs-property\">nil</span>?\n            logger.<span class=\"hljs-title function_\">warn</span>(<span class=\"hljs-string\">\"No prizes for event \"</span> + event.<span class=\"hljs-property\">to_s</span>)\n        end\n        <span class=\"hljs-keyword\">return</span> prizes;\n    end\n\n    # 복제 기본 이벤트 생성\n    def self.<span class=\"hljs-title function_\">getEventBase</span>(event)\n        eventBase = event.<span class=\"hljs-title function_\">clone</span>();\n        eventBase.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">'[@metadata][_index]'</span>, <span class=\"hljs-string\">'prizes-denormalized'</span>);\n        eventBase.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">\"prize\"</span>);\n        <span class=\"hljs-keyword\">return</span> eventBase;\n    end\n\n    # 필요한 수정으로 현재 상품 항목을 위한 복제 이벤트 생성\n    def self.<span class=\"hljs-title function_\">createEventForPrize</span>(eventBase, prize)\n        eventPrize = eventBase.<span class=\"hljs-title function_\">clone</span>();\n        # 각 상품 항목 값을 상품 객체로 복사\n        prize.<span class=\"hljs-property\">each</span> { |key,value|\n            eventPrize.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">\"[prize][\"</span> + key + <span class=\"hljs-string\">\"]\"</span>, value)\n        }\n        <span class=\"hljs-keyword\">return</span> eventPrize;\n    end\n\nend\n</code></pre>\n<p>logger 인스턴스를 사용할 수 있도록 Loggable Util 모듈을 포함해야 합니다.</p>\n<p>주요 코드는 다음과 같습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">require</span> <span class=\"hljs-string\">'./script/denormalized_by_prizes_utils.rb'</span>\n\n# <span class=\"hljs-string\">`params`</span>의 값은 <span class=\"hljs-title class_\">Logstash</span> 구성에서 <span class=\"hljs-string\">`script_params`</span>에 전달된 해시의 값입니다.\ndef <span class=\"hljs-title function_\">register</span>(params)\n    @keep_original_event = params[<span class=\"hljs-string\">\"keep_original_event\"</span>]\nend\n\n# 필터 메서드는 이벤트를 받아서 이벤트 목록을 반환해야 합니다.\n# 이벤트를 삭제하는 것은 반환 배열에 포함시키지 않는 것을 의미합니다.\n# 새 이벤트를 생성하는 것은 반환 배열에 <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Event</span>의 인스턴스를 추가하는 것만 필요합니다.\ndef <span class=\"hljs-title function_\">filter</span>(event)\n\n    items = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\">new</span>\n\n    # 요청이 있을 경우 원본 이벤트 보존\n    originalEvent = <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">getOriginalEvent</span>(event, @keep_original_event);\n    <span class=\"hljs-keyword\">if</span> not originalEvent.<span class=\"hljs-property\">nil</span>?\n        items.<span class=\"hljs-property\">push</span> originalEvent\n    end\n\n    # 상품 항목 가져오기 (정규화)\n    prizes = <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">getPrizes</span>(event);\n    <span class=\"hljs-keyword\">if</span> prizes.<span class=\"hljs-property\">nil</span>?\n        <span class=\"hljs-keyword\">return</span> items\n    end\n   \n    # 복제된 기본 이벤트 생성\n    eventBase = <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">getEventBase</span>(event);\n\n    # 필요한 수정을 가한 상품 항목별로 이벤트 생성\n    prizes.<span class=\"hljs-property\">each</span> { |prize| \n        items.<span class=\"hljs-property\">push</span> <span class=\"hljs-title class_\">LogStash</span>::<span class=\"hljs-title class_\">Util</span>::<span class=\"hljs-title class_\">DenormalizationByPrizesHelper</span>::<span class=\"hljs-title function_\">createEventForPrize</span>(eventBase, prize);\n    }\n\n    <span class=\"hljs-keyword\">return</span> items;\nend\n</code></pre>\n<p>주요 코드를 수정할 필요가 많지 않습니다. 함수 호출을 모듈 이름과 함께 접두사로 붙이면 됩니다. 따라서 필터 기능에 통합된 다른 모듈에 있는 여러 <code>getEventBase</code> 함수와 같은 함수들이 있을 경우 충돌 없이 사용할 수 있습니다. 명시적으로 각 경우에 사용할 모듈을 설정하고 가독성을 향상시키기 때문에 좋습니다.</p>\n<p>다음 글에서는 필터 코드를 테스트하는 방법에 대해 이야기할 것입니다...</p>\n</body>\n</html>\n"},"__N_SSG":true}