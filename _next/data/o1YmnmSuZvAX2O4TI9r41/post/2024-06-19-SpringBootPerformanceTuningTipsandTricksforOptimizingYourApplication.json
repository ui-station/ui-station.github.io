{"pageProps":{"post":{"title":"Spring Boot 성능 튜닝 애플리케이션 최적화를 위한 팁과 트릭","description":"","date":"2024-06-19 10:11","slug":"2024-06-19-SpringBootPerformanceTuningTipsandTricksforOptimizingYourApplication","content":"\n\nSpring Boot은 사용의 용이성과 빠른 개발 능력으로 유명하지만, 애플리케이션이 커짐에 따라 성능 문제가 발생할 수 있습니다. Spring Boot 애플리케이션의 기능을 향상시키면 응답 속도가 향상되고 리소스를 효율적으로 사용하며 전반적으로 강력한 프로그램이 될 수 있습니다. 이 블로그 글에서는 캐싱, 프로파일링 및 효과적인 데이터베이스 연결에 중점을 두고 Spring Boot 앱의 속도를 최적화하기 위한 중요한 지침과 전략을 살펴볼 것입니다.\n\n![Spring Boot Performance Tuning Tips and Tricks for Optimizing Your Application](/assets/img/2024-06-19-SpringBootPerformanceTuningTipsandTricksforOptimizingYourApplication_0.png)\n\n- Spring Boot Actuator 사용하기:\n\n최적화를 시작하기 전에 병목 현상이 어디에 있는지 이해해야 합니다. 프로파일링 도구를 사용하여 애플리케이션의 성능 문제를 식별할 수 있습니다.\nSpring Boot Actuator가 제공하는 운영 준비 기능을 활용하여 애플리케이션을 모니터링하고 제어할 수 있습니다. 이 기능은 어플리케이션이 얼마나 잘 수행되고 있는지에 대한 정보를 제공할 수 있는 여러 엔드포인트를 갖추고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n\n\n아래는 application.properties 파일에서 필요한 엔드포인트를 활성화하는 방법입니다:\n\n\nmanagement.endpoints.web.exposure.include=health,info,metrics,threaddump,env\n\n\n성능 메트릭\n\n\n<div class=\"content-ad\"></div>\n\nActuator의 /metrics 엔드포인트를 이용하면 애플리케이션의 메모리 사용량, 가비지 수집 및 스레드 활동과 같은 메트릭을 수집할 수 있습니다. 이를 통해 최적화가 필요한 영역을 파악하는 데 도움이 됩니다.\n\n2. 캐싱:\n\n캐싱을 사용하면 데이터로드를 줄이고 응답 시간을 단축할 수 있습니다. Spring은 최소한의 설치로 훌륭한 지원을 제공합니다.\n\n```java\n@SpringBootApplication\n@EnableCaching\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\nSpring Boot은 EhCache, Hazelcast, 그리고 Redis를 포함한 여러 캐시 제공자를 지원합니다. 예를 들어, EhCache를 사용하려면 다음 종속성을 추가하십시오:\n\n```js\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-cache</artifactId>\n</dependency>\n<dependency>\n    <groupId>net.sf.ehcache</groupId>\n    <artifactId>ehcache</artifactId>\n</dependency>\n```\n\n캐싱 어노테이션을 사용하여 캐싱 동작을 지정할 수 있습니다:\n\n- @Cacheable: 메소드 결과를 캐싱할 수 있음을 나타냅니다.\n- @CachePut: 메소드 결과로 캐시를 업데이트합니다.\n- @CacheEvict: 캐시에서 항목을 제거합니다.\n\n<div class=\"content-ad\"></div>\n\n예시:\n\n```java\n@Cacheable(\"books\")\npublic Book findBookById(Long id) {\n    return bookRepository.findById(id).orElse(null);\n}\n```\n\n3. 좋은 데이터베이스 상호작용\n데이터베이스 상호작용은 종종 응용프로그램의 병목 현상이 될 수 있습니다. 데이터베이스 성능을 최적화하기 위한 몇 가지 팁을 소개합니다. 아래는 HikariCP를 사용한 예시 설정입니다:\n\n쿼리 최적화\n\n<div class=\"content-ad\"></div>\n\n색인 만들기: 데이터베이스 테이블이 올바르게 색인화되었는지 확인하세요.\n\n- 일괄 처리: 대량 삽입 및 업데이트에는 일괄 처리를 사용하세요.\n- 지연 로딩: 엔티티 관계에 대해 지연 로딩을 활용하여 불필요한 데이터 로딩을 피하세요.\n\nJPA와 Hibernate 팁\n\n- 검색 유형: 컬렉션에 대해 FetchType.LAZY를 사용하여 불필요한 데이터로딩을 피하세요.\n- 두 번째 레벨 캐시: Hibernate의 두 번째 레벨 캐시를 활성화하여 데이터베이스 조회를 줄이세요.\n\n<div class=\"content-ad\"></div>\n\nQuery Optimization: JPQL이나 네이티브 쿼리를 사용하여 최적화된 쿼리를 작성하세요.\n\n## 지연 로딩의 예시\n\n```js\n@Entity\npublic class Author {\n    @OneToMany(fetch = FetchType.LAZY, mappedBy = \"author\")\n    private Set<Book> books;\n}\n```\n\n## 데이터베이스 연결 풀링\n\n<div class=\"content-ad\"></div>\n\n데이터베이스 연결을 효율적으로 활용하기 위해 연결 풀을 구성하세요:\n\n```js\nspring.datasource.hikari.maximum-pool-size=15\nspring.datasource.hikari.minimum-idle=5\nspring.datasource.hikari.idle-timeout=30000\nspring.datasource.hikari.connection-timeout=20000\nspring.datasource.hikari.max-lifetime=1800000\n```\n\n## 모니터링 및 분석\n\n데이터베이스 성능을 모니터링하고 느린 쿼리 또는 연결을 식별하기 위해 /metrics 및 /trace와 같은 액추에이터 엔드포인트를 사용하세요.\n\n<div class=\"content-ad\"></div>\n\nSpring Boot 애플리케이션의 성능을 최적화하려면 프로파일링, 캐싱 및 효율적인 데이터베이스 상호작용의 조합이 필요합니다. 애플리케이션의 성능 특성을 이해하고 이러한 모베스트 프랙티스를 적용하여 높은 성능과 확장 가능성을 갖춘 애플리케이션을 개발할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-19-SpringBootPerformanceTuningTipsandTricksforOptimizingYourApplication_0.png"},"coverImage":"/assets/img/2024-06-19-SpringBootPerformanceTuningTipsandTricksforOptimizingYourApplication_0.png","tag":["Tech"],"readingTime":4},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>Spring Boot은 사용의 용이성과 빠른 개발 능력으로 유명하지만, 애플리케이션이 커짐에 따라 성능 문제가 발생할 수 있습니다. Spring Boot 애플리케이션의 기능을 향상시키면 응답 속도가 향상되고 리소스를 효율적으로 사용하며 전반적으로 강력한 프로그램이 될 수 있습니다. 이 블로그 글에서는 캐싱, 프로파일링 및 효과적인 데이터베이스 연결에 중점을 두고 Spring Boot 앱의 속도를 최적화하기 위한 중요한 지침과 전략을 살펴볼 것입니다.</p>\n<p><img src=\"/assets/img/2024-06-19-SpringBootPerformanceTuningTipsandTricksforOptimizingYourApplication_0.png\" alt=\"Spring Boot Performance Tuning Tips and Tricks for Optimizing Your Application\"></p>\n<ul>\n<li>Spring Boot Actuator 사용하기:</li>\n</ul>\n<p>최적화를 시작하기 전에 병목 현상이 어디에 있는지 이해해야 합니다. 프로파일링 도구를 사용하여 애플리케이션의 성능 문제를 식별할 수 있습니다.\nSpring Boot Actuator가 제공하는 운영 준비 기능을 활용하여 애플리케이션을 모니터링하고 제어할 수 있습니다. 이 기능은 어플리케이션이 얼마나 잘 수행되고 있는지에 대한 정보를 제공할 수 있는 여러 엔드포인트를 갖추고 있습니다.</p>\n<p>아래는 application.properties 파일에서 필요한 엔드포인트를 활성화하는 방법입니다:</p>\n<p>management.endpoints.web.exposure.include=health,info,metrics,threaddump,env</p>\n<p>성능 메트릭</p>\n<p>Actuator의 /metrics 엔드포인트를 이용하면 애플리케이션의 메모리 사용량, 가비지 수집 및 스레드 활동과 같은 메트릭을 수집할 수 있습니다. 이를 통해 최적화가 필요한 영역을 파악하는 데 도움이 됩니다.</p>\n<ol start=\"2\">\n<li>캐싱:</li>\n</ol>\n<p>캐싱을 사용하면 데이터로드를 줄이고 응답 시간을 단축할 수 있습니다. Spring은 최소한의 설치로 훌륭한 지원을 제공합니다.</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-meta\">@EnableCaching</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Application</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre>\n<p>Spring Boot은 EhCache, Hazelcast, 그리고 Redis를 포함한 여러 캐시 제공자를 지원합니다. 예를 들어, EhCache를 사용하려면 다음 종속성을 추가하십시오:</p>\n<pre><code class=\"hljs language-js\">&#x3C;dependency>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">groupId</span>></span>org.springframework.boot<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">groupId</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">artifactId</span>></span>spring-boot-starter-cache<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">artifactId</span>></span></span>\n&#x3C;/dependency>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">dependency</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">groupId</span>></span>net.sf.ehcache<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">groupId</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">artifactId</span>></span>ehcache<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">artifactId</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">dependency</span>></span></span>\n</code></pre>\n<p>캐싱 어노테이션을 사용하여 캐싱 동작을 지정할 수 있습니다:</p>\n<ul>\n<li>@Cacheable: 메소드 결과를 캐싱할 수 있음을 나타냅니다.</li>\n<li>@CachePut: 메소드 결과로 캐시를 업데이트합니다.</li>\n<li>@CacheEvict: 캐시에서 항목을 제거합니다.</li>\n</ul>\n<p>예시:</p>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-meta\">@Cacheable(\"books\")</span>\n<span class=\"hljs-keyword\">public</span> Book <span class=\"hljs-title function_\">findBookById</span><span class=\"hljs-params\">(Long id)</span> {\n    <span class=\"hljs-keyword\">return</span> bookRepository.findById(id).orElse(<span class=\"hljs-literal\">null</span>);\n}\n</code></pre>\n<ol start=\"3\">\n<li>좋은 데이터베이스 상호작용\n데이터베이스 상호작용은 종종 응용프로그램의 병목 현상이 될 수 있습니다. 데이터베이스 성능을 최적화하기 위한 몇 가지 팁을 소개합니다. 아래는 HikariCP를 사용한 예시 설정입니다:</li>\n</ol>\n<p>쿼리 최적화</p>\n<p>색인 만들기: 데이터베이스 테이블이 올바르게 색인화되었는지 확인하세요.</p>\n<ul>\n<li>일괄 처리: 대량 삽입 및 업데이트에는 일괄 처리를 사용하세요.</li>\n<li>지연 로딩: 엔티티 관계에 대해 지연 로딩을 활용하여 불필요한 데이터 로딩을 피하세요.</li>\n</ul>\n<p>JPA와 Hibernate 팁</p>\n<ul>\n<li>검색 유형: 컬렉션에 대해 FetchType.LAZY를 사용하여 불필요한 데이터로딩을 피하세요.</li>\n<li>두 번째 레벨 캐시: Hibernate의 두 번째 레벨 캐시를 활성화하여 데이터베이스 조회를 줄이세요.</li>\n</ul>\n<p>Query Optimization: JPQL이나 네이티브 쿼리를 사용하여 최적화된 쿼리를 작성하세요.</p>\n<h2>지연 로딩의 예시</h2>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Entity</span>\npublic <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Author</span> {\n    @<span class=\"hljs-title class_\">OneToMany</span>(fetch = <span class=\"hljs-title class_\">FetchType</span>.<span class=\"hljs-property\">LAZY</span>, mappedBy = <span class=\"hljs-string\">\"author\"</span>)\n    private <span class=\"hljs-title class_\">Set</span>&#x3C;<span class=\"hljs-title class_\">Book</span>> books;\n}\n</code></pre>\n<h2>데이터베이스 연결 풀링</h2>\n<p>데이터베이스 연결을 효율적으로 활용하기 위해 연결 풀을 구성하세요:</p>\n<pre><code class=\"hljs language-js\">spring.<span class=\"hljs-property\">datasource</span>.<span class=\"hljs-property\">hikari</span>.<span class=\"hljs-property\">maximum</span>-pool-size=<span class=\"hljs-number\">15</span>\nspring.<span class=\"hljs-property\">datasource</span>.<span class=\"hljs-property\">hikari</span>.<span class=\"hljs-property\">minimum</span>-idle=<span class=\"hljs-number\">5</span>\nspring.<span class=\"hljs-property\">datasource</span>.<span class=\"hljs-property\">hikari</span>.<span class=\"hljs-property\">idle</span>-timeout=<span class=\"hljs-number\">30000</span>\nspring.<span class=\"hljs-property\">datasource</span>.<span class=\"hljs-property\">hikari</span>.<span class=\"hljs-property\">connection</span>-timeout=<span class=\"hljs-number\">20000</span>\nspring.<span class=\"hljs-property\">datasource</span>.<span class=\"hljs-property\">hikari</span>.<span class=\"hljs-property\">max</span>-lifetime=<span class=\"hljs-number\">1800000</span>\n</code></pre>\n<h2>모니터링 및 분석</h2>\n<p>데이터베이스 성능을 모니터링하고 느린 쿼리 또는 연결을 식별하기 위해 /metrics 및 /trace와 같은 액추에이터 엔드포인트를 사용하세요.</p>\n<p>Spring Boot 애플리케이션의 성능을 최적화하려면 프로파일링, 캐싱 및 효율적인 데이터베이스 상호작용의 조합이 필요합니다. 애플리케이션의 성능 특성을 이해하고 이러한 모베스트 프랙티스를 적용하여 높은 성능과 확장 가능성을 갖춘 애플리케이션을 개발할 수 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}