{"pageProps":{"post":{"title":"이 RSpec 팁들로 테스트 종속성을 작별하세요","description":"","date":"2024-06-19 22:18","slug":"2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips","content":"\n\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png)\n\n개발자가 직면하는 일반적인 문제 중 하나는 테스트 의존성을 관리하는 것입니다.\n\n여기서 테스트 더블이 구원을 줍니다. 테스트 더블은 실제 객체 대신 사용되며 해당 객체의 동작을 제어할 수 있습니다.\n\n# RSpec 3에서 응답 구성하기\n\n\n<div class=\"content-ad\"></div>\n\n# 테스트 더블 생성하기\n\n테스트 더블은 실제 객체 대신에 테스트에서 사용되며, 그들의 동작을 제어할 수 있게 해줍니다. 목, 스텁, 스파이를 포함해 여러 종류의 테스트 더블이 있습니다. 여기서는 그들의 응답을 구성하는 데 중점을 둘 것입니다.\n\n# 메서드가 값 반환하도록 허용하기\n\n특정 값을 반환하도록 메서드를 구성하는 데 allow를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_1.png\" />\n\n# 예외 발생시키기\n\n예외 처리를 테스트하려면 메소드를 구성하여 오류를 발생시킬 수 있습니다:\n\n<img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_2.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 블록에 양보하기\n\n가끔은 더블을 블록에 값을 양보해야 할 때가 있습니다. 반복자나 콜백을 다룰 때 유용합니다:\n\n![이미지](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_3.png)\n\n# 여러 값을 반환하기\n\n<div class=\"content-ad\"></div>\n\n연이어 호출할 때 다른 값을 반환하는 방법이 필요하다면 and_return에 여러 인수를 전달할 수 있습니다:\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_4.png)\n\n## 부분 더블 구성\n\n부분 더블은 실제 객체의 메서드를 모의(Mock)하거나 스텁(Stub)하는 동시에 객체의 나머지 동작을 유지하는 것을 가능하게 합니다. 객체의 특정 부분 동작을 테스트하고 싶을 때 전체 객체를 대체하지 않고 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n# 원본 메서드 호출하기\n\n일부 호출에 대해 부분 더블에게 원본 메서드를 호출하도록 지시할 수 있습니다:\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_5.png)\n\n# 원본 메서드 감싸기\n\n<div class=\"content-ad\"></div>\n\n메소드의 동작을 수정하면서 원본 구현을 호출할 수도 있어요:\n\n![Image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_6.png)\n\n## 고급 사용자 정의\n\n## 간헐적 동작\n\n<div class=\"content-ad\"></div>\n\n보다 복잡한 동작을 시뮬레이션하기 위해 네트워크 장애와 같은 부분적인 특성을 정의하기 위해 블록을 사용하세요:\n\n![이미지](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_7.png)\n\n# 팁과 꿀팁\n\n- 구체적으로 설정하세요: 테스트 더블을 구성할 때 제한 사항을 가능한 한 명확하게 지정하여 테스트가 의미 있는지 확인하세요.\n- 부분적인 더블을 현명하게 사용하세요: 부분적인 더블은 강력하지만 테스트 사이의 강하게 결합된 테스트로 이어질 수 있습니다. 전체 객체를 교체하지 않고 특정 상호 작용을 테스트하기 위해 사용하세요.\n- 유지보수 가능한 테스트 유지하세요: 명확하고 간결한 테스트를 작성하여 테스트 스윗을 유지하세요. 지나치게 복잡한 테스트 로직을 피하세요.","ogImage":{"url":"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png"},"coverImage":"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png","tag":["Tech"],"readingTime":3},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png\" alt=\"image\"></p>\n<p>개발자가 직면하는 일반적인 문제 중 하나는 테스트 의존성을 관리하는 것입니다.</p>\n<p>여기서 테스트 더블이 구원을 줍니다. 테스트 더블은 실제 객체 대신 사용되며 해당 객체의 동작을 제어할 수 있습니다.</p>\n<h1>RSpec 3에서 응답 구성하기</h1>\n<h1>테스트 더블 생성하기</h1>\n<p>테스트 더블은 실제 객체 대신에 테스트에서 사용되며, 그들의 동작을 제어할 수 있게 해줍니다. 목, 스텁, 스파이를 포함해 여러 종류의 테스트 더블이 있습니다. 여기서는 그들의 응답을 구성하는 데 중점을 둘 것입니다.</p>\n<h1>메서드가 값 반환하도록 허용하기</h1>\n<p>특정 값을 반환하도록 메서드를 구성하는 데 allow를 사용할 수 있습니다:</p>\n<h1>예외 발생시키기</h1>\n<p>예외 처리를 테스트하려면 메소드를 구성하여 오류를 발생시킬 수 있습니다:</p>\n<h1>블록에 양보하기</h1>\n<p>가끔은 더블을 블록에 값을 양보해야 할 때가 있습니다. 반복자나 콜백을 다룰 때 유용합니다:</p>\n<p><img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_3.png\" alt=\"이미지\"></p>\n<h1>여러 값을 반환하기</h1>\n<p>연이어 호출할 때 다른 값을 반환하는 방법이 필요하다면 and_return에 여러 인수를 전달할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_4.png\" alt=\"image\"></p>\n<h2>부분 더블 구성</h2>\n<p>부분 더블은 실제 객체의 메서드를 모의(Mock)하거나 스텁(Stub)하는 동시에 객체의 나머지 동작을 유지하는 것을 가능하게 합니다. 객체의 특정 부분 동작을 테스트하고 싶을 때 전체 객체를 대체하지 않고 유용합니다.</p>\n<h1>원본 메서드 호출하기</h1>\n<p>일부 호출에 대해 부분 더블에게 원본 메서드를 호출하도록 지시할 수 있습니다:</p>\n<p><img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_5.png\" alt=\"image\"></p>\n<h1>원본 메서드 감싸기</h1>\n<p>메소드의 동작을 수정하면서 원본 구현을 호출할 수도 있어요:</p>\n<p><img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_6.png\" alt=\"Image\"></p>\n<h2>고급 사용자 정의</h2>\n<h2>간헐적 동작</h2>\n<p>보다 복잡한 동작을 시뮬레이션하기 위해 네트워크 장애와 같은 부분적인 특성을 정의하기 위해 블록을 사용하세요:</p>\n<p><img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_7.png\" alt=\"이미지\"></p>\n<h1>팁과 꿀팁</h1>\n<ul>\n<li>구체적으로 설정하세요: 테스트 더블을 구성할 때 제한 사항을 가능한 한 명확하게 지정하여 테스트가 의미 있는지 확인하세요.</li>\n<li>부분적인 더블을 현명하게 사용하세요: 부분적인 더블은 강력하지만 테스트 사이의 강하게 결합된 테스트로 이어질 수 있습니다. 전체 객체를 교체하지 않고 특정 상호 작용을 테스트하기 위해 사용하세요.</li>\n<li>유지보수 가능한 테스트 유지하세요: 명확하고 간결한 테스트를 작성하여 테스트 스윗을 유지하세요. 지나치게 복잡한 테스트 로직을 피하세요.</li>\n</ul>\n</body>\n</html>\n"},"__N_SSG":true}