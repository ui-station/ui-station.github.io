{"pageProps":{"post":{"title":"KMM에서 Proto DataStore 마법을 해제하는 방법","description":"","date":"2024-06-23 01:17","slug":"2024-06-23-UnlockingProtoDataStoreMagicinKMM","content":"\n\n<img src=\"/assets/img/2024-06-23-UnlockingProtoDataStoreMagicinKMM_0.png\" />\n\n모바일 개발의 빠르게 진화하는 세계에서 Kotlin Multiplatform Mobile (KMM)은 안드로이드 및 iOS 애플리케이션을 위한 공유 코드를 작성할 수 있게 해줍니다. 중요한 도전 중 하나는 안드로이드의 SharedPreference나 iOS의 NSUserDefaults와 같은 효율적이고 신뢰할 수 있는 키-값 데이터 저장 솔루션을 찾는 것입니다. 이 글에서는 강력하고 타입 안전한 솔루션 Proto DataStore를 KMM 프로젝트에 통합하는 방법을 탐구합니다.\n\n# DataStore\n\nJetpack DataStore는 프로토콜 버퍼를 사용하여 키-값 쌍 또는 형식화된 객체를 저장할 수 있는 데이터 저장 솔루션입니다. DataStore는 Kotlin 코루틴과 Flow를 사용하여 데이터를 비동기적으로, 일관되게 및 트랜잭션 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\nDataStore은 두 가지 다른 구현을 제공합니다:\n\n- Preferences DataStore는 키를 사용하여 데이터를 저장하고 액세스합니다. 이 구현은 미리 정의된 스키마가 필요하지 않으며 형식 안전성을 제공하지 않습니다.\n- Proto DataStore는 사용자 정의 데이터 유형의 인스턴스로 데이터를 저장합니다. 이 구현은 프로토콜 버퍼를 사용하여 스키마를 정의해야 하지만 형식 안전성을 제공합니다.\n\nGoogle이 이제 DataStore Multiplatform을 출시했습니다!\n\n이 문서에서는 KMM에 Proto DataStore를 구현하여 Protocol Buffer를 활용할 것입니다. KMM에서 Protocol Buffer를 사용하기 위해 Wire를 사용했습니다.\n\n<div class=\"content-ad\"></div>\n\n# 전체 코드\n\n# 단계별 구현\n\n- app/build.gradle.kts 파일에 DataStore 종속성 추가\n\n```js\ncommonMain.dependencies {\n  // 다른 종속성들\n  implementation(\"androidx.datastore:datastore-core-okio:1.1.1\")\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- app/build.gradle.kts 파일에 Wire Gradle 플러그인을 추가해주세요.\n\n```js\nplugins {\n  // 다른 플러그인들\n  id(\"com.squareup.wire\") version \"5.0.0-alpha03\"\n}\n```\n\n- app/build.gradle.kts 파일에 Wire Gradle 설정을 추가해주세요.\n\n```js\nwire {\n    kotlin {}\n    sourcePath {\n        srcDir(\"src/commonMain/proto\")\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- src/commonMain/proto 디렉토리 아래 preference_data.proto 파일을 생성해주세요\n\n![아이미지](/assets/img/2024-06-23-UnlockingProtoDataStoreMagicinKMM_1.png)\n\n```proto\n// preference_data.proto 파일\n\nsyntax = \"proto3\";\n\npackage com.areeb.proto_datastore_kmm;\n\nmessage PreferenceData {\n  int32 counter = 1;\n}\n```\n\n- PreferenceData에 대한 Protocol Buffer 직렬화기를 생성해주세요\n\n<div class=\"content-ad\"></div>\n\n```kt\n// commonMain 안에 있습니다\n// PreferenceSerializer.kt\n\nobject PreferenceSerializer : OkioSerializer<PreferenceData> {\n    override val defaultValue: PreferenceData\n        get() = PreferenceData()\n\n    override suspend fun readFrom(source: BufferedSource): PreferenceData {\n        try {\n            return PreferenceData.ADAPTER.decode(source)\n        } catch (exception: IOException) {\n            throw Exception(exception.message ?: \"Serialization Exception\")\n        }\n    }\n\n    override suspend fun writeTo(t: PreferenceData, sink: BufferedSink) {\n        sink.write(t.encode())\n    }\n}\n```\n\n- 각 플랫폼(여기서 안드로이드 및 iOS)을 위한 Proto DataStore 인스턴스를 생성합니다\n\n```kt\n// commonMain 안에 있습니다\n// DataStore.kt\n\ninternal const val DATA_STORE_FILE_NAME = \"proto_datastore.preferences_pb\"\n\nexpect fun getDataStore(): DataStore<PreferenceData>\n\nfun createDataStore(\n    fileSystem: FileSystem,\n    producePath: () -> Path\n): DataStore<PreferenceData> =\n    DataStoreFactory.create(\n        storage = OkioStorage(\n            fileSystem = fileSystem,\n            producePath = producePath,\n            serializer = PreferenceSerializer,\n        ),\n    )\n```\n\n```kt\n// androidMain 안에 있습니다\n// ProtoDataStore.kt\n\nactual fun getDataStore(): DataStore<PreferenceData> {\n    val content = requireNotNull(AndroidPlatformContextProvider.context)\n    val producePath = { content.filesDir.resolve(DATA_STORE_FILE_NAME).absolutePath.toPath() }\n\n    return createDataStore(fileSystem = FileSystem.SYSTEM, producePath = producePath)\n}\n```\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n// iosMain 내부\n// ProtoDataStore.kt\n\n실제 getDataStore() 함수:\n\nactual fun getDataStore(): DataStore<PreferenceData> {\n    @OptIn(ExperimentalForeignApi::class)\n    val producePath = {\n        val documentDirectory: NSURL? = NSFileManager.defaultManager.URLForDirectory(\n            directory = NSDocumentDirectory,\n            inDomain = NSUserDomainMask,\n            appropriateForURL = null,\n            create = false,\n            error = null,\n        )\n        requireNotNull(documentDirectory).path + \"/$DATA_STORE_FILE_NAME\"\n    }\n\n    return createDataStore(fileSystem = FileSystem.SYSTEM, producePath = { producePath().toPath() })\n}\n```\n\n- DataStore를 사용하여 키-값 쌍을 가져오고 저장합니다.\n\n```kotlin\n// commonMain 내부\n// Preference.kt\n\nPreference 인터페이스:\n\ninterface Preference {\n    suspend fun updateCounter()\n    fun getCounter(): Flow<Int>\n}\n\nPreferenceImpl 클래스:\n\nPreferenceImpl(private val dataStore: DataStore<PreferenceData> = getDataStore()) :\n    Preference {\n\n    override suspend fun updateCounter() {\n        dataStore.updateData { data ->\n            data.copy(counter = data.counter + 1)\n        }\n    }\n\n    override fun getCounter(): Flow<Int> {\n        return dataStore.data.map { data ->\n            data.counter\n        }\n    }\n}\n```\n\n- Compose Multiplatform에서 DataStore 사용법\n\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n@Composable\n@Preview\nfun App() {\n    MaterialTheme {\n        val composableScope = rememberCoroutineScope()\n        val preference: Preference = remember { PreferenceImpl() }\n        val counter by preference.getCounter().collectAsState(initial = 0)\n\n        Column(\n            Modifier.fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center,\n        ) {\n            Button(\n                onClick = {\n                    composableScope.launch {\n                        preference.updateCounter()\n                    }\n                },\n            ) {\n                Text(\"Click me! Counter: $counter\")\n            }\n        }\n    }\n}\n```\n\n결과\n\n<img src=\"https://miro.medium.com/v2/resize:fit:648/1*LLMohc4VOkcL1wdhGDjp_Q.gif\" />\n\n<img src=\"https://miro.medium.com/v2/resize:fit:600/1*myxIzIctkEZvgk81vKV0-w.gif\" />\n\n\n<div class=\"content-ad\"></div>\n\n아래 코멘트에 여러분의 제안과 개선 사항을 남겨주세요. 편안한 마음으로 연락해주세요!\n\nLinkedIn에서 저와 연결해보세요.","ogImage":{"url":"/assets/img/2024-06-23-UnlockingProtoDataStoreMagicinKMM_0.png"},"coverImage":"/assets/img/2024-06-23-UnlockingProtoDataStoreMagicinKMM_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>모바일 개발의 빠르게 진화하는 세계에서 Kotlin Multiplatform Mobile (KMM)은 안드로이드 및 iOS 애플리케이션을 위한 공유 코드를 작성할 수 있게 해줍니다. 중요한 도전 중 하나는 안드로이드의 SharedPreference나 iOS의 NSUserDefaults와 같은 효율적이고 신뢰할 수 있는 키-값 데이터 저장 솔루션을 찾는 것입니다. 이 글에서는 강력하고 타입 안전한 솔루션 Proto DataStore를 KMM 프로젝트에 통합하는 방법을 탐구합니다.</p>\n<h1>DataStore</h1>\n<p>Jetpack DataStore는 프로토콜 버퍼를 사용하여 키-값 쌍 또는 형식화된 객체를 저장할 수 있는 데이터 저장 솔루션입니다. DataStore는 Kotlin 코루틴과 Flow를 사용하여 데이터를 비동기적으로, 일관되게 및 트랜잭션 처리할 수 있습니다.</p>\n<p>DataStore은 두 가지 다른 구현을 제공합니다:</p>\n<ul>\n<li>Preferences DataStore는 키를 사용하여 데이터를 저장하고 액세스합니다. 이 구현은 미리 정의된 스키마가 필요하지 않으며 형식 안전성을 제공하지 않습니다.</li>\n<li>Proto DataStore는 사용자 정의 데이터 유형의 인스턴스로 데이터를 저장합니다. 이 구현은 프로토콜 버퍼를 사용하여 스키마를 정의해야 하지만 형식 안전성을 제공합니다.</li>\n</ul>\n<p>Google이 이제 DataStore Multiplatform을 출시했습니다!</p>\n<p>이 문서에서는 KMM에 Proto DataStore를 구현하여 Protocol Buffer를 활용할 것입니다. KMM에서 Protocol Buffer를 사용하기 위해 Wire를 사용했습니다.</p>\n<h1>전체 코드</h1>\n<h1>단계별 구현</h1>\n<ul>\n<li>app/build.gradle.kts 파일에 DataStore 종속성 추가</li>\n</ul>\n<pre><code class=\"hljs language-js\">commonMain.<span class=\"hljs-property\">dependencies</span> {\n  <span class=\"hljs-comment\">// 다른 종속성들</span>\n  <span class=\"hljs-title function_\">implementation</span>(<span class=\"hljs-string\">\"androidx.datastore:datastore-core-okio:1.1.1\"</span>)\n}\n</code></pre>\n<ul>\n<li>app/build.gradle.kts 파일에 Wire Gradle 플러그인을 추가해주세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">plugins {\n  <span class=\"hljs-comment\">// 다른 플러그인들</span>\n  <span class=\"hljs-title function_\">id</span>(<span class=\"hljs-string\">\"com.squareup.wire\"</span>) version <span class=\"hljs-string\">\"5.0.0-alpha03\"</span>\n}\n</code></pre>\n<ul>\n<li>app/build.gradle.kts 파일에 Wire Gradle 설정을 추가해주세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">wire {\n    kotlin {}\n    sourcePath {\n        <span class=\"hljs-title function_\">srcDir</span>(<span class=\"hljs-string\">\"src/commonMain/proto\"</span>)\n    }\n}\n</code></pre>\n<ul>\n<li>src/commonMain/proto 디렉토리 아래 preference_data.proto 파일을 생성해주세요</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-23-UnlockingProtoDataStoreMagicinKMM_1.png\" alt=\"아이미지\"></p>\n<pre><code class=\"hljs language-proto\"><span class=\"hljs-comment\">// preference_data.proto 파일</span>\n\nsyntax = <span class=\"hljs-string\">\"proto3\"</span>;\n\n<span class=\"hljs-keyword\">package</span> com.areeb.proto_datastore_kmm;\n\n<span class=\"hljs-keyword\">message </span><span class=\"hljs-title class_\">PreferenceData</span> {\n  <span class=\"hljs-type\">int32</span> counter = <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n<ul>\n<li>PreferenceData에 대한 Protocol Buffer 직렬화기를 생성해주세요</li>\n</ul>\n<pre><code class=\"hljs language-kt\"><span class=\"hljs-comment\">// commonMain 안에 있습니다</span>\n<span class=\"hljs-comment\">// PreferenceSerializer.kt</span>\n\n<span class=\"hljs-keyword\">object</span> PreferenceSerializer : OkioSerializer&#x3C;PreferenceData> {\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">val</span> defaultValue: PreferenceData\n        <span class=\"hljs-keyword\">get</span>() = PreferenceData()\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">readFrom</span><span class=\"hljs-params\">(source: <span class=\"hljs-type\">BufferedSource</span>)</span></span>: PreferenceData {\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">return</span> PreferenceData.ADAPTER.decode(source)\n        } <span class=\"hljs-keyword\">catch</span> (exception: IOException) {\n            <span class=\"hljs-keyword\">throw</span> Exception(exception.message ?: <span class=\"hljs-string\">\"Serialization Exception\"</span>)\n        }\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">writeTo</span><span class=\"hljs-params\">(t: <span class=\"hljs-type\">PreferenceData</span>, sink: <span class=\"hljs-type\">BufferedSink</span>)</span></span> {\n        sink.write(t.encode())\n    }\n}\n</code></pre>\n<ul>\n<li>각 플랫폼(여기서 안드로이드 및 iOS)을 위한 Proto DataStore 인스턴스를 생성합니다</li>\n</ul>\n<pre><code class=\"hljs language-kt\"><span class=\"hljs-comment\">// commonMain 안에 있습니다</span>\n<span class=\"hljs-comment\">// DataStore.kt</span>\n\n<span class=\"hljs-keyword\">internal</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">val</span> DATA_STORE_FILE_NAME = <span class=\"hljs-string\">\"proto_datastore.preferences_pb\"</span>\n\n<span class=\"hljs-keyword\">expect</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getDataStore</span><span class=\"hljs-params\">()</span></span>: DataStore&#x3C;PreferenceData>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">createDataStore</span><span class=\"hljs-params\">(\n    fileSystem: <span class=\"hljs-type\">FileSystem</span>,\n    producePath: () -> <span class=\"hljs-type\">Path</span>\n)</span></span>: DataStore&#x3C;PreferenceData> =\n    DataStoreFactory.create(\n        storage = OkioStorage(\n            fileSystem = fileSystem,\n            producePath = producePath,\n            serializer = PreferenceSerializer,\n        ),\n    )\n</code></pre>\n<pre><code class=\"hljs language-kt\"><span class=\"hljs-comment\">// androidMain 안에 있습니다</span>\n<span class=\"hljs-comment\">// ProtoDataStore.kt</span>\n\n<span class=\"hljs-keyword\">actual</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getDataStore</span><span class=\"hljs-params\">()</span></span>: DataStore&#x3C;PreferenceData> {\n    <span class=\"hljs-keyword\">val</span> content = requireNotNull(AndroidPlatformContextProvider.context)\n    <span class=\"hljs-keyword\">val</span> producePath = { content.filesDir.resolve(DATA_STORE_FILE_NAME).absolutePath.toPath() }\n\n    <span class=\"hljs-keyword\">return</span> createDataStore(fileSystem = FileSystem.SYSTEM, producePath = producePath)\n}\n</code></pre>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-comment\">// iosMain 내부</span>\n<span class=\"hljs-comment\">// ProtoDataStore.kt</span>\n\n실제 getDataStore() 함수:\n\n<span class=\"hljs-keyword\">actual</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getDataStore</span><span class=\"hljs-params\">()</span></span>: DataStore&#x3C;PreferenceData> {\n    <span class=\"hljs-meta\">@OptIn(ExperimentalForeignApi::class)</span>\n    <span class=\"hljs-keyword\">val</span> producePath = {\n        <span class=\"hljs-keyword\">val</span> documentDirectory: NSURL? = NSFileManager.defaultManager.URLForDirectory(\n            directory = NSDocumentDirectory,\n            inDomain = NSUserDomainMask,\n            appropriateForURL = <span class=\"hljs-literal\">null</span>,\n            create = <span class=\"hljs-literal\">false</span>,\n            error = <span class=\"hljs-literal\">null</span>,\n        )\n        requireNotNull(documentDirectory).path + <span class=\"hljs-string\">\"/<span class=\"hljs-variable\">$DATA_STORE_FILE_NAME</span>\"</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> createDataStore(fileSystem = FileSystem.SYSTEM, producePath = { producePath().toPath() })\n}\n</code></pre>\n<ul>\n<li>DataStore를 사용하여 키-값 쌍을 가져오고 저장합니다.</li>\n</ul>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-comment\">// commonMain 내부</span>\n<span class=\"hljs-comment\">// Preference.kt</span>\n\nPreference 인터페이스:\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Preference</span> {\n    <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">updateCounter</span><span class=\"hljs-params\">()</span></span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getCounter</span><span class=\"hljs-params\">()</span></span>: Flow&#x3C;<span class=\"hljs-built_in\">Int</span>>\n}\n\nPreferenceImpl 클래스:\n\nPreferenceImpl(<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> dataStore: DataStore&#x3C;PreferenceData> = getDataStore()) :\n    Preference {\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">suspend</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">updateCounter</span><span class=\"hljs-params\">()</span></span> {\n        dataStore.updateData { <span class=\"hljs-keyword\">data</span> ->\n            <span class=\"hljs-keyword\">data</span>.copy(counter = <span class=\"hljs-keyword\">data</span>.counter + <span class=\"hljs-number\">1</span>)\n        }\n    }\n\n    <span class=\"hljs-keyword\">override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getCounter</span><span class=\"hljs-params\">()</span></span>: Flow&#x3C;<span class=\"hljs-built_in\">Int</span>> {\n        <span class=\"hljs-keyword\">return</span> dataStore.<span class=\"hljs-keyword\">data</span>.map { <span class=\"hljs-keyword\">data</span> ->\n            <span class=\"hljs-keyword\">data</span>.counter\n        }\n    }\n}\n</code></pre>\n<ul>\n<li>Compose Multiplatform에서 DataStore 사용법</li>\n</ul>\n<pre><code class=\"hljs language-kotlin\"><span class=\"hljs-meta\">@Composable</span>\n<span class=\"hljs-meta\">@Preview</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">App</span><span class=\"hljs-params\">()</span></span> {\n    MaterialTheme {\n        <span class=\"hljs-keyword\">val</span> composableScope = rememberCoroutineScope()\n        <span class=\"hljs-keyword\">val</span> preference: Preference = remember { PreferenceImpl() }\n        <span class=\"hljs-keyword\">val</span> counter <span class=\"hljs-keyword\">by</span> preference.getCounter().collectAsState(initial = <span class=\"hljs-number\">0</span>)\n\n        Column(\n            Modifier.fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center,\n        ) {\n            Button(\n                onClick = {\n                    composableScope.launch {\n                        preference.updateCounter()\n                    }\n                },\n            ) {\n                Text(<span class=\"hljs-string\">\"Click me! Counter: <span class=\"hljs-variable\">$counter</span>\"</span>)\n            }\n        }\n    }\n}\n</code></pre>\n<p>결과</p>\n<p>아래 코멘트에 여러분의 제안과 개선 사항을 남겨주세요. 편안한 마음으로 연락해주세요!</p>\n<p>LinkedIn에서 저와 연결해보세요.</p>\n</body>\n</html>\n"},"__N_SSG":true}