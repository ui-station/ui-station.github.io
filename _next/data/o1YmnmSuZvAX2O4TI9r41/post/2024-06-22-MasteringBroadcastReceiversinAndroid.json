{"pageProps":{"post":{"title":"안드로이드 브로드캐스트 리시버 완벽 마스터하기","description":"","date":"2024-06-22 22:36","slug":"2024-06-22-MasteringBroadcastReceiversinAndroid","content":"\n\n<img src=\"/assets/img/2024-06-22-MasteringBroadcastReceiversinAndroid_0.png\" />\n\n안드로이드 앱 개발에서 브로드캐스트 수신기는 시스템 전반에 걸친 브로드캐스트 공지를 수신하기 위한 앱의 기능을 활성화하는 데 중요한 역할을 합니다. 장치의 배터리가 낮아지거나 인터넷 연결이 변경되었을 때, 또는 새로운 SMS가 도착했을 때를 감지하는 것처럼, 브로드캐스트 수신기는 이러한 이벤트에 대응하기 위한 주요 구성 요소입니다. 이 기사에서는 브로드캐스트 수신기가 무엇인지, 어떻게 작동하는지, 그리고 안드로이드 앱에서 효과적으로 활용하는 방법에 대해 살펴보겠습니다.\n\n# 브로드캐스트 수신기란?\n\n브로드캐스트 수신기는 활동(Activities), 서비스(Services), 콘텐트 제공자(Content Providers)와 함께 안드로이드 앱의 네 가지 주요 구성 요소 중 하나입니다. 브로드캐스트 수신기를 통해 앱은 다른 애플리케이션이나 시스템으로부터의 브로드캐스트 메시지를 수신하고 응답할 수 있습니다. 이러한 브로드캐스트는 시스템이나 다른 앱이 서로 통신할 수 있는 방법을 제공하는 것으로 생각할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이제 본문을 한국어로 번역해보겠습니다.\n\n이제 본문을 한국어로 번역해보겠습니다.\n\n두 가지 주요 방송 유형이 있습니다:\n\n- 시스템 방송: Android 시스템이 특정 시스템 이벤트(예: 기기를 충전할 때 또는 화면이 켜질 때) 발생 시 보내는 방송입니다.\n- 사용자 정의 방송: 앱이나 기타 제3자 앱이 특정 이벤트를 전달하기 위해 보내는 방송입니다.\n\n# 방송 수신기 동작 방식\n\n방송 수신기는 관심 있는 방송을 지정하는 IntentFilter를 정의함으로써 동작합니다. 이 필터와 일치하는 방송이 전송되면 수신기의 onReceive 메서드가 호출되어 앱이 해당 이벤트에 대응할 수 있게 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 브로드캐스트 수신기 정의하기\n\n브로드캐스트 수신기는 AndroidManifest.xml 파일에 정적으로 또는 코드에서 동적으로 정의할 수 있습니다.\n\n## 정적 등록\n\n정적 등록은 앱의 AndroidManifest.xml 파일에 수신기를 선언하는 것을 의미합니다. 이 방법은 앱이 실행 중이 아닌 경우에도 브로드캐스트를 수신하는 데 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<receiver android:name=\".MyBroadcastReceiver\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n        <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\"/>\n    </intent-filter>\n</receiver>\n```\n\n## 동적 등록\n\n동적 등록은 런타임에서 수행되며 일반적으로 Activity 또는 Service 내에서 수행됩니다. 이 접근 방식을 통해 앱의 라이프사이클에 따라 수신기의 등록 및 해제를 더 유연하게 처리할 수 있습니다.\n\n```js\nval receiver = MyBroadcastReceiver()\nval filter = IntentFilter().apply {\n    addAction(\"android.intent.action.BOOT_COMPLETED\")\n    addAction(\"android.net.conn.CONNECTIVITY_CHANGE\")\n}\nregisterReceiver(receiver, filter)\n```\n\n<div class=\"content-ad\"></div>\n\n# 브로드캐스트 수신기 구현\n\n다음은 브로드캐스트 수신기 구현의 간단한 예제입니다:\n\n```js\nclass MyBroadcastReceiver : BroadcastReceiver() {\n    override fun onReceive(context: Context, intent: Intent) {\n        when (intent.action) {\n            Intent.ACTION_BOOT_COMPLETED -> {\n                // 부팅 완료 처리\n                Log.d(\"MyBroadcastReceiver\", \"기기 부팅됨\")\n            }\n            ConnectivityManager.CONNECTIVITY_ACTION -> {\n                // 연결 상태 변경 처리\n                Log.d(\"MyBroadcastReceiver\", \"연결 상태 변경됨\")\n            }\n        }\n    }\n}\n```\n\n# 실용적인 사용 사례\n\n<div class=\"content-ad\"></div>\n\n방송 수신기는 다양하고 다양한 시나리오에서 사용할 수 있습니다. 이제 몇 가지 실용적인 사용 사례를 살펴보겠습니다:\n\n# 연결 변경 처리\n\n네트워크 연결이 변경될 때 필요한 작업을 수행하려고 할 수 있습니다. 예를 들어, 기기가 인터넷에 연결될 때 데이터를 동기화하는 등의 작업을 수행할 수 있습니다.\n\n```js\nclass ConnectivityReceiver : BroadcastReceiver() {\n    override fun onReceive(context: Context, intent: Intent) {\n        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n        val networkInfo = connectivityManager.activeNetworkInfo\n        if (networkInfo != null && networkInfo.isConnected) {\n            // 기기가 인터넷에 연결됨\n            Log.d(\"ConnectivityReceiver\", \"인터넷에 연결됨\")\n        } else {\n            // 기기가 인터넷에 연결되지 않음\n            Log.d(\"ConnectivityReceiver\", \"인터넷에 연결되지 않음\")\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 시스템 이벤트에 대응하기\n\n특정 시점에 작업을 수행하려면 방송 수신기(Broadcast Receivers)를 사용할 수 있습니다. 예를 들어 장치 부팅 시 서비스를 시작하는 등의 작업을 수행할 수 있습니다.\n\n```js\nclass BootCompletedReceiver : BroadcastReceiver() {\n    override fun onReceive(context: Context, intent: Intent) {\n        if (intent.action == Intent.ACTION_BOOT_COMPLETED) {\n            val serviceIntent = Intent(context, MyService::class.java)\n            context.startService(serviceIntent)\n        }\n    }\n}\n```\n\n# 사용자 정의 방송 수신하기\n\n<div class=\"content-ad\"></div>\n\n당신의 앱은 자체 사용자 정의 브로드캐스트를 정의하고 수신할 수도 있습니다. 이를 통해 다른 구성 요소 또는 앱 간에 통신할 수 있습니다.\n\n```js\n// 사용자 정의 브로드캐스트 보내기\nval intent = Intent(\"com.example.MY_CUSTOM_ACTION\")\nsendBroadcast(intent)\n\n// 사용자 정의 브로드캐스트 수신하기\nclass CustomBroadcastReceiver : BroadcastReceiver() {\n    override fun onReceive(context: Context, intent: Intent) {\n        if (intent.action == \"com.example.MY_CUSTOM_ACTION\") {\n            // 커스텀 동작 처리\n            Log.d(\"CustomBroadcastReceiver\", \"커스텀 동작 수신됨\")\n        }\n    }\n}\n```\n\n# 모범 사례\n\n브로드캐스트 수신기는 강력하지만 흔한 실수를 피하기 위해 신중하게 사용해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 전력 소비 관리\n\n방송 수신기 중에는 명시적으로 등록된 수신기가 배터리 수명에 상당한 영향을 미칠 수 있습니다. 더 이상 필요하지 않은동적으로 등록된 수신기는 항상 등록 해제해야 합니다.\n\n# 보안 고려 사항\n\n민감한 방송을 위한 수신기를 정의할 때 주의해야 합니다. 특정 방송을 보낼 수 있거나 수신할 수 있는 애플리케이션은 신뢰할 수 있는 앱들만 보낼 수 있도록 권한 검사를 사용해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\n<receiver android:name=\".SecureBroadcastReceiver\">\n    <intent-filter>\n        <action android:name=\"com.example.SECURE_ACTION\"/>\n    </intent-filter>\n    <permission android:name=\"com.example.permission.SECURE_BROADCAST\"/>\n</receiver>\n```\n\n# 메모리 누수 방지하기\n\n적절한 라이프사이클 메소드에서 동적으로 등록된 리시버를 해제하여 메모리 누수를 방지하세요.\n\n```js\noverride fun onPause() {\n    super.onPause()\n    unregisterReceiver(myReceiver)\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론\n\n브로드캐스트 수신기는 안드로이드 개발에서 기본 구성 요소로, 앱이 다양한 시스템 및 사용자 이벤트를 듣고 대응할 수 있게 합니다. 방송을 효과적으로 등록하고 처리하는 방법을 이해하면, 더 반응적이고 동적인 애플리케이션을 만들 수 있습니다. 전력 소비와 보안을 관리하기 위한 최상의 방법을 준수하여 앱을 효율적이고 안전하게 유지하세요. 이 도구와 기술을 활용하면 안드로이드 프로젝트에서 브로드캐스트 수신기의 모든 잠재력을 활용할 준비가 되어 있습니다.","ogImage":{"url":"/assets/img/2024-06-22-MasteringBroadcastReceiversinAndroid_0.png"},"coverImage":"/assets/img/2024-06-22-MasteringBroadcastReceiversinAndroid_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p>안드로이드 앱 개발에서 브로드캐스트 수신기는 시스템 전반에 걸친 브로드캐스트 공지를 수신하기 위한 앱의 기능을 활성화하는 데 중요한 역할을 합니다. 장치의 배터리가 낮아지거나 인터넷 연결이 변경되었을 때, 또는 새로운 SMS가 도착했을 때를 감지하는 것처럼, 브로드캐스트 수신기는 이러한 이벤트에 대응하기 위한 주요 구성 요소입니다. 이 기사에서는 브로드캐스트 수신기가 무엇인지, 어떻게 작동하는지, 그리고 안드로이드 앱에서 효과적으로 활용하는 방법에 대해 살펴보겠습니다.</p>\n<h1>브로드캐스트 수신기란?</h1>\n<p>브로드캐스트 수신기는 활동(Activities), 서비스(Services), 콘텐트 제공자(Content Providers)와 함께 안드로이드 앱의 네 가지 주요 구성 요소 중 하나입니다. 브로드캐스트 수신기를 통해 앱은 다른 애플리케이션이나 시스템으로부터의 브로드캐스트 메시지를 수신하고 응답할 수 있습니다. 이러한 브로드캐스트는 시스템이나 다른 앱이 서로 통신할 수 있는 방법을 제공하는 것으로 생각할 수 있습니다.</p>\n<p>이제 본문을 한국어로 번역해보겠습니다.</p>\n<p>이제 본문을 한국어로 번역해보겠습니다.</p>\n<p>두 가지 주요 방송 유형이 있습니다:</p>\n<ul>\n<li>시스템 방송: Android 시스템이 특정 시스템 이벤트(예: 기기를 충전할 때 또는 화면이 켜질 때) 발생 시 보내는 방송입니다.</li>\n<li>사용자 정의 방송: 앱이나 기타 제3자 앱이 특정 이벤트를 전달하기 위해 보내는 방송입니다.</li>\n</ul>\n<h1>방송 수신기 동작 방식</h1>\n<p>방송 수신기는 관심 있는 방송을 지정하는 IntentFilter를 정의함으로써 동작합니다. 이 필터와 일치하는 방송이 전송되면 수신기의 onReceive 메서드가 호출되어 앱이 해당 이벤트에 대응할 수 있게 됩니다.</p>\n<h1>브로드캐스트 수신기 정의하기</h1>\n<p>브로드캐스트 수신기는 AndroidManifest.xml 파일에 정적으로 또는 코드에서 동적으로 정의할 수 있습니다.</p>\n<h2>정적 등록</h2>\n<p>정적 등록은 앱의 AndroidManifest.xml 파일에 수신기를 선언하는 것을 의미합니다. 이 방법은 앱이 실행 중이 아닌 경우에도 브로드캐스트를 수신하는 데 유용합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;receiver <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\".MyBroadcastReceiver\"</span>>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">intent-filter</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.action.BOOT_COMPLETED\"</span>/></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>/></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">intent-filter</span>></span></span>\n&#x3C;/receiver>\n</code></pre>\n<h2>동적 등록</h2>\n<p>동적 등록은 런타임에서 수행되며 일반적으로 Activity 또는 Service 내에서 수행됩니다. 이 접근 방식을 통해 앱의 라이프사이클에 따라 수신기의 등록 및 해제를 더 유연하게 처리할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\">val receiver = <span class=\"hljs-title class_\">MyBroadcastReceiver</span>()\nval filter = <span class=\"hljs-title class_\">IntentFilter</span>().<span class=\"hljs-property\">apply</span> {\n    <span class=\"hljs-title function_\">addAction</span>(<span class=\"hljs-string\">\"android.intent.action.BOOT_COMPLETED\"</span>)\n    <span class=\"hljs-title function_\">addAction</span>(<span class=\"hljs-string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>)\n}\n<span class=\"hljs-title function_\">registerReceiver</span>(receiver, filter)\n</code></pre>\n<h1>브로드캐스트 수신기 구현</h1>\n<p>다음은 브로드캐스트 수신기 구현의 간단한 예제입니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBroadcastReceiver</span> : <span class=\"hljs-title class_\">BroadcastReceiver</span>() {\n    override fun <span class=\"hljs-title function_\">onReceive</span>(<span class=\"hljs-params\">context: Context, intent: Intent</span>) {\n        when (intent.<span class=\"hljs-property\">action</span>) {\n            <span class=\"hljs-title class_\">Intent</span>.<span class=\"hljs-property\">ACTION_BOOT_COMPLETED</span> -> {\n                <span class=\"hljs-comment\">// 부팅 완료 처리</span>\n                <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">d</span>(<span class=\"hljs-string\">\"MyBroadcastReceiver\"</span>, <span class=\"hljs-string\">\"기기 부팅됨\"</span>)\n            }\n            <span class=\"hljs-title class_\">ConnectivityManager</span>.<span class=\"hljs-property\">CONNECTIVITY_ACTION</span> -> {\n                <span class=\"hljs-comment\">// 연결 상태 변경 처리</span>\n                <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">d</span>(<span class=\"hljs-string\">\"MyBroadcastReceiver\"</span>, <span class=\"hljs-string\">\"연결 상태 변경됨\"</span>)\n            }\n        }\n    }\n}\n</code></pre>\n<h1>실용적인 사용 사례</h1>\n<p>방송 수신기는 다양하고 다양한 시나리오에서 사용할 수 있습니다. 이제 몇 가지 실용적인 사용 사례를 살펴보겠습니다:</p>\n<h1>연결 변경 처리</h1>\n<p>네트워크 연결이 변경될 때 필요한 작업을 수행하려고 할 수 있습니다. 예를 들어, 기기가 인터넷에 연결될 때 데이터를 동기화하는 등의 작업을 수행할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConnectivityReceiver</span> : <span class=\"hljs-title class_\">BroadcastReceiver</span>() {\n    override fun <span class=\"hljs-title function_\">onReceive</span>(<span class=\"hljs-params\">context: Context, intent: Intent</span>) {\n        val connectivityManager = context.<span class=\"hljs-title function_\">getSystemService</span>(<span class=\"hljs-title class_\">Context</span>.<span class=\"hljs-property\">CONNECTIVITY_SERVICE</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">ConnectivityManager</span>\n        val networkInfo = connectivityManager.<span class=\"hljs-property\">activeNetworkInfo</span>\n        <span class=\"hljs-keyword\">if</span> (networkInfo != <span class=\"hljs-literal\">null</span> &#x26;&#x26; networkInfo.<span class=\"hljs-property\">isConnected</span>) {\n            <span class=\"hljs-comment\">// 기기가 인터넷에 연결됨</span>\n            <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">d</span>(<span class=\"hljs-string\">\"ConnectivityReceiver\"</span>, <span class=\"hljs-string\">\"인터넷에 연결됨\"</span>)\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 기기가 인터넷에 연결되지 않음</span>\n            <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">d</span>(<span class=\"hljs-string\">\"ConnectivityReceiver\"</span>, <span class=\"hljs-string\">\"인터넷에 연결되지 않음\"</span>)\n        }\n    }\n}\n</code></pre>\n<h1>시스템 이벤트에 대응하기</h1>\n<p>특정 시점에 작업을 수행하려면 방송 수신기(Broadcast Receivers)를 사용할 수 있습니다. 예를 들어 장치 부팅 시 서비스를 시작하는 등의 작업을 수행할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BootCompletedReceiver</span> : <span class=\"hljs-title class_\">BroadcastReceiver</span>() {\n    override fun <span class=\"hljs-title function_\">onReceive</span>(<span class=\"hljs-params\">context: Context, intent: Intent</span>) {\n        <span class=\"hljs-keyword\">if</span> (intent.<span class=\"hljs-property\">action</span> == <span class=\"hljs-title class_\">Intent</span>.<span class=\"hljs-property\">ACTION_BOOT_COMPLETED</span>) {\n            val serviceIntent = <span class=\"hljs-title class_\">Intent</span>(context, <span class=\"hljs-title class_\">MyService</span>::<span class=\"hljs-keyword\">class</span>.<span class=\"hljs-property\">java</span>)\n            context.<span class=\"hljs-title function_\">startService</span>(serviceIntent)\n        }\n    }\n}\n</code></pre>\n<h1>사용자 정의 방송 수신하기</h1>\n<p>당신의 앱은 자체 사용자 정의 브로드캐스트를 정의하고 수신할 수도 있습니다. 이를 통해 다른 구성 요소 또는 앱 간에 통신할 수 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 사용자 정의 브로드캐스트 보내기</span>\nval intent = <span class=\"hljs-title class_\">Intent</span>(<span class=\"hljs-string\">\"com.example.MY_CUSTOM_ACTION\"</span>)\n<span class=\"hljs-title function_\">sendBroadcast</span>(intent)\n\n<span class=\"hljs-comment\">// 사용자 정의 브로드캐스트 수신하기</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomBroadcastReceiver</span> : <span class=\"hljs-title class_\">BroadcastReceiver</span>() {\n    override fun <span class=\"hljs-title function_\">onReceive</span>(<span class=\"hljs-params\">context: Context, intent: Intent</span>) {\n        <span class=\"hljs-keyword\">if</span> (intent.<span class=\"hljs-property\">action</span> == <span class=\"hljs-string\">\"com.example.MY_CUSTOM_ACTION\"</span>) {\n            <span class=\"hljs-comment\">// 커스텀 동작 처리</span>\n            <span class=\"hljs-title class_\">Log</span>.<span class=\"hljs-title function_\">d</span>(<span class=\"hljs-string\">\"CustomBroadcastReceiver\"</span>, <span class=\"hljs-string\">\"커스텀 동작 수신됨\"</span>)\n        }\n    }\n}\n</code></pre>\n<h1>모범 사례</h1>\n<p>브로드캐스트 수신기는 강력하지만 흔한 실수를 피하기 위해 신중하게 사용해야 합니다.</p>\n<h1>전력 소비 관리</h1>\n<p>방송 수신기 중에는 명시적으로 등록된 수신기가 배터리 수명에 상당한 영향을 미칠 수 있습니다. 더 이상 필요하지 않은동적으로 등록된 수신기는 항상 등록 해제해야 합니다.</p>\n<h1>보안 고려 사항</h1>\n<p>민감한 방송을 위한 수신기를 정의할 때 주의해야 합니다. 특정 방송을 보낼 수 있거나 수신할 수 있는 애플리케이션은 신뢰할 수 있는 앱들만 보낼 수 있도록 권한 검사를 사용해야 합니다.</p>\n<pre><code class=\"hljs language-js\">&#x3C;receiver <span class=\"hljs-attr\">android</span>:name=<span class=\"hljs-string\">\".SecureBroadcastReceiver\"</span>>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">intent-filter</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.SECURE_ACTION\"</span>/></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">intent-filter</span>></span></span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.permission.SECURE_BROADCAST\"</span>/></span></span>\n&#x3C;/receiver>\n</code></pre>\n<h1>메모리 누수 방지하기</h1>\n<p>적절한 라이프사이클 메소드에서 동적으로 등록된 리시버를 해제하여 메모리 누수를 방지하세요.</p>\n<pre><code class=\"hljs language-js\">override fun <span class=\"hljs-title function_\">onPause</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">onPause</span>()\n    <span class=\"hljs-title function_\">unregisterReceiver</span>(myReceiver)\n}\n</code></pre>\n<h1>결론</h1>\n<p>브로드캐스트 수신기는 안드로이드 개발에서 기본 구성 요소로, 앱이 다양한 시스템 및 사용자 이벤트를 듣고 대응할 수 있게 합니다. 방송을 효과적으로 등록하고 처리하는 방법을 이해하면, 더 반응적이고 동적인 애플리케이션을 만들 수 있습니다. 전력 소비와 보안을 관리하기 위한 최상의 방법을 준수하여 앱을 효율적이고 안전하게 유지하세요. 이 도구와 기술을 활용하면 안드로이드 프로젝트에서 브로드캐스트 수신기의 모든 잠재력을 활용할 준비가 되어 있습니다.</p>\n</body>\n</html>\n"},"__N_SSG":true}