{"pageProps":{"post":{"title":"UI 개발을 위해 서버가 필요하지 않아요 - 네, 정말 그렇게요","description":"","date":"2024-06-19 11:13","slug":"2024-06-19-IDontNeedaServerforUIDevelopmentYesYouHeardItRight","content":"\n\n<!--\n/assets/img/2024-06-19-IDontNeedaServerforUIDevelopmentYesYouHeardItRight_0.png\n\nUI 개발 세계에서 많은 사람들이 지속적인 서버 개발, 배포 문제, 서버 이용 불가 등과 같은 다양한 서버 관련 장애물을 직면합니다. 이러한 도전에 부딪치면 개발 프로세스가 느려질 수 있습니다. 이러한 장애물을 극복하기 위해 나는 개발자들이 HTTP 서버를 모의하여 예측 가능하고 테스트 가능하며 독립적인 UI 환경을 만들 수 있도록 해주는 강력한 툴인 WireMock을 사용하기로 결정했습니다.\n\n이 글에서는 WireMock를 설정하고 다양한 시나리오를 구성하며 엔드포인트를 유효성 검사하는 과정을 안내해드리겠습니다. 초기 WireMock 템플릿은 이 \n\n참조 동영상은 여기에서 확인할 수 있습니다.\n-->\n\n<div class=\"content-ad\"></div>\n\n# WireMock을 사용하는 이유\n\nWireMock은 개발 중에 서버 의존성을 제거하는 데 도움이 됩니다. 서버 응답을 시뮬레이션함으로써 실제 서버가 준비되거나 이용 가능할 때까지 기다리지 않고 UI를 개발하고 테스트할 수 있습니다. 이 접근 방식은 통합하기 전에 모든 가능한 엣지 케이스를 다룰 수 있도록 보장하여 응용 프로그램의 신뢰성과 견고성을 향상시킵니다.\n\n# WireMock 설정하기\n\n로컬 머신에서 WireMock을 설정하려면 다음 단계를 따르세요:\n\n<div class=\"content-ad\"></div>\n\n리포지토리를 복제하세요:\n\ngit clone https://github.com/piappstudio/WireMock.git\n\nWireMock 실행: 터미널을 열고 로컬 서버를 설정하기 위해 다음 명령을 실행하세요:\n\n```js\njava -jar wiremock-standalone-3.6.0.jar --port 9191 --verbose --global-response-templating --jetty-header-buffer-size 16384\n```\n\n<div class=\"content-ad\"></div>\n\n이 명령은 WireMock 서버를 9191 포트에서 시작하며 자세한 로깅과 전역 응답 템플릿 사용이 활성화됩니다.\n\n## 폴더 구조\n\n- __file\n  - __files 폴더는 응답 일부로 제공될 수 있는 정적 파일을 저장하는 데 사용됩니다. 이러한 파일에는 JSON, XML 또는 기타 반환하려는 콘텐츠가 포함될 수 있습니다.\n- mappings\n  - __files 폴더는 모의 요청에 대한 응답의 일부로 제공될 수 있는 정적 파일을 저장하는 데 사용됩니다. 이 파일에는 JSON, XML, HTML 또는 기타 반환하려는 콘텐츠가 포함될 수 있습니다.\n\n![이미지](/assets/img/2024-06-19-IDontNeedaServerforUIDevelopmentYesYouHeardItRight_1.png)\n\n<div class=\"content-ad\"></div>\n\n특정 JSON 응답을 반환하는 스텁을 만들고 싶다면 다음과 같이 작성할 수 있습니다. GET 요청이 /v1/biggoss/shows로 들어오는 경우를 가정하겠습니다.\n\n```js\n{\n  \"request\": {\n    \"method\": \"GET\",\n    \"url\" : \"/v1/biggboss/shows\"\n  },\n  \"response\": {\n    \"status\": 200,\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"bodyFileName\": \"biggboss-shows-api/default.json\"\n  }\n}\n```\n\n- Request: 수신된 요청의 구조를 정의합니다.\n- Response: 위 요청에 대한 응답의 구조를 정의합니다.\n\n# API 유효성 검사\n\n<div class=\"content-ad\"></div>\n\n/v1/biggboss/shows 엔드포인트를 유효성 검사하려면 다음 단계를 따라 주세요:\n\n- Postman 열기: Postman에 WireMock-BiggBoss.postman_collection.json 파일을 가져오세요.\n- 요청 호출: “Bigg Boss Shows” 엔드포인트로 요청을 보내 응답을 받으세요.\n\n```js\n{\n  \"shows\": [\n    {\n      \"title\": \"BiggBoss Tamil Season 7\",\n      \"id\": \"bbtamil7\",\n      \"host\": \"Kamalahaasan\",\n      \"start_date\": \"2023-10-01\",\n      \"end_date\": \"2024-01-14\",\n      \"winner\": \"Archana\",\n      \"runner\": \"Manichandra\",\n      \"cash\": \"Poornima (16L)\",\n      \"logo\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/logo.png\",\n      \"more_info\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/json/shows/tamil_session_7.json\",\n      \"trends\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/json/shows/tamil_session_7_trends.json\",\n      \"votes\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/json/shows/tamil/season7/votes.json\"\n    }\n  ],\n  \"reviewers\": [\n    {\n      \"channel_name\": \"SBI Electroal Bond - 1 (Google Drive)\",\n      \"description\": \"Google Drive에서 더 나은 분석을 위해 엑셀 형식의 선거채권 파트-1 다운로드\",\n      \"url\": \"https://docs.google.com/spreadsheets/d/17DJrN1orB93OTIYF6QMiFj1aZ9F2WZrA_D8zfjH56FE\",\n      \"image\": \"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"\n    },\n    {\n      \"channel_name\": \"SBI Electroal Bond - 2 (Google Drive)\",\n      \"description\": \"Google Drive에서 더 나은 분석을 위해 엑셀 형식의 선거채권 파트-2 다운로드\",\n      \"url\": \"https://docs.google.com/spreadsheets/d/1GQBoGkyqNd3HOWDaJc2ueOmDQpmYob74\",\n      \"image\": \"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"\n    },\n    {\n      \"channel_name\": \"Bigg Boss Tamizh Review\",\n      \"description\": \"BiggBoss 리뷰, 비평가, 트롤 및 심층 분석\",\n      \"url\": \"https://www.youtube.com/@tamizhreview/videos\",\n      \"image\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/tamizhreview.png\"\n    },\n    {\n      \"channel_name\": \"Pi App Studio\",\n      \"description\": \"타밀어로 무료 iOS 및 안드로이드 개발 강좌\",\n      \"url\": \"https://www.youtube.com/@piappstudio/videos\",\n      \"image\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/piappstudio.png\"\n    }\n  ]\n}\n```\n\n이제 시나리오 기반 구성으로 넘어가 봅시다.\n\n<div class=\"content-ad\"></div>\n\n# WireMock의 기본 키워드 이해하기\n\n## Url/UrlPathPattern\n\nWireMock에서 처리할 URL을 정의합니다.\n\n## Priority\n\n<div class=\"content-ad\"></div>\n\n환경 설정의 우선순위를 설정합니다. 여러 개의 설정이 존재하는 경우, 우선 순위가 가장 높은 것(숫자가 가장 작은 것)이 선택됩니다. 기본값은 5이며, 여기서 1이 가장 높은 우선 순위이고 Integer.MAX_VALUE(Java)가 가장 낮은 우선 순위입니다.\n\n## 시나리오명\n\n- 정의: 동일 시나리오에 속하는 관련된 스텁 그룹을 나타내는 고유 식별자입니다.\n- 목적: 여러 요청과 응답을 연결하여 상태를 유지하는 동작을 가능케 합니다.\n- 예시: \"scenarioName\": \"biggboss-show\"\n\n## newScenarioState\n\n<div class=\"content-ad\"></div>\n\n- **정의:** 요청이 일치되고 응담이 제공된 후 시나리오가 전환하는 상태입니다.\n- **목적:** 시나리오가 다른 상태로 이동하여 순차적인 상태 기반 상호작용이 가능하도록 합니다.\n- **예시:** \"newScenarioState\": \"shows-only\"\n\n## 요구 시나리오 상태\n\n- **정의:** 특정 스텁이 요청과 일치하려면 시나리오가 있어야 하는 상태를 지정합니다.\n- **목적:** 시나리오가 특정 상태에 있을 때만 스텁이 일치하도록 보장합니다.\n- **예시:** \"requiredScenarioState\": \"shows-only\"\n\n# 빈 시나리오 구성\n\n<div class=\"content-ad\"></div>\n\n새로운 엔드포인트/시나리오/shows/empty를 만들어서 \"shows-empty\" 상태를 트리거하는게 좋을 거예요.\n\n```js\n{\n  \"scenarioName\": \"biggboss-show\",\n  \"newScenarioState\": \"shows-empty\",\n  \"request\": {\n    \"method\": \"POST\",\n    \"urlPathPattern\" : \"/scenario/shows/empty\"\n  },\n  \"response\": {\n    \"status\": 200,\n    \"body\": \"Empty show scenario stated\"\n  }\n}\n```\n\n이 구성은 \"Bigg Boss\" 쇼를 관리하는 애플리케이션의 동작을 시뮬레이션하고 싶은 경우 유용합니다. /scenario/shows/empty 엔드포인트로 포스트를 보내면 시나리오의 상태가 \"shows-empty\"로 전환되어 후속 요청 처리에 영향을 줄 수 있습니다.\n\n이제 이 상태를 감지하고 /v1/biggboss/shows에 대한 응답을 구성해볼까요?\n\n<div class=\"content-ad\"></div>\n\n```js\n{\n  \"scenarioName\": \"biggboss-show\",\n  \"requiredScenarioState\": \"shows-empty\",\n  \"request\": {\n    \"method\": \"GET\",\n    \"url\" : \"/v1/biggboss/shows\"\n  },\n  \"response\": {\n    \"status\": 200,\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"bodyFileName\": \"biggboss-shows-api/empty_shows.json\"\n  }\n}\n```\n\nempty_shows.json\n\n```js\n{}\n```\n\n여기서 /v1/biggboss/shows API에 대해 shows-empty가 요구되는 경우 empty_shows.json 파일을 설정하고 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 실행 단계\n\n- Mock 서버 시작\n- “shows-empty” 시나리오를 트리거하기 위해 /scenario/shows/empty를 호출\n- 빈 JSON을 받기 위해 클라이언트 API /v1/biggboss/shows 호출\n\n# 리뷰어 전용 시나리오 구성\n\nshows-reviewers-only 시나리오를 트리거하기 위한 새로운 엔드포인트/scenario/shows/reviewers 생성\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  \"scenarioName\": \"biggboss-show\",\n  \"newScenarioState\": \"shows-reviewers-only\",\n  \"request\": {\n    \"method\": \"POST\",\n    \"urlPathPattern\" : \"/scenario/shows/reviewers\"\n  },\n  \"response\": {\n    \"status\": 200,\n    \"body\": \"Only reviewers scenario stated\"\n  }\n}\n```\n\nshows-reviewers-only시나리오와 일치하도록 스텁 구성\n\n```json\n{\n  \"scenarioName\": \"biggboss-show\",\n  \"requiredScenarioState\": \"shows-reviewers-only\",\n  \"request\": {\n    \"method\": \"GET\",\n    \"url\" : \"/v1/biggboss/shows\"\n  },\n  \"response\": {\n    \"status\": 200,\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"bodyFileName\": \"biggboss-shows-api/only_reviewers.json\"\n  }\n}\n```\n\nonly_reviewers.json\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  \"reviewers\": [\n    {\n      \"channel_name\": \"SBI Electroal Bond - 1 (Google Drive)\",\n      \"description\": \"Google 드라이브에서 더 나은 분석을 위해 엑셀 형식의 선거 채권 파트 1 다운로드\",\n      \"url\": \"https://docs.google.com/spreadsheets/d/17DJrN1orB93OTIYF6QMiFj1aZ9F2WZrA_D8zfjH56FE\",\n      \"image\": \"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"\n    },\n    {\n      \"channel_name\": \"SBI Electroal Bond - 2 (Google Drive)\",\n      \"description\": \"Google 드라이브에서 더 나은 분석을 위해 엑셀 형식의 선거 채권 파트 2 다운로드\",\n      \"url\": \"https://docs.google.com/spreadsheets/d/1GQBoGkyqNd3HOWDaJc2ueOmDQpmYob74\",\n      \"image\": \"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"\n    },\n    {\n      \"channel_name\": \"Bigg Boss Tamizh Review\",\n      \"description\": \"BiggBoss 리뷰, 비평가, 트롤 및 심층 분석\",\n      \"url\": \"https://www.youtube.com/@tamizhreview/videos\",\n      \"image\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/tamizhreview.png\"\n    },\n    {\n      \"channel_name\": \"Pi App Studio\",\n      \"description\": \"타밀어로 무료 iOS 및 안드로이드 개발 코스\",\n      \"url\": \"https://www.youtube.com/@piappstudio/videos\",\n      \"image\": \"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/piappstudio.png\"\n    }\n  ]\n}\n```\n\n## 실행 단계\n\n- 목 서버 시작\n- /scenario/shows/reviewers를 호출하여 “shows-reviewers-only” 시나리오를 트리거\n- 리뷰어만 내보내는 JSON 응답을 받기 위해 클라이언트 API /v1/biggboss/shows 호출\n\n동일한 방식으로 “N”개의 시나리오와 해당 클라이언트 스텁을 구성할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## 모든 API에 대한 전역 오류 처리\n\n500, 503 및 404와 같은 전역 오류는 다른 endpoint에 대한 시나리오와 유사한 방식으로 WireMock 시나리오를 사용하여 처리할 수 있습니다. 이러한 오류를 구성하는 방법은 다음과 같습니다:\n\n- 오류 시나리오 생성:\n\n- 500 내부 서버 오류: server-down-error-started\n- 503 서비스를 사용할 수 없음: server-maintenance-error-started\n- 404 찾을 수 없음: server-api-not-found-error-started\n\n<div class=\"content-ad\"></div>\n\n그러나 전역 오류에 대한 클라이언트 스텁을 구성하는 데 몇 가지 특별한 고려 사항이 있습니다:\n\n- 우선 순위: \"priority\"를 1로 설정하세요. 기본적으로 스텁 우선 순위는 5이지만, 1로 설정하면 요청이 발생할 때 이 스텁이 가장 높은 우선 순위를 갖게 됩니다. WireMock는 모든 요청을 가로채고 requiredScenarioState를 확인한 후 시스템 상태가 일치하는 경우 적절한 오류 응답을 반환합니다.\n- urlPathPattern: \"/(.*)\"을 사용하세요. 이 와일드카드 정규식은 모든 엔드포인트와 일치하여 오류 응답이 전역적으로 적용되도록 합니다.\n\n```js\n{\n  \"priority\": 1,\n  \"scenarioName\": \"general-server-error\",\n  \"requiredScenarioState\": \"server-down-error-started\",\n  \"request\": {\n    \"urlPathPattern\" : \"/(.*)\"\n  },\n  \"response\": {\n    \"status\": 500,\n    \"body\": \"Server is Down\"\n  }\n}\n```\n\n## 실행 단계\n\n<div class=\"content-ad\"></div>\n\n- 목 서버를 시작하세요.\n- /scenario/trigger-server-down-error를 호출하여 \"500 에러\" 시나리오를 시작하세요.\n- /v1/biggboss/shows 클라이언트 API를 호출하여 500 에러 응답을 받으세요. 실제로 시스템은 모든 API 호출에 대해 이 500 에러를 반환합니다.\n- 모든 시나리오를 재설정하려면 __admin/scenarios/reset을 호출하세요.\n\n# 결론\n\nWireMock를 사용하여 UI 개발을 하는 것은 게임 체인저입니다. 서버 가용성과 독립적으로 작업할 수 있어 개발 프로세스가 효율적이고 중단되지 않음을 보장합니다. 다양한 시나리오를 설정하고 엔드포인트를 확인함으로써 더 신뢰할 수 있고 견고한 응용프로그램을 구축할 수 있습니다.\n\nGitHub 저장소에서 자세한 내용과 템플릿을 확인하고 시작하는 데 도움이 되는 구독 부탁드립니다. 즐거운 코딩하세요!","ogImage":{"url":"/assets/img/2024-06-19-IDontNeedaServerforUIDevelopmentYesYouHeardItRight_0.png"},"coverImage":"/assets/img/2024-06-19-IDontNeedaServerforUIDevelopmentYesYouHeardItRight_0.png","tag":["Tech"],"readingTime":10},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<h1>WireMock을 사용하는 이유</h1>\n<p>WireMock은 개발 중에 서버 의존성을 제거하는 데 도움이 됩니다. 서버 응답을 시뮬레이션함으로써 실제 서버가 준비되거나 이용 가능할 때까지 기다리지 않고 UI를 개발하고 테스트할 수 있습니다. 이 접근 방식은 통합하기 전에 모든 가능한 엣지 케이스를 다룰 수 있도록 보장하여 응용 프로그램의 신뢰성과 견고성을 향상시킵니다.</p>\n<h1>WireMock 설정하기</h1>\n<p>로컬 머신에서 WireMock을 설정하려면 다음 단계를 따르세요:</p>\n<p>리포지토리를 복제하세요:</p>\n<p>git clone <a href=\"https://github.com/piappstudio/WireMock.git\" rel=\"nofollow\" target=\"_blank\">https://github.com/piappstudio/WireMock.git</a></p>\n<p>WireMock 실행: 터미널을 열고 로컬 서버를 설정하기 위해 다음 명령을 실행하세요:</p>\n<pre><code class=\"hljs language-js\">java -jar wiremock-standalone-<span class=\"hljs-number\">3.6</span><span class=\"hljs-number\">.0</span>.<span class=\"hljs-property\">jar</span> --port <span class=\"hljs-number\">9191</span> --verbose --<span class=\"hljs-variable language_\">global</span>-response-templating --jetty-header-buffer-size <span class=\"hljs-number\">16384</span>\n</code></pre>\n<p>이 명령은 WireMock 서버를 9191 포트에서 시작하며 자세한 로깅과 전역 응답 템플릿 사용이 활성화됩니다.</p>\n<h2>폴더 구조</h2>\n<ul>\n<li>__file\n<ul>\n<li>__files 폴더는 응답 일부로 제공될 수 있는 정적 파일을 저장하는 데 사용됩니다. 이러한 파일에는 JSON, XML 또는 기타 반환하려는 콘텐츠가 포함될 수 있습니다.</li>\n</ul>\n</li>\n<li>mappings\n<ul>\n<li>__files 폴더는 모의 요청에 대한 응답의 일부로 제공될 수 있는 정적 파일을 저장하는 데 사용됩니다. 이 파일에는 JSON, XML, HTML 또는 기타 반환하려는 콘텐츠가 포함될 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/img/2024-06-19-IDontNeedaServerforUIDevelopmentYesYouHeardItRight_1.png\" alt=\"이미지\"></p>\n<p>특정 JSON 응답을 반환하는 스텁을 만들고 싶다면 다음과 같이 작성할 수 있습니다. GET 요청이 /v1/biggoss/shows로 들어오는 경우를 가정하겠습니다.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"request\"</span>: {\n    <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"GET\"</span>,\n    <span class=\"hljs-string\">\"url\"</span> : <span class=\"hljs-string\">\"/v1/biggboss/shows\"</span>\n  },\n  <span class=\"hljs-string\">\"response\"</span>: {\n    <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-number\">200</span>,\n    <span class=\"hljs-string\">\"headers\"</span>: {\n      <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>\n    },\n    <span class=\"hljs-string\">\"bodyFileName\"</span>: <span class=\"hljs-string\">\"biggboss-shows-api/default.json\"</span>\n  }\n}\n</code></pre>\n<ul>\n<li>Request: 수신된 요청의 구조를 정의합니다.</li>\n<li>Response: 위 요청에 대한 응답의 구조를 정의합니다.</li>\n</ul>\n<h1>API 유효성 검사</h1>\n<p>/v1/biggboss/shows 엔드포인트를 유효성 검사하려면 다음 단계를 따라 주세요:</p>\n<ul>\n<li>Postman 열기: Postman에 WireMock-BiggBoss.postman_collection.json 파일을 가져오세요.</li>\n<li>요청 호출: “Bigg Boss Shows” 엔드포인트로 요청을 보내 응답을 받으세요.</li>\n</ul>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"shows\"</span>: [\n    {\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"BiggBoss Tamil Season 7\"</span>,\n      <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"bbtamil7\"</span>,\n      <span class=\"hljs-string\">\"host\"</span>: <span class=\"hljs-string\">\"Kamalahaasan\"</span>,\n      <span class=\"hljs-string\">\"start_date\"</span>: <span class=\"hljs-string\">\"2023-10-01\"</span>,\n      <span class=\"hljs-string\">\"end_date\"</span>: <span class=\"hljs-string\">\"2024-01-14\"</span>,\n      <span class=\"hljs-string\">\"winner\"</span>: <span class=\"hljs-string\">\"Archana\"</span>,\n      <span class=\"hljs-string\">\"runner\"</span>: <span class=\"hljs-string\">\"Manichandra\"</span>,\n      <span class=\"hljs-string\">\"cash\"</span>: <span class=\"hljs-string\">\"Poornima (16L)\"</span>,\n      <span class=\"hljs-string\">\"logo\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/logo.png\"</span>,\n      <span class=\"hljs-string\">\"more_info\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/json/shows/tamil_session_7.json\"</span>,\n      <span class=\"hljs-string\">\"trends\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/json/shows/tamil_session_7_trends.json\"</span>,\n      <span class=\"hljs-string\">\"votes\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/json/shows/tamil/season7/votes.json\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"reviewers\"</span>: [\n    {\n      <span class=\"hljs-string\">\"channel_name\"</span>: <span class=\"hljs-string\">\"SBI Electroal Bond - 1 (Google Drive)\"</span>,\n      <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Google Drive에서 더 나은 분석을 위해 엑셀 형식의 선거채권 파트-1 다운로드\"</span>,\n      <span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"https://docs.google.com/spreadsheets/d/17DJrN1orB93OTIYF6QMiFj1aZ9F2WZrA_D8zfjH56FE\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"channel_name\"</span>: <span class=\"hljs-string\">\"SBI Electroal Bond - 2 (Google Drive)\"</span>,\n      <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Google Drive에서 더 나은 분석을 위해 엑셀 형식의 선거채권 파트-2 다운로드\"</span>,\n      <span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"https://docs.google.com/spreadsheets/d/1GQBoGkyqNd3HOWDaJc2ueOmDQpmYob74\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"channel_name\"</span>: <span class=\"hljs-string\">\"Bigg Boss Tamizh Review\"</span>,\n      <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"BiggBoss 리뷰, 비평가, 트롤 및 심층 분석\"</span>,\n      <span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"https://www.youtube.com/@tamizhreview/videos\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/tamizhreview.png\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"channel_name\"</span>: <span class=\"hljs-string\">\"Pi App Studio\"</span>,\n      <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"타밀어로 무료 iOS 및 안드로이드 개발 강좌\"</span>,\n      <span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"https://www.youtube.com/@piappstudio/videos\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/piappstudio.png\"</span>\n    }\n  ]\n}\n</code></pre>\n<p>이제 시나리오 기반 구성으로 넘어가 봅시다.</p>\n<h1>WireMock의 기본 키워드 이해하기</h1>\n<h2>Url/UrlPathPattern</h2>\n<p>WireMock에서 처리할 URL을 정의합니다.</p>\n<h2>Priority</h2>\n<p>환경 설정의 우선순위를 설정합니다. 여러 개의 설정이 존재하는 경우, 우선 순위가 가장 높은 것(숫자가 가장 작은 것)이 선택됩니다. 기본값은 5이며, 여기서 1이 가장 높은 우선 순위이고 Integer.MAX_VALUE(Java)가 가장 낮은 우선 순위입니다.</p>\n<h2>시나리오명</h2>\n<ul>\n<li>정의: 동일 시나리오에 속하는 관련된 스텁 그룹을 나타내는 고유 식별자입니다.</li>\n<li>목적: 여러 요청과 응답을 연결하여 상태를 유지하는 동작을 가능케 합니다.</li>\n<li>예시: \"scenarioName\": \"biggboss-show\"</li>\n</ul>\n<h2>newScenarioState</h2>\n<ul>\n<li><strong>정의:</strong> 요청이 일치되고 응담이 제공된 후 시나리오가 전환하는 상태입니다.</li>\n<li><strong>목적:</strong> 시나리오가 다른 상태로 이동하여 순차적인 상태 기반 상호작용이 가능하도록 합니다.</li>\n<li><strong>예시:</strong> \"newScenarioState\": \"shows-only\"</li>\n</ul>\n<h2>요구 시나리오 상태</h2>\n<ul>\n<li><strong>정의:</strong> 특정 스텁이 요청과 일치하려면 시나리오가 있어야 하는 상태를 지정합니다.</li>\n<li><strong>목적:</strong> 시나리오가 특정 상태에 있을 때만 스텁이 일치하도록 보장합니다.</li>\n<li><strong>예시:</strong> \"requiredScenarioState\": \"shows-only\"</li>\n</ul>\n<h1>빈 시나리오 구성</h1>\n<p>새로운 엔드포인트/시나리오/shows/empty를 만들어서 \"shows-empty\" 상태를 트리거하는게 좋을 거예요.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scenarioName\"</span>: <span class=\"hljs-string\">\"biggboss-show\"</span>,\n  <span class=\"hljs-string\">\"newScenarioState\"</span>: <span class=\"hljs-string\">\"shows-empty\"</span>,\n  <span class=\"hljs-string\">\"request\"</span>: {\n    <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"POST\"</span>,\n    <span class=\"hljs-string\">\"urlPathPattern\"</span> : <span class=\"hljs-string\">\"/scenario/shows/empty\"</span>\n  },\n  <span class=\"hljs-string\">\"response\"</span>: {\n    <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-number\">200</span>,\n    <span class=\"hljs-string\">\"body\"</span>: <span class=\"hljs-string\">\"Empty show scenario stated\"</span>\n  }\n}\n</code></pre>\n<p>이 구성은 \"Bigg Boss\" 쇼를 관리하는 애플리케이션의 동작을 시뮬레이션하고 싶은 경우 유용합니다. /scenario/shows/empty 엔드포인트로 포스트를 보내면 시나리오의 상태가 \"shows-empty\"로 전환되어 후속 요청 처리에 영향을 줄 수 있습니다.</p>\n<p>이제 이 상태를 감지하고 /v1/biggboss/shows에 대한 응답을 구성해볼까요?</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"scenarioName\"</span>: <span class=\"hljs-string\">\"biggboss-show\"</span>,\n  <span class=\"hljs-string\">\"requiredScenarioState\"</span>: <span class=\"hljs-string\">\"shows-empty\"</span>,\n  <span class=\"hljs-string\">\"request\"</span>: {\n    <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"GET\"</span>,\n    <span class=\"hljs-string\">\"url\"</span> : <span class=\"hljs-string\">\"/v1/biggboss/shows\"</span>\n  },\n  <span class=\"hljs-string\">\"response\"</span>: {\n    <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-number\">200</span>,\n    <span class=\"hljs-string\">\"headers\"</span>: {\n      <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>\n    },\n    <span class=\"hljs-string\">\"bodyFileName\"</span>: <span class=\"hljs-string\">\"biggboss-shows-api/empty_shows.json\"</span>\n  }\n}\n</code></pre>\n<p>empty_shows.json</p>\n<pre><code class=\"hljs language-js\">{}\n</code></pre>\n<p>여기서 /v1/biggboss/shows API에 대해 shows-empty가 요구되는 경우 empty_shows.json 파일을 설정하고 있습니다.</p>\n<h2>실행 단계</h2>\n<ul>\n<li>Mock 서버 시작</li>\n<li>“shows-empty” 시나리오를 트리거하기 위해 /scenario/shows/empty를 호출</li>\n<li>빈 JSON을 받기 위해 클라이언트 API /v1/biggboss/shows 호출</li>\n</ul>\n<h1>리뷰어 전용 시나리오 구성</h1>\n<p>shows-reviewers-only 시나리오를 트리거하기 위한 새로운 엔드포인트/scenario/shows/reviewers 생성</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"scenarioName\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"biggboss-show\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"newScenarioState\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"shows-reviewers-only\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"request\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"method\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"POST\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"urlPathPattern\"</span> <span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"/scenario/shows/reviewers\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"response\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"status\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"body\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Only reviewers scenario stated\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>shows-reviewers-only시나리오와 일치하도록 스텁 구성</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"scenarioName\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"biggboss-show\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"requiredScenarioState\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"shows-reviewers-only\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"request\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"method\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"GET\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"url\"</span> <span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"/v1/biggboss/shows\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"response\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"status\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">200</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"headers\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"Content-Type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"application/json\"</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"bodyFileName\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"biggboss-shows-api/only_reviewers.json\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>only_reviewers.json</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"reviewers\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"channel_name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"SBI Electroal Bond - 1 (Google Drive)\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"description\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Google 드라이브에서 더 나은 분석을 위해 엑셀 형식의 선거 채권 파트 1 다운로드\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"url\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://docs.google.com/spreadsheets/d/17DJrN1orB93OTIYF6QMiFj1aZ9F2WZrA_D8zfjH56FE\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"image\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"channel_name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"SBI Electroal Bond - 2 (Google Drive)\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"description\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Google 드라이브에서 더 나은 분석을 위해 엑셀 형식의 선거 채권 파트 2 다운로드\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"url\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://docs.google.com/spreadsheets/d/1GQBoGkyqNd3HOWDaJc2ueOmDQpmYob74\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"image\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://i.ytimg.com/vi/z_OY38rDj9k/hq720.jpg\"</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"channel_name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Bigg Boss Tamizh Review\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"description\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"BiggBoss 리뷰, 비평가, 트롤 및 심층 분석\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"url\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://www.youtube.com/@tamizhreview/videos\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"image\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/tamizhreview.png\"</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-attr\">\"channel_name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Pi App Studio\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"description\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"타밀어로 무료 iOS 및 안드로이드 개발 코스\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"url\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://www.youtube.com/@piappstudio/videos\"</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-attr\">\"image\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"https://raw.githubusercontent.com/piappstudio/resources/main/biggboss/images/shows/tamil/session7/channels/piappstudio.png\"</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">]</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h2>실행 단계</h2>\n<ul>\n<li>목 서버 시작</li>\n<li>/scenario/shows/reviewers를 호출하여 “shows-reviewers-only” 시나리오를 트리거</li>\n<li>리뷰어만 내보내는 JSON 응답을 받기 위해 클라이언트 API /v1/biggboss/shows 호출</li>\n</ul>\n<p>동일한 방식으로 “N”개의 시나리오와 해당 클라이언트 스텁을 구성할 수 있습니다.</p>\n<h2>모든 API에 대한 전역 오류 처리</h2>\n<p>500, 503 및 404와 같은 전역 오류는 다른 endpoint에 대한 시나리오와 유사한 방식으로 WireMock 시나리오를 사용하여 처리할 수 있습니다. 이러한 오류를 구성하는 방법은 다음과 같습니다:</p>\n<ul>\n<li>\n<p>오류 시나리오 생성:</p>\n</li>\n<li>\n<p>500 내부 서버 오류: server-down-error-started</p>\n</li>\n<li>\n<p>503 서비스를 사용할 수 없음: server-maintenance-error-started</p>\n</li>\n<li>\n<p>404 찾을 수 없음: server-api-not-found-error-started</p>\n</li>\n</ul>\n<p>그러나 전역 오류에 대한 클라이언트 스텁을 구성하는 데 몇 가지 특별한 고려 사항이 있습니다:</p>\n<ul>\n<li>우선 순위: \"priority\"를 1로 설정하세요. 기본적으로 스텁 우선 순위는 5이지만, 1로 설정하면 요청이 발생할 때 이 스텁이 가장 높은 우선 순위를 갖게 됩니다. WireMock는 모든 요청을 가로채고 requiredScenarioState를 확인한 후 시스템 상태가 일치하는 경우 적절한 오류 응답을 반환합니다.</li>\n<li>urlPathPattern: \"/(.*)\"을 사용하세요. 이 와일드카드 정규식은 모든 엔드포인트와 일치하여 오류 응답이 전역적으로 적용되도록 합니다.</li>\n</ul>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"priority\"</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-string\">\"scenarioName\"</span>: <span class=\"hljs-string\">\"general-server-error\"</span>,\n  <span class=\"hljs-string\">\"requiredScenarioState\"</span>: <span class=\"hljs-string\">\"server-down-error-started\"</span>,\n  <span class=\"hljs-string\">\"request\"</span>: {\n    <span class=\"hljs-string\">\"urlPathPattern\"</span> : <span class=\"hljs-string\">\"/(.*)\"</span>\n  },\n  <span class=\"hljs-string\">\"response\"</span>: {\n    <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-number\">500</span>,\n    <span class=\"hljs-string\">\"body\"</span>: <span class=\"hljs-string\">\"Server is Down\"</span>\n  }\n}\n</code></pre>\n<h2>실행 단계</h2>\n<ul>\n<li>목 서버를 시작하세요.</li>\n<li>/scenario/trigger-server-down-error를 호출하여 \"500 에러\" 시나리오를 시작하세요.</li>\n<li>/v1/biggboss/shows 클라이언트 API를 호출하여 500 에러 응답을 받으세요. 실제로 시스템은 모든 API 호출에 대해 이 500 에러를 반환합니다.</li>\n<li>모든 시나리오를 재설정하려면 __admin/scenarios/reset을 호출하세요.</li>\n</ul>\n<h1>결론</h1>\n<p>WireMock를 사용하여 UI 개발을 하는 것은 게임 체인저입니다. 서버 가용성과 독립적으로 작업할 수 있어 개발 프로세스가 효율적이고 중단되지 않음을 보장합니다. 다양한 시나리오를 설정하고 엔드포인트를 확인함으로써 더 신뢰할 수 있고 견고한 응용프로그램을 구축할 수 있습니다.</p>\n<p>GitHub 저장소에서 자세한 내용과 템플릿을 확인하고 시작하는 데 도움이 되는 구독 부탁드립니다. 즐거운 코딩하세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}