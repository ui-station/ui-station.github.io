{"pageProps":{"post":{"title":"위치 기반의 위성 이미지의 시계열을 표시하는 대화형 지도 만들기","description":"","date":"2024-05-18 17:58","slug":"2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery","content":"\n\n\n![image](/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_0.png)\n\n# Table of Contents\n\n- 🌟 Introduction\n- 📌 Area of Interest (AOI)\n- 💾 Loading Sentinel-2 Imagery\n- ⏳ Extracting Time Series from Satellite Imagery\n- 🌍 Developing an Interactive Map with Time Series\n- 📄 Conclusion\n- 📚 References\n\n## 🌟 Introduction\n\n\n<div class=\"content-ad\"></div>\n\n한동안 사용자가 특정 위치를 클릭할 때 상호작용 맵에 시계열 데이터가 표시되는 쉽고 직관적인 방법을 찾고 있었습니다. 저는 folium 라이브러리를 탐색하고 위성 이미지에서 추출한 시계열 데이터베이스를 folium과 연결하는 방법을 알아냈습니다. 오늘은 내 방법을 공유하겠습니다.\n\n이 게시물에서는 두 가지 함수를 작성할 것입니다. 첫 번째 함수는 위성 데이터를 다운로드하지 않고 로드하고, 두 번째 함수는 데이터와 타임스탬프를 추출하여 데이터 형식의 시계열을 생성합니다. 그런 다음 AOIs(관심 지역)를 순환하여 두 함수를 실행하고 AOI에 대한 시계열 데이터를 추출할 것입니다. 마지막으로 생성된 시계열 데이터와 folium 라이브러리를 사용하여 이를 상호작용적인 지도에 지리적으로 표시할 것입니다.\n\n이 게시물을 마치면 어떤 변수나 매개변수에 대해 추출된 시계열 데이터를 상호작용적인 맵과 시각적으로 표시할 수 있게 될 것입니다. 예를 들어, 캘리포니아 호수 면적의 시계열을 추출하고 상호작용적 지도에 표시하겠습니다. 그러나 흥미를 갖거나 이러한 조언과 꿀팁을 찾고 있었다면 계속 읽어보세요!\n\n## 📌 관심 지역 (AOI)\n\n<div class=\"content-ad\"></div>\n\n소개에서 언급한 대로 상호작용적 지도에서 어떤 위치의 변수에 대한 시계열 데이터를 표시하려면 다음 단계를 따를 수 있습니다. 이 예시에서는 캘리포니아의 몇 개 호수의 물 픽셀을 계수하고 2024년에 촬영된 모든 Sentinel-2 이미지를 사용하여 표면적을 계산할 것입니다. QGIS에서 그 호수 주변에 폴리곤을 그리고 그것들을 shapefile로 저장했습니다. 관심 영역 (AOI)에 대한 shapefile을 만드는 방법을 배우고 싶다면, Medium의 첫 번째 스토리에서 \"🛠️ QGIS에서 Shapefile 생성\"이라는 섹션을 참조해주세요.\n\n다음은 QGIS에서 호수 주변에 그린 폴리곤의 스냅샷입니다:\n\n![lakes](/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_1.png)\n\n## 💾 Sentinel-2 영상 불러오기\n\n<div class=\"content-ad\"></div>\n\n이 섹션의 목표는 다운로드 없이 아카이브된 위성 이미지를 메모리에 로드하는 것입니다. 특정 지역에 대한 오랜 기간에 걸친 위성 이미지 다운로드는 시간이 많이 소요되며 계산 비용이 많이 들며 비효율적일 수 있습니다. 특히 전체 장면에서 작은 영역의 변화를 탐색하려면 문제가 될 수 있습니다.\n\n이러한 문제를 극복하기 위해 12줄의 코드만 사용하여 다운로드 없이 위성 이미지를 로드하는 방법을 보여주는 포스트를 작성했습니다. 해당 포스트에서 확인할 수 있습니다.\n\n이 섹션에서는 해당 포스트에서 제시된 템플릿을 사용하여 함수를 작성할 것입니다. 이 함수를 사용하면 특정 기간에 대한 AOI 위성 이미지를 쉽게 로드할 수 있습니다. 해당 기간이 길든 짧든 상관없이:\n\n```python\nfrom pystac_client import Client\nfrom odc.stac import load\n\ndef search_satellite_images(collection=\"sentinel-2-l2a\",\n                            bbox=[-120.15,38.93,-119.88,39.25],\n                            date=\"2023-01-01/2023-03-12\",\n                            cloud_cover=(0, 10)):\n    \"\"\"\n    Collection, 범위, 날짜 범위 및 구름 덮개를 기반으로 위성 이미지를 검색합니다.\n\n    :param collection: Collection 이름 (기본값: \"sentinel-2-l2a\").\n    :param bbox: 경계 상자 [min_lon, min_lat, max_lon, max_lat] (기본값: Lake Tahoe 지역).\n    :param date: 날짜 범위 \"YYYY-MM-DD/YYYY-MM-DD\" (기본값: \"2023-01-01/2023-12-30\").\n    :param cloud_cover: 구름 덮개 범위를 나타내는 Tuple (최소, 최대) (기본값: (0, 10)).\n    :return: 검색 기준에 따라 로드된 데이터.\n    \"\"\"\n    # 검색 클라이언트 정의\n    client=Client.open(\"https://earth-search.aws.element84.com/v1\")\n    search = client.search(collections=[collection],\n                            bbox=bbox,\n                            datetime=date,\n                            query=[f\"eo:cloud_cover<{cloud_cover[1]}\", f\"eo:cloud_cover>{cloud_cover[0]}\"])\n\n    # 일치하는 항목 수 출력\n    print(f\"발견된 이미지 수: {search.matched()}\")\n\n    data = load(search.items(), bbox=bbox, groupby=\"solar_day\", chunks={})\n\n    print(f\"데이터에서의 날짜 수: {len(data.time)}\")\n\n    return data\n```\n\n<div class=\"content-ad\"></div>\n\n이 함수를 사용하면 위성 이미지 검색을 위한 매개변수를 지정할 수 있어서 다양한 관심 영역 및 시간대에 유연하고 쉽게 사용할 수 있습니다. 수집, 경계 상자, 날짜 범위 및 구름 양 등과 같은 기준에 따라 위성 이미지를 검색합니다. 이는 이미지를 찾기 위해 Earth Search API를 사용하고 일치하는 수를 출력하며 큐브 형식으로 클립 된 이미지를 반환합니다.\n\n## ⏳ 위성 영상에서 시계열 추출\n\n이제 AOI를 위해 클립 된 이미지를로드하는 함수가 있으므로 찾고있는 정보를 추출하는 두 번째 함수를 정의해야합니다. 이미지와 함께 필요한 정보를 추출하고 맵에 표시하는 다음 단계에서 사용할 수 있도록 DataFrame에 넣어 시계열 데이터베이스로 고려할 수 있습니다. 다시 한 번 필요한 데이터를 추출 할 수 있지만, 전체 캘리포니아 호수의 표면적을 볼 수있는 것이 흥미로울 것으로 생각되어 2024 년에 Sentinel-2로 촬영 된 모든 이미지에서 최근 이미지를 포함하여 주요 캘리포니아 호수의 표면적을 볼 수 있습니다.\n\n이를 위해 Sentinel-2 이미지의 씬 분류 레이어에 있는 물 픽셀로 분류 된 픽셀을 추출 할 수 있습니다. 다시 말해, 각 씬에서 물 픽셀 수를 세어야합니다. 픽셀 해상도가 10m x 10m임을 감안하면 수를 100 제곱 미터 (10m x 10m)로 곱하면 각 호수의 표면적이 나올 것입니다. 그러나 여기서는 위성에 의해 촬영 된 이미지가 각 씬에서 전체 호수를 커버하도록해야합니다. 이를 설명하기 위해 1 월 7 일과 1 월 4 일에 촬영 된 이 두 장의 이미지 중 하나에 캡처된 호수 중 하나를 살펴 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n\n<div class=\"content-ad\"></div>\n\n```python\nimport pandas as pd\nimport numpy as np\n\ndef count_water_pixels(data,lake_id):\n    \"\"\"\n    각 시점의 Sentinel-2 SCL 데이터에서 물 픽셀 수를 계산합니다.\n\n    :param data: Sentinel-2 SCL 데이터가 포함된 xarray Dataset입니다.\n    :return: 날짜, 물 횟수 및 눈 횟수가 포함된 DataFrame입니다.\n    \"\"\"\n\n    water_counts = []\n    date_labels = []\n    water_area = []\n    coverage_ratio = []\n\n    # 시간 단계 수를 확인합니다.\n    numb_days = len(data.time)\n\n    # 각 시간 단계를 반복합니다.\n    for t in range(numb_days):\n        scl_image = data[[\"scl\"]].isel(time=t).to_array()\n        dt = pd.to_datetime(scl_image.time.values)\n        year = dt.year\n        month = dt.month\n        day = dt.day\n\n        date_string = f\"{year}-{month:02d}-{day:02d}\"\n        print(date_string)\n\n        # 물에 해당하는 픽셀 수를 계산합니다.\n        count_water = np.count_nonzero(scl_image == 6)  # 물\n\n        surface_area = count_water * 10 * 10 / (10 ** 6)\n\n        count_pixels = np.count_nonzero((scl_image == 1) | (scl_image == 2) | (scl_image == 3) | (scl_image == 4) | (\n                    scl_image == 5) | (scl_image == 6) | (scl_image == 7) | (scl_image == 8) | (scl_image == 9) | (\n                                               scl_image == 10) | (scl_image == 11))\n        total_pixels = data.dims['y'] * data.dims['x']\n\n        coverage = count_pixels * 10 * 10 / 1e6\n        lake_area = total_pixels * 10 * 10 / 1e6\n\n        ratio = coverage / lake_area\n\n        print(coverage)\n        print(lake_area)\n        print(ratio)\n\n        if ratio < 0.8:\n            continue\n\n        # 추가\n        water_counts.append(count_water)\n        date_labels.append(date_string)\n        water_area.append(surface_area)\n        coverage_ratio.append(ratio)\n\n    # 날짜 레이블을 pandas datetime 형식으로 변환합니다.\n    datetime_index = pd.to_datetime(date_labels)\n\n    # DataFrame을 구성하기 위한 딕셔너리 생성\n    data_dict = {\n        'Date': datetime_index,\n        'ID': lake_id,\n        'Water Counts': water_counts,\n        'Pixel Counts': count_pixels,\n        'Total Pixels': total_pixels,\n        'Coverage Ratio': coverage_ratio,\n        'Water Surface Area': water_area\n    }\n\n    # DataFrame 생성\n    df = pd.DataFrame(data_dict)\n\n    return df\n```\n\n이 함수는 데이터셋의 각 시간 단계를 반복하여 물 픽셀 수를 계산하고 표면적을 계산하며 커버리지 비율을 계산합니다. 커버리지 비율이 80% 미만이면 시간 단계가 건너뜁니다. 그런 다음 횟수, 날짜, 표면적 및 커버리지 비율을 리스트에 추가하고 해당 값과 물 ID 및 총 픽셀 수가 포함된 DataFrame을 반환합니다.\n\n커버리지 문제와 해결하는 속임수에 대해 자세히 알아보려면 이 포스트의 섹션 (📈 통계 파일에서 대염해 지역의 시계열)을 참조해주세요:\n\n## 🌍 시계열과 함께 상호작용하는 지도 개발하기\n\n<div class=\"content-ad\"></div>\n\n이 섹션에서는 세 개의 스크립트를 작성할 것입니다. 첫 번째 스크립트는 다각형(AOI)의 바운딩 박스와 중심 좌표를 추출하는 함수입니다. 첫 번째 함수(search_satellite_images)를 실행하려면 바운딩 박스가 필요하며, 맵에 호수를 표시하는 데 중심 좌표가 필요합니다. 다음 코드로 이 작업을 수행할 수 있습니다:\n\n```js\nimport geopandas as gpd\nimport pandas as pd\n\ndef get_centroids_and_bboxes(shapefile_path):\n    \"\"\"\n    shapefile을 처리하여 각 다각형의 ID, 중심점, 바운딩 박스(bbox)를 포함하는 DataFrame을 반환합니다.\n    :param shapefile_path: shapefile의 경로.\n    :return: 각 다각형의 ID, 중심점, 및 bbox가 있는 pandas DataFrame.\n    \"\"\"\n\n    # shapefile 불러오기\n    gdf = gpd.read_file(shapefile_path)\n\n    # EPSG:4326으로 재투영\n    gdf_proj = gdf.to_crs(\"EPSG:4326\")\n\n    centroids = []\n    bboxes = []\n\n    # 각 다각형을 처리하여 중심점과 bbox 얻기\n    for index, row in gdf_proj.iterrows():\n        # 중심점\n        centroid_lat = row.geometry.centroid.y\n        centroid_lon = row.geometry.centroid.x\n        centroids.append((centroid_lat, centroid_lon))\n\n        # 바운딩 박스\n        minx, miny, maxx, maxy = row.geometry.bounds\n        bbox = (minx, miny, maxx, maxy)\n        bboxes.append(bbox)\n\n    # DataFrame 생성\n    df = pd.DataFrame({\n        'ID': gdf_proj.index,\n        'Centroid_Lat': [lat for lat, lon in centroids],\n        'Centroid_Lon': [lon for lat, lon in centroids],\n        'BBox_Min_Lon': [bbox[0] for bbox in bboxes],\n        'BBox_Min_Lat': [bbox[1] for bbox in bboxes],\n        'BBox_Max_Lon': [bbox[2] for bbox in bboxes],\n        'BBox_Max_Lat': [bbox[3] for bbox in bboxes]\n    })\n\n    return df\n\nshapefile_path = \"lakes_boundry.shp\"\nlakes_df = get_centroids_and_bboxes(shapefile_path)\nprint(lakes_df)\n```\n\n위 단계를 따르고 코드를 성공적으로 실행하면, 다음 형식의 다각형에 대한 유사한 DataFrame이 표시될 것입니다:\n\n<img src=\"/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_4.png\" />\n\n<div class=\"content-ad\"></div>\n\n다음 스크립트는 2024년 센티넬-2에 의해 촬영된 모든 이미지를 호수 위에서 루핑하고 두 번째 함수를 실행하여 커버리지 비율이 80%보다 높은 경우 각 이미지에서 표면적을 계산하며 각 호수의 표면적을 시계열로 보여주는 DataFrame을 보고하는 것을 포함합니다:\n\n```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom datetime import datetime\nimport numpy as np\n\nall_water_pixels_dfs = [] \n\nfor lake_id in lakes_df.ID:\n    print(lake_id)\n    lake_df = lakes_df[lakes_df['ID'] == lake_id]\n\n    if not lake_df.empty:\n        bbox = [lake_df.iloc[0].BBox_Min_Lon, lake_df.iloc[0].BBox_Min_Lat,\n                lake_df.iloc[0].BBox_Max_Lon, lake_df.iloc[0].BBox_Max_Lat]\n\n        data = search_satellite_images(collection=\"sentinel-2-l2a\",\n                                       date=\"2024-01-01/2024-05-14\",\n                                       cloud_cover=(0, 5),\n                                       bbox=bbox)\n        # Pass the lake_id\n        water_pixels_df = count_water_pixels(data, lake_id)\n\n        # Append\n        all_water_pixels_dfs.append(water_pixels_df)\n\n# Concatenate all DataFrames into a single DataFrame\nfinal_df = pd.concat(all_water_pixels_dfs, ignore_index=True)\n```\n\n최종 DataFrame은 이미지 날짜, 물 픽셀 수, 총 픽셀 수, 커버리지 비율 및 표면적을 요약하여 다음과 같이 보여집니다:\n\n![이미지](/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_5.png)\n\n\n<div class=\"content-ad\"></div>\n\n거의 다 왔어요!\n\n지도 상에서 시계열을 보기 위해 마지막 한 단계가 남았습니다. 이제 표면적의 시계열 데이터가 있으므로 Folium 라이브러리를 사용하여 두 가지를 표시할 수 있습니다: (1) 지도상의 호수 중심을 지점으로 표시하고 (2) 각 호수를 클릭하면 팝업으로 표면적의 시계열을 보여주는 그래프를 표시합니다. 다음 코드로 이 작업을 수행할 수 있습니다:\n\n```js\nimport folium\nimport plotly.express as px\nimport os\n\n# 시계열 플롯을 그려 HTML로 저장하는 함수\ndef plot_timeseries_for_spot(spot_id, ts_df):\n    df_spot = ts_df[ts_df['ID'] == spot_id]\n    print(df_spot)\n    fig = px.line(df_spot, x='Date', y='Water Surface Area', title=f'Time Series for Lake {spot_id}')\n\n     # X 및 Y 축 레이블 추가\n    fig.update_layout(\n        xaxis_title=\"Date\",\n        yaxis_title=\"Water Surface Area (sq km)\"\n    )\n\n    filepath = f'tmp_{int(spot_id)}.html'\n    fig.write_html(filepath, include_plotlyjs='cdn')\n    return filepath\n\n# 지도 생성\nm = folium.Map(location=[35.5, -119.5], zoom_start=7)\n\n# Plotly 시계열 팝업이 있는 마커 추가\nfor index, row in lakes_df.iterrows():\n    html_path = plot_timeseries_for_spot(row['ID'], final_df)\n    iframe = folium.IFrame(html=open(html_path).read(), width=500, height=300)\n    popup = folium.Popup(iframe, max_width=2650)\n    folium.Marker([row['Centroid_Lat'], row['Centroid_Lon']], popup=popup).add_to(m)\n\nm.save('map_with_timeseries.html')\n\n# 임시 HTML 파일 정리\nfor spot_id in lakes_df['ID']:\n    os.remove(f'tmp_{spot_id}.html')\n```\n\n이 스크립트에서는 함수가 각 호수의 시계열 데이터를 필터링하고, Plotly를 사용하여 라인 플롯을 생성하고, 플롯을 HTML 파일로 저장합니다. 다음으로 Folium을 사용하여 지도를 초기화합니다. 그런 다음 호수 DataFrame을 반복하면서, 각 호수의 중심 좌표에 마커를 추가하고, 각 마커에 팝업을 연결하여 시계열 플롯을 표시합니다. 최종 지도는 HTML 파일로 저장됩니다. 마지막으로, Plotly 플롯에 생성된 임시 HTML 파일을 삭제하여 정리합니다.\n\n<div class=\"content-ad\"></div>\n\n완료되었습니다!\n\n콘텐츠 폴더에 생성된 HTML 파일을 열면 지도에 표시된 각 호수의 중심 좌표를 볼 수 있습니다.\n\n![지도](/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_6.png)\n\n각 호수를 클릭하여 시계열이 표시되는지 확인해 보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n이 모든 노력 끝에 이렇게 실용적인 지도가 만들어졌네요, 맞나요? :D\n\n## 📄 결론\n\n<div class=\"content-ad\"></div>\n\n거의 매달 새로운 패키지와 라이브러리들이 나와서 데이터를 추출하고 분석하며 표시하고 시각화하는 법을 실용적으로 제공합니다. 그러나 이 분야에서 아직 남아 있는 두 가지 과제가 있습니다. 첫 번째는 데이터를 정확하게 분석하기 위해서는 테라바이트 또는 페타바이트에서 추출된 데이터가 정확한지 확인하기 위해 충분한 경험이 필요합니다. 두 번째는 이러한 라이브러리들을 연결하여 의미 있는 것을 만들어내는 아키텍처를 만드는 것입니다.\n\n이미지 처리에서는 처리된 데이터에서의 간단한 실수가 중대한 오류로 이어질 수 있는 점을 강조해보았습니다. 시각화 부분에서는 Folium, Plotly, 그리고 새로운 이미지를 추출하기 위한 API를 연결하여, 리모트 센싱 관측을 사용하여 다양한 현상을 모니터링하는 유용한 도구를 만들 수 있음을 보여주었습니다. 이 글을 읽는 데 즐거움을 느끼시기를 바라며, 궁금한 사항이 있으시면 언제든지 연락 주세요.\n\n## 📚 참고 자료\n\nhttps://github.com/stac-utils/pystac-client/blob/main/docs/quickstart.rst\n\n<div class=\"content-ad\"></div>\n\nhttps://www.element84.com/earth-search/examples/\n\nSentinel 데이터용 Copernicus Sentinel 데이터 [2024]\n\nCopernicus 서비스 정보용 Copernicus 서비스 정보 [2024]\n\n📱 더 많은 흥미로운 콘텐츠를 제공하는 다른 플랫폼에서 저와 소통하세요! LinkedIn, ResearchGate, Github 및 Twitter.\n\n<div class=\"content-ad\"></div>\n\n이 링크를 통해 확인할 수 있는 관련 게시물이 있습니다:","ogImage":{"url":"/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_0.png"},"coverImage":"/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_0.png","tag":["Tech"],"readingTime":13},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<p><img src=\"/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_0.png\" alt=\"image\"></p>\n<h1>Table of Contents</h1>\n<ul>\n<li>🌟 Introduction</li>\n<li>📌 Area of Interest (AOI)</li>\n<li>💾 Loading Sentinel-2 Imagery</li>\n<li>⏳ Extracting Time Series from Satellite Imagery</li>\n<li>🌍 Developing an Interactive Map with Time Series</li>\n<li>📄 Conclusion</li>\n<li>📚 References</li>\n</ul>\n<h2>🌟 Introduction</h2>\n<p>한동안 사용자가 특정 위치를 클릭할 때 상호작용 맵에 시계열 데이터가 표시되는 쉽고 직관적인 방법을 찾고 있었습니다. 저는 folium 라이브러리를 탐색하고 위성 이미지에서 추출한 시계열 데이터베이스를 folium과 연결하는 방법을 알아냈습니다. 오늘은 내 방법을 공유하겠습니다.</p>\n<p>이 게시물에서는 두 가지 함수를 작성할 것입니다. 첫 번째 함수는 위성 데이터를 다운로드하지 않고 로드하고, 두 번째 함수는 데이터와 타임스탬프를 추출하여 데이터 형식의 시계열을 생성합니다. 그런 다음 AOIs(관심 지역)를 순환하여 두 함수를 실행하고 AOI에 대한 시계열 데이터를 추출할 것입니다. 마지막으로 생성된 시계열 데이터와 folium 라이브러리를 사용하여 이를 상호작용적인 지도에 지리적으로 표시할 것입니다.</p>\n<p>이 게시물을 마치면 어떤 변수나 매개변수에 대해 추출된 시계열 데이터를 상호작용적인 맵과 시각적으로 표시할 수 있게 될 것입니다. 예를 들어, 캘리포니아 호수 면적의 시계열을 추출하고 상호작용적 지도에 표시하겠습니다. 그러나 흥미를 갖거나 이러한 조언과 꿀팁을 찾고 있었다면 계속 읽어보세요!</p>\n<h2>📌 관심 지역 (AOI)</h2>\n<p>소개에서 언급한 대로 상호작용적 지도에서 어떤 위치의 변수에 대한 시계열 데이터를 표시하려면 다음 단계를 따를 수 있습니다. 이 예시에서는 캘리포니아의 몇 개 호수의 물 픽셀을 계수하고 2024년에 촬영된 모든 Sentinel-2 이미지를 사용하여 표면적을 계산할 것입니다. QGIS에서 그 호수 주변에 폴리곤을 그리고 그것들을 shapefile로 저장했습니다. 관심 영역 (AOI)에 대한 shapefile을 만드는 방법을 배우고 싶다면, Medium의 첫 번째 스토리에서 \"🛠️ QGIS에서 Shapefile 생성\"이라는 섹션을 참조해주세요.</p>\n<p>다음은 QGIS에서 호수 주변에 그린 폴리곤의 스냅샷입니다:</p>\n<p><img src=\"/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_1.png\" alt=\"lakes\"></p>\n<h2>💾 Sentinel-2 영상 불러오기</h2>\n<p>이 섹션의 목표는 다운로드 없이 아카이브된 위성 이미지를 메모리에 로드하는 것입니다. 특정 지역에 대한 오랜 기간에 걸친 위성 이미지 다운로드는 시간이 많이 소요되며 계산 비용이 많이 들며 비효율적일 수 있습니다. 특히 전체 장면에서 작은 영역의 변화를 탐색하려면 문제가 될 수 있습니다.</p>\n<p>이러한 문제를 극복하기 위해 12줄의 코드만 사용하여 다운로드 없이 위성 이미지를 로드하는 방법을 보여주는 포스트를 작성했습니다. 해당 포스트에서 확인할 수 있습니다.</p>\n<p>이 섹션에서는 해당 포스트에서 제시된 템플릿을 사용하여 함수를 작성할 것입니다. 이 함수를 사용하면 특정 기간에 대한 AOI 위성 이미지를 쉽게 로드할 수 있습니다. 해당 기간이 길든 짧든 상관없이:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> pystac_client <span class=\"hljs-keyword\">import</span> Client\n<span class=\"hljs-keyword\">from</span> odc.stac <span class=\"hljs-keyword\">import</span> load\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search_satellite_images</span>(<span class=\"hljs-params\">collection=<span class=\"hljs-string\">\"sentinel-2-l2a\"</span>,\n                            bbox=[-<span class=\"hljs-number\">120.15</span>,<span class=\"hljs-number\">38.93</span>,-<span class=\"hljs-number\">119.88</span>,<span class=\"hljs-number\">39.25</span>],\n                            date=<span class=\"hljs-string\">\"2023-01-01/2023-03-12\"</span>,\n                            cloud_cover=(<span class=\"hljs-params\"><span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span></span>)</span>):\n    <span class=\"hljs-string\">\"\"\"\n    Collection, 범위, 날짜 범위 및 구름 덮개를 기반으로 위성 이미지를 검색합니다.\n\n    :param collection: Collection 이름 (기본값: \"sentinel-2-l2a\").\n    :param bbox: 경계 상자 [min_lon, min_lat, max_lon, max_lat] (기본값: Lake Tahoe 지역).\n    :param date: 날짜 범위 \"YYYY-MM-DD/YYYY-MM-DD\" (기본값: \"2023-01-01/2023-12-30\").\n    :param cloud_cover: 구름 덮개 범위를 나타내는 Tuple (최소, 최대) (기본값: (0, 10)).\n    :return: 검색 기준에 따라 로드된 데이터.\n    \"\"\"</span>\n    <span class=\"hljs-comment\"># 검색 클라이언트 정의</span>\n    client=Client.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"https://earth-search.aws.element84.com/v1\"</span>)\n    search = client.search(collections=[collection],\n                            bbox=bbox,\n                            datetime=date,\n                            query=[<span class=\"hljs-string\">f\"eo:cloud_cover&#x3C;<span class=\"hljs-subst\">{cloud_cover[<span class=\"hljs-number\">1</span>]}</span>\"</span>, <span class=\"hljs-string\">f\"eo:cloud_cover><span class=\"hljs-subst\">{cloud_cover[<span class=\"hljs-number\">0</span>]}</span>\"</span>])\n\n    <span class=\"hljs-comment\"># 일치하는 항목 수 출력</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"발견된 이미지 수: <span class=\"hljs-subst\">{search.matched()}</span>\"</span>)\n\n    data = load(search.items(), bbox=bbox, groupby=<span class=\"hljs-string\">\"solar_day\"</span>, chunks={})\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f\"데이터에서의 날짜 수: <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(data.time)}</span>\"</span>)\n\n    <span class=\"hljs-keyword\">return</span> data\n</code></pre>\n<p>이 함수를 사용하면 위성 이미지 검색을 위한 매개변수를 지정할 수 있어서 다양한 관심 영역 및 시간대에 유연하고 쉽게 사용할 수 있습니다. 수집, 경계 상자, 날짜 범위 및 구름 양 등과 같은 기준에 따라 위성 이미지를 검색합니다. 이는 이미지를 찾기 위해 Earth Search API를 사용하고 일치하는 수를 출력하며 큐브 형식으로 클립 된 이미지를 반환합니다.</p>\n<h2>⏳ 위성 영상에서 시계열 추출</h2>\n<p>이제 AOI를 위해 클립 된 이미지를로드하는 함수가 있으므로 찾고있는 정보를 추출하는 두 번째 함수를 정의해야합니다. 이미지와 함께 필요한 정보를 추출하고 맵에 표시하는 다음 단계에서 사용할 수 있도록 DataFrame에 넣어 시계열 데이터베이스로 고려할 수 있습니다. 다시 한 번 필요한 데이터를 추출 할 수 있지만, 전체 캘리포니아 호수의 표면적을 볼 수있는 것이 흥미로울 것으로 생각되어 2024 년에 Sentinel-2로 촬영 된 모든 이미지에서 최근 이미지를 포함하여 주요 캘리포니아 호수의 표면적을 볼 수 있습니다.</p>\n<p>이를 위해 Sentinel-2 이미지의 씬 분류 레이어에 있는 물 픽셀로 분류 된 픽셀을 추출 할 수 있습니다. 다시 말해, 각 씬에서 물 픽셀 수를 세어야합니다. 픽셀 해상도가 10m x 10m임을 감안하면 수를 100 제곱 미터 (10m x 10m)로 곱하면 각 호수의 표면적이 나올 것입니다. 그러나 여기서는 위성에 의해 촬영 된 이미지가 각 씬에서 전체 호수를 커버하도록해야합니다. 이를 설명하기 위해 1 월 7 일과 1 월 4 일에 촬영 된 이 두 장의 이미지 중 하나에 캡처된 호수 중 하나를 살펴 보겠습니다.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">count_water_pixels</span>(<span class=\"hljs-params\">data,lake_id</span>):\n    <span class=\"hljs-string\">\"\"\"\n    각 시점의 Sentinel-2 SCL 데이터에서 물 픽셀 수를 계산합니다.\n\n    :param data: Sentinel-2 SCL 데이터가 포함된 xarray Dataset입니다.\n    :return: 날짜, 물 횟수 및 눈 횟수가 포함된 DataFrame입니다.\n    \"\"\"</span>\n\n    water_counts = []\n    date_labels = []\n    water_area = []\n    coverage_ratio = []\n\n    <span class=\"hljs-comment\"># 시간 단계 수를 확인합니다.</span>\n    numb_days = <span class=\"hljs-built_in\">len</span>(data.time)\n\n    <span class=\"hljs-comment\"># 각 시간 단계를 반복합니다.</span>\n    <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(numb_days):\n        scl_image = data[[<span class=\"hljs-string\">\"scl\"</span>]].isel(time=t).to_array()\n        dt = pd.to_datetime(scl_image.time.values)\n        year = dt.year\n        month = dt.month\n        day = dt.day\n\n        date_string = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{year}</span>-<span class=\"hljs-subst\">{month:02d}</span>-<span class=\"hljs-subst\">{day:02d}</span>\"</span>\n        <span class=\"hljs-built_in\">print</span>(date_string)\n\n        <span class=\"hljs-comment\"># 물에 해당하는 픽셀 수를 계산합니다.</span>\n        count_water = np.count_nonzero(scl_image == <span class=\"hljs-number\">6</span>)  <span class=\"hljs-comment\"># 물</span>\n\n        surface_area = count_water * <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">10</span> / (<span class=\"hljs-number\">10</span> ** <span class=\"hljs-number\">6</span>)\n\n        count_pixels = np.count_nonzero((scl_image == <span class=\"hljs-number\">1</span>) | (scl_image == <span class=\"hljs-number\">2</span>) | (scl_image == <span class=\"hljs-number\">3</span>) | (scl_image == <span class=\"hljs-number\">4</span>) | (\n                    scl_image == <span class=\"hljs-number\">5</span>) | (scl_image == <span class=\"hljs-number\">6</span>) | (scl_image == <span class=\"hljs-number\">7</span>) | (scl_image == <span class=\"hljs-number\">8</span>) | (scl_image == <span class=\"hljs-number\">9</span>) | (\n                                               scl_image == <span class=\"hljs-number\">10</span>) | (scl_image == <span class=\"hljs-number\">11</span>))\n        total_pixels = data.dims[<span class=\"hljs-string\">'y'</span>] * data.dims[<span class=\"hljs-string\">'x'</span>]\n\n        coverage = count_pixels * <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">1e6</span>\n        lake_area = total_pixels * <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">1e6</span>\n\n        ratio = coverage / lake_area\n\n        <span class=\"hljs-built_in\">print</span>(coverage)\n        <span class=\"hljs-built_in\">print</span>(lake_area)\n        <span class=\"hljs-built_in\">print</span>(ratio)\n\n        <span class=\"hljs-keyword\">if</span> ratio &#x3C; <span class=\"hljs-number\">0.8</span>:\n            <span class=\"hljs-keyword\">continue</span>\n\n        <span class=\"hljs-comment\"># 추가</span>\n        water_counts.append(count_water)\n        date_labels.append(date_string)\n        water_area.append(surface_area)\n        coverage_ratio.append(ratio)\n\n    <span class=\"hljs-comment\"># 날짜 레이블을 pandas datetime 형식으로 변환합니다.</span>\n    datetime_index = pd.to_datetime(date_labels)\n\n    <span class=\"hljs-comment\"># DataFrame을 구성하기 위한 딕셔너리 생성</span>\n    data_dict = {\n        <span class=\"hljs-string\">'Date'</span>: datetime_index,\n        <span class=\"hljs-string\">'ID'</span>: lake_id,\n        <span class=\"hljs-string\">'Water Counts'</span>: water_counts,\n        <span class=\"hljs-string\">'Pixel Counts'</span>: count_pixels,\n        <span class=\"hljs-string\">'Total Pixels'</span>: total_pixels,\n        <span class=\"hljs-string\">'Coverage Ratio'</span>: coverage_ratio,\n        <span class=\"hljs-string\">'Water Surface Area'</span>: water_area\n    }\n\n    <span class=\"hljs-comment\"># DataFrame 생성</span>\n    df = pd.DataFrame(data_dict)\n\n    <span class=\"hljs-keyword\">return</span> df\n</code></pre>\n<p>이 함수는 데이터셋의 각 시간 단계를 반복하여 물 픽셀 수를 계산하고 표면적을 계산하며 커버리지 비율을 계산합니다. 커버리지 비율이 80% 미만이면 시간 단계가 건너뜁니다. 그런 다음 횟수, 날짜, 표면적 및 커버리지 비율을 리스트에 추가하고 해당 값과 물 ID 및 총 픽셀 수가 포함된 DataFrame을 반환합니다.</p>\n<p>커버리지 문제와 해결하는 속임수에 대해 자세히 알아보려면 이 포스트의 섹션 (📈 통계 파일에서 대염해 지역의 시계열)을 참조해주세요:</p>\n<h2>🌍 시계열과 함께 상호작용하는 지도 개발하기</h2>\n<p>이 섹션에서는 세 개의 스크립트를 작성할 것입니다. 첫 번째 스크립트는 다각형(AOI)의 바운딩 박스와 중심 좌표를 추출하는 함수입니다. 첫 번째 함수(search_satellite_images)를 실행하려면 바운딩 박스가 필요하며, 맵에 호수를 표시하는 데 중심 좌표가 필요합니다. 다음 코드로 이 작업을 수행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> geopandas <span class=\"hljs-keyword\">as</span> gpd\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n\ndef <span class=\"hljs-title function_\">get_centroids_and_bboxes</span>(shapefile_path):\n    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\n    shapefile을 처리하여 각 다각형의 ID, 중심점, 바운딩 박스(bbox)를 포함하는 DataFrame을 반환합니다.\n    :param shapefile_path: shapefile의 경로.\n    :return: 각 다각형의 ID, 중심점, 및 bbox가 있는 pandas DataFrame.\n    \"</span><span class=\"hljs-string\">\"\"</span>\n\n    # shapefile 불러오기\n    gdf = gpd.<span class=\"hljs-title function_\">read_file</span>(shapefile_path)\n\n    # <span class=\"hljs-attr\">EPSG</span>:<span class=\"hljs-number\">4326</span>으로 재투영\n    gdf_proj = gdf.<span class=\"hljs-title function_\">to_crs</span>(<span class=\"hljs-string\">\"EPSG:4326\"</span>)\n\n    centroids = []\n    bboxes = []\n\n    # 각 다각형을 처리하여 중심점과 bbox 얻기\n    <span class=\"hljs-keyword\">for</span> index, row <span class=\"hljs-keyword\">in</span> gdf_proj.<span class=\"hljs-title function_\">iterrows</span>():\n        # 중심점\n        centroid_lat = row.<span class=\"hljs-property\">geometry</span>.<span class=\"hljs-property\">centroid</span>.<span class=\"hljs-property\">y</span>\n        centroid_lon = row.<span class=\"hljs-property\">geometry</span>.<span class=\"hljs-property\">centroid</span>.<span class=\"hljs-property\">x</span>\n        centroids.<span class=\"hljs-title function_\">append</span>((centroid_lat, centroid_lon))\n\n        # 바운딩 박스\n        minx, miny, maxx, maxy = row.<span class=\"hljs-property\">geometry</span>.<span class=\"hljs-property\">bounds</span>\n        bbox = (minx, miny, maxx, maxy)\n        bboxes.<span class=\"hljs-title function_\">append</span>(bbox)\n\n    # <span class=\"hljs-title class_\">DataFrame</span> 생성\n    df = pd.<span class=\"hljs-title class_\">DataFrame</span>({\n        <span class=\"hljs-string\">'ID'</span>: gdf_proj.<span class=\"hljs-property\">index</span>,\n        <span class=\"hljs-string\">'Centroid_Lat'</span>: [lat <span class=\"hljs-keyword\">for</span> lat, lon <span class=\"hljs-keyword\">in</span> centroids],\n        <span class=\"hljs-string\">'Centroid_Lon'</span>: [lon <span class=\"hljs-keyword\">for</span> lat, lon <span class=\"hljs-keyword\">in</span> centroids],\n        <span class=\"hljs-string\">'BBox_Min_Lon'</span>: [bbox[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> bboxes],\n        <span class=\"hljs-string\">'BBox_Min_Lat'</span>: [bbox[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> bboxes],\n        <span class=\"hljs-string\">'BBox_Max_Lon'</span>: [bbox[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> bboxes],\n        <span class=\"hljs-string\">'BBox_Max_Lat'</span>: [bbox[<span class=\"hljs-number\">3</span>] <span class=\"hljs-keyword\">for</span> bbox <span class=\"hljs-keyword\">in</span> bboxes]\n    })\n\n    <span class=\"hljs-keyword\">return</span> df\n\nshapefile_path = <span class=\"hljs-string\">\"lakes_boundry.shp\"</span>\nlakes_df = <span class=\"hljs-title function_\">get_centroids_and_bboxes</span>(shapefile_path)\n<span class=\"hljs-title function_\">print</span>(lakes_df)\n</code></pre>\n<p>위 단계를 따르고 코드를 성공적으로 실행하면, 다음 형식의 다각형에 대한 유사한 DataFrame이 표시될 것입니다:</p>\n<p>다음 스크립트는 2024년 센티넬-2에 의해 촬영된 모든 이미지를 호수 위에서 루핑하고 두 번째 함수를 실행하여 커버리지 비율이 80%보다 높은 경우 각 이미지에서 표면적을 계산하며 각 호수의 표면적을 시계열로 보여주는 DataFrame을 보고하는 것을 포함합니다:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nall_water_pixels_dfs = [] \n\n<span class=\"hljs-keyword\">for</span> lake_id <span class=\"hljs-keyword\">in</span> lakes_df.ID:\n    <span class=\"hljs-built_in\">print</span>(lake_id)\n    lake_df = lakes_df[lakes_df[<span class=\"hljs-string\">'ID'</span>] == lake_id]\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> lake_df.empty:\n        bbox = [lake_df.iloc[<span class=\"hljs-number\">0</span>].BBox_Min_Lon, lake_df.iloc[<span class=\"hljs-number\">0</span>].BBox_Min_Lat,\n                lake_df.iloc[<span class=\"hljs-number\">0</span>].BBox_Max_Lon, lake_df.iloc[<span class=\"hljs-number\">0</span>].BBox_Max_Lat]\n\n        data = search_satellite_images(collection=<span class=\"hljs-string\">\"sentinel-2-l2a\"</span>,\n                                       date=<span class=\"hljs-string\">\"2024-01-01/2024-05-14\"</span>,\n                                       cloud_cover=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>),\n                                       bbox=bbox)\n        <span class=\"hljs-comment\"># Pass the lake_id</span>\n        water_pixels_df = count_water_pixels(data, lake_id)\n\n        <span class=\"hljs-comment\"># Append</span>\n        all_water_pixels_dfs.append(water_pixels_df)\n\n<span class=\"hljs-comment\"># Concatenate all DataFrames into a single DataFrame</span>\nfinal_df = pd.concat(all_water_pixels_dfs, ignore_index=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<p>최종 DataFrame은 이미지 날짜, 물 픽셀 수, 총 픽셀 수, 커버리지 비율 및 표면적을 요약하여 다음과 같이 보여집니다:</p>\n<p><img src=\"/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_5.png\" alt=\"이미지\"></p>\n<p>거의 다 왔어요!</p>\n<p>지도 상에서 시계열을 보기 위해 마지막 한 단계가 남았습니다. 이제 표면적의 시계열 데이터가 있으므로 Folium 라이브러리를 사용하여 두 가지를 표시할 수 있습니다: (1) 지도상의 호수 중심을 지점으로 표시하고 (2) 각 호수를 클릭하면 팝업으로 표면적의 시계열을 보여주는 그래프를 표시합니다. 다음 코드로 이 작업을 수행할 수 있습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> folium\n<span class=\"hljs-keyword\">import</span> plotly.<span class=\"hljs-property\">express</span> <span class=\"hljs-keyword\">as</span> px\n<span class=\"hljs-keyword\">import</span> os\n\n# 시계열 플롯을 그려 <span class=\"hljs-variable constant_\">HTML</span>로 저장하는 함수\ndef <span class=\"hljs-title function_\">plot_timeseries_for_spot</span>(spot_id, ts_df):\n    df_spot = ts_df[ts_df[<span class=\"hljs-string\">'ID'</span>] == spot_id]\n    <span class=\"hljs-title function_\">print</span>(df_spot)\n    fig = px.<span class=\"hljs-title function_\">line</span>(df_spot, x=<span class=\"hljs-string\">'Date'</span>, y=<span class=\"hljs-string\">'Water Surface Area'</span>, title=f<span class=\"hljs-string\">'Time Series for Lake {spot_id}'</span>)\n\n     # X 및 Y 축 레이블 추가\n    fig.<span class=\"hljs-title function_\">update_layout</span>(\n        xaxis_title=<span class=\"hljs-string\">\"Date\"</span>,\n        yaxis_title=<span class=\"hljs-string\">\"Water Surface Area (sq km)\"</span>\n    )\n\n    filepath = f<span class=\"hljs-string\">'tmp_{int(spot_id)}.html'</span>\n    fig.<span class=\"hljs-title function_\">write_html</span>(filepath, include_plotlyjs=<span class=\"hljs-string\">'cdn'</span>)\n    <span class=\"hljs-keyword\">return</span> filepath\n\n# 지도 생성\nm = folium.<span class=\"hljs-title class_\">Map</span>(location=[<span class=\"hljs-number\">35.5</span>, -<span class=\"hljs-number\">119.5</span>], zoom_start=<span class=\"hljs-number\">7</span>)\n\n# <span class=\"hljs-title class_\">Plotly</span> 시계열 팝업이 있는 마커 추가\n<span class=\"hljs-keyword\">for</span> index, row <span class=\"hljs-keyword\">in</span> lakes_df.<span class=\"hljs-title function_\">iterrows</span>():\n    html_path = <span class=\"hljs-title function_\">plot_timeseries_for_spot</span>(row[<span class=\"hljs-string\">'ID'</span>], final_df)\n    iframe = folium.<span class=\"hljs-title class_\">IFrame</span>(html=<span class=\"hljs-title function_\">open</span>(html_path).<span class=\"hljs-title function_\">read</span>(), width=<span class=\"hljs-number\">500</span>, height=<span class=\"hljs-number\">300</span>)\n    popup = folium.<span class=\"hljs-title class_\">Popup</span>(iframe, max_width=<span class=\"hljs-number\">2650</span>)\n    folium.<span class=\"hljs-title class_\">Marker</span>([row[<span class=\"hljs-string\">'Centroid_Lat'</span>], row[<span class=\"hljs-string\">'Centroid_Lon'</span>]], popup=popup).<span class=\"hljs-title function_\">add_to</span>(m)\n\nm.<span class=\"hljs-title function_\">save</span>(<span class=\"hljs-string\">'map_with_timeseries.html'</span>)\n\n# 임시 <span class=\"hljs-variable constant_\">HTML</span> 파일 정리\n<span class=\"hljs-keyword\">for</span> spot_id <span class=\"hljs-keyword\">in</span> lakes_df[<span class=\"hljs-string\">'ID'</span>]:\n    os.<span class=\"hljs-title function_\">remove</span>(f<span class=\"hljs-string\">'tmp_{spot_id}.html'</span>)\n</code></pre>\n<p>이 스크립트에서는 함수가 각 호수의 시계열 데이터를 필터링하고, Plotly를 사용하여 라인 플롯을 생성하고, 플롯을 HTML 파일로 저장합니다. 다음으로 Folium을 사용하여 지도를 초기화합니다. 그런 다음 호수 DataFrame을 반복하면서, 각 호수의 중심 좌표에 마커를 추가하고, 각 마커에 팝업을 연결하여 시계열 플롯을 표시합니다. 최종 지도는 HTML 파일로 저장됩니다. 마지막으로, Plotly 플롯에 생성된 임시 HTML 파일을 삭제하여 정리합니다.</p>\n<p>완료되었습니다!</p>\n<p>콘텐츠 폴더에 생성된 HTML 파일을 열면 지도에 표시된 각 호수의 중심 좌표를 볼 수 있습니다.</p>\n<p><img src=\"/assets/img/2024-05-18-CreateanInteractiveMaptoDisplayTimeSeriesofSatelliteImagery_6.png\" alt=\"지도\"></p>\n<p>각 호수를 클릭하여 시계열이 표시되는지 확인해 보겠습니다.</p>\n<p>이 모든 노력 끝에 이렇게 실용적인 지도가 만들어졌네요, 맞나요? :D</p>\n<h2>📄 결론</h2>\n<p>거의 매달 새로운 패키지와 라이브러리들이 나와서 데이터를 추출하고 분석하며 표시하고 시각화하는 법을 실용적으로 제공합니다. 그러나 이 분야에서 아직 남아 있는 두 가지 과제가 있습니다. 첫 번째는 데이터를 정확하게 분석하기 위해서는 테라바이트 또는 페타바이트에서 추출된 데이터가 정확한지 확인하기 위해 충분한 경험이 필요합니다. 두 번째는 이러한 라이브러리들을 연결하여 의미 있는 것을 만들어내는 아키텍처를 만드는 것입니다.</p>\n<p>이미지 처리에서는 처리된 데이터에서의 간단한 실수가 중대한 오류로 이어질 수 있는 점을 강조해보았습니다. 시각화 부분에서는 Folium, Plotly, 그리고 새로운 이미지를 추출하기 위한 API를 연결하여, 리모트 센싱 관측을 사용하여 다양한 현상을 모니터링하는 유용한 도구를 만들 수 있음을 보여주었습니다. 이 글을 읽는 데 즐거움을 느끼시기를 바라며, 궁금한 사항이 있으시면 언제든지 연락 주세요.</p>\n<h2>📚 참고 자료</h2>\n<p><a href=\"https://github.com/stac-utils/pystac-client/blob/main/docs/quickstart.rst\" rel=\"nofollow\" target=\"_blank\">https://github.com/stac-utils/pystac-client/blob/main/docs/quickstart.rst</a></p>\n<p><a href=\"https://www.element84.com/earth-search/examples/\" rel=\"nofollow\" target=\"_blank\">https://www.element84.com/earth-search/examples/</a></p>\n<p>Sentinel 데이터용 Copernicus Sentinel 데이터 [2024]</p>\n<p>Copernicus 서비스 정보용 Copernicus 서비스 정보 [2024]</p>\n<p>📱 더 많은 흥미로운 콘텐츠를 제공하는 다른 플랫폼에서 저와 소통하세요! LinkedIn, ResearchGate, Github 및 Twitter.</p>\n<p>이 링크를 통해 확인할 수 있는 관련 게시물이 있습니다:</p>\n</body>\n</html>\n"},"__N_SSG":true}