{"pageProps":{"posts":[{"title":"세일즈포스 마케팅 클라우드에서 SQL 스니펫 활용하기 사용 사례 및 예시","description":"","date":"2024-05-18 15:34","slug":"2024-05-18-SQLSnippetsinSalesforceMarketingCloudUseCasesandExamples","content":"\n\n![SQL Snippets in Salesforce Marketing Cloud](/assets/img/2024-05-18-SQLSnippetsinSalesforceMarketingCloudUseCasesandExamples_0.png)\n\nSalesforce Marketing Cloud (SFMC)은 마케터가 고객 여정을 관리하고 최적화할 수 있는 강력한 플랫폼입니다. 그 중요한 도구 중 하나는 SQL인데, 이를 사용하여 SFMC의 데이터 익스텐션 내에서 데이터를 쿼리하고 조작할 수 있습니다. 이 블로그에서는 유용한 SQL 스니펫, 사용 사례 및 예제를 살펴보며 SFMC에서 SQL을 효과적으로 활용하는 데 도움이 될 것입니다.\n\n# SFMC에서 SQL이란?\n\nSQL(Structured Query Language)은 데이터베이스를 관리하고 조작하는 데 사용되는 표준 프로그래밍 언어입니다. SFMC에서 SQL을 사용하여 데이터 익스텐션에 저장된 데이터를 검색, 업데이트 및 관리하는 쿼리를 작성합니다. SFMC에서 SQL을 사용하면 개인화된 마케팅 캠페인에 중요한 복잡한 데이터 작업을 수행할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# SQL을 Salesforce Marketing Cloud(SFMC)에서 활용하는 사례\n\n특정 기준을 기반으로 고객 세그먼트를 생성하는 것은 타겼팅 마케팅에 중요합니다. SQL을 사용하면 고객을 효율적으로 필터링하고 분류할 수 있습니다.\n\n데이터 확장에서 발생하는 오류를 식별하고 수정하여 데이터의 정확성과 일관성을 유지하는 데 SQL을 사용하세요.\n\n이메일 오픈 및 클릭과 같은 참여 데이터를 쿼리하여 마케팅 캠페인의 성능을 분석하세요.\n\n<div class=\"content-ad\"></div>\n\n특정 고객 데이터를 검색하여 이메일, SMS 및 기타 통신을 개인화하세요.\n\n# SQL 조각과 예제\n\n## 1. 최근 구매일을 기준으로 고객 세분화\n\n사용 사례: 최근 30일간 구매를 한 고객 식별\n\n<div class=\"content-ad\"></div>\n\n## SQL Snippet:\n\n```js\nSELECT\n    CustomerID,\n    FirstName,\n    LastName,\n    EmailAddress,\n    LastPurchaseDate\nFROM\n    Customers\nWHERE\n    LastPurchaseDate >= DATEADD(day, -30, GETDATE())\n```\n\n## 2. Data Cleansing – Removing Duplicates\n\nUse Case: Remove duplicate email addresses from a data extension.\n\n<div class=\"content-ad\"></div>\n\n## SQL Snippet:\n\n```js\nSELECT \n    EmailAddress, \n    MIN(CustomerID) AS CustomerID,\n    FirstName,\n    LastName\nFROM \n    Customers\nGROUP BY \n    EmailAddress,\n    FirstName,\n    LastName\nHAVING \n    COUNT(*) = 1\n```\n\n## 3. 캠페인 성과 분석\n\n사용 사례: 각 캠페인별 이메일 오픈 수를 검색합니다.\n\n<div class=\"content-ad\"></div>\n\n## SQL 코드 일부:\n\n```js\nSELECT \n    CampaignName,\n    COUNT(EmailOpen) AS OpenCount\nFROM \n    EmailTracking\nWHERE \n    EmailOpen = 1\nGROUP BY \n    CampaignName\n```\n\n## 4. 개인화 - 고객 선호도 조회\n\n사용 사례: 맞춤 상품 추천을 위해 고객이 선호하는 제품 카테고리를 가져옵니다.\n\n<div class=\"content-ad\"></div>\n\n## SQL 코드 스니펫:\n\n```js\nSELECT \n    CustomerID,\n    FirstName,\n    LastName,\n    PreferredCategory\nFROM \n    CustomerPreferences\nWHERE \n    PreferredCategory IS NOT NULL\n```\n\n저를 따라와요:\n\nRuchika Sandolkar (함께 성장해요) 🫱🏻‍🫲🏽\n\n<div class=\"content-ad\"></div>\n\n우리의 WhatsApp 커뮤니티에 가입하셔서 Salesforce에 관한 매일 업데이트를 받아보세요.\n\n![Salesforce](/assets/img/2024-05-18-SQLSnippetsinSalesforceMarketingCloudUseCasesandExamples_1.png)","ogImage":{"url":"/assets/img/2024-05-18-SQLSnippetsinSalesforceMarketingCloudUseCasesandExamples_0.png"},"coverImage":"/assets/img/2024-05-18-SQLSnippetsinSalesforceMarketingCloudUseCasesandExamples_0.png","tag":["Tech"],"readingTime":3},{"title":"소프트웨어 개발 우리가 도대체 뭘 하는 거지","description":"","date":"2024-05-18 15:34","slug":"2024-05-18-SoftwareDevelopmentWhatonEarthAreWeDoing","content":"\n\n<img src=\"/assets/img/2024-05-18-SoftwareDevelopmentWhatonEarthAreWeDoing_0.png\" />\n\n요즘 나는 프로젝트와 토론을 통해 소프트웨어 개발이 무엇인지에 대해 직면하게 되었습니다. 이 주제가 내 생각을 점령하고 있어요. 많은 사람들이 자신이 이해하고 있다고 생각하지만 실제로는 인식이 종종 편향되어 있습니다. 나는 Alberto Brandolini의 인용구가 특히 적절하다고 생각해요:\n\n이 인용구는 소프트웨어 개발 과정을 집을 짓는 것과 비교함으로써 과소화하는 것이 가져오는 부정적인 영향을 강조합니다. 무엇보다도, 소프트웨어 개발을 집을 짓는 것과 비교하는 것은 그릇된 정보를 제공하며 해로울 수 있어요. 건설은 종종 직선적이고 예측 가능한 경로를 따르는 반면, 소프트웨어 개발은 본질적으로 반복적이고 적응적입니다. 이 오해는 소프트웨어 개발의 창조적이고 탐구적인 성격에 대한 기본적인 오해에서 비롯됩니다. 이는 일정 청사진에서 미리 정의된 구성 요소를 조립하는 것이 아니라 고유한 맥락에서 문제를 해결하는 데 관한 것이에요.\n\n집을 짓는 것과 달리 보통 선형적이고 명확한 계획에 따른 명확한 종료가 있는 소프트웨어 개발은 변화하는 요구사항, 기술적 진전 및 사용자 피드백에 기반한 지속적인 적응, 진화 및 반복을 포함합니다. 이 인용구는 소프트웨어 개발의 독특한 도전과 방법을 인식하고 이를 과소평가하여 그 요구 사항과 복잡성을 과소평가하지 않기 위한 중요성을 강조합니다.\n\n<div class=\"content-ad\"></div>\n\n소프트웨어 개발은 코드를 작성하는 것만으로 이해되는 경우가 많지만, 소프트웨어 제품을 개발하는 데 필요한 요소를 이해하는 것이 종종 부족합니다. 사람들이나 조직이 모바일 앱이 필요하다고 미리 결정하는 경우가 많지만, 작은 웹 앱을 사용해도 충분할 수 있다는 사실을 확인할 때가 있습니다.\n\n개발자나 해외 제공업체가 해당 도메인과 연결이 없는 채 제품을 구현하도록 자주 고용됨을 관찰했습니다. 요구 사항이 명확하지 않고 적극적인 참여가 필요합니다. 환경 및 비용, 가용성 및 성능 요구 사항을 고려하지 않고 구현하는 것이 자주 무시되는데, 멋진 제품 아이디어를 워드프레스 같은 CMS에 넣을 때 미지의 영역, 의사소통 부족 또는 적절한 질문을 하지 않았을 때 예기치 못한 문제가 발생합니다.\n\n반면 대기업은 개발자를 프레임워크에 익숙한 개인이라고 보며 프로그래밍 언어를 알고 정의된 요구 사항을 기술로 잘 못 번역할 수 있는 사람으로 생각합니다. 그들은 자신들의 프로젝트에 이러한 사람들을 찾아 업계 경험이 있는 Java 개발자가 필요하다고 믿습니다. 그렇기 때문에 절대 아닙니다! 왜냐하면 코딩을 공예로 이해하는 사람이 필요하기 때문입니다. 이것은 기초에 불과하지만, 실제로 필요한 것은 도메인에 참여하고 핵심 질문을 하며 도메인과 제품에 대한 공유된 이해를 발전시킬 의지가 있는 사람입니다. 코드를 작성하는 것은 실제로 아주 작은 부분일 뿐입니다.\n\n소프트웨어 개발은 계속해서 배우는 것에 관한 것이며, 유감스럽게도 종종 잊혀지는 사실입니다. 도메인 주도 설계가 적용되거나 적어도 시도되었을 때 종종 단순한 기술적 개념으로 축소됩니다. 전략적 설계가 훨씬 중요하다고 믿습니다. 예를 들어, 이벤트 스토밍은 도메인을 이해하고 바운디드 컨텍스트와 서브도메인을 정의하는 데 훌륭합니다. 이것은 모두에게 의사소통하기 쉬우며, 개발자가 도메인에 참여하려는지 물리적인 작업을 메카닉하게 처리하려는지를 초기에 파악할 수 있습니다. 마이크로서비스를 사용할 계획인 경우 이벤트 스토밍을 통해 서비스 경계를 정의할 수 있습니다. 비즈니스 요구 사항을 단순히 코드로 번역하는 \"생각 없는 프로그래머\" 역할은 AI와 같은 새로운 기술과 경쟁하기 어려울 것이라고 생각합니다.\n\n<div class=\"content-ad\"></div>\n\n미래를 바라볼 때, 개발자의 역할은 명백히 변화하고 있습니다. AI 및 다른 기술들의 등장으로 인해 개발자를 단순한 프로그래머로만 보는 전통적인 시각에 도전받고 있습니다. 대신, 비판적 사고 능력, 지속적인 학습, 효과적인 협업 능력이 점점 중요해지고 있습니다. 이러한 기술들은 개발자가 풍부한 정보를 기반으로 결정을 내리고, 접근법을 재고조정하며, 현대 소프트웨어 개발의 복잡성을 탐색할 수 있게 합니다. 소프트웨어 개발은 결정을 내리는 것이며, 되돌아보고 수정해야 하는 자세를 갖추는 것입니다. 이건 과정이자, 학습 과정입니다. 무엇보다 중요한 것은 이겁니다: 이건 이해와 협업이 스테이크홀더들과의 소통과 협업을 통해 이루어지는 과정입니다.\n\n결론적으로, 제 경험과 감상은 근본적인 진실을 강조합니다: 소프트웨어 개발은 코드를 작성하는 것 이상입니다. 비판적 사고, 지속적 학습, 협업을 필요로 하는 복잡하고 섬세한 과정입니다. 앞으로 나아가면서 이러한 측면들을 받아들이는 것이 사용자 요구를 충족하고 시대의 시험을 견딜 수 있는 소프트웨어를 만드는 데 중요할 것입니다.\n\n건배!","ogImage":{"url":"/assets/img/2024-05-18-SoftwareDevelopmentWhatonEarthAreWeDoing_0.png"},"coverImage":"/assets/img/2024-05-18-SoftwareDevelopmentWhatonEarthAreWeDoing_0.png","tag":["Tech"],"readingTime":3},{"title":"Kotlin 코루틴 핵심요소 알아야 할 모든 것","description":"","date":"2024-05-18 15:32","slug":"2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow","content":"\n\n<img src=\"/assets/img/2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow_0.png\" />\n\n안녕하세요! 이 글은 코루틴 시리즈에서 두 번째 글입니다. 코루틴을 완전히 이해하기 위해 확인해볼 수 있는 다음 글 목록입니다.\n\n- 코루틴, 무엇인가, 어떻게 사용하며 왜 사용하는가?\n- 코루틴 핵심 요소(이 글).\n- 코루틴 내부 동작 방식.\n\n이미 코루틴이 무엇이고 어디에 어떻게 사용하는지 알고 있다고 가정하고 있습니다. 아직 익숙하지 않다면 이 글을 읽어보세요.\n\n<div class=\"content-ad\"></div>\n\n우선, 잘 알려진 Coroutine 빌더를 사용하여 우리의 코루틴을 만들어 보겠습니다:\n\n# Launch:\n\nlaunch 코루틴 빌더는 결과를 반환하지 않는 새로운 코루틴을 시작하는 데 사용됩니다. 이는 실행 후 바로 잊을 수 있는 작업에 사용되며, 긴 실행 함수를 호출하고 반환 값을 신경 쓰지 않아도 되는 경우에 사용됩니다.\n\n```js\nfun main() {\n    println(\"시작\")\n\n    // 코루틴 실행\n    GlobalScope.launch {\n        delay(1000) // 일부 백그라운드 작업 시뮬레이션\n        println(\"코루틴이 완료되었습니다\")\n    }\n\n    println(\"끝\")\n}\n\n//시작\n//끝\n//...\n//코루틴이 완료되었습니다\n```\n\n<div class=\"content-ad\"></div>\n\n# 비동기:\n\n비동기 코루틴 빌더(async)는 Deferred 값을 반환하는 코루틴을 시작하는 데 사용됩니다. 우리는 지연된 값에 대해 중단 함수 await를 호출하여 기다리고 결과를 가져올 수 있습니다.\n\n```js\nfun main() {\n    println(\"시작\")\n\n    val deferredResult = GlobalScope.async {\n        delay(1000) // 일부 백그라운드 작업 시뮬레이션\n        \"코루틴 완료\"\n    }\n\n    // 그 동안 다른 작업 수행\n\n    // 지연된 값에서 결과를 검색\n    runBlocking {\n        val result = deferredResult.await() // await는 중단 함수입니다\n        println(result)\n    }\n\n    println(\"끝\")\n}\n//시작\n//코루틴 완료\n//끝\n```\n\n# CoroutineScope:\n\n<div class=\"content-ad\"></div>\n\n이것을 코루틴의 어머니로 생각해보세요. CoroutineScope는 생성 중인 모든 코루틴을 추적하며, 마치 어머니가 자녀를 돌보는 것과 같습니다.\n\n진행 중인 작업(실행 중인 코루틴)은 언제든지 scope.cancel()을 호출하여 취소할 수 있습니다.\n\n특정 계층의 앱에서 코루틴의 수명주기를 시작하고 제어하고 싶을 때마다 CoroutineScope를 생성해야 합니다. 안드로이드에서는 viewModelScope, lifecycleScope 또는 전체 애플리케이션 수명주기를 위한 GlobalScope가 있습니다.\n\nCoroutineScope를 생성할 때는 생성자의 매개변수로 CoroutineContext를 사용합니다. 다음 코드로 새로운 scope 및 코루틴을 생성할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n// Job과 Dispatcher는 CoroutineContext로 결합되어 CoroutineContext에 대해 곧 논의할 것입니다.\nval scope = CoroutineScope(Job() + Dispatchers.Main)\nval job = scope.launch {\n    // 새로운 코루틴\n}\n```\n\n## Job:\n\n코루틴 내에서 Job 인스턴스는 코루틴 자체를 나타냅니다. Job은 코루틴에 대한 핸들입니다. launch 또는 async로 생성하는 각 코루틴에 대해 고유하게 식별되고 라이프사이클을 관리하는 Job 인스턴스가 반환됩니다.\n\nJob은 일련의 상태를 거칠 수 있습니다: New, Active, Completing, Completed, Cancelling 및 Cancelled. 우리는 상태 자체에는 액세스할 수 없지만, Job의 속성에 액세스할 수 있습니다: isActive, isCancelled 및 isCompleted. \n\n\n<div class=\"content-ad\"></div>\n\n작업/Coroutine의 상태:\n\n![Job/Coroutine States](/assets/img/2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow_1.png)\n\n작업 유형:\n\n- Job: 단일 coroutine을 나타내며 시작, 대기 및 취소와 같은 라이프사이클을 제어할 수 있습니다. 간단한 비동기 작업에 사용할 수 있습니다.\n- DeferredJob: 타입 T의 결과를 생성하는 coroutine을 나타내며 await 함수를 사용하여 결과를 대기할 수 있는 방법을 제공합니다. Deferred는 작업을 병행 및 비동기적으로 수행하고 결과를 얻어야 할 때 사용됩니다.\n- SupervisorJob: 자식 coroutines을 위한 부모 작업으로 사용되는 작업 유형입니다. 일반 작업과 달리 자식 coroutine의 실패 또는 취소가 부모 및 다른 자식에게 전파되지 않습니다. 작업 트리의 특정 가지에서 실패를 격리하고 싶을 때 유용합니다.\n- CompletableJob: 명시적으로 complete() 함수를 사용하여 완료할 수 있는 작업 유형입니다. 사용자 정의 구현이나 작업의 라이프사이클을 처리하는 사용자 정의 방법을 만들고 싶을 때 자주 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\n# CoroutineContext:\n\nCoroutineContext은 코루틴 실행의 컨텍스트를 나타내는 인터페이스입니다. 코루틴의 동작을 정의하는 요소 집합을 제공합니다. 이 컨텍스트는 코루틴 실행을 관리하는 데 중요하며 동시성, 스레드 풀링 및 스케줄링을 처리합니다.\n\n구성 요소는 다음과 같습니다:\n\n- Job — 코루틴의 수명을 제어합니다.\n- CoroutineDispatcher — 작업을 적절한 스레드로 보냅니다.\n- CoroutineName — 코루틴의 이름으로 디버깅에 유용합니다.\n- CoroutineExceptionHandler — 처리되지 않은 예외를 처리합니다.\n\n<div class=\"content-ad\"></div>\n\nCoroutine은 새 작업 및 부모로부터 상속된 다른 것들의 CoroutineContext입니다.\n\nCoroutineScope는 코루틴을 생성할 수 있고 코루틴 내에서 더 많은 코루틴을 생성할 수 있기 때문에 암시적인 작업 계층이 생성됩니다. 다음 코드 스니펫에서는 CoroutineScope를 사용하여 새 코루틴을 생성하는 것 외에도 코루틴 내에서 더 많은 코루틴을 생성하는 방법을 살펴보십시오:\n\n```js\nval scope = CoroutineScope(Job() + Dispatchers.Main)\nval job = scope.launch {\n    // CoroutineScope를 부모로 가지는 새 코루틴\n    val result = async {\n        // launch에 의해 시작된 코루틴을 부모로 가지는 새 코루틴\n    }.await()\n}\n```\n\n해당 계층의 루트는 일반적으로 CoroutineScope입니다. 이 계층 구조를 다음과 같이 시각화할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n\n![Kotlin Coroutine Essentials](/assets/img/2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow_2.png)\n\n코루틴은 작업 계층 구조에서 실행됩니다. 부모는 CoroutineScope 또는 다른 코루틴이 될 수 있습니다.\n\n# 부모 CoroutineContext:\n\n작업 계층 구조에서 각 코루틴은 CoroutineScope 또는 다른 코루틴이 될 수 있는 부모를 가지고 있습니다. 그러나 코루틴의 결과 CoroutineContext는 부모의 CoroutineContext와 다를 수 있습니다. 왜냐하면 이 공식에 따라 계산되기 때문입니다:\n  \n\n<div class=\"content-ad\"></div>\n\n위와 같이 표현됩니다:\n\n- 일부 요소는 기본 값을 가집니다: Dispatchers.Default는 CoroutineDispatcher의 기본값이며, \"coroutine\"은 CoroutineName의 기본값입니다.\n- 상속된 CoroutineContext는 해당 Coroutine을 생성한 coroutine의 CoroutineContext입니다.\n- Coroutine 빌더에 전달된 인수는 상속된 컨텍스트의 해당 요소들보다 우선합니다. (아래 예시 참조)\n\n참고: CoroutineContext는 + 연산자를 사용하여 결합할 수 있습니다. CoroutineContext는 요소의 집합이므로, + 연산자 오른쪽 요소들이 왼쪽 요소를 재정의하여 새로운 CoroutineContext가 생성됩니다.\n\n예시: (Dispatchers.Main, \"name\") + (Dispatchers.IO) = (Dispatchers.IO, \"name\")\n\n<div class=\"content-ad\"></div>\n\n\n![Coroutine Context](/assets/img/2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow_3.png)\n\n이 CoroutineScope에서 시작된 모든 코루틴은 CoroutineContext에 적어도 이러한 요소가 있을 것입니다. CoroutineName은 기본 값에서 가져오므로 회색으로 표시됩니다.\n\n새 코루틴의 부모 CoroutineContext를 알았으니, 그 코루틴의 실제 CoroutineContext는 다음과 같습니다:\n\n위 이미지에 표시된 CoroutineScope를 사용하여 위와 같이 새 코루틴을 생성하면:\n\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nval job = scope.launch(Dispatchers.IO) {\n    // new coroutine\n}\n```\n\n그 코루틴의 부모 CoroutineContext 및 실제 CoroutineContext는 무엇입니까? 아래 이미지로 해답을 확인하세요!\n\n![해답 이미지](/assets/img/2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow_4.png)\n\nCoroutineContext 안의 Job과 부모 컨텍스트는 항상 동일한 인스턴스가 아니며, 새로운 Coroutine이 항상 새로운 Job 인스턴스를 가져오게 됩니다. (새로운 Job은 녹색이고 부모 Job은 빨강색입니다.)\n\n<div class=\"content-ad\"></div>\n\n`Dispatchers.IO`가 스코프의 `CoroutineDispatcher`를 덮어씌워서, 결과적으로 부모 CoroutineContext에는 Dispatchers.IO가 포함되어 있습니다.\n\n코루틴과 관련된 중요한 개념들을 이해하셨기를 바라며, 앞으로는 이를 효율적으로 활용하여 멋진 애플리케이션을 만드시기 바랍니다. 앞으로 제공될 흥미로운 콘텐츠를 기대해 주세요. 함께 해주셔서 감사합니다!","ogImage":{"url":"/assets/img/2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow_0.png"},"coverImage":"/assets/img/2024-05-18-KotlinCoroutineEssentialsEverythingyouneedtoknow_0.png","tag":["Tech"],"readingTime":6},{"title":"첫 게임잼은 스트레스 받았지만 정말 멋있었어요","description":"","date":"2024-05-18 15:30","slug":"2024-05-18-MyFirstGameJamWasStressfulButAlsoAwesome","content":"\n\n![My First Game Jam](/assets/img/2024-05-18-MyFirstGameJamWasStressfulButAlsoAwesome_0.png)\n\n2023년 12월, 게임 개발자들과 함께 일할 수 있는 새로운 기회를 찾았어요. 비디오 게임 음악 작곡가로서 거의 1년의 경력을 쌓았고, 몇 개의 게임에 참여했어요. 하지만 새로운 클라이언트를 찾는 데 어려움을 겪고 있어요.\n\n게임 점프인에 참가한다면 더 많은 연결을 맺을 수 있다고 생각해요. 더 많은 연결은 성장을 위한 더 많은 기회를 의미하며, 지갑 속의 돈이 많아질 전망이 매력적이에요.\n\n게다가, 더 큰 팀의 일원이 되는 것에 진심으로 관심이 있어요. 혼자 프리랜싱을 하다 보면 외로워 질 수 있어요. 게임 점프인은 외로움을 극복하기 위한 제 해결책이었어요.\n\n<div class=\"content-ad\"></div>\n\n## 게임 잼이란 무엇인가요?\n\n게임 잼은 게임 개발자, 예술가, 그리고 음악가 같은 사람들이 온라인이나 직접 참여하는 행사로, 정해진 시간 동안 게임을 만들기 위해 모이는 이벤트입니다. 시작부터 끝까지, 플레이 가능하든지 아니든지, 마감일까지 무언가를 제출해야 합니다. 어떤 게임 잼은 아주 짧아서 48시간이나 일주일인 경우도 있습니다. 하지만 우리의 경우는 한 달 동안 계속되어, 더 긴 기간 동안 네트워크를 발전시키는 데 도움이 되었어요.\n\n## 팀을 모으는 과정\n\n이 행사 이전에는 제가 협업한 개발자들만 알고 있었습니다. 그들은 본업과 개인 게임 프로젝트로 바쁘게 일하고 있었으며, 산업 내에서 아는 사람이 아무도 없었습니다.\n\n<div class=\"content-ad\"></div>\n\nGDEX는 오하이오 주에 본사를 둔 게임 엑스포 회사로, 저가 참가한 게임 잼을 조직했습니다. 주최자들은 사람들을 효과적으로 관리하고 미지원된 역할에 따라 팀을 배정하는 데 훌륭한 일을 했습니다.\n\n잼의 처음 며칠 동안 팀이 없었던 사람들을 배정하는 대규모 그룹 세션이 있었습니다. 주최자들은 모든 사람을 명단에 올려 거의 대부분의 사람을 팀에 배정했습니다.\n\n남은 사람들은 두 명의 개발자, 시각 예술가, 음악가였습니다. 우리 넷이 모여 아이디어를 내고 기획을 시작했습니다.\n\n## 아이디어\n\n<div class=\"content-ad\"></div>\n\n저희들의 첫 만남 때, 일할 아이디어를 찾고 싶었어요. 우리는 가장 좋아하는 게임들에 대해 살펴보았죠. Spelunky, Skyrim, Rocket League 등.\n\n잼의 주제는 giving이었는데, 이는 연휴와도 일치했어요. 모든 순간이 기대되는 흥미진진한 시간이 되리라고 생각했어요.\n\n우리는 이것이 우리의 첫 게임잼이었으니 기대를 절제하려고 노력했어요. 어차피 한 달밖에 주어진 시간이 없었으니까요.\n\n나는 언제나 개구리와 관련된 게임의 사운드 트랙을 작업해 보고 싶었습니다. 습지 같고 수변의, 푸릇푸릇하고 밝은, 귓가를 달래는, 분위기 있는 그리고 섬세한 아름다움을 담고 싶었죠. 이어나갈 수 있겠어요.\n\n<div class=\"content-ad\"></div>\n\n내가 그들에게 아이디어를 제안했어요: 이웃들에게 물건을 전달해야 하는 배달원이 되는 개구리 게임이에요. 이 게임의 주요 아이디어는 전달뿐만 아니라 함께하는 것에 대한 것이에요. 당시에는 그 아이디어에 완전히 열정적이지 않았기 때문에 최선을 다해 투고하지 않았어요. 최상의 경우에도 절반 정도만 되던 거죠.\n\n하지만 팀의 다른 세 명은 그것을 사랑했어요. 우리 시각 예술가는 귀여운 스타일로 창작하지 않았고, 개발자들은 더 많은 피와 고어가 있는 게임을 즐겼어요.\n\n나는 경쟁적인 게임을 선호해요. 하지만 어떤 이유에서인지, 그 아이디어가 확 와 닿았죠. 우리는 그것을 가져다가 진행했어요. 곧 우리는 서사를 그려내고, 예술 스타일을 위한 Pinterest 보드를 만드며, 게임의 기본 메커니즘을 개발하기 시작했어요.\n\n## 게임 개발의 도전들\n\n<div class=\"content-ad\"></div>\n\n이 모든 것이 쉽지 않을 것임을 알았지만 실제 게임 개발에는 그런 것 없을 거라고 생각했습니다. 음악 부분은 빨리 끝났지만, 그 부분은 추후에 다시 다루겠죠. 저는 결코 알 수 없을 프로그래밍 부분이 시간이 가장 오래 걸렸습니다.\n\n주 요인 개발자는 게임 내 메커니즘을 생산하는 데 화를 내거나 능력 부족에 좌절했습니다. 그럴 만했어요. 그녀는 이전에 Godot이라는 프로그래밍 환경(그리고 프로그래밍 언어?)에 깊이 파보지 않았거든요.\n\n개발 관련된 대부분의 일은 새로운 것이었습니다. 다른 개발자는 레벨 디자인을 도와야 했지만, 그가 할 수 있는 일을 다 했습니다.\n\n다행히도, 우리는 사전에 간단한 플랫포머 게임을 결정했습니다. 플레이어는 점프를 해 플랫폼에 붙기 위해 혀를 사용하는 개구리 주인공 Ribberto를 조종합니다.\n\n<div class=\"content-ad\"></div>\n\n보너스로, 스케이트보드를 이용하여 속도를 내고, 레벨 디자인에는 플레이어가 속도를 내며 뛰어올라갈 수 있는 작은 램프가 포함되어 있습니다.\n\n## 다른 도전 극복\n\n휴일 시즌이라 모두가 동시에 전화통화하기가 매우 어려웠습니다. 우리는 밤 늦게 만나는 시간을 찾아 이를 해결했습니다. 우리는 동시에 뇌품을 내고 개발하며 창작했습니다.\n\n여기에 있다. 오랫동안 원하던 팀이었고, 우리는 정말 잘 함께 일했습니다. 그러나 이 과정에서 어려움이 없지는 않았습니다. 때로는 진척이 느리게 느껴졌습니다. 우리는 모두 마감일을 다르게 존중해서 약간의 다툼도 있었습니다.\n\n<div class=\"content-ad\"></div>\n\n저희 예술가는 정말 대단했어요. 한 달 동안 계속해서 다양한 스프라이트, 배경 및 에셋들을 제공해 주었죠. 개발자들은 꾸준한 진전을 이뤄나갔어요.\n\n최종 음악을 선택하기 전에 여러 번의 사운드 트랙 곡들을 거치면서 결정했어요. 게임을 위해 레벨 당 한 곡씩 총 세 개부터 다섯 개의 트랙을 만들고 싶었죠. 우리는 결국 그 중 세 곡을 사용했어요. 두 곡은 레벨에, 한 곡은 대화 상자가 나타날 때에 사용되었죠.\n\n예술가가 만든 레벨 디자인을 보고 음악을 작곡하는 데 많은 도움이 되었어요. 눈이 내린 집들, 얼어붙은 길, 그리고 상쾌한 겨울 마을 생활은 제 창의적인 뇌를 움직이는 데 큰 역할을 했어요. 모든 것이 잘 어우러지고 있었어요—매끄럽지는 않았지만 매우 좋았어요.\n\n## 재앙과 마감일\n\n<div class=\"content-ad\"></div>\n\n게임을 제출해야 할 시간 하루 앞서 재앙이 찾아왔다. 게임은 반쯤 플레이 가능했지만 모든 것이 의도한 대로 작동되지 않았다. 다양한 버그가 있었고 디버깅은 시간이 많이 걸렸다.\n\n우리 주요 개발자는 완벽주의자이며, 그녀는 ADHD가 있다고 말했다. 예를 들어, 게임을 제출할 때까지 30시간 이상 연속으로 일했다.\n\n시간이 끝난 시점에 저와 그녀 둘만의 통화 상황이었다. 음악은 마지막에 추가되었으며, 마침내 마지막 마무리를 감당할 수 있을 정도로 제출을 얼마 남기고 있었다.\n\n10분 남았을 때, 한 플랫폼이 움직임을 멈춘 것을 발견했다. 이 플랫폼은 레벨을 완료하고 게임을 끝내는 데 극히 중요했다.\n\n<div class=\"content-ad\"></div>\n\n우리는 어떤 양보를 했습니다. 내 사운드 효과는 선택에서 떨어졌고, 시각 아티스트의 멋진 엔딩 크레딧 이미지가 삭제되었습니다. 게임 출시 시, 어떤 이상한 버그 때문에 플레이어가 게임을 완료할 수 없었죠.\n\n## 승리의 한 바퀴\n\n게임잼 웹사이트와 itch.io페이지(이 글 끝부분에 링크된다)에서 우리 게임이 공개되자, 큰 안도감은 느껴지지 않았습니다. 그리고 이긴 듯한 승리감도 느껴지지 않았어요.\n\n주요 개발자는 날 반이나 꼴반 만에 처음으로 잠자리에 들어갔고, 나는 평상시처럼 일상 업무를 계속했습니다. 하지만 진정한 기적은 한 주가 끝날 때 일어났어요. 행사 주최자들이 모든 게임 제출물의 플레이스루를 스트리밍했을 때 진짜 마법이 생겼습니다.\n\n<div class=\"content-ad\"></div>\n\n스트림이 시작되자마자 참가자들 사이에 얼마나 많은 재능이 있는지에 대해 생각할 수밖에 없었습니다. 모두의 게임이 다르기 때문이죠. 일부는 2D 그래픽을 특징으로 하고, 다른 사람들은 기본적인 3D 디자인을 사용했습니다.\n\n내가 좋아한 하나는 Dorothy & Elena이었어요. 이 게임은 원통형 세계 주위를 이동하는 2.5D 시각 소설입니다. 게임에서 공간을 사용하는 매우 깔끔한 방법이에요. 다만 스토리에는 크게 흥미를 느끼지 못했습니다. Dorothy의 개발자들이 게임 잼에서 우승했어요.\n\n우리 게임인 Hoppy Holidays는 시각 디자인 부문에서 2위, 참여도 부문에서 4위(음악이 원인인 것으로 생각하며, 음악 특정 부문은 없습니다), 그리고 전체적으로 7위에 랭크되었어요. 18개의 제출물 중에서 이 정도면 꽤 괜찮은 편이죠.\n\n## 내 게임 이야기는 계속되어요\n\n<div class=\"content-ad\"></div>\n\n우리는 게임이 어떤 부족함이 있었더라도 그 성과에 모두 만족했어요. 짧은 휴식 뒤, 우린 비공식적으로 우리만의 작은 인디 게임 스튜디오를 만들기로 결정했어요. 이 글을 쓰는 시점에서는 아직 제목이 없어요.\n\n지금은 다음 큰 아이디어를 고안하고 있어요. 이번에는 좀 더 시간과 자원, 그리고 우리의 게임 잼 경험을 토대로 하고 있어요. 우리는 큰 꿈을 꾸고 있어요, 그건 정말 좋은 거지만, 당분간 어떤 혁신적인 것을 만들어낼 것 같진 않아요.\n\n하지만 나는 내 첫 번째 게임 잼에 참여해서 기쁘고 있어요. 그것은 창의력을 키울 수 있는 훌륭한 곳이었어요. 모두가 함께 모여서 창작을 하고, (반쯤은) 완성된 제품을 가지고 있는 모습을 보는 것은 정말 멋진 경험이었어요.\n\n우리는 처음에 Hoppy Holidays 게임을 되살리기 위한 계획을 세웠었어요. 하지만 우리 개발자들이 그걸 당분간 다시 다루지 않을 것 같아요.\n\n<div class=\"content-ad\"></div>\n\nGDEX 팀에게 이벤트를 주최해 줘서 감사합니다. 당신들 덕분에 모두를 함께 모아 즐거운 추억을 만들 수 있었어요. 당신들처럼 창의적인 사람들이 우리를 자극해 우리가 좋아하는 것을 할 수 있게 해 줍니다.\n\n## 게임만큼이나 중요한 것은 함께 만든 친구들\n\n게임 잼에 참가하려고 했을 때 뭘 기대할지 몰랐어요. 팀원들이 누구일지, 아이디어가 어떻게 합쳐질지, 서로 어울릴지 부딪힐지, 그리고 통일된 비전을 이끌어낼 수 있을지 걱정했어요.\n\n하지만 팀 첫 회의를 가지고 나서 정말 안도했어요. 우리 팀의 다양한 개성들이 에너지를 주었어요. 우리는 모두가 서로 잘 맞고 함께 일할 수 있었어요, 주고 받으며 함께 하기 좋았습니다.\n\n<div class=\"content-ad\"></div>\n\n미래를 향해 나아가며, 미국과 캐나다 여러 곳에서 새로운 친구들을 만났어. 함께 다시 게임을 만들 수 있는 친구들이 생겼단 건 정말 멋진 일이라고 생각해. \n\n## 앞으로 해볼 점\n\n게임 잼에 참여하는 것은:\n\n그러니 한 번 참여해보는 건 어떨까?\n\n<div class=\"content-ad\"></div>\n\n간단한 구글 검색으로 현재 진행 중이거나 예정된 지역 및 온라인 게임 잼을 찾아볼 수 있어요.\n\nItch.io는 인디 게임과 관련된 모든 것에 대한 좋은 자료원입니다. 둘러보고 마음에 드는 게임 잼을 찾아보세요.\n\n제 이야기 읽어주셔서 감사합니다. 즐거운 잼 세션 되세요!\n\n우리 게임인 Hoppy Holidays를 여기에서 플레이할 수 있어요.\n\n<div class=\"content-ad\"></div>\n\n\"당신은 나의 개인 발전에 대한 더 많은 생각(이 경우에는 게임에 대한 생각)을 확인할 수 있습니다.\n\n내 게시물을 직접 이메일로 받아보세요.\"","ogImage":{"url":"/assets/img/2024-05-18-MyFirstGameJamWasStressfulButAlsoAwesome_0.png"},"coverImage":"/assets/img/2024-05-18-MyFirstGameJamWasStressfulButAlsoAwesome_0.png","tag":["Tech"],"readingTime":6},{"title":"코딩에서의 초기 고난점","description":"","date":"2024-05-18 15:29","slug":"2024-05-18-Myinitialstrugglesincoding","content":"\n\n# 소프트웨어 선택하기\n\n![이미지](/assets/img/2024-05-18-Myinitialstrugglesincoding_0.png)\n\n2016년에 기계공학 학위를 받으며 교육 대출로 4 라크 루피를 갚아야 했고, IT 서비스 회사로부터의 고용 제안을 받았습니다. 기계공학에 대한 실질적인 지식이 없으며 코딩과 소프트웨어 엔지니어링에 대한 단서가 없어서 금전적인 필요성 때문에 소프트웨어를 망설이며 선택했습니다.\n\n고통의 시기\n\n<div class=\"content-ad\"></div>\n\n\n![이미지](/assets/img/2024-05-18-Myinitialstrugglesincoding_1.png)\n\n첫 해는 정말 힘들었어요. 솔직히 코딩에 대해 너무 무서웠고 코딩 악몽까지 꾸었어요. 코드를 이해하지 못한 채로 복사하고 붙여넣기만 했어요. 콘솔에서 나오는 에러를 제외하고는 어떠한 에러도 이해하지 못했어요. 'return'문과 'break'문의 차이를 몰랐어요. 둘 다 코드 실행을 멈출 것이라고 생각했죠. 도대체 어디에 사용하든 상관 없다고 생각했어요. 내 동료와 멘토들에게는 거슬러웠을 뿐이었죠. 오늘 나는 면접에서 이상적인 후보로 거부했을 거에요.\n\n투철한 노력 뒤에 숨어있는 장벽\n\n![이미지](/assets/img/2024-05-18-Myinitialstrugglesincoding_2.png)\n\n\n<div class=\"content-ad\"></div>\n\n나는 더 나아가지 못한 이유로 두 가지 주요 장벽이 있었어.\n\n첫 번째로 가장 큰 장벽은 나에게 거짓말을 미리 믿었다는 게였어. \"나는 기계 공학 전공자이기 때문에 코딩을 할 수 없다\"고 내 자신에게 말한 거였지. 코딩을 시도할 때 나는 코딩을 할 수 없다고 믿으며 했었어.\n\n두 번째 장벽은, 코드가 무엇을 하는지 이해하지 않은 채로 결과물을 얻으려고 열심히 노력한 거야. 문서나 스택 오버플로우에서 코드를 복사하여 붙여넣었지만, 스니펫에 대해 적힌 내용을 주의 깊게 확인하지 않았어. 콘솔에 어떤 오류가 발생했는지 이해하려는 노력도 하지 않았어.\n\n나는 코드를 이해하지 않았어, 가정했어. 코드가 이렇게 작용할 것이라고 상정했지. 나에게 코드란 풀어야 할 미로였어, 서로 다른 경로의 다양한 변형을 계속해서 시도해봤지만 결국 어디로도 나아가지 못했어. 코드는 미로가 아니야, 이해하지 않고 다른 조합의 줄을 계속해서 쓰거나 제거하고 조금씩 추가하는 것으로는 어디에도 도달하지 못했어.\n\n<div class=\"content-ad\"></div>\n\n신이시여, 멘토들, 동료들 그리고 피드백 루프.\n\n![이미지](/assets/img/2024-05-18-Myinitialstrugglesincoding_3.png)\n\n신의 은혜로, 저는 여전히 인내심 많고 짜증내기 어려운 멘토들과 동료들을 가지고 있습니다. 스푼 피딩을 하지 않고 압박 없이 학습할 수 있는 공간을 제공해준 격려해주는 멘토가 있었고, 내 쓸데없는 질문에 참여하고 적절한 방향으로 이끌어 준 동료들이 있었습니다. 아래는 코딩 초기 단계에서 동료들과 멘토들로부터 받은 매우 도움이 된 3가지 주요 코멘트입니다:\n\n- “복사 붙여넣기한 것을 이해하라”: 우리는 모든 것을 알지 못합니다. 각 기술은 방대하며 필요한 것을 얻기 위해 문서, 블로그, 스택 오버플로우, 공동 작업 등에 의존해야 합니다. 그러나 거기서 복사한 것을 이해해야 합니다.\n- “이해하지 않고 코드 한 줄을 쓰지 마라”: 이것에는 시간이 걸리지만 가치가 있습니다. 우리는 어떤 줄들을 추가하면 원하는 결과를 얻을 수 있다는 것을 알지만 모든 줄이 무엇을 의미하는지 항상 알지는 못합니다. 쓰는 모든 코드 한 줄을 이해하도록 해야 합니다. \n- “매일 기술 블로그를 읽어라”: 우리 기술과 관련된 블로그를 읽는 것은 특히 해당 기술에 새로운 경우일 때 학습을 촉진합니다. 앞서 언급한 대로, 각 기술은 방대할 수 있으며 매일 그에 대해 계속해서 읽으면 문제를 해결할 새로운 아이디어에 노출되고, 기술에서 사용 가능한 다양한 기능 및 피할 수 있는 가능한 함정 등이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n하나님의 은혜로 다시, 저는 진심으로 배우기 위한 의도로 이들을 따랐습니다. 마감 압력 속에서 이들을 따르는 것은 괴로운 일이지만, 시간과 진심 있는 노력은 결실을 맺습니다.\n\n코드는 미로가 아니라 언어입니다.\n\n![내 코딩 초기 어려움](/assets/img/2024-05-18-Myinitialstrugglesincoding_4.png)\n\n지금 다시 돌아보면, 코드를 사용해 문제를 해결하고, 아마 미로조차도 해결하는 것을 이해합니다. 하지만 코드 자체가 미로는 아니라 언어입니다. 코드는 기계가 이해하는 유일한 언어입니다. 우리는 이 언어를 이해하여 기계와 소통해야 합니다. 우리가 말하는 것을 이해하지 못하면 이웃과 올바르게 소통할 수 없듯이, 기계에게 말하는 것을 이해해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n친한 친구로부터 받은 한 가지 교훈을 기억해요. 음악을 배우려고 애를 썼던 때, 그는 자전거 타는 법을 배웠던 것을 떠올리라고 했어요. 처음에는 핸들을 잡는 것조차 어려웠고, 자주 넘어졌었죠. 그러나 반복적으로 연습한 결과, 어느 순간 핸들을 잡으면 안정되고 두려움 없이 자전거를 탈 수 있었어요. 이는 우리가 습득하려는 모든 것에 적용되는 법칙이에요. 능숙함은 연습을 통해 찾아옵니다.\n\n댓글란에 여러분의 의견을 남겨 주세요.","ogImage":{"url":"/assets/img/2024-05-18-Myinitialstrugglesincoding_0.png"},"coverImage":"/assets/img/2024-05-18-Myinitialstrugglesincoding_0.png","tag":["Tech"],"readingTime":3},{"title":"Jetpack Compose 팝업  마스터하기","description":"","date":"2024-05-18 15:27","slug":"2024-05-18-JetpackComposePopupMasterIt","content":"\n\n## 안드로이드 개발 배우기\n\n![이미지](/assets/img/2024-05-18-JetpackComposePopupMasterIt_0.png)\n\n저희가 Jetpack Compose 뷰를 프로그래밍할 때, 단순한 Jetpack Compose 뷰 프로그래밍으로 어떤 제약이 있다는 것을 깨닫지 못할 수 있습니다.\n\n해당 제약은 다음과 같습니다. 어떤 Compose 뷰에서도, 부모 뷰에 비해 큰 뷰나 뷰 외부에서 다른 뷰를 작성하는 것이 불가능합니다 (아래 다이어그램에 표시됨).\n\n<div class=\"content-ad\"></div>\n\n아래는 새로운 코드 블록을 Markdown 형식으로 바꾼 예시입니다.\n\n\n<img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_1.png\" />\n\n자, 다행히도 Jetpack Compose는 이 목적으로 활용할 수 있는 두 개의 Compose 구성 요소를 제공해줍니다.\n\n- Dialog\n- Popup\n\n이 글의 주제는 Popup에 대해 모든 것을 공유하고, 그림을 통해 사용자가 쉽게 익힐 수 있도록 합니다. 또 기타 재미있는 세부사항이나 화면 보안, 제스처 사용 방지 등에 대해 알 수도 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n한번 확인해 보세요.\n\n# 팝업 기본\n\n## 팝업 표시\n\n기본적으로, 다음과 같이 팝업을 표시할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nPopup { \n    // 팝업에서 표시할 합성 콘텐츠\n}\n```\n\n그러나 우리가 그냥 호출하면 팝업이 항상 표시됩니다.\n\n버튼 클릭시에만 표시되도록하려면 몇 가지 제어 로직을 둘러싸야합니다.\n\n```js\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"일반 팝업 열기\")\n}\n\nif (popupControl) {\n    Popup {\n      // 팝업에서 표시할 합성 콘텐츠\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n기본적으로 팝업은 아래와 같이 부모 컨테이너의 상단-왼쪽에 맞춰 표시됩니다.\n\n![Popup Default Alignment](https://miro.medium.com/v2/resize:fit:470/1*jpGDSCT0yj7bk1I2Bf-tPA.gif)\n\n## 팝업 정렬\n\n팝업을 재정렬하려면 제공할 수 있는 정렬 매개변수가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nPopup(\n    정렬 = Alignment.Center,\n)\n```\n\n설정 가능한 값으로는 Center, CenterStart, CenterEnd, TopCenter, TopStart (기본값), TopEnd, BottomCenter, BottomStart, BottomEnd이 있습니다.\n\n물론 항상 이상적인 상황은 아닐 수 있습니다. 따라서 사용자가 제공할 수 있는 Offset 값도 몇 가지 있습니다.\n\n```js\nPopup(\n    정렬 = Alignment.CenterStart,\n    offset = IntOffset(0, 700),\n)\n```\n\n<div class=\"content-ad\"></div>\n\n## Popup onDismissRequest\n\n기본적으로 팝업 콘텐츠 외부를 누르면 팝업이 닫힙니다. 그러나 다음을 따르면 결코 닫히지 않습니다.\n\n```js\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"Open normal popup\")\n}\n\nif (popupControl) {\n    Popup(\n        alignment = Alignment.CenterStart,\n        offset = IntOffset(0, 700),\n    ) {\n      // 팝업에 표시할 컴포저블 콘텐츠\n    }\n}\n```\n\n팝업이 닫히지 않는 것은 팝업이 사라지지 않았기 때문이 아닙니다. 실제로 닫혔지만, 팝업 컨트롤이 여전히 true 상태이며, recomposition되면 Popup이 다시 나타납니다 (닫혔다고 느끼지 않게 합니다).\n\n<div class=\"content-ad\"></div>\n\n해당 문제를 해결하기 위해 팝업이 닫힐 때 popupControl을 false로 설정하도록 팝업에 알려주어야 합니다. 아래와 같이 onDismissRequest 매개변수를 사용하여 그 작업을 수행할 수 있습니다.\n\n```js\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"일반 팝업 열기\")\n}\n\nif (popupControl) {\n    Popup(\n        alignment = Alignment.CenterStart,\n        offset = IntOffset(0, 700),\n        onDismissRequest = { popupControl = false },\n    ) {\n      // 팝업에서 표시할 컴포저블 내용\n    }\n}\n```\n\n# 팝업 속성\n\n팝업의 기본을 배웠으니, 좀 더 고급 기능 중 하나인 PopupProerties 매개변수에 대해 살펴보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```js\nclass PopupProperties(\n    focusable: Boolean = false,\n    dismissOnBackPress: Boolean = true,\n    dismissOnClickOutside: Boolean = true,\n    securePolicy: SecureFlagPolicy = SecureFlagPolicy.Inherit,\n    excludeFromSystemGesture: Boolean = true,\n    clippingEnabled: Boolean = true,\n    @get:ExperimentalComposeUiApi //현재시점에서\n    val usePlatformDefaultWidth: Boolean = false\n)\n```\n\n상기 내용이 기본값으로 제공되지만 우리는 이를 재정의할 수 있습니다. 아래에서 각각 설명하겠습니다.\n\n## Focusable 및 DismissOnBackPress\n\nfocusable이 true일 때 팝업은 IME 이벤트와 키 입력을 수신하고, 뒤로 가기 버튼이 눌렸을 때와 같이 역할을 합니다. 그러나 팝업 뒤에 있는 것에 대한 터치가 비활성화됩니다.\n\n<div class=\"content-ad\"></div>\n\n\n![Popup](/assets/img/2024-05-18-JetpackComposePopupMasterIt_2.png)\n\nIf we couple `focusable = true` with `dismissOnBackPress` is true, then the Popup will be dismissed if the user clicks the back button (the older Android phone).\n\n## DismissOnClickOutside\n\nAs mentioned previously, by default, when the user clicks outside the Popup area, it will be dismissed\n \n\n<div class=\"content-ad\"></div>\n\n\n```js\nenum class SecureFlagPolicy {\n    Inherit, // 부모를 따름, 기본값입니다\n    SecureOn,\n    SecureOff\n}\n```\n\n다음 그림을 보면 이제 모두 명확해졌습니다.\n\n![Jetpack Compose Popup Master It](/assets/img/2024-05-18-JetpackComposePopupMasterIt_3.png)\n\n## 시스템 제스처에서 제외하기\n\n\n<div class=\"content-ad\"></div>\n\n안드로이드 Q부터는 Android 하드웨어 백 버튼 대신에 사용자가 왼쪽으로 스와이프하여 뒤로 이동할 수 있습니다.\n\n하지만, 이것은 사이드바가 넓은 경우와 같이 앱 제스처와 겹칠 수 있습니다. 좋은 설명은 여기서 (가장자리에서 가장자리 밝기 슬라이더 섹션에서) 공유되어 있습니다.\n\n상황을 모방하기 위해, 제가 큰 팝업을 만들고 이를 켜고 끕니다.\n\n기본값으로 ON 상태일 때, 아래 설정을 한다면, 스와이프를 하려고 할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\nPopupProperties(\n    focusable = true,\n    dismissOnBackPress = false,\n    dismissOnClickOutside = false,\n    excludeFromSystemGesture = true,\n)\n\n\n아래 GIF에서 왼쪽에서 스와이프해도 아무 일도 일어나지 않습니다.\n\n<img src=\"https://miro.medium.com/v2/resize:fit:470/1*8keelwDUflGe_U2LT9_7-g.gif\" />\n\n하지만, OFF로 변경해보면\n\n\n<div class=\"content-ad\"></div>\n\n```javascript\nPopupProperties(\n    focusable = true,\n    dismissOnBackPress = false,\n    dismissOnClickOutside = false,\n    excludeFromSystemGesture = false,\n)\n```\n\n이제 왼쪽에서 스와이프를 할 때 “뒤로 가기”가 트리거되었습니다 (‘`’ 기호로 표시됨)\n\n![이미지](https://miro.medium.com/v2/resize:fit:470/1*lIPOkC6ucBMDt0yUOWWAPg.gif)\n\n## ClippingEnabled\n\n\n<div class=\"content-ad\"></div>\n\n기본적으로는 그렇습니다. 이것은 팝업을 앱 장치 화면 바깥으로 실수로 배치할 수 없게 한다는 것을 의미합니다. Offset 값이 너무 크거나 팝업이 너무 커지면 아래에 나와 있는 것처럼 팝업이 축소되어 앱 장치에 고정됩니다.\n\n그러나 화면을 벗어나도 상관없다면 이 값을 false로 설정할 수 있습니다.\n\n<img src=\"/assets/img/2024-05-18-JetpackComposePopupMasterIt_4.png\" />\n\n## UsePlatformDefaultWidth\n\n<div class=\"content-ad\"></div>\n\n작성 시점에는 이것이 여전히 실험 중입니다. 잘라내기와 거의 동일하지만 다음과 같은 차이가 있습니다.\n\n- 너비만 잘라냅니다 (높이는 잘라내지 않음)\n- 위치를 재조정하지 않습니다 (X 좌표).\n\n아래는 Clipping과 함께 사용했을 때의 결과입니다.\n\n![Image](/assets/img/2024-05-18-JetpackComposePopupMasterIt_5.png)\n\n<div class=\"content-ad\"></div>\n\n# 위치 조정 사용자 정의\n\nPopupProperty에 대해 배웠습니다. 또한 일반 Popup을 알고 있으며, Parent Composable View와 정렬하여 위치를 조정할 수 있습니다.\n\n그러나 Popup이 Parent Composable View에 의존하지 않도록하려면 어떻게해야 합니까?\n\n좋은 소식은 PopupPositionProvider를 제공할 수 있는 또 다른 Popup API가 있다는 것입니다.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n@Composable\nfun Popup(\n    popupPositionProvider: PopupPositionProvider,\n    onDismissRequest: (() -> Unit)? = null,\n    properties: PopupProperties = PopupProperties(),\n    content: @Composable () -> Unit\n) {\n```\n\n## PopupPositionProvider\n\n이 인터페이스는 사용자가 원하는 위치를 계산하는 데 사용됩니다.\n\n```kotlin\n@Immutable\ninterface PopupPositionProvider {\n    fun calculatePosition(\n        anchorBounds: IntRect,\n        windowSize: IntSize,\n        layoutDirection: LayoutDirection,\n        popupContentSize: IntSize\n    ): IntOffset\n}\n```\n\n<div class=\"content-ad\"></div>\n\n제 경우에는 항상 창의 중앙에 위치한 사용자 정의 팝업 위치를 원합니다.\n\n그래서 아래처럼 Position을 쉽게 만들 수 있어요. 여기에는 창의 중앙 위치에 대한 상대적인 OffSet도 있습니다.\n\n```js\nclass WindowCenterOffsetPositionProvider(\n    private val x: Int = 0,\n    private val y: Int = 0\n) : PopupPositionProvider {\n    override fun calculatePosition(\n        anchorBounds: IntRect,\n        windowSize: IntSize,\n        layoutDirection: LayoutDirection,\n        popupContentSize: IntSize\n    ): IntOffset {\n        return IntOffset(\n            (windowSize.width - popupContentSize.width) / 2 + x,\n            (windowSize.height - popupContentSize.height) / 2 + y\n        )\n    }\n}\n```\n\n이제 아래와 같이 Popup에 할당하기만 하면 됩니다. 그러면 그에 맞게 동작합니다.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nvar popupControl by remember { mutableStateOf(false) }\nTextButton(onClick = { popupControl = true }) {\n    Text(\"일반 팝업 열기\")\n}\n\nif (popupControl) {\n    Popup(\n        popupPositionProvider = \n           WindowCenterOffsetPositionProvider(),\n        onDismissRequest = { popupControl = false },\n    ) {\n      // 팝업에 표시할 콘텐츠\n    }\n}\n```\n\n<img src=\"https://miro.medium.com/v2/resize:fit:476/1*Gd9kg-HENkrcawasnU1IZw.gif\" />\n\n여기서 코드 디자인을 얻을 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n팝업은 호출자의 Compose 기능이 호출자의 Compose 뷰 경계 밖의 내용을 표시할 수 있게 하는 Jetpack Compose 구성 요소입니다.\n\n삭제되는 방법, 레이아웃, 호출자 Compose 뷰와의 위치 맞춤과 같이 사용자 정의할 수 있는 여러 팝업 속성이 있습니다.\n\n창과 맞춤을 맞출 수 있게 하는 Positioning 같은 위치 지정도 사용자 정의할 수 있습니다.\n\n예를 들어 사용 가능한 여러 제한 사항이 있습니다.\n\n<div class=\"content-ad\"></div>\n\n- 표시 여부를 결정하는 외부 변수 (팝업 외부의 변수)에 의해 외부에서 제어되어야 합니다.\n- Composable 함수이므로 onClick 내에서 호출하거나 큐에 넣어 시기적절한 닫기를 할 수 없습니다. (예: 토스트로 만들어 호출), 코루틴 스코프에서.\n\n위의 제한사항을 고려하여 Popup에서 영향을 받은 사용자 정의 AbstractComposeView를 시도해보려고 합니다. 발견한 내용은 아래와 같습니다.","ogImage":{"url":"/assets/img/2024-05-18-JetpackComposePopupMasterIt_0.png"},"coverImage":"/assets/img/2024-05-18-JetpackComposePopupMasterIt_0.png","tag":["Tech"],"readingTime":9},{"title":"빠른 안내 ADB를 사용하여 Wi-Fi를 통해 Android 기기에 연결하기","description":"","date":"2024-05-18 15:27","slug":"2024-05-18-QuickGuideConnecttoAndroidDeviceOverWi-FiwithADB","content":"\n\n![이미지](/assets/img/2024-05-18-QuickGuideConnecttoAndroidDeviceOverWi-FiwithADB_0.png)\n\n# 소개\n\n이 안내서는 Android 기기와의 무선 연결을 위해 ADB(Android Debug Bridge)를 설정하는 방법을 보여줍니다. 개발 및 디버깅 프로세스를 간소화합니다. Pixel 기기를 Android Studio에 Wi-Fi를 통해 연결하는 데 어려움을 겪고 있는 경우, 이 안내서는 성공적인 연결을 설정하기 위한 명확한 단계와 팁을 제공하는 데 목적이 있습니다.\n\n# 전제 조건\n\n<div class=\"content-ad\"></div>\n\n- USB 디버깅이 활성화된 Android 기기.\n- ADB가 설치된 컴퓨터.\n- 두 기기가 동일한 Wi-Fi 네트워크에 연결되어 있어야 합니다.\n\n# 연결 방법\n\n- 초기 USB 연결: Android 기기를 컴퓨터에 USB로 연결하세요.\n- 연결 확인: 터미널이나 명령 프롬프트를 열고 다음을 실행하세요:\n\n```js\nadb devices\n```\n\n<div class=\"content-ad\"></div>\n\n요청하신 내용은 아래와 같습니다. 기기의 시리얼 번호가 출력되므로 확인하실 수 있습니다:\n\n```js\nList of devices attached\nfakeSerialNumber5g67kyd device\n```\n\n3. TCP/IP 모드로 전환하기: ADB를 5555 포트에서 TCP/IP로 수신대기 상태로 설정합니다:\n\n```js\nadb -s fakeSerialNumber5g67kyd tcpip 5555\n```\n\n<div class=\"content-ad\"></div>\n\n4. USB 케이블 연결 해제: 기기에서 USB 케이블을 안전하게 제거하세요.\n\n5. Wi-Fi로 연결: Wi-Fi 설정에서 기기의 IP 주소를 찾아 연결하세요:\n\n```js\nadb connect 192.168.0.20:5555\n```\n\n# 결론\n\n<div class=\"content-ad\"></div>\n\n안녕하세요! 이제 안드로이드 기기가 Wi-Fi로 연결되어 있으니 물리적 연결 없이도 손쉽게 ADB 명령을 실행할 수 있습니다. 이는 더 유연한 개발 환경을 제공하여 안드로이드 스튜디오에서 Pixel과 같은 기기를 사용할 때 연결 문제에 대한 추가적인 문제 해결이 필요한 경우에 이상적입니다.","ogImage":{"url":"/assets/img/2024-05-18-QuickGuideConnecttoAndroidDeviceOverWi-FiwithADB_0.png"},"coverImage":"/assets/img/2024-05-18-QuickGuideConnecttoAndroidDeviceOverWi-FiwithADB_0.png","tag":["Tech"],"readingTime":2},{"title":"안녕하세요 안드로이드 코틀린에서 Retrofit을 사용한 API 호출 포괄적인 안내입니다","description":"","date":"2024-05-18 15:26","slug":"2024-05-18-APICallswithRetrofitinAndroidKotlinAComprehensiveGuide","content":"\n\n현대 소프트웨어 개발 세계에서, 다양한 소프트웨어 구성 요소 간의 커뮤니케이션이 중요합니다. 이를 달성하는 가장 일반적인 방법 중 하나는 API (응용 프로그램 프로그래밍 인터페이스)를 통해입니다. 안드로이드 앱 개발에서 API 호출을 수행하는 경우, Retrofit은 단순성, 효율성 및 견고성으로 인해 주로 사용되는 라이브러리가 되었습니다. 이 기사에서는 Kotlin 기반 안드로이드 애플리케이션에서 Retrofit을 사용하여 API 호출하는 방법을 자세히 살펴보겠습니다. 추가로 Retrofit 인스턴스 및 ApiService를 효율적이고 일관된 방식으로 사용하기 위해 싱글톤 패턴을 구현할 것입니다.\n\n# 전제 조건:\n\n구현에 들어가기 전에 다음 항목이 설정되어 있는지 확인하십시오:\n\n- 컴퓨터에 Android Studio가 설치되어 있어야 합니다.\n- Kotlin 프로그래밍 언어에 대한 기본적인 이해가 있어야 합니다.\n- API 테스트를 위한 인터넷 연결이 필요합니다.\n\n<div class=\"content-ad\"></div>\n\n# 싱글톤 패턴으로 Retrofit 설정하기:\n\n시작하려면 Retrofit을 Android 프로젝트에 추가하고 Retrofit 인스턴스 및 ApiService에 대한 싱글톤 패턴을 구현하는 방법을 알아보세요:\n\n- Android Studio 프로젝트를 엽니다.\n- build.gradle (Module: app) 파일로 이동하여 다음 종속성을 추가하세요:\n\n```js\ndependencies {\n    // ... 다른 종속성들\n\n    implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n}\n```\n\n<div class=\"content-ad\"></div>\n\n프로젝트를 동기화하여 새로운 종속성이 추가되었는지 확인하세요.\n\n# Retrofit 및 ApiService 싱글톤 생성하기:\n\n애플리케이션 전체에서 Retrofit 및 ApiService의 단일 인스턴스를 보장하기 위해 싱글톤 패턴을 구현할 수 있습니다. 예를 들어 ApiClient.kt와 같은 새로운 Kotlin 파일을 생성하고 다음과 같이 구현할 수 있습니다:\n\n```js\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\n\nobject RetrofitClient {\n    private const val BASE_URL = \"https://jsonplaceholder.typicode.com/\"\n\n    val retrofit: Retrofit by lazy {\n        Retrofit.Builder()\n            .baseUrl(BASE_URL)\n            .addConverterFactory(GsonConverterFactory.create())\n            .build()\n    }\n}\n\nobject ApiClient {\n    val apiService: ApiService by lazy {\n        RetrofitClient.retrofit.create(ApiService::class.java)\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이 구현을 통해 애플리케이션 전반에 걸쳐 액세스할 수 있는 Retrofit 및 ApiService의 하나의 인스턴스를 갖게 됩니다.\n\n# ApiService Interface 정의:\n\n이제 Retrofit 인스턴스에 대한 싱글톤 패턴을 설정했으므로 API 엔드포인트 및 이에 대한 HTTP 메서드를 개요화하는 ApiService 인터페이스를 정의해 봅시다. ApiService.kt와 같은 새로운 Kotlin 파일을 만들고 다음을 구현해 보세요:\n\n```js\nimport retrofit2.Call\nimport retrofit2.http.GET\nimport retrofit2.http.Path\n\ninterface ApiService {\n    @GET(\"posts/{id}\")\n    fun getPostById(@Path(\"id\") postId: Int): Call<Post>\n}\n```\n\n\n<div class=\"content-ad\"></div>\n\n위 예시에서는 ID로 게시물을 가져오는 간단한 API 엔드포인트를 정의했습니다. 데이터 모델을 사용하여 Post를 교체해주세요.\n\n# 싱글톤을 사용한 API 호출:\n\nApiClient 싱글톤과 ApiService 인터페이스가 준비되어 있으면, API 호출은 간단해집니다. 활동이나 프래그먼트에서는 이제 ApiClient 싱글톤을 사용하여 API 호출을 시작할 수 있습니다. 버튼을 클릭할 때 API 호출을 수행한다고 가정해봅시다. 아래는 간단한 예시입니다.\n\n```js\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val button = findViewById<Button>(R.id.button)\n        button.setOnClickListener {\n            val postId = 1 // 가져올 게시물 ID로 교체\n            val call = ApiClient.apiService.getPostById(postId)\n\n            call.enqueue(object : Callback<Post> {\n                override fun onResponse(call: Call<Post>, response: Response<Post>) {\n                    if (response.isSuccessful) {\n                        val post = response.body()\n                        // 가져온 게시물 데이터 처리\n                    } else {\n                        // 에러 처리\n                    }\n                }\n\n                override fun onFailure(call: Call<Post>, t: Throwable) {\n                    // 실패 처리\n                }\n            })\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 결론:\n\nRetrofit을 사용하면 안드로이드 애플리케이션에서 API 호출하는 과정이 간단해집니다. Retrofit 인스턴스와 ApiService에 싱글톤 패턴을 구현하여 앱 전체에 걸쳐 단일하고 효율적인 인스턴스를 보장할 수 있습니다. 이 기사는 Kotlin 기반 안드로이드 프로젝트에서 Retrofit을 사용하여 API 호출하는 기본 사항을 다루었으며, 성능과 유지보수성을 높이기 위해 싱글톤 개념을 소개했으며 API 엔드포인트를 정의하는 ApiService 인터페이스를 포함했습니다. Retrofit과 그의 고급 기능들을 계속 탐구할 때, 싱글톤 사용이 앱의 네트워킹 레이어를 최적화하는 여러 전략 중 하나라는 것을 기억해주세요.\n\n# 추가 탐구:\n\n- Retrofit 문서 탐색: Retrofit 문서\n- 다양한 종류의 HTTP 메소드에 대해 알아보기: HTTP 메소드\n- Retrofit을 사용하여 API 호출시 오류 처리 구현하기: Retrofit을 이용한 오류 처리\n- OkHttp를 사용하여 앱의 네트워킹 레이어 강화하기: OkHttp\n- 인증 및 요청 사용자화와 같은 고급 Retrofit 주제에 대해 깊이 파고들기.\n\n<div class=\"content-ad\"></div>\n\nRetrofit 및 Android 앱 개발에서 네트워킹에 능숙해지기 위해서는 연습과 실험이 중요하다는 것을 기억해주세요.","ogImage":{"url":"/assets/img/2024-05-18-APICallswithRetrofitinAndroidKotlinAComprehensiveGuide_0.png"},"coverImage":"/assets/img/2024-05-18-APICallswithRetrofitinAndroidKotlinAComprehensiveGuide_0.png","tag":["Tech"],"readingTime":5},{"title":"간단한 안드로이드 Compose Flow 라이프사이클 처리 및 카운터로 배우기","description":"","date":"2024-05-18 15:24","slug":"2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter","content":"\n\n## 안드로이드 개발 배우기\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png)\n\n가끔 안드로이드 라이프사이클을 이해하려고 머리를 싸매면서, 정말 중요한 시나리오는 무엇인지 궁금해 할 때가 있습니다. 이해하지 못하면 적절하게 활용을 놓치게 될 수 있습니다.\n\n여기, 매우 간단한 디자인인 카운터를 고안해 보았습니다. 이를 통해 각종 간단한 라이프사이클 시나리오를 살펴볼 수 있습니다. 도움이 되길 바랍니다.\n\n<div class=\"content-ad\"></div>\n\n# 간단한 흐름\n\n간단한 카운터를 만들기 위해, 제 ViewModel에 아래와 같은 흐름이 있습니다. 매 초마다 1씩 증가하는 흐름입니다.\n\n```js\nval counter = flow {\n    var value = 0\n    while (true) {\n       emit(value++)\n       delay(1000)\n    }\n}\n```\n\nMainActivity에서 트리거된 Composable 함수에서는, 상태 변수로 수집하고 표시합니다.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsState(0)\nText(\"${stateVariable.value}\")\n```\n\n작동은 됩니다. 하지만 한 가지 문제가 있어요.\n\n## 화면을 회전하면 초기화돼요!\n\n화면을 회전할 때마다(세로에서 가로로 변경할 때) 숫자가 다시 시작돼요!\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_1.png\" />\n\n처음에는 카운터가 재설정되어 깜짝 놀랐습니다. ViewModel이 화면 회전(구성 변경)을 통해 유지되는 것에 대해 생각해 보았더니, 화면이 회전될 때마다 MainActivity가 파괴되고 카운터가 다시 수집된다는 것을 깨달았습니다.\n\n```js\nval stateVariable = viewModel.counter.collectAsState(0)\n```\n\n<div class=\"content-ad\"></div>\n\n각 컬렉션은 새로운 플로우 이벤트를 시작합니다. 따라서 화면을 회전할 때 카운터가 재설정됩니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_2.png)\n\n# 외부 변수를 플로우로 변경\n\n이 문제를 해결하기 위해 제가 고안한 해결책은 다음과 같습니다. 카운터 값을 플로우에 저장하는 대신 외부에서 정의하겠습니다.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nvar value = 0\nval counter = flow {\n    while (true) {\n       emit(value++)\n       delay(1000)\n    }\n}\n```\n\n제 MainActivity에서 트리거된 Composable Function에서는 상태 변수로만 수집하고 표시합니다.\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsState(0)\nText(\"${stateVariable.value}\")\n```\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_3.png\" />\n\n<div class=\"content-ad\"></div>\n\n이 방법은 작동합니다. 그리고 꾸준히 계속 작동합니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_4.png)\n\n## 백그라운드에서 멈추지 않음\n\n하지만 한 가지 문제가 있습니다. 앱을 백그라운드로 이동시키면 작동이 멈추지 않고 계속 실행됩니다 (활동이 종료되지 않고 계속 활성 상태로 남아 있음).\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_5.png\" />\n\n이게 이상적이지 않아요. 우리가 백그라운드로 가면(즉, 액티비티가 onPause되면), 일시 중지되기를 원했고, 다시 포어그라운드로 돌아오면 계속되기를 원했어요.\n\n그 이유는 collectAsState는 라이프사이클 변경을 인식하지 못하기 때문에, 흐름을 멈추거나 일시 중지시키지 못하기 때문이에요.\n\n## CollectAsStateWithLifecycle가 구조안으로 와서 구원을 줍니다\n\n<div class=\"content-ad\"></div>\n\n좋은 소식이 있어요. 구글에서 Manuel Vivo가 공유한 collectAsStateWithLifecycle을 소개했어요.\n\n우리는 이렇게만 하면 돼요:\n\n```kotlin\nval stateVariable = viewModel.counter.collectAsStateWithLifecycle(0)\nText(\"${stateVariable.value}\")\n```\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_6.png\" />\n\n<div class=\"content-ad\"></div>\n\n잠시 일시 중단해볼게요\n\n![image](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_7.png)\n\n## 시스템에 의해 종료될 때 상태를 저장하지 않음\n\nViewModel은 회전되더라도 앱이 계속 실행되도록 할 수 있어 좋습니다. 그러나 시스템에 의해 앱이 종료될 경우 계속 실행되지 않을 수 있습니다. 기기 메모리가 부족한 경우에는 OS가 백그라운드에서 실행 중인 앱을 종료할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n이렇게 되면 우리 카운터에 무슨 일이 벌어집니다.\n\n![LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_8.png)\n\n우리는 savedStateHandle을 사용하여 외부 값 저장 및 복원할 수 있습니다.\n\n```js\nvar value = savedStateHandle[KEY] ?: 0\nval counter = flow {\n    while (true) {\n       emit(value++)\n       savedStateHandle[KEY] = value\n       delay(1000)\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# StateFlow With Lifecycle Aware\n\n하지만 flow를 사용하고 있기 때문에, savedStateHandle에서 stateFlow를 직접 얻을 수 있다면 stateFlow를 사용해보는 것은 어떨까요?\n\n```kotlin\nval stateFlow = savedStateHandle.getStateFlow(KEY, 0)\n```\n\nflow와는 달리, stateFlow는 hot flow입니다. 이는 stateFlow 자체에서 값이 발행되지 않고, 외부에서 값을 받는다는 것을 의미합니다.\n\n<div class=\"content-ad\"></div>\n\n그래서, ViewModel에서 아래의 간단한 코드를 가지고 있어요.\n\n```js\nval stateFlowCounter = savedStateHandle.getStateFlow(KEY, 0)\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n그리고 Activity에서는 아래와 같이 수집도 해요.\n\n```js\nval stateVariable \n    = viewModel.stateFlowCounter.collectAsStateWithLifecycle()\nText(\"${stateVariable.value}\")\n```\n\n<div class=\"content-ad\"></div>\n\n이 방법은 상태Flow 변수를 저장하고 복원하므로 좋습니다.\n\n![이미지](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_9.png)\n\n그러나 이 방식에는 문제가 있습니다. collectAsStateWithLifecycle를 사용하더라도 수집 부분이 MainActivity에 있습니다.\n\nstateFlow는 핫 플로우이며, 발행 프로세스도 ViewModel에 있기 때문에 발행 프로세스는 라이프사이클을 인식하지 못한 채 계속 실행됩니다.\n\n<div class=\"content-ad\"></div>\n\n```js\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n따라서 결과는 아래와 같습니다.\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_10.png\" />\n\n회전 문제와 저장 및 복원 문제를 해결했습니다. 그러나 백그라운드에서 일시 중지되지 않는 문제가 되돌아왔습니다.\n\n<div class=\"content-ad\"></div>\n\n아래 이미지를 참고해 주세요.\n\n## WhileSubcribed가 도와 주었어요\n\n답을 찾기 위해 검색한 후, 답을 찾도록 도와준\nManuel Vivo님에게 감사드립니다.\n\n<div class=\"content-ad\"></div>\n\n간략하게 말하자면, stateFlow에 대해 WhileSubscribed를 사용하여 구독자(수집 중인)가 있는 경우에만 stateFlow가 활성화되도록 해야합니다.\n\n이를 위해 아래와 같이 stateIn을 추가해야 합니다.\n\n```js\nval stateFlowCounter = savedStateHandle\n    .getStateFlow(KEY, 0)\n    .stateIn(\n        viewModelScope,\n        SharingStarted.WhileSubscribed(0),\n        0\n    )\ninit {\n    viewModelScope.launch {\n        while (true) {\n           delay(1000)\n           savedStateHandle[KEY] = stateFlowCounter.value + 1\n        }\n    }\n}\n```\n\n이렇게 해야합니다.\n\n<div class=\"content-ad\"></div>\n\n```kotlin\nval stateVariable\n    = viewModel.stateFlowCounter.collectAsStateWithLifecycle()\nText(\"${stateVariable.value}\")\n```\n\n아래에 최신 코드가 설명되어 있습니다.\n\n<img src=\"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_12.png\" />\n\n원하는 동작을 모두 갖게 될 것입니다.\n\n<div class=\"content-ad\"></div>\n\n\n![이미지1](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_13.png)\n\n![이미지2](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_14.png)\n\n![이미지3](/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_15.png)\n\n# TL;DR\n\n\n<div class=\"content-ad\"></div>\n\n만약 Google에서 권장하는 Lifecycle Aware한 Flow를 원한다면,\n\n- 보통 플로우나 핫 플로우와 관계없이 collectAsStateWithLifecycle을 사용하세요.\n- 모든 핫 플로우 (예: StateFlow)에는 WhileSubscribed를 적용하세요.\n\n이 내용이 유용하고 상태로 수집된 Flow 및 해당 라이프사이클 처리를 설명했기를 바랍니다.\n\n여기에서 코드와 디자인을 가져와 직접 실험해 볼 수 있습니다.","ogImage":{"url":"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png"},"coverImage":"/assets/img/2024-05-18-LearnSimpleAndroidComposeFlowLifecycleHandlingWithCounter_0.png","tag":["Tech"],"readingTime":7},{"title":"로컬 영속성Android Room 데이터베이스","description":"","date":"2024-05-18 15:21","slug":"2024-05-18-LocalPersistenceinAndroidRoomDatabase","content":"\n\n![Local Persistence in Android Room Database](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_0.png)\n\n우리의 PokeAPI 시리즈를 이어서, 오늘은 사용자에게 즐겁게 포켓몬을 즐겨찾기할 수 있는 로컬 퍼시스턴스를 실험해 보겠습니다. 이를 위해 Room Database에 의존하며, Room Database는 데이터 모델을 저장하기 위한 SQLite 저장소입니다. Room에 액세스하는 패턴들은 Retrofit으로 API 요청을 생성하는 방식과 매우 유사합니다. 둘 다 Repository 패턴과 빌더를 사용하지만, 이를 한 단계씩 다룰 것입니다.\n\n# SQL이란?\n\nSQL 언어의 개념에 대해 대부분의 분들이 친숙할 것으로 기대합니다. 그러나 이 기사는 Android와 Kotlin에 더 초점을 맞추고 있기 때문에 간단히 소개하겠습니다. SQL은 관계 데이터베이스 테이블 작업에 사용되는 일반적인 언어로, 특정 데이터를 쿼리하거나 객체를 추가, 업데이트, 삭제하는 데 사용됩니다. 예를 들어, 만약 Person 테이블이 있고 18세 이상인 모든 행을 가져와 이름만 표시하려면 다음과 같이 합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nSELECT name\nFROM person\nWHERE age >= 18\n```\n\n1 . The SELECT 명령은 출력에 이름 열 만 투사합니다.\n\n2. 우리는 person 테이블에서 데이터를 검색하고 있습니다.\n\n3. 18세 이상인 행만 필터링하고 있습니다(age).\n\n<div class=\"content-ad\"></div>\n\n위에서 언급한 대로, Android 개발에서 Room이 어떻게 작동하는지 살펴보겠습니다.\n\n# 로컬 유지 보수\n\nRoom은 Android에서 로컬 데이터를 저장하는 가장 일반적인 솔루션이며, 이는 백엔드에서 원격 데이터를 처리하는 것과는 달라요. 모든 데이터는 내부 기기 데이터베이스에 저장되며, SQLite로 작동합니다. iOS에서는 이에 해당하는 솔루션으로 Core Data가 있습니다.\n\n장치에 데이터 모델을 영구적으로 저장하기 위해서는 프로젝트에 구현해야할 중요한 구성 요소가 있어요. 먼저, Gradle 파일에 필요한 종속성을 동기화해보죠.\n\n<div class=\"content-ad\"></div>\n\n```js\nannotationProcessor(\"androidx.room:room-compiler:2.6.1\")\nimplementation(\"androidx.room:room-runtime:2.6.1\")\nkapt(\"androidx.room:room-compiler:2.6.1\")\nimplementation(\"androidx.room:room-ktx:2.6.1\")\n```\n\n이제 Room 데이터베이스를 관리하는 가장 중요한 구성 요소를 구현할 수 있습니다. 아래는 우리 구조가 어떻게 보여야 하는지 입니다:\n\n![Room Database 구조](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_1.png)\n\n새로운 DAO와 같은 익숙하지 않은 층이 있는 것을 알 수 있습니다. 이에 대해 더 자세히 설명하겠습니다.\n \n\n<div class=\"content-ad\"></div>\n\n# 포켓몬 DAO\n\n저희 프로젝트에서는 Room이라는 SQLite 데이터베이스와 상호 작용하며, 모든 SQL DB처럼 SQL 쿼리를 사용하여 데이터를 조작하고 삽입합니다. DAO는 기본적으로 데이터베이스에서 상호 작용이 어떻게 이뤄지는 지를 정의하는 인터페이스입니다. Kotlin의 어노테이션의 놀라운 기능 덕분에 Kotlin 코드를 작성하지 않아도 데이터베이스를 관리하는 코드를 자동으로 생성할 수 있습니다. 어노테이션 자체가 메타데이터로 작동하여 데이터베이스를 관리하는 코드를 자동으로 생성합니다.\n\n귀하의 프로젝트 어딘가에 이 인터페이스를 생성해주십시오:\n\n```js\n@Dao\ninterface PokemonDao {\n    // 즐겨찾기 테이블의 모든 객체를 반환합니다\n    @Query(\"SELECT * FROM favorites\")\n    fun getFavorites(): Flow<List<Favorite>>\n\n    // 주어진 이름으로 포켓몬을 검색하여 해당 포켓몬을 반환합니다 (존재하면)\n    @Query(\"SELECT * FROM favorites WHERE name = :name\")\n    suspend fun getFavoriteByName(name: String): Favorite?\n\n    // 새로운 즐겨찾기 포켓몬을 삽입합니다\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertFavorite(favorite: Favorite)\n\n    // 기존 포켓몬을 업데이트합니다\n    @Update(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun updateFavorite(favorite: Favorite)\n\n    // 즐겨찾기 테이블의 모든 행을 삭제합니다\n    @Query(\"DELETE FROM favorites\")\n    suspend fun deleteAllFavorites()\n\n    // 주어진 항목을 삭제합니다\n    @Delete\n    suspend fun deleteFavorite(favorite: Favorite)\n}\n```\n\n<div class=\"content-ad\"></div>\n\n- Dao 어노테이션은 이 인터페이스가 새로운 클래스를 생성하여 Room DB에 직접 액세스할 것임을 나타냅니다.\n- Query 어노테이션은 DB에서 트리거될 SQL 쿼리를 정의하며, 이는 테이블의 행과 열을 나타내는 객체를 반환하게 됩니다. 이 경우에는 Favorite 객체(또는 DB에서 비동기적으로 가져오는 객체의 Flow)입니다.\n\n3. Insert 어노테이션은 입력된 객체가 다른 객체와 충돌할 경우(기본 키가 이미 존재하는 경우) 기존 객체를 새 객체로 대체하는 삽입 작업을 설명합니다.\n\n4. Update 어노테이션은 주어진 행의 데이터를 새로운 데이터로 대체합니다.\n\n5. Delete 어노테이션은 입력값으로 주어진 Favorite 행을 삭제함을 명시합니다.\n\n<div class=\"content-ad\"></div>\n\n위의 모든 작업은 데이터베이스를 조작하는 SQL 작업을 나타냅니다. 주석은 Kapt가 새 코드를 생성하여 데이터베이스에 액세스하는 구체적인 구현을 수행할 것입니다.\n\n# 엔티티\n\n이제 엔티티를 구현해 봅시다. 어떤 데이터베이스 모델에서의 Entity는 테이블에 해당하며, 행과 열의 집합으로, 객체 목록을 지속한다는 것을 나타냅니다. Kotlin의 엔티티는 SQL 테이블 엔티티와 매우 비슷한 컨셉으로 작동합니다.\n\n```js\n@Entity(tableName = \"favorites\")\ndata class Favorite(\n    @PrimaryKey(autoGenerate = false)\n    @ColumnInfo(name = \"id\")\n    val id: String,\n    @ColumnInfo(name = \"name\")\n    val name: String\n)\n```\n\n<div class=\"content-ad\"></div>\n\n이 데이터 클래스는 Entity로 주석이 달려 있으며 \"favorites\"라는 이름의 SQL 테이블을 나타냅니다. 각 열(속성)은 해당 테이블에서 나타내는 내용에 대한 메타데이터가 달린 변수에 해당합니다.\n\n- Entity는 데이터 클래스가 SQL 테이블에 매핑되었음을 나타냅니다.\n- PrimaryKey는 속성이 테이블에서 행을 식별하는 것을 나타냅니다. 다른 속성이 무엇이든 해당 기본 키로 해당 행이 단수식별됩니다.\n- ColumnInfo는 속성을 DB의 열 이름에 매핑합니다. 예를 들어, 이름 변수는 이름 열에 해당합니다.\n\n# Room Database\n\n이제 DB 자체를 나타내는 개체도 필요합니다. 이 객체는 우리에게 DAO라는 자체 인터페이스를 제공하는 책임이 있습니다. Kotlin 주석 처리 도구가 자동 생성하므로 다음과 같이 주석이 달린 추상 클래스를 만듭니다:\n\n<div class=\"content-ad\"></div>\n\n```kotlin\n@Database(entities = [Favorite::class], version = 1, exportSchema = false)\nabstract class PokemonDatabase: RoomDatabase() {\n    abstract fun pokemonDao(): PokemonDao\n}\n```\n\n우리에게 의미하는 바:\n\n- Database는 Favorite 모델로 표현된 단일 테이블로 구성된 Room DB 표현으로 우리의 클래스를 주석 처리합니다.\n- PokemonDao를 반환하는 단일 추상 함수를 제공하여 DB에 액세스하려고 시도할 때 호출될 것입니다.\n\n모든 것이 SQLite 로컬 데이터베이스에서 작동하는 코드를 생성할 것입니다.\n\n\n<div class=\"content-ad\"></div>\n\n# 저장소\n\n이전에 설명했듯이, 저장소 패턴은 UI 바깥의 원격 데이터 소스에 대한 패싸드 역할을 하는 레이어입니다. 일반적으로 MVVM 아키텍처를 채택할 때는 ViewModel이 액세스하며, VIPER/Clean과 함께 작업할 때는 인터랙터가 액세스합니다. 중요한 점은 저장소가 DAO 내의 모든 작업을 캡슐화하고 각 함수가 데이터 소스에 매핑되어야 한다는 것입니다:\n\n```js\ninterface FavoritesRepositoryInterface {\n    fun getFavorites(): Flow<List<Favorite>>\n    suspend fun getFavoriteByName(name: String): Favorite?\n    suspend fun insertFavorite(favorite: Favorite)\n    suspend fun updateFavorite(favorite: Favorite)\n    suspend fun deleteFavorite(favorite: Favorite)\n    suspend fun deleteAllFavorites()\n}\n\nclass FavoritesRepository(\n    private val dao: PokemonDao\n): FavoritesRepositoryInterface {\n    override fun getFavorites(): Flow<List<Favorite>> = dao.getFavorites()\n    override suspend fun getFavoriteByName(name: String): Favorite? = dao.getFavoriteByName(name)\n    override suspend fun insertFavorite(favorite: Favorite) = dao.insertFavorite(favorite)\n    override suspend fun updateFavorite(favorite: Favorite) = dao.updateFavorite(favorite)\n    override suspend fun deleteFavorite(favorite: Favorite) = dao.deleteFavorite(favorite)\n    override suspend fun deleteAllFavorites() = dao.deleteAllFavorites()\n}\n```\n\nPokemonDao를 저장소에 주입하고 각 함수가 Dao에서 다른 함수를 호출하는 것을 주목하세요. 또한 저장소는 ViewModel에 인터페이스로서 액세스되어야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# Flow 출력 x Suspend 함수\n\n첫 번째 방법이 다른 것들처럼 suspendable하지 않은 이유와 왜 모델 자체가 아닌 데이터의 Flow를 반환하는지 궁금할 수 있습니다. 실제로 이 작업은 비동기적일 것이지만 Flow 자체는 비동기적으로 도착하는 데이터의 흐름입니다. 이는 iOS에서의 Publisher와 동등하며, 데이터 소스가 보내는 많은 객체를 수신하기 위해 구독할 수 있지만, 우리는 데이터 수집 중이라고 말했다는 점에서 구독과는 다릅니다. 상태 Flow와 다르게, 이는 cold flow입니다.\n\n![image](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_2.png)\n\n두 가지의 차이는 다음과 같습니다:\n\n<div class=\"content-ad\"></div>\n\n- 다른 곳에서 반환된 Flow는 비동기가 아니지만 수집하는 것은 비동기이므로 메인 스레드 바깥에서 수행해야 합니다.\n- 일시 중단 함수를 호출할 때는 항상 코루틴에서 수행해야 합니다. 출력에 관계없이 항상 비동기 작업입니다.\n- Flow를 관찰할 때는 Flow가 반환하는 객체를 수신하는 연속적인 링크이므로 관찰을 중지할 때까지 많은 객체를 수신합니다.\n\n# Pokemon 세부 정보에서 즐겨찾기 추가\n\n이제 Pokemon 세부 화면에서 Pokemon을 즐겨찾기 기능을 추가하는 데 필요한 UI 및 기능을 추가해 보겠습니다. 먼저 앱 바에 새로운 위젯을 추가해야 합니다:\n\n```js\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun AppTopBar(\n    title: String,\n    shouldDisplayBackButton: Boolean,\n    trailingIcon: @Composable (() -> Unit) = { },\n    iconTapAction: (() -> Unit)\n) {\n    Surface(\n        shadowElevation = 4.dp,\n        color = Color.White\n    ) {\n        CenterAlignedTopAppBar(title = {\n            Text(\n                title, fontSize = 18.sp,\n                fontWeight = FontWeight.Bold\n            )\n        }, navigationIcon = {\n            if(shouldDisplayBackButton)\n                IconButton(\n                    onClick = { iconTapAction() }\n                ) {\n                    Icon(\n                        imageVector = Icons.Default.ArrowBack,\n                        contentDescription = null\n                    )\n                }\n        }, actions = {\n            trailingIcon()\n        })\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n디자인 설명에 대해서는 신경 쓰지 말고, 우리의 상세 화면에 즐겨찾기 버튼을 좋아하는 아이콘으로 적용해보자. 아이콘 틴트 색상은 포켓몬이 즐겨찾기 상태인지 아닌지에 따라 달라질 것이다. 아래 내용을 PokemonDetailsViewModel에 추가해 주세요:\n\n```kotlin\nclass PokemonDetailsViewModel(\n    private val repository: PokemonDetailsRepositoryInterface,\n    // New repository\n    private val favoritesRepository: FavoritesRepositoryInterface\n): ViewModel() {\n    private val _pokemonDetails = MutableStateFlow<PokemonDetailsModel?>(null)\n    private val _isLoading = MutableStateFlow<Boolean>(true)\n    private val _gotError = MutableStateFlow<Boolean>(false)\n    // Favorite state\n    private val _isFavorite = MutableStateFlow<Boolean>(false)\n    private var favoriteModel: Favorite? = null\n    val pokemonDetails: StateFlow<PokemonDetailsModel?> get() = _pokemonDetails.asStateFlow()\n    val isLoading: StateFlow<Boolean> get() = _isLoading.asStateFlow()\n    val gotError: StateFlow<Boolean> get() = _gotError.asStateFlow()\n    // Favorite state\n    val isFavorite: StateFlow<Boolean> get() = _isFavorite.asStateFlow()\n\n    fun fetchDetails(name: String) {\n        viewModelScope.launch {\n            _isLoading.value = true  \n            // Checks favorite status before fetching data\n            getIsFavorite(name)\n            val result = repository.getPokemonDetails(name)\n            val error = result.errorBody()\n            val data = result.body()\n            if (error != null || !result.isSuccessful) {\n                Log.d(\"Got an error\", \"Got an error\")\n                _isLoading.value = false\n                _gotError.value = true\n                return@launch\n            }\n            if (data != null) {\n                Log.d(\"Got data\", \"Got data\")\n                _isLoading.value = false\n                _pokemonDetails.value = data\n            } else {\n                Log.d(\"Got nothing\", \"Got data\")\n                _isLoading.value = false\n            }\n        }\n    }\n\n    // Checks if the pokemon is favorite or not and delegates the \n    // corresponding operation to the Repository\n    fun didClickFavorite() {\n        viewModelScope.launch {\n            if (_isFavorite.value) {\n                favoriteModel?.let {\n                    favoritesRepository.deleteFavorite(it)\n                }\n            } else {\n                pokemonDetails.value?.let {\n                    favoritesRepository.insertFavorite(Favorite(\"${it.id}\", it.name))\n                }\n            }\n        }\n        _isFavorite.value = !_isFavorite.value\n    }\n\n    // Fetches in our FavoritesRepository if the pokemon is favorite by\n    // checking the output object\n    private suspend fun getIsFavorite(name: String) {\n        favoriteModel = favoritesRepository.getFavoriteByName(name)\n        _isFavorite.value = favoriteModel != null\n    }\n}\n```\n\n- 포켓몬 이름으로 Favorite 객체를 가져와서 해당 포켓몬이 즐겨찾기 상태인지 아닌지 확인합니다. 만약 null이면 즐겨찾기가 아닙니다. Repository는 DB에서 정보를 가져오기 위해 DAO와 통신할 것입니다.\n- 포켓몬이 즐겨찾기 상태인지 여부에 관계없이 이를 isFavorite 상태 변수에 저장할 것입니다.\n- 즐겨찾기 버튼을 클릭하면 즐겨찾기 상태가 확인되고, 이에 따라 포켓몬이 태그가 달릴 것인지 여부가 결정됩니다.\n\n# UI 업데이트하기\n\n<div class=\"content-ad\"></div>\n\n이제 우리의 PokemonDetailsScreen을 업데이트하여 사용자 상호 작용에 따라 새 이벤트를 ViewModel로 위임하겠습니다. 맨 위에 있는 새로운 앱 바를 추가하기 위해 Scaffold에 넣어주세요:\n\n```js\n@Composable\nfun PokemonDetailsScreen(\n    navController: NavController,\n    name: String,\n    viewModel: PokemonDetailsViewModel = get()\n) {\n    // MARK: - State\n    val pokemonDetails = viewModel.pokemonDetails.collectAsState()\n    val isLoading = viewModel.isLoading.collectAsState()\n    val gotError = viewModel.gotError.collectAsState()\n    // Favorite State\n    val isFavorite = viewModel.isFavorite.collectAsState()\n\n    LaunchedEffect(pokemonDetails) {\n        viewModel.fetchDetails(name)\n    }\n\n    // Scaffold\n    Scaffold(topBar = {\n        // New app bar\n        AppTopBar(\n            title = \"Pokemon Details\",\n            shouldDisplayBackButton = true,\n            trailingIcon = {\n                // Manipulates and represents favorite state\n                IconButton(onClick = {\n                    viewModel.didClickFavorite()\n                }) {\n                    Icon(\n                        imageVector = Icons.Default.Favorite,\n                        contentDescription = null,\n                        tint = if(isFavorite.value) Color.Red else Color.LightGray\n                    )\n                }\n            },\n            iconTapAction = { navController.popBackStack() }\n        )\n    }) {\n        Content(\n            modifier = Modifier.padding(it),\n            isLoading = isLoading.value,\n            gotError = gotError.value,\n            pokemonDetails = pokemonDetails.value\n        )\n    }\n}\n```\n\nAppTopBar composable에 주목하고 trailing icon이 즐겨찾기 상태를 나타내는지 확인해주세요. 버튼을 클릭하면 해당 이벤트가 ViewModel로 위임됩니다.\n\n이것이 우리의 상세 화면이 보이는 방식입니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"https://miro.medium.com/v2/resize:fit:1400/1*V6RtRHdYOsE2nyptLC7PFQ.gif\" />\n\n이제 우리는 모든 즐겨찾기 아이템을 제공하는 새로운 화면을 만들겠습니다.\n\n# 즐겨찾기 화면\n\n이제 우리는 즐겨찾기 포켓몬을 표시할 새로운 화면을 만들 것입니다. 즐겨찾기 목록을 모두 가져오고 데이터를 적절히 조작할 ViewModel을 만들어주세요. 이 ViewModel은 Repository에 접근할 수 있을 것입니다:\n\n<div class=\"content-ad\"></div>\n\n``` kotlin\nclass FavoriteListViewModel(\n    private val repository: FavoritesRepositoryInterface\n): ViewModel() {\n    private val _favoriteList = MutableStateFlow<List<Favorite>>(listOf())\n\n    val favoriteList: StateFlow<List<Favorite>> get() = _favoriteList\n\n    init {\n        getFavoritePokemon()\n    }\n\n    private fun getFavoritePokemon() {\n        viewModelScope.launch {\n            repository\n                .getFavorites()\n                .distinctUntilChanged()\n                .map { it.sortedBy { it.id } }\n                .collect { _favoriteList.value = it }\n        }\n    }\n\n    fun didClickDelete(favorite: Favorite) {\n        viewModelScope.launch {\n            repository.deleteFavorite(favorite)\n        }\n    }\n}\n```\n\n알 수 있듯이, 해당 코드는 즐겨찾는 포켓몬 목록을 제공하며, 시작할 때 가져오며, 특정 포켓몬을 지우기 위해 트리거되는 삭제 기능을 제공합니다. 사용자가 특정 포켓몬을 삭제하려고 탭할 때 작동합니다.\n\n이제 새로운 화면을 만들고 내비게이션 그래프에 통합해 보겠습니다. 좀 더 정교한 디자인으로 즐겨찾는 셀을 만들겠지만, UI 부분은 이 글의 초점이 아닙니다:\n\n``` kotlin\n@Composable\nfun FavoriteListScreen(\n    navController: NavController,\n    viewModel: FavoriteListViewModel = get()) {\n    val favoriteList = viewModel.favoriteList.collectAsState()\n\n    Scaffold(topBar = {\n        AppTopBar(\n            title = \"Favorite Pokemon\",\n            shouldDisplayBackButton = true) {\n            navController.popBackStack()\n        }\n    }) {\n        Surface(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(it),\n            color = Color.White\n        ) {\n            // Favorite pokemon lazy list\n            LazyColumn(\n                modifier = Modifier.padding(20.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n                items(favoriteList.value) { item ->\n                    // Favorite Row\n                    FavoriteRow(favorite = item, clickAction = {\n                        // 셀을 클릭하면 상세 화면으로 이동합니다.\n                        navController.navigate(\"details/${item.name}\")\n                    }) {\n                        // 삭제 버튼을 클릭하면 DB에서 포켓몬을 삭제합니다.\n                        viewModel.didClickDelete(item)\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun FavoriteRow(\n    modifier: Modifier = Modifier,\n    favorite: Favorite,\n    clickAction: (() -> Unit),\n    deleteAction: (() -> Unit)\n) {\n    Surface(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(64.dp)\n            .clickable { clickAction() },\n        shape = RoundedCornerShape(\n            topStart = CornerSize(32.dp),\n            topEnd = CornerSize(4.dp),\n            bottomStart = CornerSize(32.dp),\n            bottomEnd = CornerSize(32.dp)\n        ),\n        color = Color(0xFFADD8E6)\n    ) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(horizontal = 56.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.SpaceBetween,\n        ) {\n            // 포켓몬 이름\n            Text(\n                favorite.name,\n                fontSize = 20.sp\n            )\n\n            // 삭제 버튼\n            IconButton(onClick = deleteAction) {\n                Icon(\n                    imageVector = Icons.Default.Delete,\n                    contentDescription = null,\n                    tint = Color(0x89FF1F0F)\n                )\n            }\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n저희 화면은 이렇게 나와야 합니다:\n\n![이미지](/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_3.png)\n\n이제 앱 내비게이션 레이어에 새 경로를 추가해 보겠습니다:\n\n```javascript\n@Composable\nfun PokeAPIApp(navController: NavHostController = rememberNavController()) {\n    NavHost(navController = navController, startDestination = \"list\") {\n        composable(\"list\") {\n            PokemonListScreen(navController = navController, viewModel = get())\n        }\n\n        composable(\n            \"details/{id}\",\n            arguments = listOf(navArgument(\"id\") { type = NavType.StringType }),\n            enterTransition = {\n                slideIntoContainer(\n                    towards = AnimatedContentTransitionScope.SlideDirection.Companion.Left,\n                    animationSpec = tween(700)\n                )\n            },\n            exitTransition = {\n                slideOutOfContainer(\n                    towards = AnimatedContentTransitionScope.SlideDirection.Companion.Right,\n                    animationSpec = tween(700)\n                )\n            }\n        ) { backStackEntry ->\n            backStackEntry.arguments?.getString(\"id\")\n                ?.let { PokemonDetailsScreen(navController = navController, name = it) }\n        }\n\n        composable(\"favorites\") {\n            FavoriteListScreen(navController = navController)\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n# 메인 화면에 링크 걸기\n\n즐겨찾기 화면에 접근하려면 주요 허브를 약간 변경하여 새로운 플로팅 버튼을 지원하도록 해야 합니다. PokemonListScreen 콘텐츠를 Scaffold에 포함시키고 새로운 FavoriteButton composable을 새 화면으로 연결하는 플로팅 버튼으로 배치해주세요:\n\n```js\n@Composable\nfun FavoriteButton(\n    modifier: Modifier = Modifier,\n    onClickAction: (() -> Unit)\n) {\n    IconButton(\n        modifier = modifier,\n        onClick = onClickAction\n    ) {\n        Surface(\n            shape = CircleShape,\n            color = Color.Blue\n        ) {\n            Icon(\n                modifier = Modifier.padding(8.dp),\n                imageVector = Icons.Default.Favorite,\n                contentDescription = null,\n                tint = Color.White\n            )\n        }\n    }\n}\n```\n\n```js\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun PokemonListScreen(\n    navController: NavController,\n    viewModel: PokemonListViewModel = get()\n) {\n    val pagingData = viewModel.pagingData.collectAsLazyPagingItems()\n\n    // Scaffold\n    Scaffold(topBar = {\n        Surface(\n            shadowElevation = 4.dp,\n            color = Color.White\n        ) {\n            // App bar\n            AppTopBar(title = \"Pokemon List\", shouldDisplayBackButton = false) { }\n        }\n    }, floatingActionButton = {\n        // 즐겨찾기 목록으로 이동하는 링크\n        FavoriteButton(\n            modifier = Modifier\n                .padding(bottom = 16.dp)\n        ) {\n            navController.navigate(\"favorites\")\n        }\n    }) {\n        // 기존 코드!!!\n        Surface(\n            modifier = Modifier\n                .fillMaxSize()\n                .padding(it),\n            color = MaterialTheme.colorScheme.background\n        ) {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.Top\n            ) {\n                LazyColumn {\n                    items(pagingData.itemCount) {\n                        val name = pagingData[it]?.name ?: \"\"\n                        PokemonCell(\n                            index = \"${it+1}\",\n                            name = name\n                        ) {\n                            navController.navigate(\"details/$name\")\n                        }\n                    }\n                    pagingData.apply {\n                        when {\n                            loadState.refresh is LoadState.Loading -> {\n                                item { CircularProgressIndicator() }\n                            }\n                            loadState.refresh is LoadState.Error -> {\n                                item {\n                                    ErrorState()\n                                }\n                            }\n                            loadState.append is LoadState.Loading -> {\n                                item { CircularProgressIndicator() }\n                            }\n                            loadState.append is LoadState.Error -> {\n                                item {\n                                    ErrorState()\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n이제 인터페이스가 이렇게 보입니다:\n\n![interface](https://miro.medium.com/v2/resize:fit:1400/1*H3CYZpUd982OPtcJ-vcKDw.gif)\n\n우리의 UI는 거의 완료되었지만, 한 가지 매우 중요한 부분을 잊고 있습니다: 의존성 주입.\n\n# 앱 모듈 업데이트\n\n<div class=\"content-ad\"></div>\n\n저희는 아직 데이터베이스와 DAO를 어떻게 생성할지 정의하지 않았어요. 각각을 위한 함수가 필요해요:\n\n```js\nfun providePokemonDao(database: PokemonDatabase): PokemonDao {\n    return database.pokemonDao()\n}\n\nfun providePokemonDatabase(context: Context): PokemonDatabase {\n    return Room.databaseBuilder(\n        context,\n        PokemonDatabase::class.java,\n        \"weather_database\"\n    )\n        .fallbackToDestructiveMigration()\n        .build()\n}\n```\n\nDB의 생성은 Retrofit API 인터페이스를 인스턴스화하는 패턴과 매우 유사하지만, 이번에는 RoomDatabase 서브 클래스, 앱 컨텍스트, 그리고 DB 이름을 전달해요. DAO는 PokemonDatabase 클래스의 자동 생성된 함수에서만 반환되네요.\n\n이제 모듈에 다음 DSL 표현식을 포함해주세요:\n\n<div class=\"content-ad\"></div>\n\n\n\n\n```js\nfun <PokemonDatabase> {\n   providePokemonDatabase(androidContext())\n }\n\nfun <PokemonDao> {\n    providePokemonDao(get())\n }\n\nviewModel { PokemonDetailsViewModel(get(), get()) }\n\nfun <FavoritesRepositoryInterface> { FavoritesRepository(get()) }\nviewModel { FavoriteListViewModel(get()) }\n```\n\n이제 우리 앱이 작동할 준비가 되었습니다!\n\n# 결론\n\n이 문서는 Android 앱에서 데이터를 로컬로 영속화하는 다양한 방법 중 하나를 소개했습니다. SQL을 사용하여 꽤 조직화된 패턴으로 Room 데이터베이스를 다루는 것은 관계형 데이터베이스의 SQL 테이블을 조작하는 것과 매우 유사하지만 네트워크 연결이 필요하지 않습니다. 삽입, 업데이트, 쿼리 및 삭제 작업을 조작할 수 있으며 모든 작업은 Repository 패턴을 통해 추상화될 수 있습니다. 즐겁게 읽으셨기를 바랍니다 ;)\n","ogImage":{"url":"/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_0.png"},"coverImage":"/assets/img/2024-05-18-LocalPersistenceinAndroidRoomDatabase_0.png","tag":["Tech"],"readingTime":23}],"page":"89","totalPageCount":98,"totalPageGroupCount":5,"lastPageGroup":18,"currentPageGroup":4},"__N_SSG":true}