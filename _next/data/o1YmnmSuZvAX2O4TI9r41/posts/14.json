{"pageProps":{"posts":[{"title":"숨겨진 보석 레일즈 프로젝트에 에너지를 불어넣어 줄 수 있는 잘 알려지지 않은 루비 젬들","description":"","date":"2024-06-19 22:24","slug":"2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects","content":"\n\n\n![Hidden Gems: Lesser-Known Ruby Gems That Can Supercharge Your Rails Projects](/assets/img/2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects_0.png)\n\n루비온레일즈는 강력한 프레임워크이며, 우리는 모두 Devise, RSpec, 그리고 Sidekiq과 같은 인기있는 젬들에 대해 알고 있지만, 몇 가지 잘 알려지지 않은 젬들이 있습니다. 이러한 숨겨진 보석들을 살펴보고 개발 경험을 높일 수 있는 방법을 탐구해 봅시다.\n\n# 1. Dalli\n\nDalli은 Memcached 캐싱 시스템과 시원찮게 통합되는 강력한 루비 젬입니다. 이는 빠르고 빈번하게 접근되는 데이터를 캐싱함으로써 응용 프로그램의 성능을 크게 향상시킬 수 있습니다. 세션 데이터, 조각 캐싱 또는 전체 페이지 캐싱을 다루고 있다면, Dalli가 모두 대처할 것입니다. 이렇게 사용할 수 있습니다:\n\n\n<div class=\"content-ad\"></div>\n\n```js\n# Gemfile\ngem 'dalli'\n\n# config/environments/production.rb\nconfig.cache_store = :dalli_store, 'localhost:11211', { expires_in: 1.day, compress: true }\n```\n\n# 2. Redis-Rails\n\nRedis-Rails는 캐싱 및 백그라운드 작업을 위해 Redis의 강력함을 활용하는 또 다른 젬입니다. 그것은 Rails와 원활하게 통합되어 Redis를 기본 캐시 저장소로 사용하거나 세션 데이터 저장소로 사용할 수 있게 합니다. 아래는 간단한 예시입니다:\n\n```js\n# Gemfile\ngem 'redis-rails'\n\n# config/environments/production.rb\nconfig.cache_store = :redis_store, 'redis://localhost:6379/0/cache', { expires_in: 1.day }\n```\n\n<div class=\"content-ad\"></div>\n\n## 3. ActiveSupport::Cache\n\n알려지지 않은 편은 아니지만 ActiveSupport::Cache는 더 많은 주목을 받을 가치가 있습니다. 이는 MemoryStore, FileStore 및 NullStore를 포함한 다양한 캐싱 스토어에 대한 통일된 인터페이스를 제공합니다. 응용 프로그램의 요구에 따라 이러한 스토어 간을 쉽게 전환할 수 있습니다.\n\n## 4. Rack::Cache\n\nRack::Cache는 Rails 애플리케이션과 통합되어 HTTP 캐싱을 제공하는 미들웨어입니다. 브라우저 캐싱을 처리하고 서버 부하를 줄이는 데 특히 유용합니다. config/application.rb에 다음을 추가하세요:\n\n<div class=\"content-ad\"></div>\n\n```js\r\nconfig.middleware.use Rack::Cache,\r\n  verbose: true,\r\n  metastore: 'file:/var/cache/rack/meta',\r\n  entitystore: 'file:/var/cache/rack/body'\r\n```\r\n\r\n## 5. 캐시 머니\r\n\r\n캐시 머니는 ActiveRecord 모델의 캐싱을 간편하게 해주는 젬입니다. 모델 인스턴스를 자동으로 캐시하고, 레코드가 업데이트될 때 캐시 만료를 처리합니다. 데이터베이스 쿼리의 속도를 높이고 데이터베이스 서버 부하를 줄이는 데 사용하세요.\r\n\r\n## 6. IdentityCache\r\n\n\n<div class=\"content-ad\"></div>\n\nIdentityCache는 ActiveRecord 연관을 캐싱하는 간결한 솔루션이에요. 캐시로부터 연관 레코드를 지능적으로 가져와서 데이터베이스 쿼리 횟수를 줄여줘요. 성능을 중시하는 애플리케이션에 꼭 필요한 기능이죠.\n\n## 7. Cashier\n\nCashier는 뷰에서 fragment 캐싱을 지원하는 젬이에요. 가벼우며 사용하기 쉬워요. 뷰 코드를 캐시 블록으로 감싸기만 하면 Cashier가 나머지를 처리해줄 거에요.\n\n## 8. Readthis\n\n<div class=\"content-ad\"></div>\n\nReadthis는 Redis를 백엔드로 사용하는 고성능 캐싱 젬입니다. 속도와 효율성을 고려하여 디자인되어 있어, 레일즈 애플리케이션에서 빠른 캐싱이 필요한 경우에 우수한 선택지입니다.\n\n## 9. Http::Cache\n\nHttp::Cache는 레일즈 애플리케이션에 대한 HTTP 캐싱 헤더를 제공합니다. 브라우저와 프록시가 자산을 효율적으로 캐시하도록 보장하여 서버로의 불필요한 요청을 줄입니다.\n\n## 10. Rails Cache Digests\n\n<div class=\"content-ad\"></div>\n\n레일즈 캐시 다이제스트는 프래그먼트 캐싱을 위해 캐시 키를 최적화합니다. 템플릿과 관련된 레코드를 기반으로 자동으로 캐시 키를 생성합니다. 캐시 무효화로 인한 머리 아픔을 피하려면 사용하세요.\n\n이 젬들은 잘 알려지지 않았을 수 있지만, 레일즈 프로젝트를 크게 향상시킬 수 있습니다. 그러니 자세히 살펴보고, 개발 여정을 더욱 강력하게 만들어보세요! 🚀\n\n이 글이 도움이 되었나요? 아래 댓글에 의견을 공유해주세요!","ogImage":{"url":"/assets/img/2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects_0.png"},"coverImage":"/assets/img/2024-06-19-HiddenGemsLesser-KnownRubyGemsThatCanSuperchargeYourRailsProjects_0.png","tag":["Tech"],"readingTime":3},{"title":"루비 온 레일을 위한 VS Code 익스텐션","description":"","date":"2024-06-19 22:22","slug":"2024-06-19-VSCodeExtensionsforRubyonRails","content":"\n\nVS 코드 확장 프로그램은 모두가 코드를 빠르게 작성하고 생산성을 높일 수 있도록 도와줍니다. 그래서 오늘은 내가 개인적으로 사용하고 있는 몇 가지 확장 프로그램을 소개하려고 합니다. 이 확장 프로그램들은 루비 온 레일스 프로그래밍 언어 작업에 도움이 될 것입니다.\n\n![VSCodeExtensionsforRubyonRails](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_0.png)\n\n# 확장 프로그램\n\n자, 이제 루비 온 레일스를 위한 확장 프로그램을 살펴보겠습니다.\n\n<div class=\"content-ad\"></div>\n\n# 확장 프로그램 목록:\n\n- Ruby\n- endwise\n- rufo (Ruby 형식 지정 도구)\n- ERB Formatter/Beautify\n- Rails DB Schema\n- Rails Routes Navigator\n- Ruby and Rails Snippets\n- Ruby on Rails\n- Ruby Test Explorer\n- ruby-rubocop\n\n## 1. Ruby\n\nVS Code에서 Ruby 언어 지원을 제공하는 기본 확장 프로그램입니다. Peng Lv가 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n다운로드 링크: Ruby\n\n![Ruby](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_1.png)\n\n## 2. endwise\n\n루비 블록 끝에 end를 자동으로 추가해주는 endwise입니다. 아래 데모에서 확인할 수 있습니다. Kai Wood가 제공했습니다.\n\n<div class=\"content-ad\"></div>\n\n다운로드 링크: endwise\n\n![image](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_2.png)\n\n데모:\n\n![image](https://miro.medium.com/v2/resize:fit:1400/1*J8qPrYV_2gESLCkIND2Q_w.gif)\n\n<div class=\"content-ad\"></div>\n\n## 3. rufo (Ruby formatter)\n\n컨트롤러.rb, 모델.rb 등과 같은 루비 파일을 형식화하는 확장 프로그램입니다. Matt Bessy가 제공했습니다.\n\n다운로드 링크 : rufo (Ruby formatter)\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_3.png)\n\n<div class=\"content-ad\"></div>\n\n아래는 Markdown 형식으로 작성해주세요.\n\n\nDemo :\n\n![Demo](https://miro.medium.com/v2/resize:fit:1400/1*c1SG3mtt1y-oC5Zhh7M-sA.gif)\n\n# 4. ERB Formatter/Beautify\n\n이것은 erb 파일을 서식 지정하는 데 가장 좋은 확장 프로그램 중 하나입니다. Kai Wood가 제공했습니다. 이 확장 프로그램은 기본 설정이 필요합니다. 설정에 대해 설명 된 설명을 따라 할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n다음은 번역된 내용입니다.\n\n다운로드 링크 : ERB 포매터/뷰티파이\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_4.png)\n\n# 5. Rails DB Schema\n\n사용자가 데이터베이스 스키마에 정의된 데이터를 쉽게 볼 수 있도록 도와줍니다. aki77가 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n다운로드 링크: Rails DB Schema\n\n![Rails Image](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_5.png)\n\n데모:\n\n![Demo GIF](https://miro.medium.com/v2/resize:fit:1400/1*zathg9lrHBfddkW8tHhIBg.gif)\n\n<div class=\"content-ad\"></div>\n\n# 6. 레일즈 라우트 네비게이터\n\n브라우저에서 매번 http://localhost:3000/rails/info/routes를 입력하는 것은 귀찮은 일이죠. 이 확장 프로그램은 그 문제를 해결해줍니다. 이제 사용자는 VS Code에서 직접 레일즈 라우트에 접근할 수 있습니다. 이 확장 프로그램은 makicamel이 제공합니다.\n\n다운로드 링크: [레일즈 라우트 네비게이터](링크 주소)\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_6.png)\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경해주세요.\n\n<div class=\"content-ad\"></div>\n\n루비와 레일스 코드 조각 모음입니다. Chris가 제공했습니다.\n\n다운로드 링크: Ruby 및 Rails 스니펫\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_7.png)\n\n데모:\n\n<div class=\"content-ad\"></div>\n\n\n![image](https://miro.medium.com/v2/resize:fit:520/1*AABMRsz0rJzqgV5YGfzaVw.gif)\n\n## 8. 루비 온 레일즈\n\n루비 온 레일즈 코드 단편을 위한 또 다른 확장 기능입니다. 이는 Hridoy가 제공합니다. 컨트롤러에서 CRUD에 대한 메소드를 작성하려면 CRUD를 입력하면 모든 인스턴스 변수와 함께 모든 메소드가 생성됩니다. 더 많은 사용법 관련 정보는 VS Code의 세부 정보 또는 마켓플레이스의 개요를 확인하세요.\n\n다운로드 링크: Ruby on Rails\n\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_8.png\" />\n\n# 9. Ruby Test Explorer\n\nvs code의 사이드바에서 손쉽게 테스트 케이스를 실행할 수 있어요. 매번 터미널을 확인할 필요가 없답니다. Connor Shea가 제공해요.\n\n다운로드 링크: Ruby Test Explorer\n\n<div class=\"content-ad\"></div>\n\n수정된 내용은 아래와 같습니다.\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_9.png)\n\n데모:\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_10.png)\n\n# 10. ruby-rubocop\n\n<div class=\"content-ad\"></div>\n\nRubocop은 기본적으로 코드 분석 및 형식 지정 도구입니다. Ruby 코드를 올바른 방식으로 작성하는 방법에 대한 제안을 제공합니다. Rubocop은 몇 가지 코드 구문을 수정할 수 있는 능력도 갖추고 있습니다. 이는 misogi에 의해 제공됩니다.\n\n다운로드 링크: [ruby-rubocop](ruby-rubocop)\n\n![이미지](/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_11.png)","ogImage":{"url":"/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_0.png"},"coverImage":"/assets/img/2024-06-19-VSCodeExtensionsforRubyonRails_0.png","tag":["Tech"],"readingTime":4},{"title":"테스트 더블이란 무엇이며 RSpec 3에서 어떻게 사용하는 지","description":"","date":"2024-06-19 22:21","slug":"2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3","content":"\n\n\n![Test Doubles](/assets/img/2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3_0.png)\n\n# 소프트웨어 개발에서의 테스트 더블 이해\n\n소프트웨어에 대한 테스트를 작성할 때, 종종 실제 객체나 의존성의 동작을 시뮬레이션하기 위해 \"테스트 더블\" 또는 \"모의 객체\"를 만들어야 합니다. 각각 특정 목적을 위해 사용되는 다양한 종류의 테스트 더블이 있습니다.\n\n# 테스트 더블의 종류\n\n\n<div class=\"content-ad\"></div>\n\n테스트 더블은 사용 모드와 원본에 따라 분류할 수 있어요.\n\n## 사용 모드\n\nStub: Stub은 사이드 이펙트를 발생시키지 않고 값을 반환하는 쿼리 메소드를 시뮬레이트하는 데 사용돼요. 미리 정의된 캐너드 응답을 반환합니다.\n\n```js\n# LMS 코스 모델을 위한 Stub\nstub_course = double('Course', name: 'Ruby 입문', description: '루비 기초 학습')\n```\n\n<div class=\"content-ad\"></div>\n\n모의 객체: 모의 객체는 값을 반환하는 것보다 부작용을 수행하는 명령 메서드를 테스트할 때 유용합니다. 특정 메시지가 수신되었는지 확인하고, 예상한 메시지가 수신되지 않으면 오류를 발생시킵니다.\n\n```js\n# LMS 등록 서비스용 모의 객체\nmock_enrollment_service = double('EnrollmentService')\nexpect(mock_enrollment_service).to receive(:enroll).with(user, course)\n```\n\n널 객체: 널 객체는 어떤 메시지에 대해 자신을 반환하는 친화적인 테스트 대역입니다. 여러 협력자가 있는 객체를 테스트할 때 유용합니다.\n\n```js\n# LMS 사용자용 널 객체\nnull_user = double('User').as_null_object\nnull_user.enroll_in_course(course)\n```\n\n<div class=\"content-ad\"></div>\n\n스파이: 스파이들은 받은 메시지를 기록하여 특정 메시지가 올바른 매개변수로 호출되었음을 확인할 수 있게 해줍니다.\n\n```js\n# LMS 알림 서비스용 스파이\nspy_notification_service = spy('NotificationService')\nspy_notification_service.send_notification(user, '환영합니다!')\nexpect(spy_notification_service).to have_received(:send_notification).with(user, '환영합니다!')\n```\n\n## 원점\n\n테스트 더블의 사용 모드를 이해하는 것 외에도, 그 원점과 유형을 알아야 합니다. 테스트 더블은 순수한(pure), 부분적인(partial), 또는 확인(verify)할 수 있는 것으로, 각각 다른 목적을 제공합니다.\n\n<div class=\"content-ad\"></div>\n\n순수 더블: 순수 더블은 RSpec과 같은 테스트 프레임워크에 의해 목적에 맞게 생성되며 해당 행동이 완전히 추가된 것으로 구성됩니다. 의존성을 전달할 수 있는 코드를 테스트하기 위해 유연하고 사용하기 쉽습니다.\n\n```js\n# LMS 강좌를 위한 순수 더블\npure_course = double('Course')\nallow(pure_course).to receive(:name).and_return('루비 입문')\n```\n\n부분 더블: 때로는 테스트 중인 코드가 간단한 의존성 주입을 허용하지 않을 수 있습니다. 이러한 경우 기존 Ruby 객체에 모의(Mocking) 및 스텁(Stubbing) 행동을 추가하는 부분 더블을 사용할 수 있습니다.\n\n```js\n# 내장된 Ruby Time 클래스의 부분 더블\nallow(Time).to receive(:now).and_return(Time.new(2023, 6, 1))\n```\n\n<div class=\"content-ad\"></div>\n\n더블 검증: 더블 검증은 테스트 더블과 실제 의존성이 동기화되지 않을 때 문제를 찾는 데 도움이 됩니다. 더블의 인터페이스를 실제 클래스나 객체에 기반하여 제한하여 메서드 변경을 감지합니다.\n\n```js\n# LMS 사용자 클래스의 더블 검증\nuser = instance_double('User')\nallow(user).to receive(:enroll_in_course)\n```\n\n오버로드된 상수: 테스트 더블은 루비 상수를 바꾸거나 제거하여 테스트 기간 동안 환경을 제어할 수 있습니다.\n\n```js\n# 기본 등록 기간을 위한 상수 스텁\nstub_const('LMS::DEFAULT_ENROLLMENT_PERIOD', 7)\n```\n\n<div class=\"content-ad\"></div>\n\n테스트 더블은 사용 모드와 원본을 모두 결합할 수 있어요. 예를 들어, 순수한 더블이 스텁으로 작동하거나 검증 더블이 스파이로 작동하는 경우가 있을 수 있어요.","ogImage":{"url":"/assets/img/2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3_0.png"},"coverImage":"/assets/img/2024-06-19-WhatAreTestDoublesandHowToUseTheminRSpec3_0.png","tag":["Tech"],"readingTime":3},{"title":"루비 온 레일즈에서 라우트를 구성하는 팁","description":"","date":"2024-06-19 22:19","slug":"2024-06-19-TipsfororganizingyourroutesinRubyonRails","content":"\n\n\n![Route Organization Tips](/assets/img/2024-06-19-TipsfororganizingyourroutesinRubyonRails_0.png)\n\nroutes.rb 파일은 Ruby on Rails 개발 프로젝트의 중요한 부분입니다. 이 파일은 사실상 우리 애플리케이션의 지도 역할을 합니다. 따라서 이를 잘 구성하는 것이 중요합니다. 보통 모듈로 라우트를 구성하거나 알파벳 순으로 정리하여 시작하지만, 시간이 지남에 따라 이 파일은 종종 길들이기 어려운 정글로 변할 수 있습니다.\n\n이는 집 안의 창고와 비슷합니다. 정리되지 않은 물건들을 보관하는 곳으로, 처음에는 무엇이 어디에 있는지 알 수 있지만 언젠가는 들어가서 무언가를 찾으려 하면, 과거에 사용한 스케이트보드와 할머니가 남긴 썩은 나무 상자 위에 오래된 사진과 첫 번째 애왔던 Tony의 목줄이 있는 전쟁터 같아집니다.\n\n나는 그런 혼돈을 좋아하지 않기 때문에, 이 글에서는 routes.rb라는 그 창고를 잘 정리하는 데 매우 유용했던 몇 가지 실천 방법을 공유하겠습니다.\n\n\n<div class=\"content-ad\"></div>\n\n프로젝트에 미친 영향에 따른 팁 목록이에요. 각 팁은 독립적으로 적용할 수 있어, 모두 읽을 필요 없이 가장 관심 있는 부분으로 바로 이동해도 돼요.\n\n- 알파벳 순으로 정리된 라우트\n- Resource 및 resources\n- only, not except\n- 네임스페이스\n- 제약 조건\n- 관련 사항\n\n# 1. 알파벳 순으로 정리된 라우트\n\n이 팁은 우연이 아니라 제일 앞에 있어요; 저는 이것을 가장 중요하게 생각해요. 알파벳 순으로 라우트를 정리하는 것만으로가 아니라 팀 간 합의를 수립하는 중요성 때문에 최상의 결과를 가져다 주었어요.\n\n<div class=\"content-ad\"></div>\n\n개인적으로 나는 루비 온 레일즈의 가장 중요한 전제 중 하나는 Convention over Configuration이라고 생각해. 프레임워크가 제안한 규칙을 따르면 대개 좋은 결과를 얻을 수 있어. 이는 개발팀의 누구나 코드 조각을 찾거나 새로운 지시사항을 추가할 위치를 잘 알 수 있기 때문에 중요한데, 이것은 시간을 절약할 뿐만 아니라 결정을 내릴 부담을 덜어줘. 결국 스티브 잡스가 매일 같은 옷을 입은 이유가 있었을 테니까.\n\n우리 라우트에도 동일한 원칙을 적용해야 해: 유지보수를 가능한 간단하고 깔끔하게 유지하기 위해 팀의 규칙을 확립해야 돼.\n\n다양한 프로젝트에서 우리는 여러가지 규칙을 준수해왔어: 모듈별로 구성, 다른 파일로 분리, 알파벳 순으로 정렬 등. 의심의 여지없이 가장 간단하고 실용적인 접근 방식은 라우트 파일을 알파벳 순으로 정렬하는 것이었어. 라우트가 많다면 파일을 분리하는 것도 도움이 될 수 있지만, 절대적으로 필요하지 않은 한 그것은 피하는 편이 좋을 거야.\n\n<div class=\"content-ad\"></div>\n\n어떤 프로젝트의 비즈니스 레이어가 서로 통신하고 상호작용하는 객체로 표현되는 것과 같이, 저는 라우트를 리소스의 동작으로 보는 것을 좋아해요. 이러한 이유로, 저희 프로젝트에서 정의하는 거의 모든 라우트들은 일반적으로 특정 리소스와 연관되어 있습니다.\n\n레일즈는 이를 처리하기 위해 다양한 메커니즘을 제공하지만, 기본적으로는 resources와 resource를 사용하는 것이 일반적입니다. 또한, 필요한 경우 리소스 라우트를 중첩시킬 수 있어서 아래와 같은 결과를 얻을 수 있습니다:\n\n```js\nresources :articles do\n  resources :comments\nend\n```\n\n⚠️ 중첩은 매우 유용할 수 있지만, 복잡성을 도입할 수 있으므로 조심해야 합니다. 한 단계 이상 중첩을 사용하지 않는 것을 권장합니다.\n\n<div class=\"content-ad\"></div>\n\n## 얕은 중첩\n\n중첩의 한 가지 문제는 중첩된 리소스의 멤버 라우트가 부모 안에 포함된다는 것입니다.\n\n이전 예제에서, 댓글에 대한 라우트는 다음과 같이 article 내에 중첩될 것입니다:\n\n```js\nGET /articles/:article_id/comments\nGET /articles/:article_id/comments/new\nPOST /articles/:article_id/comments\n\nGET /articles/:article_id/comments/:id <===== ⚠️\nGET /articles/:article_id/comments/:id/edit <===== ⚠️\nDELETE /articles/:article_id/comments/:id <===== ⚠️\nPUT/PATCH /articles/:article_id/comments/:id <===== ⚠️\n```\n\n<div class=\"content-ad\"></div>\n\n첫 세 개의 루트는 괜찮아 보이지만 특정 댓글을 포함하는 루트는 기사 안에서 어색해 보입니다.\n\n이 문제를 해결하기 위해 우리는 다음과 같이 루트를 정의할 수 있습니다:\n\n```js\nresources :articles do\n  resources :comments, only: [:index, :new, :create]\nend\nresources :comments, only: [:show, :edit, :update, :destroy]\n```\n\n이렇게 정의하면 다음과 같은 루트가 생성되는데, 내 의견으로는 훨씬 더 의미가 있다고 생각합니다:\n\n<div class=\"content-ad\"></div>\n\n```js\nGET /articles/:article_id/comments\nGET /articles/:article_id/comments/new\nPOST /articles/:article_id/comments\n\nGET /comments/:id <===== ✅\nGET /comments/:id/edit <===== ✅\nDELETE /comments/:id <===== ✅\nPUT/PATCH /comments/:id <===== ✅\n```\n\n이 같은 결과를 얻으려면 shallow 매개변수를 사용할 수 있습니다:\n\n```js\nresources :articles do\n resources :comments, shallow: true\nend\n```\n\n## 리소스와 관련이 없는 라우트는 어떻게 처리해야 합니까?\n\n<div class=\"content-ad\"></div>\n\n이건 좀 이상한 냄새가 난다고 봐요. 이런 경로 뒤에는 숨겨진 자원이 있을 가능성이 높습니다.\n\n하지만 여전히 routes.rb에는 독립적인 경로가 있습니다. 예를 들어 로그인, 로그아웃 그리고 아마도 헬스체크 등이 떠오를 거예요.\n\n```js\npost 'login' => 'sessions#login', as: :login\ndelete 'logout' => 'sessions#logout', as: :logout\nget 'up' => 'rails/health#show', as: :rails_health_check\n```\n\n# 3. Only, not except\n\n<div class=\"content-ad\"></div>\n\n저는 개발자로서 \"암시하는 것보다 명확히 표현하는 것이 항상 낫다\"는 규칙을 따릅니다. 몇 마디나 한 줄의 코드, 심지어 주석을 절약하려는 우리의 시도에서는 종종 응용 프로그램에서 문제를 발생시키거나 미래 개발자가 우리의 작업을 상속할 때 어렵게 만들 수 있습니다. (네, 제가 주석을 선호합니다.)\n\n저는 라우트에도 같은 규칙을 적용하며 only를 except 대신 선호합니다. except를 사용하는 것이 편리할 수 있지만, 사용하지 않을 라우트를 생성할 가능성이 있습니다.\n\n그래서 라우트에서 리소스를 생성할 때 처음으로 하는 일은 only 매개변수를 추가하는 것입니다.\n\n```js\nresources :products, only: %i[index new create show]\nresources :users, only: %i[index new create destroy]\n```\n\n<div class=\"content-ad\"></div>\n\n# 4. 네임스페이스\n\n네임스페이스를 통해 라우트를 컨트롤러 그룹으로 구분하여 로직을 모듈화하는 데 도움이 됩니다.\n\n다음과 같은 상황에서 특히 유용합니다:\n\n1) 명확히 분리된 하위 시스템이 있는 경우. 예를 들어 백오피스와 프론트엔드.\n\n<div class=\"content-ad\"></div>\n\n2) 어플리케이션이 발전하면서 복잡도가 증가하고, 컨트롤러를 그룹/모듈로 분리하고 싶을 때 아래와 같이 코드를 작성할 수 있습니다.\n\n```js\nnamespace :admin do\n  resources :payments\n  resources :users\nend\n\nnamespace :ads do\n  resource :report, only: %i[show]\nend\n\nnamespace :finance do\n  resource :report, only: %i[show]\n```\n\n이렇게 하면 다음과 같은 컨트롤러가 생기게 됩니다:\n\n```js\nAdmin::PaymentsController # app/controllers/admin/payments_controller.rb\nAdmin::UsersController # app/controllers/admin/users_controller.rb\nAds::ReportController # app/controllers/ads/report_controller.rb\nFinance::ReportController # app/controllers/finance/report_controller.rb\n```\n\n<div class=\"content-ad\"></div>\n\n# 5. 제약 조건\n\n제약 조건은 경로에 할당할 수 있는 제한 사항입니다. 제약 조건을 정의할 때는 요청 객체에서 지정된 메서드가 호출되고 반환된 값이 매개변수 값과 비교됩니다.\n\n대표적인 예로 하위 도메인 제약 조건이 있습니다. 예를 들어 어드민을 위한 경로를 위한 제약 조건을 정의할 수 있습니다.\n\n```js\nnamespace :admin do\n  constraints subdomain: 'admin' do\n    resources :users\n  end\nend\n```\n\n<div class=\"content-ad\"></div>\n\n# 6. 고려 사항\n\n또 다른 유용한 도구는 concerns 입니다. 이를 사용하면 일반적인 경로를 정의하고 이후 서로 다른 리소스에 사용할 수 있습니다.\n\n예를 들어 최근 프로젝트에서 사용한 하나의 concern을 공유하겠습니다. 애플리케이션에는 다양한 리소스가 있었고, 이러한 리소스는 목록 내에서 순서를 변경할 수 있었 즉, 위치를 변경할 수 있었습니다. 이 위치를 변경하는 라우트는 코드베이스 전체에서 반복되어 사용되었기 때문에 이를 concern으로 추출했습니다:\n\n```js\nconcern :positionable do\n  patch :update_position, on: :member\nend\n\nresources :categories, only: %i[index new create], concerns: %i[positionable]\nresources :category_groups, concerns: %i[positionable] \nresources :sections, only: %i[index new create destroy], concerns: %i[positionable]\n```  \n\n<div class=\"content-ad\"></div>\n\n⚠️ 주의점은 코드에서 간접성을 소개합니다. 공통 경로를 추출할 가치가 있는지 여쭤보는 것이 중요합니다. 때로는 간접성을 소개하는 것보다 코드를 반복하는 것이 나을 수 있습니다.\n\n저희가 루트 파일을 작성하는 데 따르는 몇 가지 관례입니다. 팀원과 동일한 규칙을 따를 필요는 없습니다. 이는 우리에게 효과가 있었던 사례입니다.\n\n가장 중요한 것은 팀과 공통 규칙에 동의하여 루트 파일이 가장 깔끔하고 유지 관리가 가능하도록 하는 것입니다.\n\nUnagi는 Ruby on Rails에서 12년 이상 선택한 스택을 사용하는 소프트웨어 부티크입니다. 자세한 내용은 소셜 미디어를 확인해보세요.","ogImage":{"url":"/assets/img/2024-06-19-TipsfororganizingyourroutesinRubyonRails_0.png"},"coverImage":"/assets/img/2024-06-19-TipsfororganizingyourroutesinRubyonRails_0.png","tag":["Tech"],"readingTime":6},{"title":"이 RSpec 팁들로 테스트 종속성을 작별하세요","description":"","date":"2024-06-19 22:18","slug":"2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips","content":"\n\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png)\n\n개발자가 직면하는 일반적인 문제 중 하나는 테스트 의존성을 관리하는 것입니다.\n\n여기서 테스트 더블이 구원을 줍니다. 테스트 더블은 실제 객체 대신 사용되며 해당 객체의 동작을 제어할 수 있습니다.\n\n# RSpec 3에서 응답 구성하기\n\n\n<div class=\"content-ad\"></div>\n\n# 테스트 더블 생성하기\n\n테스트 더블은 실제 객체 대신에 테스트에서 사용되며, 그들의 동작을 제어할 수 있게 해줍니다. 목, 스텁, 스파이를 포함해 여러 종류의 테스트 더블이 있습니다. 여기서는 그들의 응답을 구성하는 데 중점을 둘 것입니다.\n\n# 메서드가 값 반환하도록 허용하기\n\n특정 값을 반환하도록 메서드를 구성하는 데 allow를 사용할 수 있습니다:\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_1.png\" />\n\n# 예외 발생시키기\n\n예외 처리를 테스트하려면 메소드를 구성하여 오류를 발생시킬 수 있습니다:\n\n<img src=\"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_2.png\" />\n\n<div class=\"content-ad\"></div>\n\n# 블록에 양보하기\n\n가끔은 더블을 블록에 값을 양보해야 할 때가 있습니다. 반복자나 콜백을 다룰 때 유용합니다:\n\n![이미지](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_3.png)\n\n# 여러 값을 반환하기\n\n<div class=\"content-ad\"></div>\n\n연이어 호출할 때 다른 값을 반환하는 방법이 필요하다면 and_return에 여러 인수를 전달할 수 있습니다:\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_4.png)\n\n## 부분 더블 구성\n\n부분 더블은 실제 객체의 메서드를 모의(Mock)하거나 스텁(Stub)하는 동시에 객체의 나머지 동작을 유지하는 것을 가능하게 합니다. 객체의 특정 부분 동작을 테스트하고 싶을 때 전체 객체를 대체하지 않고 유용합니다.\n\n<div class=\"content-ad\"></div>\n\n# 원본 메서드 호출하기\n\n일부 호출에 대해 부분 더블에게 원본 메서드를 호출하도록 지시할 수 있습니다:\n\n![image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_5.png)\n\n# 원본 메서드 감싸기\n\n<div class=\"content-ad\"></div>\n\n메소드의 동작을 수정하면서 원본 구현을 호출할 수도 있어요:\n\n![Image](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_6.png)\n\n## 고급 사용자 정의\n\n## 간헐적 동작\n\n<div class=\"content-ad\"></div>\n\n보다 복잡한 동작을 시뮬레이션하기 위해 네트워크 장애와 같은 부분적인 특성을 정의하기 위해 블록을 사용하세요:\n\n![이미지](/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_7.png)\n\n# 팁과 꿀팁\n\n- 구체적으로 설정하세요: 테스트 더블을 구성할 때 제한 사항을 가능한 한 명확하게 지정하여 테스트가 의미 있는지 확인하세요.\n- 부분적인 더블을 현명하게 사용하세요: 부분적인 더블은 강력하지만 테스트 사이의 강하게 결합된 테스트로 이어질 수 있습니다. 전체 객체를 교체하지 않고 특정 상호 작용을 테스트하기 위해 사용하세요.\n- 유지보수 가능한 테스트 유지하세요: 명확하고 간결한 테스트를 작성하여 테스트 스윗을 유지하세요. 지나치게 복잡한 테스트 로직을 피하세요.","ogImage":{"url":"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png"},"coverImage":"/assets/img/2024-06-19-SayGoodbyetoTestDependencieswithTheseRSpecTips_0.png","tag":["Tech"],"readingTime":3},{"title":"Rails에서 낙관적 락킹은 무엇인가요","description":"","date":"2024-06-19 22:17","slug":"2024-06-19-Whatisoptimisticlockinginrails","content":"\n\n낙관적 락킹은 데이터베이스 시스템에서 동시에 여러 사용자가 데이터에 동시 액세스를 관리하는 동시성 제어 메커니즘입니다. 충돌이 드물고 트랜잭션이 일반적으로 서로 간섭하지 않을 것으로 가정합니다. 비관적 락킹과 달리 최적적 락킹은 데이터를 처음 액세스할 때 잠그는 대신, 트랜잭션이 커밋하려고 할 때만 충돌을 확인합니다.\n\n다음은 작동 방식입니다:\n\n- 트랜잭션 시작: 트랜잭션이 레코드를 읽을 때 해당 레코드와 연관된 버전 번호 또는 타임스탬프도 검색합니다.\n- 트랜잭션 처리: 트랜잭션은 데이터를 로컬로 변경합니다.\n- 커밋: 커밋하기 전에 트랜잭션은 데이터베이스에서 레코드의 버전 번호 또는 타임스탬프를 확인합니다:\n\n    - 트랜잭션이 시작되었을 때 버전 번호나 타임스탬프가 변경되지 않았다면, 트랜잭션은 변경 사항을 커밋합니다.\n    - 버전 번호나 타임스탬프가 변경되었다면 (다른 트랜잭션이 레코드를 수정했다는 것을 나타냄), 해당 트랜잭션은 중지되고 다시 시도해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n# 낙관적 락킹 예시\n\n간단한 예시로 온라인 상점의 제품을 위한 데이터베이스 테이블을 고려해 봅시다:\n\n## 제품 테이블:\n\n![Products Table](/assets/img/2024-06-19-Whatisoptimisticlockinginrails_0.png)\n\n<div class=\"content-ad\"></div>\n\n## 시나리오\n\n- 사용자 A는 버전 번호가 1인 \"위젯\"(ProductID=1)의 제품 세부 정보를 읽습니다.\n- 사용자 B는 동일한 제품 \"위젯\"의 버전 번호가 1인 제품 세부 정보를 읽습니다.\n- 사용자 A가 \"위젯\"의 가격을 $12.00으로 업데이트하고 트랜잭션을 커밋하려고 합니다:\n\n- 시스템은 데이터베이스 내 \"위젯\"의 현재 버전 번호를 확인합니다(아직 1).\n- 버전 번호가 일치하므로 업데이트가 진행되고, 가격이 $12.00으로 설정되고, 버전 번호가 2로 증가합니다.\n\n4. 이제 사용자 B가 \"위젯\"의 가격을 $11.00으로 업데이트하려고 합니다:\n\n<div class=\"content-ad\"></div>\n\n- 시스템은 데이터베이스에서 \"위젯\"의 현재 버전 번호를 확인합니다 (현재 2).\n- 버전 번호가 변경되었으므로 다른 트랜잭션이 레코드를 수정했다는 것을 나타내어, 사용자 B의 트랜잭션이 실패합니다.\n- 사용자 B는 업데이트된 레코드(버전 2)를 읽어 트랜잭션을 다시 시도해야 합니다.\n\n# 장단점\n\n장점:\n\n- Non-blocking: 낙관적 잠금은 잠금을 유지하는 오버헤드를 피함으로써 여러 사용자가 대기없이 동일한 데이터로 작업할 수 있습니다.\n- 확장성: 충돌 비율이 낮은 환경에서 더 확장 가능하며, 이는 리소스에 대한 경합을 줄여줍니다.\n\n<div class=\"content-ad\"></div>\n\n단점:\n\n- 다시 시도 필요: 충돌이 커밋 시간에 감지되면 트랜잭션이 다시 시도될 수 있습니다.\n- 고 갈등 환경에 적합하지 않음: 고 갈등 환경에서는 충돌 가능성이 증가하여 더 자주 다시 시도하게 되고 성능이 감소할 수 있습니다.\n\n다음은 루비 온 레일즈에서 낙관적 잠금을 구현하는 예시입니다.\n\n우리가 제품 테이블을 가지고 있다고 가정해봅시다:\n\n<div class=\"content-ad\"></div>\n\n```ruby\nclass CreateProducts < ActiveRecord::Migration[6.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n      t.decimal :price, precision: 8, scale: 2\n      t.integer :lock_version, default: 0, null: false\n\n      t.timestamps\n    end\n  end\nend\n```\n\n## 모델 정의\n\n다음으로 Product 모델을 정의하세요. lock_version 열은 Rails에서 낙관적 락킹에 자동으로 사용됩니다.\n\n```ruby\nclass Product < ApplicationRecord\nend\n```\n\n<div class=\"content-ad\"></div>\n\n## 예시 사용법\n\n담아 두고 있는 상황에서는 어떻게 낙관적 락을 사용할 수 있을까요:\n\n## 사용자 A와 사용자 B가 동일한 레코드를 읽고 있는 경우\n\n```js\n# 사용자 A\nuser_a_product = Product.find(1) # id가 1인 제품을 읽음\n# user_a_product.lock_version은 0입니다\n\n# 사용자 B\nuser_b_product = Product.find(1) # 동일한 제품을 읽음\n# user_b_product.lock_version도 0입니다\n```\n\n<div class=\"content-ad\"></div>\n\n## 사용자 A가 레코드를 업데이트합니다\n\n```js\n# 사용자 A가 가격을 업데이트합니다\nuser_a_product.price = 12.00\nuser_a_product.save\n# 이로써 lock_version이 1로 증가합니다\n```\n\n## 사용자 B가 레코드를 업데이트하려고 합니다\n\n```js\n# 사용자 B가 가격을 업데이트하려고 합니다\nuser_b_product.price = 11.00\nbegin\n  user_b_product.save\nrescue ActiveRecord::StaleObjectError\n  puts \"이전 정보가 감지되었습니다.\"\n  # 충돌을 처리하기 위해 레코드를 다시 불러와서 재시도할 수 있습니다\n  user_b_product.reload\n  # 이제 user_b_product.lock_version은 1입니다\n  # 사용자 B가 업데이트를 다시 시도할지 결정할 수 있습니다\nend\n```\n\n<div class=\"content-ad\"></div>\n\n## 충돌 처리\n\nActiveRecord::StaleObjectError가 발생하면, 해당 레코드가 읽힌 후 다른 트랜잭션에 의해 수정되었음을 나타냅니다. 이를 처리하기 위해 레코드를 다시 불러오고 사용자에게 알릴 수도 있으며, 트랜잭션을 다시 시도하거나 애플리케이션 로직에 따라 변경 사항을 병합할 수 있습니다.\n\n## 완전한 예제\n\n```js\nclass ProductsController < ApplicationController\n  def update\n    @product = Product.find(params[:id])\n    @product.assign_attributes(product_params)\n\n    begin\n      @product.save\n      flash[:notice] = \"제품이 성공적으로 업데이트되었습니다.\"\n    rescue ActiveRecord::StaleObjectError\n      flash[:alert] = \"제품이 다른 사용자에 의해 업데이트되었습니다. 변경 사항을 검토하고 다시 시도해주세요.\"\n      @product.reload\n      # 선택적으로 사용자의 변경 사항을 다시 적용하고 통합된 양식을 사용자에게 제시할 수 있음\n    end\n\n    redirect_to @product\n  end\n\n  private\n\n  def product_params\n    params.require(:product).permit(:name, :price)\n  end\nend\n```\n\n<div class=\"content-ad\"></div>\n\n## 결론\n\n이 예는 Ruby on Rails 애플리케이션에서 낙관적 잠금을 사용하는 방법을 보여줍니다. lock_version 열을 포함하고 Active Record의 내장 메커니즘을 사용하여 Rails는 버전 확인을 자동으로 처리하고 충돌이 감지되면 예외를 발생시킵니다. 이를 통해 애플리케이션이 적절하게 처리할 수 있도록 합니다.","ogImage":{"url":"/assets/img/2024-06-19-Whatisoptimisticlockinginrails_0.png"},"coverImage":"/assets/img/2024-06-19-Whatisoptimisticlockinginrails_0.png","tag":["Tech"],"readingTime":4},{"title":"2023년에 Rust 프로그래밍 언어의 10가지 최고 사용 사례","description":"","date":"2024-06-19 22:15","slug":"2024-06-19-10BestUseCasesofRustProgrammingLanguagein2023","content":"\n\n2021년에는 러스트가 Ruby와 JavaScript에 익숙했던 나에게 새로운 프로그래밍 언어를 배우려는 호기심을 자극했습니다. 그 당시에 받았던 관심이 나를 호기심 가득하게 만든 것 같아요. 그래도요.\n\n러스트는 안전성, 속도, 그리고 동시성에 중점을 둔 시스템 프로그래밍 언어입니다. 그럼 이게 무슨 뜻일까요?\n\n요약하자면 러스트는 제약이 있는 하드웨어와 밀접하게 상호작용하는 저수준 소프트웨어를 개발하는 데 가장 적합하다는 뜻입니다.\n\n제가 소프트웨어 프로그래밍 인생의 대부분을 루비 개발자로 지내왔기 때문에, 이 모든 것을 이해하기 위해 러스트 관련 서적을 많이 읽고 러스트로 코딩을 많이 해봤답니다.\n\n<div class=\"content-ad\"></div>\n\n루비에서 러스트로 전환을 고민하고 있는 경우, 루스트와 루비 프로그래밍 언어 간 간단한 비교를 제공해 드립니다:-\n\n```js\n| 기능              | 러스트                            | 루비                                   |\n|------------------|---------------------------------|----------------------------------------|\n| 언어의 종류      | 시스템 프로그래밍 언어            | 고수준 스크립팅 언어                   |\n| 초점              | 안정성, 속도, 동시성              | 생산성 및 사용 편의성                   |\n| 성능              | 빠르고 효율적                    | 컴파일된 언어에 비해 느림                |\n| 메모리 관리      | 엄격하게, 컴파일러에 의해 강제     | 자동적으로, 가비지 컬렉터에 의해 처리    |\n| 동시성            | 동시 작업에 적합                 | 제한된 동시성 기능                     |\n| 오류 처리        | 오류 방지에 초점                 | 오류 허용, 종종 오류 발생               |\n| 구문              | 저수준, 구문이 더 엄격            | 고수준, 구문이 더 유연                 |\n| 사용 사례        | 저수준 시스템 프로그래밍           | 웹 개발, 스크립팅, 프로토타이핑      |\n```\n\n루비, PHP, 파이썬, 자바, 자바스크립트 등의 개발자 중 대부분은 러스트를 다른 웹 개발 프로그래밍 언어로 간주하지만, 저는 특히 임베디드 장치, IoT, 로봇, 산업 자동화 장치, 자동차 장치에서 실행되는 소프트웨어 개발에 적합하다고 생각합니다.\n\n2023년 러스트 언어의 주요 사용 사례를 탐색해 봅시다:-\n\n<div class=\"content-ad\"></div>\n\n## 러스트 언어를 사용하는 10가지 최고의 사용 사례\n\n## IoT\n\n사물 인터넷(IoT)은 급속히 성장하는 분야이며, 러스트는 이 분야에서 중요한 사용 사례를 발견했습니다.\n\nIoT 장치는 일반적으로 제한된 자원을 가지고 있으며, 러스트의 메모리 안전성과 저수준 제어는 임베디드 시스템을 개발하는데 뛰어난 선택지로 만듭니다.\n\n<div class=\"content-ad\"></div>\n\n라스트의 동시성 처리 능력은 여러 연결을 다루는 애플리케이션에 적합합니다.\n\n## 임베디드 시스템\n\n라스트의 메모리 안전성과 제어에 대한 초점은 임베디드 시스템을 개발하는 데 탁월한 선택으로 만들어냈습니다.\n\n임베디드 시스템은 의료 기기, 항공우주 및 자동차 시스템을 포함한 다양한 응용분야에서 사용됩니다.\n\n<div class=\"content-ad\"></div>\n\nRust의 기능 덕분에 저수준 하드웨어 드라이버와 운영 체제를 개발하기에 적합해요.\n\n## 로봇공학\n\n로봇공학은 Rust가 많이 활용되는 또 다른 분야에요.\n\n로봇공학은 실시간 처리를 필요로 하며, Rust의 저수준 제어와 메모리 안전성은 실시간 애플리케이션을 개발하기에 이상적해요.\n\n<div class=\"content-ad\"></div>\n\n러스트의 동시성 기능은 여러 스레드를 효율적으로 처리할 수 있게 해줘 로봇 응용 프로그램에서 중요합니다.\n\n## 산업 자동화\n\n산업 자동화는 또 다른 분야로, Rust가 많은 사용 사례를 찾았습니다.\n\n산업 자동화는 복잡한 시스템을 제어하는 것을 포함하며, Rust의 안전성과 저수준 제어에 대한 초점은 제어 시스템을 개발하기에 이상적입니다.\n\n<div class=\"content-ad\"></div>\n\n러스트는 동시성을 처리할 수 있는 능력으로 여러 장치를 동시에 다루기에 적합합니다.\n\n## 자동차\n\n자동차들은 점점 더 연결되고 있으며, 러스트의 메모리 안전성과 동시성 기능은 자동차용 소프트웨어를 개발하는 데 우수한 선택지가 됩니다.\n\n러스트는 자동차의 다양한 구성 요소에 대한 소프트웨어를 개발하는 데 사용될 수 있습니다. 예를 들어 엔진 제어 장치, 인포테인먼트 시스템, 그리고 고급 운전 보조 시스템(ADAS) 등이 포함됩니다.\n\n<div class=\"content-ad\"></div>\n\n## Devices\n\nRust의 메모리 안전 및 제어에 대한 초점은 다양한 장치용 소프트웨어 개발에 우수한 선택지입니다.\n\nRust의 동시성 처리 능력 또한 실시간 처리가 필요한 장치용 소프트웨어 개발에 적합합니다.\n\nRust는 카메라, 스마트 홈 장치 및 웨어러블을 포함한 다양한 장치용 소프트웨어 개발에 사용할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n## AR/VR\n\n증강 현실 (AR) 및 가상 현실 (VR)은 점점 인기를 끌고 있으며, Rust는 이 분야에서 많은 사용 사례를 발견했습니다.\n\nRust의 저수준 제어 및 메모리 안전성은 낮은 지연 시간과 높은 성능이 필요한 실시간 애플리케이션을 개발하기에 적합합니다.\n\nRust의 동시성 기능을 사용하면 여러 스레드를 효율적으로 처리할 수 있으므로 AR/VR 애플리케이션을 개발하는 데 필수적입니다.\n\n<div class=\"content-ad\"></div>\n\n## 기계 학습\n\n기계 학습은 또 다른 분야로, Rust가 많은 사용 사례를 발견한 곳입니다.\n\nRust의 성능 및 메모리 안전성은 기계 학습 알고리즘을 개발하는 우수한 선택으로 만들어 줍니다.\n\nRust의 동시성 기능은 여러 스레드를 효율적으로 처리할 수 있도록 만들어 주어, 고성능의 기계 학습 응용 프로그램을 개발하는 데 필수적입니다.\n\n<div class=\"content-ad\"></div>\n\nRust의 메모리 안전성으로 작성된 기계 학습 코드를 보다 안전하게 작성할 수 있습니다.\n\n## 게임\n\nRust는 게임 산업에서 다양한 사용 사례를 찾을 수 있습니다.\n\nRust의 성능과 메모리 안전성은 낮은 지연 시간과 높은 성능이 필요한 게임을 개발하는 데 우수한 선택지로 만듭니다.\n\n<div class=\"content-ad\"></div>\n\nRust의 동시성 기능은 여러 스레드를 효율적으로 처리할 수 있게 해주어 복잡한 게임 엔진을 개발하는 데 중요합니다.\n\n## 네트워크 프로그래밍\n\nRust의 저수준 제어 및 메모리 안전성은 네트워크 응용 프로그램을 개발하는 데 탁월한 선택지로 만듭니다.\n\nRust의 동시성 기능 덕분에 여러 네트워크 연결을 효율적으로 처리할 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n러스트의 메모리 안전성 덕분에 안전한 네트워크 코드를 작성하기가 더 쉬워졌어요. \n\n## 러스트로 CLI 앱을 쉽게 작성할 수 있을까요?\n\n음, 제가 시도해본 결과 15줄짜리 간단한 CLI 앱을 Rust로 변환해보려고 했어요. 이 CLI 앱은 최신 NodeJS를 다운로드하고 이 버전을 현재 Node 버전으로 설정하는 작업입니다.\n\n그러나 결과적으로 작성한 코드는 30줄 이상이 되었고, 새로운 Rust 개발자에게는 이해하기 어렵더라구요. 반면, bash로 작성된 코드는 읽기 쉽고 무엇을 하는지 이해하기 쉬워요.\n\n<div class=\"content-ad\"></div>\n\n해당 bash 코드는 https://medium.com/@dansalias/node-versions-without-nvm-cb9cdc0566b6에서 Daniel Young이 작성한 코드입니다.\n\n아래는 제 Rust 코드입니다:-\n\n```js\nuse std::env;\nuse std::fs;\nuse std::io::{self, Write};\nuse std::process::{Command, ExitStatus};\n\nfn prepare() -> io::Result<()> {\n    let directory = format!(\"{}/.node-versions\", env::var(\"HOME\").unwrap());\n    fs::create_dir_all(directory)?;\n    Ok(())\n}\n\nfn install(version: &str) -> io::Result<()> {\n    prepare()?;\n\n    let package = format!(\"node-v{}-linux-x64.tar.xz\", version);\n    let url = format!(\"https://nodejs.org/download/release/v{}/{}\", version, package);\n    let output = Command::new(\"wget\").arg(&url).arg(\"-P\").arg(&format!(\"{}/.node-versions\", env::var(\"HOME\").unwrap())).output()?;\n    print_output(&output);\n\n    let output = Command::new(\"tar\").arg(\"-xf\").arg(format!(\"{}/.node-versions/{}\", env::var(\"HOME\").unwrap(), package)).arg(\"-C\").arg(format!(\"{}/.node-versions\", env::var(\"HOME\").unwrap())).output()?;\n    print_output(&output);\n\n    Ok(())\n}\n\nfn switch(version: &str) -> io::Result<()> {\n    let node_path = format!(\"{}/.local/bin/node\", env::var(\"HOME\").unwrap());\n    let npm_path = format!(\"{}/.local/bin/npm\", env::var(\"HOME\").unwrap());\n    let node_version_path = format!(\"{}/.node-versions/node-v{}-linux-x64/bin/node\", env::var(\"HOME\").unwrap(), version);\n    let npm_version_path = format!(\"{}/.node-versions/node-v{}-linux-x64/bin/npm\", env::var(\"HOME\").unwrap(), version);\n\n    // Check if the specified Node version is installed\n    if !fs::metadata(&node_version_path).is_ok() {\n        writeln!(io::stderr(), \"Node version {} is not installed. Please install it first.\", version)?;\n        std::process::exit(1);\n    }\n\n    // Remove existing Node and npm symlinks, if they exist\n    let _ = fs::remove_file(&node_path);\n    let _ = fs::remove_file(&npm_path);\n\n    // Create new symlinks\n    let _ = std::os::unix::fs::symlink(&node_version_path, &node_path)?;\n    let _ = std::os::unix::fs::symlink(&npm_version_path, &npm_path)?;\n\n    Ok(())\n}\n\nfn print_output(output: &std::process::Output) {\n    io::stdout().write_all(&output.stdout).unwrap();\n    io::stderr().write_all(&output.stderr).unwrap();\n}\n\nfn print_usage() {\n    println!(\"Usage: node-switch <command> [version]\");\n    println!(\"Commands:\");\n    println!(\"  prepare              Create the .node-versions directory\");\n    println!(\"  install <version>    Download and install the specified Node version\");\n    println!(\"  switch <version>     Switch to the specified Node version\");\n}\n\nfn main() -> io::Result<()> {\n    let args: Vec<String> = env::args().collect();\n\n    if args.len() < 2 {\n        print_usage();\n        return Ok(());\n    }\n\n    match args[1].as_str() {\n        \"prepare\" => prepare(),\n        \"install\" => install(&args[2]),\n        \"switch\" => switch(&args[2]),\n        _ => {\n            print_usage();\n            Ok(())\n        }\n    }\n}\n```\n\n저는 bash 쉘 스크립트보다 Rust에서 CLI 앱을 작성하는 것이 더 쉽다고 말하고 싶습니다. 그러나 하드웨어 자원이 제한된 경우에는 Rust를 사용하여 CLI 앱을 작성하는 것이 가장 좋습니다.\n\n<div class=\"content-ad\"></div>\n\n블로고.io를 사용하여 게시된 글이에요. 무료로 사용해보세요.","ogImage":{"url":"/assets/img/2024-06-19-10BestUseCasesofRustProgrammingLanguagein2023_0.png"},"coverImage":"/assets/img/2024-06-19-10BestUseCasesofRustProgrammingLanguagein2023_0.png","tag":["Tech"],"readingTime":8},{"title":"레일즈 앱에 클래스 레벨 콜백을 추가해보세요","description":"","date":"2024-06-19 22:14","slug":"2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks","content":"\n\n<img src=\"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png\" />\n\n# 소개\n\n지난 주에는 ActiveJob의 결과를 처리해야 하는 기능을 작업했습니다. 해당 작업은 젬 내에 존재했고, 호스트 애플리케이션의 클래스에서 메소드를 호출하기 위해 젬을 수정해야 했습니다. 이 상황은 클래스 인스턴스와는 독립적으로 처리되어야 했기 때문에 클래스 수준의 콜백이 필요했습니다.\n\n# Rails에서 콜백 이해하기\n\n<div class=\"content-ad\"></div>\n\n콜백은 객체의 라이프사이클 중 특정 시점에 호출되는 메서드입니다. Rails에서는 콜백이 널리 사용되어 객체의 생성, 업데이트 및 삭제 중에 코드를 자동으로 실행합니다. 콜백에 대해 더 알고 싶다면 Rails 가이드의 콜백 섹션을 참조해보세요. \n\n# 예시 코드\n\n## ActiveJob의 젬\n\n여기에는 호스트 애플리케이션의 클래스에서 메서드를 호출해야 하는 젬 내의 작업이 있습니다:\n\n<div class=\"content-ad\"></div>\n\n\n# ActiveJob in the gem\nclass MyJob < ActiveJob::Base\n  def perform\n    result = # perform the job and get the result\n    if ModelName.respond_to?(:after_result, true)\n      ModelName.after_result { result }\n    end\n  end\nend\n\n\n이 스니펫에서는 호스트 애플리케이션의 ModelName 클래스가 after_result 클래스 메소드를 갖고 있는지 확인합니다. 해당 메소드가 있다면 블록을 사용하여 작업 결과를 이 메소드로 전달합니다.\n\n## Host Application Class Method\n\n호스트 애플리케이션에서는 클래스 내에 after_result 메소드를 정의합니다.\n\n\n<div class=\"content-ad\"></div>\n\n\n# 호스트 응용프로그램의 클래스\nClass ModelName\n  def self.after_result\n    result = yield if block_given?\n    process(result) if result.present?\n  end\n\n  def self.process(result)\n    # 결과를 처리합니다\n  end\nend\n\n\n여기서 yield는 작업 결과를 after_result 메서드로 전달하며, 결과가 있는 경우 처리합니다.\n\n## 인스턴스 메서드 콜백\n\n인스턴스 메서드와 Rails 콜백을 사용한다면 조금 다르게 보일 것입니다. define_callbacks와 set_callback을 사용하여 클래스 인스턴스에서 콜백을 정의할 수 있습니다.\n\n\n<div class=\"content-ad\"></div>\n\n```ruby\n# 호스트 응용 프로그램의 클래스\nclass ModelName\n  define_callbacks :result\n  set_callback :result, :after, :after_result, if: -> { respond_to?(:after_result, true) }\n\n  def after_result\n    result = yield if block_given?\n    process(result) if result.present?\n  end\n\n  def process(result)\n    # 결과 처리\n  end\nend\n```\n\n이 예에서 after_result는 인스턴스 메서드입니다. :result 콜백을 정의하고, :result 콜백이 트리거된 후에 after_result 메서드가 실행되어야 함을 지정합니다.\n\n## 젬 내 수정된 ActiveJob\n\n인스턴스 메서드 콜백을 사용하려면 작업을 다음과 같이 수정하십시오:\n\n<div class=\"content-ad\"></div>\n\n```js\n# ActiveJob in the gem\nclass MyJob < ActiveJob::Base\n  def perform(instance)\n    result = # perform the job and get the result\n    if instance.respond_to?(:after_result, true)\n      instance.run_callbacks(:result) { result }\n    end\n  end\nend\n```\n\n여기서 instance는 호스트 애플리케이션의 ModelName의 인스턴스입니다. after_result에 응답하는지 확인하고 :result 콜백을 실행합니다.\n\n# 결론\n\n클래스 메서드를 콜백으로 사용하는 방법과 인스턴스 메서드에 대해 Rails의 set_callback을 활용하는 방법을 다루었습니다. 사용 사례에 따라 클래스 수준 또는 인스턴스 수준 메서드가 필요한 경우 적절한 콜백 메커니즘을 구현할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png"},"coverImage":"/assets/img/2024-06-19-EnhanceYourRailsAppwithClass-LevelCallbacks_0.png","tag":["Tech"],"readingTime":3},{"title":"Ruby on Rails 응용 프로그램을 PostgreSQL을 사용하여 VPS에 Kamal을 이용하여 배포하는 단계별 안내","description":"","date":"2024-06-19 22:12","slug":"2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal","content":"\n\n![image](/assets/img/2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal_0.png)\n\n이 튜토리얼에서는 DigitalOcean에서 제공하는 Virtual Private Server (VPS)에 Ruby on Rails 애플리케이션을 PostgreSQL 데이터베이스와 함께 배포하는 과정을 안내하겠습니다. Docker 기반 애플리케이션을 자동화하는 배포 도구 인 Kamal을 활용하여 배포 프로세스를 자동화할 것입니다.\n\n# 전제 조건\n\n시작하기 전에 다음 사항을 갖추었는지 확인하세요:\n\n<div class=\"content-ad\"></div>\n\n- PostgreSQL이 구성된 Ruby on Rails 애플리케이션.\n- VPS (droplet)가 프로비저닝되어 SSH 액세스가 설정된 DigitalOcean 계정. 원하는 제공업체를 사용해도 됩니다.\n\n# 단계 1: Kamal 설치\n\n로컬 머신에 Kamal이 설치되어 있는지 확인하세요. RubyGems를 통해 설치할 수 있습니다:\n\n```js\ngem install kamal\n```\n\n<div class=\"content-ad\"></div>\n\n# 단계 2: 배포 설정 구성\n\n프로젝트 디렉토리로 이동한 다음 다음을 실행하세요:\n\n```js\nkamal init\n```\n\n이 명령은 deploy.yml 설정 파일을 생성하고 다른 몇 가지 파일을 함께 생성합니다. deploy.yml 구성 파일의 여러 섹션을 이해해 봅시다.\n\n<div class=\"content-ad\"></div>\n\n```js\n# 애플리케이션의 이름. 고유하게 컨테이너를 구성하는 데 사용됩니다.\nservice: mynewapp\n```\n\n애플리케이션의 이름을 지정합니다. 이는 애플리케이션과 관련된 컨테이너를 고유하게 구성하는 데 사용됩니다.\n\n```js\n# 컨테이너 이미지의 이름.\nimage: talha/mynewapp\n```\n\n애플리케이션에 대한 Docker 컨테이너 이미지의 이름을 지정합니다. talha/mynewapp를 Docker Hub 저장소의 이름으로 교체하세요.\n\n\n<div class=\"content-ad\"></div>\n\n```js\n# 이러한 서버에 배포할 수 있습니다.\n서버:\n  웹:\n    호스트:\n      - 123.123.45.678\n    라벨:\n      traefik.http.routers.mynewapp.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp.entrypoints: websecure\n      traefik.http.routers.mynewapp_secure.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp_secure.tls: true\n      traefik.http.routers.mynewapp_secure.tls.certresolver: letsencrypt\n    옵션:\n      네트워크: \"private\"\n```\n\n어플리케이션이 배포될 서버를 정의하고, HTTP 요청을 앱에 라우팅하고 TLS/SSL 암호화를 활성화하기 위한 Traefik 설정을 구성합니다.\n\n```js\n# 이미지 호스트에 대한 자격 증명.\n레지스트리:\n  사용자 이름:\n    - KAMAL_REGISTRY_USERNAME\n  비밀번호:\n    - KAMAL_REGISTRY_PASSWORD\n```\n\n어플리케이션 이미지가 호스팅된 Docker 이미지 레지스트리에 액세스하는 자격 증명을 지정합니다. KAMAL_REGISTRY_USERNAME 및 KAMAL_REGISTRY_PASSWORD를 Docker 허브 자격 증명으로 교체하세요.\n\n<div class=\"content-ad\"></div>\n\n```yaml\n# 컨테이너에 환경 변수 주입 (시크릿은 .env에서 온다).\n# 변경 후 `kamal env push`를 실행하는 것을 잊지 마세요!\nenv:\n  clear:\n    RAILS_ENV: production\n    RACK_ENV: production\n    RAILS_LOG_TO_STDOUT: true\n    RAILS_SERVE_STATIC_FILES: true\n  secret:\n    - RAILS_MASTER_KEY\n    - SMTP_PASSWORD\n    - SMTP_SERVER\n    - SMTP_LOGIN\n    - DB_HOST\n    - POSTGRES_USER\n    - POSTGRES_PASSWORD\n```\n\n컨테이너의 환경 변수를 지정합니다. clear 변수는 공개적으로 접근 가능하며, 시크릿 변수는 비공개로 유지됩니다. 이러한 변수는 .env 파일에서 가져옵니다.\n\n```yaml\n# root가 아닌 다른 ssh 사용자 사용\nssh:\n  user: deploy\n```\n\n- 서버에 액세스하는 데 사용할 SSH 사용자를 지정합니다. 이 경우 사용자는 deploy입니다.\n\n<div class=\"content-ad\"></div>\n\n```yaml\n# 빌더 설정 구성.\n빌더:\n  원격:\n    아키텍처: amd64\r\n```\n\n빌더 설정을 구성하여 응용 프로그램을 빌드할 원격 서버의 아키텍처를 지정합니다. 위의 구성은 Apple Silicon에서 개발하고 있지만 amd64 도커 이미지만 빌드하려는 경우 유용합니다.\n\n```yaml\n# 부가 서비스 사용 (비밀은 .env에서 제공됨).\n부가서비스:\n  db:\n    이미지: postgres:16.0\n    호스트: 123.123.45.678\n    환경:\n      클리어:\n        POSTGRES_USER: \"mynewapp\"\n        POSTGRES_DB: 'mynewapp_production'\n      시크릿:\n        - POSTGRES_PASSWORD\n        - POSTGRES_USER\n    파일:\n      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql\n    디렉토리:\n      - data:/var/lib/postgresql/data\n    옵션:\n      네트워크: \"private\"\r\n```\n\n응용 프로그램에서 필요한 추가 서비스를 정의합니다. 이 경우 지정된 버전과 환경 변수를 갖는 PostgreSQL 데이터베이스 서비스를 구성합니다. 파일 지시문을 사용하여 자체 엔트리포인트를 제공할 수 있습니다. config/init.sql은 config/database.yml 구성에서 예상한대로 데이터베이스를 생성해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n```js\r\nCREATE DATABASE mynewapp_production;\r\n```\r\n\r\n위 명령어를 사용하여 새로운 파일 config/init.sql을 만들어주세요.\r\n\r\n```js\r\nproduction:\r\n  <<: *default\r\n  database: mynewapp_production\r\n  username: <%= ENV[\"POSTGRES_USER\"] %>\r\n  password: <%= ENV[\"POSTGRES_PASSWORD\"] %>\r\n  host: <%= ENV[\"DB_HOST\"] %>\r\n```\r\n\r\n또한, 위와 같이 database.yml 파일을 업데이트하여 프로덕션 DB 구성을 업데이트해주세요.\n\n<div class=\"content-ad\"></div>\n\n```yaml\ntraefik:\n  options:\n    publish:\n      - \"443:443\"\n    volume:\n      - \"/letsencrypt/acme.json:/letsencrypt/acme.json\"\n    network: \"private\"\n  args:\n    entryPoints.web.address: \":80\"\n    entryPoints.websecure.address: \":443\"\n    entryPoints.web.http.redirections.entryPoint.to: websecure\n    entryPoints.web.http.redirections.entryPoint.scheme: https\n    entryPoints.web.http.redirections.entrypoint.permanent: true\n    certificatesResolvers.letsencrypt.acme.email: \"info@mynewapp.com\"\n    certificatesResolvers.letsencrypt.acme.storage: \"/letsencrypt/acme.json\"\n    certificatesResolvers.letsencrypt.acme.httpchallenge: true\n    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web\n```\n\nTraefik을 설정하여 HTTPS 요청을 처리하고 Let's Encrypt를 사용하여 SSL 인증서를 자동으로 관리하도록 구성합니다.\n\n아래에 완전한 deploy.yml 파일을 찾을 수 있어요:\n\n```yaml\n# 애플리케이션의 이름. 컨테이너를 고유하게 설정하는 데 사용됩니다.\nservice: mynewapp\n\n# 컨테이너 이미지의 이름입니다.\nimage: talha/mynewapp\n\n# 이 서버로 배포합니다.\nservers:\n  web:\n    hosts:\n      - 123.123.45.678\n    labels:\n      traefik.http.routers.mynewapp.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp.entrypoints: websecure\n      traefik.http.routers.mynewapp_secure.rule: Host(`mynewapp.com`)\n      traefik.http.routers.mynewapp_secure.tls: true\n      traefik.http.routers.mynewapp_secure.tls.certresolver: letsencrypt\n    options:\n      network: \"private\"\n\n# 이미지 호스트의 자격 증명입니다.\nregistry:\n  username:\n    - KAMAL_REGISTRY_USERNAME\n  password:\n    - KAMAL_REGISTRY_PASSWORD\n\n# 컨테이너로 ENV 변수를 주입합니다(비밀은 .env에서 가져옵니다).\n# 변경 후 `kamal env push`를 실행하는 것을 잊지 마세요!\nenv:\n  clear:\n    RAILS_ENV: production\n    RACK_ENV: production\n    RAILS_LOG_TO_STDOUT: true\n    RAILS_SERVE_STATIC_FILES: true\n  secret:\n    - RAILS_MASTER_KEY\n    - SMTP_PASSWORD\n    - SMTP_SERVER\n    - SMTP_LOGIN\n    - DB_HOST\n    - POSTGRES_USER\n    - POSTGRES_PASSWORD\n\n# root가 아닌 다른 ssh 사용자를 사용합니다.\nssh:\n  user: deploy\n\n# 빌더 설정을 구성합니다.\nbuilder:\n  remote:\n    arch: amd64\n\n# 보조 서비스를 사용합니다(비밀은 .env에서 가져옵니다).\naccessories:\n  db:\n    image: postgres:16.0\n    host: 123.123.45.678\n    env:\n      clear:\n        POSTGRES_USER: \"mynewapp\"\n        POSTGRES_DB: 'mynewapp_production'\n      secret:\n        - POSTGRES_PASSWORD\n        - POSTGRES_USER\n    files:\n      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql\n    directories:\n      - data:/var/lib/postgresql/data\n    options:\n      network: \"private\"\n\ntraefik:\n  options:\n    publish:\n      - \"443:443\"\n    volume:\n      - \"/letsencrypt/acme.json:/letsencrypt/acme.json\"\n    network: \"private\"\n  args:\n    entryPoints.web.address: \":80\"\n    entryPoints.websecure.address: \":443\"\n    entryPoints.web.http.redirections.entryPoint.to: websecure\n    entryPoints.web.http.redirections.entryPoint.scheme: https\n    entryPoints.web.http.redirections.entrypoint.permanent: true\n    certificatesResolvers.letsencrypt.acme.email: \"info@mynewapp.com\"\n    certificatesResolvers.letsencrypt.acme.storage: \"/letsencrypt/acme.json\"\n    certificatesResolvers.letsencrypt.acme.httpchallenge: true\n    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web\n\nasset_path: /rails/public/assets\n``` \n\n\n<div class=\"content-ad\"></div>\n\n위의 예시를 참고하여 실제 애플리케이션 이름, 도메인 및 서버 IP 주소로 mynewapp, mynewapp.com 및 123.123.45.678와 같은 자리 표시자를 교체해주세요.\n\n# 단계 3: 배포 사용자 생성\n\nVPS에 SSH로 접속하고 새로운 사용자 deploy를 만들어보세요. 아래 명령어를 실행하세요.\n\n로컬 머신에서 터미널을 열고 SSH를 사용하여 VPS에 연결합니다. 실제 VPS의 IP 주소로 your_server_ip를 교체해주세요.\n\n<div class=\"content-ad\"></div>\n\n```sh\nssh root@your_server_ip\n```\n\n다음 명령어를 실행하여 새로운 사용자 deploy를 생성하세요:\n\n```sh\nadduser deploy\n```\n\n새 사용자에 대한 암호를 설정하고 추가 정보를 입력하라는 프롬프트가 표시됩니다. 선택 사항을 건너뛰려면 Enter 키를 누르세요.\n\n<div class=\"content-ad\"></div>\n\n(선택사항) 배포 사용자에게 sudo 권한을 부여하고 싶다면 다음 명령을 실행하여 sudo 그룹에 추가할 수 있습니다:\n\n```js\nusermod -aG sudo deploy\n```\n\n# 단계 4: VPS에 Docker 설치하기:\n\nDocker를 설치하기 전에 패키지 인덱스를 업데이트하는 것이 좋은 실천법입니다:\n\n<div class=\"content-ad\"></div>\n\n```js\napt update\n```\n\nHTTPS를 통해 저장소를 사용할 수 있도록 패키지를 설치하고 Docker에 필요한 몇 가지 패키지를 설치하세요:\n\n```js\napt install -y apt-transport-https ca-certificates curl software-properties-common\n```\n\n시스템에 Docker의 공식 GPG 키를 추가하세요.\n\n\n<div class=\"content-ad\"></div>\n\n```js\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\nDocker 리포지토리를 APT 원본에 추가하세요:\n\n```js\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\n한번 더 패키지 인덱스를 업데이트하세요:\n\n<div class=\"content-ad\"></div>\n\n```bash\napt update\n```\n\n최신 버전의 Docker CE (Community Edition)와 containerd를 함께 설치하려면:\n\n```bash\napt install -y docker-ce docker-ce-cli containerd.io \n```\n\nDocker 서비스를 시작하고 부팅 시 자동으로 시작되도록 설정하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\nsystemctl start docker\nsystemctl enable docker\n```\n\n다음 명령어를 실행하여 Docker가 올바르게 설치되었는지 확인하세요. 이 명령은 Docker 버전 정보를 출력해야 합니다:\n\n```js\ndocker --version\n```\n\n마지막으로, 프라이빗 Docker 네트워크를 생성하세요.\n\n<div class=\"content-ad\"></div>\n\n```js\n도커 네트워크 생성 -d bridge private\n```\n\n# 단계 5: LetsEncrypt 설치하기:\n\n로컬 머신에서 터미널을 열고 SSH를 사용하여 VPS에 연결합니다. 실제 VPS의 IP 주소로 your_server_ip를 대체하십시오.\n\n```js\nssh root@your_server_ip\n```\n\n<div class=\"content-ad\"></div>\n\n다음 명령을 사용하여 Let's Encrypt 디렉토리를 설정하세요:\n\n```js\nmkdir -p /letsencrypt && touch /letsencrypt/acme.json && chmod 600 /letsencrypt/acme.json\n```\n\n# 단계 6: 애플리케이션 배포\n\n처음부터 모든 단계를 거쳐 config/deploy.yml 파일을 작성했고 배포할 준비가 되었다면, 다음을 실행하세요:\n\n<div class=\"content-ad\"></div>\n\n\n```js\nkamal setup\n```\n\n# Step 7: 일일 업무 흐름\n\n카말의 명령어를 사용하여 매일 배포 작업을 수행하세요:\n\n앱의 새 버전을 배포하려면:\n\n\n<div class=\"content-ad\"></div>\n\n```js\nkamal deploy\n```\n\n환경 변수를 업데이트하려면:\n\n```js\nkamal env push\n```\n\n새 컨테이너에서 bash 세션을 시작하려면:\n\n<div class=\"content-ad\"></div>\n\n```js\nkamal app exec -i bash\n```\n\n새로운 컨테이너에서 Rails 콘솔을 시작하려면:\n\n```js\nkamal app exec -i ‘bin/rails console’\n```\n\n로그 보기:\n\n<div class=\"content-ad\"></div>\n\n```js\nkamal 앱 로그\n```\n\n# 결론\n\n축하합니다! 카말(Kamal)을 사용하여 디지턈오션(DigitalOcean) VPS에서 PostgreSQL과 함께 루비 온 레일즈(Ruby on Rails) 애플리케이션을 성공적으로 배포했습니다. 이제 구성된 도메인 이름으로 애플리케이션에 액세스할 수 있습니다. 🚀\n\n이 포스트가 마음에 들었다면 좋아요를 눌러 주시고 미디엄(Medium)과 트위터(Twitter)에서도 저를 팔로우해주세요(https://twitter.com/royalty568).\n\n<div class=\"content-ad\"></div>\n\n시간을 절약하고 앱을 즉시 구축하고자 한다면 Rails 보일러플레이트를 찾고 계신 것 같네요. https://talha345.gumroad.com/l/rails7-bootstrap5-devise-fa-psql-boldo-boilerplate 를 확인해보세요!","ogImage":{"url":"/assets/img/2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal_0.png"},"coverImage":"/assets/img/2024-06-19-Step-by-StepGuidetoDeployingaRubyonRailsApplicationwithPostgreSQLonVPSusingKamal_0.png","tag":["Tech"],"readingTime":10},{"title":"Rails 7 폼 제출과 Turbo Stream  폼 제출 실패시 에러 표시","description":"","date":"2024-06-19 22:11","slug":"2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission","content":"\n\n# 소개\n\nHotwire 스위트의 일부인 Turbo Stream은 Rails 애플리케이션에서 실시간 업데이트를 처리하는 우아한 방법을 제공합니다. Rails 7에서 Turbo Stream을 사용하여 양식 제출을 관리하는 것은 더욱 강력하고 간소화되었습니다. 이 블로그 포스트에서는 양식 제출이 실패할 때 오류를 우아하게 처리하여 유연한 사용자 경험을 제공하는 방법에 대해 살펴보겠습니다.\n\n# 전제 조건\n\n시작하기 전에 다음 사항을 확인하세요:\n\n<div class=\"content-ad\"></div>\n\n- Rails 7 애플리케이션을 설정했어요.\n- Turbo와 Stimulus 라이브러리가 프로젝트에 포함되어 있어요. (이들은 Rails 7 앱에서 기본으로 제공돼요)\n\n# 단계 1: 모델 및 컨트롤러 설정하기\n\n간단한 모델과 컨트롤러를 설정해볼게요. 데모를 위해 간단한 제목과 본문을 가진 Post 모델을 만들고, PostsController에서 폼 제출을 처리할 거예요.\n\n## 모델 및 컨트롤러 생성하기\n\n<div class=\"content-ad\"></div>\n\n## 유효성 정의\n\nPost 모델 (app/models/post.rb) 에 몇 가지 유효성을 추가해보세요:\n\n```rb\nclass Post < ApplicationRecord\n validates :title, presence: true\n validates :body, presence: true\nend\n```\n\n# 단계 2: 폼 생성하기\n\n<div class=\"content-ad\"></div>\n\n다음으로, 새로운 게시물을 제출하기 위한 양식을 만들어보겠습니다. PostsController에서 new 및 create 액션을 정의하세요:\n\n```js\nclass PostsController < ApplicationController\n  def new\n    @post = Post.new\n  end\n\n  def create\n    @post = Post.new(post_params)\n    if @post.save\n      redirect_to @post, notice: '게시물이 성공적으로 생성되었습니다.'\n    else\n      render :new, status: :unprocessable_entity\n    end\n  end\n\n  private\n\n  def post_params\n    params.require(:post).permit(:title, :body)\n  end\nend\n```\n\n# 단계 3: 뷰 작성\n\n## 양식 부분\n\n<div class=\"content-ad\"></div>\n\n폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/_form.html.erb):\n\n```ruby\n<%= form_for post, html: { class: 'row' } do |f| %>\n  <div class=\"col-auto\">\n    <%= f.label :title, class: 'form-label' %>\n    <%= f.text_field :title, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto\">\n    <%= f.label :body, class: 'form-label' %>\n    <%= f.text_area :body, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto mt-4\">\n    <%= f.submit class: 'btn btn-primary' %>\n  </div>\n<% end %>\n```\n\n폼 부분을 생성하려면 다음 파일을 만드세요 (app/views/posts/new.html.erb):\n\n```ruby\n<h2>새 글 작성하기</h2>\n<%= render 'form', post: @post %>\n```\n\n<div class=\"content-ad\"></div>\n\n# 이제 레일즈 7에서 오류가 발생합니다.\n새로운 포스트를 생성하기 위해 폼을 제출할 때.\n\n```js\nturbo.es2017-esm.js:2115 Error: Form responses must redirect to another location\n    at FormSubmission.requestSucceededWithResponse (turbo.es2017-esm.js:679:27)\n    at FetchRequest.receive (turbo.es2017-esm.js:450:27)\n    at FetchRequest.perform (turbo.es2017-esm.js:431:31)\n```\n\n이것은 모든 링크 클릭과 폼 제출이 이제 레일즈 7에서 TURBO_STREAM 요청이 되었기 때문에 발생합니다.\n더 빠른 응답을 얻기 위해서이며, TURBO_STREAM 요청을 만들기 위한 명시적 코드를 작성할 필요가 없습니다.\n\nTURBO_STREAM 요청이 하는 일은 무엇인가요?\n\n<div class=\"content-ad\"></div>\n\n일반적으로 전체 페이지를 다시로드하지 않고 페이지에 터보 프레임을 업데이트합니다.\n\n해결하는 방법은\n\n이 문제를 해결하려면\n\n이렇게 컨트롤러에서 TURBO_STREAM 요청을 처리해야 합니다.\n\n```js\n  def create\n    @post = Post.new(post_params)\n    if @post.save\n      redirect_to @post, notice: '게시물이 성공적으로 생성되었습니다.'    \n    else\n      respond_to do |format|\n        format.turbo_stream { render turbo_stream: turbo_stream.replace(@post, partial: 'posts/form', locals: { post: @post }) }\n        format.html { render :new }\n      end\n    end\n  end\n```\n\n<div class=\"content-ad\"></div>\n\n터보 스트림.replace 메소드는 레일즈의 Turbo Streams 라이브러리의 일부입니다. 이 메소드는 전체 페이지 새로고침 없이 페이지의 일부를 교체하는 Turbo Stream 액션을 생성합니다.\n\n다음은 이 메소드와 해당 속성에 대한 설명입니다:\n\n- format.turbo_stream: 이는 다음 블록이 Turbo Stream 요청에 응답하는 데 사용되어야 함을 지정합니다. Turbo Stream은 Hotwire 프레임워크의 일부로서 WebSocket을 통해 페이지의 특정 부분에 업데이트를 보낼 수 있게 합니다.\n- `render turbo_stream: turbo_stream.replace(@post, partial: 'posts/form', locals: { post: @post })`: 이는 Turbo Stream 요청에 대해 실행되는 블록입니다. 응답을 보내기 위해 render 메소드를 사용합니다.\n- turbo_stream.replace(@post, partial: `posts/form`, locals: { post: @post }): 이는 페이지의 일부를 교체하는 Turbo Stream 액션입니다. 새로운 콘텐츠로 Turbo Frame이나 Turbo Stream 요소를 교체하는 replace 메소드를 사용합니다.\n- @post: 이는 교체 액션의 대상입니다. 페이지에서 Turbo Frame이나 Turbo Stream 요소의 ID와 일치해야 합니다.\n- 지금은 대상이 form ID인 new_post인 경우가 있습니다. 첫 번째 인자에 @post를 전달했기 때문에 replace 메소드가 자동으로 form ID를 대상으로 설정합니다.\n- partial: 'posts/form': 이는 대상을 렌더링하고 교체할 부분을 지정합니다.\n- locals: { post: @post }: 이는 부분에 로컬 변수를 전달합니다. 이 경우 @post 인스턴스 변수를 post라는 로컬 변수로 전달합니다.\n\n또한, 폼 제출 실패를 처리하기 위해 뷰에 오류를 추가할 예정입니다.\n\n<div class=\"content-ad\"></div>\n\n\n## 게시물 생성하기\n\n```ruby\n<%= form_for post, html: { class: 'row' } do |f| %>\n  <% if post.errors.any? %>\n    <div class=\"col-12\">\n      <div class=\"alert alert-danger\">\n        <ul>\n          <% post.errors.full_messages.each do |message| %>\n            <li><%= message %></li>\n          <% end %>\n        </ul>\n      </div>\n    </div>\n  <% end %>\n\n  <div class=\"col-auto\">\n    <%= f.label :title, class: 'form-label' %>\n    <%= f.text_field :title, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto\">\n    <%= f.label :body, class: 'form-label' %>\n    <%= f.text_area :body, class: 'form-control' %>\n  </div>\n  <div class=\"col-auto mt-4\">\n    <%= f.submit class: 'btn btn-primary' %>\n  </div>\n<% end %>\n```\n\n이렇게 수정하면 우리는 Rails 7에서 양식 제출 실패를 처리하는 문제를 해결할 수 있습니다.\n\n# 결론: \n\nTurbo는 Basecamp에 의해 소개된 Hotwire 프레임워크의 일부입니다. 최소한의 JavaScript를 사용하여 HTML을 통해 전송함으로써 현대적인 웹 애플리케이션을 구축하는 방법을 제공하도록 설계되었습니다. Turbo에는 세 가지 주요 부분이 있습니다: Turbo Drive, Turbo Frames 및 Turbo Streams.\n\n\n<div class=\"content-ad\"></div>\n\n위 단계를 따라 하셨다면 Rails 7 애플리케이션에서 Turbo Stream을 성공적으로 구현하셨습니다. 이 방법을 통해 사용자 경험을 향상시켜 전체 페이지 새로고침 없이 즉각적인 피드백을 제공하고 Hotwire의 Turbo 라이브러리의 능력을 활용할 수 있습니다.","ogImage":{"url":"/assets/img/2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission_0.png"},"coverImage":"/assets/img/2024-06-19-Rails7FormsubmissionwithTurboStreamShowingerroronfailureofformsubmission_0.png","tag":["Tech"],"readingTime":6}],"page":"14","totalPageCount":98,"totalPageGroupCount":5,"lastPageGroup":20,"currentPageGroup":0},"__N_SSG":true}